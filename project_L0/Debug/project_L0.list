
project_L0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d54  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000630  08006e14  08006e14  00016e14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007444  08007444  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08007444  08007444  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007444  08007444  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007444  08007444  00017444  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007448  08007448  00017448  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  0800744c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000234  20000068  080074b4  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000029c  080074b4  0002029c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016946  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002da9  00000000  00000000  000369d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001218  00000000  00000000  00039780  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001088  00000000  00000000  0003a998  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000176da  00000000  00000000  0003ba20  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f8bd  00000000  00000000  000530fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008d445  00000000  00000000  000629b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000efdfc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042d4  00000000  00000000  000efe78  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006dfc 	.word	0x08006dfc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	08006dfc 	.word	0x08006dfc

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <SPI_CS_LOW>:
 */

#include "TFT_display.h"

// ---- lower level functions ----
void SPI_CS_LOW() {HAL_GPIO_WritePin(CS_GPIO, CS_PIN, GPIO_PIN_RESET);}
 80003f4:	b580      	push	{r7, lr}
 80003f6:	af00      	add	r7, sp, #0
 80003f8:	4b04      	ldr	r3, [pc, #16]	; (800040c <SPI_CS_LOW+0x18>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	2180      	movs	r1, #128	; 0x80
 80003fe:	0018      	movs	r0, r3
 8000400:	f003 f87d 	bl	80034fe <HAL_GPIO_WritePin>
 8000404:	46c0      	nop			; (mov r8, r8)
 8000406:	46bd      	mov	sp, r7
 8000408:	bd80      	pop	{r7, pc}
 800040a:	46c0      	nop			; (mov r8, r8)
 800040c:	50000800 	.word	0x50000800

08000410 <SPI_CS_HIGH>:

void SPI_CS_HIGH() {HAL_GPIO_WritePin(CS_GPIO, CS_PIN, GPIO_PIN_SET);}
 8000410:	b580      	push	{r7, lr}
 8000412:	af00      	add	r7, sp, #0
 8000414:	4b04      	ldr	r3, [pc, #16]	; (8000428 <SPI_CS_HIGH+0x18>)
 8000416:	2201      	movs	r2, #1
 8000418:	2180      	movs	r1, #128	; 0x80
 800041a:	0018      	movs	r0, r3
 800041c:	f003 f86f 	bl	80034fe <HAL_GPIO_WritePin>
 8000420:	46c0      	nop			; (mov r8, r8)
 8000422:	46bd      	mov	sp, r7
 8000424:	bd80      	pop	{r7, pc}
 8000426:	46c0      	nop			; (mov r8, r8)
 8000428:	50000800 	.word	0x50000800

0800042c <SPI_DC_LOW>:

void SPI_DC_LOW() {HAL_GPIO_WritePin(DC_GPIO, DC_PIN, GPIO_PIN_RESET);}
 800042c:	b580      	push	{r7, lr}
 800042e:	af00      	add	r7, sp, #0
 8000430:	4b04      	ldr	r3, [pc, #16]	; (8000444 <SPI_DC_LOW+0x18>)
 8000432:	2200      	movs	r2, #0
 8000434:	2140      	movs	r1, #64	; 0x40
 8000436:	0018      	movs	r0, r3
 8000438:	f003 f861 	bl	80034fe <HAL_GPIO_WritePin>
 800043c:	46c0      	nop			; (mov r8, r8)
 800043e:	46bd      	mov	sp, r7
 8000440:	bd80      	pop	{r7, pc}
 8000442:	46c0      	nop			; (mov r8, r8)
 8000444:	50000400 	.word	0x50000400

08000448 <SPI_DC_HIGH>:

void SPI_DC_HIGH() {HAL_GPIO_WritePin(DC_GPIO, DC_PIN, GPIO_PIN_SET);}
 8000448:	b580      	push	{r7, lr}
 800044a:	af00      	add	r7, sp, #0
 800044c:	4b04      	ldr	r3, [pc, #16]	; (8000460 <SPI_DC_HIGH+0x18>)
 800044e:	2201      	movs	r2, #1
 8000450:	2140      	movs	r1, #64	; 0x40
 8000452:	0018      	movs	r0, r3
 8000454:	f003 f853 	bl	80034fe <HAL_GPIO_WritePin>
 8000458:	46c0      	nop			; (mov r8, r8)
 800045a:	46bd      	mov	sp, r7
 800045c:	bd80      	pop	{r7, pc}
 800045e:	46c0      	nop			; (mov r8, r8)
 8000460:	50000400 	.word	0x50000400

08000464 <sendCommand>:

// still ripped but now im changing it
void sendCommand(uint8_t cmd, uint8_t *args, uint16_t numArgs, SPI_HandleTypeDef *hspi) {
 8000464:	b580      	push	{r7, lr}
 8000466:	b084      	sub	sp, #16
 8000468:	af00      	add	r7, sp, #0
 800046a:	60b9      	str	r1, [r7, #8]
 800046c:	0011      	movs	r1, r2
 800046e:	607b      	str	r3, [r7, #4]
 8000470:	230f      	movs	r3, #15
 8000472:	18fb      	adds	r3, r7, r3
 8000474:	1c02      	adds	r2, r0, #0
 8000476:	701a      	strb	r2, [r3, #0]
 8000478:	230c      	movs	r3, #12
 800047a:	18fb      	adds	r3, r7, r3
 800047c:	1c0a      	adds	r2, r1, #0
 800047e:	801a      	strh	r2, [r3, #0]
	while (HAL_SPI_GetState(hspi) == HAL_SPI_STATE_BUSY_TX);		// block next transfer request while DMA transfer is ongoing
 8000480:	46c0      	nop			; (mov r8, r8)
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	0018      	movs	r0, r3
 8000486:	f005 fb3f 	bl	8005b08 <HAL_SPI_GetState>
 800048a:	0003      	movs	r3, r0
 800048c:	2b03      	cmp	r3, #3
 800048e:	d0f8      	beq.n	8000482 <sendCommand+0x1e>
	SPI_CS_LOW();	// chip select
 8000490:	f7ff ffb0 	bl	80003f4 <SPI_CS_LOW>

	SPI_DC_LOW();	// command mode
 8000494:	f7ff ffca 	bl	800042c <SPI_DC_LOW>
	HAL_SPI_Transmit(hspi, &cmd, 1, 1000);	// not using DMA bc it's only 1 byte
 8000498:	23fa      	movs	r3, #250	; 0xfa
 800049a:	009b      	lsls	r3, r3, #2
 800049c:	220f      	movs	r2, #15
 800049e:	18b9      	adds	r1, r7, r2
 80004a0:	6878      	ldr	r0, [r7, #4]
 80004a2:	2201      	movs	r2, #1
 80004a4:	f005 f818 	bl	80054d8 <HAL_SPI_Transmit>

	SPI_DC_HIGH();	// data mode
 80004a8:	f7ff ffce 	bl	8000448 <SPI_DC_HIGH>
	if (numArgs) {
 80004ac:	230c      	movs	r3, #12
 80004ae:	18fb      	adds	r3, r7, r3
 80004b0:	881b      	ldrh	r3, [r3, #0]
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d007      	beq.n	80004c6 <sendCommand+0x62>
		HAL_SPI_Transmit_DMA(hspi, args, numArgs);
 80004b6:	230c      	movs	r3, #12
 80004b8:	18fb      	adds	r3, r7, r3
 80004ba:	881a      	ldrh	r2, [r3, #0]
 80004bc:	68b9      	ldr	r1, [r7, #8]
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	0018      	movs	r0, r3
 80004c2:	f005 f957 	bl	8005774 <HAL_SPI_Transmit_DMA>
	}

//	SPI_CS_HIGH();	// chip select disable
}
 80004c6:	46c0      	nop			; (mov r8, r8)
 80004c8:	46bd      	mov	sp, r7
 80004ca:	b004      	add	sp, #16
 80004cc:	bd80      	pop	{r7, pc}
	...

080004d0 <HAL_SPI_TxCpltCallback>:

// DMA callback on transfer compelete
// using only for sending data, but not commands
// dont send request when transfer is ongoing
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
	if (HAL_GPIO_ReadPin(CS_GPIO, CS_PIN) == GPIO_PIN_RESET) SPI_CS_HIGH();	// chip select disable
 80004d8:	4b06      	ldr	r3, [pc, #24]	; (80004f4 <HAL_SPI_TxCpltCallback+0x24>)
 80004da:	2180      	movs	r1, #128	; 0x80
 80004dc:	0018      	movs	r0, r3
 80004de:	f002 fff1 	bl	80034c4 <HAL_GPIO_ReadPin>
 80004e2:	1e03      	subs	r3, r0, #0
 80004e4:	d101      	bne.n	80004ea <HAL_SPI_TxCpltCallback+0x1a>
 80004e6:	f7ff ff93 	bl	8000410 <SPI_CS_HIGH>
}
 80004ea:	46c0      	nop			; (mov r8, r8)
 80004ec:	46bd      	mov	sp, r7
 80004ee:	b002      	add	sp, #8
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	46c0      	nop			; (mov r8, r8)
 80004f4:	50000800 	.word	0x50000800

080004f8 <displayInit>:

// array parser heavily based on Adafruit library code
void displayInit(uint8_t *args, SPI_HandleTypeDef *hspi) {
 80004f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004fa:	b085      	sub	sp, #20
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
 8000500:	6039      	str	r1, [r7, #0]
	uint8_t  numCommands, cmd, numArgs;
	uint16_t ms;
	uint8_t index = 0;
 8000502:	220b      	movs	r2, #11
 8000504:	0011      	movs	r1, r2
 8000506:	18bb      	adds	r3, r7, r2
 8000508:	2200      	movs	r2, #0
 800050a:	701a      	strb	r2, [r3, #0]
	uint8_t data;

	numCommands = args[index++];   // Number of commands to follow
 800050c:	000a      	movs	r2, r1
 800050e:	18bb      	adds	r3, r7, r2
 8000510:	781b      	ldrb	r3, [r3, #0]
 8000512:	18ba      	adds	r2, r7, r2
 8000514:	1c59      	adds	r1, r3, #1
 8000516:	7011      	strb	r1, [r2, #0]
 8000518:	001a      	movs	r2, r3
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	189a      	adds	r2, r3, r2
 800051e:	230f      	movs	r3, #15
 8000520:	18fb      	adds	r3, r7, r3
 8000522:	7812      	ldrb	r2, [r2, #0]
 8000524:	701a      	strb	r2, [r3, #0]
	while(numCommands--) {                 // For each command...
 8000526:	e05e      	b.n	80005e6 <displayInit+0xee>
		cmd = args[index++];         // Read command
 8000528:	200b      	movs	r0, #11
 800052a:	183b      	adds	r3, r7, r0
 800052c:	781b      	ldrb	r3, [r3, #0]
 800052e:	183a      	adds	r2, r7, r0
 8000530:	1c59      	adds	r1, r3, #1
 8000532:	7011      	strb	r1, [r2, #0]
 8000534:	001a      	movs	r2, r3
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	189a      	adds	r2, r3, r2
 800053a:	230a      	movs	r3, #10
 800053c:	18fb      	adds	r3, r7, r3
 800053e:	7812      	ldrb	r2, [r2, #0]
 8000540:	701a      	strb	r2, [r3, #0]
		numArgs  = args[index++];    // Number of args to follow
 8000542:	183b      	adds	r3, r7, r0
 8000544:	781b      	ldrb	r3, [r3, #0]
 8000546:	183a      	adds	r2, r7, r0
 8000548:	1c59      	adds	r1, r3, #1
 800054a:	7011      	strb	r1, [r2, #0]
 800054c:	001a      	movs	r2, r3
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	189a      	adds	r2, r3, r2
 8000552:	2609      	movs	r6, #9
 8000554:	19bb      	adds	r3, r7, r6
 8000556:	7812      	ldrb	r2, [r2, #0]
 8000558:	701a      	strb	r2, [r3, #0]
		ms       = numArgs & ST_CMD_DELAY;   // If hibit set, delay follows args
 800055a:	19bb      	adds	r3, r7, r6
 800055c:	781b      	ldrb	r3, [r3, #0]
 800055e:	b29a      	uxth	r2, r3
 8000560:	210c      	movs	r1, #12
 8000562:	187b      	adds	r3, r7, r1
 8000564:	2180      	movs	r1, #128	; 0x80
 8000566:	400a      	ands	r2, r1
 8000568:	801a      	strh	r2, [r3, #0]
		numArgs &= ~ST_CMD_DELAY;            // Mask out delay bit
 800056a:	19bb      	adds	r3, r7, r6
 800056c:	19ba      	adds	r2, r7, r6
 800056e:	7812      	ldrb	r2, [r2, #0]
 8000570:	217f      	movs	r1, #127	; 0x7f
 8000572:	400a      	ands	r2, r1
 8000574:	701a      	strb	r2, [r3, #0]
		sendCommand(cmd, &args[index], numArgs, hspi);
 8000576:	0005      	movs	r5, r0
 8000578:	183b      	adds	r3, r7, r0
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	687a      	ldr	r2, [r7, #4]
 800057e:	18d1      	adds	r1, r2, r3
 8000580:	19bb      	adds	r3, r7, r6
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	b29a      	uxth	r2, r3
 8000586:	683c      	ldr	r4, [r7, #0]
 8000588:	230a      	movs	r3, #10
 800058a:	18fb      	adds	r3, r7, r3
 800058c:	7818      	ldrb	r0, [r3, #0]
 800058e:	0023      	movs	r3, r4
 8000590:	f7ff ff68 	bl	8000464 <sendCommand>
		index += numArgs;
 8000594:	0028      	movs	r0, r5
 8000596:	183b      	adds	r3, r7, r0
 8000598:	1839      	adds	r1, r7, r0
 800059a:	19ba      	adds	r2, r7, r6
 800059c:	7809      	ldrb	r1, [r1, #0]
 800059e:	7812      	ldrb	r2, [r2, #0]
 80005a0:	188a      	adds	r2, r1, r2
 80005a2:	701a      	strb	r2, [r3, #0]

		if(ms) {
 80005a4:	210c      	movs	r1, #12
 80005a6:	187b      	adds	r3, r7, r1
 80005a8:	881b      	ldrh	r3, [r3, #0]
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d01b      	beq.n	80005e6 <displayInit+0xee>
			ms = args[index++]; // Read post-command delay time (ms)
 80005ae:	220b      	movs	r2, #11
 80005b0:	18bb      	adds	r3, r7, r2
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	18ba      	adds	r2, r7, r2
 80005b6:	1c59      	adds	r1, r3, #1
 80005b8:	7011      	strb	r1, [r2, #0]
 80005ba:	001a      	movs	r2, r3
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	189b      	adds	r3, r3, r2
 80005c0:	781a      	ldrb	r2, [r3, #0]
 80005c2:	210c      	movs	r1, #12
 80005c4:	187b      	adds	r3, r7, r1
 80005c6:	801a      	strh	r2, [r3, #0]
			if(ms == 255) ms = 500;     // If 255, delay for 500 ms
 80005c8:	187b      	adds	r3, r7, r1
 80005ca:	881b      	ldrh	r3, [r3, #0]
 80005cc:	2bff      	cmp	r3, #255	; 0xff
 80005ce:	d104      	bne.n	80005da <displayInit+0xe2>
 80005d0:	230c      	movs	r3, #12
 80005d2:	18fb      	adds	r3, r7, r3
 80005d4:	22fa      	movs	r2, #250	; 0xfa
 80005d6:	0052      	lsls	r2, r2, #1
 80005d8:	801a      	strh	r2, [r3, #0]
			HAL_Delay(ms);
 80005da:	230c      	movs	r3, #12
 80005dc:	18fb      	adds	r3, r7, r3
 80005de:	881b      	ldrh	r3, [r3, #0]
 80005e0:	0018      	movs	r0, r3
 80005e2:	f002 f8c5 	bl	8002770 <HAL_Delay>
	while(numCommands--) {                 // For each command...
 80005e6:	220f      	movs	r2, #15
 80005e8:	18bb      	adds	r3, r7, r2
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	18ba      	adds	r2, r7, r2
 80005ee:	1e59      	subs	r1, r3, #1
 80005f0:	7011      	strb	r1, [r2, #0]
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d198      	bne.n	8000528 <displayInit+0x30>
		}
	}

	// note: this line may be doing more work than I think
	// (hard to read in datasheet)
	data = 0xC0;
 80005f6:	2108      	movs	r1, #8
 80005f8:	187b      	adds	r3, r7, r1
 80005fa:	22c0      	movs	r2, #192	; 0xc0
 80005fc:	701a      	strb	r2, [r3, #0]
	sendCommand(ST77XX_MADCTL, &data, 1, hspi);
 80005fe:	683b      	ldr	r3, [r7, #0]
 8000600:	1879      	adds	r1, r7, r1
 8000602:	2201      	movs	r2, #1
 8000604:	2036      	movs	r0, #54	; 0x36
 8000606:	f7ff ff2d 	bl	8000464 <sendCommand>
}
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	46bd      	mov	sp, r7
 800060e:	b005      	add	sp, #20
 8000610:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08000614 <TFT_startup>:

void TFT_startup(SPI_HandleTypeDef *hspi) {
 8000614:	b590      	push	{r4, r7, lr}
 8000616:	b0a3      	sub	sp, #140	; 0x8c
 8000618:	af02      	add	r7, sp, #8
 800061a:	6078      	str	r0, [r7, #4]
	// startup sequence: rcmd1->rcmd2red->rcmd3
	uint8_t initCommands[] = {
 800061c:	240c      	movs	r4, #12
 800061e:	193a      	adds	r2, r7, r4
 8000620:	4b14      	ldr	r3, [pc, #80]	; (8000674 <TFT_startup+0x60>)
 8000622:	0010      	movs	r0, r2
 8000624:	0019      	movs	r1, r3
 8000626:	2371      	movs	r3, #113	; 0x71
 8000628:	001a      	movs	r2, r3
 800062a:	f005 ffd7 	bl	80065dc <memcpy>
			10,                           //     10 ms delay
		ST77XX_DISPON,    ST_CMD_DELAY, //  4: Main screen turn on, no args w/delay
			100	                        //     100 ms delay
	};

	displayInit(initCommands, hspi);
 800062e:	687a      	ldr	r2, [r7, #4]
 8000630:	193b      	adds	r3, r7, r4
 8000632:	0011      	movs	r1, r2
 8000634:	0018      	movs	r0, r3
 8000636:	f7ff ff5f 	bl	80004f8 <displayInit>
	setAddrWindow(0, 0, WIDTH, HEIGHT, hspi);
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	9300      	str	r3, [sp, #0]
 800063e:	23a0      	movs	r3, #160	; 0xa0
 8000640:	2280      	movs	r2, #128	; 0x80
 8000642:	2100      	movs	r1, #0
 8000644:	2000      	movs	r0, #0
 8000646:	f000 f821 	bl	800068c <setAddrWindow>

	// set the global variables
	cursorX = 0;
 800064a:	4b0b      	ldr	r3, [pc, #44]	; (8000678 <TFT_startup+0x64>)
 800064c:	2200      	movs	r2, #0
 800064e:	701a      	strb	r2, [r3, #0]
	cursorY = 0;
 8000650:	4b0a      	ldr	r3, [pc, #40]	; (800067c <TFT_startup+0x68>)
 8000652:	2200      	movs	r2, #0
 8000654:	701a      	strb	r2, [r3, #0]
	textSize = 1;
 8000656:	4b0a      	ldr	r3, [pc, #40]	; (8000680 <TFT_startup+0x6c>)
 8000658:	2201      	movs	r2, #1
 800065a:	701a      	strb	r2, [r3, #0]
	textColor = ST77XX_BLACK;
 800065c:	4b09      	ldr	r3, [pc, #36]	; (8000684 <TFT_startup+0x70>)
 800065e:	2200      	movs	r2, #0
 8000660:	801a      	strh	r2, [r3, #0]
	bg = ST77XX_WHITE;
 8000662:	4b09      	ldr	r3, [pc, #36]	; (8000688 <TFT_startup+0x74>)
 8000664:	2201      	movs	r2, #1
 8000666:	4252      	negs	r2, r2
 8000668:	801a      	strh	r2, [r3, #0]
}
 800066a:	46c0      	nop			; (mov r8, r8)
 800066c:	46bd      	mov	sp, r7
 800066e:	b021      	add	sp, #132	; 0x84
 8000670:	bd90      	pop	{r4, r7, pc}
 8000672:	46c0      	nop			; (mov r8, r8)
 8000674:	08006e14 	.word	0x08006e14
 8000678:	20000084 	.word	0x20000084
 800067c:	20000085 	.word	0x20000085
 8000680:	20000086 	.word	0x20000086
 8000684:	20000088 	.word	0x20000088
 8000688:	2000008a 	.word	0x2000008a

0800068c <setAddrWindow>:

// draw something: set addr window -> write to ram memory
// sets specific area on display to write pixels to
// x and y for upper left corner, w for width, h for height
void setAddrWindow(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SPI_HandleTypeDef *hspi) {
 800068c:	b5b0      	push	{r4, r5, r7, lr}
 800068e:	b084      	sub	sp, #16
 8000690:	af00      	add	r7, sp, #0
 8000692:	0005      	movs	r5, r0
 8000694:	000c      	movs	r4, r1
 8000696:	0010      	movs	r0, r2
 8000698:	0019      	movs	r1, r3
 800069a:	1dbb      	adds	r3, r7, #6
 800069c:	1c2a      	adds	r2, r5, #0
 800069e:	801a      	strh	r2, [r3, #0]
 80006a0:	1d3b      	adds	r3, r7, #4
 80006a2:	1c22      	adds	r2, r4, #0
 80006a4:	801a      	strh	r2, [r3, #0]
 80006a6:	1cbb      	adds	r3, r7, #2
 80006a8:	1c02      	adds	r2, r0, #0
 80006aa:	801a      	strh	r2, [r3, #0]
 80006ac:	003b      	movs	r3, r7
 80006ae:	1c0a      	adds	r2, r1, #0
 80006b0:	801a      	strh	r2, [r3, #0]
	// not really needed for our display
	x += _xstart;
 80006b2:	1dbb      	adds	r3, r7, #6
 80006b4:	1dba      	adds	r2, r7, #6
 80006b6:	8812      	ldrh	r2, [r2, #0]
 80006b8:	801a      	strh	r2, [r3, #0]
	y += _ystart;
 80006ba:	1d3b      	adds	r3, r7, #4
 80006bc:	1d3a      	adds	r2, r7, #4
 80006be:	8812      	ldrh	r2, [r2, #0]
 80006c0:	801a      	strh	r2, [r3, #0]

	uint8_t temp[4];
	temp[0] = (x & (0xFF00)) >> 8;
 80006c2:	1dbb      	adds	r3, r7, #6
 80006c4:	881b      	ldrh	r3, [r3, #0]
 80006c6:	0a1b      	lsrs	r3, r3, #8
 80006c8:	b29b      	uxth	r3, r3
 80006ca:	b2da      	uxtb	r2, r3
 80006cc:	210c      	movs	r1, #12
 80006ce:	187b      	adds	r3, r7, r1
 80006d0:	701a      	strb	r2, [r3, #0]
	temp[1] = x & (0xFF);
 80006d2:	1dbb      	adds	r3, r7, #6
 80006d4:	881b      	ldrh	r3, [r3, #0]
 80006d6:	b2da      	uxtb	r2, r3
 80006d8:	187b      	adds	r3, r7, r1
 80006da:	705a      	strb	r2, [r3, #1]
	temp[2] = ((x+w-1) & (0xFF00)) >> 8;
 80006dc:	1dbb      	adds	r3, r7, #6
 80006de:	881a      	ldrh	r2, [r3, #0]
 80006e0:	1cbb      	adds	r3, r7, #2
 80006e2:	881b      	ldrh	r3, [r3, #0]
 80006e4:	18d3      	adds	r3, r2, r3
 80006e6:	3b01      	subs	r3, #1
 80006e8:	121b      	asrs	r3, r3, #8
 80006ea:	b2da      	uxtb	r2, r3
 80006ec:	187b      	adds	r3, r7, r1
 80006ee:	709a      	strb	r2, [r3, #2]
	temp[3] = (x+w-1) & (0xFF);
 80006f0:	1dbb      	adds	r3, r7, #6
 80006f2:	881b      	ldrh	r3, [r3, #0]
 80006f4:	b2da      	uxtb	r2, r3
 80006f6:	1cbb      	adds	r3, r7, #2
 80006f8:	881b      	ldrh	r3, [r3, #0]
 80006fa:	b2db      	uxtb	r3, r3
 80006fc:	18d3      	adds	r3, r2, r3
 80006fe:	b2db      	uxtb	r3, r3
 8000700:	3b01      	subs	r3, #1
 8000702:	b2da      	uxtb	r2, r3
 8000704:	187b      	adds	r3, r7, r1
 8000706:	70da      	strb	r2, [r3, #3]
	sendCommand(ST77XX_CASET, temp, 4, hspi);
 8000708:	6a3b      	ldr	r3, [r7, #32]
 800070a:	000c      	movs	r4, r1
 800070c:	1879      	adds	r1, r7, r1
 800070e:	2204      	movs	r2, #4
 8000710:	202a      	movs	r0, #42	; 0x2a
 8000712:	f7ff fea7 	bl	8000464 <sendCommand>

	temp[0] = (y & (0xFF00)) >> 8;
 8000716:	1d3b      	adds	r3, r7, #4
 8000718:	881b      	ldrh	r3, [r3, #0]
 800071a:	0a1b      	lsrs	r3, r3, #8
 800071c:	b29b      	uxth	r3, r3
 800071e:	b2da      	uxtb	r2, r3
 8000720:	0021      	movs	r1, r4
 8000722:	187b      	adds	r3, r7, r1
 8000724:	701a      	strb	r2, [r3, #0]
	temp[1] = y & (0xFF);
 8000726:	1d3b      	adds	r3, r7, #4
 8000728:	881b      	ldrh	r3, [r3, #0]
 800072a:	b2da      	uxtb	r2, r3
 800072c:	187b      	adds	r3, r7, r1
 800072e:	705a      	strb	r2, [r3, #1]
	temp[2] = ((y+h-1) & (0xFF00)) >> 8;
 8000730:	1d3b      	adds	r3, r7, #4
 8000732:	881a      	ldrh	r2, [r3, #0]
 8000734:	003b      	movs	r3, r7
 8000736:	881b      	ldrh	r3, [r3, #0]
 8000738:	18d3      	adds	r3, r2, r3
 800073a:	3b01      	subs	r3, #1
 800073c:	121b      	asrs	r3, r3, #8
 800073e:	b2da      	uxtb	r2, r3
 8000740:	187b      	adds	r3, r7, r1
 8000742:	709a      	strb	r2, [r3, #2]
	temp[3] = (y+h-1) & (0x00FF);
 8000744:	1d3b      	adds	r3, r7, #4
 8000746:	881b      	ldrh	r3, [r3, #0]
 8000748:	b2da      	uxtb	r2, r3
 800074a:	003b      	movs	r3, r7
 800074c:	881b      	ldrh	r3, [r3, #0]
 800074e:	b2db      	uxtb	r3, r3
 8000750:	18d3      	adds	r3, r2, r3
 8000752:	b2db      	uxtb	r3, r3
 8000754:	3b01      	subs	r3, #1
 8000756:	b2da      	uxtb	r2, r3
 8000758:	187b      	adds	r3, r7, r1
 800075a:	70da      	strb	r2, [r3, #3]
	sendCommand(ST77XX_RASET, temp, 4, hspi);
 800075c:	6a3b      	ldr	r3, [r7, #32]
 800075e:	1879      	adds	r1, r7, r1
 8000760:	2204      	movs	r2, #4
 8000762:	202b      	movs	r0, #43	; 0x2b
 8000764:	f7ff fe7e 	bl	8000464 <sendCommand>
}
 8000768:	46c0      	nop			; (mov r8, r8)
 800076a:	46bd      	mov	sp, r7
 800076c:	b004      	add	sp, #16
 800076e:	bdb0      	pop	{r4, r5, r7, pc}

08000770 <colorFixer>:
// 8-bit spi bus wants msb first; in array, lowest index is sent first
// because L4 is little-endian
//   for 16-bit value, it sends lower byte before upper byte
//   resulting in device thinking lower byte is upper byte
// this switches byte order around
uint16_t colorFixer(uint16_t color) {
 8000770:	b580      	push	{r7, lr}
 8000772:	b084      	sub	sp, #16
 8000774:	af00      	add	r7, sp, #0
 8000776:	0002      	movs	r2, r0
 8000778:	1dbb      	adds	r3, r7, #6
 800077a:	801a      	strh	r2, [r3, #0]
	uint8_t a = color & 0xFF;
 800077c:	210f      	movs	r1, #15
 800077e:	187b      	adds	r3, r7, r1
 8000780:	1dba      	adds	r2, r7, #6
 8000782:	8812      	ldrh	r2, [r2, #0]
 8000784:	701a      	strb	r2, [r3, #0]
	uint8_t b = (color & 0xFF00) >> 8;
 8000786:	1dbb      	adds	r3, r7, #6
 8000788:	881b      	ldrh	r3, [r3, #0]
 800078a:	0a1b      	lsrs	r3, r3, #8
 800078c:	b29a      	uxth	r2, r3
 800078e:	200e      	movs	r0, #14
 8000790:	183b      	adds	r3, r7, r0
 8000792:	701a      	strb	r2, [r3, #0]
	uint16_t ret = (a << 8) | b;
 8000794:	187b      	adds	r3, r7, r1
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	021b      	lsls	r3, r3, #8
 800079a:	b21a      	sxth	r2, r3
 800079c:	183b      	adds	r3, r7, r0
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	b21b      	sxth	r3, r3
 80007a2:	4313      	orrs	r3, r2
 80007a4:	b21a      	sxth	r2, r3
 80007a6:	210c      	movs	r1, #12
 80007a8:	187b      	adds	r3, r7, r1
 80007aa:	801a      	strh	r2, [r3, #0]

	return ret;
 80007ac:	187b      	adds	r3, r7, r1
 80007ae:	881b      	ldrh	r3, [r3, #0]
}
 80007b0:	0018      	movs	r0, r3
 80007b2:	46bd      	mov	sp, r7
 80007b4:	b004      	add	sp, #16
 80007b6:	bd80      	pop	{r7, pc}

080007b8 <drawPixel>:

void drawPixel(uint8_t x, uint8_t y, uint16_t color, SPI_HandleTypeDef *hspi) {
 80007b8:	b590      	push	{r4, r7, lr}
 80007ba:	b087      	sub	sp, #28
 80007bc:	af02      	add	r7, sp, #8
 80007be:	0004      	movs	r4, r0
 80007c0:	0008      	movs	r0, r1
 80007c2:	0011      	movs	r1, r2
 80007c4:	603b      	str	r3, [r7, #0]
 80007c6:	1dfb      	adds	r3, r7, #7
 80007c8:	1c22      	adds	r2, r4, #0
 80007ca:	701a      	strb	r2, [r3, #0]
 80007cc:	1dbb      	adds	r3, r7, #6
 80007ce:	1c02      	adds	r2, r0, #0
 80007d0:	701a      	strb	r2, [r3, #0]
 80007d2:	1d3b      	adds	r3, r7, #4
 80007d4:	1c0a      	adds	r2, r1, #0
 80007d6:	801a      	strh	r2, [r3, #0]
	// bounds checking
	// just don't draw if pixel is out of bounds
	if ((x > WIDTH) || (x < 0) || (y > HEIGHT) || (y < 0)) return;
 80007d8:	1dfb      	adds	r3, r7, #7
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	2b80      	cmp	r3, #128	; 0x80
 80007de:	d820      	bhi.n	8000822 <drawPixel+0x6a>
 80007e0:	1dbb      	adds	r3, r7, #6
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	2ba0      	cmp	r3, #160	; 0xa0
 80007e6:	d81c      	bhi.n	8000822 <drawPixel+0x6a>

	setAddrWindow(x, y, 1, 1, hspi);
 80007e8:	1dfb      	adds	r3, r7, #7
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	b298      	uxth	r0, r3
 80007ee:	1dbb      	adds	r3, r7, #6
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	b299      	uxth	r1, r3
 80007f4:	683b      	ldr	r3, [r7, #0]
 80007f6:	9300      	str	r3, [sp, #0]
 80007f8:	2301      	movs	r3, #1
 80007fa:	2201      	movs	r2, #1
 80007fc:	f7ff ff46 	bl	800068c <setAddrWindow>
	uint16_t tempColor = colorFixer(color);		// else we're using address of something passed by value
 8000800:	1d3b      	adds	r3, r7, #4
 8000802:	881b      	ldrh	r3, [r3, #0]
 8000804:	0018      	movs	r0, r3
 8000806:	f7ff ffb3 	bl	8000770 <colorFixer>
 800080a:	0003      	movs	r3, r0
 800080c:	001a      	movs	r2, r3
 800080e:	210e      	movs	r1, #14
 8000810:	187b      	adds	r3, r7, r1
 8000812:	801a      	strh	r2, [r3, #0]
	sendCommand(ST77XX_RAMWR, &tempColor, 2, hspi);
 8000814:	683b      	ldr	r3, [r7, #0]
 8000816:	1879      	adds	r1, r7, r1
 8000818:	2202      	movs	r2, #2
 800081a:	202c      	movs	r0, #44	; 0x2c
 800081c:	f7ff fe22 	bl	8000464 <sendCommand>
 8000820:	e000      	b.n	8000824 <drawPixel+0x6c>
	if ((x > WIDTH) || (x < 0) || (y > HEIGHT) || (y < 0)) return;
 8000822:	46c0      	nop			; (mov r8, r8)
}
 8000824:	46bd      	mov	sp, r7
 8000826:	b005      	add	sp, #20
 8000828:	bd90      	pop	{r4, r7, pc}

0800082a <drawHLine>:

void drawHLine(uint8_t x, uint8_t y, uint8_t size, uint16_t color, SPI_HandleTypeDef *hspi) {
 800082a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800082c:	b091      	sub	sp, #68	; 0x44
 800082e:	af02      	add	r7, sp, #8
 8000830:	000c      	movs	r4, r1
 8000832:	0016      	movs	r6, r2
 8000834:	0019      	movs	r1, r3
 8000836:	2327      	movs	r3, #39	; 0x27
 8000838:	18fa      	adds	r2, r7, r3
 800083a:	1c03      	adds	r3, r0, #0
 800083c:	7013      	strb	r3, [r2, #0]
 800083e:	2326      	movs	r3, #38	; 0x26
 8000840:	18fb      	adds	r3, r7, r3
 8000842:	1c22      	adds	r2, r4, #0
 8000844:	701a      	strb	r2, [r3, #0]
 8000846:	2325      	movs	r3, #37	; 0x25
 8000848:	18fb      	adds	r3, r7, r3
 800084a:	1c32      	adds	r2, r6, #0
 800084c:	701a      	strb	r2, [r3, #0]
 800084e:	2322      	movs	r3, #34	; 0x22
 8000850:	18fb      	adds	r3, r7, r3
 8000852:	1c0a      	adds	r2, r1, #0
 8000854:	801a      	strh	r2, [r3, #0]
 8000856:	466b      	mov	r3, sp
 8000858:	001e      	movs	r6, r3
	// bounds checking
	if (x < 0) x = 0;						// don't set x out of bounds
	if (x > WIDTH) x = WIDTH;
 800085a:	2327      	movs	r3, #39	; 0x27
 800085c:	18fb      	adds	r3, r7, r3
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	2b80      	cmp	r3, #128	; 0x80
 8000862:	d903      	bls.n	800086c <drawHLine+0x42>
 8000864:	2327      	movs	r3, #39	; 0x27
 8000866:	18fb      	adds	r3, r7, r3
 8000868:	2280      	movs	r2, #128	; 0x80
 800086a:	701a      	strb	r2, [r3, #0]
	if (x+size > WIDTH) size = WIDTH-x;		// don't set size so line draws out of bounds
 800086c:	2327      	movs	r3, #39	; 0x27
 800086e:	18fb      	adds	r3, r7, r3
 8000870:	781a      	ldrb	r2, [r3, #0]
 8000872:	2325      	movs	r3, #37	; 0x25
 8000874:	18fb      	adds	r3, r7, r3
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	18d3      	adds	r3, r2, r3
 800087a:	2b80      	cmp	r3, #128	; 0x80
 800087c:	dd08      	ble.n	8000890 <drawHLine+0x66>
 800087e:	2325      	movs	r3, #37	; 0x25
 8000880:	18fb      	adds	r3, r7, r3
 8000882:	2227      	movs	r2, #39	; 0x27
 8000884:	18ba      	adds	r2, r7, r2
 8000886:	7812      	ldrb	r2, [r2, #0]
 8000888:	2180      	movs	r1, #128	; 0x80
 800088a:	4249      	negs	r1, r1
 800088c:	1a8a      	subs	r2, r1, r2
 800088e:	701a      	strb	r2, [r3, #0]
	if (x+size < 0) size = 0-x;
	if ((y > HEIGHT) || (y < 0)) return;	// don't draw if y is out of bounds
 8000890:	2326      	movs	r3, #38	; 0x26
 8000892:	18fb      	adds	r3, r7, r3
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	2ba0      	cmp	r3, #160	; 0xa0
 8000898:	d868      	bhi.n	800096c <drawHLine+0x142>

	setAddrWindow(x, y, size, 1, hspi);
 800089a:	2327      	movs	r3, #39	; 0x27
 800089c:	18fb      	adds	r3, r7, r3
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	b298      	uxth	r0, r3
 80008a2:	2326      	movs	r3, #38	; 0x26
 80008a4:	18fb      	adds	r3, r7, r3
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	b299      	uxth	r1, r3
 80008aa:	2325      	movs	r3, #37	; 0x25
 80008ac:	18fb      	adds	r3, r7, r3
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	b29a      	uxth	r2, r3
 80008b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80008b4:	9300      	str	r3, [sp, #0]
 80008b6:	2301      	movs	r3, #1
 80008b8:	f7ff fee8 	bl	800068c <setAddrWindow>
	uint16_t colors[size];
 80008bc:	2325      	movs	r3, #37	; 0x25
 80008be:	18fb      	adds	r3, r7, r3
 80008c0:	781b      	ldrb	r3, [r3, #0]
 80008c2:	001a      	movs	r2, r3
 80008c4:	3a01      	subs	r2, #1
 80008c6:	633a      	str	r2, [r7, #48]	; 0x30
 80008c8:	60bb      	str	r3, [r7, #8]
 80008ca:	2200      	movs	r2, #0
 80008cc:	60fa      	str	r2, [r7, #12]
 80008ce:	68b8      	ldr	r0, [r7, #8]
 80008d0:	68f9      	ldr	r1, [r7, #12]
 80008d2:	0002      	movs	r2, r0
 80008d4:	0f12      	lsrs	r2, r2, #28
 80008d6:	000c      	movs	r4, r1
 80008d8:	0124      	lsls	r4, r4, #4
 80008da:	61fc      	str	r4, [r7, #28]
 80008dc:	69fc      	ldr	r4, [r7, #28]
 80008de:	4314      	orrs	r4, r2
 80008e0:	61fc      	str	r4, [r7, #28]
 80008e2:	0002      	movs	r2, r0
 80008e4:	0112      	lsls	r2, r2, #4
 80008e6:	61ba      	str	r2, [r7, #24]
 80008e8:	603b      	str	r3, [r7, #0]
 80008ea:	2200      	movs	r2, #0
 80008ec:	607a      	str	r2, [r7, #4]
 80008ee:	6838      	ldr	r0, [r7, #0]
 80008f0:	6879      	ldr	r1, [r7, #4]
 80008f2:	0002      	movs	r2, r0
 80008f4:	0f12      	lsrs	r2, r2, #28
 80008f6:	000c      	movs	r4, r1
 80008f8:	0124      	lsls	r4, r4, #4
 80008fa:	617c      	str	r4, [r7, #20]
 80008fc:	697c      	ldr	r4, [r7, #20]
 80008fe:	4314      	orrs	r4, r2
 8000900:	617c      	str	r4, [r7, #20]
 8000902:	0002      	movs	r2, r0
 8000904:	0112      	lsls	r2, r2, #4
 8000906:	613a      	str	r2, [r7, #16]
 8000908:	005b      	lsls	r3, r3, #1
 800090a:	3301      	adds	r3, #1
 800090c:	3307      	adds	r3, #7
 800090e:	08db      	lsrs	r3, r3, #3
 8000910:	00db      	lsls	r3, r3, #3
 8000912:	466a      	mov	r2, sp
 8000914:	1ad3      	subs	r3, r2, r3
 8000916:	469d      	mov	sp, r3
 8000918:	ab02      	add	r3, sp, #8
 800091a:	3301      	adds	r3, #1
 800091c:	085b      	lsrs	r3, r3, #1
 800091e:	005b      	lsls	r3, r3, #1
 8000920:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (int i = 0; i < size; i++) {		// better way to make array of 1 color; SPI without moving address of sent?
 8000922:	2300      	movs	r3, #0
 8000924:	637b      	str	r3, [r7, #52]	; 0x34
 8000926:	e00e      	b.n	8000946 <drawHLine+0x11c>
		colors[i] = colorFixer(color);
 8000928:	2322      	movs	r3, #34	; 0x22
 800092a:	18fb      	adds	r3, r7, r3
 800092c:	881b      	ldrh	r3, [r3, #0]
 800092e:	0018      	movs	r0, r3
 8000930:	f7ff ff1e 	bl	8000770 <colorFixer>
 8000934:	0003      	movs	r3, r0
 8000936:	0019      	movs	r1, r3
 8000938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800093a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800093c:	0052      	lsls	r2, r2, #1
 800093e:	52d1      	strh	r1, [r2, r3]
	for (int i = 0; i < size; i++) {		// better way to make array of 1 color; SPI without moving address of sent?
 8000940:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000942:	3301      	adds	r3, #1
 8000944:	637b      	str	r3, [r7, #52]	; 0x34
 8000946:	2325      	movs	r3, #37	; 0x25
 8000948:	18fb      	adds	r3, r7, r3
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800094e:	429a      	cmp	r2, r3
 8000950:	dbea      	blt.n	8000928 <drawHLine+0xfe>
//		colors[i] = color;
	}

	sendCommand(ST77XX_RAMWR, colors, size*2, hspi);
 8000952:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000954:	2325      	movs	r3, #37	; 0x25
 8000956:	18fb      	adds	r3, r7, r3
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	b29b      	uxth	r3, r3
 800095c:	18db      	adds	r3, r3, r3
 800095e:	b29a      	uxth	r2, r3
 8000960:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000962:	202c      	movs	r0, #44	; 0x2c
 8000964:	f7ff fd7e 	bl	8000464 <sendCommand>
 8000968:	46b5      	mov	sp, r6
 800096a:	e001      	b.n	8000970 <drawHLine+0x146>
	if ((y > HEIGHT) || (y < 0)) return;	// don't draw if y is out of bounds
 800096c:	46c0      	nop			; (mov r8, r8)
 800096e:	46b5      	mov	sp, r6
}
 8000970:	46bd      	mov	sp, r7
 8000972:	b00f      	add	sp, #60	; 0x3c
 8000974:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000976 <drawVLine>:

void drawVLine(uint8_t x, uint8_t y, uint8_t size, uint16_t color, SPI_HandleTypeDef *hspi) {
 8000976:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000978:	b091      	sub	sp, #68	; 0x44
 800097a:	af02      	add	r7, sp, #8
 800097c:	000c      	movs	r4, r1
 800097e:	0016      	movs	r6, r2
 8000980:	0019      	movs	r1, r3
 8000982:	2327      	movs	r3, #39	; 0x27
 8000984:	18fa      	adds	r2, r7, r3
 8000986:	1c03      	adds	r3, r0, #0
 8000988:	7013      	strb	r3, [r2, #0]
 800098a:	2326      	movs	r3, #38	; 0x26
 800098c:	18fb      	adds	r3, r7, r3
 800098e:	1c22      	adds	r2, r4, #0
 8000990:	701a      	strb	r2, [r3, #0]
 8000992:	2325      	movs	r3, #37	; 0x25
 8000994:	18fb      	adds	r3, r7, r3
 8000996:	1c32      	adds	r2, r6, #0
 8000998:	701a      	strb	r2, [r3, #0]
 800099a:	2322      	movs	r3, #34	; 0x22
 800099c:	18fb      	adds	r3, r7, r3
 800099e:	1c0a      	adds	r2, r1, #0
 80009a0:	801a      	strh	r2, [r3, #0]
 80009a2:	466b      	mov	r3, sp
 80009a4:	001e      	movs	r6, r3
	// bounds checking
	if (y < 0) x = 0;						// don't set x out of bounds
	if (y > HEIGHT) x = HEIGHT;
 80009a6:	2326      	movs	r3, #38	; 0x26
 80009a8:	18fb      	adds	r3, r7, r3
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	2ba0      	cmp	r3, #160	; 0xa0
 80009ae:	d903      	bls.n	80009b8 <drawVLine+0x42>
 80009b0:	2327      	movs	r3, #39	; 0x27
 80009b2:	18fb      	adds	r3, r7, r3
 80009b4:	22a0      	movs	r2, #160	; 0xa0
 80009b6:	701a      	strb	r2, [r3, #0]
	if (y+size > HEIGHT) size = HEIGHT-y;	// don't set size so line draws out of bounds
 80009b8:	2326      	movs	r3, #38	; 0x26
 80009ba:	18fb      	adds	r3, r7, r3
 80009bc:	781a      	ldrb	r2, [r3, #0]
 80009be:	2325      	movs	r3, #37	; 0x25
 80009c0:	18fb      	adds	r3, r7, r3
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	18d3      	adds	r3, r2, r3
 80009c6:	2ba0      	cmp	r3, #160	; 0xa0
 80009c8:	dd08      	ble.n	80009dc <drawVLine+0x66>
 80009ca:	2325      	movs	r3, #37	; 0x25
 80009cc:	18fb      	adds	r3, r7, r3
 80009ce:	2226      	movs	r2, #38	; 0x26
 80009d0:	18ba      	adds	r2, r7, r2
 80009d2:	7812      	ldrb	r2, [r2, #0]
 80009d4:	2160      	movs	r1, #96	; 0x60
 80009d6:	4249      	negs	r1, r1
 80009d8:	1a8a      	subs	r2, r1, r2
 80009da:	701a      	strb	r2, [r3, #0]
	if (y+size < 0) size = 0-y;
	if ((x > WIDTH) || (x < 0)) return;		// don't draw if y is out of bounds
 80009dc:	2327      	movs	r3, #39	; 0x27
 80009de:	18fb      	adds	r3, r7, r3
 80009e0:	781b      	ldrb	r3, [r3, #0]
 80009e2:	2b80      	cmp	r3, #128	; 0x80
 80009e4:	d869      	bhi.n	8000aba <drawVLine+0x144>

	setAddrWindow(x, y, 1, size, hspi);
 80009e6:	2327      	movs	r3, #39	; 0x27
 80009e8:	18fb      	adds	r3, r7, r3
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	b298      	uxth	r0, r3
 80009ee:	2326      	movs	r3, #38	; 0x26
 80009f0:	18fb      	adds	r3, r7, r3
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	b299      	uxth	r1, r3
 80009f6:	2325      	movs	r3, #37	; 0x25
 80009f8:	18fb      	adds	r3, r7, r3
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	b29a      	uxth	r2, r3
 80009fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000a00:	9300      	str	r3, [sp, #0]
 8000a02:	0013      	movs	r3, r2
 8000a04:	2201      	movs	r2, #1
 8000a06:	f7ff fe41 	bl	800068c <setAddrWindow>
	uint16_t colors[size];
 8000a0a:	2325      	movs	r3, #37	; 0x25
 8000a0c:	18fb      	adds	r3, r7, r3
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	001a      	movs	r2, r3
 8000a12:	3a01      	subs	r2, #1
 8000a14:	633a      	str	r2, [r7, #48]	; 0x30
 8000a16:	60bb      	str	r3, [r7, #8]
 8000a18:	2200      	movs	r2, #0
 8000a1a:	60fa      	str	r2, [r7, #12]
 8000a1c:	68b8      	ldr	r0, [r7, #8]
 8000a1e:	68f9      	ldr	r1, [r7, #12]
 8000a20:	0002      	movs	r2, r0
 8000a22:	0f12      	lsrs	r2, r2, #28
 8000a24:	000c      	movs	r4, r1
 8000a26:	0124      	lsls	r4, r4, #4
 8000a28:	61fc      	str	r4, [r7, #28]
 8000a2a:	69fc      	ldr	r4, [r7, #28]
 8000a2c:	4314      	orrs	r4, r2
 8000a2e:	61fc      	str	r4, [r7, #28]
 8000a30:	0002      	movs	r2, r0
 8000a32:	0112      	lsls	r2, r2, #4
 8000a34:	61ba      	str	r2, [r7, #24]
 8000a36:	603b      	str	r3, [r7, #0]
 8000a38:	2200      	movs	r2, #0
 8000a3a:	607a      	str	r2, [r7, #4]
 8000a3c:	6838      	ldr	r0, [r7, #0]
 8000a3e:	6879      	ldr	r1, [r7, #4]
 8000a40:	0002      	movs	r2, r0
 8000a42:	0f12      	lsrs	r2, r2, #28
 8000a44:	000c      	movs	r4, r1
 8000a46:	0124      	lsls	r4, r4, #4
 8000a48:	617c      	str	r4, [r7, #20]
 8000a4a:	697c      	ldr	r4, [r7, #20]
 8000a4c:	4314      	orrs	r4, r2
 8000a4e:	617c      	str	r4, [r7, #20]
 8000a50:	0002      	movs	r2, r0
 8000a52:	0112      	lsls	r2, r2, #4
 8000a54:	613a      	str	r2, [r7, #16]
 8000a56:	005b      	lsls	r3, r3, #1
 8000a58:	3301      	adds	r3, #1
 8000a5a:	3307      	adds	r3, #7
 8000a5c:	08db      	lsrs	r3, r3, #3
 8000a5e:	00db      	lsls	r3, r3, #3
 8000a60:	466a      	mov	r2, sp
 8000a62:	1ad3      	subs	r3, r2, r3
 8000a64:	469d      	mov	sp, r3
 8000a66:	ab02      	add	r3, sp, #8
 8000a68:	3301      	adds	r3, #1
 8000a6a:	085b      	lsrs	r3, r3, #1
 8000a6c:	005b      	lsls	r3, r3, #1
 8000a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (int i = 0; i < size; i++) {		// there has to be a better way to make array of 1 color
 8000a70:	2300      	movs	r3, #0
 8000a72:	637b      	str	r3, [r7, #52]	; 0x34
 8000a74:	e00e      	b.n	8000a94 <drawVLine+0x11e>
											// SPI without moving address of sent buffer?
		colors[i] = colorFixer(color);
 8000a76:	2322      	movs	r3, #34	; 0x22
 8000a78:	18fb      	adds	r3, r7, r3
 8000a7a:	881b      	ldrh	r3, [r3, #0]
 8000a7c:	0018      	movs	r0, r3
 8000a7e:	f7ff fe77 	bl	8000770 <colorFixer>
 8000a82:	0003      	movs	r3, r0
 8000a84:	0019      	movs	r1, r3
 8000a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a88:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000a8a:	0052      	lsls	r2, r2, #1
 8000a8c:	52d1      	strh	r1, [r2, r3]
	for (int i = 0; i < size; i++) {		// there has to be a better way to make array of 1 color
 8000a8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a90:	3301      	adds	r3, #1
 8000a92:	637b      	str	r3, [r7, #52]	; 0x34
 8000a94:	2325      	movs	r3, #37	; 0x25
 8000a96:	18fb      	adds	r3, r7, r3
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000a9c:	429a      	cmp	r2, r3
 8000a9e:	dbea      	blt.n	8000a76 <drawVLine+0x100>
	}

	sendCommand(ST77XX_RAMWR, colors, size*2, hspi);
 8000aa0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000aa2:	2325      	movs	r3, #37	; 0x25
 8000aa4:	18fb      	adds	r3, r7, r3
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	b29b      	uxth	r3, r3
 8000aaa:	18db      	adds	r3, r3, r3
 8000aac:	b29a      	uxth	r2, r3
 8000aae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000ab0:	202c      	movs	r0, #44	; 0x2c
 8000ab2:	f7ff fcd7 	bl	8000464 <sendCommand>
 8000ab6:	46b5      	mov	sp, r6
 8000ab8:	e001      	b.n	8000abe <drawVLine+0x148>
	if ((x > WIDTH) || (x < 0)) return;		// don't draw if y is out of bounds
 8000aba:	46c0      	nop			; (mov r8, r8)
 8000abc:	46b5      	mov	sp, r6
}
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	b00f      	add	sp, #60	; 0x3c
 8000ac2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000ac4 <fillRect>:
	drawHLine(x, y+h-1, w, color, hspi);
	drawVLine(x, y, h, color, hspi);
	drawVLine(x+w-1, y, h, color, hspi);
}

void fillRect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint16_t color, SPI_HandleTypeDef *hspi) {
 8000ac4:	b5b0      	push	{r4, r5, r7, lr}
 8000ac6:	b086      	sub	sp, #24
 8000ac8:	af02      	add	r7, sp, #8
 8000aca:	0005      	movs	r5, r0
 8000acc:	000c      	movs	r4, r1
 8000ace:	0010      	movs	r0, r2
 8000ad0:	0019      	movs	r1, r3
 8000ad2:	1dfb      	adds	r3, r7, #7
 8000ad4:	1c2a      	adds	r2, r5, #0
 8000ad6:	701a      	strb	r2, [r3, #0]
 8000ad8:	1dbb      	adds	r3, r7, #6
 8000ada:	1c22      	adds	r2, r4, #0
 8000adc:	701a      	strb	r2, [r3, #0]
 8000ade:	1d7b      	adds	r3, r7, #5
 8000ae0:	1c02      	adds	r2, r0, #0
 8000ae2:	701a      	strb	r2, [r3, #0]
 8000ae4:	1d3b      	adds	r3, r7, #4
 8000ae6:	1c0a      	adds	r2, r1, #0
 8000ae8:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < h; i++) {
 8000aea:	2300      	movs	r3, #0
 8000aec:	60fb      	str	r3, [r7, #12]
 8000aee:	e014      	b.n	8000b1a <fillRect+0x56>
		drawHLine(x, y+i, w, color, hspi);
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	b2da      	uxtb	r2, r3
 8000af4:	1dbb      	adds	r3, r7, #6
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	18d3      	adds	r3, r2, r3
 8000afa:	b2d9      	uxtb	r1, r3
 8000afc:	2320      	movs	r3, #32
 8000afe:	18fb      	adds	r3, r7, r3
 8000b00:	881c      	ldrh	r4, [r3, #0]
 8000b02:	1d7b      	adds	r3, r7, #5
 8000b04:	781a      	ldrb	r2, [r3, #0]
 8000b06:	1dfb      	adds	r3, r7, #7
 8000b08:	7818      	ldrb	r0, [r3, #0]
 8000b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b0c:	9300      	str	r3, [sp, #0]
 8000b0e:	0023      	movs	r3, r4
 8000b10:	f7ff fe8b 	bl	800082a <drawHLine>
	for (int i = 0; i < h; i++) {
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	3301      	adds	r3, #1
 8000b18:	60fb      	str	r3, [r7, #12]
 8000b1a:	1d3b      	adds	r3, r7, #4
 8000b1c:	781b      	ldrb	r3, [r3, #0]
 8000b1e:	68fa      	ldr	r2, [r7, #12]
 8000b20:	429a      	cmp	r2, r3
 8000b22:	dbe5      	blt.n	8000af0 <fillRect+0x2c>
	}
}
 8000b24:	46c0      	nop			; (mov r8, r8)
 8000b26:	46bd      	mov	sp, r7
 8000b28:	b004      	add	sp, #16
 8000b2a:	bdb0      	pop	{r4, r5, r7, pc}

08000b2c <fillScreen>:

void fillScreen(uint16_t color, SPI_HandleTypeDef *hspi) {
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b084      	sub	sp, #16
 8000b30:	af02      	add	r7, sp, #8
 8000b32:	0002      	movs	r2, r0
 8000b34:	6039      	str	r1, [r7, #0]
 8000b36:	1dbb      	adds	r3, r7, #6
 8000b38:	801a      	strh	r2, [r3, #0]
	fillRect(0, 0, WIDTH, HEIGHT, color, hspi);
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	9301      	str	r3, [sp, #4]
 8000b3e:	1dbb      	adds	r3, r7, #6
 8000b40:	881b      	ldrh	r3, [r3, #0]
 8000b42:	9300      	str	r3, [sp, #0]
 8000b44:	23a0      	movs	r3, #160	; 0xa0
 8000b46:	2280      	movs	r2, #128	; 0x80
 8000b48:	2100      	movs	r1, #0
 8000b4a:	2000      	movs	r0, #0
 8000b4c:	f7ff ffba 	bl	8000ac4 <fillRect>
}
 8000b50:	46c0      	nop			; (mov r8, r8)
 8000b52:	46bd      	mov	sp, r7
 8000b54:	b002      	add	sp, #8
 8000b56:	bd80      	pop	{r7, pc}

08000b58 <drawChar>:
// ---- end of basic shapes and lines ----

// ---- text functions ----
//void drawChar(uint8_t x, uint8_t y, uint8_t ch, uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y, SPI_HandleTypeDef *hspi) {
void drawChar(uint8_t ch, SPI_HandleTypeDef *hspi) {
 8000b58:	b5b0      	push	{r4, r5, r7, lr}
 8000b5a:	b086      	sub	sp, #24
 8000b5c:	af02      	add	r7, sp, #8
 8000b5e:	0002      	movs	r2, r0
 8000b60:	6039      	str	r1, [r7, #0]
 8000b62:	1dfb      	adds	r3, r7, #7
 8000b64:	701a      	strb	r2, [r3, #0]
//	   ((y + 8 * size_y - 1) < 0))   // Clip top
//		return;

//	if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior

	for (int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
 8000b66:	230f      	movs	r3, #15
 8000b68:	18fb      	adds	r3, r7, r3
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	701a      	strb	r2, [r3, #0]
 8000b6e:	e0b5      	b.n	8000cdc <drawChar+0x184>
		uint8_t line = font[ch*5+i];
 8000b70:	1dfb      	adds	r3, r7, #7
 8000b72:	781a      	ldrb	r2, [r3, #0]
 8000b74:	0013      	movs	r3, r2
 8000b76:	009b      	lsls	r3, r3, #2
 8000b78:	189a      	adds	r2, r3, r2
 8000b7a:	230f      	movs	r3, #15
 8000b7c:	18fb      	adds	r3, r7, r3
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	b25b      	sxtb	r3, r3
 8000b82:	18d2      	adds	r2, r2, r3
 8000b84:	230e      	movs	r3, #14
 8000b86:	18fb      	adds	r3, r7, r3
 8000b88:	4974      	ldr	r1, [pc, #464]	; (8000d5c <drawChar+0x204>)
 8000b8a:	5c8a      	ldrb	r2, [r1, r2]
 8000b8c:	701a      	strb	r2, [r3, #0]
		for (int8_t j=0; j<8; j++, line >>= 1) {
 8000b8e:	230d      	movs	r3, #13
 8000b90:	18fb      	adds	r3, r7, r3
 8000b92:	2200      	movs	r2, #0
 8000b94:	701a      	strb	r2, [r3, #0]
 8000b96:	e091      	b.n	8000cbc <drawChar+0x164>
			if (line & 1) {
 8000b98:	230e      	movs	r3, #14
 8000b9a:	18fb      	adds	r3, r7, r3
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	4013      	ands	r3, r2
 8000ba2:	d03b      	beq.n	8000c1c <drawChar+0xc4>
				if (textSize == 1)
 8000ba4:	4b6e      	ldr	r3, [pc, #440]	; (8000d60 <drawChar+0x208>)
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	2b01      	cmp	r3, #1
 8000baa:	d113      	bne.n	8000bd4 <drawChar+0x7c>
					drawPixel(cursorX+i, cursorY+j, textColor, hspi);
 8000bac:	4b6d      	ldr	r3, [pc, #436]	; (8000d64 <drawChar+0x20c>)
 8000bae:	781a      	ldrb	r2, [r3, #0]
 8000bb0:	230f      	movs	r3, #15
 8000bb2:	18fb      	adds	r3, r7, r3
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	18d3      	adds	r3, r2, r3
 8000bb8:	b2d8      	uxtb	r0, r3
 8000bba:	4b6b      	ldr	r3, [pc, #428]	; (8000d68 <drawChar+0x210>)
 8000bbc:	781a      	ldrb	r2, [r3, #0]
 8000bbe:	230d      	movs	r3, #13
 8000bc0:	18fb      	adds	r3, r7, r3
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	18d3      	adds	r3, r2, r3
 8000bc6:	b2d9      	uxtb	r1, r3
 8000bc8:	4b68      	ldr	r3, [pc, #416]	; (8000d6c <drawChar+0x214>)
 8000bca:	881a      	ldrh	r2, [r3, #0]
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	f7ff fdf3 	bl	80007b8 <drawPixel>
 8000bd2:	e064      	b.n	8000c9e <drawChar+0x146>
				else
					fillRect(cursorX+i*textSize, cursorY+j*textSize, textSize, textSize, textColor, hspi);
 8000bd4:	230f      	movs	r3, #15
 8000bd6:	18fb      	adds	r3, r7, r3
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	4a61      	ldr	r2, [pc, #388]	; (8000d60 <drawChar+0x208>)
 8000bdc:	7812      	ldrb	r2, [r2, #0]
 8000bde:	4353      	muls	r3, r2
 8000be0:	b2da      	uxtb	r2, r3
 8000be2:	4b60      	ldr	r3, [pc, #384]	; (8000d64 <drawChar+0x20c>)
 8000be4:	781b      	ldrb	r3, [r3, #0]
 8000be6:	18d3      	adds	r3, r2, r3
 8000be8:	b2d8      	uxtb	r0, r3
 8000bea:	230d      	movs	r3, #13
 8000bec:	18fb      	adds	r3, r7, r3
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	4a5b      	ldr	r2, [pc, #364]	; (8000d60 <drawChar+0x208>)
 8000bf2:	7812      	ldrb	r2, [r2, #0]
 8000bf4:	4353      	muls	r3, r2
 8000bf6:	b2da      	uxtb	r2, r3
 8000bf8:	4b5b      	ldr	r3, [pc, #364]	; (8000d68 <drawChar+0x210>)
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	18d3      	adds	r3, r2, r3
 8000bfe:	b2d9      	uxtb	r1, r3
 8000c00:	4b57      	ldr	r3, [pc, #348]	; (8000d60 <drawChar+0x208>)
 8000c02:	781c      	ldrb	r4, [r3, #0]
 8000c04:	4b56      	ldr	r3, [pc, #344]	; (8000d60 <drawChar+0x208>)
 8000c06:	781d      	ldrb	r5, [r3, #0]
 8000c08:	4b58      	ldr	r3, [pc, #352]	; (8000d6c <drawChar+0x214>)
 8000c0a:	881b      	ldrh	r3, [r3, #0]
 8000c0c:	683a      	ldr	r2, [r7, #0]
 8000c0e:	9201      	str	r2, [sp, #4]
 8000c10:	9300      	str	r3, [sp, #0]
 8000c12:	002b      	movs	r3, r5
 8000c14:	0022      	movs	r2, r4
 8000c16:	f7ff ff55 	bl	8000ac4 <fillRect>
 8000c1a:	e040      	b.n	8000c9e <drawChar+0x146>
			} else if (bg != textColor) {
 8000c1c:	4b54      	ldr	r3, [pc, #336]	; (8000d70 <drawChar+0x218>)
 8000c1e:	881a      	ldrh	r2, [r3, #0]
 8000c20:	4b52      	ldr	r3, [pc, #328]	; (8000d6c <drawChar+0x214>)
 8000c22:	881b      	ldrh	r3, [r3, #0]
 8000c24:	429a      	cmp	r2, r3
 8000c26:	d03a      	beq.n	8000c9e <drawChar+0x146>
				if (textSize == 1)
 8000c28:	4b4d      	ldr	r3, [pc, #308]	; (8000d60 <drawChar+0x208>)
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	2b01      	cmp	r3, #1
 8000c2e:	d113      	bne.n	8000c58 <drawChar+0x100>
					drawPixel(cursorX+i, cursorY+j, bg, hspi);
 8000c30:	4b4c      	ldr	r3, [pc, #304]	; (8000d64 <drawChar+0x20c>)
 8000c32:	781a      	ldrb	r2, [r3, #0]
 8000c34:	230f      	movs	r3, #15
 8000c36:	18fb      	adds	r3, r7, r3
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	18d3      	adds	r3, r2, r3
 8000c3c:	b2d8      	uxtb	r0, r3
 8000c3e:	4b4a      	ldr	r3, [pc, #296]	; (8000d68 <drawChar+0x210>)
 8000c40:	781a      	ldrb	r2, [r3, #0]
 8000c42:	230d      	movs	r3, #13
 8000c44:	18fb      	adds	r3, r7, r3
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	18d3      	adds	r3, r2, r3
 8000c4a:	b2d9      	uxtb	r1, r3
 8000c4c:	4b48      	ldr	r3, [pc, #288]	; (8000d70 <drawChar+0x218>)
 8000c4e:	881a      	ldrh	r2, [r3, #0]
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	f7ff fdb1 	bl	80007b8 <drawPixel>
 8000c56:	e022      	b.n	8000c9e <drawChar+0x146>
				else
					fillRect(cursorX+i*textSize, cursorY+j*textSize, textSize, textSize, bg, hspi);
 8000c58:	230f      	movs	r3, #15
 8000c5a:	18fb      	adds	r3, r7, r3
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	4a40      	ldr	r2, [pc, #256]	; (8000d60 <drawChar+0x208>)
 8000c60:	7812      	ldrb	r2, [r2, #0]
 8000c62:	4353      	muls	r3, r2
 8000c64:	b2da      	uxtb	r2, r3
 8000c66:	4b3f      	ldr	r3, [pc, #252]	; (8000d64 <drawChar+0x20c>)
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	18d3      	adds	r3, r2, r3
 8000c6c:	b2d8      	uxtb	r0, r3
 8000c6e:	230d      	movs	r3, #13
 8000c70:	18fb      	adds	r3, r7, r3
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	4a3a      	ldr	r2, [pc, #232]	; (8000d60 <drawChar+0x208>)
 8000c76:	7812      	ldrb	r2, [r2, #0]
 8000c78:	4353      	muls	r3, r2
 8000c7a:	b2da      	uxtb	r2, r3
 8000c7c:	4b3a      	ldr	r3, [pc, #232]	; (8000d68 <drawChar+0x210>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	18d3      	adds	r3, r2, r3
 8000c82:	b2d9      	uxtb	r1, r3
 8000c84:	4b36      	ldr	r3, [pc, #216]	; (8000d60 <drawChar+0x208>)
 8000c86:	781c      	ldrb	r4, [r3, #0]
 8000c88:	4b35      	ldr	r3, [pc, #212]	; (8000d60 <drawChar+0x208>)
 8000c8a:	781d      	ldrb	r5, [r3, #0]
 8000c8c:	4b38      	ldr	r3, [pc, #224]	; (8000d70 <drawChar+0x218>)
 8000c8e:	881b      	ldrh	r3, [r3, #0]
 8000c90:	683a      	ldr	r2, [r7, #0]
 8000c92:	9201      	str	r2, [sp, #4]
 8000c94:	9300      	str	r3, [sp, #0]
 8000c96:	002b      	movs	r3, r5
 8000c98:	0022      	movs	r2, r4
 8000c9a:	f7ff ff13 	bl	8000ac4 <fillRect>
		for (int8_t j=0; j<8; j++, line >>= 1) {
 8000c9e:	210d      	movs	r1, #13
 8000ca0:	187b      	adds	r3, r7, r1
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	b25b      	sxtb	r3, r3
 8000ca6:	b2db      	uxtb	r3, r3
 8000ca8:	3301      	adds	r3, #1
 8000caa:	b2da      	uxtb	r2, r3
 8000cac:	187b      	adds	r3, r7, r1
 8000cae:	701a      	strb	r2, [r3, #0]
 8000cb0:	220e      	movs	r2, #14
 8000cb2:	18bb      	adds	r3, r7, r2
 8000cb4:	18ba      	adds	r2, r7, r2
 8000cb6:	7812      	ldrb	r2, [r2, #0]
 8000cb8:	0852      	lsrs	r2, r2, #1
 8000cba:	701a      	strb	r2, [r3, #0]
 8000cbc:	230d      	movs	r3, #13
 8000cbe:	18fb      	adds	r3, r7, r3
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	b25b      	sxtb	r3, r3
 8000cc4:	2b07      	cmp	r3, #7
 8000cc6:	dc00      	bgt.n	8000cca <drawChar+0x172>
 8000cc8:	e766      	b.n	8000b98 <drawChar+0x40>
	for (int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
 8000cca:	210f      	movs	r1, #15
 8000ccc:	187b      	adds	r3, r7, r1
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	b25b      	sxtb	r3, r3
 8000cd2:	b2db      	uxtb	r3, r3
 8000cd4:	3301      	adds	r3, #1
 8000cd6:	b2da      	uxtb	r2, r3
 8000cd8:	187b      	adds	r3, r7, r1
 8000cda:	701a      	strb	r2, [r3, #0]
 8000cdc:	230f      	movs	r3, #15
 8000cde:	18fb      	adds	r3, r7, r3
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	b25b      	sxtb	r3, r3
 8000ce4:	2b04      	cmp	r3, #4
 8000ce6:	dc00      	bgt.n	8000cea <drawChar+0x192>
 8000ce8:	e742      	b.n	8000b70 <drawChar+0x18>
			}
		}
	}

	// 6wx8h char. this is 6th column, since it's always blank for kerning
	if (bg != textColor) { // If opaque, draw vertical line for last column
 8000cea:	4b21      	ldr	r3, [pc, #132]	; (8000d70 <drawChar+0x218>)
 8000cec:	881a      	ldrh	r2, [r3, #0]
 8000cee:	4b1f      	ldr	r3, [pc, #124]	; (8000d6c <drawChar+0x214>)
 8000cf0:	881b      	ldrh	r3, [r3, #0]
 8000cf2:	429a      	cmp	r2, r3
 8000cf4:	d02d      	beq.n	8000d52 <drawChar+0x1fa>
		if (textSize == 1) drawVLine(cursorX+5, cursorY, 8, bg, hspi);
 8000cf6:	4b1a      	ldr	r3, [pc, #104]	; (8000d60 <drawChar+0x208>)
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	2b01      	cmp	r3, #1
 8000cfc:	d10e      	bne.n	8000d1c <drawChar+0x1c4>
 8000cfe:	4b19      	ldr	r3, [pc, #100]	; (8000d64 <drawChar+0x20c>)
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	3305      	adds	r3, #5
 8000d04:	b2d8      	uxtb	r0, r3
 8000d06:	4b18      	ldr	r3, [pc, #96]	; (8000d68 <drawChar+0x210>)
 8000d08:	7819      	ldrb	r1, [r3, #0]
 8000d0a:	4b19      	ldr	r3, [pc, #100]	; (8000d70 <drawChar+0x218>)
 8000d0c:	881a      	ldrh	r2, [r3, #0]
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	9300      	str	r3, [sp, #0]
 8000d12:	0013      	movs	r3, r2
 8000d14:	2208      	movs	r2, #8
 8000d16:	f7ff fe2e 	bl	8000976 <drawVLine>
		else fillRect(cursorX+5*textSize, cursorY, textSize, 8*textSize, bg, hspi);
	}
}
 8000d1a:	e01a      	b.n	8000d52 <drawChar+0x1fa>
		else fillRect(cursorX+5*textSize, cursorY, textSize, 8*textSize, bg, hspi);
 8000d1c:	4b10      	ldr	r3, [pc, #64]	; (8000d60 <drawChar+0x208>)
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	1c1a      	adds	r2, r3, #0
 8000d22:	0092      	lsls	r2, r2, #2
 8000d24:	18d3      	adds	r3, r2, r3
 8000d26:	b2da      	uxtb	r2, r3
 8000d28:	4b0e      	ldr	r3, [pc, #56]	; (8000d64 <drawChar+0x20c>)
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	18d3      	adds	r3, r2, r3
 8000d2e:	b2d8      	uxtb	r0, r3
 8000d30:	4b0d      	ldr	r3, [pc, #52]	; (8000d68 <drawChar+0x210>)
 8000d32:	7819      	ldrb	r1, [r3, #0]
 8000d34:	4b0a      	ldr	r3, [pc, #40]	; (8000d60 <drawChar+0x208>)
 8000d36:	781c      	ldrb	r4, [r3, #0]
 8000d38:	4b09      	ldr	r3, [pc, #36]	; (8000d60 <drawChar+0x208>)
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	00db      	lsls	r3, r3, #3
 8000d3e:	b2dd      	uxtb	r5, r3
 8000d40:	4b0b      	ldr	r3, [pc, #44]	; (8000d70 <drawChar+0x218>)
 8000d42:	881b      	ldrh	r3, [r3, #0]
 8000d44:	683a      	ldr	r2, [r7, #0]
 8000d46:	9201      	str	r2, [sp, #4]
 8000d48:	9300      	str	r3, [sp, #0]
 8000d4a:	002b      	movs	r3, r5
 8000d4c:	0022      	movs	r2, r4
 8000d4e:	f7ff feb9 	bl	8000ac4 <fillRect>
}
 8000d52:	46c0      	nop			; (mov r8, r8)
 8000d54:	46bd      	mov	sp, r7
 8000d56:	b004      	add	sp, #16
 8000d58:	bdb0      	pop	{r4, r5, r7, pc}
 8000d5a:	46c0      	nop			; (mov r8, r8)
 8000d5c:	08006ed0 	.word	0x08006ed0
 8000d60:	20000086 	.word	0x20000086
 8000d64:	20000084 	.word	0x20000084
 8000d68:	20000085 	.word	0x20000085
 8000d6c:	20000088 	.word	0x20000088
 8000d70:	2000008a 	.word	0x2000008a

08000d74 <drawTextAt>:
	for (int i = 0; str[i] != '\0'; i++) {
		drawChar(str[i], hspi);
	}
}

void drawTextAt(uint8_t x, uint8_t y, char *str, SPI_HandleTypeDef *hspi) {
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b086      	sub	sp, #24
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	60ba      	str	r2, [r7, #8]
 8000d7c:	607b      	str	r3, [r7, #4]
 8000d7e:	230f      	movs	r3, #15
 8000d80:	18fb      	adds	r3, r7, r3
 8000d82:	1c02      	adds	r2, r0, #0
 8000d84:	701a      	strb	r2, [r3, #0]
 8000d86:	230e      	movs	r3, #14
 8000d88:	18fb      	adds	r3, r7, r3
 8000d8a:	1c0a      	adds	r2, r1, #0
 8000d8c:	701a      	strb	r2, [r3, #0]
	// add text wrap
	int i = 0;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	617b      	str	r3, [r7, #20]
	for (i = 0; str[i] != '\0'; i++) {
 8000d92:	2300      	movs	r3, #0
 8000d94:	617b      	str	r3, [r7, #20]
 8000d96:	e00b      	b.n	8000db0 <drawTextAt+0x3c>
		drawChar(str[i], hspi);
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	68ba      	ldr	r2, [r7, #8]
 8000d9c:	18d3      	adds	r3, r2, r3
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	687a      	ldr	r2, [r7, #4]
 8000da2:	0011      	movs	r1, r2
 8000da4:	0018      	movs	r0, r3
 8000da6:	f7ff fed7 	bl	8000b58 <drawChar>
	for (i = 0; str[i] != '\0'; i++) {
 8000daa:	697b      	ldr	r3, [r7, #20]
 8000dac:	3301      	adds	r3, #1
 8000dae:	617b      	str	r3, [r7, #20]
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	68ba      	ldr	r2, [r7, #8]
 8000db4:	18d3      	adds	r3, r2, r3
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d1ed      	bne.n	8000d98 <drawTextAt+0x24>
	}
//	setCursor(x+i*textSize*6, y);
}
 8000dbc:	46c0      	nop			; (mov r8, r8)
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	b006      	add	sp, #24
 8000dc2:	bd80      	pop	{r7, pc}

08000dc4 <setTextColor>:
	cursorY = y;
}

void setTextSize(uint8_t size) {textSize = size;}

void setTextColor(uint16_t color) {textColor = color;}
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	0002      	movs	r2, r0
 8000dcc:	1dbb      	adds	r3, r7, #6
 8000dce:	801a      	strh	r2, [r3, #0]
 8000dd0:	4b03      	ldr	r3, [pc, #12]	; (8000de0 <setTextColor+0x1c>)
 8000dd2:	1dba      	adds	r2, r7, #6
 8000dd4:	8812      	ldrh	r2, [r2, #0]
 8000dd6:	801a      	strh	r2, [r3, #0]
 8000dd8:	46c0      	nop			; (mov r8, r8)
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	b002      	add	sp, #8
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	20000088 	.word	0x20000088

08000de4 <setTime>:

#include "clocks.h"
#include "timers.h"

// set rtc time. uses perosnal struct as arg
void setTime(struct times *t, RTC_HandleTypeDef *hrtc) {
 8000de4:	b590      	push	{r4, r7, lr}
 8000de6:	b089      	sub	sp, #36	; 0x24
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
 8000dec:	6039      	str	r1, [r7, #0]
	RTC_TimeTypeDef stime = {0};	// change to malloc call? does that work in embedded?
 8000dee:	210c      	movs	r1, #12
 8000df0:	000c      	movs	r4, r1
 8000df2:	187b      	adds	r3, r7, r1
 8000df4:	0018      	movs	r0, r3
 8000df6:	2314      	movs	r3, #20
 8000df8:	001a      	movs	r2, r3
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	f005 fbf7 	bl	80065ee <memset>

	// set using args later
	stime.Hours = t->hr;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	781a      	ldrb	r2, [r3, #0]
 8000e04:	0021      	movs	r1, r4
 8000e06:	187b      	adds	r3, r7, r1
 8000e08:	701a      	strb	r2, [r3, #0]
	stime.Minutes = t->min;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	785a      	ldrb	r2, [r3, #1]
 8000e0e:	187b      	adds	r3, r7, r1
 8000e10:	705a      	strb	r2, [r3, #1]
	stime.Seconds = t->sec;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	789a      	ldrb	r2, [r3, #2]
 8000e16:	187b      	adds	r3, r7, r1
 8000e18:	709a      	strb	r2, [r3, #2]

	stime.TimeFormat = RTC_HOURFORMAT_24;
 8000e1a:	187b      	adds	r3, r7, r1
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	70da      	strb	r2, [r3, #3]

	// not sure what these do, but probably fine if set to 0 or ignored
	stime.SubSeconds = 0;
 8000e20:	187b      	adds	r3, r7, r1
 8000e22:	2200      	movs	r2, #0
 8000e24:	605a      	str	r2, [r3, #4]
	stime.SecondFraction = 0;
 8000e26:	187b      	adds	r3, r7, r1
 8000e28:	2200      	movs	r2, #0
 8000e2a:	609a      	str	r2, [r3, #8]

	stime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;		// add daylight savings later?
 8000e2c:	187b      	adds	r3, r7, r1
 8000e2e:	2200      	movs	r2, #0
 8000e30:	60da      	str	r2, [r3, #12]
	stime.StoreOperation = RTC_STOREOPERATION_SET;		// not sure what this does
 8000e32:	187b      	adds	r3, r7, r1
 8000e34:	2280      	movs	r2, #128	; 0x80
 8000e36:	02d2      	lsls	r2, r2, #11
 8000e38:	611a      	str	r2, [r3, #16]

	// do nothing until done
	// not following BCD format (4-bit digit 1, 4-bit digit 2)
	// while makes program hang? ignore instead?
//	while (HAL_RTC_SetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK);
	HAL_RTC_SetTime(hrtc, &stime, RTC_FORMAT_BIN);
 8000e3a:	1879      	adds	r1, r7, r1
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	2200      	movs	r2, #0
 8000e40:	0018      	movs	r0, r3
 8000e42:	f003 fde9 	bl	8004a18 <HAL_RTC_SetTime>
}
 8000e46:	46c0      	nop			; (mov r8, r8)
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	b009      	add	sp, #36	; 0x24
 8000e4c:	bd90      	pop	{r4, r7, pc}

08000e4e <setDate>:

// set rtc date. uses personal struct
void setDate(struct dates *d, RTC_HandleTypeDef *hrtc) {
 8000e4e:	b590      	push	{r4, r7, lr}
 8000e50:	b085      	sub	sp, #20
 8000e52:	af00      	add	r7, sp, #0
 8000e54:	6078      	str	r0, [r7, #4]
 8000e56:	6039      	str	r1, [r7, #0]
	// ---- date ----
	RTC_DateTypeDef sdate = {0};
 8000e58:	240c      	movs	r4, #12
 8000e5a:	193b      	adds	r3, r7, r4
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	601a      	str	r2, [r3, #0]

	sdate.Month = d->month;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	785a      	ldrb	r2, [r3, #1]
 8000e64:	193b      	adds	r3, r7, r4
 8000e66:	705a      	strb	r2, [r3, #1]
	sdate.Date = d->date;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	789a      	ldrb	r2, [r3, #2]
 8000e6c:	193b      	adds	r3, r7, r4
 8000e6e:	709a      	strb	r2, [r3, #2]
	sdate.WeekDay = d->weekday;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	78da      	ldrb	r2, [r3, #3]
 8000e74:	193b      	adds	r3, r7, r4
 8000e76:	701a      	strb	r2, [r3, #0]
	sdate.Year = d->yr % 100; 		// set only between 0-99. part of the library (!?)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	2164      	movs	r1, #100	; 0x64
 8000e7e:	0018      	movs	r0, r3
 8000e80:	f7ff f9c8 	bl	8000214 <__aeabi_uidivmod>
 8000e84:	000b      	movs	r3, r1
 8000e86:	b2da      	uxtb	r2, r3
 8000e88:	193b      	adds	r3, r7, r4
 8000e8a:	70da      	strb	r2, [r3, #3]

	HAL_RTC_SetDate(hrtc, &sdate, RTC_FORMAT_BIN);
 8000e8c:	1939      	adds	r1, r7, r4
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	2200      	movs	r2, #0
 8000e92:	0018      	movs	r0, r3
 8000e94:	f003 fee0 	bl	8004c58 <HAL_RTC_SetDate>
}
 8000e98:	46c0      	nop			; (mov r8, r8)
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	b005      	add	sp, #20
 8000e9e:	bd90      	pop	{r4, r7, pc}

08000ea0 <setDateTime>:

void setDateTime(struct dates *d, struct times *t, RTC_HandleTypeDef *hrtc) {
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b084      	sub	sp, #16
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	60f8      	str	r0, [r7, #12]
 8000ea8:	60b9      	str	r1, [r7, #8]
 8000eaa:	607a      	str	r2, [r7, #4]
	setDate(d, hrtc);
 8000eac:	687a      	ldr	r2, [r7, #4]
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	0011      	movs	r1, r2
 8000eb2:	0018      	movs	r0, r3
 8000eb4:	f7ff ffcb 	bl	8000e4e <setDate>
	setTime(t, hrtc);
 8000eb8:	687a      	ldr	r2, [r7, #4]
 8000eba:	68bb      	ldr	r3, [r7, #8]
 8000ebc:	0011      	movs	r1, r2
 8000ebe:	0018      	movs	r0, r3
 8000ec0:	f7ff ff90 	bl	8000de4 <setTime>
}
 8000ec4:	46c0      	nop			; (mov r8, r8)
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	b004      	add	sp, #16
 8000eca:	bd80      	pop	{r7, pc}

08000ecc <setTimer>:
	HAL_RTC_SetAlarm_IT(hrtc, &salarm, RTC_FORMAT_BIN);
}

// set alarm for timer function of watch project
// using RTC alarm hardware
void setTimer(struct times *t_in, RTC_HandleTypeDef *hrtc, TIM_HandleTypeDef *htim) {
 8000ecc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ece:	b097      	sub	sp, #92	; 0x5c
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	60f8      	str	r0, [r7, #12]
 8000ed4:	60b9      	str	r1, [r7, #8]
 8000ed6:	607a      	str	r2, [r7, #4]
	RTC_AlarmTypeDef salarm = {0};
 8000ed8:	2330      	movs	r3, #48	; 0x30
 8000eda:	18fb      	adds	r3, r7, r3
 8000edc:	0018      	movs	r0, r3
 8000ede:	2328      	movs	r3, #40	; 0x28
 8000ee0:	001a      	movs	r2, r3
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	f005 fb83 	bl	80065ee <memset>
	RTC_TimeTypeDef salarmtime = {0};
 8000ee8:	231c      	movs	r3, #28
 8000eea:	18fb      	adds	r3, r7, r3
 8000eec:	0018      	movs	r0, r3
 8000eee:	2314      	movs	r3, #20
 8000ef0:	001a      	movs	r2, r3
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	f005 fb7b 	bl	80065ee <memset>

	// set global variables to hold value being set
	watchTimer = *t_in;
 8000ef8:	4a67      	ldr	r2, [pc, #412]	; (8001098 <setTimer+0x1cc>)
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	0010      	movs	r0, r2
 8000efe:	0019      	movs	r1, r3
 8000f00:	2303      	movs	r3, #3
 8000f02:	001a      	movs	r2, r3
 8000f04:	f005 fb6a 	bl	80065dc <memcpy>
	watchTimerSeconds = t_in->sec + t_in->min*60 + t_in->hr * 3600;
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	789b      	ldrb	r3, [r3, #2]
 8000f0c:	0019      	movs	r1, r3
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	785b      	ldrb	r3, [r3, #1]
 8000f12:	001a      	movs	r2, r3
 8000f14:	0013      	movs	r3, r2
 8000f16:	011b      	lsls	r3, r3, #4
 8000f18:	1a9b      	subs	r3, r3, r2
 8000f1a:	009b      	lsls	r3, r3, #2
 8000f1c:	18c9      	adds	r1, r1, r3
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	001a      	movs	r2, r3
 8000f24:	0013      	movs	r3, r2
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	1a9b      	subs	r3, r3, r2
 8000f2a:	011a      	lsls	r2, r3, #4
 8000f2c:	1ad2      	subs	r2, r2, r3
 8000f2e:	0113      	lsls	r3, r2, #4
 8000f30:	001a      	movs	r2, r3
 8000f32:	0013      	movs	r3, r2
 8000f34:	18cb      	adds	r3, r1, r3
 8000f36:	001a      	movs	r2, r3
 8000f38:	4b58      	ldr	r3, [pc, #352]	; (800109c <setTimer+0x1d0>)
 8000f3a:	601a      	str	r2, [r3, #0]

	// pull current RTC time
	struct dates d;
	struct times t;
	getDateTime(&d, &t, hrtc);
 8000f3c:	68ba      	ldr	r2, [r7, #8]
 8000f3e:	2414      	movs	r4, #20
 8000f40:	1939      	adds	r1, r7, r4
 8000f42:	2318      	movs	r3, #24
 8000f44:	18fb      	adds	r3, r7, r3
 8000f46:	0018      	movs	r0, r3
 8000f48:	f000 f924 	bl	8001194 <getDateTime>

	struct alarmTimes a;

	// adding timer value to current time so we can set an alarm time
	if (t.sec + t_in->sec > 60) {		// adding seconds
 8000f4c:	193b      	adds	r3, r7, r4
 8000f4e:	789b      	ldrb	r3, [r3, #2]
 8000f50:	001a      	movs	r2, r3
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	789b      	ldrb	r3, [r3, #2]
 8000f56:	18d3      	adds	r3, r2, r3
 8000f58:	2b3c      	cmp	r3, #60	; 0x3c
 8000f5a:	dd49      	ble.n	8000ff0 <setTimer+0x124>
		if (t.min + t_in->min > 60) {		// adding minutes
 8000f5c:	2314      	movs	r3, #20
 8000f5e:	18fb      	adds	r3, r7, r3
 8000f60:	785b      	ldrb	r3, [r3, #1]
 8000f62:	001a      	movs	r2, r3
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	785b      	ldrb	r3, [r3, #1]
 8000f68:	18d3      	adds	r3, r2, r3
 8000f6a:	2b3c      	cmp	r3, #60	; 0x3c
 8000f6c:	dd30      	ble.n	8000fd0 <setTimer+0x104>
			if (t.hr + t_in->hr > 24) {			// adding hours
 8000f6e:	2314      	movs	r3, #20
 8000f70:	18fb      	adds	r3, r7, r3
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	001a      	movs	r2, r3
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	18d3      	adds	r3, r2, r3
 8000f7c:	2b18      	cmp	r3, #24
 8000f7e:	dd17      	ble.n	8000fb0 <setTimer+0xe4>
				a.weekday = ((d.weekday + t_in->hr/24) % 7) + 1;		// bc weekday count starts from 1
 8000f80:	2318      	movs	r3, #24
 8000f82:	18fb      	adds	r3, r7, r3
 8000f84:	78db      	ldrb	r3, [r3, #3]
 8000f86:	001c      	movs	r4, r3
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	2118      	movs	r1, #24
 8000f8e:	0018      	movs	r0, r3
 8000f90:	f7ff f8ba 	bl	8000108 <__udivsi3>
 8000f94:	0003      	movs	r3, r0
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	18e3      	adds	r3, r4, r3
 8000f9a:	2107      	movs	r1, #7
 8000f9c:	0018      	movs	r0, r3
 8000f9e:	f7ff fa23 	bl	80003e8 <__aeabi_idivmod>
 8000fa2:	000b      	movs	r3, r1
 8000fa4:	b2db      	uxtb	r3, r3
 8000fa6:	3301      	adds	r3, #1
 8000fa8:	b2da      	uxtb	r2, r3
 8000faa:	2310      	movs	r3, #16
 8000fac:	18fb      	adds	r3, r7, r3
 8000fae:	70da      	strb	r2, [r3, #3]
			}
			a.hr = (t.hr + t_in->hr) % 24;
 8000fb0:	2314      	movs	r3, #20
 8000fb2:	18fb      	adds	r3, r7, r3
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	001a      	movs	r2, r3
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	18d3      	adds	r3, r2, r3
 8000fbe:	2118      	movs	r1, #24
 8000fc0:	0018      	movs	r0, r3
 8000fc2:	f7ff fa11 	bl	80003e8 <__aeabi_idivmod>
 8000fc6:	000b      	movs	r3, r1
 8000fc8:	b2da      	uxtb	r2, r3
 8000fca:	2310      	movs	r3, #16
 8000fcc:	18fb      	adds	r3, r7, r3
 8000fce:	701a      	strb	r2, [r3, #0]
		}
		a.min = (t.min + t_in->min) % 60;
 8000fd0:	2314      	movs	r3, #20
 8000fd2:	18fb      	adds	r3, r7, r3
 8000fd4:	785b      	ldrb	r3, [r3, #1]
 8000fd6:	001a      	movs	r2, r3
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	785b      	ldrb	r3, [r3, #1]
 8000fdc:	18d3      	adds	r3, r2, r3
 8000fde:	213c      	movs	r1, #60	; 0x3c
 8000fe0:	0018      	movs	r0, r3
 8000fe2:	f7ff fa01 	bl	80003e8 <__aeabi_idivmod>
 8000fe6:	000b      	movs	r3, r1
 8000fe8:	b2da      	uxtb	r2, r3
 8000fea:	2310      	movs	r3, #16
 8000fec:	18fb      	adds	r3, r7, r3
 8000fee:	705a      	strb	r2, [r3, #1]
	}
	a.sec = (t.sec + t_in->sec) % 60;
 8000ff0:	2314      	movs	r3, #20
 8000ff2:	18fb      	adds	r3, r7, r3
 8000ff4:	789b      	ldrb	r3, [r3, #2]
 8000ff6:	001a      	movs	r2, r3
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	789b      	ldrb	r3, [r3, #2]
 8000ffc:	18d3      	adds	r3, r2, r3
 8000ffe:	213c      	movs	r1, #60	; 0x3c
 8001000:	0018      	movs	r0, r3
 8001002:	f7ff f9f1 	bl	80003e8 <__aeabi_idivmod>
 8001006:	000b      	movs	r3, r1
 8001008:	b2da      	uxtb	r2, r3
 800100a:	2410      	movs	r4, #16
 800100c:	193b      	adds	r3, r7, r4
 800100e:	709a      	strb	r2, [r3, #2]

	// setting RTC parameters
	salarmtime.Hours = a.hr;
 8001010:	193b      	adds	r3, r7, r4
 8001012:	781a      	ldrb	r2, [r3, #0]
 8001014:	211c      	movs	r1, #28
 8001016:	187b      	adds	r3, r7, r1
 8001018:	701a      	strb	r2, [r3, #0]
	salarmtime.Minutes = a.min;
 800101a:	193b      	adds	r3, r7, r4
 800101c:	785a      	ldrb	r2, [r3, #1]
 800101e:	187b      	adds	r3, r7, r1
 8001020:	705a      	strb	r2, [r3, #1]
	salarmtime.Seconds = a.sec;
 8001022:	193b      	adds	r3, r7, r4
 8001024:	789a      	ldrb	r2, [r3, #2]
 8001026:	187b      	adds	r3, r7, r1
 8001028:	709a      	strb	r2, [r3, #2]
	salarmtime.TimeFormat = RTC_HOURFORMAT_24;
 800102a:	187b      	adds	r3, r7, r1
 800102c:	2200      	movs	r2, #0
 800102e:	70da      	strb	r2, [r3, #3]
	salarmtime.SubSeconds = 0;
 8001030:	187b      	adds	r3, r7, r1
 8001032:	2200      	movs	r2, #0
 8001034:	605a      	str	r2, [r3, #4]
	salarmtime.SecondFraction = 0;
 8001036:	187b      	adds	r3, r7, r1
 8001038:	2200      	movs	r2, #0
 800103a:	609a      	str	r2, [r3, #8]
	salarmtime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800103c:	187b      	adds	r3, r7, r1
 800103e:	2200      	movs	r2, #0
 8001040:	60da      	str	r2, [r3, #12]
	salarmtime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001042:	187b      	adds	r3, r7, r1
 8001044:	2200      	movs	r2, #0
 8001046:	611a      	str	r2, [r3, #16]

	salarm.AlarmTime = salarmtime;
 8001048:	2030      	movs	r0, #48	; 0x30
 800104a:	183b      	adds	r3, r7, r0
 800104c:	187a      	adds	r2, r7, r1
 800104e:	ca62      	ldmia	r2!, {r1, r5, r6}
 8001050:	c362      	stmia	r3!, {r1, r5, r6}
 8001052:	ca22      	ldmia	r2!, {r1, r5}
 8001054:	c322      	stmia	r3!, {r1, r5}
	salarm.AlarmMask = RTC_ALARMMASK_ALL;
 8001056:	183b      	adds	r3, r7, r0
 8001058:	4a11      	ldr	r2, [pc, #68]	; (80010a0 <setTimer+0x1d4>)
 800105a:	615a      	str	r2, [r3, #20]
	salarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800105c:	183b      	adds	r3, r7, r0
 800105e:	2200      	movs	r2, #0
 8001060:	619a      	str	r2, [r3, #24]
	salarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_WEEKDAY;
 8001062:	183b      	adds	r3, r7, r0
 8001064:	2280      	movs	r2, #128	; 0x80
 8001066:	05d2      	lsls	r2, r2, #23
 8001068:	61da      	str	r2, [r3, #28]
	salarm.AlarmDateWeekDay = a.weekday;
 800106a:	193b      	adds	r3, r7, r4
 800106c:	78d9      	ldrb	r1, [r3, #3]
 800106e:	183b      	adds	r3, r7, r0
 8001070:	2220      	movs	r2, #32
 8001072:	5499      	strb	r1, [r3, r2]
	salarm.Alarm = RTC_ALARM_B;			// change if using different alarm
 8001074:	183b      	adds	r3, r7, r0
 8001076:	2280      	movs	r2, #128	; 0x80
 8001078:	0092      	lsls	r2, r2, #2
 800107a:	625a      	str	r2, [r3, #36]	; 0x24

	// do nothing until done
//	while (HAL_RTC_SetAlarm_IT(hrtc, &salarm, RTC_FORMAT_BCD) != HAL_OK);
	HAL_RTC_SetAlarm_IT(hrtc, &salarm, RTC_FORMAT_BIN);
 800107c:	1839      	adds	r1, r7, r0
 800107e:	68bb      	ldr	r3, [r7, #8]
 8001080:	2200      	movs	r2, #0
 8001082:	0018      	movs	r0, r3
 8001084:	f003 fee4 	bl	8004e50 <HAL_RTC_SetAlarm_IT>

	runTimerDisplay(htim);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	0018      	movs	r0, r3
 800108c:	f001 fada 	bl	8002644 <runTimerDisplay>
}
 8001090:	46c0      	nop			; (mov r8, r8)
 8001092:	46bd      	mov	sp, r7
 8001094:	b017      	add	sp, #92	; 0x5c
 8001096:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001098:	200000cc 	.word	0x200000cc
 800109c:	200000d0 	.word	0x200000d0
 80010a0:	80808080 	.word	0x80808080

080010a4 <HAL_RTC_AlarmAEventCallback>:

// ---- callbacks for interrupts ----
// used for alarm function in project
// meant to send signal to use motor
// change to use hw timer so signal is temporary
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
	// change pin to whatever's accessible
	// using PC0
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_0);
 80010ac:	4b0c      	ldr	r3, [pc, #48]	; (80010e0 <HAL_RTC_AlarmAEventCallback+0x3c>)
 80010ae:	2101      	movs	r1, #1
 80010b0:	0018      	movs	r0, r3
 80010b2:	f002 fa41 	bl	8003538 <HAL_GPIO_TogglePin>
	HAL_Delay(500);			// does this work in interrupt/callback? might not
 80010b6:	23fa      	movs	r3, #250	; 0xfa
 80010b8:	005b      	lsls	r3, r3, #1
 80010ba:	0018      	movs	r0, r3
 80010bc:	f001 fb58 	bl	8002770 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_0);
 80010c0:	4b07      	ldr	r3, [pc, #28]	; (80010e0 <HAL_RTC_AlarmAEventCallback+0x3c>)
 80010c2:	2101      	movs	r1, #1
 80010c4:	0018      	movs	r0, r3
 80010c6:	f002 fa37 	bl	8003538 <HAL_GPIO_TogglePin>
	HAL_RTC_DeactivateAlarm(hrtc, RTC_ALARM_A);
 80010ca:	2380      	movs	r3, #128	; 0x80
 80010cc:	005a      	lsls	r2, r3, #1
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	0011      	movs	r1, r2
 80010d2:	0018      	movs	r0, r3
 80010d4:	f004 f808 	bl	80050e8 <HAL_RTC_DeactivateAlarm>
}
 80010d8:	46c0      	nop			; (mov r8, r8)
 80010da:	46bd      	mov	sp, r7
 80010dc:	b002      	add	sp, #8
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	50000800 	.word	0x50000800

080010e4 <getTime>:
}
// ---- end of callbacks ----

// ---- clock get functions ----
// maybe needs subseconds?
void getTime(struct times *t, RTC_HandleTypeDef *hrtc) {
 80010e4:	b590      	push	{r4, r7, lr}
 80010e6:	b089      	sub	sp, #36	; 0x24
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
 80010ec:	6039      	str	r1, [r7, #0]
	RTC_TimeTypeDef stime;

	// programming manual says to read time after date. something shadow registers.
	// not done automatically in HAL
	HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN);
 80010ee:	210c      	movs	r1, #12
 80010f0:	000c      	movs	r4, r1
 80010f2:	1879      	adds	r1, r7, r1
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	2200      	movs	r2, #0
 80010f8:	0018      	movs	r0, r3
 80010fa:	f003 fd51 	bl	8004ba0 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(hrtc, NULL, RTC_FORMAT_BIN);
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	2200      	movs	r2, #0
 8001102:	2100      	movs	r1, #0
 8001104:	0018      	movs	r0, r3
 8001106:	f003 fe55 	bl	8004db4 <HAL_RTC_GetDate>

	t->hr = stime.Hours;
 800110a:	0021      	movs	r1, r4
 800110c:	187b      	adds	r3, r7, r1
 800110e:	781a      	ldrb	r2, [r3, #0]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	701a      	strb	r2, [r3, #0]
	t->min = stime.Minutes;
 8001114:	187b      	adds	r3, r7, r1
 8001116:	785a      	ldrb	r2, [r3, #1]
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	705a      	strb	r2, [r3, #1]
	t->sec = stime.Seconds;
 800111c:	187b      	adds	r3, r7, r1
 800111e:	789a      	ldrb	r2, [r3, #2]
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	709a      	strb	r2, [r3, #2]
}
 8001124:	46c0      	nop			; (mov r8, r8)
 8001126:	46bd      	mov	sp, r7
 8001128:	b009      	add	sp, #36	; 0x24
 800112a:	bd90      	pop	{r4, r7, pc}

0800112c <getDate>:

void getDate(struct dates *d, RTC_HandleTypeDef *hrtc) {
 800112c:	b590      	push	{r4, r7, lr}
 800112e:	b085      	sub	sp, #20
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
 8001134:	6039      	str	r1, [r7, #0]
	RTC_DateTypeDef sdate;

	// programming manual says to read time after date. something shadow registers.
	// not done automatically in HAL
	HAL_RTC_GetTime(hrtc, NULL, RTC_FORMAT_BIN);
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	2200      	movs	r2, #0
 800113a:	2100      	movs	r1, #0
 800113c:	0018      	movs	r0, r3
 800113e:	f003 fd2f 	bl	8004ba0 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(hrtc, &sdate, RTC_FORMAT_BIN);
 8001142:	240c      	movs	r4, #12
 8001144:	1939      	adds	r1, r7, r4
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	2200      	movs	r2, #0
 800114a:	0018      	movs	r0, r3
 800114c:	f003 fe32 	bl	8004db4 <HAL_RTC_GetDate>

	d->yr = sdate.Year > 50 ? sdate.Year+1900 : sdate.Year+2000;
 8001150:	193b      	adds	r3, r7, r4
 8001152:	78db      	ldrb	r3, [r3, #3]
 8001154:	2b32      	cmp	r3, #50	; 0x32
 8001156:	d905      	bls.n	8001164 <getDate+0x38>
 8001158:	230c      	movs	r3, #12
 800115a:	18fb      	adds	r3, r7, r3
 800115c:	78db      	ldrb	r3, [r3, #3]
 800115e:	336c      	adds	r3, #108	; 0x6c
 8001160:	b2db      	uxtb	r3, r3
 8001162:	e004      	b.n	800116e <getDate+0x42>
 8001164:	230c      	movs	r3, #12
 8001166:	18fb      	adds	r3, r7, r3
 8001168:	78db      	ldrb	r3, [r3, #3]
 800116a:	3b30      	subs	r3, #48	; 0x30
 800116c:	b2db      	uxtb	r3, r3
 800116e:	687a      	ldr	r2, [r7, #4]
 8001170:	7013      	strb	r3, [r2, #0]
	d->month = sdate.Month;
 8001172:	210c      	movs	r1, #12
 8001174:	187b      	adds	r3, r7, r1
 8001176:	785a      	ldrb	r2, [r3, #1]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	705a      	strb	r2, [r3, #1]
	d->date = sdate.Date;
 800117c:	187b      	adds	r3, r7, r1
 800117e:	789a      	ldrb	r2, [r3, #2]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	709a      	strb	r2, [r3, #2]
	d->weekday = sdate.WeekDay;
 8001184:	187b      	adds	r3, r7, r1
 8001186:	781a      	ldrb	r2, [r3, #0]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	70da      	strb	r2, [r3, #3]
}
 800118c:	46c0      	nop			; (mov r8, r8)
 800118e:	46bd      	mov	sp, r7
 8001190:	b005      	add	sp, #20
 8001192:	bd90      	pop	{r4, r7, pc}

08001194 <getDateTime>:

// not using getDate and getTime for efficiency (?)
void getDateTime(struct dates *d, struct times *t, RTC_HandleTypeDef *hrtc) {
 8001194:	b590      	push	{r4, r7, lr}
 8001196:	b08b      	sub	sp, #44	; 0x2c
 8001198:	af00      	add	r7, sp, #0
 800119a:	60f8      	str	r0, [r7, #12]
 800119c:	60b9      	str	r1, [r7, #8]
 800119e:	607a      	str	r2, [r7, #4]
	RTC_DateTypeDef sdate;
	RTC_TimeTypeDef stime;

	// programming manual says to read time after date. something shadow registers.
	// not done automatically in HAL
	HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN);
 80011a0:	2310      	movs	r3, #16
 80011a2:	18f9      	adds	r1, r7, r3
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2200      	movs	r2, #0
 80011a8:	0018      	movs	r0, r3
 80011aa:	f003 fcf9 	bl	8004ba0 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(hrtc, &sdate, RTC_FORMAT_BIN);
 80011ae:	2424      	movs	r4, #36	; 0x24
 80011b0:	1939      	adds	r1, r7, r4
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	2200      	movs	r2, #0
 80011b6:	0018      	movs	r0, r3
 80011b8:	f003 fdfc 	bl	8004db4 <HAL_RTC_GetDate>

	d->yr = sdate.Year > 50 ? sdate.Year+1900 : sdate.Year+2000;		// make assumptions on whether it's 19xx or 20xx
 80011bc:	193b      	adds	r3, r7, r4
 80011be:	78db      	ldrb	r3, [r3, #3]
 80011c0:	2b32      	cmp	r3, #50	; 0x32
 80011c2:	d905      	bls.n	80011d0 <getDateTime+0x3c>
 80011c4:	2324      	movs	r3, #36	; 0x24
 80011c6:	18fb      	adds	r3, r7, r3
 80011c8:	78db      	ldrb	r3, [r3, #3]
 80011ca:	336c      	adds	r3, #108	; 0x6c
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	e004      	b.n	80011da <getDateTime+0x46>
 80011d0:	2324      	movs	r3, #36	; 0x24
 80011d2:	18fb      	adds	r3, r7, r3
 80011d4:	78db      	ldrb	r3, [r3, #3]
 80011d6:	3b30      	subs	r3, #48	; 0x30
 80011d8:	b2db      	uxtb	r3, r3
 80011da:	68fa      	ldr	r2, [r7, #12]
 80011dc:	7013      	strb	r3, [r2, #0]
	d->month = sdate.Month;
 80011de:	2124      	movs	r1, #36	; 0x24
 80011e0:	187b      	adds	r3, r7, r1
 80011e2:	785a      	ldrb	r2, [r3, #1]
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	705a      	strb	r2, [r3, #1]
	d->date = sdate.Date;
 80011e8:	187b      	adds	r3, r7, r1
 80011ea:	789a      	ldrb	r2, [r3, #2]
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	709a      	strb	r2, [r3, #2]
	d->weekday = sdate.WeekDay;
 80011f0:	187b      	adds	r3, r7, r1
 80011f2:	781a      	ldrb	r2, [r3, #0]
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	70da      	strb	r2, [r3, #3]

	t->hr = stime.Hours;
 80011f8:	2110      	movs	r1, #16
 80011fa:	187b      	adds	r3, r7, r1
 80011fc:	781a      	ldrb	r2, [r3, #0]
 80011fe:	68bb      	ldr	r3, [r7, #8]
 8001200:	701a      	strb	r2, [r3, #0]
	t->min = stime.Minutes;
 8001202:	187b      	adds	r3, r7, r1
 8001204:	785a      	ldrb	r2, [r3, #1]
 8001206:	68bb      	ldr	r3, [r7, #8]
 8001208:	705a      	strb	r2, [r3, #1]
	t->sec = stime.Seconds;
 800120a:	187b      	adds	r3, r7, r1
 800120c:	789a      	ldrb	r2, [r3, #2]
 800120e:	68bb      	ldr	r3, [r7, #8]
 8001210:	709a      	strb	r2, [r3, #2]
}
 8001212:	46c0      	nop			; (mov r8, r8)
 8001214:	46bd      	mov	sp, r7
 8001216:	b00b      	add	sp, #44	; 0x2c
 8001218:	bd90      	pop	{r4, r7, pc}
	...

0800121c <printTime>:

// ---- clock print functions ----
// print functions for RTC
// assumes we're using SPI display and file TFT_display.c
// pulls date and time structs automatically to only print current time in RTC
void printTime(RTC_HandleTypeDef *hrtc, SPI_HandleTypeDef *hspi) {
 800121c:	b5b0      	push	{r4, r5, r7, lr}
 800121e:	b08e      	sub	sp, #56	; 0x38
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
 8001224:	6039      	str	r1, [r7, #0]
	char str[40];		// problems when using only char*

	struct times t;
	getTime(&t, hrtc);
 8001226:	687a      	ldr	r2, [r7, #4]
 8001228:	250c      	movs	r5, #12
 800122a:	197b      	adds	r3, r7, r5
 800122c:	0011      	movs	r1, r2
 800122e:	0018      	movs	r0, r3
 8001230:	f7ff ff58 	bl	80010e4 <getTime>

	setTextColor(ST77XX_WHITE);
 8001234:	4b19      	ldr	r3, [pc, #100]	; (800129c <printTime+0x80>)
 8001236:	0018      	movs	r0, r3
 8001238:	f7ff fdc4 	bl	8000dc4 <setTextColor>
	sprintf(str, "sec: %2d", t.sec);
 800123c:	197b      	adds	r3, r7, r5
 800123e:	789b      	ldrb	r3, [r3, #2]
 8001240:	001a      	movs	r2, r3
 8001242:	4917      	ldr	r1, [pc, #92]	; (80012a0 <printTime+0x84>)
 8001244:	2410      	movs	r4, #16
 8001246:	193b      	adds	r3, r7, r4
 8001248:	0018      	movs	r0, r3
 800124a:	f005 f9d9 	bl	8006600 <siprintf>
	drawTextAt(0, 0, str, hspi);
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	193a      	adds	r2, r7, r4
 8001252:	2100      	movs	r1, #0
 8001254:	2000      	movs	r0, #0
 8001256:	f7ff fd8d 	bl	8000d74 <drawTextAt>
	sprintf(str, "min: %2d", t.min);
 800125a:	197b      	adds	r3, r7, r5
 800125c:	785b      	ldrb	r3, [r3, #1]
 800125e:	001a      	movs	r2, r3
 8001260:	4910      	ldr	r1, [pc, #64]	; (80012a4 <printTime+0x88>)
 8001262:	193b      	adds	r3, r7, r4
 8001264:	0018      	movs	r0, r3
 8001266:	f005 f9cb 	bl	8006600 <siprintf>
	drawTextAt(0, 10, str, hspi);
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	193a      	adds	r2, r7, r4
 800126e:	210a      	movs	r1, #10
 8001270:	2000      	movs	r0, #0
 8001272:	f7ff fd7f 	bl	8000d74 <drawTextAt>
	sprintf(str, "hr: %3d", t.hr);
 8001276:	197b      	adds	r3, r7, r5
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	001a      	movs	r2, r3
 800127c:	490a      	ldr	r1, [pc, #40]	; (80012a8 <printTime+0x8c>)
 800127e:	193b      	adds	r3, r7, r4
 8001280:	0018      	movs	r0, r3
 8001282:	f005 f9bd 	bl	8006600 <siprintf>
	drawTextAt(0, 20, str, hspi);
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	193a      	adds	r2, r7, r4
 800128a:	2114      	movs	r1, #20
 800128c:	2000      	movs	r0, #0
 800128e:	f7ff fd71 	bl	8000d74 <drawTextAt>
}
 8001292:	46c0      	nop			; (mov r8, r8)
 8001294:	46bd      	mov	sp, r7
 8001296:	b00e      	add	sp, #56	; 0x38
 8001298:	bdb0      	pop	{r4, r5, r7, pc}
 800129a:	46c0      	nop			; (mov r8, r8)
 800129c:	0000ffff 	.word	0x0000ffff
 80012a0:	08006e88 	.word	0x08006e88
 80012a4:	08006e94 	.word	0x08006e94
 80012a8:	08006ea0 	.word	0x08006ea0

080012ac <printDate>:

void printDate(RTC_HandleTypeDef *hrtc, SPI_HandleTypeDef *hspi) {
 80012ac:	b5b0      	push	{r4, r5, r7, lr}
 80012ae:	b08e      	sub	sp, #56	; 0x38
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
 80012b4:	6039      	str	r1, [r7, #0]
	char str[40];		// problems when using only char*

	struct dates d;
	getDate(&d, hrtc);
 80012b6:	687a      	ldr	r2, [r7, #4]
 80012b8:	250c      	movs	r5, #12
 80012ba:	197b      	adds	r3, r7, r5
 80012bc:	0011      	movs	r1, r2
 80012be:	0018      	movs	r0, r3
 80012c0:	f7ff ff34 	bl	800112c <getDate>

	setTextColor(ST77XX_WHITE);
 80012c4:	4b20      	ldr	r3, [pc, #128]	; (8001348 <printDate+0x9c>)
 80012c6:	0018      	movs	r0, r3
 80012c8:	f7ff fd7c 	bl	8000dc4 <setTextColor>
	sprintf(str, "year: %3d", d.yr);
 80012cc:	197b      	adds	r3, r7, r5
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	001a      	movs	r2, r3
 80012d2:	491e      	ldr	r1, [pc, #120]	; (800134c <printDate+0xa0>)
 80012d4:	2410      	movs	r4, #16
 80012d6:	193b      	adds	r3, r7, r4
 80012d8:	0018      	movs	r0, r3
 80012da:	f005 f991 	bl	8006600 <siprintf>
	drawTextAt(0, 40, str, hspi);
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	193a      	adds	r2, r7, r4
 80012e2:	2128      	movs	r1, #40	; 0x28
 80012e4:	2000      	movs	r0, #0
 80012e6:	f7ff fd45 	bl	8000d74 <drawTextAt>
	sprintf(str, "month: %4d", d.month);
 80012ea:	197b      	adds	r3, r7, r5
 80012ec:	785b      	ldrb	r3, [r3, #1]
 80012ee:	001a      	movs	r2, r3
 80012f0:	4917      	ldr	r1, [pc, #92]	; (8001350 <printDate+0xa4>)
 80012f2:	193b      	adds	r3, r7, r4
 80012f4:	0018      	movs	r0, r3
 80012f6:	f005 f983 	bl	8006600 <siprintf>
	drawTextAt(0, 50, str, hspi);
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	193a      	adds	r2, r7, r4
 80012fe:	2132      	movs	r1, #50	; 0x32
 8001300:	2000      	movs	r0, #0
 8001302:	f7ff fd37 	bl	8000d74 <drawTextAt>
	sprintf(str, "day: %2d", d.date);
 8001306:	197b      	adds	r3, r7, r5
 8001308:	789b      	ldrb	r3, [r3, #2]
 800130a:	001a      	movs	r2, r3
 800130c:	4911      	ldr	r1, [pc, #68]	; (8001354 <printDate+0xa8>)
 800130e:	193b      	adds	r3, r7, r4
 8001310:	0018      	movs	r0, r3
 8001312:	f005 f975 	bl	8006600 <siprintf>
	drawTextAt(0, 60, str, hspi);
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	193a      	adds	r2, r7, r4
 800131a:	213c      	movs	r1, #60	; 0x3c
 800131c:	2000      	movs	r0, #0
 800131e:	f7ff fd29 	bl	8000d74 <drawTextAt>
	sprintf(str, "day: %2d", d.weekday);	// probably not gonna show nice since its an enum
 8001322:	197b      	adds	r3, r7, r5
 8001324:	78db      	ldrb	r3, [r3, #3]
 8001326:	001a      	movs	r2, r3
 8001328:	490a      	ldr	r1, [pc, #40]	; (8001354 <printDate+0xa8>)
 800132a:	193b      	adds	r3, r7, r4
 800132c:	0018      	movs	r0, r3
 800132e:	f005 f967 	bl	8006600 <siprintf>
	drawTextAt(0, 70, str, hspi);
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	193a      	adds	r2, r7, r4
 8001336:	2146      	movs	r1, #70	; 0x46
 8001338:	2000      	movs	r0, #0
 800133a:	f7ff fd1b 	bl	8000d74 <drawTextAt>
}
 800133e:	46c0      	nop			; (mov r8, r8)
 8001340:	46bd      	mov	sp, r7
 8001342:	b00e      	add	sp, #56	; 0x38
 8001344:	bdb0      	pop	{r4, r5, r7, pc}
 8001346:	46c0      	nop			; (mov r8, r8)
 8001348:	0000ffff 	.word	0x0000ffff
 800134c:	08006ea8 	.word	0x08006ea8
 8001350:	08006eb4 	.word	0x08006eb4
 8001354:	08006ec0 	.word	0x08006ec0

08001358 <printDateTime>:

void printDateTime(RTC_HandleTypeDef *hrtc, SPI_HandleTypeDef *hspi) {
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
 8001360:	6039      	str	r1, [r7, #0]
	printTime(hrtc, hspi);
 8001362:	683a      	ldr	r2, [r7, #0]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	0011      	movs	r1, r2
 8001368:	0018      	movs	r0, r3
 800136a:	f7ff ff57 	bl	800121c <printTime>
	printDate(hrtc, hspi);
 800136e:	683a      	ldr	r2, [r7, #0]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	0011      	movs	r1, r2
 8001374:	0018      	movs	r0, r3
 8001376:	f7ff ff99 	bl	80012ac <printDate>
}
 800137a:	46c0      	nop			; (mov r8, r8)
 800137c:	46bd      	mov	sp, r7
 800137e:	b002      	add	sp, #8
 8001380:	bd80      	pop	{r7, pc}
	...

08001384 <clockTest>:
// ---- end of clock print functions ----

// tests clock functions. assumes SPI display using TFT_display.c is available
void clockTest(RTC_HandleTypeDef *hrtc, SPI_HandleTypeDef *hspi) {
 8001384:	b5b0      	push	{r4, r5, r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
 800138c:	6039      	str	r1, [r7, #0]
	struct times t = {1, 1, 1};
 800138e:	250c      	movs	r5, #12
 8001390:	197b      	adds	r3, r7, r5
 8001392:	4a32      	ldr	r2, [pc, #200]	; (800145c <clockTest+0xd8>)
 8001394:	8811      	ldrh	r1, [r2, #0]
 8001396:	8019      	strh	r1, [r3, #0]
 8001398:	7892      	ldrb	r2, [r2, #2]
 800139a:	709a      	strb	r2, [r3, #2]
	struct dates d = {19, 11, 13};
 800139c:	2408      	movs	r4, #8
 800139e:	193b      	adds	r3, r7, r4
 80013a0:	2200      	movs	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]
 80013a4:	193b      	adds	r3, r7, r4
 80013a6:	2213      	movs	r2, #19
 80013a8:	701a      	strb	r2, [r3, #0]
 80013aa:	193b      	adds	r3, r7, r4
 80013ac:	220b      	movs	r2, #11
 80013ae:	705a      	strb	r2, [r3, #1]
 80013b0:	193b      	adds	r3, r7, r4
 80013b2:	220d      	movs	r2, #13
 80013b4:	709a      	strb	r2, [r3, #2]

	HAL_Delay(1000);
 80013b6:	23fa      	movs	r3, #250	; 0xfa
 80013b8:	009b      	lsls	r3, r3, #2
 80013ba:	0018      	movs	r0, r3
 80013bc:	f001 f9d8 	bl	8002770 <HAL_Delay>
	printDateTime(hrtc, hspi);
 80013c0:	683a      	ldr	r2, [r7, #0]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	0011      	movs	r1, r2
 80013c6:	0018      	movs	r0, r3
 80013c8:	f7ff ffc6 	bl	8001358 <printDateTime>
	HAL_Delay(2000);
 80013cc:	23fa      	movs	r3, #250	; 0xfa
 80013ce:	00db      	lsls	r3, r3, #3
 80013d0:	0018      	movs	r0, r3
 80013d2:	f001 f9cd 	bl	8002770 <HAL_Delay>
	printDateTime(hrtc, hspi);
 80013d6:	683a      	ldr	r2, [r7, #0]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	0011      	movs	r1, r2
 80013dc:	0018      	movs	r0, r3
 80013de:	f7ff ffbb 	bl	8001358 <printDateTime>

	HAL_Delay(1000);
 80013e2:	23fa      	movs	r3, #250	; 0xfa
 80013e4:	009b      	lsls	r3, r3, #2
 80013e6:	0018      	movs	r0, r3
 80013e8:	f001 f9c2 	bl	8002770 <HAL_Delay>
	setTime(&t, hrtc);
 80013ec:	687a      	ldr	r2, [r7, #4]
 80013ee:	197b      	adds	r3, r7, r5
 80013f0:	0011      	movs	r1, r2
 80013f2:	0018      	movs	r0, r3
 80013f4:	f7ff fcf6 	bl	8000de4 <setTime>
	printDateTime(hrtc, hspi);
 80013f8:	683a      	ldr	r2, [r7, #0]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	0011      	movs	r1, r2
 80013fe:	0018      	movs	r0, r3
 8001400:	f7ff ffaa 	bl	8001358 <printDateTime>
	HAL_Delay(1000);
 8001404:	23fa      	movs	r3, #250	; 0xfa
 8001406:	009b      	lsls	r3, r3, #2
 8001408:	0018      	movs	r0, r3
 800140a:	f001 f9b1 	bl	8002770 <HAL_Delay>
	printDateTime(hrtc, hspi);
 800140e:	683a      	ldr	r2, [r7, #0]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	0011      	movs	r1, r2
 8001414:	0018      	movs	r0, r3
 8001416:	f7ff ff9f 	bl	8001358 <printDateTime>

	HAL_Delay(1000);
 800141a:	23fa      	movs	r3, #250	; 0xfa
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	0018      	movs	r0, r3
 8001420:	f001 f9a6 	bl	8002770 <HAL_Delay>
	setDateTime(&d, &t, hrtc);
 8001424:	687a      	ldr	r2, [r7, #4]
 8001426:	1979      	adds	r1, r7, r5
 8001428:	193b      	adds	r3, r7, r4
 800142a:	0018      	movs	r0, r3
 800142c:	f7ff fd38 	bl	8000ea0 <setDateTime>
	printDateTime(hrtc, hspi);
 8001430:	683a      	ldr	r2, [r7, #0]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	0011      	movs	r1, r2
 8001436:	0018      	movs	r0, r3
 8001438:	f7ff ff8e 	bl	8001358 <printDateTime>
	HAL_Delay(1000);
 800143c:	23fa      	movs	r3, #250	; 0xfa
 800143e:	009b      	lsls	r3, r3, #2
 8001440:	0018      	movs	r0, r3
 8001442:	f001 f995 	bl	8002770 <HAL_Delay>
	printDateTime(hrtc, hspi);
 8001446:	683a      	ldr	r2, [r7, #0]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	0011      	movs	r1, r2
 800144c:	0018      	movs	r0, r3
 800144e:	f7ff ff83 	bl	8001358 <printDateTime>
}
 8001452:	46c0      	nop			; (mov r8, r8)
 8001454:	46bd      	mov	sp, r7
 8001456:	b004      	add	sp, #16
 8001458:	bdb0      	pop	{r4, r5, r7, pc}
 800145a:	46c0      	nop			; (mov r8, r8)
 800145c:	08006ecc 	.word	0x08006ecc

08001460 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001464:	f001 f924 	bl	80026b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001468:	f000 f83a 	bl	80014e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800146c:	f000 fada 	bl	8001a24 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001470:	f000 f9f4 	bl	800185c <MX_SPI1_Init>
  MX_ADC_Init();
 8001474:	f000 f8b8 	bl	80015e8 <MX_ADC_Init>
  MX_RTC_Init();
 8001478:	f000 f942 	bl	8001700 <MX_RTC_Init>
  MX_TIM21_Init();
 800147c:	f000 fa26 	bl	80018cc <MX_TIM21_Init>
  MX_LPTIM1_Init();
 8001480:	f000 f916 	bl	80016b0 <MX_LPTIM1_Init>
  MX_DMA_Init();
 8001484:	f000 fab0 	bl	80019e8 <MX_DMA_Init>
  /* USER CODE BEGIN 2 */
//	uint16_t bg = ST77XX_BLACK;
  	bg = ST77XX_BLACK;
 8001488:	4b11      	ldr	r3, [pc, #68]	; (80014d0 <main+0x70>)
 800148a:	2200      	movs	r2, #0
 800148c:	801a      	strh	r2, [r3, #0]
	HAL_Delay(2000);
 800148e:	23fa      	movs	r3, #250	; 0xfa
 8001490:	00db      	lsls	r3, r3, #3
 8001492:	0018      	movs	r0, r3
 8001494:	f001 f96c 	bl	8002770 <HAL_Delay>
	TFT_startup(&hspi1);
 8001498:	4b0e      	ldr	r3, [pc, #56]	; (80014d4 <main+0x74>)
 800149a:	0018      	movs	r0, r3
 800149c:	f7ff f8ba 	bl	8000614 <TFT_startup>
	fillScreen(bg, &hspi1);
 80014a0:	4b0b      	ldr	r3, [pc, #44]	; (80014d0 <main+0x70>)
 80014a2:	881b      	ldrh	r3, [r3, #0]
 80014a4:	4a0b      	ldr	r2, [pc, #44]	; (80014d4 <main+0x74>)
 80014a6:	0011      	movs	r1, r2
 80014a8:	0018      	movs	r0, r3
 80014aa:	f7ff fb3f 	bl	8000b2c <fillScreen>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  // default
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
 80014ae:	4b0a      	ldr	r3, [pc, #40]	; (80014d8 <main+0x78>)
 80014b0:	2102      	movs	r1, #2
 80014b2:	0018      	movs	r0, r3
 80014b4:	f002 f840 	bl	8003538 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 80014b8:	23fa      	movs	r3, #250	; 0xfa
 80014ba:	009b      	lsls	r3, r3, #2
 80014bc:	0018      	movs	r0, r3
 80014be:	f001 f957 	bl	8002770 <HAL_Delay>

	  // clocks tests
	  // not a loopable test yet
	  clockTest(&hrtc, &hspi1);
 80014c2:	4a04      	ldr	r2, [pc, #16]	; (80014d4 <main+0x74>)
 80014c4:	4b05      	ldr	r3, [pc, #20]	; (80014dc <main+0x7c>)
 80014c6:	0011      	movs	r1, r2
 80014c8:	0018      	movs	r0, r3
 80014ca:	f7ff ff5b 	bl	8001384 <clockTest>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
 80014ce:	e7ee      	b.n	80014ae <main+0x4e>
 80014d0:	2000008c 	.word	0x2000008c
 80014d4:	20000158 	.word	0x20000158
 80014d8:	50000400 	.word	0x50000400
 80014dc:	2000012c 	.word	0x2000012c

080014e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014e0:	b590      	push	{r4, r7, lr}
 80014e2:	b09f      	sub	sp, #124	; 0x7c
 80014e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014e6:	2440      	movs	r4, #64	; 0x40
 80014e8:	193b      	adds	r3, r7, r4
 80014ea:	0018      	movs	r0, r3
 80014ec:	2338      	movs	r3, #56	; 0x38
 80014ee:	001a      	movs	r2, r3
 80014f0:	2100      	movs	r1, #0
 80014f2:	f005 f87c 	bl	80065ee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014f6:	232c      	movs	r3, #44	; 0x2c
 80014f8:	18fb      	adds	r3, r7, r3
 80014fa:	0018      	movs	r0, r3
 80014fc:	2314      	movs	r3, #20
 80014fe:	001a      	movs	r2, r3
 8001500:	2100      	movs	r1, #0
 8001502:	f005 f874 	bl	80065ee <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001506:	1d3b      	adds	r3, r7, #4
 8001508:	0018      	movs	r0, r3
 800150a:	2328      	movs	r3, #40	; 0x28
 800150c:	001a      	movs	r2, r3
 800150e:	2100      	movs	r1, #0
 8001510:	f005 f86d 	bl	80065ee <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001514:	4b31      	ldr	r3, [pc, #196]	; (80015dc <SystemClock_Config+0xfc>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a31      	ldr	r2, [pc, #196]	; (80015e0 <SystemClock_Config+0x100>)
 800151a:	401a      	ands	r2, r3
 800151c:	4b2f      	ldr	r3, [pc, #188]	; (80015dc <SystemClock_Config+0xfc>)
 800151e:	2180      	movs	r1, #128	; 0x80
 8001520:	0109      	lsls	r1, r1, #4
 8001522:	430a      	orrs	r2, r1
 8001524:	601a      	str	r2, [r3, #0]
  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8001526:	f002 fad9 	bl	8003adc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800152a:	4b2e      	ldr	r3, [pc, #184]	; (80015e4 <SystemClock_Config+0x104>)
 800152c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800152e:	4b2d      	ldr	r3, [pc, #180]	; (80015e4 <SystemClock_Config+0x104>)
 8001530:	492b      	ldr	r1, [pc, #172]	; (80015e0 <SystemClock_Config+0x100>)
 8001532:	400a      	ands	r2, r1
 8001534:	651a      	str	r2, [r3, #80]	; 0x50
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
 8001536:	193b      	adds	r3, r7, r4
 8001538:	223c      	movs	r2, #60	; 0x3c
 800153a:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800153c:	193b      	adds	r3, r7, r4
 800153e:	2280      	movs	r2, #128	; 0x80
 8001540:	0052      	lsls	r2, r2, #1
 8001542:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001544:	0021      	movs	r1, r4
 8001546:	187b      	adds	r3, r7, r1
 8001548:	2201      	movs	r2, #1
 800154a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800154c:	187b      	adds	r3, r7, r1
 800154e:	2201      	movs	r2, #1
 8001550:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001552:	187b      	adds	r3, r7, r1
 8001554:	2201      	movs	r2, #1
 8001556:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001558:	187b      	adds	r3, r7, r1
 800155a:	2200      	movs	r2, #0
 800155c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 800155e:	187b      	adds	r3, r7, r1
 8001560:	22a0      	movs	r2, #160	; 0xa0
 8001562:	0212      	lsls	r2, r2, #8
 8001564:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001566:	187b      	adds	r3, r7, r1
 8001568:	2200      	movs	r2, #0
 800156a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800156c:	187b      	adds	r3, r7, r1
 800156e:	0018      	movs	r0, r3
 8001570:	f002 fac2 	bl	8003af8 <HAL_RCC_OscConfig>
 8001574:	1e03      	subs	r3, r0, #0
 8001576:	d001      	beq.n	800157c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001578:	f000 fb02 	bl	8001b80 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800157c:	212c      	movs	r1, #44	; 0x2c
 800157e:	187b      	adds	r3, r7, r1
 8001580:	220f      	movs	r2, #15
 8001582:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001584:	187b      	adds	r3, r7, r1
 8001586:	2200      	movs	r2, #0
 8001588:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800158a:	187b      	adds	r3, r7, r1
 800158c:	2200      	movs	r2, #0
 800158e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001590:	187b      	adds	r3, r7, r1
 8001592:	2200      	movs	r2, #0
 8001594:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001596:	187b      	adds	r3, r7, r1
 8001598:	2200      	movs	r2, #0
 800159a:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800159c:	187b      	adds	r3, r7, r1
 800159e:	2100      	movs	r1, #0
 80015a0:	0018      	movs	r0, r3
 80015a2:	f002 fe79 	bl	8004298 <HAL_RCC_ClockConfig>
 80015a6:	1e03      	subs	r3, r0, #0
 80015a8:	d001      	beq.n	80015ae <SystemClock_Config+0xce>
  {
    Error_Handler();
 80015aa:	f000 fae9 	bl	8001b80 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_LPTIM1;
 80015ae:	1d3b      	adds	r3, r7, #4
 80015b0:	22a0      	movs	r2, #160	; 0xa0
 80015b2:	601a      	str	r2, [r3, #0]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80015b4:	1d3b      	adds	r3, r7, #4
 80015b6:	2280      	movs	r2, #128	; 0x80
 80015b8:	0292      	lsls	r2, r2, #10
 80015ba:	605a      	str	r2, [r3, #4]
  PeriphClkInit.LptimClockSelection = RCC_LPTIM1CLKSOURCE_PCLK;
 80015bc:	1d3b      	adds	r3, r7, #4
 80015be:	2200      	movs	r2, #0
 80015c0:	621a      	str	r2, [r3, #32]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015c2:	1d3b      	adds	r3, r7, #4
 80015c4:	0018      	movs	r0, r3
 80015c6:	f003 f815 	bl	80045f4 <HAL_RCCEx_PeriphCLKConfig>
 80015ca:	1e03      	subs	r3, r0, #0
 80015cc:	d001      	beq.n	80015d2 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80015ce:	f000 fad7 	bl	8001b80 <Error_Handler>
  }
}
 80015d2:	46c0      	nop			; (mov r8, r8)
 80015d4:	46bd      	mov	sp, r7
 80015d6:	b01f      	add	sp, #124	; 0x7c
 80015d8:	bd90      	pop	{r4, r7, pc}
 80015da:	46c0      	nop			; (mov r8, r8)
 80015dc:	40007000 	.word	0x40007000
 80015e0:	ffffe7ff 	.word	0xffffe7ff
 80015e4:	40021000 	.word	0x40021000

080015e8 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80015ee:	003b      	movs	r3, r7
 80015f0:	0018      	movs	r0, r3
 80015f2:	2308      	movs	r3, #8
 80015f4:	001a      	movs	r2, r3
 80015f6:	2100      	movs	r1, #0
 80015f8:	f004 fff9 	bl	80065ee <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc.Instance = ADC1;
 80015fc:	4b2a      	ldr	r3, [pc, #168]	; (80016a8 <MX_ADC_Init+0xc0>)
 80015fe:	4a2b      	ldr	r2, [pc, #172]	; (80016ac <MX_ADC_Init+0xc4>)
 8001600:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8001602:	4b29      	ldr	r3, [pc, #164]	; (80016a8 <MX_ADC_Init+0xc0>)
 8001604:	2200      	movs	r2, #0
 8001606:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8001608:	4b27      	ldr	r3, [pc, #156]	; (80016a8 <MX_ADC_Init+0xc0>)
 800160a:	22c0      	movs	r2, #192	; 0xc0
 800160c:	0612      	lsls	r2, r2, #24
 800160e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001610:	4b25      	ldr	r3, [pc, #148]	; (80016a8 <MX_ADC_Init+0xc0>)
 8001612:	2200      	movs	r2, #0
 8001614:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001616:	4b24      	ldr	r3, [pc, #144]	; (80016a8 <MX_ADC_Init+0xc0>)
 8001618:	2200      	movs	r2, #0
 800161a:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800161c:	4b22      	ldr	r3, [pc, #136]	; (80016a8 <MX_ADC_Init+0xc0>)
 800161e:	2201      	movs	r2, #1
 8001620:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001622:	4b21      	ldr	r3, [pc, #132]	; (80016a8 <MX_ADC_Init+0xc0>)
 8001624:	2200      	movs	r2, #0
 8001626:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8001628:	4b1f      	ldr	r3, [pc, #124]	; (80016a8 <MX_ADC_Init+0xc0>)
 800162a:	2220      	movs	r2, #32
 800162c:	2100      	movs	r1, #0
 800162e:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001630:	4b1d      	ldr	r3, [pc, #116]	; (80016a8 <MX_ADC_Init+0xc0>)
 8001632:	2221      	movs	r2, #33	; 0x21
 8001634:	2100      	movs	r1, #0
 8001636:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001638:	4b1b      	ldr	r3, [pc, #108]	; (80016a8 <MX_ADC_Init+0xc0>)
 800163a:	2200      	movs	r2, #0
 800163c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800163e:	4b1a      	ldr	r3, [pc, #104]	; (80016a8 <MX_ADC_Init+0xc0>)
 8001640:	22c2      	movs	r2, #194	; 0xc2
 8001642:	32ff      	adds	r2, #255	; 0xff
 8001644:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001646:	4b18      	ldr	r3, [pc, #96]	; (80016a8 <MX_ADC_Init+0xc0>)
 8001648:	222c      	movs	r2, #44	; 0x2c
 800164a:	2100      	movs	r1, #0
 800164c:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800164e:	4b16      	ldr	r3, [pc, #88]	; (80016a8 <MX_ADC_Init+0xc0>)
 8001650:	2204      	movs	r2, #4
 8001652:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001654:	4b14      	ldr	r3, [pc, #80]	; (80016a8 <MX_ADC_Init+0xc0>)
 8001656:	2200      	movs	r2, #0
 8001658:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 800165a:	4b13      	ldr	r3, [pc, #76]	; (80016a8 <MX_ADC_Init+0xc0>)
 800165c:	2200      	movs	r2, #0
 800165e:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8001660:	4b11      	ldr	r3, [pc, #68]	; (80016a8 <MX_ADC_Init+0xc0>)
 8001662:	2200      	movs	r2, #0
 8001664:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8001666:	4b10      	ldr	r3, [pc, #64]	; (80016a8 <MX_ADC_Init+0xc0>)
 8001668:	2200      	movs	r2, #0
 800166a:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800166c:	4b0e      	ldr	r3, [pc, #56]	; (80016a8 <MX_ADC_Init+0xc0>)
 800166e:	0018      	movs	r0, r3
 8001670:	f001 f89c 	bl	80027ac <HAL_ADC_Init>
 8001674:	1e03      	subs	r3, r0, #0
 8001676:	d001      	beq.n	800167c <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8001678:	f000 fa82 	bl	8001b80 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800167c:	003b      	movs	r3, r7
 800167e:	2201      	movs	r2, #1
 8001680:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8001682:	003b      	movs	r3, r7
 8001684:	2280      	movs	r2, #128	; 0x80
 8001686:	0152      	lsls	r2, r2, #5
 8001688:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800168a:	003a      	movs	r2, r7
 800168c:	4b06      	ldr	r3, [pc, #24]	; (80016a8 <MX_ADC_Init+0xc0>)
 800168e:	0011      	movs	r1, r2
 8001690:	0018      	movs	r0, r3
 8001692:	f001 f9ff 	bl	8002a94 <HAL_ADC_ConfigChannel>
 8001696:	1e03      	subs	r3, r0, #0
 8001698:	d001      	beq.n	800169e <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 800169a:	f000 fa71 	bl	8001b80 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800169e:	46c0      	nop			; (mov r8, r8)
 80016a0:	46bd      	mov	sp, r7
 80016a2:	b002      	add	sp, #8
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	46c0      	nop			; (mov r8, r8)
 80016a8:	200001b4 	.word	0x200001b4
 80016ac:	40012400 	.word	0x40012400

080016b0 <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 80016b4:	4b0f      	ldr	r3, [pc, #60]	; (80016f4 <MX_LPTIM1_Init+0x44>)
 80016b6:	4a10      	ldr	r2, [pc, #64]	; (80016f8 <MX_LPTIM1_Init+0x48>)
 80016b8:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 80016ba:	4b0e      	ldr	r3, [pc, #56]	; (80016f4 <MX_LPTIM1_Init+0x44>)
 80016bc:	2200      	movs	r2, #0
 80016be:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 80016c0:	4b0c      	ldr	r3, [pc, #48]	; (80016f4 <MX_LPTIM1_Init+0x44>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 80016c6:	4b0b      	ldr	r3, [pc, #44]	; (80016f4 <MX_LPTIM1_Init+0x44>)
 80016c8:	4a0c      	ldr	r2, [pc, #48]	; (80016fc <MX_LPTIM1_Init+0x4c>)
 80016ca:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 80016cc:	4b09      	ldr	r3, [pc, #36]	; (80016f4 <MX_LPTIM1_Init+0x44>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 80016d2:	4b08      	ldr	r3, [pc, #32]	; (80016f4 <MX_LPTIM1_Init+0x44>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 80016d8:	4b06      	ldr	r3, [pc, #24]	; (80016f4 <MX_LPTIM1_Init+0x44>)
 80016da:	2200      	movs	r2, #0
 80016dc:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 80016de:	4b05      	ldr	r3, [pc, #20]	; (80016f4 <MX_LPTIM1_Init+0x44>)
 80016e0:	0018      	movs	r0, r3
 80016e2:	f001 ff57 	bl	8003594 <HAL_LPTIM_Init>
 80016e6:	1e03      	subs	r3, r0, #0
 80016e8:	d001      	beq.n	80016ee <MX_LPTIM1_Init+0x3e>
  {
    Error_Handler();
 80016ea:	f000 fa49 	bl	8001b80 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 80016ee:	46c0      	nop			; (mov r8, r8)
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	200000fc 	.word	0x200000fc
 80016f8:	40007c00 	.word	0x40007c00
 80016fc:	0000ffff 	.word	0x0000ffff

08001700 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b090      	sub	sp, #64	; 0x40
 8001704:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001706:	232c      	movs	r3, #44	; 0x2c
 8001708:	18fb      	adds	r3, r7, r3
 800170a:	0018      	movs	r0, r3
 800170c:	2314      	movs	r3, #20
 800170e:	001a      	movs	r2, r3
 8001710:	2100      	movs	r1, #0
 8001712:	f004 ff6c 	bl	80065ee <memset>
  RTC_DateTypeDef sDate = {0};
 8001716:	2328      	movs	r3, #40	; 0x28
 8001718:	18fb      	adds	r3, r7, r3
 800171a:	2200      	movs	r2, #0
 800171c:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 800171e:	003b      	movs	r3, r7
 8001720:	0018      	movs	r0, r3
 8001722:	2328      	movs	r3, #40	; 0x28
 8001724:	001a      	movs	r2, r3
 8001726:	2100      	movs	r1, #0
 8001728:	f004 ff61 	bl	80065ee <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 800172c:	4b49      	ldr	r3, [pc, #292]	; (8001854 <MX_RTC_Init+0x154>)
 800172e:	4a4a      	ldr	r2, [pc, #296]	; (8001858 <MX_RTC_Init+0x158>)
 8001730:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001732:	4b48      	ldr	r3, [pc, #288]	; (8001854 <MX_RTC_Init+0x154>)
 8001734:	2200      	movs	r2, #0
 8001736:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001738:	4b46      	ldr	r3, [pc, #280]	; (8001854 <MX_RTC_Init+0x154>)
 800173a:	227f      	movs	r2, #127	; 0x7f
 800173c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800173e:	4b45      	ldr	r3, [pc, #276]	; (8001854 <MX_RTC_Init+0x154>)
 8001740:	22ff      	movs	r2, #255	; 0xff
 8001742:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001744:	4b43      	ldr	r3, [pc, #268]	; (8001854 <MX_RTC_Init+0x154>)
 8001746:	2200      	movs	r2, #0
 8001748:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800174a:	4b42      	ldr	r3, [pc, #264]	; (8001854 <MX_RTC_Init+0x154>)
 800174c:	2200      	movs	r2, #0
 800174e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001750:	4b40      	ldr	r3, [pc, #256]	; (8001854 <MX_RTC_Init+0x154>)
 8001752:	2200      	movs	r2, #0
 8001754:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001756:	4b3f      	ldr	r3, [pc, #252]	; (8001854 <MX_RTC_Init+0x154>)
 8001758:	2200      	movs	r2, #0
 800175a:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800175c:	4b3d      	ldr	r3, [pc, #244]	; (8001854 <MX_RTC_Init+0x154>)
 800175e:	0018      	movs	r0, r3
 8001760:	f003 f8bc 	bl	80048dc <HAL_RTC_Init>
 8001764:	1e03      	subs	r3, r0, #0
 8001766:	d001      	beq.n	800176c <MX_RTC_Init+0x6c>
  {
    Error_Handler();
 8001768:	f000 fa0a 	bl	8001b80 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0;
 800176c:	212c      	movs	r1, #44	; 0x2c
 800176e:	187b      	adds	r3, r7, r1
 8001770:	2200      	movs	r2, #0
 8001772:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0;
 8001774:	187b      	adds	r3, r7, r1
 8001776:	2200      	movs	r2, #0
 8001778:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 800177a:	187b      	adds	r3, r7, r1
 800177c:	2200      	movs	r2, #0
 800177e:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001780:	187b      	adds	r3, r7, r1
 8001782:	2200      	movs	r2, #0
 8001784:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001786:	187b      	adds	r3, r7, r1
 8001788:	2200      	movs	r2, #0
 800178a:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800178c:	1879      	adds	r1, r7, r1
 800178e:	4b31      	ldr	r3, [pc, #196]	; (8001854 <MX_RTC_Init+0x154>)
 8001790:	2200      	movs	r2, #0
 8001792:	0018      	movs	r0, r3
 8001794:	f003 f940 	bl	8004a18 <HAL_RTC_SetTime>
 8001798:	1e03      	subs	r3, r0, #0
 800179a:	d001      	beq.n	80017a0 <MX_RTC_Init+0xa0>
  {
    Error_Handler();
 800179c:	f000 f9f0 	bl	8001b80 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80017a0:	2128      	movs	r1, #40	; 0x28
 80017a2:	187b      	adds	r3, r7, r1
 80017a4:	2201      	movs	r2, #1
 80017a6:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80017a8:	187b      	adds	r3, r7, r1
 80017aa:	2201      	movs	r2, #1
 80017ac:	705a      	strb	r2, [r3, #1]
  sDate.Date = 1;
 80017ae:	187b      	adds	r3, r7, r1
 80017b0:	2201      	movs	r2, #1
 80017b2:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0;
 80017b4:	187b      	adds	r3, r7, r1
 80017b6:	2200      	movs	r2, #0
 80017b8:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80017ba:	1879      	adds	r1, r7, r1
 80017bc:	4b25      	ldr	r3, [pc, #148]	; (8001854 <MX_RTC_Init+0x154>)
 80017be:	2200      	movs	r2, #0
 80017c0:	0018      	movs	r0, r3
 80017c2:	f003 fa49 	bl	8004c58 <HAL_RTC_SetDate>
 80017c6:	1e03      	subs	r3, r0, #0
 80017c8:	d001      	beq.n	80017ce <MX_RTC_Init+0xce>
  {
    Error_Handler();
 80017ca:	f000 f9d9 	bl	8001b80 <Error_Handler>
  }
  /** Enable the Alarm A 
  */
  sAlarm.AlarmTime.Hours = 0;
 80017ce:	003b      	movs	r3, r7
 80017d0:	2200      	movs	r2, #0
 80017d2:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0;
 80017d4:	003b      	movs	r3, r7
 80017d6:	2200      	movs	r2, #0
 80017d8:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0;
 80017da:	003b      	movs	r3, r7
 80017dc:	2200      	movs	r2, #0
 80017de:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 80017e0:	003b      	movs	r3, r7
 80017e2:	2200      	movs	r2, #0
 80017e4:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80017e6:	003b      	movs	r3, r7
 80017e8:	2200      	movs	r2, #0
 80017ea:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80017ec:	003b      	movs	r3, r7
 80017ee:	2200      	movs	r2, #0
 80017f0:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80017f2:	003b      	movs	r3, r7
 80017f4:	2200      	movs	r2, #0
 80017f6:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80017f8:	003b      	movs	r3, r7
 80017fa:	2200      	movs	r2, #0
 80017fc:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80017fe:	003b      	movs	r3, r7
 8001800:	2200      	movs	r2, #0
 8001802:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 1;
 8001804:	003b      	movs	r3, r7
 8001806:	2220      	movs	r2, #32
 8001808:	2101      	movs	r1, #1
 800180a:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 800180c:	003b      	movs	r3, r7
 800180e:	2280      	movs	r2, #128	; 0x80
 8001810:	0052      	lsls	r2, r2, #1
 8001812:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8001814:	0039      	movs	r1, r7
 8001816:	4b0f      	ldr	r3, [pc, #60]	; (8001854 <MX_RTC_Init+0x154>)
 8001818:	2200      	movs	r2, #0
 800181a:	0018      	movs	r0, r3
 800181c:	f003 fb18 	bl	8004e50 <HAL_RTC_SetAlarm_IT>
 8001820:	1e03      	subs	r3, r0, #0
 8001822:	d001      	beq.n	8001828 <MX_RTC_Init+0x128>
  {
    Error_Handler();
 8001824:	f000 f9ac 	bl	8001b80 <Error_Handler>
  }
  /** Enable the Alarm B 
  */
  sAlarm.AlarmDateWeekDay = 1;
 8001828:	003b      	movs	r3, r7
 800182a:	2220      	movs	r2, #32
 800182c:	2101      	movs	r1, #1
 800182e:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_B;
 8001830:	003b      	movs	r3, r7
 8001832:	2280      	movs	r2, #128	; 0x80
 8001834:	0092      	lsls	r2, r2, #2
 8001836:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8001838:	0039      	movs	r1, r7
 800183a:	4b06      	ldr	r3, [pc, #24]	; (8001854 <MX_RTC_Init+0x154>)
 800183c:	2200      	movs	r2, #0
 800183e:	0018      	movs	r0, r3
 8001840:	f003 fb06 	bl	8004e50 <HAL_RTC_SetAlarm_IT>
 8001844:	1e03      	subs	r3, r0, #0
 8001846:	d001      	beq.n	800184c <MX_RTC_Init+0x14c>
  {
    Error_Handler();
 8001848:	f000 f99a 	bl	8001b80 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800184c:	46c0      	nop			; (mov r8, r8)
 800184e:	46bd      	mov	sp, r7
 8001850:	b010      	add	sp, #64	; 0x40
 8001852:	bd80      	pop	{r7, pc}
 8001854:	2000012c 	.word	0x2000012c
 8001858:	40002800 	.word	0x40002800

0800185c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001860:	4b18      	ldr	r3, [pc, #96]	; (80018c4 <MX_SPI1_Init+0x68>)
 8001862:	4a19      	ldr	r2, [pc, #100]	; (80018c8 <MX_SPI1_Init+0x6c>)
 8001864:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001866:	4b17      	ldr	r3, [pc, #92]	; (80018c4 <MX_SPI1_Init+0x68>)
 8001868:	2282      	movs	r2, #130	; 0x82
 800186a:	0052      	lsls	r2, r2, #1
 800186c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800186e:	4b15      	ldr	r3, [pc, #84]	; (80018c4 <MX_SPI1_Init+0x68>)
 8001870:	2200      	movs	r2, #0
 8001872:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001874:	4b13      	ldr	r3, [pc, #76]	; (80018c4 <MX_SPI1_Init+0x68>)
 8001876:	2200      	movs	r2, #0
 8001878:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800187a:	4b12      	ldr	r3, [pc, #72]	; (80018c4 <MX_SPI1_Init+0x68>)
 800187c:	2200      	movs	r2, #0
 800187e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001880:	4b10      	ldr	r3, [pc, #64]	; (80018c4 <MX_SPI1_Init+0x68>)
 8001882:	2200      	movs	r2, #0
 8001884:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001886:	4b0f      	ldr	r3, [pc, #60]	; (80018c4 <MX_SPI1_Init+0x68>)
 8001888:	2280      	movs	r2, #128	; 0x80
 800188a:	0092      	lsls	r2, r2, #2
 800188c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800188e:	4b0d      	ldr	r3, [pc, #52]	; (80018c4 <MX_SPI1_Init+0x68>)
 8001890:	2200      	movs	r2, #0
 8001892:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001894:	4b0b      	ldr	r3, [pc, #44]	; (80018c4 <MX_SPI1_Init+0x68>)
 8001896:	2200      	movs	r2, #0
 8001898:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800189a:	4b0a      	ldr	r3, [pc, #40]	; (80018c4 <MX_SPI1_Init+0x68>)
 800189c:	2200      	movs	r2, #0
 800189e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018a0:	4b08      	ldr	r3, [pc, #32]	; (80018c4 <MX_SPI1_Init+0x68>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80018a6:	4b07      	ldr	r3, [pc, #28]	; (80018c4 <MX_SPI1_Init+0x68>)
 80018a8:	2207      	movs	r2, #7
 80018aa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80018ac:	4b05      	ldr	r3, [pc, #20]	; (80018c4 <MX_SPI1_Init+0x68>)
 80018ae:	0018      	movs	r0, r3
 80018b0:	f003 fda8 	bl	8005404 <HAL_SPI_Init>
 80018b4:	1e03      	subs	r3, r0, #0
 80018b6:	d001      	beq.n	80018bc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80018b8:	f000 f962 	bl	8001b80 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80018bc:	46c0      	nop			; (mov r8, r8)
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	46c0      	nop			; (mov r8, r8)
 80018c4:	20000158 	.word	0x20000158
 80018c8:	40013000 	.word	0x40013000

080018cc <MX_TIM21_Init>:
  * @brief TIM21 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM21_Init(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b08a      	sub	sp, #40	; 0x28
 80018d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM21_Init 0 */

  /* USER CODE END TIM21_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018d2:	2318      	movs	r3, #24
 80018d4:	18fb      	adds	r3, r7, r3
 80018d6:	0018      	movs	r0, r3
 80018d8:	2310      	movs	r3, #16
 80018da:	001a      	movs	r2, r3
 80018dc:	2100      	movs	r1, #0
 80018de:	f004 fe86 	bl	80065ee <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018e2:	2310      	movs	r3, #16
 80018e4:	18fb      	adds	r3, r7, r3
 80018e6:	0018      	movs	r0, r3
 80018e8:	2308      	movs	r3, #8
 80018ea:	001a      	movs	r2, r3
 80018ec:	2100      	movs	r1, #0
 80018ee:	f004 fe7e 	bl	80065ee <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018f2:	003b      	movs	r3, r7
 80018f4:	0018      	movs	r0, r3
 80018f6:	2310      	movs	r3, #16
 80018f8:	001a      	movs	r2, r3
 80018fa:	2100      	movs	r1, #0
 80018fc:	f004 fe77 	bl	80065ee <memset>

  /* USER CODE BEGIN TIM21_Init 1 */

  /* USER CODE END TIM21_Init 1 */
  htim21.Instance = TIM21;
 8001900:	4b37      	ldr	r3, [pc, #220]	; (80019e0 <MX_TIM21_Init+0x114>)
 8001902:	4a38      	ldr	r2, [pc, #224]	; (80019e4 <MX_TIM21_Init+0x118>)
 8001904:	601a      	str	r2, [r3, #0]
  htim21.Init.Prescaler = 0;
 8001906:	4b36      	ldr	r3, [pc, #216]	; (80019e0 <MX_TIM21_Init+0x114>)
 8001908:	2200      	movs	r2, #0
 800190a:	605a      	str	r2, [r3, #4]
  htim21.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 800190c:	4b34      	ldr	r3, [pc, #208]	; (80019e0 <MX_TIM21_Init+0x114>)
 800190e:	2210      	movs	r2, #16
 8001910:	609a      	str	r2, [r3, #8]
  htim21.Init.Period = 0x8000;
 8001912:	4b33      	ldr	r3, [pc, #204]	; (80019e0 <MX_TIM21_Init+0x114>)
 8001914:	2280      	movs	r2, #128	; 0x80
 8001916:	0212      	lsls	r2, r2, #8
 8001918:	60da      	str	r2, [r3, #12]
  htim21.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800191a:	4b31      	ldr	r3, [pc, #196]	; (80019e0 <MX_TIM21_Init+0x114>)
 800191c:	2200      	movs	r2, #0
 800191e:	611a      	str	r2, [r3, #16]
  htim21.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001920:	4b2f      	ldr	r3, [pc, #188]	; (80019e0 <MX_TIM21_Init+0x114>)
 8001922:	2200      	movs	r2, #0
 8001924:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim21) != HAL_OK)
 8001926:	4b2e      	ldr	r3, [pc, #184]	; (80019e0 <MX_TIM21_Init+0x114>)
 8001928:	0018      	movs	r0, r3
 800192a:	f004 fa42 	bl	8005db2 <HAL_TIM_Base_Init>
 800192e:	1e03      	subs	r3, r0, #0
 8001930:	d001      	beq.n	8001936 <MX_TIM21_Init+0x6a>
  {
    Error_Handler();
 8001932:	f000 f925 	bl	8001b80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 8001936:	2118      	movs	r1, #24
 8001938:	187b      	adds	r3, r7, r1
 800193a:	2280      	movs	r2, #128	; 0x80
 800193c:	0192      	lsls	r2, r2, #6
 800193e:	601a      	str	r2, [r3, #0]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 8001940:	187b      	adds	r3, r7, r1
 8001942:	2200      	movs	r2, #0
 8001944:	605a      	str	r2, [r3, #4]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 8001946:	187b      	adds	r3, r7, r1
 8001948:	2200      	movs	r2, #0
 800194a:	609a      	str	r2, [r3, #8]
  sClockSourceConfig.ClockFilter = 0;
 800194c:	187b      	adds	r3, r7, r1
 800194e:	2200      	movs	r2, #0
 8001950:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_ConfigClockSource(&htim21, &sClockSourceConfig) != HAL_OK)
 8001952:	187a      	adds	r2, r7, r1
 8001954:	4b22      	ldr	r3, [pc, #136]	; (80019e0 <MX_TIM21_Init+0x114>)
 8001956:	0011      	movs	r1, r2
 8001958:	0018      	movs	r0, r3
 800195a:	f004 fafb 	bl	8005f54 <HAL_TIM_ConfigClockSource>
 800195e:	1e03      	subs	r3, r0, #0
 8001960:	d001      	beq.n	8001966 <MX_TIM21_Init+0x9a>
  {
    Error_Handler();
 8001962:	f000 f90d 	bl	8001b80 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim21) != HAL_OK)
 8001966:	4b1e      	ldr	r3, [pc, #120]	; (80019e0 <MX_TIM21_Init+0x114>)
 8001968:	0018      	movs	r0, r3
 800196a:	f004 fa70 	bl	8005e4e <HAL_TIM_OC_Init>
 800196e:	1e03      	subs	r3, r0, #0
 8001970:	d001      	beq.n	8001976 <MX_TIM21_Init+0xaa>
  {
    Error_Handler();
 8001972:	f000 f905 	bl	8001b80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001976:	2110      	movs	r1, #16
 8001978:	187b      	adds	r3, r7, r1
 800197a:	2200      	movs	r2, #0
 800197c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800197e:	187b      	adds	r3, r7, r1
 8001980:	2200      	movs	r2, #0
 8001982:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim21, &sMasterConfig) != HAL_OK)
 8001984:	187a      	adds	r2, r7, r1
 8001986:	4b16      	ldr	r3, [pc, #88]	; (80019e0 <MX_TIM21_Init+0x114>)
 8001988:	0011      	movs	r1, r2
 800198a:	0018      	movs	r0, r3
 800198c:	f004 fd9c 	bl	80064c8 <HAL_TIMEx_MasterConfigSynchronization>
 8001990:	1e03      	subs	r3, r0, #0
 8001992:	d001      	beq.n	8001998 <MX_TIM21_Init+0xcc>
  {
    Error_Handler();
 8001994:	f000 f8f4 	bl	8001b80 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim21, TIM21_ETR_LSE) != HAL_OK)
 8001998:	4b11      	ldr	r3, [pc, #68]	; (80019e0 <MX_TIM21_Init+0x114>)
 800199a:	2103      	movs	r1, #3
 800199c:	0018      	movs	r0, r3
 800199e:	f004 fdd6 	bl	800654e <HAL_TIMEx_RemapConfig>
 80019a2:	1e03      	subs	r3, r0, #0
 80019a4:	d001      	beq.n	80019aa <MX_TIM21_Init+0xde>
  {
    Error_Handler();
 80019a6:	f000 f8eb 	bl	8001b80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80019aa:	003b      	movs	r3, r7
 80019ac:	2200      	movs	r2, #0
 80019ae:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80019b0:	003b      	movs	r3, r7
 80019b2:	2200      	movs	r2, #0
 80019b4:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019b6:	003b      	movs	r3, r7
 80019b8:	2200      	movs	r2, #0
 80019ba:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019bc:	003b      	movs	r3, r7
 80019be:	2200      	movs	r2, #0
 80019c0:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_OC_ConfigChannel(&htim21, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019c2:	0039      	movs	r1, r7
 80019c4:	4b06      	ldr	r3, [pc, #24]	; (80019e0 <MX_TIM21_Init+0x114>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	0018      	movs	r0, r3
 80019ca:	f004 fa74 	bl	8005eb6 <HAL_TIM_OC_ConfigChannel>
 80019ce:	1e03      	subs	r3, r0, #0
 80019d0:	d001      	beq.n	80019d6 <MX_TIM21_Init+0x10a>
  {
    Error_Handler();
 80019d2:	f000 f8d5 	bl	8001b80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM21_Init 2 */

  /* USER CODE END TIM21_Init 2 */

}
 80019d6:	46c0      	nop			; (mov r8, r8)
 80019d8:	46bd      	mov	sp, r7
 80019da:	b00a      	add	sp, #40	; 0x28
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	46c0      	nop			; (mov r8, r8)
 80019e0:	20000258 	.word	0x20000258
 80019e4:	40010800 	.word	0x40010800

080019e8 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80019ee:	4b0c      	ldr	r3, [pc, #48]	; (8001a20 <MX_DMA_Init+0x38>)
 80019f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80019f2:	4b0b      	ldr	r3, [pc, #44]	; (8001a20 <MX_DMA_Init+0x38>)
 80019f4:	2101      	movs	r1, #1
 80019f6:	430a      	orrs	r2, r1
 80019f8:	631a      	str	r2, [r3, #48]	; 0x30
 80019fa:	4b09      	ldr	r3, [pc, #36]	; (8001a20 <MX_DMA_Init+0x38>)
 80019fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fe:	2201      	movs	r2, #1
 8001a00:	4013      	ands	r3, r2
 8001a02:	607b      	str	r3, [r7, #4]
 8001a04:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8001a06:	2200      	movs	r2, #0
 8001a08:	2100      	movs	r1, #0
 8001a0a:	200a      	movs	r0, #10
 8001a0c:	f001 f9a8 	bl	8002d60 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8001a10:	200a      	movs	r0, #10
 8001a12:	f001 f9ba 	bl	8002d8a <HAL_NVIC_EnableIRQ>

}
 8001a16:	46c0      	nop			; (mov r8, r8)
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	b002      	add	sp, #8
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	46c0      	nop			; (mov r8, r8)
 8001a20:	40021000 	.word	0x40021000

08001a24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a24:	b590      	push	{r4, r7, lr}
 8001a26:	b089      	sub	sp, #36	; 0x24
 8001a28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a2a:	240c      	movs	r4, #12
 8001a2c:	193b      	adds	r3, r7, r4
 8001a2e:	0018      	movs	r0, r3
 8001a30:	2314      	movs	r3, #20
 8001a32:	001a      	movs	r2, r3
 8001a34:	2100      	movs	r1, #0
 8001a36:	f004 fdda 	bl	80065ee <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a3a:	4b4c      	ldr	r3, [pc, #304]	; (8001b6c <MX_GPIO_Init+0x148>)
 8001a3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a3e:	4b4b      	ldr	r3, [pc, #300]	; (8001b6c <MX_GPIO_Init+0x148>)
 8001a40:	2104      	movs	r1, #4
 8001a42:	430a      	orrs	r2, r1
 8001a44:	62da      	str	r2, [r3, #44]	; 0x2c
 8001a46:	4b49      	ldr	r3, [pc, #292]	; (8001b6c <MX_GPIO_Init+0x148>)
 8001a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a4a:	2204      	movs	r2, #4
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	60bb      	str	r3, [r7, #8]
 8001a50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a52:	4b46      	ldr	r3, [pc, #280]	; (8001b6c <MX_GPIO_Init+0x148>)
 8001a54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a56:	4b45      	ldr	r3, [pc, #276]	; (8001b6c <MX_GPIO_Init+0x148>)
 8001a58:	2101      	movs	r1, #1
 8001a5a:	430a      	orrs	r2, r1
 8001a5c:	62da      	str	r2, [r3, #44]	; 0x2c
 8001a5e:	4b43      	ldr	r3, [pc, #268]	; (8001b6c <MX_GPIO_Init+0x148>)
 8001a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a62:	2201      	movs	r2, #1
 8001a64:	4013      	ands	r3, r2
 8001a66:	607b      	str	r3, [r7, #4]
 8001a68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a6a:	4b40      	ldr	r3, [pc, #256]	; (8001b6c <MX_GPIO_Init+0x148>)
 8001a6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a6e:	4b3f      	ldr	r3, [pc, #252]	; (8001b6c <MX_GPIO_Init+0x148>)
 8001a70:	2102      	movs	r1, #2
 8001a72:	430a      	orrs	r2, r1
 8001a74:	62da      	str	r2, [r3, #44]	; 0x2c
 8001a76:	4b3d      	ldr	r3, [pc, #244]	; (8001b6c <MX_GPIO_Init+0x148>)
 8001a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a7a:	2202      	movs	r2, #2
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	603b      	str	r3, [r7, #0]
 8001a80:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_7, GPIO_PIN_RESET);
 8001a82:	4b3b      	ldr	r3, [pc, #236]	; (8001b70 <MX_GPIO_Init+0x14c>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	2183      	movs	r1, #131	; 0x83
 8001a88:	0018      	movs	r0, r3
 8001a8a:	f001 fd38 	bl	80034fe <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_6, GPIO_PIN_RESET);
 8001a8e:	4b39      	ldr	r3, [pc, #228]	; (8001b74 <MX_GPIO_Init+0x150>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	2142      	movs	r1, #66	; 0x42
 8001a94:	0018      	movs	r0, r3
 8001a96:	f001 fd32 	bl	80034fe <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_7;
 8001a9a:	0021      	movs	r1, r4
 8001a9c:	187b      	adds	r3, r7, r1
 8001a9e:	2283      	movs	r2, #131	; 0x83
 8001aa0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aa2:	187b      	adds	r3, r7, r1
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa8:	187b      	adds	r3, r7, r1
 8001aaa:	2200      	movs	r2, #0
 8001aac:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aae:	187b      	adds	r3, r7, r1
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ab4:	000c      	movs	r4, r1
 8001ab6:	187b      	adds	r3, r7, r1
 8001ab8:	4a2d      	ldr	r2, [pc, #180]	; (8001b70 <MX_GPIO_Init+0x14c>)
 8001aba:	0019      	movs	r1, r3
 8001abc:	0010      	movs	r0, r2
 8001abe:	f001 fb83 	bl	80031c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6;
 8001ac2:	0021      	movs	r1, r4
 8001ac4:	187b      	adds	r3, r7, r1
 8001ac6:	2242      	movs	r2, #66	; 0x42
 8001ac8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aca:	187b      	adds	r3, r7, r1
 8001acc:	2201      	movs	r2, #1
 8001ace:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad0:	187b      	adds	r3, r7, r1
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad6:	187b      	adds	r3, r7, r1
 8001ad8:	2200      	movs	r2, #0
 8001ada:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001adc:	000c      	movs	r4, r1
 8001ade:	187b      	adds	r3, r7, r1
 8001ae0:	4a24      	ldr	r2, [pc, #144]	; (8001b74 <MX_GPIO_Init+0x150>)
 8001ae2:	0019      	movs	r1, r3
 8001ae4:	0010      	movs	r0, r2
 8001ae6:	f001 fb6f 	bl	80031c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001aea:	0021      	movs	r1, r4
 8001aec:	187b      	adds	r3, r7, r1
 8001aee:	2204      	movs	r2, #4
 8001af0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001af2:	187b      	adds	r3, r7, r1
 8001af4:	4a20      	ldr	r2, [pc, #128]	; (8001b78 <MX_GPIO_Init+0x154>)
 8001af6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af8:	187b      	adds	r3, r7, r1
 8001afa:	2200      	movs	r2, #0
 8001afc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001afe:	000c      	movs	r4, r1
 8001b00:	187b      	adds	r3, r7, r1
 8001b02:	4a1c      	ldr	r2, [pc, #112]	; (8001b74 <MX_GPIO_Init+0x150>)
 8001b04:	0019      	movs	r1, r3
 8001b06:	0010      	movs	r0, r2
 8001b08:	f001 fb5e 	bl	80031c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8001b0c:	0021      	movs	r1, r4
 8001b0e:	187b      	adds	r3, r7, r1
 8001b10:	22c0      	movs	r2, #192	; 0xc0
 8001b12:	01d2      	lsls	r2, r2, #7
 8001b14:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b16:	187b      	adds	r3, r7, r1
 8001b18:	4a17      	ldr	r2, [pc, #92]	; (8001b78 <MX_GPIO_Init+0x154>)
 8001b1a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001b1c:	187b      	adds	r3, r7, r1
 8001b1e:	2202      	movs	r2, #2
 8001b20:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b22:	000c      	movs	r4, r1
 8001b24:	187b      	adds	r3, r7, r1
 8001b26:	4a13      	ldr	r2, [pc, #76]	; (8001b74 <MX_GPIO_Init+0x150>)
 8001b28:	0019      	movs	r1, r3
 8001b2a:	0010      	movs	r0, r2
 8001b2c:	f001 fb4c 	bl	80031c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001b30:	0021      	movs	r1, r4
 8001b32:	187b      	adds	r3, r7, r1
 8001b34:	2280      	movs	r2, #128	; 0x80
 8001b36:	0212      	lsls	r2, r2, #8
 8001b38:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001b3a:	187b      	adds	r3, r7, r1
 8001b3c:	4a0f      	ldr	r2, [pc, #60]	; (8001b7c <MX_GPIO_Init+0x158>)
 8001b3e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b40:	187b      	adds	r3, r7, r1
 8001b42:	2201      	movs	r2, #1
 8001b44:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b46:	187b      	adds	r3, r7, r1
 8001b48:	4a0a      	ldr	r2, [pc, #40]	; (8001b74 <MX_GPIO_Init+0x150>)
 8001b4a:	0019      	movs	r1, r3
 8001b4c:	0010      	movs	r0, r2
 8001b4e:	f001 fb3b 	bl	80031c8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8001b52:	2200      	movs	r2, #0
 8001b54:	2100      	movs	r1, #0
 8001b56:	2007      	movs	r0, #7
 8001b58:	f001 f902 	bl	8002d60 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8001b5c:	2007      	movs	r0, #7
 8001b5e:	f001 f914 	bl	8002d8a <HAL_NVIC_EnableIRQ>

}
 8001b62:	46c0      	nop			; (mov r8, r8)
 8001b64:	46bd      	mov	sp, r7
 8001b66:	b009      	add	sp, #36	; 0x24
 8001b68:	bd90      	pop	{r4, r7, pc}
 8001b6a:	46c0      	nop			; (mov r8, r8)
 8001b6c:	40021000 	.word	0x40021000
 8001b70:	50000800 	.word	0x50000800
 8001b74:	50000400 	.word	0x50000400
 8001b78:	10110000 	.word	0x10110000
 8001b7c:	10210000 	.word	0x10210000

08001b80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001b84:	46c0      	nop			; (mov r8, r8)
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
	...

08001b8c <HAL_GPIO_EXTI_Callback>:
	}
}

// this sure is a big callback
// need to complete
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	0002      	movs	r2, r0
 8001b94:	1dbb      	adds	r3, r7, #6
 8001b96:	801a      	strh	r2, [r3, #0]
	/* program flow:
	 *   check current face used
	 *   check current variables and check button pressed
	 */
//	HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_8);	// should run for any button
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
 8001b98:	4bb8      	ldr	r3, [pc, #736]	; (8001e7c <HAL_GPIO_EXTI_Callback+0x2f0>)
 8001b9a:	2102      	movs	r1, #2
 8001b9c:	0018      	movs	r0, r3
 8001b9e:	f001 fccb 	bl	8003538 <HAL_GPIO_TogglePin>
	if (GPIO_Pin == BUTTON0) {
 8001ba2:	1dbb      	adds	r3, r7, #6
 8001ba4:	881b      	ldrh	r3, [r3, #0]
 8001ba6:	2b04      	cmp	r3, #4
 8001ba8:	d110      	bne.n	8001bcc <HAL_GPIO_EXTI_Callback+0x40>
		face = (face + 1) % NUM_FACES;
 8001baa:	4bb5      	ldr	r3, [pc, #724]	; (8001e80 <HAL_GPIO_EXTI_Callback+0x2f4>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	3301      	adds	r3, #1
 8001bb0:	4ab4      	ldr	r2, [pc, #720]	; (8001e84 <HAL_GPIO_EXTI_Callback+0x2f8>)
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	d504      	bpl.n	8001bc0 <HAL_GPIO_EXTI_Callback+0x34>
 8001bb6:	3b01      	subs	r3, #1
 8001bb8:	2204      	movs	r2, #4
 8001bba:	4252      	negs	r2, r2
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	3301      	adds	r3, #1
 8001bc0:	001a      	movs	r2, r3
 8001bc2:	4baf      	ldr	r3, [pc, #700]	; (8001e80 <HAL_GPIO_EXTI_Callback+0x2f4>)
 8001bc4:	601a      	str	r2, [r3, #0]
		updateFace = 1;
 8001bc6:	4bb0      	ldr	r3, [pc, #704]	; (8001e88 <HAL_GPIO_EXTI_Callback+0x2fc>)
 8001bc8:	2201      	movs	r2, #1
 8001bca:	701a      	strb	r2, [r3, #0]
	}
	// use RTC
	if (face == faceClock) {
 8001bcc:	4bac      	ldr	r3, [pc, #688]	; (8001e80 <HAL_GPIO_EXTI_Callback+0x2f4>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d000      	beq.n	8001bd6 <HAL_GPIO_EXTI_Callback+0x4a>
 8001bd4:	e0cf      	b.n	8001d76 <HAL_GPIO_EXTI_Callback+0x1ea>
		updateClock = 1;
 8001bd6:	4bad      	ldr	r3, [pc, #692]	; (8001e8c <HAL_GPIO_EXTI_Callback+0x300>)
 8001bd8:	2201      	movs	r2, #1
 8001bda:	701a      	strb	r2, [r3, #0]
		if (GPIO_Pin == BUTTON1 && clockSet) {
 8001bdc:	1dbb      	adds	r3, r7, #6
 8001bde:	881a      	ldrh	r2, [r3, #0]
 8001be0:	2380      	movs	r3, #128	; 0x80
 8001be2:	019b      	lsls	r3, r3, #6
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d148      	bne.n	8001c7a <HAL_GPIO_EXTI_Callback+0xee>
 8001be8:	4ba9      	ldr	r3, [pc, #676]	; (8001e90 <HAL_GPIO_EXTI_Callback+0x304>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d044      	beq.n	8001c7a <HAL_GPIO_EXTI_Callback+0xee>
			// change fields up, do nothing if not setting clock
			switch (clockField) {
 8001bf0:	4ba8      	ldr	r3, [pc, #672]	; (8001e94 <HAL_GPIO_EXTI_Callback+0x308>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	2b04      	cmp	r3, #4
 8001bf6:	d842      	bhi.n	8001c7e <HAL_GPIO_EXTI_Callback+0xf2>
 8001bf8:	009a      	lsls	r2, r3, #2
 8001bfa:	4ba7      	ldr	r3, [pc, #668]	; (8001e98 <HAL_GPIO_EXTI_Callback+0x30c>)
 8001bfc:	18d3      	adds	r3, r2, r3
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	469f      	mov	pc, r3
				case 0: tempClockTimes.min = (tempClockTimes.min+1) % 60; break;
 8001c02:	4ba6      	ldr	r3, [pc, #664]	; (8001e9c <HAL_GPIO_EXTI_Callback+0x310>)
 8001c04:	785b      	ldrb	r3, [r3, #1]
 8001c06:	3301      	adds	r3, #1
 8001c08:	213c      	movs	r1, #60	; 0x3c
 8001c0a:	0018      	movs	r0, r3
 8001c0c:	f7fe fbec 	bl	80003e8 <__aeabi_idivmod>
 8001c10:	000b      	movs	r3, r1
 8001c12:	b2da      	uxtb	r2, r3
 8001c14:	4ba1      	ldr	r3, [pc, #644]	; (8001e9c <HAL_GPIO_EXTI_Callback+0x310>)
 8001c16:	705a      	strb	r2, [r3, #1]
 8001c18:	e032      	b.n	8001c80 <HAL_GPIO_EXTI_Callback+0xf4>
				case 1: tempClockTimes.hr = (tempClockTimes.hr+1) % 60; break;
 8001c1a:	4ba0      	ldr	r3, [pc, #640]	; (8001e9c <HAL_GPIO_EXTI_Callback+0x310>)
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	3301      	adds	r3, #1
 8001c20:	213c      	movs	r1, #60	; 0x3c
 8001c22:	0018      	movs	r0, r3
 8001c24:	f7fe fbe0 	bl	80003e8 <__aeabi_idivmod>
 8001c28:	000b      	movs	r3, r1
 8001c2a:	b2da      	uxtb	r2, r3
 8001c2c:	4b9b      	ldr	r3, [pc, #620]	; (8001e9c <HAL_GPIO_EXTI_Callback+0x310>)
 8001c2e:	701a      	strb	r2, [r3, #0]
 8001c30:	e026      	b.n	8001c80 <HAL_GPIO_EXTI_Callback+0xf4>
				case 2: tempClockDate.yr = (tempClockDate.yr+1) % 100; break;
 8001c32:	4b9b      	ldr	r3, [pc, #620]	; (8001ea0 <HAL_GPIO_EXTI_Callback+0x314>)
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	3301      	adds	r3, #1
 8001c38:	2164      	movs	r1, #100	; 0x64
 8001c3a:	0018      	movs	r0, r3
 8001c3c:	f7fe fbd4 	bl	80003e8 <__aeabi_idivmod>
 8001c40:	000b      	movs	r3, r1
 8001c42:	b2da      	uxtb	r2, r3
 8001c44:	4b96      	ldr	r3, [pc, #600]	; (8001ea0 <HAL_GPIO_EXTI_Callback+0x314>)
 8001c46:	701a      	strb	r2, [r3, #0]
 8001c48:	e01a      	b.n	8001c80 <HAL_GPIO_EXTI_Callback+0xf4>
				case 3: tempClockDate.month = (tempClockDate.month+1) % 12; break;
 8001c4a:	4b95      	ldr	r3, [pc, #596]	; (8001ea0 <HAL_GPIO_EXTI_Callback+0x314>)
 8001c4c:	785b      	ldrb	r3, [r3, #1]
 8001c4e:	3301      	adds	r3, #1
 8001c50:	210c      	movs	r1, #12
 8001c52:	0018      	movs	r0, r3
 8001c54:	f7fe fbc8 	bl	80003e8 <__aeabi_idivmod>
 8001c58:	000b      	movs	r3, r1
 8001c5a:	b2da      	uxtb	r2, r3
 8001c5c:	4b90      	ldr	r3, [pc, #576]	; (8001ea0 <HAL_GPIO_EXTI_Callback+0x314>)
 8001c5e:	705a      	strb	r2, [r3, #1]
 8001c60:	e00e      	b.n	8001c80 <HAL_GPIO_EXTI_Callback+0xf4>
				case 4: tempClockDate.date = (tempClockDate.date+1) % 31; break;		// make more robust?
 8001c62:	4b8f      	ldr	r3, [pc, #572]	; (8001ea0 <HAL_GPIO_EXTI_Callback+0x314>)
 8001c64:	789b      	ldrb	r3, [r3, #2]
 8001c66:	3301      	adds	r3, #1
 8001c68:	211f      	movs	r1, #31
 8001c6a:	0018      	movs	r0, r3
 8001c6c:	f7fe fbbc 	bl	80003e8 <__aeabi_idivmod>
 8001c70:	000b      	movs	r3, r1
 8001c72:	b2da      	uxtb	r2, r3
 8001c74:	4b8a      	ldr	r3, [pc, #552]	; (8001ea0 <HAL_GPIO_EXTI_Callback+0x314>)
 8001c76:	709a      	strb	r2, [r3, #2]
 8001c78:	e002      	b.n	8001c80 <HAL_GPIO_EXTI_Callback+0xf4>
				default: break;
			}
		}
 8001c7a:	46c0      	nop			; (mov r8, r8)
 8001c7c:	e000      	b.n	8001c80 <HAL_GPIO_EXTI_Callback+0xf4>
				default: break;
 8001c7e:	46c0      	nop			; (mov r8, r8)
		if (GPIO_Pin == BUTTON2 && clockSet) {
 8001c80:	1dbb      	adds	r3, r7, #6
 8001c82:	881a      	ldrh	r2, [r3, #0]
 8001c84:	2380      	movs	r3, #128	; 0x80
 8001c86:	01db      	lsls	r3, r3, #7
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d147      	bne.n	8001d1c <HAL_GPIO_EXTI_Callback+0x190>
 8001c8c:	4b80      	ldr	r3, [pc, #512]	; (8001e90 <HAL_GPIO_EXTI_Callback+0x304>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d043      	beq.n	8001d1c <HAL_GPIO_EXTI_Callback+0x190>
			// change fields down, do nothing if not setting clock
			switch (clockField) {
 8001c94:	4b7f      	ldr	r3, [pc, #508]	; (8001e94 <HAL_GPIO_EXTI_Callback+0x308>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	2b04      	cmp	r3, #4
 8001c9a:	d841      	bhi.n	8001d20 <HAL_GPIO_EXTI_Callback+0x194>
 8001c9c:	009a      	lsls	r2, r3, #2
 8001c9e:	4b81      	ldr	r3, [pc, #516]	; (8001ea4 <HAL_GPIO_EXTI_Callback+0x318>)
 8001ca0:	18d3      	adds	r3, r2, r3
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	469f      	mov	pc, r3
				case 0: tempClockTimes.min = tempClockTimes.min == 0 ? 59 : tempClockTimes.min-1; break;
 8001ca6:	4b7d      	ldr	r3, [pc, #500]	; (8001e9c <HAL_GPIO_EXTI_Callback+0x310>)
 8001ca8:	785b      	ldrb	r3, [r3, #1]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d004      	beq.n	8001cb8 <HAL_GPIO_EXTI_Callback+0x12c>
 8001cae:	4b7b      	ldr	r3, [pc, #492]	; (8001e9c <HAL_GPIO_EXTI_Callback+0x310>)
 8001cb0:	785b      	ldrb	r3, [r3, #1]
 8001cb2:	3b01      	subs	r3, #1
 8001cb4:	b2da      	uxtb	r2, r3
 8001cb6:	e000      	b.n	8001cba <HAL_GPIO_EXTI_Callback+0x12e>
 8001cb8:	223b      	movs	r2, #59	; 0x3b
 8001cba:	4b78      	ldr	r3, [pc, #480]	; (8001e9c <HAL_GPIO_EXTI_Callback+0x310>)
 8001cbc:	705a      	strb	r2, [r3, #1]
 8001cbe:	e030      	b.n	8001d22 <HAL_GPIO_EXTI_Callback+0x196>
				case 1: tempClockTimes.hr = tempClockTimes.hr == 0 ? 59 : tempClockTimes.hr-1; break;
 8001cc0:	4b76      	ldr	r3, [pc, #472]	; (8001e9c <HAL_GPIO_EXTI_Callback+0x310>)
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d004      	beq.n	8001cd2 <HAL_GPIO_EXTI_Callback+0x146>
 8001cc8:	4b74      	ldr	r3, [pc, #464]	; (8001e9c <HAL_GPIO_EXTI_Callback+0x310>)
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	3b01      	subs	r3, #1
 8001cce:	b2da      	uxtb	r2, r3
 8001cd0:	e000      	b.n	8001cd4 <HAL_GPIO_EXTI_Callback+0x148>
 8001cd2:	223b      	movs	r2, #59	; 0x3b
 8001cd4:	4b71      	ldr	r3, [pc, #452]	; (8001e9c <HAL_GPIO_EXTI_Callback+0x310>)
 8001cd6:	701a      	strb	r2, [r3, #0]
 8001cd8:	e023      	b.n	8001d22 <HAL_GPIO_EXTI_Callback+0x196>
				case 2: tempClockDate.yr--; break;		// supposed to be from 1950-2050. no need to do bounds checking
 8001cda:	4b71      	ldr	r3, [pc, #452]	; (8001ea0 <HAL_GPIO_EXTI_Callback+0x314>)
 8001cdc:	781b      	ldrb	r3, [r3, #0]
 8001cde:	3b01      	subs	r3, #1
 8001ce0:	b2da      	uxtb	r2, r3
 8001ce2:	4b6f      	ldr	r3, [pc, #444]	; (8001ea0 <HAL_GPIO_EXTI_Callback+0x314>)
 8001ce4:	701a      	strb	r2, [r3, #0]
 8001ce6:	e01c      	b.n	8001d22 <HAL_GPIO_EXTI_Callback+0x196>
				case 3: tempClockDate.month = tempClockDate.month == 0 ? 11 : tempClockDate.month-1; break;
 8001ce8:	4b6d      	ldr	r3, [pc, #436]	; (8001ea0 <HAL_GPIO_EXTI_Callback+0x314>)
 8001cea:	785b      	ldrb	r3, [r3, #1]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d004      	beq.n	8001cfa <HAL_GPIO_EXTI_Callback+0x16e>
 8001cf0:	4b6b      	ldr	r3, [pc, #428]	; (8001ea0 <HAL_GPIO_EXTI_Callback+0x314>)
 8001cf2:	785b      	ldrb	r3, [r3, #1]
 8001cf4:	3b01      	subs	r3, #1
 8001cf6:	b2da      	uxtb	r2, r3
 8001cf8:	e000      	b.n	8001cfc <HAL_GPIO_EXTI_Callback+0x170>
 8001cfa:	220b      	movs	r2, #11
 8001cfc:	4b68      	ldr	r3, [pc, #416]	; (8001ea0 <HAL_GPIO_EXTI_Callback+0x314>)
 8001cfe:	705a      	strb	r2, [r3, #1]
 8001d00:	e00f      	b.n	8001d22 <HAL_GPIO_EXTI_Callback+0x196>
				case 4: tempClockDate.date = tempClockDate.date == 0 ? 31 : tempClockDate.date-1; break;
 8001d02:	4b67      	ldr	r3, [pc, #412]	; (8001ea0 <HAL_GPIO_EXTI_Callback+0x314>)
 8001d04:	789b      	ldrb	r3, [r3, #2]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d004      	beq.n	8001d14 <HAL_GPIO_EXTI_Callback+0x188>
 8001d0a:	4b65      	ldr	r3, [pc, #404]	; (8001ea0 <HAL_GPIO_EXTI_Callback+0x314>)
 8001d0c:	789b      	ldrb	r3, [r3, #2]
 8001d0e:	3b01      	subs	r3, #1
 8001d10:	b2da      	uxtb	r2, r3
 8001d12:	e000      	b.n	8001d16 <HAL_GPIO_EXTI_Callback+0x18a>
 8001d14:	221f      	movs	r2, #31
 8001d16:	4b62      	ldr	r3, [pc, #392]	; (8001ea0 <HAL_GPIO_EXTI_Callback+0x314>)
 8001d18:	709a      	strb	r2, [r3, #2]
 8001d1a:	e002      	b.n	8001d22 <HAL_GPIO_EXTI_Callback+0x196>
				default: break;
			}
		}
 8001d1c:	46c0      	nop			; (mov r8, r8)
 8001d1e:	e000      	b.n	8001d22 <HAL_GPIO_EXTI_Callback+0x196>
				default: break;
 8001d20:	46c0      	nop			; (mov r8, r8)
		if (GPIO_Pin == BUTTON3) {
 8001d22:	1dbb      	adds	r3, r7, #6
 8001d24:	881a      	ldrh	r2, [r3, #0]
 8001d26:	2380      	movs	r3, #128	; 0x80
 8001d28:	021b      	lsls	r3, r3, #8
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	d000      	beq.n	8001d30 <HAL_GPIO_EXTI_Callback+0x1a4>
 8001d2e:	e231      	b.n	8002194 <HAL_GPIO_EXTI_Callback+0x608>
			clockField = (clockField + 1) % (NUM_CLOCKFIELDS + 1);
 8001d30:	4b58      	ldr	r3, [pc, #352]	; (8001e94 <HAL_GPIO_EXTI_Callback+0x308>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	3301      	adds	r3, #1
 8001d36:	2106      	movs	r1, #6
 8001d38:	0018      	movs	r0, r3
 8001d3a:	f7fe fb55 	bl	80003e8 <__aeabi_idivmod>
 8001d3e:	000b      	movs	r3, r1
 8001d40:	001a      	movs	r2, r3
 8001d42:	4b54      	ldr	r3, [pc, #336]	; (8001e94 <HAL_GPIO_EXTI_Callback+0x308>)
 8001d44:	601a      	str	r2, [r3, #0]
			if (clockField != 0) {
 8001d46:	4b53      	ldr	r3, [pc, #332]	; (8001e94 <HAL_GPIO_EXTI_Callback+0x308>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d009      	beq.n	8001d62 <HAL_GPIO_EXTI_Callback+0x1d6>
				clockSet = 1;
 8001d4e:	4b50      	ldr	r3, [pc, #320]	; (8001e90 <HAL_GPIO_EXTI_Callback+0x304>)
 8001d50:	2201      	movs	r2, #1
 8001d52:	601a      	str	r2, [r3, #0]
				getDateTime(&tempClockDate, &tempClockTimes, &hrtc);
 8001d54:	4a54      	ldr	r2, [pc, #336]	; (8001ea8 <HAL_GPIO_EXTI_Callback+0x31c>)
 8001d56:	4951      	ldr	r1, [pc, #324]	; (8001e9c <HAL_GPIO_EXTI_Callback+0x310>)
 8001d58:	4b51      	ldr	r3, [pc, #324]	; (8001ea0 <HAL_GPIO_EXTI_Callback+0x314>)
 8001d5a:	0018      	movs	r0, r3
 8001d5c:	f7ff fa1a 	bl	8001194 <getDateTime>
			// clear stopwatch hw
			stopwatchRunning = 0;
			clearStopwatch(&hlptim1);
		}
	}
}
 8001d60:	e218      	b.n	8002194 <HAL_GPIO_EXTI_Callback+0x608>
				clockSet = 0;
 8001d62:	4b4b      	ldr	r3, [pc, #300]	; (8001e90 <HAL_GPIO_EXTI_Callback+0x304>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	601a      	str	r2, [r3, #0]
				setDateTime(&tempClockDate, &tempClockTimes, &hrtc);
 8001d68:	4a4f      	ldr	r2, [pc, #316]	; (8001ea8 <HAL_GPIO_EXTI_Callback+0x31c>)
 8001d6a:	494c      	ldr	r1, [pc, #304]	; (8001e9c <HAL_GPIO_EXTI_Callback+0x310>)
 8001d6c:	4b4c      	ldr	r3, [pc, #304]	; (8001ea0 <HAL_GPIO_EXTI_Callback+0x314>)
 8001d6e:	0018      	movs	r0, r3
 8001d70:	f7ff f896 	bl	8000ea0 <setDateTime>
}
 8001d74:	e20e      	b.n	8002194 <HAL_GPIO_EXTI_Callback+0x608>
	else if (face == faceTimer) {
 8001d76:	4b42      	ldr	r3, [pc, #264]	; (8001e80 <HAL_GPIO_EXTI_Callback+0x2f4>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d000      	beq.n	8001d80 <HAL_GPIO_EXTI_Callback+0x1f4>
 8001d7e:	e0f5      	b.n	8001f6c <HAL_GPIO_EXTI_Callback+0x3e0>
		updateTimer = 1;
 8001d80:	4b4a      	ldr	r3, [pc, #296]	; (8001eac <HAL_GPIO_EXTI_Callback+0x320>)
 8001d82:	2201      	movs	r2, #1
 8001d84:	701a      	strb	r2, [r3, #0]
		if (timerRunning == 0) {
 8001d86:	4b4a      	ldr	r3, [pc, #296]	; (8001eb0 <HAL_GPIO_EXTI_Callback+0x324>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d000      	beq.n	8001d90 <HAL_GPIO_EXTI_Callback+0x204>
 8001d8e:	e0cb      	b.n	8001f28 <HAL_GPIO_EXTI_Callback+0x39c>
			if (GPIO_Pin == BUTTON1) {
 8001d90:	1dbb      	adds	r3, r7, #6
 8001d92:	881a      	ldrh	r2, [r3, #0]
 8001d94:	2380      	movs	r3, #128	; 0x80
 8001d96:	019b      	lsls	r3, r3, #6
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d134      	bne.n	8001e06 <HAL_GPIO_EXTI_Callback+0x27a>
				if (timerSet == 0) timerRunning = 1;
 8001d9c:	4b45      	ldr	r3, [pc, #276]	; (8001eb4 <HAL_GPIO_EXTI_Callback+0x328>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d103      	bne.n	8001dac <HAL_GPIO_EXTI_Callback+0x220>
 8001da4:	4b42      	ldr	r3, [pc, #264]	; (8001eb0 <HAL_GPIO_EXTI_Callback+0x324>)
 8001da6:	2201      	movs	r2, #1
 8001da8:	601a      	str	r2, [r3, #0]
 8001daa:	e02d      	b.n	8001e08 <HAL_GPIO_EXTI_Callback+0x27c>
					switch (timerField) {
 8001dac:	4b42      	ldr	r3, [pc, #264]	; (8001eb8 <HAL_GPIO_EXTI_Callback+0x32c>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d010      	beq.n	8001dd6 <HAL_GPIO_EXTI_Callback+0x24a>
 8001db4:	2b02      	cmp	r3, #2
 8001db6:	d01a      	beq.n	8001dee <HAL_GPIO_EXTI_Callback+0x262>
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d000      	beq.n	8001dbe <HAL_GPIO_EXTI_Callback+0x232>
						default: break;
 8001dbc:	e024      	b.n	8001e08 <HAL_GPIO_EXTI_Callback+0x27c>
						case 0: tempTimer.sec = (tempTimer.sec+1) % 60; break;
 8001dbe:	4b3f      	ldr	r3, [pc, #252]	; (8001ebc <HAL_GPIO_EXTI_Callback+0x330>)
 8001dc0:	789b      	ldrb	r3, [r3, #2]
 8001dc2:	3301      	adds	r3, #1
 8001dc4:	213c      	movs	r1, #60	; 0x3c
 8001dc6:	0018      	movs	r0, r3
 8001dc8:	f7fe fb0e 	bl	80003e8 <__aeabi_idivmod>
 8001dcc:	000b      	movs	r3, r1
 8001dce:	b2da      	uxtb	r2, r3
 8001dd0:	4b3a      	ldr	r3, [pc, #232]	; (8001ebc <HAL_GPIO_EXTI_Callback+0x330>)
 8001dd2:	709a      	strb	r2, [r3, #2]
 8001dd4:	e018      	b.n	8001e08 <HAL_GPIO_EXTI_Callback+0x27c>
						case 1: tempTimer.min = (tempTimer.min+1) % 60; break;
 8001dd6:	4b39      	ldr	r3, [pc, #228]	; (8001ebc <HAL_GPIO_EXTI_Callback+0x330>)
 8001dd8:	785b      	ldrb	r3, [r3, #1]
 8001dda:	3301      	adds	r3, #1
 8001ddc:	213c      	movs	r1, #60	; 0x3c
 8001dde:	0018      	movs	r0, r3
 8001de0:	f7fe fb02 	bl	80003e8 <__aeabi_idivmod>
 8001de4:	000b      	movs	r3, r1
 8001de6:	b2da      	uxtb	r2, r3
 8001de8:	4b34      	ldr	r3, [pc, #208]	; (8001ebc <HAL_GPIO_EXTI_Callback+0x330>)
 8001dea:	705a      	strb	r2, [r3, #1]
 8001dec:	e00c      	b.n	8001e08 <HAL_GPIO_EXTI_Callback+0x27c>
						case 2: tempTimer.hr = (tempTimer.hr+1) % 24; break;
 8001dee:	4b33      	ldr	r3, [pc, #204]	; (8001ebc <HAL_GPIO_EXTI_Callback+0x330>)
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	3301      	adds	r3, #1
 8001df4:	2118      	movs	r1, #24
 8001df6:	0018      	movs	r0, r3
 8001df8:	f7fe faf6 	bl	80003e8 <__aeabi_idivmod>
 8001dfc:	000b      	movs	r3, r1
 8001dfe:	b2da      	uxtb	r2, r3
 8001e00:	4b2e      	ldr	r3, [pc, #184]	; (8001ebc <HAL_GPIO_EXTI_Callback+0x330>)
 8001e02:	701a      	strb	r2, [r3, #0]
 8001e04:	e000      	b.n	8001e08 <HAL_GPIO_EXTI_Callback+0x27c>
				}
 8001e06:	46c0      	nop			; (mov r8, r8)
			if (GPIO_Pin == BUTTON2) {
 8001e08:	1dbb      	adds	r3, r7, #6
 8001e0a:	881a      	ldrh	r2, [r3, #0]
 8001e0c:	2380      	movs	r3, #128	; 0x80
 8001e0e:	01db      	lsls	r3, r3, #7
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d155      	bne.n	8001ec0 <HAL_GPIO_EXTI_Callback+0x334>
				if (timerSet == 1) {
 8001e14:	4b27      	ldr	r3, [pc, #156]	; (8001eb4 <HAL_GPIO_EXTI_Callback+0x328>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d151      	bne.n	8001ec0 <HAL_GPIO_EXTI_Callback+0x334>
					switch (timerField) {
 8001e1c:	4b26      	ldr	r3, [pc, #152]	; (8001eb8 <HAL_GPIO_EXTI_Callback+0x32c>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d011      	beq.n	8001e48 <HAL_GPIO_EXTI_Callback+0x2bc>
 8001e24:	2b02      	cmp	r3, #2
 8001e26:	d01c      	beq.n	8001e62 <HAL_GPIO_EXTI_Callback+0x2d6>
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d000      	beq.n	8001e2e <HAL_GPIO_EXTI_Callback+0x2a2>
						default: break;
 8001e2c:	e049      	b.n	8001ec2 <HAL_GPIO_EXTI_Callback+0x336>
						case 0: tempTimer.sec = tempTimer.sec == 0 ? 59 : tempTimer.sec-1; break;
 8001e2e:	4b23      	ldr	r3, [pc, #140]	; (8001ebc <HAL_GPIO_EXTI_Callback+0x330>)
 8001e30:	789b      	ldrb	r3, [r3, #2]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d004      	beq.n	8001e40 <HAL_GPIO_EXTI_Callback+0x2b4>
 8001e36:	4b21      	ldr	r3, [pc, #132]	; (8001ebc <HAL_GPIO_EXTI_Callback+0x330>)
 8001e38:	789b      	ldrb	r3, [r3, #2]
 8001e3a:	3b01      	subs	r3, #1
 8001e3c:	b2da      	uxtb	r2, r3
 8001e3e:	e000      	b.n	8001e42 <HAL_GPIO_EXTI_Callback+0x2b6>
 8001e40:	223b      	movs	r2, #59	; 0x3b
 8001e42:	4b1e      	ldr	r3, [pc, #120]	; (8001ebc <HAL_GPIO_EXTI_Callback+0x330>)
 8001e44:	709a      	strb	r2, [r3, #2]
 8001e46:	e03c      	b.n	8001ec2 <HAL_GPIO_EXTI_Callback+0x336>
						case 1: tempTimer.min = tempTimer.min == 0 ? 59-1+60 : tempTimer.min-1; break;
 8001e48:	4b1c      	ldr	r3, [pc, #112]	; (8001ebc <HAL_GPIO_EXTI_Callback+0x330>)
 8001e4a:	785b      	ldrb	r3, [r3, #1]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d004      	beq.n	8001e5a <HAL_GPIO_EXTI_Callback+0x2ce>
 8001e50:	4b1a      	ldr	r3, [pc, #104]	; (8001ebc <HAL_GPIO_EXTI_Callback+0x330>)
 8001e52:	785b      	ldrb	r3, [r3, #1]
 8001e54:	3b01      	subs	r3, #1
 8001e56:	b2da      	uxtb	r2, r3
 8001e58:	e000      	b.n	8001e5c <HAL_GPIO_EXTI_Callback+0x2d0>
 8001e5a:	2276      	movs	r2, #118	; 0x76
 8001e5c:	4b17      	ldr	r3, [pc, #92]	; (8001ebc <HAL_GPIO_EXTI_Callback+0x330>)
 8001e5e:	705a      	strb	r2, [r3, #1]
 8001e60:	e02f      	b.n	8001ec2 <HAL_GPIO_EXTI_Callback+0x336>
						case 2: tempTimer.hr = tempTimer.hr == 0 ? 23 : tempTimer.hr-1; break;
 8001e62:	4b16      	ldr	r3, [pc, #88]	; (8001ebc <HAL_GPIO_EXTI_Callback+0x330>)
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d004      	beq.n	8001e74 <HAL_GPIO_EXTI_Callback+0x2e8>
 8001e6a:	4b14      	ldr	r3, [pc, #80]	; (8001ebc <HAL_GPIO_EXTI_Callback+0x330>)
 8001e6c:	781b      	ldrb	r3, [r3, #0]
 8001e6e:	3b01      	subs	r3, #1
 8001e70:	b2da      	uxtb	r2, r3
 8001e72:	e000      	b.n	8001e76 <HAL_GPIO_EXTI_Callback+0x2ea>
 8001e74:	2217      	movs	r2, #23
 8001e76:	4b11      	ldr	r3, [pc, #68]	; (8001ebc <HAL_GPIO_EXTI_Callback+0x330>)
 8001e78:	701a      	strb	r2, [r3, #0]
 8001e7a:	e022      	b.n	8001ec2 <HAL_GPIO_EXTI_Callback+0x336>
 8001e7c:	50000400 	.word	0x50000400
 8001e80:	20000090 	.word	0x20000090
 8001e84:	80000003 	.word	0x80000003
 8001e88:	200000f8 	.word	0x200000f8
 8001e8c:	200000dc 	.word	0x200000dc
 8001e90:	20000094 	.word	0x20000094
 8001e94:	20000098 	.word	0x20000098
 8001e98:	080073d0 	.word	0x080073d0
 8001e9c:	200000d8 	.word	0x200000d8
 8001ea0:	200001b0 	.word	0x200001b0
 8001ea4:	080073e4 	.word	0x080073e4
 8001ea8:	2000012c 	.word	0x2000012c
 8001eac:	20000154 	.word	0x20000154
 8001eb0:	200000a4 	.word	0x200000a4
 8001eb4:	2000009c 	.word	0x2000009c
 8001eb8:	200000a0 	.word	0x200000a0
 8001ebc:	200000d4 	.word	0x200000d4
				}
 8001ec0:	46c0      	nop			; (mov r8, r8)
			if (GPIO_Pin == BUTTON3) {
 8001ec2:	1dbb      	adds	r3, r7, #6
 8001ec4:	881a      	ldrh	r2, [r3, #0]
 8001ec6:	2380      	movs	r3, #128	; 0x80
 8001ec8:	021b      	lsls	r3, r3, #8
 8001eca:	429a      	cmp	r2, r3
 8001ecc:	d000      	beq.n	8001ed0 <HAL_GPIO_EXTI_Callback+0x344>
 8001ece:	e161      	b.n	8002194 <HAL_GPIO_EXTI_Callback+0x608>
				timerField = (timerField + 1) % (NUM_TIMERFIELDS + 1);
 8001ed0:	4bb2      	ldr	r3, [pc, #712]	; (800219c <HAL_GPIO_EXTI_Callback+0x610>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	3301      	adds	r3, #1
 8001ed6:	4ab2      	ldr	r2, [pc, #712]	; (80021a0 <HAL_GPIO_EXTI_Callback+0x614>)
 8001ed8:	4013      	ands	r3, r2
 8001eda:	d504      	bpl.n	8001ee6 <HAL_GPIO_EXTI_Callback+0x35a>
 8001edc:	3b01      	subs	r3, #1
 8001ede:	2204      	movs	r2, #4
 8001ee0:	4252      	negs	r2, r2
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	3301      	adds	r3, #1
 8001ee6:	001a      	movs	r2, r3
 8001ee8:	4bac      	ldr	r3, [pc, #688]	; (800219c <HAL_GPIO_EXTI_Callback+0x610>)
 8001eea:	601a      	str	r2, [r3, #0]
				if (timerField != 0) {
 8001eec:	4bab      	ldr	r3, [pc, #684]	; (800219c <HAL_GPIO_EXTI_Callback+0x610>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d00c      	beq.n	8001f0e <HAL_GPIO_EXTI_Callback+0x382>
					timerSet = 1;
 8001ef4:	4bab      	ldr	r3, [pc, #684]	; (80021a4 <HAL_GPIO_EXTI_Callback+0x618>)
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	601a      	str	r2, [r3, #0]
					tempTimer.sec = 0;
 8001efa:	4bab      	ldr	r3, [pc, #684]	; (80021a8 <HAL_GPIO_EXTI_Callback+0x61c>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	709a      	strb	r2, [r3, #2]
					tempTimer.min = 0;
 8001f00:	4ba9      	ldr	r3, [pc, #676]	; (80021a8 <HAL_GPIO_EXTI_Callback+0x61c>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	705a      	strb	r2, [r3, #1]
					tempTimer.hr = 0;
 8001f06:	4ba8      	ldr	r3, [pc, #672]	; (80021a8 <HAL_GPIO_EXTI_Callback+0x61c>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	701a      	strb	r2, [r3, #0]
}
 8001f0c:	e142      	b.n	8002194 <HAL_GPIO_EXTI_Callback+0x608>
					timerSet = 0;
 8001f0e:	4ba5      	ldr	r3, [pc, #660]	; (80021a4 <HAL_GPIO_EXTI_Callback+0x618>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	601a      	str	r2, [r3, #0]
					timerRunning = 1;	// careful where this gets set/unset
 8001f14:	4ba5      	ldr	r3, [pc, #660]	; (80021ac <HAL_GPIO_EXTI_Callback+0x620>)
 8001f16:	2201      	movs	r2, #1
 8001f18:	601a      	str	r2, [r3, #0]
					setTimer(&tempTimer, &hrtc, &htim21);
 8001f1a:	4aa5      	ldr	r2, [pc, #660]	; (80021b0 <HAL_GPIO_EXTI_Callback+0x624>)
 8001f1c:	49a5      	ldr	r1, [pc, #660]	; (80021b4 <HAL_GPIO_EXTI_Callback+0x628>)
 8001f1e:	4ba2      	ldr	r3, [pc, #648]	; (80021a8 <HAL_GPIO_EXTI_Callback+0x61c>)
 8001f20:	0018      	movs	r0, r3
 8001f22:	f7fe ffd3 	bl	8000ecc <setTimer>
}
 8001f26:	e135      	b.n	8002194 <HAL_GPIO_EXTI_Callback+0x608>
		else if (timerRunning == 1) {
 8001f28:	4ba0      	ldr	r3, [pc, #640]	; (80021ac <HAL_GPIO_EXTI_Callback+0x620>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d000      	beq.n	8001f32 <HAL_GPIO_EXTI_Callback+0x3a6>
 8001f30:	e130      	b.n	8002194 <HAL_GPIO_EXTI_Callback+0x608>
			if (GPIO_Pin == BUTTON1) {
 8001f32:	1dbb      	adds	r3, r7, #6
 8001f34:	881a      	ldrh	r2, [r3, #0]
 8001f36:	2380      	movs	r3, #128	; 0x80
 8001f38:	019b      	lsls	r3, r3, #6
 8001f3a:	429a      	cmp	r2, r3
 8001f3c:	d102      	bne.n	8001f44 <HAL_GPIO_EXTI_Callback+0x3b8>
				timerRunning = 1;
 8001f3e:	4b9b      	ldr	r3, [pc, #620]	; (80021ac <HAL_GPIO_EXTI_Callback+0x620>)
 8001f40:	2201      	movs	r2, #1
 8001f42:	601a      	str	r2, [r3, #0]
			if (GPIO_Pin == BUTTON2) {
 8001f44:	1dbb      	adds	r3, r7, #6
 8001f46:	881a      	ldrh	r2, [r3, #0]
 8001f48:	2380      	movs	r3, #128	; 0x80
 8001f4a:	01db      	lsls	r3, r3, #7
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d102      	bne.n	8001f56 <HAL_GPIO_EXTI_Callback+0x3ca>
				timerRunning = 0;
 8001f50:	4b96      	ldr	r3, [pc, #600]	; (80021ac <HAL_GPIO_EXTI_Callback+0x620>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	601a      	str	r2, [r3, #0]
			if (GPIO_Pin == BUTTON3) {
 8001f56:	1dbb      	adds	r3, r7, #6
 8001f58:	881a      	ldrh	r2, [r3, #0]
 8001f5a:	2380      	movs	r3, #128	; 0x80
 8001f5c:	021b      	lsls	r3, r3, #8
 8001f5e:	429a      	cmp	r2, r3
 8001f60:	d000      	beq.n	8001f64 <HAL_GPIO_EXTI_Callback+0x3d8>
 8001f62:	e117      	b.n	8002194 <HAL_GPIO_EXTI_Callback+0x608>
				timerRunning = 0;
 8001f64:	4b91      	ldr	r3, [pc, #580]	; (80021ac <HAL_GPIO_EXTI_Callback+0x620>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	601a      	str	r2, [r3, #0]
}
 8001f6a:	e113      	b.n	8002194 <HAL_GPIO_EXTI_Callback+0x608>
	else if (face == faceAlarm) {
 8001f6c:	4b92      	ldr	r3, [pc, #584]	; (80021b8 <HAL_GPIO_EXTI_Callback+0x62c>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	2b02      	cmp	r3, #2
 8001f72:	d000      	beq.n	8001f76 <HAL_GPIO_EXTI_Callback+0x3ea>
 8001f74:	e0d3      	b.n	800211e <HAL_GPIO_EXTI_Callback+0x592>
		updateAlarm = 1;
 8001f76:	4b91      	ldr	r3, [pc, #580]	; (80021bc <HAL_GPIO_EXTI_Callback+0x630>)
 8001f78:	2201      	movs	r2, #1
 8001f7a:	701a      	strb	r2, [r3, #0]
		if (alarmRunning == 0) {
 8001f7c:	4b90      	ldr	r3, [pc, #576]	; (80021c0 <HAL_GPIO_EXTI_Callback+0x634>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d000      	beq.n	8001f86 <HAL_GPIO_EXTI_Callback+0x3fa>
 8001f84:	e0bd      	b.n	8002102 <HAL_GPIO_EXTI_Callback+0x576>
			if (GPIO_Pin == BUTTON1 && alarmSet) {
 8001f86:	1dbb      	adds	r3, r7, #6
 8001f88:	881a      	ldrh	r2, [r3, #0]
 8001f8a:	2380      	movs	r3, #128	; 0x80
 8001f8c:	019b      	lsls	r3, r3, #6
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	d142      	bne.n	8002018 <HAL_GPIO_EXTI_Callback+0x48c>
 8001f92:	4b8c      	ldr	r3, [pc, #560]	; (80021c4 <HAL_GPIO_EXTI_Callback+0x638>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d03e      	beq.n	8002018 <HAL_GPIO_EXTI_Callback+0x48c>
				switch (alarmField) {
 8001f9a:	4b8b      	ldr	r3, [pc, #556]	; (80021c8 <HAL_GPIO_EXTI_Callback+0x63c>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d014      	beq.n	8001fcc <HAL_GPIO_EXTI_Callback+0x440>
 8001fa2:	dc02      	bgt.n	8001faa <HAL_GPIO_EXTI_Callback+0x41e>
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d005      	beq.n	8001fb4 <HAL_GPIO_EXTI_Callback+0x428>
					default: break;
 8001fa8:	e037      	b.n	800201a <HAL_GPIO_EXTI_Callback+0x48e>
				switch (alarmField) {
 8001faa:	2b02      	cmp	r3, #2
 8001fac:	d01a      	beq.n	8001fe4 <HAL_GPIO_EXTI_Callback+0x458>
 8001fae:	2b03      	cmp	r3, #3
 8001fb0:	d024      	beq.n	8001ffc <HAL_GPIO_EXTI_Callback+0x470>
					default: break;
 8001fb2:	e032      	b.n	800201a <HAL_GPIO_EXTI_Callback+0x48e>
					case 0: tempAlarm.sec = (tempAlarm.sec + 1) % 60; break;
 8001fb4:	4b85      	ldr	r3, [pc, #532]	; (80021cc <HAL_GPIO_EXTI_Callback+0x640>)
 8001fb6:	789b      	ldrb	r3, [r3, #2]
 8001fb8:	3301      	adds	r3, #1
 8001fba:	213c      	movs	r1, #60	; 0x3c
 8001fbc:	0018      	movs	r0, r3
 8001fbe:	f7fe fa13 	bl	80003e8 <__aeabi_idivmod>
 8001fc2:	000b      	movs	r3, r1
 8001fc4:	b2da      	uxtb	r2, r3
 8001fc6:	4b81      	ldr	r3, [pc, #516]	; (80021cc <HAL_GPIO_EXTI_Callback+0x640>)
 8001fc8:	709a      	strb	r2, [r3, #2]
 8001fca:	e026      	b.n	800201a <HAL_GPIO_EXTI_Callback+0x48e>
					case 1: tempAlarm.min = (tempAlarm.min + 1) % 60; break;
 8001fcc:	4b7f      	ldr	r3, [pc, #508]	; (80021cc <HAL_GPIO_EXTI_Callback+0x640>)
 8001fce:	785b      	ldrb	r3, [r3, #1]
 8001fd0:	3301      	adds	r3, #1
 8001fd2:	213c      	movs	r1, #60	; 0x3c
 8001fd4:	0018      	movs	r0, r3
 8001fd6:	f7fe fa07 	bl	80003e8 <__aeabi_idivmod>
 8001fda:	000b      	movs	r3, r1
 8001fdc:	b2da      	uxtb	r2, r3
 8001fde:	4b7b      	ldr	r3, [pc, #492]	; (80021cc <HAL_GPIO_EXTI_Callback+0x640>)
 8001fe0:	705a      	strb	r2, [r3, #1]
 8001fe2:	e01a      	b.n	800201a <HAL_GPIO_EXTI_Callback+0x48e>
					case 2: tempAlarm.hr = (tempAlarm.hr + 1) % 24; break;
 8001fe4:	4b79      	ldr	r3, [pc, #484]	; (80021cc <HAL_GPIO_EXTI_Callback+0x640>)
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	3301      	adds	r3, #1
 8001fea:	2118      	movs	r1, #24
 8001fec:	0018      	movs	r0, r3
 8001fee:	f7fe f9fb 	bl	80003e8 <__aeabi_idivmod>
 8001ff2:	000b      	movs	r3, r1
 8001ff4:	b2da      	uxtb	r2, r3
 8001ff6:	4b75      	ldr	r3, [pc, #468]	; (80021cc <HAL_GPIO_EXTI_Callback+0x640>)
 8001ff8:	701a      	strb	r2, [r3, #0]
 8001ffa:	e00e      	b.n	800201a <HAL_GPIO_EXTI_Callback+0x48e>
					case 3: tempAlarm.weekday = (tempAlarm.weekday + 1) % 7 + 1; break;
 8001ffc:	4b73      	ldr	r3, [pc, #460]	; (80021cc <HAL_GPIO_EXTI_Callback+0x640>)
 8001ffe:	78db      	ldrb	r3, [r3, #3]
 8002000:	3301      	adds	r3, #1
 8002002:	2107      	movs	r1, #7
 8002004:	0018      	movs	r0, r3
 8002006:	f7fe f9ef 	bl	80003e8 <__aeabi_idivmod>
 800200a:	000b      	movs	r3, r1
 800200c:	b2db      	uxtb	r3, r3
 800200e:	3301      	adds	r3, #1
 8002010:	b2da      	uxtb	r2, r3
 8002012:	4b6e      	ldr	r3, [pc, #440]	; (80021cc <HAL_GPIO_EXTI_Callback+0x640>)
 8002014:	70da      	strb	r2, [r3, #3]
 8002016:	e000      	b.n	800201a <HAL_GPIO_EXTI_Callback+0x48e>
			}
 8002018:	46c0      	nop			; (mov r8, r8)
			if (GPIO_Pin == BUTTON2 && alarmSet) {
 800201a:	1dbb      	adds	r3, r7, #6
 800201c:	881a      	ldrh	r2, [r3, #0]
 800201e:	2380      	movs	r3, #128	; 0x80
 8002020:	01db      	lsls	r3, r3, #7
 8002022:	429a      	cmp	r2, r3
 8002024:	d140      	bne.n	80020a8 <HAL_GPIO_EXTI_Callback+0x51c>
 8002026:	4b67      	ldr	r3, [pc, #412]	; (80021c4 <HAL_GPIO_EXTI_Callback+0x638>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d03c      	beq.n	80020a8 <HAL_GPIO_EXTI_Callback+0x51c>
				switch (alarmField) {
 800202e:	4b66      	ldr	r3, [pc, #408]	; (80021c8 <HAL_GPIO_EXTI_Callback+0x63c>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	2b01      	cmp	r3, #1
 8002034:	d014      	beq.n	8002060 <HAL_GPIO_EXTI_Callback+0x4d4>
 8002036:	dc02      	bgt.n	800203e <HAL_GPIO_EXTI_Callback+0x4b2>
 8002038:	2b00      	cmp	r3, #0
 800203a:	d005      	beq.n	8002048 <HAL_GPIO_EXTI_Callback+0x4bc>
 800203c:	e034      	b.n	80020a8 <HAL_GPIO_EXTI_Callback+0x51c>
 800203e:	2b02      	cmp	r3, #2
 8002040:	d01a      	beq.n	8002078 <HAL_GPIO_EXTI_Callback+0x4ec>
 8002042:	2b03      	cmp	r3, #3
 8002044:	d024      	beq.n	8002090 <HAL_GPIO_EXTI_Callback+0x504>
 8002046:	e02f      	b.n	80020a8 <HAL_GPIO_EXTI_Callback+0x51c>
					case 0: tempAlarm.sec = tempAlarm.sec == 0 ? 59 : tempAlarm.sec-1;
 8002048:	4b60      	ldr	r3, [pc, #384]	; (80021cc <HAL_GPIO_EXTI_Callback+0x640>)
 800204a:	789b      	ldrb	r3, [r3, #2]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d004      	beq.n	800205a <HAL_GPIO_EXTI_Callback+0x4ce>
 8002050:	4b5e      	ldr	r3, [pc, #376]	; (80021cc <HAL_GPIO_EXTI_Callback+0x640>)
 8002052:	789b      	ldrb	r3, [r3, #2]
 8002054:	3b01      	subs	r3, #1
 8002056:	b2da      	uxtb	r2, r3
 8002058:	e000      	b.n	800205c <HAL_GPIO_EXTI_Callback+0x4d0>
 800205a:	223b      	movs	r2, #59	; 0x3b
 800205c:	4b5b      	ldr	r3, [pc, #364]	; (80021cc <HAL_GPIO_EXTI_Callback+0x640>)
 800205e:	709a      	strb	r2, [r3, #2]
					case 1: tempAlarm.min = tempAlarm.min == 0 ? 59 : tempAlarm.min-1;
 8002060:	4b5a      	ldr	r3, [pc, #360]	; (80021cc <HAL_GPIO_EXTI_Callback+0x640>)
 8002062:	785b      	ldrb	r3, [r3, #1]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d004      	beq.n	8002072 <HAL_GPIO_EXTI_Callback+0x4e6>
 8002068:	4b58      	ldr	r3, [pc, #352]	; (80021cc <HAL_GPIO_EXTI_Callback+0x640>)
 800206a:	785b      	ldrb	r3, [r3, #1]
 800206c:	3b01      	subs	r3, #1
 800206e:	b2da      	uxtb	r2, r3
 8002070:	e000      	b.n	8002074 <HAL_GPIO_EXTI_Callback+0x4e8>
 8002072:	223b      	movs	r2, #59	; 0x3b
 8002074:	4b55      	ldr	r3, [pc, #340]	; (80021cc <HAL_GPIO_EXTI_Callback+0x640>)
 8002076:	705a      	strb	r2, [r3, #1]
					case 2: tempAlarm.hr = tempAlarm.hr == 0 ? 23 : tempAlarm.hr-1;
 8002078:	4b54      	ldr	r3, [pc, #336]	; (80021cc <HAL_GPIO_EXTI_Callback+0x640>)
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d004      	beq.n	800208a <HAL_GPIO_EXTI_Callback+0x4fe>
 8002080:	4b52      	ldr	r3, [pc, #328]	; (80021cc <HAL_GPIO_EXTI_Callback+0x640>)
 8002082:	781b      	ldrb	r3, [r3, #0]
 8002084:	3b01      	subs	r3, #1
 8002086:	b2da      	uxtb	r2, r3
 8002088:	e000      	b.n	800208c <HAL_GPIO_EXTI_Callback+0x500>
 800208a:	2217      	movs	r2, #23
 800208c:	4b4f      	ldr	r3, [pc, #316]	; (80021cc <HAL_GPIO_EXTI_Callback+0x640>)
 800208e:	701a      	strb	r2, [r3, #0]
					case 3: tempAlarm.weekday = tempAlarm.weekday == 1 ? 7 : tempAlarm.weekday-1;
 8002090:	4b4e      	ldr	r3, [pc, #312]	; (80021cc <HAL_GPIO_EXTI_Callback+0x640>)
 8002092:	78db      	ldrb	r3, [r3, #3]
 8002094:	2b01      	cmp	r3, #1
 8002096:	d004      	beq.n	80020a2 <HAL_GPIO_EXTI_Callback+0x516>
 8002098:	4b4c      	ldr	r3, [pc, #304]	; (80021cc <HAL_GPIO_EXTI_Callback+0x640>)
 800209a:	78db      	ldrb	r3, [r3, #3]
 800209c:	3b01      	subs	r3, #1
 800209e:	b2da      	uxtb	r2, r3
 80020a0:	e000      	b.n	80020a4 <HAL_GPIO_EXTI_Callback+0x518>
 80020a2:	2207      	movs	r2, #7
 80020a4:	4b49      	ldr	r3, [pc, #292]	; (80021cc <HAL_GPIO_EXTI_Callback+0x640>)
 80020a6:	70da      	strb	r2, [r3, #3]
			if (GPIO_Pin == BUTTON3) {
 80020a8:	1dbb      	adds	r3, r7, #6
 80020aa:	881a      	ldrh	r2, [r3, #0]
 80020ac:	2380      	movs	r3, #128	; 0x80
 80020ae:	021b      	lsls	r3, r3, #8
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d000      	beq.n	80020b6 <HAL_GPIO_EXTI_Callback+0x52a>
 80020b4:	e06e      	b.n	8002194 <HAL_GPIO_EXTI_Callback+0x608>
				alarmField = (alarmField + 1) % (NUM_ALARMFIELDS + 1);
 80020b6:	4b44      	ldr	r3, [pc, #272]	; (80021c8 <HAL_GPIO_EXTI_Callback+0x63c>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	3301      	adds	r3, #1
 80020bc:	2105      	movs	r1, #5
 80020be:	0018      	movs	r0, r3
 80020c0:	f7fe f992 	bl	80003e8 <__aeabi_idivmod>
 80020c4:	000b      	movs	r3, r1
 80020c6:	001a      	movs	r2, r3
 80020c8:	4b3f      	ldr	r3, [pc, #252]	; (80021c8 <HAL_GPIO_EXTI_Callback+0x63c>)
 80020ca:	601a      	str	r2, [r3, #0]
				if (alarmField != 0) {
 80020cc:	4b3e      	ldr	r3, [pc, #248]	; (80021c8 <HAL_GPIO_EXTI_Callback+0x63c>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d00f      	beq.n	80020f4 <HAL_GPIO_EXTI_Callback+0x568>
					alarmSet = 1;
 80020d4:	4b3b      	ldr	r3, [pc, #236]	; (80021c4 <HAL_GPIO_EXTI_Callback+0x638>)
 80020d6:	2201      	movs	r2, #1
 80020d8:	601a      	str	r2, [r3, #0]
					tempAlarm.sec = 0;
 80020da:	4b3c      	ldr	r3, [pc, #240]	; (80021cc <HAL_GPIO_EXTI_Callback+0x640>)
 80020dc:	2200      	movs	r2, #0
 80020de:	709a      	strb	r2, [r3, #2]
					tempAlarm.min = 0;
 80020e0:	4b3a      	ldr	r3, [pc, #232]	; (80021cc <HAL_GPIO_EXTI_Callback+0x640>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	705a      	strb	r2, [r3, #1]
					tempAlarm.hr = 0;
 80020e6:	4b39      	ldr	r3, [pc, #228]	; (80021cc <HAL_GPIO_EXTI_Callback+0x640>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	701a      	strb	r2, [r3, #0]
					tempAlarm.weekday = 1;
 80020ec:	4b37      	ldr	r3, [pc, #220]	; (80021cc <HAL_GPIO_EXTI_Callback+0x640>)
 80020ee:	2201      	movs	r2, #1
 80020f0:	70da      	strb	r2, [r3, #3]
}
 80020f2:	e04f      	b.n	8002194 <HAL_GPIO_EXTI_Callback+0x608>
					alarmSet = 0;
 80020f4:	4b33      	ldr	r3, [pc, #204]	; (80021c4 <HAL_GPIO_EXTI_Callback+0x638>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	601a      	str	r2, [r3, #0]
					alarmRunning = 1;
 80020fa:	4b31      	ldr	r3, [pc, #196]	; (80021c0 <HAL_GPIO_EXTI_Callback+0x634>)
 80020fc:	2201      	movs	r2, #1
 80020fe:	601a      	str	r2, [r3, #0]
}
 8002100:	e048      	b.n	8002194 <HAL_GPIO_EXTI_Callback+0x608>
		else if (alarmRunning == 1) {
 8002102:	4b2f      	ldr	r3, [pc, #188]	; (80021c0 <HAL_GPIO_EXTI_Callback+0x634>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	2b01      	cmp	r3, #1
 8002108:	d144      	bne.n	8002194 <HAL_GPIO_EXTI_Callback+0x608>
			if (GPIO_Pin == BUTTON3) {
 800210a:	1dbb      	adds	r3, r7, #6
 800210c:	881a      	ldrh	r2, [r3, #0]
 800210e:	2380      	movs	r3, #128	; 0x80
 8002110:	021b      	lsls	r3, r3, #8
 8002112:	429a      	cmp	r2, r3
 8002114:	d13e      	bne.n	8002194 <HAL_GPIO_EXTI_Callback+0x608>
				alarmRunning = 0;
 8002116:	4b2a      	ldr	r3, [pc, #168]	; (80021c0 <HAL_GPIO_EXTI_Callback+0x634>)
 8002118:	2200      	movs	r2, #0
 800211a:	601a      	str	r2, [r3, #0]
}
 800211c:	e03a      	b.n	8002194 <HAL_GPIO_EXTI_Callback+0x608>
	else if (face == faceStopwatch) {
 800211e:	4b26      	ldr	r3, [pc, #152]	; (80021b8 <HAL_GPIO_EXTI_Callback+0x62c>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	2b03      	cmp	r3, #3
 8002124:	d136      	bne.n	8002194 <HAL_GPIO_EXTI_Callback+0x608>
		updateStopwatch = 1;
 8002126:	4b2a      	ldr	r3, [pc, #168]	; (80021d0 <HAL_GPIO_EXTI_Callback+0x644>)
 8002128:	2201      	movs	r2, #1
 800212a:	701a      	strb	r2, [r3, #0]
		if (GPIO_Pin == BUTTON1) {	// start/stop
 800212c:	1dbb      	adds	r3, r7, #6
 800212e:	881a      	ldrh	r2, [r3, #0]
 8002130:	2380      	movs	r3, #128	; 0x80
 8002132:	019b      	lsls	r3, r3, #6
 8002134:	429a      	cmp	r2, r3
 8002136:	d112      	bne.n	800215e <HAL_GPIO_EXTI_Callback+0x5d2>
			if (stopwatchRunning == 0) {
 8002138:	4b26      	ldr	r3, [pc, #152]	; (80021d4 <HAL_GPIO_EXTI_Callback+0x648>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d107      	bne.n	8002150 <HAL_GPIO_EXTI_Callback+0x5c4>
				stopwatchRunning = 1;
 8002140:	4b24      	ldr	r3, [pc, #144]	; (80021d4 <HAL_GPIO_EXTI_Callback+0x648>)
 8002142:	2201      	movs	r2, #1
 8002144:	601a      	str	r2, [r3, #0]
				runStopwatch(&hlptim1);
 8002146:	4b24      	ldr	r3, [pc, #144]	; (80021d8 <HAL_GPIO_EXTI_Callback+0x64c>)
 8002148:	0018      	movs	r0, r3
 800214a:	f000 fa37 	bl	80025bc <runStopwatch>
 800214e:	e006      	b.n	800215e <HAL_GPIO_EXTI_Callback+0x5d2>
				stopwatchRunning = 0;
 8002150:	4b20      	ldr	r3, [pc, #128]	; (80021d4 <HAL_GPIO_EXTI_Callback+0x648>)
 8002152:	2200      	movs	r2, #0
 8002154:	601a      	str	r2, [r3, #0]
				pauseStopwatch(&hlptim1);
 8002156:	4b20      	ldr	r3, [pc, #128]	; (80021d8 <HAL_GPIO_EXTI_Callback+0x64c>)
 8002158:	0018      	movs	r0, r3
 800215a:	f000 fa3e 	bl	80025da <pauseStopwatch>
		if (GPIO_Pin == BUTTON2) {
 800215e:	1dbb      	adds	r3, r7, #6
 8002160:	881a      	ldrh	r2, [r3, #0]
 8002162:	2380      	movs	r3, #128	; 0x80
 8002164:	01db      	lsls	r3, r3, #7
 8002166:	429a      	cmp	r2, r3
 8002168:	d107      	bne.n	800217a <HAL_GPIO_EXTI_Callback+0x5ee>
			lapPrev = lapCurrent;
 800216a:	4b1c      	ldr	r3, [pc, #112]	; (80021dc <HAL_GPIO_EXTI_Callback+0x650>)
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	4b1c      	ldr	r3, [pc, #112]	; (80021e0 <HAL_GPIO_EXTI_Callback+0x654>)
 8002170:	601a      	str	r2, [r3, #0]
			lapCurrent = stopwatchCNT;
 8002172:	4b1c      	ldr	r3, [pc, #112]	; (80021e4 <HAL_GPIO_EXTI_Callback+0x658>)
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	4b19      	ldr	r3, [pc, #100]	; (80021dc <HAL_GPIO_EXTI_Callback+0x650>)
 8002178:	601a      	str	r2, [r3, #0]
		if (GPIO_Pin == BUTTON3) {
 800217a:	1dbb      	adds	r3, r7, #6
 800217c:	881a      	ldrh	r2, [r3, #0]
 800217e:	2380      	movs	r3, #128	; 0x80
 8002180:	021b      	lsls	r3, r3, #8
 8002182:	429a      	cmp	r2, r3
 8002184:	d106      	bne.n	8002194 <HAL_GPIO_EXTI_Callback+0x608>
			stopwatchRunning = 0;
 8002186:	4b13      	ldr	r3, [pc, #76]	; (80021d4 <HAL_GPIO_EXTI_Callback+0x648>)
 8002188:	2200      	movs	r2, #0
 800218a:	601a      	str	r2, [r3, #0]
			clearStopwatch(&hlptim1);
 800218c:	4b12      	ldr	r3, [pc, #72]	; (80021d8 <HAL_GPIO_EXTI_Callback+0x64c>)
 800218e:	0018      	movs	r0, r3
 8002190:	f000 fa30 	bl	80025f4 <clearStopwatch>
}
 8002194:	46c0      	nop			; (mov r8, r8)
 8002196:	46bd      	mov	sp, r7
 8002198:	b002      	add	sp, #8
 800219a:	bd80      	pop	{r7, pc}
 800219c:	200000a0 	.word	0x200000a0
 80021a0:	80000003 	.word	0x80000003
 80021a4:	2000009c 	.word	0x2000009c
 80021a8:	200000d4 	.word	0x200000d4
 80021ac:	200000a4 	.word	0x200000a4
 80021b0:	20000258 	.word	0x20000258
 80021b4:	2000012c 	.word	0x2000012c
 80021b8:	20000090 	.word	0x20000090
 80021bc:	200000d7 	.word	0x200000d7
 80021c0:	200000b0 	.word	0x200000b0
 80021c4:	200000a8 	.word	0x200000a8
 80021c8:	200000ac 	.word	0x200000ac
 80021cc:	200000f4 	.word	0x200000f4
 80021d0:	200000db 	.word	0x200000db
 80021d4:	200000b4 	.word	0x200000b4
 80021d8:	200000fc 	.word	0x200000fc
 80021dc:	200000f0 	.word	0x200000f0
 80021e0:	20000150 	.word	0x20000150
 80021e4:	200000c4 	.word	0x200000c4

080021e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021ec:	4b07      	ldr	r3, [pc, #28]	; (800220c <HAL_MspInit+0x24>)
 80021ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021f0:	4b06      	ldr	r3, [pc, #24]	; (800220c <HAL_MspInit+0x24>)
 80021f2:	2101      	movs	r1, #1
 80021f4:	430a      	orrs	r2, r1
 80021f6:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80021f8:	4b04      	ldr	r3, [pc, #16]	; (800220c <HAL_MspInit+0x24>)
 80021fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80021fc:	4b03      	ldr	r3, [pc, #12]	; (800220c <HAL_MspInit+0x24>)
 80021fe:	2180      	movs	r1, #128	; 0x80
 8002200:	0549      	lsls	r1, r1, #21
 8002202:	430a      	orrs	r2, r1
 8002204:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002206:	46c0      	nop			; (mov r8, r8)
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}
 800220c:	40021000 	.word	0x40021000

08002210 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b088      	sub	sp, #32
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002218:	230c      	movs	r3, #12
 800221a:	18fb      	adds	r3, r7, r3
 800221c:	0018      	movs	r0, r3
 800221e:	2314      	movs	r3, #20
 8002220:	001a      	movs	r2, r3
 8002222:	2100      	movs	r1, #0
 8002224:	f004 f9e3 	bl	80065ee <memset>
  if(hadc->Instance==ADC1)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a15      	ldr	r2, [pc, #84]	; (8002284 <HAL_ADC_MspInit+0x74>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d123      	bne.n	800227a <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002232:	4b15      	ldr	r3, [pc, #84]	; (8002288 <HAL_ADC_MspInit+0x78>)
 8002234:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002236:	4b14      	ldr	r3, [pc, #80]	; (8002288 <HAL_ADC_MspInit+0x78>)
 8002238:	2180      	movs	r1, #128	; 0x80
 800223a:	0089      	lsls	r1, r1, #2
 800223c:	430a      	orrs	r2, r1
 800223e:	635a      	str	r2, [r3, #52]	; 0x34
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002240:	4b11      	ldr	r3, [pc, #68]	; (8002288 <HAL_ADC_MspInit+0x78>)
 8002242:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002244:	4b10      	ldr	r3, [pc, #64]	; (8002288 <HAL_ADC_MspInit+0x78>)
 8002246:	2101      	movs	r1, #1
 8002248:	430a      	orrs	r2, r1
 800224a:	62da      	str	r2, [r3, #44]	; 0x2c
 800224c:	4b0e      	ldr	r3, [pc, #56]	; (8002288 <HAL_ADC_MspInit+0x78>)
 800224e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002250:	2201      	movs	r2, #1
 8002252:	4013      	ands	r3, r2
 8002254:	60bb      	str	r3, [r7, #8]
 8002256:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration    
    PA0     ------> ADC_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002258:	210c      	movs	r1, #12
 800225a:	187b      	adds	r3, r7, r1
 800225c:	2201      	movs	r2, #1
 800225e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002260:	187b      	adds	r3, r7, r1
 8002262:	2203      	movs	r2, #3
 8002264:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002266:	187b      	adds	r3, r7, r1
 8002268:	2200      	movs	r2, #0
 800226a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800226c:	187a      	adds	r2, r7, r1
 800226e:	23a0      	movs	r3, #160	; 0xa0
 8002270:	05db      	lsls	r3, r3, #23
 8002272:	0011      	movs	r1, r2
 8002274:	0018      	movs	r0, r3
 8002276:	f000 ffa7 	bl	80031c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800227a:	46c0      	nop			; (mov r8, r8)
 800227c:	46bd      	mov	sp, r7
 800227e:	b008      	add	sp, #32
 8002280:	bd80      	pop	{r7, pc}
 8002282:	46c0      	nop			; (mov r8, r8)
 8002284:	40012400 	.word	0x40012400
 8002288:	40021000 	.word	0x40021000

0800228c <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b082      	sub	sp, #8
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  if(hlptim->Instance==LPTIM1)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a0a      	ldr	r2, [pc, #40]	; (80022c4 <HAL_LPTIM_MspInit+0x38>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d10e      	bne.n	80022bc <HAL_LPTIM_MspInit+0x30>
  {
  /* USER CODE BEGIN LPTIM1_MspInit 0 */

  /* USER CODE END LPTIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 800229e:	4b0a      	ldr	r3, [pc, #40]	; (80022c8 <HAL_LPTIM_MspInit+0x3c>)
 80022a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80022a2:	4b09      	ldr	r3, [pc, #36]	; (80022c8 <HAL_LPTIM_MspInit+0x3c>)
 80022a4:	2180      	movs	r1, #128	; 0x80
 80022a6:	0609      	lsls	r1, r1, #24
 80022a8:	430a      	orrs	r2, r1
 80022aa:	639a      	str	r2, [r3, #56]	; 0x38
    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 80022ac:	2200      	movs	r2, #0
 80022ae:	2100      	movs	r1, #0
 80022b0:	200d      	movs	r0, #13
 80022b2:	f000 fd55 	bl	8002d60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 80022b6:	200d      	movs	r0, #13
 80022b8:	f000 fd67 	bl	8002d8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }

}
 80022bc:	46c0      	nop			; (mov r8, r8)
 80022be:	46bd      	mov	sp, r7
 80022c0:	b002      	add	sp, #8
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	40007c00 	.word	0x40007c00
 80022c8:	40021000 	.word	0x40021000

080022cc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b082      	sub	sp, #8
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a0a      	ldr	r2, [pc, #40]	; (8002304 <HAL_RTC_MspInit+0x38>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d10e      	bne.n	80022fc <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80022de:	4b0a      	ldr	r3, [pc, #40]	; (8002308 <HAL_RTC_MspInit+0x3c>)
 80022e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80022e2:	4b09      	ldr	r3, [pc, #36]	; (8002308 <HAL_RTC_MspInit+0x3c>)
 80022e4:	2180      	movs	r1, #128	; 0x80
 80022e6:	02c9      	lsls	r1, r1, #11
 80022e8:	430a      	orrs	r2, r1
 80022ea:	651a      	str	r2, [r3, #80]	; 0x50
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 80022ec:	2200      	movs	r2, #0
 80022ee:	2100      	movs	r1, #0
 80022f0:	2002      	movs	r0, #2
 80022f2:	f000 fd35 	bl	8002d60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 80022f6:	2002      	movs	r0, #2
 80022f8:	f000 fd47 	bl	8002d8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80022fc:	46c0      	nop			; (mov r8, r8)
 80022fe:	46bd      	mov	sp, r7
 8002300:	b002      	add	sp, #8
 8002302:	bd80      	pop	{r7, pc}
 8002304:	40002800 	.word	0x40002800
 8002308:	40021000 	.word	0x40021000

0800230c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b088      	sub	sp, #32
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002314:	230c      	movs	r3, #12
 8002316:	18fb      	adds	r3, r7, r3
 8002318:	0018      	movs	r0, r3
 800231a:	2314      	movs	r3, #20
 800231c:	001a      	movs	r2, r3
 800231e:	2100      	movs	r1, #0
 8002320:	f004 f965 	bl	80065ee <memset>
  if(hspi->Instance==SPI1)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a30      	ldr	r2, [pc, #192]	; (80023ec <HAL_SPI_MspInit+0xe0>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d15a      	bne.n	80023e4 <HAL_SPI_MspInit+0xd8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800232e:	4b30      	ldr	r3, [pc, #192]	; (80023f0 <HAL_SPI_MspInit+0xe4>)
 8002330:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002332:	4b2f      	ldr	r3, [pc, #188]	; (80023f0 <HAL_SPI_MspInit+0xe4>)
 8002334:	2180      	movs	r1, #128	; 0x80
 8002336:	0149      	lsls	r1, r1, #5
 8002338:	430a      	orrs	r2, r1
 800233a:	635a      	str	r2, [r3, #52]	; 0x34
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800233c:	4b2c      	ldr	r3, [pc, #176]	; (80023f0 <HAL_SPI_MspInit+0xe4>)
 800233e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002340:	4b2b      	ldr	r3, [pc, #172]	; (80023f0 <HAL_SPI_MspInit+0xe4>)
 8002342:	2101      	movs	r1, #1
 8002344:	430a      	orrs	r2, r1
 8002346:	62da      	str	r2, [r3, #44]	; 0x2c
 8002348:	4b29      	ldr	r3, [pc, #164]	; (80023f0 <HAL_SPI_MspInit+0xe4>)
 800234a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800234c:	2201      	movs	r2, #1
 800234e:	4013      	ands	r3, r2
 8002350:	60bb      	str	r3, [r7, #8]
 8002352:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002354:	210c      	movs	r1, #12
 8002356:	187b      	adds	r3, r7, r1
 8002358:	22a0      	movs	r2, #160	; 0xa0
 800235a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800235c:	187b      	adds	r3, r7, r1
 800235e:	2202      	movs	r2, #2
 8002360:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002362:	187b      	adds	r3, r7, r1
 8002364:	2200      	movs	r2, #0
 8002366:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002368:	187b      	adds	r3, r7, r1
 800236a:	2203      	movs	r2, #3
 800236c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800236e:	187b      	adds	r3, r7, r1
 8002370:	2200      	movs	r2, #0
 8002372:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002374:	187a      	adds	r2, r7, r1
 8002376:	23a0      	movs	r3, #160	; 0xa0
 8002378:	05db      	lsls	r3, r3, #23
 800237a:	0011      	movs	r1, r2
 800237c:	0018      	movs	r0, r3
 800237e:	f000 ff23 	bl	80031c8 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8002382:	4b1c      	ldr	r3, [pc, #112]	; (80023f4 <HAL_SPI_MspInit+0xe8>)
 8002384:	4a1c      	ldr	r2, [pc, #112]	; (80023f8 <HAL_SPI_MspInit+0xec>)
 8002386:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
 8002388:	4b1a      	ldr	r3, [pc, #104]	; (80023f4 <HAL_SPI_MspInit+0xe8>)
 800238a:	2201      	movs	r2, #1
 800238c:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800238e:	4b19      	ldr	r3, [pc, #100]	; (80023f4 <HAL_SPI_MspInit+0xe8>)
 8002390:	2210      	movs	r2, #16
 8002392:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002394:	4b17      	ldr	r3, [pc, #92]	; (80023f4 <HAL_SPI_MspInit+0xe8>)
 8002396:	2200      	movs	r2, #0
 8002398:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800239a:	4b16      	ldr	r3, [pc, #88]	; (80023f4 <HAL_SPI_MspInit+0xe8>)
 800239c:	2280      	movs	r2, #128	; 0x80
 800239e:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80023a0:	4b14      	ldr	r3, [pc, #80]	; (80023f4 <HAL_SPI_MspInit+0xe8>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80023a6:	4b13      	ldr	r3, [pc, #76]	; (80023f4 <HAL_SPI_MspInit+0xe8>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80023ac:	4b11      	ldr	r3, [pc, #68]	; (80023f4 <HAL_SPI_MspInit+0xe8>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80023b2:	4b10      	ldr	r3, [pc, #64]	; (80023f4 <HAL_SPI_MspInit+0xe8>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80023b8:	4b0e      	ldr	r3, [pc, #56]	; (80023f4 <HAL_SPI_MspInit+0xe8>)
 80023ba:	0018      	movs	r0, r3
 80023bc:	f000 fd02 	bl	8002dc4 <HAL_DMA_Init>
 80023c0:	1e03      	subs	r3, r0, #0
 80023c2:	d001      	beq.n	80023c8 <HAL_SPI_MspInit+0xbc>
    {
      Error_Handler();
 80023c4:	f7ff fbdc 	bl	8001b80 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	4a0a      	ldr	r2, [pc, #40]	; (80023f4 <HAL_SPI_MspInit+0xe8>)
 80023cc:	649a      	str	r2, [r3, #72]	; 0x48
 80023ce:	4b09      	ldr	r3, [pc, #36]	; (80023f4 <HAL_SPI_MspInit+0xe8>)
 80023d0:	687a      	ldr	r2, [r7, #4]
 80023d2:	629a      	str	r2, [r3, #40]	; 0x28

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80023d4:	2200      	movs	r2, #0
 80023d6:	2100      	movs	r1, #0
 80023d8:	2019      	movs	r0, #25
 80023da:	f000 fcc1 	bl	8002d60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80023de:	2019      	movs	r0, #25
 80023e0:	f000 fcd3 	bl	8002d8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80023e4:	46c0      	nop			; (mov r8, r8)
 80023e6:	46bd      	mov	sp, r7
 80023e8:	b008      	add	sp, #32
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	40013000 	.word	0x40013000
 80023f0:	40021000 	.word	0x40021000
 80023f4:	20000210 	.word	0x20000210
 80023f8:	40020030 	.word	0x40020030

080023fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b082      	sub	sp, #8
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM21)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a06      	ldr	r2, [pc, #24]	; (8002424 <HAL_TIM_Base_MspInit+0x28>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d105      	bne.n	800241a <HAL_TIM_Base_MspInit+0x1e>
  {
  /* USER CODE BEGIN TIM21_MspInit 0 */

  /* USER CODE END TIM21_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM21_CLK_ENABLE();
 800240e:	4b06      	ldr	r3, [pc, #24]	; (8002428 <HAL_TIM_Base_MspInit+0x2c>)
 8002410:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002412:	4b05      	ldr	r3, [pc, #20]	; (8002428 <HAL_TIM_Base_MspInit+0x2c>)
 8002414:	2104      	movs	r1, #4
 8002416:	430a      	orrs	r2, r1
 8002418:	635a      	str	r2, [r3, #52]	; 0x34
  /* USER CODE BEGIN TIM21_MspInit 1 */

  /* USER CODE END TIM21_MspInit 1 */
  }

}
 800241a:	46c0      	nop			; (mov r8, r8)
 800241c:	46bd      	mov	sp, r7
 800241e:	b002      	add	sp, #8
 8002420:	bd80      	pop	{r7, pc}
 8002422:	46c0      	nop			; (mov r8, r8)
 8002424:	40010800 	.word	0x40010800
 8002428:	40021000 	.word	0x40021000

0800242c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002430:	46c0      	nop			; (mov r8, r8)
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}

08002436 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002436:	b580      	push	{r7, lr}
 8002438:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800243a:	e7fe      	b.n	800243a <HardFault_Handler+0x4>

0800243c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002440:	46c0      	nop			; (mov r8, r8)
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}

08002446 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002446:	b580      	push	{r7, lr}
 8002448:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800244a:	46c0      	nop			; (mov r8, r8)
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}

08002450 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002454:	f000 f976 	bl	8002744 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002458:	46c0      	nop			; (mov r8, r8)
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
	...

08002460 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8002464:	4b03      	ldr	r3, [pc, #12]	; (8002474 <RTC_IRQHandler+0x14>)
 8002466:	0018      	movs	r0, r3
 8002468:	f002 fede 	bl	8005228 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 800246c:	46c0      	nop			; (mov r8, r8)
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
 8002472:	46c0      	nop			; (mov r8, r8)
 8002474:	2000012c 	.word	0x2000012c

08002478 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800247c:	2380      	movs	r3, #128	; 0x80
 800247e:	019b      	lsls	r3, r3, #6
 8002480:	0018      	movs	r0, r3
 8002482:	f001 f86b 	bl	800355c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8002486:	2380      	movs	r3, #128	; 0x80
 8002488:	01db      	lsls	r3, r3, #7
 800248a:	0018      	movs	r0, r3
 800248c:	f001 f866 	bl	800355c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8002490:	2380      	movs	r3, #128	; 0x80
 8002492:	021b      	lsls	r3, r3, #8
 8002494:	0018      	movs	r0, r3
 8002496:	f001 f861 	bl	800355c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800249a:	46c0      	nop			; (mov r8, r8)
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}

080024a0 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80024a4:	4b03      	ldr	r3, [pc, #12]	; (80024b4 <DMA1_Channel2_3_IRQHandler+0x14>)
 80024a6:	0018      	movs	r0, r3
 80024a8:	f000 fdb2 	bl	8003010 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80024ac:	46c0      	nop			; (mov r8, r8)
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	46c0      	nop			; (mov r8, r8)
 80024b4:	20000210 	.word	0x20000210

080024b8 <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt / LPTIM1 wake-up interrupt through EXTI line 29.
  */
void LPTIM1_IRQHandler(void)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 80024bc:	4b03      	ldr	r3, [pc, #12]	; (80024cc <LPTIM1_IRQHandler+0x14>)
 80024be:	0018      	movs	r0, r3
 80024c0:	f001 f96c 	bl	800379c <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 80024c4:	46c0      	nop			; (mov r8, r8)
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	46c0      	nop			; (mov r8, r8)
 80024cc:	200000fc 	.word	0x200000fc

080024d0 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80024d4:	4b03      	ldr	r3, [pc, #12]	; (80024e4 <SPI1_IRQHandler+0x14>)
 80024d6:	0018      	movs	r0, r3
 80024d8:	f003 fa08 	bl	80058ec <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80024dc:	46c0      	nop			; (mov r8, r8)
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	46c0      	nop			; (mov r8, r8)
 80024e4:	20000158 	.word	0x20000158

080024e8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b084      	sub	sp, #16
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80024f0:	4b11      	ldr	r3, [pc, #68]	; (8002538 <_sbrk+0x50>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d102      	bne.n	80024fe <_sbrk+0x16>
		heap_end = &end;
 80024f8:	4b0f      	ldr	r3, [pc, #60]	; (8002538 <_sbrk+0x50>)
 80024fa:	4a10      	ldr	r2, [pc, #64]	; (800253c <_sbrk+0x54>)
 80024fc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80024fe:	4b0e      	ldr	r3, [pc, #56]	; (8002538 <_sbrk+0x50>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002504:	4b0c      	ldr	r3, [pc, #48]	; (8002538 <_sbrk+0x50>)
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	18d3      	adds	r3, r2, r3
 800250c:	466a      	mov	r2, sp
 800250e:	4293      	cmp	r3, r2
 8002510:	d907      	bls.n	8002522 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002512:	f004 f839 	bl	8006588 <__errno>
 8002516:	0003      	movs	r3, r0
 8002518:	220c      	movs	r2, #12
 800251a:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 800251c:	2301      	movs	r3, #1
 800251e:	425b      	negs	r3, r3
 8002520:	e006      	b.n	8002530 <_sbrk+0x48>
	}

	heap_end += incr;
 8002522:	4b05      	ldr	r3, [pc, #20]	; (8002538 <_sbrk+0x50>)
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	18d2      	adds	r2, r2, r3
 800252a:	4b03      	ldr	r3, [pc, #12]	; (8002538 <_sbrk+0x50>)
 800252c:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 800252e:	68fb      	ldr	r3, [r7, #12]
}
 8002530:	0018      	movs	r0, r3
 8002532:	46bd      	mov	sp, r7
 8002534:	b004      	add	sp, #16
 8002536:	bd80      	pop	{r7, pc}
 8002538:	200000b8 	.word	0x200000b8
 800253c:	200002a0 	.word	0x200002a0

08002540 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8002544:	4b17      	ldr	r3, [pc, #92]	; (80025a4 <SystemInit+0x64>)
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	4b16      	ldr	r3, [pc, #88]	; (80025a4 <SystemInit+0x64>)
 800254a:	2180      	movs	r1, #128	; 0x80
 800254c:	0049      	lsls	r1, r1, #1
 800254e:	430a      	orrs	r2, r1
 8002550:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8002552:	4b14      	ldr	r3, [pc, #80]	; (80025a4 <SystemInit+0x64>)
 8002554:	68da      	ldr	r2, [r3, #12]
 8002556:	4b13      	ldr	r3, [pc, #76]	; (80025a4 <SystemInit+0x64>)
 8002558:	4913      	ldr	r1, [pc, #76]	; (80025a8 <SystemInit+0x68>)
 800255a:	400a      	ands	r2, r1
 800255c:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 800255e:	4b11      	ldr	r3, [pc, #68]	; (80025a4 <SystemInit+0x64>)
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	4b10      	ldr	r3, [pc, #64]	; (80025a4 <SystemInit+0x64>)
 8002564:	4911      	ldr	r1, [pc, #68]	; (80025ac <SystemInit+0x6c>)
 8002566:	400a      	ands	r2, r1
 8002568:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800256a:	4b0e      	ldr	r3, [pc, #56]	; (80025a4 <SystemInit+0x64>)
 800256c:	689a      	ldr	r2, [r3, #8]
 800256e:	4b0d      	ldr	r3, [pc, #52]	; (80025a4 <SystemInit+0x64>)
 8002570:	2101      	movs	r1, #1
 8002572:	438a      	bics	r2, r1
 8002574:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8002576:	4b0b      	ldr	r3, [pc, #44]	; (80025a4 <SystemInit+0x64>)
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	4b0a      	ldr	r3, [pc, #40]	; (80025a4 <SystemInit+0x64>)
 800257c:	490c      	ldr	r1, [pc, #48]	; (80025b0 <SystemInit+0x70>)
 800257e:	400a      	ands	r2, r1
 8002580:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8002582:	4b08      	ldr	r3, [pc, #32]	; (80025a4 <SystemInit+0x64>)
 8002584:	68da      	ldr	r2, [r3, #12]
 8002586:	4b07      	ldr	r3, [pc, #28]	; (80025a4 <SystemInit+0x64>)
 8002588:	490a      	ldr	r1, [pc, #40]	; (80025b4 <SystemInit+0x74>)
 800258a:	400a      	ands	r2, r1
 800258c:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800258e:	4b05      	ldr	r3, [pc, #20]	; (80025a4 <SystemInit+0x64>)
 8002590:	2200      	movs	r2, #0
 8002592:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002594:	4b08      	ldr	r3, [pc, #32]	; (80025b8 <SystemInit+0x78>)
 8002596:	2280      	movs	r2, #128	; 0x80
 8002598:	0512      	lsls	r2, r2, #20
 800259a:	609a      	str	r2, [r3, #8]
#endif
}
 800259c:	46c0      	nop			; (mov r8, r8)
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	46c0      	nop			; (mov r8, r8)
 80025a4:	40021000 	.word	0x40021000
 80025a8:	88ff400c 	.word	0x88ff400c
 80025ac:	fef6fff6 	.word	0xfef6fff6
 80025b0:	fffbffff 	.word	0xfffbffff
 80025b4:	ff02ffff 	.word	0xff02ffff
 80025b8:	e000ed00 	.word	0xe000ed00

080025bc <runStopwatch>:

// ---- Stopwatch functions ----
// set stopwatch. using lptimer. maybe better with regular timer?
// can operate in stop mode if using lptimer
// modify to update screen/set flags when necessary
void runStopwatch(LPTIM_HandleTypeDef *hlptim) {
 80025bc:	b580      	push	{r7, lr}
 80025be:	b082      	sub	sp, #8
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
	HAL_LPTIM_Counter_Start_IT(hlptim, 0x8000);
 80025c4:	2380      	movs	r3, #128	; 0x80
 80025c6:	021a      	lsls	r2, r3, #8
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	0011      	movs	r1, r2
 80025cc:	0018      	movs	r0, r3
 80025ce:	f001 f861 	bl	8003694 <HAL_LPTIM_Counter_Start_IT>
}
 80025d2:	46c0      	nop			; (mov r8, r8)
 80025d4:	46bd      	mov	sp, r7
 80025d6:	b002      	add	sp, #8
 80025d8:	bd80      	pop	{r7, pc}

080025da <pauseStopwatch>:

// stop the timer or pause it or whatever.
// counter value might reset and screw up timekeeping? should save?
void pauseStopwatch(LPTIM_HandleTypeDef *hlptim) {
 80025da:	b580      	push	{r7, lr}
 80025dc:	b082      	sub	sp, #8
 80025de:	af00      	add	r7, sp, #0
 80025e0:	6078      	str	r0, [r7, #4]
	HAL_LPTIM_Counter_Stop_IT(hlptim);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	0018      	movs	r0, r3
 80025e6:	f001 f8a9 	bl	800373c <HAL_LPTIM_Counter_Stop_IT>
//	temp = hlptim->Instance->CNT;
}
 80025ea:	46c0      	nop			; (mov r8, r8)
 80025ec:	46bd      	mov	sp, r7
 80025ee:	b002      	add	sp, #8
 80025f0:	bd80      	pop	{r7, pc}
	...

080025f4 <clearStopwatch>:

void clearStopwatch(LPTIM_HandleTypeDef *hlptim) {
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b082      	sub	sp, #8
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
	pauseStopwatch(hlptim);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	0018      	movs	r0, r3
 8002600:	f7ff ffeb 	bl	80025da <pauseStopwatch>
	stopwatchCNT = 0;
 8002604:	4b03      	ldr	r3, [pc, #12]	; (8002614 <clearStopwatch+0x20>)
 8002606:	2200      	movs	r2, #0
 8002608:	601a      	str	r2, [r3, #0]
}
 800260a:	46c0      	nop			; (mov r8, r8)
 800260c:	46bd      	mov	sp, r7
 800260e:	b002      	add	sp, #8
 8002610:	bd80      	pop	{r7, pc}
 8002612:	46c0      	nop			; (mov r8, r8)
 8002614:	200000c4 	.word	0x200000c4

08002618 <HAL_LPTIM_AutoReloadMatchCallback>:
// increment variable for stopwatch counting.
// update screen if on
// how to set lptim internal clock to LSE???
//   I FOUND IT: RCC->CCIPR LPTIMSEL (2-bits, 11=LSE clock for LPTIM)
//   now...does hal do this automatically?
void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim) {
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
	// toggle pin, should toggle every 1s. change this pin
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 8002620:	23a0      	movs	r3, #160	; 0xa0
 8002622:	05db      	lsls	r3, r3, #23
 8002624:	2101      	movs	r1, #1
 8002626:	0018      	movs	r0, r3
 8002628:	f000 ff86 	bl	8003538 <HAL_GPIO_TogglePin>
	stopwatchCNT++;
 800262c:	4b04      	ldr	r3, [pc, #16]	; (8002640 <HAL_LPTIM_AutoReloadMatchCallback+0x28>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	1c5a      	adds	r2, r3, #1
 8002632:	4b03      	ldr	r3, [pc, #12]	; (8002640 <HAL_LPTIM_AutoReloadMatchCallback+0x28>)
 8002634:	601a      	str	r2, [r3, #0]
}
 8002636:	46c0      	nop			; (mov r8, r8)
 8002638:	46bd      	mov	sp, r7
 800263a:	b002      	add	sp, #8
 800263c:	bd80      	pop	{r7, pc}
 800263e:	46c0      	nop			; (mov r8, r8)
 8002640:	200000c4 	.word	0x200000c4

08002644 <runTimerDisplay>:
// else, we're setting rtc alarm
// uses TIM21 with LSE (external timer w/ remap and done already by ST).
//void setTimer(TIM_HandleTypeDef *htim, struct alarmTimes *a) {
//	HAL_TIM_Base_Start_IT(htim);
//}
void runTimerDisplay(TIM_HandleTypeDef *htim) {
 8002644:	b580      	push	{r7, lr}
 8002646:	b082      	sub	sp, #8
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start(htim);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	0018      	movs	r0, r3
 8002650:	f003 fbdb 	bl	8005e0a <HAL_TIM_Base_Start>
}
 8002654:	46c0      	nop			; (mov r8, r8)
 8002656:	46bd      	mov	sp, r7
 8002658:	b002      	add	sp, #8
 800265a:	bd80      	pop	{r7, pc}

0800265c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 800265c:	480d      	ldr	r0, [pc, #52]	; (8002694 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800265e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8002660:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002662:	e003      	b.n	800266c <LoopCopyDataInit>

08002664 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002664:	4b0c      	ldr	r3, [pc, #48]	; (8002698 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 8002666:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002668:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800266a:	3104      	adds	r1, #4

0800266c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 800266c:	480b      	ldr	r0, [pc, #44]	; (800269c <LoopForever+0xa>)
  ldr  r3, =_edata
 800266e:	4b0c      	ldr	r3, [pc, #48]	; (80026a0 <LoopForever+0xe>)
  adds  r2, r0, r1
 8002670:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002672:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002674:	d3f6      	bcc.n	8002664 <CopyDataInit>
  ldr  r2, =_sbss
 8002676:	4a0b      	ldr	r2, [pc, #44]	; (80026a4 <LoopForever+0x12>)
  b  LoopFillZerobss
 8002678:	e002      	b.n	8002680 <LoopFillZerobss>

0800267a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 800267a:	2300      	movs	r3, #0
  str  r3, [r2]
 800267c:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800267e:	3204      	adds	r2, #4

08002680 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8002680:	4b09      	ldr	r3, [pc, #36]	; (80026a8 <LoopForever+0x16>)
  cmp  r2, r3
 8002682:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002684:	d3f9      	bcc.n	800267a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002686:	f7ff ff5b 	bl	8002540 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800268a:	f003 ff83 	bl	8006594 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800268e:	f7fe fee7 	bl	8001460 <main>

08002692 <LoopForever>:

LoopForever:
    b LoopForever
 8002692:	e7fe      	b.n	8002692 <LoopForever>
   ldr   r0, =_estack
 8002694:	20005000 	.word	0x20005000
  ldr  r3, =_sidata
 8002698:	0800744c 	.word	0x0800744c
  ldr  r0, =_sdata
 800269c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80026a0:	20000068 	.word	0x20000068
  ldr  r2, =_sbss
 80026a4:	20000068 	.word	0x20000068
  ldr  r3, = _ebss
 80026a8:	2000029c 	.word	0x2000029c

080026ac <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80026ac:	e7fe      	b.n	80026ac <ADC1_COMP_IRQHandler>
	...

080026b0 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b082      	sub	sp, #8
 80026b4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80026b6:	1dfb      	adds	r3, r7, #7
 80026b8:	2200      	movs	r2, #0
 80026ba:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80026bc:	4b0b      	ldr	r3, [pc, #44]	; (80026ec <HAL_Init+0x3c>)
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	4b0a      	ldr	r3, [pc, #40]	; (80026ec <HAL_Init+0x3c>)
 80026c2:	2140      	movs	r1, #64	; 0x40
 80026c4:	430a      	orrs	r2, r1
 80026c6:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80026c8:	2000      	movs	r0, #0
 80026ca:	f000 f811 	bl	80026f0 <HAL_InitTick>
 80026ce:	1e03      	subs	r3, r0, #0
 80026d0:	d003      	beq.n	80026da <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80026d2:	1dfb      	adds	r3, r7, #7
 80026d4:	2201      	movs	r2, #1
 80026d6:	701a      	strb	r2, [r3, #0]
 80026d8:	e001      	b.n	80026de <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80026da:	f7ff fd85 	bl	80021e8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80026de:	1dfb      	adds	r3, r7, #7
 80026e0:	781b      	ldrb	r3, [r3, #0]
}
 80026e2:	0018      	movs	r0, r3
 80026e4:	46bd      	mov	sp, r7
 80026e6:	b002      	add	sp, #8
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	46c0      	nop			; (mov r8, r8)
 80026ec:	40022000 	.word	0x40022000

080026f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b084      	sub	sp, #16
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80026f8:	230f      	movs	r3, #15
 80026fa:	18fb      	adds	r3, r7, r3
 80026fc:	2200      	movs	r2, #0
 80026fe:	701a      	strb	r2, [r3, #0]

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8002700:	4b0f      	ldr	r3, [pc, #60]	; (8002740 <HAL_InitTick+0x50>)
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	23fa      	movs	r3, #250	; 0xfa
 8002706:	0099      	lsls	r1, r3, #2
 8002708:	0010      	movs	r0, r2
 800270a:	f7fd fcfd 	bl	8000108 <__udivsi3>
 800270e:	0003      	movs	r3, r0
 8002710:	0018      	movs	r0, r3
 8002712:	f000 fb4a 	bl	8002daa <HAL_SYSTICK_Config>
 8002716:	1e03      	subs	r3, r0, #0
 8002718:	d004      	beq.n	8002724 <HAL_InitTick+0x34>
  {
    status = HAL_ERROR;
 800271a:	230f      	movs	r3, #15
 800271c:	18fb      	adds	r3, r7, r3
 800271e:	2201      	movs	r2, #1
 8002720:	701a      	strb	r2, [r3, #0]
 8002722:	e006      	b.n	8002732 <HAL_InitTick+0x42>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 8002724:	6879      	ldr	r1, [r7, #4]
 8002726:	2301      	movs	r3, #1
 8002728:	425b      	negs	r3, r3
 800272a:	2200      	movs	r2, #0
 800272c:	0018      	movs	r0, r3
 800272e:	f000 fb17 	bl	8002d60 <HAL_NVIC_SetPriority>
  }

  /* Return function status */
  return status;
 8002732:	230f      	movs	r3, #15
 8002734:	18fb      	adds	r3, r7, r3
 8002736:	781b      	ldrb	r3, [r3, #0]
}
 8002738:	0018      	movs	r0, r3
 800273a:	46bd      	mov	sp, r7
 800273c:	b004      	add	sp, #16
 800273e:	bd80      	pop	{r7, pc}
 8002740:	20000000 	.word	0x20000000

08002744 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	af00      	add	r7, sp, #0
  uwTick++;
 8002748:	4b03      	ldr	r3, [pc, #12]	; (8002758 <HAL_IncTick+0x14>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	1c5a      	adds	r2, r3, #1
 800274e:	4b02      	ldr	r3, [pc, #8]	; (8002758 <HAL_IncTick+0x14>)
 8002750:	601a      	str	r2, [r3, #0]
}
 8002752:	46c0      	nop			; (mov r8, r8)
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}
 8002758:	20000294 	.word	0x20000294

0800275c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	af00      	add	r7, sp, #0
  return uwTick;
 8002760:	4b02      	ldr	r3, [pc, #8]	; (800276c <HAL_GetTick+0x10>)
 8002762:	681b      	ldr	r3, [r3, #0]
}
 8002764:	0018      	movs	r0, r3
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
 800276a:	46c0      	nop			; (mov r8, r8)
 800276c:	20000294 	.word	0x20000294

08002770 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b084      	sub	sp, #16
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002778:	f7ff fff0 	bl	800275c <HAL_GetTick>
 800277c:	0003      	movs	r3, r0
 800277e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	3301      	adds	r3, #1
 8002788:	d002      	beq.n	8002790 <HAL_Delay+0x20>
  {
    wait++;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	3301      	adds	r3, #1
 800278e:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002790:	46c0      	nop			; (mov r8, r8)
 8002792:	f7ff ffe3 	bl	800275c <HAL_GetTick>
 8002796:	0002      	movs	r2, r0
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	1ad3      	subs	r3, r2, r3
 800279c:	68fa      	ldr	r2, [r7, #12]
 800279e:	429a      	cmp	r2, r3
 80027a0:	d8f7      	bhi.n	8002792 <HAL_Delay+0x22>
  {
  }
}
 80027a2:	46c0      	nop			; (mov r8, r8)
 80027a4:	46bd      	mov	sp, r7
 80027a6:	b004      	add	sp, #16
 80027a8:	bd80      	pop	{r7, pc}
	...

080027ac <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b082      	sub	sp, #8
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d101      	bne.n	80027be <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e159      	b.n	8002a72 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d10a      	bne.n	80027dc <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2200      	movs	r2, #0
 80027ca:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2250      	movs	r2, #80	; 0x50
 80027d0:	2100      	movs	r1, #0
 80027d2:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	0018      	movs	r0, r3
 80027d8:	f7ff fd1a 	bl	8002210 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027e0:	2210      	movs	r2, #16
 80027e2:	4013      	ands	r3, r2
 80027e4:	2b10      	cmp	r3, #16
 80027e6:	d005      	beq.n	80027f4 <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	2204      	movs	r2, #4
 80027f0:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80027f2:	d00b      	beq.n	800280c <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027f8:	2210      	movs	r2, #16
 80027fa:	431a      	orrs	r2, r3
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2250      	movs	r2, #80	; 0x50
 8002804:	2100      	movs	r1, #0
 8002806:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	e132      	b.n	8002a72 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002810:	4a9a      	ldr	r2, [pc, #616]	; (8002a7c <HAL_ADC_Init+0x2d0>)
 8002812:	4013      	ands	r3, r2
 8002814:	2202      	movs	r2, #2
 8002816:	431a      	orrs	r2, r3
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	2203      	movs	r2, #3
 8002824:	4013      	ands	r3, r2
 8002826:	2b01      	cmp	r3, #1
 8002828:	d108      	bne.n	800283c <HAL_ADC_Init+0x90>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	2201      	movs	r2, #1
 8002832:	4013      	ands	r3, r2
 8002834:	2b01      	cmp	r3, #1
 8002836:	d101      	bne.n	800283c <HAL_ADC_Init+0x90>
 8002838:	2301      	movs	r3, #1
 800283a:	e000      	b.n	800283e <HAL_ADC_Init+0x92>
 800283c:	2300      	movs	r3, #0
 800283e:	2b00      	cmp	r3, #0
 8002840:	d149      	bne.n	80028d6 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	685a      	ldr	r2, [r3, #4]
 8002846:	23c0      	movs	r3, #192	; 0xc0
 8002848:	061b      	lsls	r3, r3, #24
 800284a:	429a      	cmp	r2, r3
 800284c:	d00b      	beq.n	8002866 <HAL_ADC_Init+0xba>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	685a      	ldr	r2, [r3, #4]
 8002852:	2380      	movs	r3, #128	; 0x80
 8002854:	05db      	lsls	r3, r3, #23
 8002856:	429a      	cmp	r2, r3
 8002858:	d005      	beq.n	8002866 <HAL_ADC_Init+0xba>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	685a      	ldr	r2, [r3, #4]
 800285e:	2380      	movs	r3, #128	; 0x80
 8002860:	061b      	lsls	r3, r3, #24
 8002862:	429a      	cmp	r2, r3
 8002864:	d111      	bne.n	800288a <HAL_ADC_Init+0xde>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	691a      	ldr	r2, [r3, #16]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	0092      	lsls	r2, r2, #2
 8002872:	0892      	lsrs	r2, r2, #2
 8002874:	611a      	str	r2, [r3, #16]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	6919      	ldr	r1, [r3, #16]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	685a      	ldr	r2, [r3, #4]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	430a      	orrs	r2, r1
 8002886:	611a      	str	r2, [r3, #16]
 8002888:	e014      	b.n	80028b4 <HAL_ADC_Init+0x108>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	691a      	ldr	r2, [r3, #16]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	0092      	lsls	r2, r2, #2
 8002896:	0892      	lsrs	r2, r2, #2
 8002898:	611a      	str	r2, [r3, #16]
 800289a:	4b79      	ldr	r3, [pc, #484]	; (8002a80 <HAL_ADC_Init+0x2d4>)
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	4b78      	ldr	r3, [pc, #480]	; (8002a80 <HAL_ADC_Init+0x2d4>)
 80028a0:	4978      	ldr	r1, [pc, #480]	; (8002a84 <HAL_ADC_Init+0x2d8>)
 80028a2:	400a      	ands	r2, r1
 80028a4:	601a      	str	r2, [r3, #0]
 80028a6:	4b76      	ldr	r3, [pc, #472]	; (8002a80 <HAL_ADC_Init+0x2d4>)
 80028a8:	6819      	ldr	r1, [r3, #0]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	685a      	ldr	r2, [r3, #4]
 80028ae:	4b74      	ldr	r3, [pc, #464]	; (8002a80 <HAL_ADC_Init+0x2d4>)
 80028b0:	430a      	orrs	r2, r1
 80028b2:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	68da      	ldr	r2, [r3, #12]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	2118      	movs	r1, #24
 80028c0:	438a      	bics	r2, r1
 80028c2:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	68d9      	ldr	r1, [r3, #12]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	689a      	ldr	r2, [r3, #8]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	430a      	orrs	r2, r1
 80028d4:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 80028d6:	4b6a      	ldr	r3, [pc, #424]	; (8002a80 <HAL_ADC_Init+0x2d4>)
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	4b69      	ldr	r3, [pc, #420]	; (8002a80 <HAL_ADC_Init+0x2d4>)
 80028dc:	496a      	ldr	r1, [pc, #424]	; (8002a88 <HAL_ADC_Init+0x2dc>)
 80028de:	400a      	ands	r2, r1
 80028e0:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 80028e2:	4b67      	ldr	r3, [pc, #412]	; (8002a80 <HAL_ADC_Init+0x2d4>)
 80028e4:	6819      	ldr	r1, [r3, #0]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028ea:	065a      	lsls	r2, r3, #25
 80028ec:	4b64      	ldr	r3, [pc, #400]	; (8002a80 <HAL_ADC_Init+0x2d4>)
 80028ee:	430a      	orrs	r2, r1
 80028f0:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	689a      	ldr	r2, [r3, #8]
 80028f8:	2380      	movs	r3, #128	; 0x80
 80028fa:	055b      	lsls	r3, r3, #21
 80028fc:	4013      	ands	r3, r2
 80028fe:	d108      	bne.n	8002912 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	689a      	ldr	r2, [r3, #8]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	2180      	movs	r1, #128	; 0x80
 800290c:	0549      	lsls	r1, r1, #21
 800290e:	430a      	orrs	r2, r1
 8002910:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	68da      	ldr	r2, [r3, #12]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	495b      	ldr	r1, [pc, #364]	; (8002a8c <HAL_ADC_Init+0x2e0>)
 800291e:	400a      	ands	r2, r1
 8002920:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	68d9      	ldr	r1, [r3, #12]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	691b      	ldr	r3, [r3, #16]
 8002930:	2b02      	cmp	r3, #2
 8002932:	d101      	bne.n	8002938 <HAL_ADC_Init+0x18c>
 8002934:	2304      	movs	r3, #4
 8002936:	e000      	b.n	800293a <HAL_ADC_Init+0x18e>
 8002938:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800293a:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2020      	movs	r0, #32
 8002940:	5c1b      	ldrb	r3, [r3, r0]
 8002942:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8002944:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	202c      	movs	r0, #44	; 0x2c
 800294a:	5c1b      	ldrb	r3, [r3, r0]
 800294c:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800294e:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8002954:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	699b      	ldr	r3, [r3, #24]
 800295a:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 800295c:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	69db      	ldr	r3, [r3, #28]
 8002962:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8002964:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	430a      	orrs	r2, r1
 800296c:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002972:	23c2      	movs	r3, #194	; 0xc2
 8002974:	33ff      	adds	r3, #255	; 0xff
 8002976:	429a      	cmp	r2, r3
 8002978:	d00b      	beq.n	8002992 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	68d9      	ldr	r1, [r3, #12]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8002988:	431a      	orrs	r2, r3
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	430a      	orrs	r2, r1
 8002990:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2221      	movs	r2, #33	; 0x21
 8002996:	5c9b      	ldrb	r3, [r3, r2]
 8002998:	2b01      	cmp	r3, #1
 800299a:	d11a      	bne.n	80029d2 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2220      	movs	r2, #32
 80029a0:	5c9b      	ldrb	r3, [r3, r2]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d109      	bne.n	80029ba <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	68da      	ldr	r2, [r3, #12]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	2180      	movs	r1, #128	; 0x80
 80029b2:	0249      	lsls	r1, r1, #9
 80029b4:	430a      	orrs	r2, r1
 80029b6:	60da      	str	r2, [r3, #12]
 80029b8:	e00b      	b.n	80029d2 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029be:	2220      	movs	r2, #32
 80029c0:	431a      	orrs	r2, r3
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029ca:	2201      	movs	r2, #1
 80029cc:	431a      	orrs	r2, r3
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d11f      	bne.n	8002a1a <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	691a      	ldr	r2, [r3, #16]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	492a      	ldr	r1, [pc, #168]	; (8002a90 <HAL_ADC_Init+0x2e4>)
 80029e6:	400a      	ands	r2, r1
 80029e8:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	6919      	ldr	r1, [r3, #16]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80029f8:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 80029fe:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	430a      	orrs	r2, r1
 8002a06:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	691a      	ldr	r2, [r3, #16]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	2101      	movs	r1, #1
 8002a14:	430a      	orrs	r2, r1
 8002a16:	611a      	str	r2, [r3, #16]
 8002a18:	e00e      	b.n	8002a38 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	691b      	ldr	r3, [r3, #16]
 8002a20:	2201      	movs	r2, #1
 8002a22:	4013      	ands	r3, r2
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	d107      	bne.n	8002a38 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	691a      	ldr	r2, [r3, #16]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	2101      	movs	r1, #1
 8002a34:	438a      	bics	r2, r1
 8002a36:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	695a      	ldr	r2, [r3, #20]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	2107      	movs	r1, #7
 8002a44:	438a      	bics	r2, r1
 8002a46:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	6959      	ldr	r1, [r3, #20]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	430a      	orrs	r2, r1
 8002a58:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a64:	2203      	movs	r2, #3
 8002a66:	4393      	bics	r3, r2
 8002a68:	2201      	movs	r2, #1
 8002a6a:	431a      	orrs	r2, r3
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8002a70:	2300      	movs	r3, #0
}
 8002a72:	0018      	movs	r0, r3
 8002a74:	46bd      	mov	sp, r7
 8002a76:	b002      	add	sp, #8
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	46c0      	nop			; (mov r8, r8)
 8002a7c:	fffffefd 	.word	0xfffffefd
 8002a80:	40012708 	.word	0x40012708
 8002a84:	ffc3ffff 	.word	0xffc3ffff
 8002a88:	fdffffff 	.word	0xfdffffff
 8002a8c:	fffe0219 	.word	0xfffe0219
 8002a90:	fffffc03 	.word	0xfffffc03

08002a94 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b082      	sub	sp, #8
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
 8002a9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2250      	movs	r2, #80	; 0x50
 8002aa2:	5c9b      	ldrb	r3, [r3, r2]
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d101      	bne.n	8002aac <HAL_ADC_ConfigChannel+0x18>
 8002aa8:	2302      	movs	r3, #2
 8002aaa:	e085      	b.n	8002bb8 <HAL_ADC_ConfigChannel+0x124>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2250      	movs	r2, #80	; 0x50
 8002ab0:	2101      	movs	r1, #1
 8002ab2:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	2204      	movs	r2, #4
 8002abc:	4013      	ands	r3, r2
 8002abe:	d00b      	beq.n	8002ad8 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ac4:	2220      	movs	r2, #32
 8002ac6:	431a      	orrs	r2, r3
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2250      	movs	r2, #80	; 0x50
 8002ad0:	2100      	movs	r1, #0
 8002ad2:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e06f      	b.n	8002bb8 <HAL_ADC_ConfigChannel+0x124>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	4a38      	ldr	r2, [pc, #224]	; (8002bc0 <HAL_ADC_ConfigChannel+0x12c>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d035      	beq.n	8002b4e <HAL_ADC_ConfigChannel+0xba>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	035b      	lsls	r3, r3, #13
 8002aee:	0b5a      	lsrs	r2, r3, #13
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	430a      	orrs	r2, r1
 8002af6:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	2380      	movs	r3, #128	; 0x80
 8002afe:	02db      	lsls	r3, r3, #11
 8002b00:	4013      	ands	r3, r2
 8002b02:	d009      	beq.n	8002b18 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 8002b04:	4b2f      	ldr	r3, [pc, #188]	; (8002bc4 <HAL_ADC_ConfigChannel+0x130>)
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	4b2e      	ldr	r3, [pc, #184]	; (8002bc4 <HAL_ADC_ConfigChannel+0x130>)
 8002b0a:	2180      	movs	r1, #128	; 0x80
 8002b0c:	0409      	lsls	r1, r1, #16
 8002b0e:	430a      	orrs	r2, r1
 8002b10:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8002b12:	200a      	movs	r0, #10
 8002b14:	f000 f85e 	bl	8002bd4 <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	2380      	movs	r3, #128	; 0x80
 8002b1e:	029b      	lsls	r3, r3, #10
 8002b20:	4013      	ands	r3, r2
 8002b22:	d006      	beq.n	8002b32 <HAL_ADC_ConfigChannel+0x9e>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 8002b24:	4b27      	ldr	r3, [pc, #156]	; (8002bc4 <HAL_ADC_ConfigChannel+0x130>)
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	4b26      	ldr	r3, [pc, #152]	; (8002bc4 <HAL_ADC_ConfigChannel+0x130>)
 8002b2a:	2180      	movs	r1, #128	; 0x80
 8002b2c:	03c9      	lsls	r1, r1, #15
 8002b2e:	430a      	orrs	r2, r1
 8002b30:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	2380      	movs	r3, #128	; 0x80
 8002b38:	025b      	lsls	r3, r3, #9
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	d037      	beq.n	8002bae <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR |= ADC_CCR_VLCDEN;   
 8002b3e:	4b21      	ldr	r3, [pc, #132]	; (8002bc4 <HAL_ADC_ConfigChannel+0x130>)
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	4b20      	ldr	r3, [pc, #128]	; (8002bc4 <HAL_ADC_ConfigChannel+0x130>)
 8002b44:	2180      	movs	r1, #128	; 0x80
 8002b46:	0449      	lsls	r1, r1, #17
 8002b48:	430a      	orrs	r2, r1
 8002b4a:	601a      	str	r2, [r3, #0]
 8002b4c:	e02f      	b.n	8002bae <HAL_ADC_ConfigChannel+0x11a>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	035b      	lsls	r3, r3, #13
 8002b5a:	0b5b      	lsrs	r3, r3, #13
 8002b5c:	43d9      	mvns	r1, r3
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	400a      	ands	r2, r1
 8002b64:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	2380      	movs	r3, #128	; 0x80
 8002b6c:	02db      	lsls	r3, r3, #11
 8002b6e:	4013      	ands	r3, r2
 8002b70:	d005      	beq.n	8002b7e <HAL_ADC_ConfigChannel+0xea>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 8002b72:	4b14      	ldr	r3, [pc, #80]	; (8002bc4 <HAL_ADC_ConfigChannel+0x130>)
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	4b13      	ldr	r3, [pc, #76]	; (8002bc4 <HAL_ADC_ConfigChannel+0x130>)
 8002b78:	4913      	ldr	r1, [pc, #76]	; (8002bc8 <HAL_ADC_ConfigChannel+0x134>)
 8002b7a:	400a      	ands	r2, r1
 8002b7c:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	2380      	movs	r3, #128	; 0x80
 8002b84:	029b      	lsls	r3, r3, #10
 8002b86:	4013      	ands	r3, r2
 8002b88:	d005      	beq.n	8002b96 <HAL_ADC_ConfigChannel+0x102>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8002b8a:	4b0e      	ldr	r3, [pc, #56]	; (8002bc4 <HAL_ADC_ConfigChannel+0x130>)
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	4b0d      	ldr	r3, [pc, #52]	; (8002bc4 <HAL_ADC_ConfigChannel+0x130>)
 8002b90:	490e      	ldr	r1, [pc, #56]	; (8002bcc <HAL_ADC_ConfigChannel+0x138>)
 8002b92:	400a      	ands	r2, r1
 8002b94:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	2380      	movs	r3, #128	; 0x80
 8002b9c:	025b      	lsls	r3, r3, #9
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	d005      	beq.n	8002bae <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR &= ~ADC_CCR_VLCDEN;   
 8002ba2:	4b08      	ldr	r3, [pc, #32]	; (8002bc4 <HAL_ADC_ConfigChannel+0x130>)
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	4b07      	ldr	r3, [pc, #28]	; (8002bc4 <HAL_ADC_ConfigChannel+0x130>)
 8002ba8:	4909      	ldr	r1, [pc, #36]	; (8002bd0 <HAL_ADC_ConfigChannel+0x13c>)
 8002baa:	400a      	ands	r2, r1
 8002bac:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2250      	movs	r2, #80	; 0x50
 8002bb2:	2100      	movs	r1, #0
 8002bb4:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 8002bb6:	2300      	movs	r3, #0
}
 8002bb8:	0018      	movs	r0, r3
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	b002      	add	sp, #8
 8002bbe:	bd80      	pop	{r7, pc}
 8002bc0:	00001001 	.word	0x00001001
 8002bc4:	40012708 	.word	0x40012708
 8002bc8:	ff7fffff 	.word	0xff7fffff
 8002bcc:	ffbfffff 	.word	0xffbfffff
 8002bd0:	feffffff 	.word	0xfeffffff

08002bd4 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b084      	sub	sp, #16
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8002bdc:	4b0a      	ldr	r3, [pc, #40]	; (8002c08 <ADC_DelayMicroSecond+0x34>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	490a      	ldr	r1, [pc, #40]	; (8002c0c <ADC_DelayMicroSecond+0x38>)
 8002be2:	0018      	movs	r0, r3
 8002be4:	f7fd fa90 	bl	8000108 <__udivsi3>
 8002be8:	0003      	movs	r3, r0
 8002bea:	001a      	movs	r2, r3
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	4353      	muls	r3, r2
 8002bf0:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 8002bf2:	e002      	b.n	8002bfa <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	3b01      	subs	r3, #1
 8002bf8:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d1f9      	bne.n	8002bf4 <ADC_DelayMicroSecond+0x20>
  } 
}
 8002c00:	46c0      	nop			; (mov r8, r8)
 8002c02:	46bd      	mov	sp, r7
 8002c04:	b004      	add	sp, #16
 8002c06:	bd80      	pop	{r7, pc}
 8002c08:	20000000 	.word	0x20000000
 8002c0c:	000f4240 	.word	0x000f4240

08002c10 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b082      	sub	sp, #8
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	0002      	movs	r2, r0
 8002c18:	1dfb      	adds	r3, r7, #7
 8002c1a:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002c1c:	1dfb      	adds	r3, r7, #7
 8002c1e:	781b      	ldrb	r3, [r3, #0]
 8002c20:	001a      	movs	r2, r3
 8002c22:	231f      	movs	r3, #31
 8002c24:	401a      	ands	r2, r3
 8002c26:	4b04      	ldr	r3, [pc, #16]	; (8002c38 <NVIC_EnableIRQ+0x28>)
 8002c28:	2101      	movs	r1, #1
 8002c2a:	4091      	lsls	r1, r2
 8002c2c:	000a      	movs	r2, r1
 8002c2e:	601a      	str	r2, [r3, #0]
}
 8002c30:	46c0      	nop			; (mov r8, r8)
 8002c32:	46bd      	mov	sp, r7
 8002c34:	b002      	add	sp, #8
 8002c36:	bd80      	pop	{r7, pc}
 8002c38:	e000e100 	.word	0xe000e100

08002c3c <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c3c:	b590      	push	{r4, r7, lr}
 8002c3e:	b083      	sub	sp, #12
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	0002      	movs	r2, r0
 8002c44:	6039      	str	r1, [r7, #0]
 8002c46:	1dfb      	adds	r3, r7, #7
 8002c48:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 8002c4a:	1dfb      	adds	r3, r7, #7
 8002c4c:	781b      	ldrb	r3, [r3, #0]
 8002c4e:	2b7f      	cmp	r3, #127	; 0x7f
 8002c50:	d932      	bls.n	8002cb8 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002c52:	4a2f      	ldr	r2, [pc, #188]	; (8002d10 <NVIC_SetPriority+0xd4>)
 8002c54:	1dfb      	adds	r3, r7, #7
 8002c56:	781b      	ldrb	r3, [r3, #0]
 8002c58:	0019      	movs	r1, r3
 8002c5a:	230f      	movs	r3, #15
 8002c5c:	400b      	ands	r3, r1
 8002c5e:	3b08      	subs	r3, #8
 8002c60:	089b      	lsrs	r3, r3, #2
 8002c62:	3306      	adds	r3, #6
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	18d3      	adds	r3, r2, r3
 8002c68:	3304      	adds	r3, #4
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	1dfa      	adds	r2, r7, #7
 8002c6e:	7812      	ldrb	r2, [r2, #0]
 8002c70:	0011      	movs	r1, r2
 8002c72:	2203      	movs	r2, #3
 8002c74:	400a      	ands	r2, r1
 8002c76:	00d2      	lsls	r2, r2, #3
 8002c78:	21ff      	movs	r1, #255	; 0xff
 8002c7a:	4091      	lsls	r1, r2
 8002c7c:	000a      	movs	r2, r1
 8002c7e:	43d2      	mvns	r2, r2
 8002c80:	401a      	ands	r2, r3
 8002c82:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	019b      	lsls	r3, r3, #6
 8002c88:	22ff      	movs	r2, #255	; 0xff
 8002c8a:	401a      	ands	r2, r3
 8002c8c:	1dfb      	adds	r3, r7, #7
 8002c8e:	781b      	ldrb	r3, [r3, #0]
 8002c90:	0018      	movs	r0, r3
 8002c92:	2303      	movs	r3, #3
 8002c94:	4003      	ands	r3, r0
 8002c96:	00db      	lsls	r3, r3, #3
 8002c98:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002c9a:	481d      	ldr	r0, [pc, #116]	; (8002d10 <NVIC_SetPriority+0xd4>)
 8002c9c:	1dfb      	adds	r3, r7, #7
 8002c9e:	781b      	ldrb	r3, [r3, #0]
 8002ca0:	001c      	movs	r4, r3
 8002ca2:	230f      	movs	r3, #15
 8002ca4:	4023      	ands	r3, r4
 8002ca6:	3b08      	subs	r3, #8
 8002ca8:	089b      	lsrs	r3, r3, #2
 8002caa:	430a      	orrs	r2, r1
 8002cac:	3306      	adds	r3, #6
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	18c3      	adds	r3, r0, r3
 8002cb2:	3304      	adds	r3, #4
 8002cb4:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002cb6:	e027      	b.n	8002d08 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002cb8:	4a16      	ldr	r2, [pc, #88]	; (8002d14 <NVIC_SetPriority+0xd8>)
 8002cba:	1dfb      	adds	r3, r7, #7
 8002cbc:	781b      	ldrb	r3, [r3, #0]
 8002cbe:	b25b      	sxtb	r3, r3
 8002cc0:	089b      	lsrs	r3, r3, #2
 8002cc2:	33c0      	adds	r3, #192	; 0xc0
 8002cc4:	009b      	lsls	r3, r3, #2
 8002cc6:	589b      	ldr	r3, [r3, r2]
 8002cc8:	1dfa      	adds	r2, r7, #7
 8002cca:	7812      	ldrb	r2, [r2, #0]
 8002ccc:	0011      	movs	r1, r2
 8002cce:	2203      	movs	r2, #3
 8002cd0:	400a      	ands	r2, r1
 8002cd2:	00d2      	lsls	r2, r2, #3
 8002cd4:	21ff      	movs	r1, #255	; 0xff
 8002cd6:	4091      	lsls	r1, r2
 8002cd8:	000a      	movs	r2, r1
 8002cda:	43d2      	mvns	r2, r2
 8002cdc:	401a      	ands	r2, r3
 8002cde:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	019b      	lsls	r3, r3, #6
 8002ce4:	22ff      	movs	r2, #255	; 0xff
 8002ce6:	401a      	ands	r2, r3
 8002ce8:	1dfb      	adds	r3, r7, #7
 8002cea:	781b      	ldrb	r3, [r3, #0]
 8002cec:	0018      	movs	r0, r3
 8002cee:	2303      	movs	r3, #3
 8002cf0:	4003      	ands	r3, r0
 8002cf2:	00db      	lsls	r3, r3, #3
 8002cf4:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002cf6:	4807      	ldr	r0, [pc, #28]	; (8002d14 <NVIC_SetPriority+0xd8>)
 8002cf8:	1dfb      	adds	r3, r7, #7
 8002cfa:	781b      	ldrb	r3, [r3, #0]
 8002cfc:	b25b      	sxtb	r3, r3
 8002cfe:	089b      	lsrs	r3, r3, #2
 8002d00:	430a      	orrs	r2, r1
 8002d02:	33c0      	adds	r3, #192	; 0xc0
 8002d04:	009b      	lsls	r3, r3, #2
 8002d06:	501a      	str	r2, [r3, r0]
}
 8002d08:	46c0      	nop			; (mov r8, r8)
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	b003      	add	sp, #12
 8002d0e:	bd90      	pop	{r4, r7, pc}
 8002d10:	e000ed00 	.word	0xe000ed00
 8002d14:	e000e100 	.word	0xe000e100

08002d18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b082      	sub	sp, #8
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	3b01      	subs	r3, #1
 8002d24:	4a0c      	ldr	r2, [pc, #48]	; (8002d58 <SysTick_Config+0x40>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d901      	bls.n	8002d2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e010      	b.n	8002d50 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d2e:	4b0b      	ldr	r3, [pc, #44]	; (8002d5c <SysTick_Config+0x44>)
 8002d30:	687a      	ldr	r2, [r7, #4]
 8002d32:	3a01      	subs	r2, #1
 8002d34:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d36:	2301      	movs	r3, #1
 8002d38:	425b      	negs	r3, r3
 8002d3a:	2103      	movs	r1, #3
 8002d3c:	0018      	movs	r0, r3
 8002d3e:	f7ff ff7d 	bl	8002c3c <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d42:	4b06      	ldr	r3, [pc, #24]	; (8002d5c <SysTick_Config+0x44>)
 8002d44:	2200      	movs	r2, #0
 8002d46:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d48:	4b04      	ldr	r3, [pc, #16]	; (8002d5c <SysTick_Config+0x44>)
 8002d4a:	2207      	movs	r2, #7
 8002d4c:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d4e:	2300      	movs	r3, #0
}
 8002d50:	0018      	movs	r0, r3
 8002d52:	46bd      	mov	sp, r7
 8002d54:	b002      	add	sp, #8
 8002d56:	bd80      	pop	{r7, pc}
 8002d58:	00ffffff 	.word	0x00ffffff
 8002d5c:	e000e010 	.word	0xe000e010

08002d60 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b084      	sub	sp, #16
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	60b9      	str	r1, [r7, #8]
 8002d68:	607a      	str	r2, [r7, #4]
 8002d6a:	210f      	movs	r1, #15
 8002d6c:	187b      	adds	r3, r7, r1
 8002d6e:	1c02      	adds	r2, r0, #0
 8002d70:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002d72:	68ba      	ldr	r2, [r7, #8]
 8002d74:	187b      	adds	r3, r7, r1
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	b25b      	sxtb	r3, r3
 8002d7a:	0011      	movs	r1, r2
 8002d7c:	0018      	movs	r0, r3
 8002d7e:	f7ff ff5d 	bl	8002c3c <NVIC_SetPriority>
}
 8002d82:	46c0      	nop			; (mov r8, r8)
 8002d84:	46bd      	mov	sp, r7
 8002d86:	b004      	add	sp, #16
 8002d88:	bd80      	pop	{r7, pc}

08002d8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d8a:	b580      	push	{r7, lr}
 8002d8c:	b082      	sub	sp, #8
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	0002      	movs	r2, r0
 8002d92:	1dfb      	adds	r3, r7, #7
 8002d94:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d96:	1dfb      	adds	r3, r7, #7
 8002d98:	781b      	ldrb	r3, [r3, #0]
 8002d9a:	b25b      	sxtb	r3, r3
 8002d9c:	0018      	movs	r0, r3
 8002d9e:	f7ff ff37 	bl	8002c10 <NVIC_EnableIRQ>
}
 8002da2:	46c0      	nop			; (mov r8, r8)
 8002da4:	46bd      	mov	sp, r7
 8002da6:	b002      	add	sp, #8
 8002da8:	bd80      	pop	{r7, pc}

08002daa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002daa:	b580      	push	{r7, lr}
 8002dac:	b082      	sub	sp, #8
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	0018      	movs	r0, r3
 8002db6:	f7ff ffaf 	bl	8002d18 <SysTick_Config>
 8002dba:	0003      	movs	r3, r0
}
 8002dbc:	0018      	movs	r0, r3
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	b002      	add	sp, #8
 8002dc2:	bd80      	pop	{r7, pc}

08002dc4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b084      	sub	sp, #16
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d101      	bne.n	8002dd6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e061      	b.n	8002e9a <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a32      	ldr	r2, [pc, #200]	; (8002ea4 <HAL_DMA_Init+0xe0>)
 8002ddc:	4694      	mov	ip, r2
 8002dde:	4463      	add	r3, ip
 8002de0:	2114      	movs	r1, #20
 8002de2:	0018      	movs	r0, r3
 8002de4:	f7fd f990 	bl	8000108 <__udivsi3>
 8002de8:	0003      	movs	r3, r0
 8002dea:	009a      	lsls	r2, r3, #2
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	4a2d      	ldr	r2, [pc, #180]	; (8002ea8 <HAL_DMA_Init+0xe4>)
 8002df4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2225      	movs	r2, #37	; 0x25
 8002dfa:	2102      	movs	r1, #2
 8002dfc:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	4a28      	ldr	r2, [pc, #160]	; (8002eac <HAL_DMA_Init+0xe8>)
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002e16:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	691b      	ldr	r3, [r3, #16]
 8002e1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e22:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	699b      	ldr	r3, [r3, #24]
 8002e28:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e2e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6a1b      	ldr	r3, [r3, #32]
 8002e34:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002e36:	68fa      	ldr	r2, [r7, #12]
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	68fa      	ldr	r2, [r7, #12]
 8002e42:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	689a      	ldr	r2, [r3, #8]
 8002e48:	2380      	movs	r3, #128	; 0x80
 8002e4a:	01db      	lsls	r3, r3, #7
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d018      	beq.n	8002e82 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002e50:	4b17      	ldr	r3, [pc, #92]	; (8002eb0 <HAL_DMA_Init+0xec>)
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e58:	211c      	movs	r1, #28
 8002e5a:	400b      	ands	r3, r1
 8002e5c:	210f      	movs	r1, #15
 8002e5e:	4099      	lsls	r1, r3
 8002e60:	000b      	movs	r3, r1
 8002e62:	43d9      	mvns	r1, r3
 8002e64:	4b12      	ldr	r3, [pc, #72]	; (8002eb0 <HAL_DMA_Init+0xec>)
 8002e66:	400a      	ands	r2, r1
 8002e68:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002e6a:	4b11      	ldr	r3, [pc, #68]	; (8002eb0 <HAL_DMA_Init+0xec>)
 8002e6c:	6819      	ldr	r1, [r3, #0]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	685a      	ldr	r2, [r3, #4]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e76:	201c      	movs	r0, #28
 8002e78:	4003      	ands	r3, r0
 8002e7a:	409a      	lsls	r2, r3
 8002e7c:	4b0c      	ldr	r3, [pc, #48]	; (8002eb0 <HAL_DMA_Init+0xec>)
 8002e7e:	430a      	orrs	r2, r1
 8002e80:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2200      	movs	r2, #0
 8002e86:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2225      	movs	r2, #37	; 0x25
 8002e8c:	2101      	movs	r1, #1
 8002e8e:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2224      	movs	r2, #36	; 0x24
 8002e94:	2100      	movs	r1, #0
 8002e96:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002e98:	2300      	movs	r3, #0
}
 8002e9a:	0018      	movs	r0, r3
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	b004      	add	sp, #16
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	46c0      	nop			; (mov r8, r8)
 8002ea4:	bffdfff8 	.word	0xbffdfff8
 8002ea8:	40020000 	.word	0x40020000
 8002eac:	ffff800f 	.word	0xffff800f
 8002eb0:	400200a8 	.word	0x400200a8

08002eb4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b086      	sub	sp, #24
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	60f8      	str	r0, [r7, #12]
 8002ebc:	60b9      	str	r1, [r7, #8]
 8002ebe:	607a      	str	r2, [r7, #4]
 8002ec0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ec2:	2317      	movs	r3, #23
 8002ec4:	18fb      	adds	r3, r7, r3
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2224      	movs	r2, #36	; 0x24
 8002ece:	5c9b      	ldrb	r3, [r3, r2]
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d101      	bne.n	8002ed8 <HAL_DMA_Start_IT+0x24>
 8002ed4:	2302      	movs	r3, #2
 8002ed6:	e04f      	b.n	8002f78 <HAL_DMA_Start_IT+0xc4>
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2224      	movs	r2, #36	; 0x24
 8002edc:	2101      	movs	r1, #1
 8002ede:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2225      	movs	r2, #37	; 0x25
 8002ee4:	5c9b      	ldrb	r3, [r3, r2]
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d13a      	bne.n	8002f62 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2225      	movs	r2, #37	; 0x25
 8002ef0:	2102      	movs	r1, #2
 8002ef2:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	2101      	movs	r1, #1
 8002f06:	438a      	bics	r2, r1
 8002f08:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	687a      	ldr	r2, [r7, #4]
 8002f0e:	68b9      	ldr	r1, [r7, #8]
 8002f10:	68f8      	ldr	r0, [r7, #12]
 8002f12:	f000 f92b 	bl	800316c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d008      	beq.n	8002f30 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	210e      	movs	r1, #14
 8002f2a:	430a      	orrs	r2, r1
 8002f2c:	601a      	str	r2, [r3, #0]
 8002f2e:	e00f      	b.n	8002f50 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	2104      	movs	r1, #4
 8002f3c:	438a      	bics	r2, r1
 8002f3e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	210a      	movs	r1, #10
 8002f4c:	430a      	orrs	r2, r1
 8002f4e:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	2101      	movs	r1, #1
 8002f5c:	430a      	orrs	r2, r1
 8002f5e:	601a      	str	r2, [r3, #0]
 8002f60:	e007      	b.n	8002f72 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	2224      	movs	r2, #36	; 0x24
 8002f66:	2100      	movs	r1, #0
 8002f68:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002f6a:	2317      	movs	r3, #23
 8002f6c:	18fb      	adds	r3, r7, r3
 8002f6e:	2202      	movs	r2, #2
 8002f70:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8002f72:	2317      	movs	r3, #23
 8002f74:	18fb      	adds	r3, r7, r3
 8002f76:	781b      	ldrb	r3, [r3, #0]
}
 8002f78:	0018      	movs	r0, r3
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	b006      	add	sp, #24
 8002f7e:	bd80      	pop	{r7, pc}

08002f80 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b084      	sub	sp, #16
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f88:	230f      	movs	r3, #15
 8002f8a:	18fb      	adds	r3, r7, r3
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2225      	movs	r2, #37	; 0x25
 8002f94:	5c9b      	ldrb	r3, [r3, r2]
 8002f96:	b2db      	uxtb	r3, r3
 8002f98:	2b02      	cmp	r3, #2
 8002f9a:	d007      	beq.n	8002fac <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2204      	movs	r2, #4
 8002fa0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002fa2:	230f      	movs	r3, #15
 8002fa4:	18fb      	adds	r3, r7, r3
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	701a      	strb	r2, [r3, #0]
 8002faa:	e02a      	b.n	8003002 <HAL_DMA_Abort_IT+0x82>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	210e      	movs	r1, #14
 8002fb8:	438a      	bics	r2, r1
 8002fba:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	2101      	movs	r1, #1
 8002fc8:	438a      	bics	r2, r1
 8002fca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fd0:	221c      	movs	r2, #28
 8002fd2:	401a      	ands	r2, r3
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd8:	2101      	movs	r1, #1
 8002fda:	4091      	lsls	r1, r2
 8002fdc:	000a      	movs	r2, r1
 8002fde:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2225      	movs	r2, #37	; 0x25
 8002fe4:	2101      	movs	r1, #1
 8002fe6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2224      	movs	r2, #36	; 0x24
 8002fec:	2100      	movs	r1, #0
 8002fee:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d004      	beq.n	8003002 <HAL_DMA_Abort_IT+0x82>
    {
      hdma->XferAbortCallback(hdma);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ffc:	687a      	ldr	r2, [r7, #4]
 8002ffe:	0010      	movs	r0, r2
 8003000:	4798      	blx	r3
    }
  }
  return status;
 8003002:	230f      	movs	r3, #15
 8003004:	18fb      	adds	r3, r7, r3
 8003006:	781b      	ldrb	r3, [r3, #0]
}
 8003008:	0018      	movs	r0, r3
 800300a:	46bd      	mov	sp, r7
 800300c:	b004      	add	sp, #16
 800300e:	bd80      	pop	{r7, pc}

08003010 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b084      	sub	sp, #16
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800302c:	221c      	movs	r2, #28
 800302e:	4013      	ands	r3, r2
 8003030:	2204      	movs	r2, #4
 8003032:	409a      	lsls	r2, r3
 8003034:	0013      	movs	r3, r2
 8003036:	68fa      	ldr	r2, [r7, #12]
 8003038:	4013      	ands	r3, r2
 800303a:	d026      	beq.n	800308a <HAL_DMA_IRQHandler+0x7a>
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	2204      	movs	r2, #4
 8003040:	4013      	ands	r3, r2
 8003042:	d022      	beq.n	800308a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	2220      	movs	r2, #32
 800304c:	4013      	ands	r3, r2
 800304e:	d107      	bne.n	8003060 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	2104      	movs	r1, #4
 800305c:	438a      	bics	r2, r1
 800305e:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003064:	221c      	movs	r2, #28
 8003066:	401a      	ands	r2, r3
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306c:	2104      	movs	r1, #4
 800306e:	4091      	lsls	r1, r2
 8003070:	000a      	movs	r2, r1
 8003072:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003078:	2b00      	cmp	r3, #0
 800307a:	d100      	bne.n	800307e <HAL_DMA_IRQHandler+0x6e>
 800307c:	e071      	b.n	8003162 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	0010      	movs	r0, r2
 8003086:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8003088:	e06b      	b.n	8003162 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800308e:	221c      	movs	r2, #28
 8003090:	4013      	ands	r3, r2
 8003092:	2202      	movs	r2, #2
 8003094:	409a      	lsls	r2, r3
 8003096:	0013      	movs	r3, r2
 8003098:	68fa      	ldr	r2, [r7, #12]
 800309a:	4013      	ands	r3, r2
 800309c:	d02d      	beq.n	80030fa <HAL_DMA_IRQHandler+0xea>
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	2202      	movs	r2, #2
 80030a2:	4013      	ands	r3, r2
 80030a4:	d029      	beq.n	80030fa <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	2220      	movs	r2, #32
 80030ae:	4013      	ands	r3, r2
 80030b0:	d10b      	bne.n	80030ca <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	210a      	movs	r1, #10
 80030be:	438a      	bics	r2, r1
 80030c0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2225      	movs	r2, #37	; 0x25
 80030c6:	2101      	movs	r1, #1
 80030c8:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ce:	221c      	movs	r2, #28
 80030d0:	401a      	ands	r2, r3
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d6:	2102      	movs	r1, #2
 80030d8:	4091      	lsls	r1, r2
 80030da:	000a      	movs	r2, r1
 80030dc:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2224      	movs	r2, #36	; 0x24
 80030e2:	2100      	movs	r1, #0
 80030e4:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d039      	beq.n	8003162 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030f2:	687a      	ldr	r2, [r7, #4]
 80030f4:	0010      	movs	r0, r2
 80030f6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80030f8:	e033      	b.n	8003162 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030fe:	221c      	movs	r2, #28
 8003100:	4013      	ands	r3, r2
 8003102:	2208      	movs	r2, #8
 8003104:	409a      	lsls	r2, r3
 8003106:	0013      	movs	r3, r2
 8003108:	68fa      	ldr	r2, [r7, #12]
 800310a:	4013      	ands	r3, r2
 800310c:	d02a      	beq.n	8003164 <HAL_DMA_IRQHandler+0x154>
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	2208      	movs	r2, #8
 8003112:	4013      	ands	r3, r2
 8003114:	d026      	beq.n	8003164 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	210e      	movs	r1, #14
 8003122:	438a      	bics	r2, r1
 8003124:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800312a:	221c      	movs	r2, #28
 800312c:	401a      	ands	r2, r3
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003132:	2101      	movs	r1, #1
 8003134:	4091      	lsls	r1, r2
 8003136:	000a      	movs	r2, r1
 8003138:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2201      	movs	r2, #1
 800313e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2225      	movs	r2, #37	; 0x25
 8003144:	2101      	movs	r1, #1
 8003146:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2224      	movs	r2, #36	; 0x24
 800314c:	2100      	movs	r1, #0
 800314e:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003154:	2b00      	cmp	r3, #0
 8003156:	d005      	beq.n	8003164 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800315c:	687a      	ldr	r2, [r7, #4]
 800315e:	0010      	movs	r0, r2
 8003160:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003162:	46c0      	nop			; (mov r8, r8)
 8003164:	46c0      	nop			; (mov r8, r8)
}
 8003166:	46bd      	mov	sp, r7
 8003168:	b004      	add	sp, #16
 800316a:	bd80      	pop	{r7, pc}

0800316c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b084      	sub	sp, #16
 8003170:	af00      	add	r7, sp, #0
 8003172:	60f8      	str	r0, [r7, #12]
 8003174:	60b9      	str	r1, [r7, #8]
 8003176:	607a      	str	r2, [r7, #4]
 8003178:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800317e:	221c      	movs	r2, #28
 8003180:	401a      	ands	r2, r3
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003186:	2101      	movs	r1, #1
 8003188:	4091      	lsls	r1, r2
 800318a:	000a      	movs	r2, r1
 800318c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	683a      	ldr	r2, [r7, #0]
 8003194:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	2b10      	cmp	r3, #16
 800319c:	d108      	bne.n	80031b0 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	687a      	ldr	r2, [r7, #4]
 80031a4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	68ba      	ldr	r2, [r7, #8]
 80031ac:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80031ae:	e007      	b.n	80031c0 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	68ba      	ldr	r2, [r7, #8]
 80031b6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	687a      	ldr	r2, [r7, #4]
 80031be:	60da      	str	r2, [r3, #12]
}
 80031c0:	46c0      	nop			; (mov r8, r8)
 80031c2:	46bd      	mov	sp, r7
 80031c4:	b004      	add	sp, #16
 80031c6:	bd80      	pop	{r7, pc}

080031c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b086      	sub	sp, #24
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
 80031d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80031d2:	2300      	movs	r3, #0
 80031d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80031d6:	2300      	movs	r3, #0
 80031d8:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80031da:	2300      	movs	r3, #0
 80031dc:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,(GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80031de:	e155      	b.n	800348c <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	2101      	movs	r1, #1
 80031e6:	697a      	ldr	r2, [r7, #20]
 80031e8:	4091      	lsls	r1, r2
 80031ea:	000a      	movs	r2, r1
 80031ec:	4013      	ands	r3, r2
 80031ee:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d100      	bne.n	80031f8 <HAL_GPIO_Init+0x30>
 80031f6:	e146      	b.n	8003486 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	2b02      	cmp	r3, #2
 80031fe:	d003      	beq.n	8003208 <HAL_GPIO_Init+0x40>
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	2b12      	cmp	r3, #18
 8003206:	d123      	bne.n	8003250 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3U];
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	08da      	lsrs	r2, r3, #3
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	3208      	adds	r2, #8
 8003210:	0092      	lsls	r2, r2, #2
 8003212:	58d3      	ldr	r3, [r2, r3]
 8003214:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	2207      	movs	r2, #7
 800321a:	4013      	ands	r3, r2
 800321c:	009b      	lsls	r3, r3, #2
 800321e:	220f      	movs	r2, #15
 8003220:	409a      	lsls	r2, r3
 8003222:	0013      	movs	r3, r2
 8003224:	43da      	mvns	r2, r3
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	4013      	ands	r3, r2
 800322a:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	691a      	ldr	r2, [r3, #16]
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	2107      	movs	r1, #7
 8003234:	400b      	ands	r3, r1
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	409a      	lsls	r2, r3
 800323a:	0013      	movs	r3, r2
 800323c:	693a      	ldr	r2, [r7, #16]
 800323e:	4313      	orrs	r3, r2
 8003240:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	08da      	lsrs	r2, r3, #3
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	3208      	adds	r2, #8
 800324a:	0092      	lsls	r2, r2, #2
 800324c:	6939      	ldr	r1, [r7, #16]
 800324e:	50d1      	str	r1, [r2, r3]
      } 

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	2b01      	cmp	r3, #1
 8003256:	d00b      	beq.n	8003270 <HAL_GPIO_Init+0xa8>
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	2b02      	cmp	r3, #2
 800325e:	d007      	beq.n	8003270 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003264:	2b11      	cmp	r3, #17
 8003266:	d003      	beq.n	8003270 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	2b12      	cmp	r3, #18
 800326e:	d130      	bne.n	80032d2 <HAL_GPIO_Init+0x10a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	005b      	lsls	r3, r3, #1
 800327a:	2203      	movs	r2, #3
 800327c:	409a      	lsls	r2, r3
 800327e:	0013      	movs	r3, r2
 8003280:	43da      	mvns	r2, r3
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	4013      	ands	r3, r2
 8003286:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	68da      	ldr	r2, [r3, #12]
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	005b      	lsls	r3, r3, #1
 8003290:	409a      	lsls	r2, r3
 8003292:	0013      	movs	r3, r2
 8003294:	693a      	ldr	r2, [r7, #16]
 8003296:	4313      	orrs	r3, r2
 8003298:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	693a      	ldr	r2, [r7, #16]
 800329e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp= GPIOx->OTYPER;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80032a6:	2201      	movs	r2, #1
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	409a      	lsls	r2, r3
 80032ac:	0013      	movs	r3, r2
 80032ae:	43da      	mvns	r2, r3
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	4013      	ands	r3, r2
 80032b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	091b      	lsrs	r3, r3, #4
 80032bc:	2201      	movs	r2, #1
 80032be:	401a      	ands	r2, r3
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	409a      	lsls	r2, r3
 80032c4:	0013      	movs	r3, r2
 80032c6:	693a      	ldr	r2, [r7, #16]
 80032c8:	4313      	orrs	r3, r2
 80032ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	693a      	ldr	r2, [r7, #16]
 80032d0:	605a      	str	r2, [r3, #4]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	005b      	lsls	r3, r3, #1
 80032dc:	2203      	movs	r2, #3
 80032de:	409a      	lsls	r2, r3
 80032e0:	0013      	movs	r3, r2
 80032e2:	43da      	mvns	r2, r3
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	4013      	ands	r3, r2
 80032e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	2203      	movs	r2, #3
 80032f0:	401a      	ands	r2, r3
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	005b      	lsls	r3, r3, #1
 80032f6:	409a      	lsls	r2, r3
 80032f8:	0013      	movs	r3, r2
 80032fa:	693a      	ldr	r2, [r7, #16]
 80032fc:	4313      	orrs	r3, r2
 80032fe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	693a      	ldr	r2, [r7, #16]
 8003304:	601a      	str	r2, [r3, #0]

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	68db      	ldr	r3, [r3, #12]
 800330a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	005b      	lsls	r3, r3, #1
 8003310:	2203      	movs	r2, #3
 8003312:	409a      	lsls	r2, r3
 8003314:	0013      	movs	r3, r2
 8003316:	43da      	mvns	r2, r3
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	4013      	ands	r3, r2
 800331c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	689a      	ldr	r2, [r3, #8]
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	005b      	lsls	r3, r3, #1
 8003326:	409a      	lsls	r2, r3
 8003328:	0013      	movs	r3, r2
 800332a:	693a      	ldr	r2, [r7, #16]
 800332c:	4313      	orrs	r3, r2
 800332e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	693a      	ldr	r2, [r7, #16]
 8003334:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	685a      	ldr	r2, [r3, #4]
 800333a:	2380      	movs	r3, #128	; 0x80
 800333c:	055b      	lsls	r3, r3, #21
 800333e:	4013      	ands	r3, r2
 8003340:	d100      	bne.n	8003344 <HAL_GPIO_Init+0x17c>
 8003342:	e0a0      	b.n	8003486 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003344:	4b57      	ldr	r3, [pc, #348]	; (80034a4 <HAL_GPIO_Init+0x2dc>)
 8003346:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003348:	4b56      	ldr	r3, [pc, #344]	; (80034a4 <HAL_GPIO_Init+0x2dc>)
 800334a:	2101      	movs	r1, #1
 800334c:	430a      	orrs	r2, r1
 800334e:	635a      	str	r2, [r3, #52]	; 0x34
        
        temp = SYSCFG->EXTICR[position >> 2U];
 8003350:	4a55      	ldr	r2, [pc, #340]	; (80034a8 <HAL_GPIO_Init+0x2e0>)
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	089b      	lsrs	r3, r3, #2
 8003356:	3302      	adds	r3, #2
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	589b      	ldr	r3, [r3, r2]
 800335c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	2203      	movs	r2, #3
 8003362:	4013      	ands	r3, r2
 8003364:	009b      	lsls	r3, r3, #2
 8003366:	220f      	movs	r2, #15
 8003368:	409a      	lsls	r2, r3
 800336a:	0013      	movs	r3, r2
 800336c:	43da      	mvns	r2, r3
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	4013      	ands	r3, r2
 8003372:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003374:	687a      	ldr	r2, [r7, #4]
 8003376:	23a0      	movs	r3, #160	; 0xa0
 8003378:	05db      	lsls	r3, r3, #23
 800337a:	429a      	cmp	r2, r3
 800337c:	d01f      	beq.n	80033be <HAL_GPIO_Init+0x1f6>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	4a4a      	ldr	r2, [pc, #296]	; (80034ac <HAL_GPIO_Init+0x2e4>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d019      	beq.n	80033ba <HAL_GPIO_Init+0x1f2>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	4a49      	ldr	r2, [pc, #292]	; (80034b0 <HAL_GPIO_Init+0x2e8>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d013      	beq.n	80033b6 <HAL_GPIO_Init+0x1ee>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	4a48      	ldr	r2, [pc, #288]	; (80034b4 <HAL_GPIO_Init+0x2ec>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d00d      	beq.n	80033b2 <HAL_GPIO_Init+0x1ea>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	4a47      	ldr	r2, [pc, #284]	; (80034b8 <HAL_GPIO_Init+0x2f0>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d007      	beq.n	80033ae <HAL_GPIO_Init+0x1e6>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	4a46      	ldr	r2, [pc, #280]	; (80034bc <HAL_GPIO_Init+0x2f4>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d101      	bne.n	80033aa <HAL_GPIO_Init+0x1e2>
 80033a6:	2305      	movs	r3, #5
 80033a8:	e00a      	b.n	80033c0 <HAL_GPIO_Init+0x1f8>
 80033aa:	2306      	movs	r3, #6
 80033ac:	e008      	b.n	80033c0 <HAL_GPIO_Init+0x1f8>
 80033ae:	2304      	movs	r3, #4
 80033b0:	e006      	b.n	80033c0 <HAL_GPIO_Init+0x1f8>
 80033b2:	2303      	movs	r3, #3
 80033b4:	e004      	b.n	80033c0 <HAL_GPIO_Init+0x1f8>
 80033b6:	2302      	movs	r3, #2
 80033b8:	e002      	b.n	80033c0 <HAL_GPIO_Init+0x1f8>
 80033ba:	2301      	movs	r3, #1
 80033bc:	e000      	b.n	80033c0 <HAL_GPIO_Init+0x1f8>
 80033be:	2300      	movs	r3, #0
 80033c0:	697a      	ldr	r2, [r7, #20]
 80033c2:	2103      	movs	r1, #3
 80033c4:	400a      	ands	r2, r1
 80033c6:	0092      	lsls	r2, r2, #2
 80033c8:	4093      	lsls	r3, r2
 80033ca:	693a      	ldr	r2, [r7, #16]
 80033cc:	4313      	orrs	r3, r2
 80033ce:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80033d0:	4935      	ldr	r1, [pc, #212]	; (80034a8 <HAL_GPIO_Init+0x2e0>)
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	089b      	lsrs	r3, r3, #2
 80033d6:	3302      	adds	r3, #2
 80033d8:	009b      	lsls	r3, r3, #2
 80033da:	693a      	ldr	r2, [r7, #16]
 80033dc:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80033de:	4b38      	ldr	r3, [pc, #224]	; (80034c0 <HAL_GPIO_Init+0x2f8>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	43da      	mvns	r2, r3
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	4013      	ands	r3, r2
 80033ec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	685a      	ldr	r2, [r3, #4]
 80033f2:	2380      	movs	r3, #128	; 0x80
 80033f4:	025b      	lsls	r3, r3, #9
 80033f6:	4013      	ands	r3, r2
 80033f8:	d003      	beq.n	8003402 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 80033fa:	693a      	ldr	r2, [r7, #16]
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	4313      	orrs	r3, r2
 8003400:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003402:	4b2f      	ldr	r3, [pc, #188]	; (80034c0 <HAL_GPIO_Init+0x2f8>)
 8003404:	693a      	ldr	r2, [r7, #16]
 8003406:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8003408:	4b2d      	ldr	r3, [pc, #180]	; (80034c0 <HAL_GPIO_Init+0x2f8>)
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	43da      	mvns	r2, r3
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	4013      	ands	r3, r2
 8003416:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	685a      	ldr	r2, [r3, #4]
 800341c:	2380      	movs	r3, #128	; 0x80
 800341e:	029b      	lsls	r3, r3, #10
 8003420:	4013      	ands	r3, r2
 8003422:	d003      	beq.n	800342c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8003424:	693a      	ldr	r2, [r7, #16]
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	4313      	orrs	r3, r2
 800342a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800342c:	4b24      	ldr	r3, [pc, #144]	; (80034c0 <HAL_GPIO_Init+0x2f8>)
 800342e:	693a      	ldr	r2, [r7, #16]
 8003430:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003432:	4b23      	ldr	r3, [pc, #140]	; (80034c0 <HAL_GPIO_Init+0x2f8>)
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	43da      	mvns	r2, r3
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	4013      	ands	r3, r2
 8003440:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	685a      	ldr	r2, [r3, #4]
 8003446:	2380      	movs	r3, #128	; 0x80
 8003448:	035b      	lsls	r3, r3, #13
 800344a:	4013      	ands	r3, r2
 800344c:	d003      	beq.n	8003456 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 800344e:	693a      	ldr	r2, [r7, #16]
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	4313      	orrs	r3, r2
 8003454:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003456:	4b1a      	ldr	r3, [pc, #104]	; (80034c0 <HAL_GPIO_Init+0x2f8>)
 8003458:	693a      	ldr	r2, [r7, #16]
 800345a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800345c:	4b18      	ldr	r3, [pc, #96]	; (80034c0 <HAL_GPIO_Init+0x2f8>)
 800345e:	68db      	ldr	r3, [r3, #12]
 8003460:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	43da      	mvns	r2, r3
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	4013      	ands	r3, r2
 800346a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	685a      	ldr	r2, [r3, #4]
 8003470:	2380      	movs	r3, #128	; 0x80
 8003472:	039b      	lsls	r3, r3, #14
 8003474:	4013      	ands	r3, r2
 8003476:	d003      	beq.n	8003480 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8003478:	693a      	ldr	r2, [r7, #16]
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	4313      	orrs	r3, r2
 800347e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003480:	4b0f      	ldr	r3, [pc, #60]	; (80034c0 <HAL_GPIO_Init+0x2f8>)
 8003482:	693a      	ldr	r2, [r7, #16]
 8003484:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	3301      	adds	r3, #1
 800348a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	40da      	lsrs	r2, r3
 8003494:	1e13      	subs	r3, r2, #0
 8003496:	d000      	beq.n	800349a <HAL_GPIO_Init+0x2d2>
 8003498:	e6a2      	b.n	80031e0 <HAL_GPIO_Init+0x18>
  }
}
 800349a:	46c0      	nop			; (mov r8, r8)
 800349c:	46bd      	mov	sp, r7
 800349e:	b006      	add	sp, #24
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	46c0      	nop			; (mov r8, r8)
 80034a4:	40021000 	.word	0x40021000
 80034a8:	40010000 	.word	0x40010000
 80034ac:	50000400 	.word	0x50000400
 80034b0:	50000800 	.word	0x50000800
 80034b4:	50000c00 	.word	0x50000c00
 80034b8:	50001000 	.word	0x50001000
 80034bc:	50001c00 	.word	0x50001c00
 80034c0:	40010400 	.word	0x40010400

080034c4 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b084      	sub	sp, #16
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
 80034cc:	000a      	movs	r2, r1
 80034ce:	1cbb      	adds	r3, r7, #2
 80034d0:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;
  
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  
  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	691b      	ldr	r3, [r3, #16]
 80034d6:	1cba      	adds	r2, r7, #2
 80034d8:	8812      	ldrh	r2, [r2, #0]
 80034da:	4013      	ands	r3, r2
 80034dc:	d004      	beq.n	80034e8 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80034de:	230f      	movs	r3, #15
 80034e0:	18fb      	adds	r3, r7, r3
 80034e2:	2201      	movs	r2, #1
 80034e4:	701a      	strb	r2, [r3, #0]
 80034e6:	e003      	b.n	80034f0 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80034e8:	230f      	movs	r3, #15
 80034ea:	18fb      	adds	r3, r7, r3
 80034ec:	2200      	movs	r2, #0
 80034ee:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80034f0:	230f      	movs	r3, #15
 80034f2:	18fb      	adds	r3, r7, r3
 80034f4:	781b      	ldrb	r3, [r3, #0]
}
 80034f6:	0018      	movs	r0, r3
 80034f8:	46bd      	mov	sp, r7
 80034fa:	b004      	add	sp, #16
 80034fc:	bd80      	pop	{r7, pc}

080034fe <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034fe:	b580      	push	{r7, lr}
 8003500:	b082      	sub	sp, #8
 8003502:	af00      	add	r7, sp, #0
 8003504:	6078      	str	r0, [r7, #4]
 8003506:	0008      	movs	r0, r1
 8003508:	0011      	movs	r1, r2
 800350a:	1cbb      	adds	r3, r7, #2
 800350c:	1c02      	adds	r2, r0, #0
 800350e:	801a      	strh	r2, [r3, #0]
 8003510:	1c7b      	adds	r3, r7, #1
 8003512:	1c0a      	adds	r2, r1, #0
 8003514:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 8003516:	1c7b      	adds	r3, r7, #1
 8003518:	781b      	ldrb	r3, [r3, #0]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d004      	beq.n	8003528 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 800351e:	1cbb      	adds	r3, r7, #2
 8003520:	881a      	ldrh	r2, [r3, #0]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8003526:	e003      	b.n	8003530 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8003528:	1cbb      	adds	r3, r7, #2
 800352a:	881a      	ldrh	r2, [r3, #0]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003530:	46c0      	nop			; (mov r8, r8)
 8003532:	46bd      	mov	sp, r7
 8003534:	b002      	add	sp, #8
 8003536:	bd80      	pop	{r7, pc}

08003538 <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b082      	sub	sp, #8
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	000a      	movs	r2, r1
 8003542:	1cbb      	adds	r3, r7, #2
 8003544:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	695a      	ldr	r2, [r3, #20]
 800354a:	1cbb      	adds	r3, r7, #2
 800354c:	881b      	ldrh	r3, [r3, #0]
 800354e:	405a      	eors	r2, r3
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	615a      	str	r2, [r3, #20]
}
 8003554:	46c0      	nop			; (mov r8, r8)
 8003556:	46bd      	mov	sp, r7
 8003558:	b002      	add	sp, #8
 800355a:	bd80      	pop	{r7, pc}

0800355c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b082      	sub	sp, #8
 8003560:	af00      	add	r7, sp, #0
 8003562:	0002      	movs	r2, r0
 8003564:	1dbb      	adds	r3, r7, #6
 8003566:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 8003568:	4b09      	ldr	r3, [pc, #36]	; (8003590 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800356a:	695b      	ldr	r3, [r3, #20]
 800356c:	1dba      	adds	r2, r7, #6
 800356e:	8812      	ldrh	r2, [r2, #0]
 8003570:	4013      	ands	r3, r2
 8003572:	d008      	beq.n	8003586 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003574:	4b06      	ldr	r3, [pc, #24]	; (8003590 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8003576:	1dba      	adds	r2, r7, #6
 8003578:	8812      	ldrh	r2, [r2, #0]
 800357a:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800357c:	1dbb      	adds	r3, r7, #6
 800357e:	881b      	ldrh	r3, [r3, #0]
 8003580:	0018      	movs	r0, r3
 8003582:	f7fe fb03 	bl	8001b8c <HAL_GPIO_EXTI_Callback>
  }
}
 8003586:	46c0      	nop			; (mov r8, r8)
 8003588:	46bd      	mov	sp, r7
 800358a:	b002      	add	sp, #8
 800358c:	bd80      	pop	{r7, pc}
 800358e:	46c0      	nop			; (mov r8, r8)
 8003590:	40010400 	.word	0x40010400

08003594 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b084      	sub	sp, #16
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d101      	bne.n	80035a6 <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e06c      	b.n	8003680 <HAL_LPTIM_Init+0xec>
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	222e      	movs	r2, #46	; 0x2e
 80035aa:	5c9b      	ldrb	r3, [r3, r2]
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d107      	bne.n	80035c2 <HAL_LPTIM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	222d      	movs	r2, #45	; 0x2d
 80035b6:	2100      	movs	r1, #0
 80035b8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	0018      	movs	r0, r3
 80035be:	f7fe fe65 	bl	800228c <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	222e      	movs	r2, #46	; 0x2e
 80035c6:	2102      	movs	r1, #2
 80035c8:	5499      	strb	r1, [r3, r2]

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	68db      	ldr	r3, [r3, #12]
 80035d0:	60fb      	str	r3, [r7, #12]

  if (((hlptim->Init.Clock.Source) == LPTIM_CLOCKSOURCE_ULPTIM) || ((hlptim->Init.CounterSource) == LPTIM_COUNTERSOURCE_EXTERNAL))
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d005      	beq.n	80035e6 <HAL_LPTIM_Init+0x52>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80035de:	2380      	movs	r3, #128	; 0x80
 80035e0:	041b      	lsls	r3, r3, #16
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d103      	bne.n	80035ee <HAL_LPTIM_Init+0x5a>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	221e      	movs	r2, #30
 80035ea:	4393      	bics	r3, r2
 80035ec:	60fb      	str	r3, [r7, #12]
  }
  if ((hlptim->Init.Trigger.Source) != LPTIM_TRIGSOURCE_SOFTWARE)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	695b      	ldr	r3, [r3, #20]
 80035f2:	4a25      	ldr	r2, [pc, #148]	; (8003688 <HAL_LPTIM_Init+0xf4>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d003      	beq.n	8003600 <HAL_LPTIM_Init+0x6c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	4a24      	ldr	r2, [pc, #144]	; (800368c <HAL_LPTIM_Init+0xf8>)
 80035fc:	4013      	ands	r3, r2
 80035fe:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, CKPOL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_CKPOL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	4a23      	ldr	r2, [pc, #140]	; (8003690 <HAL_LPTIM_Init+0xfc>)
 8003604:	4013      	ands	r3, r2
 8003606:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8003610:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 8003616:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 800361c:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 8003622:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8003624:	68fa      	ldr	r2, [r7, #12]
 8003626:	4313      	orrs	r3, r2
 8003628:	60fb      	str	r3, [r7, #12]

  if (((hlptim->Init.Clock.Source) == LPTIM_CLOCKSOURCE_ULPTIM) || ((hlptim->Init.CounterSource) == LPTIM_COUNTERSOURCE_EXTERNAL))
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	2b01      	cmp	r3, #1
 8003630:	d005      	beq.n	800363e <HAL_LPTIM_Init+0xaa>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003636:	2380      	movs	r3, #128	; 0x80
 8003638:	041b      	lsls	r3, r3, #16
 800363a:	429a      	cmp	r2, r3
 800363c:	d107      	bne.n	800364e <HAL_LPTIM_Init+0xba>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8003646:	4313      	orrs	r3, r2
 8003648:	68fa      	ldr	r2, [r7, #12]
 800364a:	4313      	orrs	r3, r2
 800364c:	60fb      	str	r3, [r7, #12]
  }

  if ((hlptim->Init.Trigger.Source) != LPTIM_TRIGSOURCE_SOFTWARE)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	695b      	ldr	r3, [r3, #20]
 8003652:	4a0d      	ldr	r2, [pc, #52]	; (8003688 <HAL_LPTIM_Init+0xf4>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d00a      	beq.n	800366e <HAL_LPTIM_Init+0xda>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8003660:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8003666:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8003668:	68fa      	ldr	r2, [r7, #12]
 800366a:	4313      	orrs	r3, r2
 800366c:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	68fa      	ldr	r2, [r7, #12]
 8003674:	60da      	str	r2, [r3, #12]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	222e      	movs	r2, #46	; 0x2e
 800367a:	2101      	movs	r1, #1
 800367c:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800367e:	2300      	movs	r3, #0
}
 8003680:	0018      	movs	r0, r3
 8003682:	46bd      	mov	sp, r7
 8003684:	b004      	add	sp, #16
 8003686:	bd80      	pop	{r7, pc}
 8003688:	0000ffff 	.word	0x0000ffff
 800368c:	ffff1f3f 	.word	0xffff1f3f
 8003690:	ff19f1f8 	.word	0xff19f1f8

08003694 <HAL_LPTIM_Counter_Start_IT>:
  * @param  Period Specifies the Autoreload value.
  *         This parameter must be a value between 0x0000 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b082      	sub	sp, #8
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
 800369c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	222e      	movs	r2, #46	; 0x2e
 80036a2:	2102      	movs	r1, #2
 80036a4:	5499      	strb	r1, [r3, r2]

  /* Enable EXTI Line interrupt on the LPTIM Wake-up Timer */
  __HAL_LPTIM_WAKEUPTIMER_EXTI_ENABLE_IT();
 80036a6:	4b23      	ldr	r3, [pc, #140]	; (8003734 <HAL_LPTIM_Counter_Start_IT+0xa0>)
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	4b22      	ldr	r3, [pc, #136]	; (8003734 <HAL_LPTIM_Counter_Start_IT+0xa0>)
 80036ac:	2180      	movs	r1, #128	; 0x80
 80036ae:	0589      	lsls	r1, r1, #22
 80036b0:	430a      	orrs	r2, r1
 80036b2:	601a      	str	r2, [r3, #0]

  /* If clock source is not ULPTIM clock and counter source is external, then it must not be prescaled */
  if ((hlptim->Init.Clock.Source != LPTIM_CLOCKSOURCE_ULPTIM) && (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	d00d      	beq.n	80036d8 <HAL_LPTIM_Counter_Start_IT+0x44>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80036c0:	2380      	movs	r3, #128	; 0x80
 80036c2:	041b      	lsls	r3, r3, #16
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d107      	bne.n	80036d8 <HAL_LPTIM_Counter_Start_IT+0x44>
  {
    /* Check if clock is prescaled */
    assert_param(IS_LPTIM_CLOCK_PRESCALERDIV1(hlptim->Init.Clock.Prescaler));
    /* Set clock prescaler to 0 */
    hlptim->Instance->CFGR &= ~LPTIM_CFGR_PRESC;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	68da      	ldr	r2, [r3, #12]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4919      	ldr	r1, [pc, #100]	; (8003738 <HAL_LPTIM_Counter_Start_IT+0xa4>)
 80036d4:	400a      	ands	r2, r1
 80036d6:	60da      	str	r2, [r3, #12]
  }

  /* Enable Autoreload write complete interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARROK);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	689a      	ldr	r2, [r3, #8]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	2110      	movs	r1, #16
 80036e4:	430a      	orrs	r2, r1
 80036e6:	609a      	str	r2, [r3, #8]

  /* Enable Autoreload match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARRM);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	689a      	ldr	r2, [r3, #8]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	2102      	movs	r1, #2
 80036f4:	430a      	orrs	r2, r1
 80036f6:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	691a      	ldr	r2, [r3, #16]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	2101      	movs	r1, #1
 8003704:	430a      	orrs	r2, r1
 8003706:	611a      	str	r2, [r3, #16]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	683a      	ldr	r2, [r7, #0]
 800370e:	619a      	str	r2, [r3, #24]

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	691a      	ldr	r2, [r3, #16]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	2104      	movs	r1, #4
 800371c:	430a      	orrs	r2, r1
 800371e:	611a      	str	r2, [r3, #16]

  /* Change the TIM state*/
  hlptim->State = HAL_LPTIM_STATE_READY;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	222e      	movs	r2, #46	; 0x2e
 8003724:	2101      	movs	r1, #1
 8003726:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8003728:	2300      	movs	r3, #0
}
 800372a:	0018      	movs	r0, r3
 800372c:	46bd      	mov	sp, r7
 800372e:	b002      	add	sp, #8
 8003730:	bd80      	pop	{r7, pc}
 8003732:	46c0      	nop			; (mov r8, r8)
 8003734:	40010400 	.word	0x40010400
 8003738:	fffff1ff 	.word	0xfffff1ff

0800373c <HAL_LPTIM_Counter_Stop_IT>:
  * @brief  Stop the Counter mode in interrupt mode.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Stop_IT(LPTIM_HandleTypeDef *hlptim)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b082      	sub	sp, #8
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	222e      	movs	r2, #46	; 0x2e
 8003748:	2102      	movs	r1, #2
 800374a:	5499      	strb	r1, [r3, r2]

  /* Disable EXTI Line interrupt on the LPTIM Wake-up Timer */
  __HAL_LPTIM_WAKEUPTIMER_EXTI_DISABLE_IT();
 800374c:	4b11      	ldr	r3, [pc, #68]	; (8003794 <HAL_LPTIM_Counter_Stop_IT+0x58>)
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	4b10      	ldr	r3, [pc, #64]	; (8003794 <HAL_LPTIM_Counter_Stop_IT+0x58>)
 8003752:	4911      	ldr	r1, [pc, #68]	; (8003798 <HAL_LPTIM_Counter_Stop_IT+0x5c>)
 8003754:	400a      	ands	r2, r1
 8003756:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	0018      	movs	r0, r3
 800375c:	f000 f8f0 	bl	8003940 <LPTIM_Disable>

  /* Disable Autoreload write complete interrupt */
  __HAL_LPTIM_DISABLE_IT(hlptim, LPTIM_IT_ARROK);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	689a      	ldr	r2, [r3, #8]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	2110      	movs	r1, #16
 800376c:	438a      	bics	r2, r1
 800376e:	609a      	str	r2, [r3, #8]

  /* Disable Autoreload match interrupt */
  __HAL_LPTIM_DISABLE_IT(hlptim, LPTIM_IT_ARRM);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	689a      	ldr	r2, [r3, #8]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	2102      	movs	r1, #2
 800377c:	438a      	bics	r2, r1
 800377e:	609a      	str	r2, [r3, #8]

  /* Change the TIM state*/
  hlptim->State = HAL_LPTIM_STATE_READY;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	222e      	movs	r2, #46	; 0x2e
 8003784:	2101      	movs	r1, #1
 8003786:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8003788:	2300      	movs	r3, #0
}
 800378a:	0018      	movs	r0, r3
 800378c:	46bd      	mov	sp, r7
 800378e:	b002      	add	sp, #8
 8003790:	bd80      	pop	{r7, pc}
 8003792:	46c0      	nop			; (mov r8, r8)
 8003794:	40010400 	.word	0x40010400
 8003798:	dfffffff 	.word	0xdfffffff

0800379c <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b082      	sub	sp, #8
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	2201      	movs	r2, #1
 80037ac:	4013      	ands	r3, r2
 80037ae:	2b01      	cmp	r3, #1
 80037b0:	d10e      	bne.n	80037d0 <HAL_LPTIM_IRQHandler+0x34>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	2201      	movs	r2, #1
 80037ba:	4013      	ands	r3, r2
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d107      	bne.n	80037d0 <HAL_LPTIM_IRQHandler+0x34>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	2201      	movs	r2, #1
 80037c6:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	0018      	movs	r0, r3
 80037cc:	f000 f888 	bl	80038e0 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	2202      	movs	r2, #2
 80037d8:	4013      	ands	r3, r2
 80037da:	2b02      	cmp	r3, #2
 80037dc:	d10e      	bne.n	80037fc <HAL_LPTIM_IRQHandler+0x60>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	2202      	movs	r2, #2
 80037e6:	4013      	ands	r3, r2
 80037e8:	2b02      	cmp	r3, #2
 80037ea:	d107      	bne.n	80037fc <HAL_LPTIM_IRQHandler+0x60>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	2202      	movs	r2, #2
 80037f2:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	0018      	movs	r0, r3
 80037f8:	f7fe ff0e 	bl	8002618 <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	2204      	movs	r2, #4
 8003804:	4013      	ands	r3, r2
 8003806:	2b04      	cmp	r3, #4
 8003808:	d10e      	bne.n	8003828 <HAL_LPTIM_IRQHandler+0x8c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	2204      	movs	r2, #4
 8003812:	4013      	ands	r3, r2
 8003814:	2b04      	cmp	r3, #4
 8003816:	d107      	bne.n	8003828 <HAL_LPTIM_IRQHandler+0x8c>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	2204      	movs	r2, #4
 800381e:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	0018      	movs	r0, r3
 8003824:	f000 f864 	bl	80038f0 <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	2208      	movs	r2, #8
 8003830:	4013      	ands	r3, r2
 8003832:	2b08      	cmp	r3, #8
 8003834:	d10e      	bne.n	8003854 <HAL_LPTIM_IRQHandler+0xb8>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	2208      	movs	r2, #8
 800383e:	4013      	ands	r3, r2
 8003840:	2b08      	cmp	r3, #8
 8003842:	d107      	bne.n	8003854 <HAL_LPTIM_IRQHandler+0xb8>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	2208      	movs	r2, #8
 800384a:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	0018      	movs	r0, r3
 8003850:	f000 f856 	bl	8003900 <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	2210      	movs	r2, #16
 800385c:	4013      	ands	r3, r2
 800385e:	2b10      	cmp	r3, #16
 8003860:	d10e      	bne.n	8003880 <HAL_LPTIM_IRQHandler+0xe4>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	2210      	movs	r2, #16
 800386a:	4013      	ands	r3, r2
 800386c:	2b10      	cmp	r3, #16
 800386e:	d107      	bne.n	8003880 <HAL_LPTIM_IRQHandler+0xe4>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	2210      	movs	r2, #16
 8003876:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	0018      	movs	r0, r3
 800387c:	f000 f848 	bl	8003910 <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	2220      	movs	r2, #32
 8003888:	4013      	ands	r3, r2
 800388a:	2b20      	cmp	r3, #32
 800388c:	d10e      	bne.n	80038ac <HAL_LPTIM_IRQHandler+0x110>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	2220      	movs	r2, #32
 8003896:	4013      	ands	r3, r2
 8003898:	2b20      	cmp	r3, #32
 800389a:	d107      	bne.n	80038ac <HAL_LPTIM_IRQHandler+0x110>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	2220      	movs	r2, #32
 80038a2:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	0018      	movs	r0, r3
 80038a8:	f000 f83a 	bl	8003920 <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	2240      	movs	r2, #64	; 0x40
 80038b4:	4013      	ands	r3, r2
 80038b6:	2b40      	cmp	r3, #64	; 0x40
 80038b8:	d10e      	bne.n	80038d8 <HAL_LPTIM_IRQHandler+0x13c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	2240      	movs	r2, #64	; 0x40
 80038c2:	4013      	ands	r3, r2
 80038c4:	2b40      	cmp	r3, #64	; 0x40
 80038c6:	d107      	bne.n	80038d8 <HAL_LPTIM_IRQHandler+0x13c>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	2240      	movs	r2, #64	; 0x40
 80038ce:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	0018      	movs	r0, r3
 80038d4:	f000 f82c 	bl	8003930 <HAL_LPTIM_DirectionDownCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 80038d8:	46c0      	nop			; (mov r8, r8)
 80038da:	46bd      	mov	sp, r7
 80038dc:	b002      	add	sp, #8
 80038de:	bd80      	pop	{r7, pc}

080038e0 <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b082      	sub	sp, #8
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 80038e8:	46c0      	nop			; (mov r8, r8)
 80038ea:	46bd      	mov	sp, r7
 80038ec:	b002      	add	sp, #8
 80038ee:	bd80      	pop	{r7, pc}

080038f0 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b082      	sub	sp, #8
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 80038f8:	46c0      	nop			; (mov r8, r8)
 80038fa:	46bd      	mov	sp, r7
 80038fc:	b002      	add	sp, #8
 80038fe:	bd80      	pop	{r7, pc}

08003900 <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b082      	sub	sp, #8
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 8003908:	46c0      	nop			; (mov r8, r8)
 800390a:	46bd      	mov	sp, r7
 800390c:	b002      	add	sp, #8
 800390e:	bd80      	pop	{r7, pc}

08003910 <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b082      	sub	sp, #8
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 8003918:	46c0      	nop			; (mov r8, r8)
 800391a:	46bd      	mov	sp, r7
 800391c:	b002      	add	sp, #8
 800391e:	bd80      	pop	{r7, pc}

08003920 <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b082      	sub	sp, #8
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 8003928:	46c0      	nop			; (mov r8, r8)
 800392a:	46bd      	mov	sp, r7
 800392c:	b002      	add	sp, #8
 800392e:	bd80      	pop	{r7, pc}

08003930 <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b082      	sub	sp, #8
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 8003938:	46c0      	nop			; (mov r8, r8)
 800393a:	46bd      	mov	sp, r7
 800393c:	b002      	add	sp, #8
 800393e:	bd80      	pop	{r7, pc}

08003940 <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *lptim)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b08a      	sub	sp, #40	; 0x28
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 8003948:	2300      	movs	r3, #0
 800394a:	627b      	str	r3, [r7, #36]	; 0x24
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800394c:	b672      	cpsid	i

  __disable_irq();

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)lptim->Instance)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	001a      	movs	r2, r3
 8003954:	4b5e      	ldr	r3, [pc, #376]	; (8003ad0 <LPTIM_Disable+0x190>)
 8003956:	429a      	cmp	r2, r3
 8003958:	d000      	beq.n	800395c <LPTIM_Disable+0x1c>
     case LPTIM2_BASE:
       tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
       break;
#endif /* LPTIM2 */
     default:
       break;
 800395a:	e006      	b.n	800396a <LPTIM_Disable+0x2a>
       tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 800395c:	4b5d      	ldr	r3, [pc, #372]	; (8003ad4 <LPTIM_Disable+0x194>)
 800395e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003960:	23c0      	movs	r3, #192	; 0xc0
 8003962:	031b      	lsls	r3, r3, #12
 8003964:	4013      	ands	r3, r2
 8003966:	627b      	str	r3, [r7, #36]	; 0x24
       break;
 8003968:	46c0      	nop			; (mov r8, r8)
  }

  /* Save LPTIM configuration registers */
  tmpIER = lptim->Instance->IER;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	623b      	str	r3, [r7, #32]
  tmpCFGR = lptim->Instance->CFGR;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	68db      	ldr	r3, [r3, #12]
 8003978:	61fb      	str	r3, [r7, #28]
  tmpCMP = lptim->Instance->CMP;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	695b      	ldr	r3, [r3, #20]
 8003980:	61bb      	str	r3, [r7, #24]
  tmpARR = lptim->Instance->ARR;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	699b      	ldr	r3, [r3, #24]
 8003988:	617b      	str	r3, [r7, #20]

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)lptim->Instance)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	001a      	movs	r2, r3
 8003990:	4b4f      	ldr	r3, [pc, #316]	; (8003ad0 <LPTIM_Disable+0x190>)
 8003992:	429a      	cmp	r2, r3
 8003994:	d000      	beq.n	8003998 <LPTIM_Disable+0x58>
       __HAL_RCC_LPTIM2_FORCE_RESET();
       __HAL_RCC_LPTIM2_RELEASE_RESET();
       break;
#endif /* LPTIM2 */
     default:
       break;
 8003996:	e00d      	b.n	80039b4 <LPTIM_Disable+0x74>
       __HAL_RCC_LPTIM1_FORCE_RESET();
 8003998:	4b4e      	ldr	r3, [pc, #312]	; (8003ad4 <LPTIM_Disable+0x194>)
 800399a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800399c:	4b4d      	ldr	r3, [pc, #308]	; (8003ad4 <LPTIM_Disable+0x194>)
 800399e:	2180      	movs	r1, #128	; 0x80
 80039a0:	0609      	lsls	r1, r1, #24
 80039a2:	430a      	orrs	r2, r1
 80039a4:	629a      	str	r2, [r3, #40]	; 0x28
       __HAL_RCC_LPTIM1_RELEASE_RESET();
 80039a6:	4b4b      	ldr	r3, [pc, #300]	; (8003ad4 <LPTIM_Disable+0x194>)
 80039a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80039aa:	4b4a      	ldr	r3, [pc, #296]	; (8003ad4 <LPTIM_Disable+0x194>)
 80039ac:	0052      	lsls	r2, r2, #1
 80039ae:	0852      	lsrs	r2, r2, #1
 80039b0:	629a      	str	r2, [r3, #40]	; 0x28
       break;
 80039b2:	46c0      	nop			; (mov r8, r8)

  /*********** Restore LPTIM Config ***********/
  uint32_t Ref_Time;
  uint32_t Time_Elapsed;

  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
 80039b4:	69bb      	ldr	r3, [r7, #24]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d103      	bne.n	80039c2 <LPTIM_Disable+0x82>
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d100      	bne.n	80039c2 <LPTIM_Disable+0x82>
 80039c0:	e070      	b.n	8003aa4 <LPTIM_Disable+0x164>
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)lptim->Instance)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	001a      	movs	r2, r3
 80039c8:	4b41      	ldr	r3, [pc, #260]	; (8003ad0 <LPTIM_Disable+0x190>)
 80039ca:	429a      	cmp	r2, r3
 80039cc:	d000      	beq.n	80039d0 <LPTIM_Disable+0x90>
       case LPTIM2_BASE:
         __HAL_RCC_LPTIM2_CONFIG(0UL);
         break;
#endif /* LPTIM2 */
       default:
         break;
 80039ce:	e006      	b.n	80039de <LPTIM_Disable+0x9e>
         __HAL_RCC_LPTIM1_CONFIG(0UL);
 80039d0:	4b40      	ldr	r3, [pc, #256]	; (8003ad4 <LPTIM_Disable+0x194>)
 80039d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80039d4:	4b3f      	ldr	r3, [pc, #252]	; (8003ad4 <LPTIM_Disable+0x194>)
 80039d6:	4940      	ldr	r1, [pc, #256]	; (8003ad8 <LPTIM_Disable+0x198>)
 80039d8:	400a      	ands	r2, r1
 80039da:	64da      	str	r2, [r3, #76]	; 0x4c
         break;
 80039dc:	46c0      	nop			; (mov r8, r8)
    }

    if (tmpCMP != 0UL)
 80039de:	69bb      	ldr	r3, [r7, #24]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d025      	beq.n	8003a30 <LPTIM_Disable+0xf0>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      lptim->Instance->CR |= LPTIM_CR_ENABLE;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	691a      	ldr	r2, [r3, #16]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	2101      	movs	r1, #1
 80039f0:	430a      	orrs	r2, r1
 80039f2:	611a      	str	r2, [r3, #16]
      lptim->Instance->CMP = tmpCMP;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	69ba      	ldr	r2, [r7, #24]
 80039fa:	615a      	str	r2, [r3, #20]
      /* Polling on CMP write ok status after above restore operation */
      Ref_Time = HAL_GetTick();
 80039fc:	f7fe feae 	bl	800275c <HAL_GetTick>
 8003a00:	0003      	movs	r3, r0
 8003a02:	613b      	str	r3, [r7, #16]
      do
      {
        Time_Elapsed = HAL_GetTick() - Ref_Time;
 8003a04:	f7fe feaa 	bl	800275c <HAL_GetTick>
 8003a08:	0002      	movs	r2, r0
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	1ad3      	subs	r3, r2, r3
 8003a0e:	60fb      	str	r3, [r7, #12]
      } while ((!(__HAL_LPTIM_GET_FLAG(lptim, LPTIM_FLAG_CMPOK))) && (Time_Elapsed <= TIMEOUT));
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	2208      	movs	r2, #8
 8003a18:	4013      	ands	r3, r2
 8003a1a:	2b08      	cmp	r3, #8
 8003a1c:	d004      	beq.n	8003a28 <LPTIM_Disable+0xe8>
 8003a1e:	68fa      	ldr	r2, [r7, #12]
 8003a20:	23fa      	movs	r3, #250	; 0xfa
 8003a22:	009b      	lsls	r3, r3, #2
 8003a24:	429a      	cmp	r2, r3
 8003a26:	d9ed      	bls.n	8003a04 <LPTIM_Disable+0xc4>

      __HAL_LPTIM_CLEAR_FLAG(lptim, LPTIM_FLAG_CMPOK);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	2208      	movs	r2, #8
 8003a2e:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d025      	beq.n	8003a82 <LPTIM_Disable+0x142>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      lptim->Instance->CR |= LPTIM_CR_ENABLE;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	691a      	ldr	r2, [r3, #16]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	2101      	movs	r1, #1
 8003a42:	430a      	orrs	r2, r1
 8003a44:	611a      	str	r2, [r3, #16]
      lptim->Instance->ARR = tmpARR;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	697a      	ldr	r2, [r7, #20]
 8003a4c:	619a      	str	r2, [r3, #24]
      /* Polling on ARR write ok status after above restore operation */
      Ref_Time = HAL_GetTick();
 8003a4e:	f7fe fe85 	bl	800275c <HAL_GetTick>
 8003a52:	0003      	movs	r3, r0
 8003a54:	613b      	str	r3, [r7, #16]
      do
      {
        Time_Elapsed = HAL_GetTick() - Ref_Time;
 8003a56:	f7fe fe81 	bl	800275c <HAL_GetTick>
 8003a5a:	0002      	movs	r2, r0
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	1ad3      	subs	r3, r2, r3
 8003a60:	60fb      	str	r3, [r7, #12]
      } while ((!(__HAL_LPTIM_GET_FLAG(lptim, LPTIM_FLAG_ARROK))) && (Time_Elapsed <= TIMEOUT));
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	2210      	movs	r2, #16
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	2b10      	cmp	r3, #16
 8003a6e:	d004      	beq.n	8003a7a <LPTIM_Disable+0x13a>
 8003a70:	68fa      	ldr	r2, [r7, #12]
 8003a72:	23fa      	movs	r3, #250	; 0xfa
 8003a74:	009b      	lsls	r3, r3, #2
 8003a76:	429a      	cmp	r2, r3
 8003a78:	d9ed      	bls.n	8003a56 <LPTIM_Disable+0x116>

      __HAL_LPTIM_CLEAR_FLAG(lptim, LPTIM_FLAG_ARROK);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	2210      	movs	r2, #16
 8003a80:	605a      	str	r2, [r3, #4]
    }

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)lptim->Instance)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	001a      	movs	r2, r3
 8003a88:	4b11      	ldr	r3, [pc, #68]	; (8003ad0 <LPTIM_Disable+0x190>)
 8003a8a:	429a      	cmp	r2, r3
 8003a8c:	d000      	beq.n	8003a90 <LPTIM_Disable+0x150>
       case LPTIM2_BASE:
         __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
         break;
#endif /* LPTIM2 */
       default:
         break;
 8003a8e:	e00a      	b.n	8003aa6 <LPTIM_Disable+0x166>
         __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 8003a90:	4b10      	ldr	r3, [pc, #64]	; (8003ad4 <LPTIM_Disable+0x194>)
 8003a92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a94:	4a10      	ldr	r2, [pc, #64]	; (8003ad8 <LPTIM_Disable+0x198>)
 8003a96:	4013      	ands	r3, r2
 8003a98:	0019      	movs	r1, r3
 8003a9a:	4b0e      	ldr	r3, [pc, #56]	; (8003ad4 <LPTIM_Disable+0x194>)
 8003a9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a9e:	430a      	orrs	r2, r1
 8003aa0:	64da      	str	r2, [r3, #76]	; 0x4c
         break;
 8003aa2:	e000      	b.n	8003aa6 <LPTIM_Disable+0x166>
    }
  }
 8003aa4:	46c0      	nop			; (mov r8, r8)

  /* Restore configuration registers (LPTIM should be disabled first) */
  lptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	691a      	ldr	r2, [r3, #16]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	2101      	movs	r1, #1
 8003ab2:	438a      	bics	r2, r1
 8003ab4:	611a      	str	r2, [r3, #16]
  lptim->Instance->IER = tmpIER;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	6a3a      	ldr	r2, [r7, #32]
 8003abc:	609a      	str	r2, [r3, #8]
  lptim->Instance->CFGR = tmpCFGR;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	69fa      	ldr	r2, [r7, #28]
 8003ac4:	60da      	str	r2, [r3, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 8003ac6:	b662      	cpsie	i

  __enable_irq();
}
 8003ac8:	46c0      	nop			; (mov r8, r8)
 8003aca:	46bd      	mov	sp, r7
 8003acc:	b00a      	add	sp, #40	; 0x28
 8003ace:	bd80      	pop	{r7, pc}
 8003ad0:	40007c00 	.word	0x40007c00
 8003ad4:	40021000 	.word	0x40021000
 8003ad8:	fff3ffff 	.word	0xfff3ffff

08003adc <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ae0:	4b04      	ldr	r3, [pc, #16]	; (8003af4 <HAL_PWR_EnableBkUpAccess+0x18>)
 8003ae2:	681a      	ldr	r2, [r3, #0]
 8003ae4:	4b03      	ldr	r3, [pc, #12]	; (8003af4 <HAL_PWR_EnableBkUpAccess+0x18>)
 8003ae6:	2180      	movs	r1, #128	; 0x80
 8003ae8:	0049      	lsls	r1, r1, #1
 8003aea:	430a      	orrs	r2, r1
 8003aec:	601a      	str	r2, [r3, #0]
}
 8003aee:	46c0      	nop			; (mov r8, r8)
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd80      	pop	{r7, pc}
 8003af4:	40007000 	.word	0x40007000

08003af8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003af8:	b5b0      	push	{r4, r5, r7, lr}
 8003afa:	b08a      	sub	sp, #40	; 0x28
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d102      	bne.n	8003b0c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	f000 fbbc 	bl	8004284 <HAL_RCC_OscConfig+0x78c>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b0c:	4bc8      	ldr	r3, [pc, #800]	; (8003e30 <HAL_RCC_OscConfig+0x338>)
 8003b0e:	68db      	ldr	r3, [r3, #12]
 8003b10:	220c      	movs	r2, #12
 8003b12:	4013      	ands	r3, r2
 8003b14:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003b16:	4bc6      	ldr	r3, [pc, #792]	; (8003e30 <HAL_RCC_OscConfig+0x338>)
 8003b18:	68da      	ldr	r2, [r3, #12]
 8003b1a:	2380      	movs	r3, #128	; 0x80
 8003b1c:	025b      	lsls	r3, r3, #9
 8003b1e:	4013      	ands	r3, r2
 8003b20:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	2201      	movs	r2, #1
 8003b28:	4013      	ands	r3, r2
 8003b2a:	d100      	bne.n	8003b2e <HAL_RCC_OscConfig+0x36>
 8003b2c:	e07e      	b.n	8003c2c <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003b2e:	69fb      	ldr	r3, [r7, #28]
 8003b30:	2b08      	cmp	r3, #8
 8003b32:	d007      	beq.n	8003b44 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003b34:	69fb      	ldr	r3, [r7, #28]
 8003b36:	2b0c      	cmp	r3, #12
 8003b38:	d112      	bne.n	8003b60 <HAL_RCC_OscConfig+0x68>
 8003b3a:	69ba      	ldr	r2, [r7, #24]
 8003b3c:	2380      	movs	r3, #128	; 0x80
 8003b3e:	025b      	lsls	r3, r3, #9
 8003b40:	429a      	cmp	r2, r3
 8003b42:	d10d      	bne.n	8003b60 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b44:	4bba      	ldr	r3, [pc, #744]	; (8003e30 <HAL_RCC_OscConfig+0x338>)
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	2380      	movs	r3, #128	; 0x80
 8003b4a:	029b      	lsls	r3, r3, #10
 8003b4c:	4013      	ands	r3, r2
 8003b4e:	d100      	bne.n	8003b52 <HAL_RCC_OscConfig+0x5a>
 8003b50:	e06b      	b.n	8003c2a <HAL_RCC_OscConfig+0x132>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d167      	bne.n	8003c2a <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	f000 fb92 	bl	8004284 <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	685a      	ldr	r2, [r3, #4]
 8003b64:	2380      	movs	r3, #128	; 0x80
 8003b66:	025b      	lsls	r3, r3, #9
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d107      	bne.n	8003b7c <HAL_RCC_OscConfig+0x84>
 8003b6c:	4bb0      	ldr	r3, [pc, #704]	; (8003e30 <HAL_RCC_OscConfig+0x338>)
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	4baf      	ldr	r3, [pc, #700]	; (8003e30 <HAL_RCC_OscConfig+0x338>)
 8003b72:	2180      	movs	r1, #128	; 0x80
 8003b74:	0249      	lsls	r1, r1, #9
 8003b76:	430a      	orrs	r2, r1
 8003b78:	601a      	str	r2, [r3, #0]
 8003b7a:	e027      	b.n	8003bcc <HAL_RCC_OscConfig+0xd4>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	685a      	ldr	r2, [r3, #4]
 8003b80:	23a0      	movs	r3, #160	; 0xa0
 8003b82:	02db      	lsls	r3, r3, #11
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d10e      	bne.n	8003ba6 <HAL_RCC_OscConfig+0xae>
 8003b88:	4ba9      	ldr	r3, [pc, #676]	; (8003e30 <HAL_RCC_OscConfig+0x338>)
 8003b8a:	681a      	ldr	r2, [r3, #0]
 8003b8c:	4ba8      	ldr	r3, [pc, #672]	; (8003e30 <HAL_RCC_OscConfig+0x338>)
 8003b8e:	2180      	movs	r1, #128	; 0x80
 8003b90:	02c9      	lsls	r1, r1, #11
 8003b92:	430a      	orrs	r2, r1
 8003b94:	601a      	str	r2, [r3, #0]
 8003b96:	4ba6      	ldr	r3, [pc, #664]	; (8003e30 <HAL_RCC_OscConfig+0x338>)
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	4ba5      	ldr	r3, [pc, #660]	; (8003e30 <HAL_RCC_OscConfig+0x338>)
 8003b9c:	2180      	movs	r1, #128	; 0x80
 8003b9e:	0249      	lsls	r1, r1, #9
 8003ba0:	430a      	orrs	r2, r1
 8003ba2:	601a      	str	r2, [r3, #0]
 8003ba4:	e012      	b.n	8003bcc <HAL_RCC_OscConfig+0xd4>
 8003ba6:	4ba2      	ldr	r3, [pc, #648]	; (8003e30 <HAL_RCC_OscConfig+0x338>)
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	4ba1      	ldr	r3, [pc, #644]	; (8003e30 <HAL_RCC_OscConfig+0x338>)
 8003bac:	49a1      	ldr	r1, [pc, #644]	; (8003e34 <HAL_RCC_OscConfig+0x33c>)
 8003bae:	400a      	ands	r2, r1
 8003bb0:	601a      	str	r2, [r3, #0]
 8003bb2:	4b9f      	ldr	r3, [pc, #636]	; (8003e30 <HAL_RCC_OscConfig+0x338>)
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	2380      	movs	r3, #128	; 0x80
 8003bb8:	025b      	lsls	r3, r3, #9
 8003bba:	4013      	ands	r3, r2
 8003bbc:	60fb      	str	r3, [r7, #12]
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	4b9b      	ldr	r3, [pc, #620]	; (8003e30 <HAL_RCC_OscConfig+0x338>)
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	4b9a      	ldr	r3, [pc, #616]	; (8003e30 <HAL_RCC_OscConfig+0x338>)
 8003bc6:	499c      	ldr	r1, [pc, #624]	; (8003e38 <HAL_RCC_OscConfig+0x340>)
 8003bc8:	400a      	ands	r2, r1
 8003bca:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d015      	beq.n	8003c00 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bd4:	f7fe fdc2 	bl	800275c <HAL_GetTick>
 8003bd8:	0003      	movs	r3, r0
 8003bda:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003bdc:	e009      	b.n	8003bf2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003bde:	f7fe fdbd 	bl	800275c <HAL_GetTick>
 8003be2:	0002      	movs	r2, r0
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	1ad3      	subs	r3, r2, r3
 8003be8:	2b64      	cmp	r3, #100	; 0x64
 8003bea:	d902      	bls.n	8003bf2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003bec:	2303      	movs	r3, #3
 8003bee:	f000 fb49 	bl	8004284 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003bf2:	4b8f      	ldr	r3, [pc, #572]	; (8003e30 <HAL_RCC_OscConfig+0x338>)
 8003bf4:	681a      	ldr	r2, [r3, #0]
 8003bf6:	2380      	movs	r3, #128	; 0x80
 8003bf8:	029b      	lsls	r3, r3, #10
 8003bfa:	4013      	ands	r3, r2
 8003bfc:	d0ef      	beq.n	8003bde <HAL_RCC_OscConfig+0xe6>
 8003bfe:	e015      	b.n	8003c2c <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c00:	f7fe fdac 	bl	800275c <HAL_GetTick>
 8003c04:	0003      	movs	r3, r0
 8003c06:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003c08:	e008      	b.n	8003c1c <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c0a:	f7fe fda7 	bl	800275c <HAL_GetTick>
 8003c0e:	0002      	movs	r2, r0
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	1ad3      	subs	r3, r2, r3
 8003c14:	2b64      	cmp	r3, #100	; 0x64
 8003c16:	d901      	bls.n	8003c1c <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8003c18:	2303      	movs	r3, #3
 8003c1a:	e333      	b.n	8004284 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003c1c:	4b84      	ldr	r3, [pc, #528]	; (8003e30 <HAL_RCC_OscConfig+0x338>)
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	2380      	movs	r3, #128	; 0x80
 8003c22:	029b      	lsls	r3, r3, #10
 8003c24:	4013      	ands	r3, r2
 8003c26:	d1f0      	bne.n	8003c0a <HAL_RCC_OscConfig+0x112>
 8003c28:	e000      	b.n	8003c2c <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c2a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	2202      	movs	r2, #2
 8003c32:	4013      	ands	r3, r2
 8003c34:	d100      	bne.n	8003c38 <HAL_RCC_OscConfig+0x140>
 8003c36:	e098      	b.n	8003d6a <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	68db      	ldr	r3, [r3, #12]
 8003c3c:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8003c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c40:	2220      	movs	r2, #32
 8003c42:	4013      	ands	r3, r2
 8003c44:	d009      	beq.n	8003c5a <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8003c46:	4b7a      	ldr	r3, [pc, #488]	; (8003e30 <HAL_RCC_OscConfig+0x338>)
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	4b79      	ldr	r3, [pc, #484]	; (8003e30 <HAL_RCC_OscConfig+0x338>)
 8003c4c:	2120      	movs	r1, #32
 8003c4e:	430a      	orrs	r2, r1
 8003c50:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8003c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c54:	2220      	movs	r2, #32
 8003c56:	4393      	bics	r3, r2
 8003c58:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003c5a:	69fb      	ldr	r3, [r7, #28]
 8003c5c:	2b04      	cmp	r3, #4
 8003c5e:	d005      	beq.n	8003c6c <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003c60:	69fb      	ldr	r3, [r7, #28]
 8003c62:	2b0c      	cmp	r3, #12
 8003c64:	d13d      	bne.n	8003ce2 <HAL_RCC_OscConfig+0x1ea>
 8003c66:	69bb      	ldr	r3, [r7, #24]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d13a      	bne.n	8003ce2 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8003c6c:	4b70      	ldr	r3, [pc, #448]	; (8003e30 <HAL_RCC_OscConfig+0x338>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	2204      	movs	r2, #4
 8003c72:	4013      	ands	r3, r2
 8003c74:	d004      	beq.n	8003c80 <HAL_RCC_OscConfig+0x188>
 8003c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d101      	bne.n	8003c80 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	e301      	b.n	8004284 <HAL_RCC_OscConfig+0x78c>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c80:	4b6b      	ldr	r3, [pc, #428]	; (8003e30 <HAL_RCC_OscConfig+0x338>)
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	4a6d      	ldr	r2, [pc, #436]	; (8003e3c <HAL_RCC_OscConfig+0x344>)
 8003c86:	4013      	ands	r3, r2
 8003c88:	0019      	movs	r1, r3
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	691b      	ldr	r3, [r3, #16]
 8003c8e:	021a      	lsls	r2, r3, #8
 8003c90:	4b67      	ldr	r3, [pc, #412]	; (8003e30 <HAL_RCC_OscConfig+0x338>)
 8003c92:	430a      	orrs	r2, r1
 8003c94:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003c96:	4b66      	ldr	r3, [pc, #408]	; (8003e30 <HAL_RCC_OscConfig+0x338>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	2209      	movs	r2, #9
 8003c9c:	4393      	bics	r3, r2
 8003c9e:	0019      	movs	r1, r3
 8003ca0:	4b63      	ldr	r3, [pc, #396]	; (8003e30 <HAL_RCC_OscConfig+0x338>)
 8003ca2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ca4:	430a      	orrs	r2, r1
 8003ca6:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003ca8:	f000 fc20 	bl	80044ec <HAL_RCC_GetSysClockFreq>
 8003cac:	0001      	movs	r1, r0
 8003cae:	4b60      	ldr	r3, [pc, #384]	; (8003e30 <HAL_RCC_OscConfig+0x338>)
 8003cb0:	68db      	ldr	r3, [r3, #12]
 8003cb2:	091b      	lsrs	r3, r3, #4
 8003cb4:	220f      	movs	r2, #15
 8003cb6:	4013      	ands	r3, r2
 8003cb8:	4a61      	ldr	r2, [pc, #388]	; (8003e40 <HAL_RCC_OscConfig+0x348>)
 8003cba:	5cd3      	ldrb	r3, [r2, r3]
 8003cbc:	000a      	movs	r2, r1
 8003cbe:	40da      	lsrs	r2, r3
 8003cc0:	4b60      	ldr	r3, [pc, #384]	; (8003e44 <HAL_RCC_OscConfig+0x34c>)
 8003cc2:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (TICK_INT_PRIORITY);
 8003cc4:	2513      	movs	r5, #19
 8003cc6:	197c      	adds	r4, r7, r5
 8003cc8:	2000      	movs	r0, #0
 8003cca:	f7fe fd11 	bl	80026f0 <HAL_InitTick>
 8003cce:	0003      	movs	r3, r0
 8003cd0:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8003cd2:	197b      	adds	r3, r7, r5
 8003cd4:	781b      	ldrb	r3, [r3, #0]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d047      	beq.n	8003d6a <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8003cda:	2313      	movs	r3, #19
 8003cdc:	18fb      	adds	r3, r7, r3
 8003cde:	781b      	ldrb	r3, [r3, #0]
 8003ce0:	e2d0      	b.n	8004284 <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8003ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d027      	beq.n	8003d38 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003ce8:	4b51      	ldr	r3, [pc, #324]	; (8003e30 <HAL_RCC_OscConfig+0x338>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	2209      	movs	r2, #9
 8003cee:	4393      	bics	r3, r2
 8003cf0:	0019      	movs	r1, r3
 8003cf2:	4b4f      	ldr	r3, [pc, #316]	; (8003e30 <HAL_RCC_OscConfig+0x338>)
 8003cf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cf6:	430a      	orrs	r2, r1
 8003cf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cfa:	f7fe fd2f 	bl	800275c <HAL_GetTick>
 8003cfe:	0003      	movs	r3, r0
 8003d00:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003d02:	e008      	b.n	8003d16 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d04:	f7fe fd2a 	bl	800275c <HAL_GetTick>
 8003d08:	0002      	movs	r2, r0
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	1ad3      	subs	r3, r2, r3
 8003d0e:	2b02      	cmp	r3, #2
 8003d10:	d901      	bls.n	8003d16 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8003d12:	2303      	movs	r3, #3
 8003d14:	e2b6      	b.n	8004284 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003d16:	4b46      	ldr	r3, [pc, #280]	; (8003e30 <HAL_RCC_OscConfig+0x338>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	2204      	movs	r2, #4
 8003d1c:	4013      	ands	r3, r2
 8003d1e:	d0f1      	beq.n	8003d04 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d20:	4b43      	ldr	r3, [pc, #268]	; (8003e30 <HAL_RCC_OscConfig+0x338>)
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	4a45      	ldr	r2, [pc, #276]	; (8003e3c <HAL_RCC_OscConfig+0x344>)
 8003d26:	4013      	ands	r3, r2
 8003d28:	0019      	movs	r1, r3
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	691b      	ldr	r3, [r3, #16]
 8003d2e:	021a      	lsls	r2, r3, #8
 8003d30:	4b3f      	ldr	r3, [pc, #252]	; (8003e30 <HAL_RCC_OscConfig+0x338>)
 8003d32:	430a      	orrs	r2, r1
 8003d34:	605a      	str	r2, [r3, #4]
 8003d36:	e018      	b.n	8003d6a <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d38:	4b3d      	ldr	r3, [pc, #244]	; (8003e30 <HAL_RCC_OscConfig+0x338>)
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	4b3c      	ldr	r3, [pc, #240]	; (8003e30 <HAL_RCC_OscConfig+0x338>)
 8003d3e:	2101      	movs	r1, #1
 8003d40:	438a      	bics	r2, r1
 8003d42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d44:	f7fe fd0a 	bl	800275c <HAL_GetTick>
 8003d48:	0003      	movs	r3, r0
 8003d4a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003d4c:	e008      	b.n	8003d60 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d4e:	f7fe fd05 	bl	800275c <HAL_GetTick>
 8003d52:	0002      	movs	r2, r0
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	1ad3      	subs	r3, r2, r3
 8003d58:	2b02      	cmp	r3, #2
 8003d5a:	d901      	bls.n	8003d60 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8003d5c:	2303      	movs	r3, #3
 8003d5e:	e291      	b.n	8004284 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003d60:	4b33      	ldr	r3, [pc, #204]	; (8003e30 <HAL_RCC_OscConfig+0x338>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	2204      	movs	r2, #4
 8003d66:	4013      	ands	r3, r2
 8003d68:	d1f1      	bne.n	8003d4e <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	2210      	movs	r2, #16
 8003d70:	4013      	ands	r3, r2
 8003d72:	d100      	bne.n	8003d76 <HAL_RCC_OscConfig+0x27e>
 8003d74:	e09f      	b.n	8003eb6 <HAL_RCC_OscConfig+0x3be>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8003d76:	69fb      	ldr	r3, [r7, #28]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d13f      	bne.n	8003dfc <HAL_RCC_OscConfig+0x304>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003d7c:	4b2c      	ldr	r3, [pc, #176]	; (8003e30 <HAL_RCC_OscConfig+0x338>)
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	2380      	movs	r3, #128	; 0x80
 8003d82:	009b      	lsls	r3, r3, #2
 8003d84:	4013      	ands	r3, r2
 8003d86:	d005      	beq.n	8003d94 <HAL_RCC_OscConfig+0x29c>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	69db      	ldr	r3, [r3, #28]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d101      	bne.n	8003d94 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	e277      	b.n	8004284 <HAL_RCC_OscConfig+0x78c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d94:	4b26      	ldr	r3, [pc, #152]	; (8003e30 <HAL_RCC_OscConfig+0x338>)
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	4a2b      	ldr	r2, [pc, #172]	; (8003e48 <HAL_RCC_OscConfig+0x350>)
 8003d9a:	4013      	ands	r3, r2
 8003d9c:	0019      	movs	r1, r3
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003da2:	4b23      	ldr	r3, [pc, #140]	; (8003e30 <HAL_RCC_OscConfig+0x338>)
 8003da4:	430a      	orrs	r2, r1
 8003da6:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003da8:	4b21      	ldr	r3, [pc, #132]	; (8003e30 <HAL_RCC_OscConfig+0x338>)
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	021b      	lsls	r3, r3, #8
 8003dae:	0a19      	lsrs	r1, r3, #8
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6a1b      	ldr	r3, [r3, #32]
 8003db4:	061a      	lsls	r2, r3, #24
 8003db6:	4b1e      	ldr	r3, [pc, #120]	; (8003e30 <HAL_RCC_OscConfig+0x338>)
 8003db8:	430a      	orrs	r2, r1
 8003dba:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc0:	0b5b      	lsrs	r3, r3, #13
 8003dc2:	3301      	adds	r3, #1
 8003dc4:	2280      	movs	r2, #128	; 0x80
 8003dc6:	0212      	lsls	r2, r2, #8
 8003dc8:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003dca:	4b19      	ldr	r3, [pc, #100]	; (8003e30 <HAL_RCC_OscConfig+0x338>)
 8003dcc:	68db      	ldr	r3, [r3, #12]
 8003dce:	091b      	lsrs	r3, r3, #4
 8003dd0:	210f      	movs	r1, #15
 8003dd2:	400b      	ands	r3, r1
 8003dd4:	491a      	ldr	r1, [pc, #104]	; (8003e40 <HAL_RCC_OscConfig+0x348>)
 8003dd6:	5ccb      	ldrb	r3, [r1, r3]
 8003dd8:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003dda:	4b1a      	ldr	r3, [pc, #104]	; (8003e44 <HAL_RCC_OscConfig+0x34c>)
 8003ddc:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8003dde:	2513      	movs	r5, #19
 8003de0:	197c      	adds	r4, r7, r5
 8003de2:	2000      	movs	r0, #0
 8003de4:	f7fe fc84 	bl	80026f0 <HAL_InitTick>
 8003de8:	0003      	movs	r3, r0
 8003dea:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8003dec:	197b      	adds	r3, r7, r5
 8003dee:	781b      	ldrb	r3, [r3, #0]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d060      	beq.n	8003eb6 <HAL_RCC_OscConfig+0x3be>
        {
          return status;
 8003df4:	2313      	movs	r3, #19
 8003df6:	18fb      	adds	r3, r7, r3
 8003df8:	781b      	ldrb	r3, [r3, #0]
 8003dfa:	e243      	b.n	8004284 <HAL_RCC_OscConfig+0x78c>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	69db      	ldr	r3, [r3, #28]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d03e      	beq.n	8003e82 <HAL_RCC_OscConfig+0x38a>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003e04:	4b0a      	ldr	r3, [pc, #40]	; (8003e30 <HAL_RCC_OscConfig+0x338>)
 8003e06:	681a      	ldr	r2, [r3, #0]
 8003e08:	4b09      	ldr	r3, [pc, #36]	; (8003e30 <HAL_RCC_OscConfig+0x338>)
 8003e0a:	2180      	movs	r1, #128	; 0x80
 8003e0c:	0049      	lsls	r1, r1, #1
 8003e0e:	430a      	orrs	r2, r1
 8003e10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e12:	f7fe fca3 	bl	800275c <HAL_GetTick>
 8003e16:	0003      	movs	r3, r0
 8003e18:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003e1a:	e017      	b.n	8003e4c <HAL_RCC_OscConfig+0x354>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003e1c:	f7fe fc9e 	bl	800275c <HAL_GetTick>
 8003e20:	0002      	movs	r2, r0
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	1ad3      	subs	r3, r2, r3
 8003e26:	2b02      	cmp	r3, #2
 8003e28:	d910      	bls.n	8003e4c <HAL_RCC_OscConfig+0x354>
          {
            return HAL_TIMEOUT;
 8003e2a:	2303      	movs	r3, #3
 8003e2c:	e22a      	b.n	8004284 <HAL_RCC_OscConfig+0x78c>
 8003e2e:	46c0      	nop			; (mov r8, r8)
 8003e30:	40021000 	.word	0x40021000
 8003e34:	fffeffff 	.word	0xfffeffff
 8003e38:	fffbffff 	.word	0xfffbffff
 8003e3c:	ffffe0ff 	.word	0xffffe0ff
 8003e40:	080073f8 	.word	0x080073f8
 8003e44:	20000000 	.word	0x20000000
 8003e48:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003e4c:	4bc6      	ldr	r3, [pc, #792]	; (8004168 <HAL_RCC_OscConfig+0x670>)
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	2380      	movs	r3, #128	; 0x80
 8003e52:	009b      	lsls	r3, r3, #2
 8003e54:	4013      	ands	r3, r2
 8003e56:	d0e1      	beq.n	8003e1c <HAL_RCC_OscConfig+0x324>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e58:	4bc3      	ldr	r3, [pc, #780]	; (8004168 <HAL_RCC_OscConfig+0x670>)
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	4ac3      	ldr	r2, [pc, #780]	; (800416c <HAL_RCC_OscConfig+0x674>)
 8003e5e:	4013      	ands	r3, r2
 8003e60:	0019      	movs	r1, r3
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e66:	4bc0      	ldr	r3, [pc, #768]	; (8004168 <HAL_RCC_OscConfig+0x670>)
 8003e68:	430a      	orrs	r2, r1
 8003e6a:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e6c:	4bbe      	ldr	r3, [pc, #760]	; (8004168 <HAL_RCC_OscConfig+0x670>)
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	021b      	lsls	r3, r3, #8
 8003e72:	0a19      	lsrs	r1, r3, #8
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6a1b      	ldr	r3, [r3, #32]
 8003e78:	061a      	lsls	r2, r3, #24
 8003e7a:	4bbb      	ldr	r3, [pc, #748]	; (8004168 <HAL_RCC_OscConfig+0x670>)
 8003e7c:	430a      	orrs	r2, r1
 8003e7e:	605a      	str	r2, [r3, #4]
 8003e80:	e019      	b.n	8003eb6 <HAL_RCC_OscConfig+0x3be>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003e82:	4bb9      	ldr	r3, [pc, #740]	; (8004168 <HAL_RCC_OscConfig+0x670>)
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	4bb8      	ldr	r3, [pc, #736]	; (8004168 <HAL_RCC_OscConfig+0x670>)
 8003e88:	49b9      	ldr	r1, [pc, #740]	; (8004170 <HAL_RCC_OscConfig+0x678>)
 8003e8a:	400a      	ands	r2, r1
 8003e8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e8e:	f7fe fc65 	bl	800275c <HAL_GetTick>
 8003e92:	0003      	movs	r3, r0
 8003e94:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003e96:	e008      	b.n	8003eaa <HAL_RCC_OscConfig+0x3b2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003e98:	f7fe fc60 	bl	800275c <HAL_GetTick>
 8003e9c:	0002      	movs	r2, r0
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	1ad3      	subs	r3, r2, r3
 8003ea2:	2b02      	cmp	r3, #2
 8003ea4:	d901      	bls.n	8003eaa <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 8003ea6:	2303      	movs	r3, #3
 8003ea8:	e1ec      	b.n	8004284 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003eaa:	4baf      	ldr	r3, [pc, #700]	; (8004168 <HAL_RCC_OscConfig+0x670>)
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	2380      	movs	r3, #128	; 0x80
 8003eb0:	009b      	lsls	r3, r3, #2
 8003eb2:	4013      	ands	r3, r2
 8003eb4:	d1f0      	bne.n	8003e98 <HAL_RCC_OscConfig+0x3a0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	2208      	movs	r2, #8
 8003ebc:	4013      	ands	r3, r2
 8003ebe:	d036      	beq.n	8003f2e <HAL_RCC_OscConfig+0x436>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	695b      	ldr	r3, [r3, #20]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d019      	beq.n	8003efc <HAL_RCC_OscConfig+0x404>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ec8:	4ba7      	ldr	r3, [pc, #668]	; (8004168 <HAL_RCC_OscConfig+0x670>)
 8003eca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003ecc:	4ba6      	ldr	r3, [pc, #664]	; (8004168 <HAL_RCC_OscConfig+0x670>)
 8003ece:	2101      	movs	r1, #1
 8003ed0:	430a      	orrs	r2, r1
 8003ed2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ed4:	f7fe fc42 	bl	800275c <HAL_GetTick>
 8003ed8:	0003      	movs	r3, r0
 8003eda:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003edc:	e008      	b.n	8003ef0 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ede:	f7fe fc3d 	bl	800275c <HAL_GetTick>
 8003ee2:	0002      	movs	r2, r0
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	1ad3      	subs	r3, r2, r3
 8003ee8:	2b02      	cmp	r3, #2
 8003eea:	d901      	bls.n	8003ef0 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8003eec:	2303      	movs	r3, #3
 8003eee:	e1c9      	b.n	8004284 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003ef0:	4b9d      	ldr	r3, [pc, #628]	; (8004168 <HAL_RCC_OscConfig+0x670>)
 8003ef2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ef4:	2202      	movs	r2, #2
 8003ef6:	4013      	ands	r3, r2
 8003ef8:	d0f1      	beq.n	8003ede <HAL_RCC_OscConfig+0x3e6>
 8003efa:	e018      	b.n	8003f2e <HAL_RCC_OscConfig+0x436>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003efc:	4b9a      	ldr	r3, [pc, #616]	; (8004168 <HAL_RCC_OscConfig+0x670>)
 8003efe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003f00:	4b99      	ldr	r3, [pc, #612]	; (8004168 <HAL_RCC_OscConfig+0x670>)
 8003f02:	2101      	movs	r1, #1
 8003f04:	438a      	bics	r2, r1
 8003f06:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f08:	f7fe fc28 	bl	800275c <HAL_GetTick>
 8003f0c:	0003      	movs	r3, r0
 8003f0e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003f10:	e008      	b.n	8003f24 <HAL_RCC_OscConfig+0x42c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f12:	f7fe fc23 	bl	800275c <HAL_GetTick>
 8003f16:	0002      	movs	r2, r0
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	1ad3      	subs	r3, r2, r3
 8003f1c:	2b02      	cmp	r3, #2
 8003f1e:	d901      	bls.n	8003f24 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8003f20:	2303      	movs	r3, #3
 8003f22:	e1af      	b.n	8004284 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003f24:	4b90      	ldr	r3, [pc, #576]	; (8004168 <HAL_RCC_OscConfig+0x670>)
 8003f26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f28:	2202      	movs	r2, #2
 8003f2a:	4013      	ands	r3, r2
 8003f2c:	d1f1      	bne.n	8003f12 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	2204      	movs	r2, #4
 8003f34:	4013      	ands	r3, r2
 8003f36:	d100      	bne.n	8003f3a <HAL_RCC_OscConfig+0x442>
 8003f38:	e0af      	b.n	800409a <HAL_RCC_OscConfig+0x5a2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f3a:	2323      	movs	r3, #35	; 0x23
 8003f3c:	18fb      	adds	r3, r7, r3
 8003f3e:	2200      	movs	r2, #0
 8003f40:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f42:	4b89      	ldr	r3, [pc, #548]	; (8004168 <HAL_RCC_OscConfig+0x670>)
 8003f44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f46:	2380      	movs	r3, #128	; 0x80
 8003f48:	055b      	lsls	r3, r3, #21
 8003f4a:	4013      	ands	r3, r2
 8003f4c:	d10a      	bne.n	8003f64 <HAL_RCC_OscConfig+0x46c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f4e:	4b86      	ldr	r3, [pc, #536]	; (8004168 <HAL_RCC_OscConfig+0x670>)
 8003f50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f52:	4b85      	ldr	r3, [pc, #532]	; (8004168 <HAL_RCC_OscConfig+0x670>)
 8003f54:	2180      	movs	r1, #128	; 0x80
 8003f56:	0549      	lsls	r1, r1, #21
 8003f58:	430a      	orrs	r2, r1
 8003f5a:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8003f5c:	2323      	movs	r3, #35	; 0x23
 8003f5e:	18fb      	adds	r3, r7, r3
 8003f60:	2201      	movs	r2, #1
 8003f62:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f64:	4b83      	ldr	r3, [pc, #524]	; (8004174 <HAL_RCC_OscConfig+0x67c>)
 8003f66:	681a      	ldr	r2, [r3, #0]
 8003f68:	2380      	movs	r3, #128	; 0x80
 8003f6a:	005b      	lsls	r3, r3, #1
 8003f6c:	4013      	ands	r3, r2
 8003f6e:	d11a      	bne.n	8003fa6 <HAL_RCC_OscConfig+0x4ae>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f70:	4b80      	ldr	r3, [pc, #512]	; (8004174 <HAL_RCC_OscConfig+0x67c>)
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	4b7f      	ldr	r3, [pc, #508]	; (8004174 <HAL_RCC_OscConfig+0x67c>)
 8003f76:	2180      	movs	r1, #128	; 0x80
 8003f78:	0049      	lsls	r1, r1, #1
 8003f7a:	430a      	orrs	r2, r1
 8003f7c:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f7e:	f7fe fbed 	bl	800275c <HAL_GetTick>
 8003f82:	0003      	movs	r3, r0
 8003f84:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f86:	e008      	b.n	8003f9a <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f88:	f7fe fbe8 	bl	800275c <HAL_GetTick>
 8003f8c:	0002      	movs	r2, r0
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	1ad3      	subs	r3, r2, r3
 8003f92:	2b64      	cmp	r3, #100	; 0x64
 8003f94:	d901      	bls.n	8003f9a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8003f96:	2303      	movs	r3, #3
 8003f98:	e174      	b.n	8004284 <HAL_RCC_OscConfig+0x78c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f9a:	4b76      	ldr	r3, [pc, #472]	; (8004174 <HAL_RCC_OscConfig+0x67c>)
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	2380      	movs	r3, #128	; 0x80
 8003fa0:	005b      	lsls	r3, r3, #1
 8003fa2:	4013      	ands	r3, r2
 8003fa4:	d0f0      	beq.n	8003f88 <HAL_RCC_OscConfig+0x490>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	689a      	ldr	r2, [r3, #8]
 8003faa:	2380      	movs	r3, #128	; 0x80
 8003fac:	005b      	lsls	r3, r3, #1
 8003fae:	429a      	cmp	r2, r3
 8003fb0:	d107      	bne.n	8003fc2 <HAL_RCC_OscConfig+0x4ca>
 8003fb2:	4b6d      	ldr	r3, [pc, #436]	; (8004168 <HAL_RCC_OscConfig+0x670>)
 8003fb4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003fb6:	4b6c      	ldr	r3, [pc, #432]	; (8004168 <HAL_RCC_OscConfig+0x670>)
 8003fb8:	2180      	movs	r1, #128	; 0x80
 8003fba:	0049      	lsls	r1, r1, #1
 8003fbc:	430a      	orrs	r2, r1
 8003fbe:	651a      	str	r2, [r3, #80]	; 0x50
 8003fc0:	e031      	b.n	8004026 <HAL_RCC_OscConfig+0x52e>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	689b      	ldr	r3, [r3, #8]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d10c      	bne.n	8003fe4 <HAL_RCC_OscConfig+0x4ec>
 8003fca:	4b67      	ldr	r3, [pc, #412]	; (8004168 <HAL_RCC_OscConfig+0x670>)
 8003fcc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003fce:	4b66      	ldr	r3, [pc, #408]	; (8004168 <HAL_RCC_OscConfig+0x670>)
 8003fd0:	4967      	ldr	r1, [pc, #412]	; (8004170 <HAL_RCC_OscConfig+0x678>)
 8003fd2:	400a      	ands	r2, r1
 8003fd4:	651a      	str	r2, [r3, #80]	; 0x50
 8003fd6:	4b64      	ldr	r3, [pc, #400]	; (8004168 <HAL_RCC_OscConfig+0x670>)
 8003fd8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003fda:	4b63      	ldr	r3, [pc, #396]	; (8004168 <HAL_RCC_OscConfig+0x670>)
 8003fdc:	4966      	ldr	r1, [pc, #408]	; (8004178 <HAL_RCC_OscConfig+0x680>)
 8003fde:	400a      	ands	r2, r1
 8003fe0:	651a      	str	r2, [r3, #80]	; 0x50
 8003fe2:	e020      	b.n	8004026 <HAL_RCC_OscConfig+0x52e>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	689a      	ldr	r2, [r3, #8]
 8003fe8:	23a0      	movs	r3, #160	; 0xa0
 8003fea:	00db      	lsls	r3, r3, #3
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d10e      	bne.n	800400e <HAL_RCC_OscConfig+0x516>
 8003ff0:	4b5d      	ldr	r3, [pc, #372]	; (8004168 <HAL_RCC_OscConfig+0x670>)
 8003ff2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003ff4:	4b5c      	ldr	r3, [pc, #368]	; (8004168 <HAL_RCC_OscConfig+0x670>)
 8003ff6:	2180      	movs	r1, #128	; 0x80
 8003ff8:	00c9      	lsls	r1, r1, #3
 8003ffa:	430a      	orrs	r2, r1
 8003ffc:	651a      	str	r2, [r3, #80]	; 0x50
 8003ffe:	4b5a      	ldr	r3, [pc, #360]	; (8004168 <HAL_RCC_OscConfig+0x670>)
 8004000:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004002:	4b59      	ldr	r3, [pc, #356]	; (8004168 <HAL_RCC_OscConfig+0x670>)
 8004004:	2180      	movs	r1, #128	; 0x80
 8004006:	0049      	lsls	r1, r1, #1
 8004008:	430a      	orrs	r2, r1
 800400a:	651a      	str	r2, [r3, #80]	; 0x50
 800400c:	e00b      	b.n	8004026 <HAL_RCC_OscConfig+0x52e>
 800400e:	4b56      	ldr	r3, [pc, #344]	; (8004168 <HAL_RCC_OscConfig+0x670>)
 8004010:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004012:	4b55      	ldr	r3, [pc, #340]	; (8004168 <HAL_RCC_OscConfig+0x670>)
 8004014:	4956      	ldr	r1, [pc, #344]	; (8004170 <HAL_RCC_OscConfig+0x678>)
 8004016:	400a      	ands	r2, r1
 8004018:	651a      	str	r2, [r3, #80]	; 0x50
 800401a:	4b53      	ldr	r3, [pc, #332]	; (8004168 <HAL_RCC_OscConfig+0x670>)
 800401c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800401e:	4b52      	ldr	r3, [pc, #328]	; (8004168 <HAL_RCC_OscConfig+0x670>)
 8004020:	4955      	ldr	r1, [pc, #340]	; (8004178 <HAL_RCC_OscConfig+0x680>)
 8004022:	400a      	ands	r2, r1
 8004024:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d015      	beq.n	800405a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800402e:	f7fe fb95 	bl	800275c <HAL_GetTick>
 8004032:	0003      	movs	r3, r0
 8004034:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004036:	e009      	b.n	800404c <HAL_RCC_OscConfig+0x554>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004038:	f7fe fb90 	bl	800275c <HAL_GetTick>
 800403c:	0002      	movs	r2, r0
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	1ad3      	subs	r3, r2, r3
 8004042:	4a4e      	ldr	r2, [pc, #312]	; (800417c <HAL_RCC_OscConfig+0x684>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d901      	bls.n	800404c <HAL_RCC_OscConfig+0x554>
        {
          return HAL_TIMEOUT;
 8004048:	2303      	movs	r3, #3
 800404a:	e11b      	b.n	8004284 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800404c:	4b46      	ldr	r3, [pc, #280]	; (8004168 <HAL_RCC_OscConfig+0x670>)
 800404e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004050:	2380      	movs	r3, #128	; 0x80
 8004052:	009b      	lsls	r3, r3, #2
 8004054:	4013      	ands	r3, r2
 8004056:	d0ef      	beq.n	8004038 <HAL_RCC_OscConfig+0x540>
 8004058:	e014      	b.n	8004084 <HAL_RCC_OscConfig+0x58c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800405a:	f7fe fb7f 	bl	800275c <HAL_GetTick>
 800405e:	0003      	movs	r3, r0
 8004060:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004062:	e009      	b.n	8004078 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004064:	f7fe fb7a 	bl	800275c <HAL_GetTick>
 8004068:	0002      	movs	r2, r0
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	1ad3      	subs	r3, r2, r3
 800406e:	4a43      	ldr	r2, [pc, #268]	; (800417c <HAL_RCC_OscConfig+0x684>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d901      	bls.n	8004078 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004074:	2303      	movs	r3, #3
 8004076:	e105      	b.n	8004284 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004078:	4b3b      	ldr	r3, [pc, #236]	; (8004168 <HAL_RCC_OscConfig+0x670>)
 800407a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800407c:	2380      	movs	r3, #128	; 0x80
 800407e:	009b      	lsls	r3, r3, #2
 8004080:	4013      	ands	r3, r2
 8004082:	d1ef      	bne.n	8004064 <HAL_RCC_OscConfig+0x56c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004084:	2323      	movs	r3, #35	; 0x23
 8004086:	18fb      	adds	r3, r7, r3
 8004088:	781b      	ldrb	r3, [r3, #0]
 800408a:	2b01      	cmp	r3, #1
 800408c:	d105      	bne.n	800409a <HAL_RCC_OscConfig+0x5a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800408e:	4b36      	ldr	r3, [pc, #216]	; (8004168 <HAL_RCC_OscConfig+0x670>)
 8004090:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004092:	4b35      	ldr	r3, [pc, #212]	; (8004168 <HAL_RCC_OscConfig+0x670>)
 8004094:	493a      	ldr	r1, [pc, #232]	; (8004180 <HAL_RCC_OscConfig+0x688>)
 8004096:	400a      	ands	r2, r1
 8004098:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	2220      	movs	r2, #32
 80040a0:	4013      	ands	r3, r2
 80040a2:	d049      	beq.n	8004138 <HAL_RCC_OscConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	699b      	ldr	r3, [r3, #24]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d026      	beq.n	80040fa <HAL_RCC_OscConfig+0x602>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80040ac:	4b2e      	ldr	r3, [pc, #184]	; (8004168 <HAL_RCC_OscConfig+0x670>)
 80040ae:	689a      	ldr	r2, [r3, #8]
 80040b0:	4b2d      	ldr	r3, [pc, #180]	; (8004168 <HAL_RCC_OscConfig+0x670>)
 80040b2:	2101      	movs	r1, #1
 80040b4:	430a      	orrs	r2, r1
 80040b6:	609a      	str	r2, [r3, #8]
 80040b8:	4b2b      	ldr	r3, [pc, #172]	; (8004168 <HAL_RCC_OscConfig+0x670>)
 80040ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040bc:	4b2a      	ldr	r3, [pc, #168]	; (8004168 <HAL_RCC_OscConfig+0x670>)
 80040be:	2101      	movs	r1, #1
 80040c0:	430a      	orrs	r2, r1
 80040c2:	635a      	str	r2, [r3, #52]	; 0x34
 80040c4:	4b2f      	ldr	r3, [pc, #188]	; (8004184 <HAL_RCC_OscConfig+0x68c>)
 80040c6:	6a1a      	ldr	r2, [r3, #32]
 80040c8:	4b2e      	ldr	r3, [pc, #184]	; (8004184 <HAL_RCC_OscConfig+0x68c>)
 80040ca:	2180      	movs	r1, #128	; 0x80
 80040cc:	0189      	lsls	r1, r1, #6
 80040ce:	430a      	orrs	r2, r1
 80040d0:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040d2:	f7fe fb43 	bl	800275c <HAL_GetTick>
 80040d6:	0003      	movs	r3, r0
 80040d8:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80040da:	e008      	b.n	80040ee <HAL_RCC_OscConfig+0x5f6>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80040dc:	f7fe fb3e 	bl	800275c <HAL_GetTick>
 80040e0:	0002      	movs	r2, r0
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	1ad3      	subs	r3, r2, r3
 80040e6:	2b02      	cmp	r3, #2
 80040e8:	d901      	bls.n	80040ee <HAL_RCC_OscConfig+0x5f6>
          {
            return HAL_TIMEOUT;
 80040ea:	2303      	movs	r3, #3
 80040ec:	e0ca      	b.n	8004284 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80040ee:	4b1e      	ldr	r3, [pc, #120]	; (8004168 <HAL_RCC_OscConfig+0x670>)
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	2202      	movs	r2, #2
 80040f4:	4013      	ands	r3, r2
 80040f6:	d0f1      	beq.n	80040dc <HAL_RCC_OscConfig+0x5e4>
 80040f8:	e01e      	b.n	8004138 <HAL_RCC_OscConfig+0x640>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80040fa:	4b1b      	ldr	r3, [pc, #108]	; (8004168 <HAL_RCC_OscConfig+0x670>)
 80040fc:	689a      	ldr	r2, [r3, #8]
 80040fe:	4b1a      	ldr	r3, [pc, #104]	; (8004168 <HAL_RCC_OscConfig+0x670>)
 8004100:	2101      	movs	r1, #1
 8004102:	438a      	bics	r2, r1
 8004104:	609a      	str	r2, [r3, #8]
 8004106:	4b1f      	ldr	r3, [pc, #124]	; (8004184 <HAL_RCC_OscConfig+0x68c>)
 8004108:	6a1a      	ldr	r2, [r3, #32]
 800410a:	4b1e      	ldr	r3, [pc, #120]	; (8004184 <HAL_RCC_OscConfig+0x68c>)
 800410c:	491e      	ldr	r1, [pc, #120]	; (8004188 <HAL_RCC_OscConfig+0x690>)
 800410e:	400a      	ands	r2, r1
 8004110:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004112:	f7fe fb23 	bl	800275c <HAL_GetTick>
 8004116:	0003      	movs	r3, r0
 8004118:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800411a:	e008      	b.n	800412e <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800411c:	f7fe fb1e 	bl	800275c <HAL_GetTick>
 8004120:	0002      	movs	r2, r0
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	1ad3      	subs	r3, r2, r3
 8004126:	2b02      	cmp	r3, #2
 8004128:	d901      	bls.n	800412e <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 800412a:	2303      	movs	r3, #3
 800412c:	e0aa      	b.n	8004284 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800412e:	4b0e      	ldr	r3, [pc, #56]	; (8004168 <HAL_RCC_OscConfig+0x670>)
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	2202      	movs	r2, #2
 8004134:	4013      	ands	r3, r2
 8004136:	d1f1      	bne.n	800411c <HAL_RCC_OscConfig+0x624>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800413c:	2b00      	cmp	r3, #0
 800413e:	d100      	bne.n	8004142 <HAL_RCC_OscConfig+0x64a>
 8004140:	e09f      	b.n	8004282 <HAL_RCC_OscConfig+0x78a>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004142:	69fb      	ldr	r3, [r7, #28]
 8004144:	2b0c      	cmp	r3, #12
 8004146:	d100      	bne.n	800414a <HAL_RCC_OscConfig+0x652>
 8004148:	e078      	b.n	800423c <HAL_RCC_OscConfig+0x744>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800414e:	2b02      	cmp	r3, #2
 8004150:	d159      	bne.n	8004206 <HAL_RCC_OscConfig+0x70e>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004152:	4b05      	ldr	r3, [pc, #20]	; (8004168 <HAL_RCC_OscConfig+0x670>)
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	4b04      	ldr	r3, [pc, #16]	; (8004168 <HAL_RCC_OscConfig+0x670>)
 8004158:	490c      	ldr	r1, [pc, #48]	; (800418c <HAL_RCC_OscConfig+0x694>)
 800415a:	400a      	ands	r2, r1
 800415c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800415e:	f7fe fafd 	bl	800275c <HAL_GetTick>
 8004162:	0003      	movs	r3, r0
 8004164:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004166:	e01c      	b.n	80041a2 <HAL_RCC_OscConfig+0x6aa>
 8004168:	40021000 	.word	0x40021000
 800416c:	ffff1fff 	.word	0xffff1fff
 8004170:	fffffeff 	.word	0xfffffeff
 8004174:	40007000 	.word	0x40007000
 8004178:	fffffbff 	.word	0xfffffbff
 800417c:	00001388 	.word	0x00001388
 8004180:	efffffff 	.word	0xefffffff
 8004184:	40010000 	.word	0x40010000
 8004188:	ffffdfff 	.word	0xffffdfff
 800418c:	feffffff 	.word	0xfeffffff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004190:	f7fe fae4 	bl	800275c <HAL_GetTick>
 8004194:	0002      	movs	r2, r0
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	1ad3      	subs	r3, r2, r3
 800419a:	2b02      	cmp	r3, #2
 800419c:	d901      	bls.n	80041a2 <HAL_RCC_OscConfig+0x6aa>
          {
            return HAL_TIMEOUT;
 800419e:	2303      	movs	r3, #3
 80041a0:	e070      	b.n	8004284 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80041a2:	4b3a      	ldr	r3, [pc, #232]	; (800428c <HAL_RCC_OscConfig+0x794>)
 80041a4:	681a      	ldr	r2, [r3, #0]
 80041a6:	2380      	movs	r3, #128	; 0x80
 80041a8:	049b      	lsls	r3, r3, #18
 80041aa:	4013      	ands	r3, r2
 80041ac:	d1f0      	bne.n	8004190 <HAL_RCC_OscConfig+0x698>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80041ae:	4b37      	ldr	r3, [pc, #220]	; (800428c <HAL_RCC_OscConfig+0x794>)
 80041b0:	68db      	ldr	r3, [r3, #12]
 80041b2:	4a37      	ldr	r2, [pc, #220]	; (8004290 <HAL_RCC_OscConfig+0x798>)
 80041b4:	4013      	ands	r3, r2
 80041b6:	0019      	movs	r1, r3
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041c0:	431a      	orrs	r2, r3
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041c6:	431a      	orrs	r2, r3
 80041c8:	4b30      	ldr	r3, [pc, #192]	; (800428c <HAL_RCC_OscConfig+0x794>)
 80041ca:	430a      	orrs	r2, r1
 80041cc:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041ce:	4b2f      	ldr	r3, [pc, #188]	; (800428c <HAL_RCC_OscConfig+0x794>)
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	4b2e      	ldr	r3, [pc, #184]	; (800428c <HAL_RCC_OscConfig+0x794>)
 80041d4:	2180      	movs	r1, #128	; 0x80
 80041d6:	0449      	lsls	r1, r1, #17
 80041d8:	430a      	orrs	r2, r1
 80041da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041dc:	f7fe fabe 	bl	800275c <HAL_GetTick>
 80041e0:	0003      	movs	r3, r0
 80041e2:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80041e4:	e008      	b.n	80041f8 <HAL_RCC_OscConfig+0x700>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041e6:	f7fe fab9 	bl	800275c <HAL_GetTick>
 80041ea:	0002      	movs	r2, r0
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	1ad3      	subs	r3, r2, r3
 80041f0:	2b02      	cmp	r3, #2
 80041f2:	d901      	bls.n	80041f8 <HAL_RCC_OscConfig+0x700>
          {
            return HAL_TIMEOUT;
 80041f4:	2303      	movs	r3, #3
 80041f6:	e045      	b.n	8004284 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80041f8:	4b24      	ldr	r3, [pc, #144]	; (800428c <HAL_RCC_OscConfig+0x794>)
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	2380      	movs	r3, #128	; 0x80
 80041fe:	049b      	lsls	r3, r3, #18
 8004200:	4013      	ands	r3, r2
 8004202:	d0f0      	beq.n	80041e6 <HAL_RCC_OscConfig+0x6ee>
 8004204:	e03d      	b.n	8004282 <HAL_RCC_OscConfig+0x78a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004206:	4b21      	ldr	r3, [pc, #132]	; (800428c <HAL_RCC_OscConfig+0x794>)
 8004208:	681a      	ldr	r2, [r3, #0]
 800420a:	4b20      	ldr	r3, [pc, #128]	; (800428c <HAL_RCC_OscConfig+0x794>)
 800420c:	4921      	ldr	r1, [pc, #132]	; (8004294 <HAL_RCC_OscConfig+0x79c>)
 800420e:	400a      	ands	r2, r1
 8004210:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004212:	f7fe faa3 	bl	800275c <HAL_GetTick>
 8004216:	0003      	movs	r3, r0
 8004218:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800421a:	e008      	b.n	800422e <HAL_RCC_OscConfig+0x736>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800421c:	f7fe fa9e 	bl	800275c <HAL_GetTick>
 8004220:	0002      	movs	r2, r0
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	1ad3      	subs	r3, r2, r3
 8004226:	2b02      	cmp	r3, #2
 8004228:	d901      	bls.n	800422e <HAL_RCC_OscConfig+0x736>
          {
            return HAL_TIMEOUT;
 800422a:	2303      	movs	r3, #3
 800422c:	e02a      	b.n	8004284 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800422e:	4b17      	ldr	r3, [pc, #92]	; (800428c <HAL_RCC_OscConfig+0x794>)
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	2380      	movs	r3, #128	; 0x80
 8004234:	049b      	lsls	r3, r3, #18
 8004236:	4013      	ands	r3, r2
 8004238:	d1f0      	bne.n	800421c <HAL_RCC_OscConfig+0x724>
 800423a:	e022      	b.n	8004282 <HAL_RCC_OscConfig+0x78a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004240:	2b01      	cmp	r3, #1
 8004242:	d101      	bne.n	8004248 <HAL_RCC_OscConfig+0x750>
      {
        return HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	e01d      	b.n	8004284 <HAL_RCC_OscConfig+0x78c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004248:	4b10      	ldr	r3, [pc, #64]	; (800428c <HAL_RCC_OscConfig+0x794>)
 800424a:	68db      	ldr	r3, [r3, #12]
 800424c:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800424e:	69ba      	ldr	r2, [r7, #24]
 8004250:	2380      	movs	r3, #128	; 0x80
 8004252:	025b      	lsls	r3, r3, #9
 8004254:	401a      	ands	r2, r3
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800425a:	429a      	cmp	r2, r3
 800425c:	d10f      	bne.n	800427e <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800425e:	69ba      	ldr	r2, [r7, #24]
 8004260:	23f0      	movs	r3, #240	; 0xf0
 8004262:	039b      	lsls	r3, r3, #14
 8004264:	401a      	ands	r2, r3
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800426a:	429a      	cmp	r2, r3
 800426c:	d107      	bne.n	800427e <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800426e:	69ba      	ldr	r2, [r7, #24]
 8004270:	23c0      	movs	r3, #192	; 0xc0
 8004272:	041b      	lsls	r3, r3, #16
 8004274:	401a      	ands	r2, r3
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800427a:	429a      	cmp	r2, r3
 800427c:	d001      	beq.n	8004282 <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	e000      	b.n	8004284 <HAL_RCC_OscConfig+0x78c>
        }
      }
    }
  }

  return HAL_OK;
 8004282:	2300      	movs	r3, #0
}
 8004284:	0018      	movs	r0, r3
 8004286:	46bd      	mov	sp, r7
 8004288:	b00a      	add	sp, #40	; 0x28
 800428a:	bdb0      	pop	{r4, r5, r7, pc}
 800428c:	40021000 	.word	0x40021000
 8004290:	ff02ffff 	.word	0xff02ffff
 8004294:	feffffff 	.word	0xfeffffff

08004298 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004298:	b5b0      	push	{r4, r5, r7, lr}
 800429a:	b084      	sub	sp, #16
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
 80042a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d101      	bne.n	80042ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80042a8:	2301      	movs	r3, #1
 80042aa:	e10d      	b.n	80044c8 <HAL_RCC_ClockConfig+0x230>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80042ac:	4b88      	ldr	r3, [pc, #544]	; (80044d0 <HAL_RCC_ClockConfig+0x238>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	2201      	movs	r2, #1
 80042b2:	4013      	ands	r3, r2
 80042b4:	683a      	ldr	r2, [r7, #0]
 80042b6:	429a      	cmp	r2, r3
 80042b8:	d911      	bls.n	80042de <HAL_RCC_ClockConfig+0x46>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042ba:	4b85      	ldr	r3, [pc, #532]	; (80044d0 <HAL_RCC_ClockConfig+0x238>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	2201      	movs	r2, #1
 80042c0:	4393      	bics	r3, r2
 80042c2:	0019      	movs	r1, r3
 80042c4:	4b82      	ldr	r3, [pc, #520]	; (80044d0 <HAL_RCC_ClockConfig+0x238>)
 80042c6:	683a      	ldr	r2, [r7, #0]
 80042c8:	430a      	orrs	r2, r1
 80042ca:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042cc:	4b80      	ldr	r3, [pc, #512]	; (80044d0 <HAL_RCC_ClockConfig+0x238>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	2201      	movs	r2, #1
 80042d2:	4013      	ands	r3, r2
 80042d4:	683a      	ldr	r2, [r7, #0]
 80042d6:	429a      	cmp	r2, r3
 80042d8:	d001      	beq.n	80042de <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	e0f4      	b.n	80044c8 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	2202      	movs	r2, #2
 80042e4:	4013      	ands	r3, r2
 80042e6:	d009      	beq.n	80042fc <HAL_RCC_ClockConfig+0x64>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042e8:	4b7a      	ldr	r3, [pc, #488]	; (80044d4 <HAL_RCC_ClockConfig+0x23c>)
 80042ea:	68db      	ldr	r3, [r3, #12]
 80042ec:	22f0      	movs	r2, #240	; 0xf0
 80042ee:	4393      	bics	r3, r2
 80042f0:	0019      	movs	r1, r3
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	689a      	ldr	r2, [r3, #8]
 80042f6:	4b77      	ldr	r3, [pc, #476]	; (80044d4 <HAL_RCC_ClockConfig+0x23c>)
 80042f8:	430a      	orrs	r2, r1
 80042fa:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	2201      	movs	r2, #1
 8004302:	4013      	ands	r3, r2
 8004304:	d100      	bne.n	8004308 <HAL_RCC_ClockConfig+0x70>
 8004306:	e089      	b.n	800441c <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	2b02      	cmp	r3, #2
 800430e:	d107      	bne.n	8004320 <HAL_RCC_ClockConfig+0x88>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004310:	4b70      	ldr	r3, [pc, #448]	; (80044d4 <HAL_RCC_ClockConfig+0x23c>)
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	2380      	movs	r3, #128	; 0x80
 8004316:	029b      	lsls	r3, r3, #10
 8004318:	4013      	ands	r3, r2
 800431a:	d120      	bne.n	800435e <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	e0d3      	b.n	80044c8 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	2b03      	cmp	r3, #3
 8004326:	d107      	bne.n	8004338 <HAL_RCC_ClockConfig+0xa0>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004328:	4b6a      	ldr	r3, [pc, #424]	; (80044d4 <HAL_RCC_ClockConfig+0x23c>)
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	2380      	movs	r3, #128	; 0x80
 800432e:	049b      	lsls	r3, r3, #18
 8004330:	4013      	ands	r3, r2
 8004332:	d114      	bne.n	800435e <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	e0c7      	b.n	80044c8 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	2b01      	cmp	r3, #1
 800433e:	d106      	bne.n	800434e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004340:	4b64      	ldr	r3, [pc, #400]	; (80044d4 <HAL_RCC_ClockConfig+0x23c>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	2204      	movs	r2, #4
 8004346:	4013      	ands	r3, r2
 8004348:	d109      	bne.n	800435e <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	e0bc      	b.n	80044c8 <HAL_RCC_ClockConfig+0x230>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800434e:	4b61      	ldr	r3, [pc, #388]	; (80044d4 <HAL_RCC_ClockConfig+0x23c>)
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	2380      	movs	r3, #128	; 0x80
 8004354:	009b      	lsls	r3, r3, #2
 8004356:	4013      	ands	r3, r2
 8004358:	d101      	bne.n	800435e <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e0b4      	b.n	80044c8 <HAL_RCC_ClockConfig+0x230>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800435e:	4b5d      	ldr	r3, [pc, #372]	; (80044d4 <HAL_RCC_ClockConfig+0x23c>)
 8004360:	68db      	ldr	r3, [r3, #12]
 8004362:	2203      	movs	r2, #3
 8004364:	4393      	bics	r3, r2
 8004366:	0019      	movs	r1, r3
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	685a      	ldr	r2, [r3, #4]
 800436c:	4b59      	ldr	r3, [pc, #356]	; (80044d4 <HAL_RCC_ClockConfig+0x23c>)
 800436e:	430a      	orrs	r2, r1
 8004370:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004372:	f7fe f9f3 	bl	800275c <HAL_GetTick>
 8004376:	0003      	movs	r3, r0
 8004378:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	2b02      	cmp	r3, #2
 8004380:	d111      	bne.n	80043a6 <HAL_RCC_ClockConfig+0x10e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004382:	e009      	b.n	8004398 <HAL_RCC_ClockConfig+0x100>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004384:	f7fe f9ea 	bl	800275c <HAL_GetTick>
 8004388:	0002      	movs	r2, r0
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	1ad3      	subs	r3, r2, r3
 800438e:	4a52      	ldr	r2, [pc, #328]	; (80044d8 <HAL_RCC_ClockConfig+0x240>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d901      	bls.n	8004398 <HAL_RCC_ClockConfig+0x100>
        {
          return HAL_TIMEOUT;
 8004394:	2303      	movs	r3, #3
 8004396:	e097      	b.n	80044c8 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004398:	4b4e      	ldr	r3, [pc, #312]	; (80044d4 <HAL_RCC_ClockConfig+0x23c>)
 800439a:	68db      	ldr	r3, [r3, #12]
 800439c:	220c      	movs	r2, #12
 800439e:	4013      	ands	r3, r2
 80043a0:	2b08      	cmp	r3, #8
 80043a2:	d1ef      	bne.n	8004384 <HAL_RCC_ClockConfig+0xec>
 80043a4:	e03a      	b.n	800441c <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	2b03      	cmp	r3, #3
 80043ac:	d111      	bne.n	80043d2 <HAL_RCC_ClockConfig+0x13a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80043ae:	e009      	b.n	80043c4 <HAL_RCC_ClockConfig+0x12c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043b0:	f7fe f9d4 	bl	800275c <HAL_GetTick>
 80043b4:	0002      	movs	r2, r0
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	1ad3      	subs	r3, r2, r3
 80043ba:	4a47      	ldr	r2, [pc, #284]	; (80044d8 <HAL_RCC_ClockConfig+0x240>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d901      	bls.n	80043c4 <HAL_RCC_ClockConfig+0x12c>
        {
          return HAL_TIMEOUT;
 80043c0:	2303      	movs	r3, #3
 80043c2:	e081      	b.n	80044c8 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80043c4:	4b43      	ldr	r3, [pc, #268]	; (80044d4 <HAL_RCC_ClockConfig+0x23c>)
 80043c6:	68db      	ldr	r3, [r3, #12]
 80043c8:	220c      	movs	r2, #12
 80043ca:	4013      	ands	r3, r2
 80043cc:	2b0c      	cmp	r3, #12
 80043ce:	d1ef      	bne.n	80043b0 <HAL_RCC_ClockConfig+0x118>
 80043d0:	e024      	b.n	800441c <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	2b01      	cmp	r3, #1
 80043d8:	d11b      	bne.n	8004412 <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80043da:	e009      	b.n	80043f0 <HAL_RCC_ClockConfig+0x158>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043dc:	f7fe f9be 	bl	800275c <HAL_GetTick>
 80043e0:	0002      	movs	r2, r0
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	1ad3      	subs	r3, r2, r3
 80043e6:	4a3c      	ldr	r2, [pc, #240]	; (80044d8 <HAL_RCC_ClockConfig+0x240>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d901      	bls.n	80043f0 <HAL_RCC_ClockConfig+0x158>
        {
          return HAL_TIMEOUT;
 80043ec:	2303      	movs	r3, #3
 80043ee:	e06b      	b.n	80044c8 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80043f0:	4b38      	ldr	r3, [pc, #224]	; (80044d4 <HAL_RCC_ClockConfig+0x23c>)
 80043f2:	68db      	ldr	r3, [r3, #12]
 80043f4:	220c      	movs	r2, #12
 80043f6:	4013      	ands	r3, r2
 80043f8:	2b04      	cmp	r3, #4
 80043fa:	d1ef      	bne.n	80043dc <HAL_RCC_ClockConfig+0x144>
 80043fc:	e00e      	b.n	800441c <HAL_RCC_ClockConfig+0x184>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043fe:	f7fe f9ad 	bl	800275c <HAL_GetTick>
 8004402:	0002      	movs	r2, r0
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	1ad3      	subs	r3, r2, r3
 8004408:	4a33      	ldr	r2, [pc, #204]	; (80044d8 <HAL_RCC_ClockConfig+0x240>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d901      	bls.n	8004412 <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 800440e:	2303      	movs	r3, #3
 8004410:	e05a      	b.n	80044c8 <HAL_RCC_ClockConfig+0x230>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004412:	4b30      	ldr	r3, [pc, #192]	; (80044d4 <HAL_RCC_ClockConfig+0x23c>)
 8004414:	68db      	ldr	r3, [r3, #12]
 8004416:	220c      	movs	r2, #12
 8004418:	4013      	ands	r3, r2
 800441a:	d1f0      	bne.n	80043fe <HAL_RCC_ClockConfig+0x166>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800441c:	4b2c      	ldr	r3, [pc, #176]	; (80044d0 <HAL_RCC_ClockConfig+0x238>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	2201      	movs	r2, #1
 8004422:	4013      	ands	r3, r2
 8004424:	683a      	ldr	r2, [r7, #0]
 8004426:	429a      	cmp	r2, r3
 8004428:	d211      	bcs.n	800444e <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800442a:	4b29      	ldr	r3, [pc, #164]	; (80044d0 <HAL_RCC_ClockConfig+0x238>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	2201      	movs	r2, #1
 8004430:	4393      	bics	r3, r2
 8004432:	0019      	movs	r1, r3
 8004434:	4b26      	ldr	r3, [pc, #152]	; (80044d0 <HAL_RCC_ClockConfig+0x238>)
 8004436:	683a      	ldr	r2, [r7, #0]
 8004438:	430a      	orrs	r2, r1
 800443a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800443c:	4b24      	ldr	r3, [pc, #144]	; (80044d0 <HAL_RCC_ClockConfig+0x238>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	2201      	movs	r2, #1
 8004442:	4013      	ands	r3, r2
 8004444:	683a      	ldr	r2, [r7, #0]
 8004446:	429a      	cmp	r2, r3
 8004448:	d001      	beq.n	800444e <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	e03c      	b.n	80044c8 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	2204      	movs	r2, #4
 8004454:	4013      	ands	r3, r2
 8004456:	d009      	beq.n	800446c <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004458:	4b1e      	ldr	r3, [pc, #120]	; (80044d4 <HAL_RCC_ClockConfig+0x23c>)
 800445a:	68db      	ldr	r3, [r3, #12]
 800445c:	4a1f      	ldr	r2, [pc, #124]	; (80044dc <HAL_RCC_ClockConfig+0x244>)
 800445e:	4013      	ands	r3, r2
 8004460:	0019      	movs	r1, r3
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	68da      	ldr	r2, [r3, #12]
 8004466:	4b1b      	ldr	r3, [pc, #108]	; (80044d4 <HAL_RCC_ClockConfig+0x23c>)
 8004468:	430a      	orrs	r2, r1
 800446a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	2208      	movs	r2, #8
 8004472:	4013      	ands	r3, r2
 8004474:	d00a      	beq.n	800448c <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004476:	4b17      	ldr	r3, [pc, #92]	; (80044d4 <HAL_RCC_ClockConfig+0x23c>)
 8004478:	68db      	ldr	r3, [r3, #12]
 800447a:	4a19      	ldr	r2, [pc, #100]	; (80044e0 <HAL_RCC_ClockConfig+0x248>)
 800447c:	4013      	ands	r3, r2
 800447e:	0019      	movs	r1, r3
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	691b      	ldr	r3, [r3, #16]
 8004484:	00da      	lsls	r2, r3, #3
 8004486:	4b13      	ldr	r3, [pc, #76]	; (80044d4 <HAL_RCC_ClockConfig+0x23c>)
 8004488:	430a      	orrs	r2, r1
 800448a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800448c:	f000 f82e 	bl	80044ec <HAL_RCC_GetSysClockFreq>
 8004490:	0001      	movs	r1, r0
 8004492:	4b10      	ldr	r3, [pc, #64]	; (80044d4 <HAL_RCC_ClockConfig+0x23c>)
 8004494:	68db      	ldr	r3, [r3, #12]
 8004496:	091b      	lsrs	r3, r3, #4
 8004498:	220f      	movs	r2, #15
 800449a:	4013      	ands	r3, r2
 800449c:	4a11      	ldr	r2, [pc, #68]	; (80044e4 <HAL_RCC_ClockConfig+0x24c>)
 800449e:	5cd3      	ldrb	r3, [r2, r3]
 80044a0:	000a      	movs	r2, r1
 80044a2:	40da      	lsrs	r2, r3
 80044a4:	4b10      	ldr	r3, [pc, #64]	; (80044e8 <HAL_RCC_ClockConfig+0x250>)
 80044a6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 80044a8:	250b      	movs	r5, #11
 80044aa:	197c      	adds	r4, r7, r5
 80044ac:	2000      	movs	r0, #0
 80044ae:	f7fe f91f 	bl	80026f0 <HAL_InitTick>
 80044b2:	0003      	movs	r3, r0
 80044b4:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80044b6:	197b      	adds	r3, r7, r5
 80044b8:	781b      	ldrb	r3, [r3, #0]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d003      	beq.n	80044c6 <HAL_RCC_ClockConfig+0x22e>
  {
    return status;
 80044be:	230b      	movs	r3, #11
 80044c0:	18fb      	adds	r3, r7, r3
 80044c2:	781b      	ldrb	r3, [r3, #0]
 80044c4:	e000      	b.n	80044c8 <HAL_RCC_ClockConfig+0x230>
  }

  return HAL_OK;
 80044c6:	2300      	movs	r3, #0
}
 80044c8:	0018      	movs	r0, r3
 80044ca:	46bd      	mov	sp, r7
 80044cc:	b004      	add	sp, #16
 80044ce:	bdb0      	pop	{r4, r5, r7, pc}
 80044d0:	40022000 	.word	0x40022000
 80044d4:	40021000 	.word	0x40021000
 80044d8:	00001388 	.word	0x00001388
 80044dc:	fffff8ff 	.word	0xfffff8ff
 80044e0:	ffffc7ff 	.word	0xffffc7ff
 80044e4:	080073f8 	.word	0x080073f8
 80044e8:	20000000 	.word	0x20000000

080044ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b086      	sub	sp, #24
 80044f0:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80044f2:	4b3b      	ldr	r3, [pc, #236]	; (80045e0 <HAL_RCC_GetSysClockFreq+0xf4>)
 80044f4:	68db      	ldr	r3, [r3, #12]
 80044f6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	220c      	movs	r2, #12
 80044fc:	4013      	ands	r3, r2
 80044fe:	2b08      	cmp	r3, #8
 8004500:	d00e      	beq.n	8004520 <HAL_RCC_GetSysClockFreq+0x34>
 8004502:	2b0c      	cmp	r3, #12
 8004504:	d00f      	beq.n	8004526 <HAL_RCC_GetSysClockFreq+0x3a>
 8004506:	2b04      	cmp	r3, #4
 8004508:	d157      	bne.n	80045ba <HAL_RCC_GetSysClockFreq+0xce>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800450a:	4b35      	ldr	r3, [pc, #212]	; (80045e0 <HAL_RCC_GetSysClockFreq+0xf4>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	2210      	movs	r2, #16
 8004510:	4013      	ands	r3, r2
 8004512:	d002      	beq.n	800451a <HAL_RCC_GetSysClockFreq+0x2e>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8004514:	4b33      	ldr	r3, [pc, #204]	; (80045e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004516:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8004518:	e05d      	b.n	80045d6 <HAL_RCC_GetSysClockFreq+0xea>
        sysclockfreq =  HSI_VALUE;
 800451a:	4b33      	ldr	r3, [pc, #204]	; (80045e8 <HAL_RCC_GetSysClockFreq+0xfc>)
 800451c:	613b      	str	r3, [r7, #16]
      break;
 800451e:	e05a      	b.n	80045d6 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004520:	4b32      	ldr	r3, [pc, #200]	; (80045ec <HAL_RCC_GetSysClockFreq+0x100>)
 8004522:	613b      	str	r3, [r7, #16]
      break;
 8004524:	e057      	b.n	80045d6 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	0c9b      	lsrs	r3, r3, #18
 800452a:	220f      	movs	r2, #15
 800452c:	4013      	ands	r3, r2
 800452e:	4a30      	ldr	r2, [pc, #192]	; (80045f0 <HAL_RCC_GetSysClockFreq+0x104>)
 8004530:	5cd3      	ldrb	r3, [r2, r3]
 8004532:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	0d9b      	lsrs	r3, r3, #22
 8004538:	2203      	movs	r2, #3
 800453a:	4013      	ands	r3, r2
 800453c:	3301      	adds	r3, #1
 800453e:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004540:	4b27      	ldr	r3, [pc, #156]	; (80045e0 <HAL_RCC_GetSysClockFreq+0xf4>)
 8004542:	68da      	ldr	r2, [r3, #12]
 8004544:	2380      	movs	r3, #128	; 0x80
 8004546:	025b      	lsls	r3, r3, #9
 8004548:	4013      	ands	r3, r2
 800454a:	d00f      	beq.n	800456c <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 800454c:	68b9      	ldr	r1, [r7, #8]
 800454e:	000a      	movs	r2, r1
 8004550:	0152      	lsls	r2, r2, #5
 8004552:	1a52      	subs	r2, r2, r1
 8004554:	0193      	lsls	r3, r2, #6
 8004556:	1a9b      	subs	r3, r3, r2
 8004558:	00db      	lsls	r3, r3, #3
 800455a:	185b      	adds	r3, r3, r1
 800455c:	025b      	lsls	r3, r3, #9
 800455e:	6879      	ldr	r1, [r7, #4]
 8004560:	0018      	movs	r0, r3
 8004562:	f7fb fdd1 	bl	8000108 <__udivsi3>
 8004566:	0003      	movs	r3, r0
 8004568:	617b      	str	r3, [r7, #20]
 800456a:	e023      	b.n	80045b4 <HAL_RCC_GetSysClockFreq+0xc8>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800456c:	4b1c      	ldr	r3, [pc, #112]	; (80045e0 <HAL_RCC_GetSysClockFreq+0xf4>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	2210      	movs	r2, #16
 8004572:	4013      	ands	r3, r2
 8004574:	d00f      	beq.n	8004596 <HAL_RCC_GetSysClockFreq+0xaa>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8004576:	68b9      	ldr	r1, [r7, #8]
 8004578:	000a      	movs	r2, r1
 800457a:	0152      	lsls	r2, r2, #5
 800457c:	1a52      	subs	r2, r2, r1
 800457e:	0193      	lsls	r3, r2, #6
 8004580:	1a9b      	subs	r3, r3, r2
 8004582:	00db      	lsls	r3, r3, #3
 8004584:	185b      	adds	r3, r3, r1
 8004586:	021b      	lsls	r3, r3, #8
 8004588:	6879      	ldr	r1, [r7, #4]
 800458a:	0018      	movs	r0, r3
 800458c:	f7fb fdbc 	bl	8000108 <__udivsi3>
 8004590:	0003      	movs	r3, r0
 8004592:	617b      	str	r3, [r7, #20]
 8004594:	e00e      	b.n	80045b4 <HAL_RCC_GetSysClockFreq+0xc8>
        }
        else
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 8004596:	68b9      	ldr	r1, [r7, #8]
 8004598:	000a      	movs	r2, r1
 800459a:	0152      	lsls	r2, r2, #5
 800459c:	1a52      	subs	r2, r2, r1
 800459e:	0193      	lsls	r3, r2, #6
 80045a0:	1a9b      	subs	r3, r3, r2
 80045a2:	00db      	lsls	r3, r3, #3
 80045a4:	185b      	adds	r3, r3, r1
 80045a6:	029b      	lsls	r3, r3, #10
 80045a8:	6879      	ldr	r1, [r7, #4]
 80045aa:	0018      	movs	r0, r3
 80045ac:	f7fb fdac 	bl	8000108 <__udivsi3>
 80045b0:	0003      	movs	r3, r0
 80045b2:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	613b      	str	r3, [r7, #16]
      break;
 80045b8:	e00d      	b.n	80045d6 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80045ba:	4b09      	ldr	r3, [pc, #36]	; (80045e0 <HAL_RCC_GetSysClockFreq+0xf4>)
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	0b5b      	lsrs	r3, r3, #13
 80045c0:	2207      	movs	r2, #7
 80045c2:	4013      	ands	r3, r2
 80045c4:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	3301      	adds	r3, #1
 80045ca:	2280      	movs	r2, #128	; 0x80
 80045cc:	0212      	lsls	r2, r2, #8
 80045ce:	409a      	lsls	r2, r3
 80045d0:	0013      	movs	r3, r2
 80045d2:	613b      	str	r3, [r7, #16]
      break;
 80045d4:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80045d6:	693b      	ldr	r3, [r7, #16]
}
 80045d8:	0018      	movs	r0, r3
 80045da:	46bd      	mov	sp, r7
 80045dc:	b006      	add	sp, #24
 80045de:	bd80      	pop	{r7, pc}
 80045e0:	40021000 	.word	0x40021000
 80045e4:	003d0900 	.word	0x003d0900
 80045e8:	00f42400 	.word	0x00f42400
 80045ec:	007a1200 	.word	0x007a1200
 80045f0:	08007408 	.word	0x08007408

080045f4 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b086      	sub	sp, #24
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	2220      	movs	r2, #32
 8004602:	4013      	ands	r3, r2
 8004604:	d106      	bne.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x20>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	2380      	movs	r3, #128	; 0x80
 800460c:	011b      	lsls	r3, r3, #4
 800460e:	4013      	ands	r3, r2
 8004610:	d100      	bne.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x20>
 8004612:	e0dd      	b.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 8004614:	2317      	movs	r3, #23
 8004616:	18fb      	adds	r3, r7, r3
 8004618:	2200      	movs	r2, #0
 800461a:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800461c:	4ba4      	ldr	r3, [pc, #656]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800461e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004620:	2380      	movs	r3, #128	; 0x80
 8004622:	055b      	lsls	r3, r3, #21
 8004624:	4013      	ands	r3, r2
 8004626:	d10a      	bne.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004628:	4ba1      	ldr	r3, [pc, #644]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800462a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800462c:	4ba0      	ldr	r3, [pc, #640]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800462e:	2180      	movs	r1, #128	; 0x80
 8004630:	0549      	lsls	r1, r1, #21
 8004632:	430a      	orrs	r2, r1
 8004634:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8004636:	2317      	movs	r3, #23
 8004638:	18fb      	adds	r3, r7, r3
 800463a:	2201      	movs	r2, #1
 800463c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800463e:	4b9d      	ldr	r3, [pc, #628]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8004640:	681a      	ldr	r2, [r3, #0]
 8004642:	2380      	movs	r3, #128	; 0x80
 8004644:	005b      	lsls	r3, r3, #1
 8004646:	4013      	ands	r3, r2
 8004648:	d11a      	bne.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800464a:	4b9a      	ldr	r3, [pc, #616]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	4b99      	ldr	r3, [pc, #612]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8004650:	2180      	movs	r1, #128	; 0x80
 8004652:	0049      	lsls	r1, r1, #1
 8004654:	430a      	orrs	r2, r1
 8004656:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004658:	f7fe f880 	bl	800275c <HAL_GetTick>
 800465c:	0003      	movs	r3, r0
 800465e:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004660:	e008      	b.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004662:	f7fe f87b 	bl	800275c <HAL_GetTick>
 8004666:	0002      	movs	r2, r0
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	1ad3      	subs	r3, r2, r3
 800466c:	2b64      	cmp	r3, #100	; 0x64
 800466e:	d901      	bls.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004670:	2303      	movs	r3, #3
 8004672:	e118      	b.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004674:	4b8f      	ldr	r3, [pc, #572]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8004676:	681a      	ldr	r2, [r3, #0]
 8004678:	2380      	movs	r3, #128	; 0x80
 800467a:	005b      	lsls	r3, r3, #1
 800467c:	4013      	ands	r3, r2
 800467e:	d0f0      	beq.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8004680:	4b8b      	ldr	r3, [pc, #556]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004682:	681a      	ldr	r2, [r3, #0]
 8004684:	23c0      	movs	r3, #192	; 0xc0
 8004686:	039b      	lsls	r3, r3, #14
 8004688:	4013      	ands	r3, r2
 800468a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	685a      	ldr	r2, [r3, #4]
 8004690:	23c0      	movs	r3, #192	; 0xc0
 8004692:	039b      	lsls	r3, r3, #14
 8004694:	4013      	ands	r3, r2
 8004696:	68fa      	ldr	r2, [r7, #12]
 8004698:	429a      	cmp	r2, r3
 800469a:	d107      	bne.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	689a      	ldr	r2, [r3, #8]
 80046a0:	23c0      	movs	r3, #192	; 0xc0
 80046a2:	039b      	lsls	r3, r3, #14
 80046a4:	4013      	ands	r3, r2
 80046a6:	68fa      	ldr	r2, [r7, #12]
 80046a8:	429a      	cmp	r2, r3
 80046aa:	d013      	beq.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	685a      	ldr	r2, [r3, #4]
 80046b0:	23c0      	movs	r3, #192	; 0xc0
 80046b2:	029b      	lsls	r3, r3, #10
 80046b4:	401a      	ands	r2, r3
 80046b6:	23c0      	movs	r3, #192	; 0xc0
 80046b8:	029b      	lsls	r3, r3, #10
 80046ba:	429a      	cmp	r2, r3
 80046bc:	d10a      	bne.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80046be:	4b7c      	ldr	r3, [pc, #496]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80046c0:	681a      	ldr	r2, [r3, #0]
 80046c2:	2380      	movs	r3, #128	; 0x80
 80046c4:	029b      	lsls	r3, r3, #10
 80046c6:	401a      	ands	r2, r3
 80046c8:	2380      	movs	r3, #128	; 0x80
 80046ca:	029b      	lsls	r3, r3, #10
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d101      	bne.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80046d0:	2301      	movs	r3, #1
 80046d2:	e0e8      	b.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80046d4:	4b76      	ldr	r3, [pc, #472]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80046d6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80046d8:	23c0      	movs	r3, #192	; 0xc0
 80046da:	029b      	lsls	r3, r3, #10
 80046dc:	4013      	ands	r3, r2
 80046de:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d049      	beq.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x186>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	685a      	ldr	r2, [r3, #4]
 80046ea:	23c0      	movs	r3, #192	; 0xc0
 80046ec:	029b      	lsls	r3, r3, #10
 80046ee:	4013      	ands	r3, r2
 80046f0:	68fa      	ldr	r2, [r7, #12]
 80046f2:	429a      	cmp	r2, r3
 80046f4:	d004      	beq.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	2220      	movs	r2, #32
 80046fc:	4013      	ands	r3, r2
 80046fe:	d10d      	bne.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	689a      	ldr	r2, [r3, #8]
 8004704:	23c0      	movs	r3, #192	; 0xc0
 8004706:	029b      	lsls	r3, r3, #10
 8004708:	4013      	ands	r3, r2
 800470a:	68fa      	ldr	r2, [r7, #12]
 800470c:	429a      	cmp	r2, r3
 800470e:	d034      	beq.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681a      	ldr	r2, [r3, #0]
 8004714:	2380      	movs	r3, #128	; 0x80
 8004716:	011b      	lsls	r3, r3, #4
 8004718:	4013      	ands	r3, r2
 800471a:	d02e      	beq.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800471c:	4b64      	ldr	r3, [pc, #400]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800471e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004720:	4a65      	ldr	r2, [pc, #404]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004722:	4013      	ands	r3, r2
 8004724:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004726:	4b62      	ldr	r3, [pc, #392]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004728:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800472a:	4b61      	ldr	r3, [pc, #388]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800472c:	2180      	movs	r1, #128	; 0x80
 800472e:	0309      	lsls	r1, r1, #12
 8004730:	430a      	orrs	r2, r1
 8004732:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004734:	4b5e      	ldr	r3, [pc, #376]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004736:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004738:	4b5d      	ldr	r3, [pc, #372]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800473a:	4960      	ldr	r1, [pc, #384]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800473c:	400a      	ands	r2, r1
 800473e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8004740:	4b5b      	ldr	r3, [pc, #364]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004742:	68fa      	ldr	r2, [r7, #12]
 8004744:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8004746:	68fa      	ldr	r2, [r7, #12]
 8004748:	2380      	movs	r3, #128	; 0x80
 800474a:	005b      	lsls	r3, r3, #1
 800474c:	4013      	ands	r3, r2
 800474e:	d014      	beq.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004750:	f7fe f804 	bl	800275c <HAL_GetTick>
 8004754:	0003      	movs	r3, r0
 8004756:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004758:	e009      	b.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800475a:	f7fd ffff 	bl	800275c <HAL_GetTick>
 800475e:	0002      	movs	r2, r0
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	1ad3      	subs	r3, r2, r3
 8004764:	4a56      	ldr	r2, [pc, #344]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d901      	bls.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 800476a:	2303      	movs	r3, #3
 800476c:	e09b      	b.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800476e:	4b50      	ldr	r3, [pc, #320]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004770:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004772:	2380      	movs	r3, #128	; 0x80
 8004774:	009b      	lsls	r3, r3, #2
 8004776:	4013      	ands	r3, r2
 8004778:	d0ef      	beq.n	800475a <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	685a      	ldr	r2, [r3, #4]
 800477e:	23c0      	movs	r3, #192	; 0xc0
 8004780:	029b      	lsls	r3, r3, #10
 8004782:	401a      	ands	r2, r3
 8004784:	23c0      	movs	r3, #192	; 0xc0
 8004786:	029b      	lsls	r3, r3, #10
 8004788:	429a      	cmp	r2, r3
 800478a:	d10c      	bne.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 800478c:	4b48      	ldr	r3, [pc, #288]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a4c      	ldr	r2, [pc, #304]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8004792:	4013      	ands	r3, r2
 8004794:	0019      	movs	r1, r3
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	685a      	ldr	r2, [r3, #4]
 800479a:	23c0      	movs	r3, #192	; 0xc0
 800479c:	039b      	lsls	r3, r3, #14
 800479e:	401a      	ands	r2, r3
 80047a0:	4b43      	ldr	r3, [pc, #268]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80047a2:	430a      	orrs	r2, r1
 80047a4:	601a      	str	r2, [r3, #0]
 80047a6:	4b42      	ldr	r3, [pc, #264]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80047a8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	685a      	ldr	r2, [r3, #4]
 80047ae:	23c0      	movs	r3, #192	; 0xc0
 80047b0:	029b      	lsls	r3, r3, #10
 80047b2:	401a      	ands	r2, r3
 80047b4:	4b3e      	ldr	r3, [pc, #248]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80047b6:	430a      	orrs	r2, r1
 80047b8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80047ba:	2317      	movs	r3, #23
 80047bc:	18fb      	adds	r3, r7, r3
 80047be:	781b      	ldrb	r3, [r3, #0]
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	d105      	bne.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047c4:	4b3a      	ldr	r3, [pc, #232]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80047c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047c8:	4b39      	ldr	r3, [pc, #228]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80047ca:	493f      	ldr	r1, [pc, #252]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80047cc:	400a      	ands	r2, r1
 80047ce:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	2201      	movs	r2, #1
 80047d6:	4013      	ands	r3, r2
 80047d8:	d009      	beq.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80047da:	4b35      	ldr	r3, [pc, #212]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80047dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047de:	2203      	movs	r2, #3
 80047e0:	4393      	bics	r3, r2
 80047e2:	0019      	movs	r1, r3
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	68da      	ldr	r2, [r3, #12]
 80047e8:	4b31      	ldr	r3, [pc, #196]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80047ea:	430a      	orrs	r2, r1
 80047ec:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	2202      	movs	r2, #2
 80047f4:	4013      	ands	r3, r2
 80047f6:	d009      	beq.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80047f8:	4b2d      	ldr	r3, [pc, #180]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80047fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047fc:	220c      	movs	r2, #12
 80047fe:	4393      	bics	r3, r2
 8004800:	0019      	movs	r1, r3
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	691a      	ldr	r2, [r3, #16]
 8004806:	4b2a      	ldr	r3, [pc, #168]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004808:	430a      	orrs	r2, r1
 800480a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	2204      	movs	r2, #4
 8004812:	4013      	ands	r3, r2
 8004814:	d009      	beq.n	800482a <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004816:	4b26      	ldr	r3, [pc, #152]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800481a:	4a2c      	ldr	r2, [pc, #176]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800481c:	4013      	ands	r3, r2
 800481e:	0019      	movs	r1, r3
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	695a      	ldr	r2, [r3, #20]
 8004824:	4b22      	ldr	r3, [pc, #136]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004826:	430a      	orrs	r2, r1
 8004828:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	2208      	movs	r2, #8
 8004830:	4013      	ands	r3, r2
 8004832:	d009      	beq.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004834:	4b1e      	ldr	r3, [pc, #120]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004836:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004838:	4a25      	ldr	r2, [pc, #148]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 800483a:	4013      	ands	r3, r2
 800483c:	0019      	movs	r1, r3
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	699a      	ldr	r2, [r3, #24]
 8004842:	4b1b      	ldr	r3, [pc, #108]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004844:	430a      	orrs	r2, r1
 8004846:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681a      	ldr	r2, [r3, #0]
 800484c:	2380      	movs	r3, #128	; 0x80
 800484e:	005b      	lsls	r3, r3, #1
 8004850:	4013      	ands	r3, r2
 8004852:	d009      	beq.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004854:	4b16      	ldr	r3, [pc, #88]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004856:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004858:	4a17      	ldr	r2, [pc, #92]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800485a:	4013      	ands	r3, r2
 800485c:	0019      	movs	r1, r3
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	69da      	ldr	r2, [r3, #28]
 8004862:	4b13      	ldr	r3, [pc, #76]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004864:	430a      	orrs	r2, r1
 8004866:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	2240      	movs	r2, #64	; 0x40
 800486e:	4013      	ands	r3, r2
 8004870:	d009      	beq.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004872:	4b0f      	ldr	r3, [pc, #60]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004876:	4a17      	ldr	r2, [pc, #92]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004878:	4013      	ands	r3, r2
 800487a:	0019      	movs	r1, r3
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004880:	4b0b      	ldr	r3, [pc, #44]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004882:	430a      	orrs	r2, r1
 8004884:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	2280      	movs	r2, #128	; 0x80
 800488c:	4013      	ands	r3, r2
 800488e:	d009      	beq.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8004890:	4b07      	ldr	r3, [pc, #28]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004892:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004894:	4a10      	ldr	r2, [pc, #64]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004896:	4013      	ands	r3, r2
 8004898:	0019      	movs	r1, r3
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6a1a      	ldr	r2, [r3, #32]
 800489e:	4b04      	ldr	r3, [pc, #16]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80048a0:	430a      	orrs	r2, r1
 80048a2:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80048a4:	2300      	movs	r3, #0
}
 80048a6:	0018      	movs	r0, r3
 80048a8:	46bd      	mov	sp, r7
 80048aa:	b006      	add	sp, #24
 80048ac:	bd80      	pop	{r7, pc}
 80048ae:	46c0      	nop			; (mov r8, r8)
 80048b0:	40021000 	.word	0x40021000
 80048b4:	40007000 	.word	0x40007000
 80048b8:	fffcffff 	.word	0xfffcffff
 80048bc:	fff7ffff 	.word	0xfff7ffff
 80048c0:	00001388 	.word	0x00001388
 80048c4:	ffcfffff 	.word	0xffcfffff
 80048c8:	efffffff 	.word	0xefffffff
 80048cc:	fffff3ff 	.word	0xfffff3ff
 80048d0:	ffffcfff 	.word	0xffffcfff
 80048d4:	fbffffff 	.word	0xfbffffff
 80048d8:	fff3ffff 	.word	0xfff3ffff

080048dc <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b082      	sub	sp, #8
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d101      	bne.n	80048ee <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80048ea:	2301      	movs	r3, #1
 80048ec:	e08e      	b.n	8004a0c <HAL_RTC_Init+0x130>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2221      	movs	r2, #33	; 0x21
 80048f2:	5c9b      	ldrb	r3, [r3, r2]
 80048f4:	b2db      	uxtb	r3, r3
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d107      	bne.n	800490a <HAL_RTC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2220      	movs	r2, #32
 80048fe:	2100      	movs	r1, #0
 8004900:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	0018      	movs	r0, r3
 8004906:	f7fd fce1 	bl	80022cc <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2221      	movs	r2, #33	; 0x21
 800490e:	2102      	movs	r1, #2
 8004910:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	22ca      	movs	r2, #202	; 0xca
 8004918:	625a      	str	r2, [r3, #36]	; 0x24
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	2253      	movs	r2, #83	; 0x53
 8004920:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	0018      	movs	r0, r3
 8004926:	f000 fcf4 	bl	8005312 <RTC_EnterInitMode>
 800492a:	1e03      	subs	r3, r0, #0
 800492c:	d009      	beq.n	8004942 <HAL_RTC_Init+0x66>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	22ff      	movs	r2, #255	; 0xff
 8004934:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2221      	movs	r2, #33	; 0x21
 800493a:	2104      	movs	r1, #4
 800493c:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	e064      	b.n	8004a0c <HAL_RTC_Init+0x130>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	689a      	ldr	r2, [r3, #8]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4931      	ldr	r1, [pc, #196]	; (8004a14 <HAL_RTC_Init+0x138>)
 800494e:	400a      	ands	r2, r1
 8004950:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	6899      	ldr	r1, [r3, #8]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	685a      	ldr	r2, [r3, #4]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	691b      	ldr	r3, [r3, #16]
 8004960:	431a      	orrs	r2, r3
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	699b      	ldr	r3, [r3, #24]
 8004966:	431a      	orrs	r2, r3
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	430a      	orrs	r2, r1
 800496e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	687a      	ldr	r2, [r7, #4]
 8004976:	68d2      	ldr	r2, [r2, #12]
 8004978:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	6919      	ldr	r1, [r3, #16]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	689b      	ldr	r3, [r3, #8]
 8004984:	041a      	lsls	r2, r3, #16
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	430a      	orrs	r2, r1
 800498c:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	68da      	ldr	r2, [r3, #12]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	2180      	movs	r1, #128	; 0x80
 800499a:	438a      	bics	r2, r1
 800499c:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	2103      	movs	r1, #3
 80049aa:	438a      	bics	r2, r1
 80049ac:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	69da      	ldr	r2, [r3, #28]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	695b      	ldr	r3, [r3, #20]
 80049bc:	431a      	orrs	r2, r3
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	430a      	orrs	r2, r1
 80049c4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	689b      	ldr	r3, [r3, #8]
 80049cc:	2220      	movs	r2, #32
 80049ce:	4013      	ands	r3, r2
 80049d0:	d113      	bne.n	80049fa <HAL_RTC_Init+0x11e>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	0018      	movs	r0, r3
 80049d6:	f000 fc75 	bl	80052c4 <HAL_RTC_WaitForSynchro>
 80049da:	1e03      	subs	r3, r0, #0
 80049dc:	d00d      	beq.n	80049fa <HAL_RTC_Init+0x11e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	22ff      	movs	r2, #255	; 0xff
 80049e4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2221      	movs	r2, #33	; 0x21
 80049ea:	2104      	movs	r1, #4
 80049ec:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2220      	movs	r2, #32
 80049f2:	2100      	movs	r1, #0
 80049f4:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80049f6:	2301      	movs	r3, #1
 80049f8:	e008      	b.n	8004a0c <HAL_RTC_Init+0x130>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	22ff      	movs	r2, #255	; 0xff
 8004a00:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2221      	movs	r2, #33	; 0x21
 8004a06:	2101      	movs	r1, #1
 8004a08:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004a0a:	2300      	movs	r3, #0
  }
}
 8004a0c:	0018      	movs	r0, r3
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	b002      	add	sp, #8
 8004a12:	bd80      	pop	{r7, pc}
 8004a14:	ff8fffbf 	.word	0xff8fffbf

08004a18 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004a18:	b590      	push	{r4, r7, lr}
 8004a1a:	b087      	sub	sp, #28
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	60f8      	str	r0, [r7, #12]
 8004a20:	60b9      	str	r1, [r7, #8]
 8004a22:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2220      	movs	r2, #32
 8004a28:	5c9b      	ldrb	r3, [r3, r2]
 8004a2a:	2b01      	cmp	r3, #1
 8004a2c:	d101      	bne.n	8004a32 <HAL_RTC_SetTime+0x1a>
 8004a2e:	2302      	movs	r3, #2
 8004a30:	e0ad      	b.n	8004b8e <HAL_RTC_SetTime+0x176>
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2220      	movs	r2, #32
 8004a36:	2101      	movs	r1, #1
 8004a38:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2221      	movs	r2, #33	; 0x21
 8004a3e:	2102      	movs	r1, #2
 8004a40:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d125      	bne.n	8004a94 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	2240      	movs	r2, #64	; 0x40
 8004a50:	4013      	ands	r3, r2
 8004a52:	d102      	bne.n	8004a5a <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	2200      	movs	r2, #0
 8004a58:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	781b      	ldrb	r3, [r3, #0]
 8004a5e:	0018      	movs	r0, r3
 8004a60:	f000 fc81 	bl	8005366 <RTC_ByteToBcd2>
 8004a64:	0003      	movs	r3, r0
 8004a66:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	785b      	ldrb	r3, [r3, #1]
 8004a6c:	0018      	movs	r0, r3
 8004a6e:	f000 fc7a 	bl	8005366 <RTC_ByteToBcd2>
 8004a72:	0003      	movs	r3, r0
 8004a74:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004a76:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	789b      	ldrb	r3, [r3, #2]
 8004a7c:	0018      	movs	r0, r3
 8004a7e:	f000 fc72 	bl	8005366 <RTC_ByteToBcd2>
 8004a82:	0003      	movs	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8004a84:	0022      	movs	r2, r4
 8004a86:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	78db      	ldrb	r3, [r3, #3]
 8004a8c:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	617b      	str	r3, [r7, #20]
 8004a92:	e017      	b.n	8004ac4 <HAL_RTC_SetTime+0xac>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	2240      	movs	r2, #64	; 0x40
 8004a9c:	4013      	ands	r3, r2
 8004a9e:	d102      	bne.n	8004aa6 <HAL_RTC_SetTime+0x8e>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	781b      	ldrb	r3, [r3, #0]
 8004aaa:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	785b      	ldrb	r3, [r3, #1]
 8004ab0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004ab2:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8004ab4:	68ba      	ldr	r2, [r7, #8]
 8004ab6:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8004ab8:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	78db      	ldrb	r3, [r3, #3]
 8004abe:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	22ca      	movs	r2, #202	; 0xca
 8004aca:	625a      	str	r2, [r3, #36]	; 0x24
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	2253      	movs	r2, #83	; 0x53
 8004ad2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	0018      	movs	r0, r3
 8004ad8:	f000 fc1b 	bl	8005312 <RTC_EnterInitMode>
 8004adc:	1e03      	subs	r3, r0, #0
 8004ade:	d00d      	beq.n	8004afc <HAL_RTC_SetTime+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	22ff      	movs	r2, #255	; 0xff
 8004ae6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2221      	movs	r2, #33	; 0x21
 8004aec:	2104      	movs	r1, #4
 8004aee:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	2220      	movs	r2, #32
 8004af4:	2100      	movs	r1, #0
 8004af6:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8004af8:	2301      	movs	r3, #1
 8004afa:	e048      	b.n	8004b8e <HAL_RTC_SetTime+0x176>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	697a      	ldr	r2, [r7, #20]
 8004b02:	4925      	ldr	r1, [pc, #148]	; (8004b98 <HAL_RTC_SetTime+0x180>)
 8004b04:	400a      	ands	r2, r1
 8004b06:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	689a      	ldr	r2, [r3, #8]
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4922      	ldr	r1, [pc, #136]	; (8004b9c <HAL_RTC_SetTime+0x184>)
 8004b14:	400a      	ands	r2, r1
 8004b16:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	6899      	ldr	r1, [r3, #8]
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	68da      	ldr	r2, [r3, #12]
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	691b      	ldr	r3, [r3, #16]
 8004b26:	431a      	orrs	r2, r3
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	430a      	orrs	r2, r1
 8004b2e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	68da      	ldr	r2, [r3, #12]
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	2180      	movs	r1, #128	; 0x80
 8004b3c:	438a      	bics	r2, r1
 8004b3e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	689b      	ldr	r3, [r3, #8]
 8004b46:	2220      	movs	r2, #32
 8004b48:	4013      	ands	r3, r2
 8004b4a:	d113      	bne.n	8004b74 <HAL_RTC_SetTime+0x15c>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	0018      	movs	r0, r3
 8004b50:	f000 fbb8 	bl	80052c4 <HAL_RTC_WaitForSynchro>
 8004b54:	1e03      	subs	r3, r0, #0
 8004b56:	d00d      	beq.n	8004b74 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	22ff      	movs	r2, #255	; 0xff
 8004b5e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	2221      	movs	r2, #33	; 0x21
 8004b64:	2104      	movs	r1, #4
 8004b66:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2220      	movs	r2, #32
 8004b6c:	2100      	movs	r1, #0
 8004b6e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004b70:	2301      	movs	r3, #1
 8004b72:	e00c      	b.n	8004b8e <HAL_RTC_SetTime+0x176>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	22ff      	movs	r2, #255	; 0xff
 8004b7a:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2221      	movs	r2, #33	; 0x21
 8004b80:	2101      	movs	r1, #1
 8004b82:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hrtc);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	2220      	movs	r2, #32
 8004b88:	2100      	movs	r1, #0
 8004b8a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004b8c:	2300      	movs	r3, #0
  }
}
 8004b8e:	0018      	movs	r0, r3
 8004b90:	46bd      	mov	sp, r7
 8004b92:	b007      	add	sp, #28
 8004b94:	bd90      	pop	{r4, r7, pc}
 8004b96:	46c0      	nop			; (mov r8, r8)
 8004b98:	007f7f7f 	.word	0x007f7f7f
 8004b9c:	fffbffff 	.word	0xfffbffff

08004ba0 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b086      	sub	sp, #24
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	60f8      	str	r0, [r7, #12]
 8004ba8:	60b9      	str	r1, [r7, #8]
 8004baa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	691b      	ldr	r3, [r3, #16]
 8004bbc:	045b      	lsls	r3, r3, #17
 8004bbe:	0c5a      	lsrs	r2, r3, #17
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a22      	ldr	r2, [pc, #136]	; (8004c54 <HAL_RTC_GetTime+0xb4>)
 8004bcc:	4013      	ands	r3, r2
 8004bce:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	0c1b      	lsrs	r3, r3, #16
 8004bd4:	b2db      	uxtb	r3, r3
 8004bd6:	223f      	movs	r2, #63	; 0x3f
 8004bd8:	4013      	ands	r3, r2
 8004bda:	b2da      	uxtb	r2, r3
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	0a1b      	lsrs	r3, r3, #8
 8004be4:	b2db      	uxtb	r3, r3
 8004be6:	227f      	movs	r2, #127	; 0x7f
 8004be8:	4013      	ands	r3, r2
 8004bea:	b2da      	uxtb	r2, r3
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	b2db      	uxtb	r3, r3
 8004bf4:	227f      	movs	r2, #127	; 0x7f
 8004bf6:	4013      	ands	r3, r2
 8004bf8:	b2da      	uxtb	r2, r3
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	0c1b      	lsrs	r3, r3, #16
 8004c02:	b2db      	uxtb	r3, r3
 8004c04:	2240      	movs	r2, #64	; 0x40
 8004c06:	4013      	ands	r3, r2
 8004c08:	b2da      	uxtb	r2, r3
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d11a      	bne.n	8004c4a <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	781b      	ldrb	r3, [r3, #0]
 8004c18:	0018      	movs	r0, r3
 8004c1a:	f000 fbcd 	bl	80053b8 <RTC_Bcd2ToByte>
 8004c1e:	0003      	movs	r3, r0
 8004c20:	001a      	movs	r2, r3
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	785b      	ldrb	r3, [r3, #1]
 8004c2a:	0018      	movs	r0, r3
 8004c2c:	f000 fbc4 	bl	80053b8 <RTC_Bcd2ToByte>
 8004c30:	0003      	movs	r3, r0
 8004c32:	001a      	movs	r2, r3
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	789b      	ldrb	r3, [r3, #2]
 8004c3c:	0018      	movs	r0, r3
 8004c3e:	f000 fbbb 	bl	80053b8 <RTC_Bcd2ToByte>
 8004c42:	0003      	movs	r3, r0
 8004c44:	001a      	movs	r2, r3
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004c4a:	2300      	movs	r3, #0
}
 8004c4c:	0018      	movs	r0, r3
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	b006      	add	sp, #24
 8004c52:	bd80      	pop	{r7, pc}
 8004c54:	007f7f7f 	.word	0x007f7f7f

08004c58 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004c58:	b590      	push	{r4, r7, lr}
 8004c5a:	b087      	sub	sp, #28
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	60f8      	str	r0, [r7, #12]
 8004c60:	60b9      	str	r1, [r7, #8]
 8004c62:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2220      	movs	r2, #32
 8004c68:	5c9b      	ldrb	r3, [r3, r2]
 8004c6a:	2b01      	cmp	r3, #1
 8004c6c:	d101      	bne.n	8004c72 <HAL_RTC_SetDate+0x1a>
 8004c6e:	2302      	movs	r3, #2
 8004c70:	e099      	b.n	8004da6 <HAL_RTC_SetDate+0x14e>
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2220      	movs	r2, #32
 8004c76:	2101      	movs	r1, #1
 8004c78:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2221      	movs	r2, #33	; 0x21
 8004c7e:	2102      	movs	r1, #2
 8004c80:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d10e      	bne.n	8004ca6 <HAL_RTC_SetDate+0x4e>
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	785b      	ldrb	r3, [r3, #1]
 8004c8c:	001a      	movs	r2, r3
 8004c8e:	2310      	movs	r3, #16
 8004c90:	4013      	ands	r3, r2
 8004c92:	d008      	beq.n	8004ca6 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	785b      	ldrb	r3, [r3, #1]
 8004c98:	2210      	movs	r2, #16
 8004c9a:	4393      	bics	r3, r2
 8004c9c:	b2db      	uxtb	r3, r3
 8004c9e:	330a      	adds	r3, #10
 8004ca0:	b2da      	uxtb	r2, r3
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d11c      	bne.n	8004ce6 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	78db      	ldrb	r3, [r3, #3]
 8004cb0:	0018      	movs	r0, r3
 8004cb2:	f000 fb58 	bl	8005366 <RTC_ByteToBcd2>
 8004cb6:	0003      	movs	r3, r0
 8004cb8:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	785b      	ldrb	r3, [r3, #1]
 8004cbe:	0018      	movs	r0, r3
 8004cc0:	f000 fb51 	bl	8005366 <RTC_ByteToBcd2>
 8004cc4:	0003      	movs	r3, r0
 8004cc6:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004cc8:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	789b      	ldrb	r3, [r3, #2]
 8004cce:	0018      	movs	r0, r3
 8004cd0:	f000 fb49 	bl	8005366 <RTC_ByteToBcd2>
 8004cd4:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8004cd6:	0022      	movs	r2, r4
 8004cd8:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	781b      	ldrb	r3, [r3, #0]
 8004cde:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	617b      	str	r3, [r7, #20]
 8004ce4:	e00e      	b.n	8004d04 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	78db      	ldrb	r3, [r3, #3]
 8004cea:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	785b      	ldrb	r3, [r3, #1]
 8004cf0:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004cf2:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8004cf4:	68ba      	ldr	r2, [r7, #8]
 8004cf6:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8004cf8:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	781b      	ldrb	r3, [r3, #0]
 8004cfe:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004d00:	4313      	orrs	r3, r2
 8004d02:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	22ca      	movs	r2, #202	; 0xca
 8004d0a:	625a      	str	r2, [r3, #36]	; 0x24
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	2253      	movs	r2, #83	; 0x53
 8004d12:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	0018      	movs	r0, r3
 8004d18:	f000 fafb 	bl	8005312 <RTC_EnterInitMode>
 8004d1c:	1e03      	subs	r3, r0, #0
 8004d1e:	d00d      	beq.n	8004d3c <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	22ff      	movs	r2, #255	; 0xff
 8004d26:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2221      	movs	r2, #33	; 0x21
 8004d2c:	2104      	movs	r1, #4
 8004d2e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2220      	movs	r2, #32
 8004d34:	2100      	movs	r1, #0
 8004d36:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	e034      	b.n	8004da6 <HAL_RTC_SetDate+0x14e>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	697a      	ldr	r2, [r7, #20]
 8004d42:	491b      	ldr	r1, [pc, #108]	; (8004db0 <HAL_RTC_SetDate+0x158>)
 8004d44:	400a      	ands	r2, r1
 8004d46:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	68da      	ldr	r2, [r3, #12]
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	2180      	movs	r1, #128	; 0x80
 8004d54:	438a      	bics	r2, r1
 8004d56:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	2220      	movs	r2, #32
 8004d60:	4013      	ands	r3, r2
 8004d62:	d113      	bne.n	8004d8c <HAL_RTC_SetDate+0x134>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	0018      	movs	r0, r3
 8004d68:	f000 faac 	bl	80052c4 <HAL_RTC_WaitForSynchro>
 8004d6c:	1e03      	subs	r3, r0, #0
 8004d6e:	d00d      	beq.n	8004d8c <HAL_RTC_SetDate+0x134>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	22ff      	movs	r2, #255	; 0xff
 8004d76:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2221      	movs	r2, #33	; 0x21
 8004d7c:	2104      	movs	r1, #4
 8004d7e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	2220      	movs	r2, #32
 8004d84:	2100      	movs	r1, #0
 8004d86:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004d88:	2301      	movs	r3, #1
 8004d8a:	e00c      	b.n	8004da6 <HAL_RTC_SetDate+0x14e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	22ff      	movs	r2, #255	; 0xff
 8004d92:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2221      	movs	r2, #33	; 0x21
 8004d98:	2101      	movs	r1, #1
 8004d9a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2220      	movs	r2, #32
 8004da0:	2100      	movs	r1, #0
 8004da2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004da4:	2300      	movs	r3, #0
  }
}
 8004da6:	0018      	movs	r0, r3
 8004da8:	46bd      	mov	sp, r7
 8004daa:	b007      	add	sp, #28
 8004dac:	bd90      	pop	{r4, r7, pc}
 8004dae:	46c0      	nop			; (mov r8, r8)
 8004db0:	00ffff3f 	.word	0x00ffff3f

08004db4 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b086      	sub	sp, #24
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	60f8      	str	r0, [r7, #12]
 8004dbc:	60b9      	str	r1, [r7, #8]
 8004dbe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	4a21      	ldr	r2, [pc, #132]	; (8004e4c <HAL_RTC_GetDate+0x98>)
 8004dc8:	4013      	ands	r3, r2
 8004dca:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	0c1b      	lsrs	r3, r3, #16
 8004dd0:	b2da      	uxtb	r2, r3
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	0a1b      	lsrs	r3, r3, #8
 8004dda:	b2db      	uxtb	r3, r3
 8004ddc:	221f      	movs	r2, #31
 8004dde:	4013      	ands	r3, r2
 8004de0:	b2da      	uxtb	r2, r3
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	b2db      	uxtb	r3, r3
 8004dea:	223f      	movs	r2, #63	; 0x3f
 8004dec:	4013      	ands	r3, r2
 8004dee:	b2da      	uxtb	r2, r3
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	0b5b      	lsrs	r3, r3, #13
 8004df8:	b2db      	uxtb	r3, r3
 8004dfa:	2207      	movs	r2, #7
 8004dfc:	4013      	ands	r3, r2
 8004dfe:	b2da      	uxtb	r2, r3
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d11a      	bne.n	8004e40 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	78db      	ldrb	r3, [r3, #3]
 8004e0e:	0018      	movs	r0, r3
 8004e10:	f000 fad2 	bl	80053b8 <RTC_Bcd2ToByte>
 8004e14:	0003      	movs	r3, r0
 8004e16:	001a      	movs	r2, r3
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	785b      	ldrb	r3, [r3, #1]
 8004e20:	0018      	movs	r0, r3
 8004e22:	f000 fac9 	bl	80053b8 <RTC_Bcd2ToByte>
 8004e26:	0003      	movs	r3, r0
 8004e28:	001a      	movs	r2, r3
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	789b      	ldrb	r3, [r3, #2]
 8004e32:	0018      	movs	r0, r3
 8004e34:	f000 fac0 	bl	80053b8 <RTC_Bcd2ToByte>
 8004e38:	0003      	movs	r3, r0
 8004e3a:	001a      	movs	r2, r3
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8004e40:	2300      	movs	r3, #0
}
 8004e42:	0018      	movs	r0, r3
 8004e44:	46bd      	mov	sp, r7
 8004e46:	b006      	add	sp, #24
 8004e48:	bd80      	pop	{r7, pc}
 8004e4a:	46c0      	nop			; (mov r8, r8)
 8004e4c:	00ffff3f 	.word	0x00ffff3f

08004e50 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8004e50:	b590      	push	{r4, r7, lr}
 8004e52:	b089      	sub	sp, #36	; 0x24
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	60f8      	str	r0, [r7, #12]
 8004e58:	60b9      	str	r1, [r7, #8]
 8004e5a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	2220      	movs	r2, #32
 8004e60:	5c9b      	ldrb	r3, [r3, r2]
 8004e62:	2b01      	cmp	r3, #1
 8004e64:	d101      	bne.n	8004e6a <HAL_RTC_SetAlarm_IT+0x1a>
 8004e66:	2302      	movs	r3, #2
 8004e68:	e130      	b.n	80050cc <HAL_RTC_SetAlarm_IT+0x27c>
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2220      	movs	r2, #32
 8004e6e:	2101      	movs	r1, #1
 8004e70:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	2221      	movs	r2, #33	; 0x21
 8004e76:	2102      	movs	r1, #2
 8004e78:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d136      	bne.n	8004eee <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	2240      	movs	r2, #64	; 0x40
 8004e88:	4013      	ands	r3, r2
 8004e8a:	d102      	bne.n	8004e92 <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	781b      	ldrb	r3, [r3, #0]
 8004e96:	0018      	movs	r0, r3
 8004e98:	f000 fa65 	bl	8005366 <RTC_ByteToBcd2>
 8004e9c:	0003      	movs	r3, r0
 8004e9e:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	785b      	ldrb	r3, [r3, #1]
 8004ea4:	0018      	movs	r0, r3
 8004ea6:	f000 fa5e 	bl	8005366 <RTC_ByteToBcd2>
 8004eaa:	0003      	movs	r3, r0
 8004eac:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8004eae:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	789b      	ldrb	r3, [r3, #2]
 8004eb4:	0018      	movs	r0, r3
 8004eb6:	f000 fa56 	bl	8005366 <RTC_ByteToBcd2>
 8004eba:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8004ebc:	0022      	movs	r2, r4
 8004ebe:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	78db      	ldrb	r3, [r3, #3]
 8004ec4:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8004ec6:	431a      	orrs	r2, r3
 8004ec8:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	2220      	movs	r2, #32
 8004ece:	5c9b      	ldrb	r3, [r3, r2]
 8004ed0:	0018      	movs	r0, r3
 8004ed2:	f000 fa48 	bl	8005366 <RTC_ByteToBcd2>
 8004ed6:	0003      	movs	r3, r0
 8004ed8:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8004eda:	0022      	movs	r2, r4
 8004edc:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8004ee2:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	61fb      	str	r3, [r7, #28]
 8004eec:	e022      	b.n	8004f34 <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	2240      	movs	r2, #64	; 0x40
 8004ef6:	4013      	ands	r3, r2
 8004ef8:	d102      	bne.n	8004f00 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	2200      	movs	r2, #0
 8004efe:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	781b      	ldrb	r3, [r3, #0]
 8004f04:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	785b      	ldrb	r3, [r3, #1]
 8004f0a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8004f0c:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8004f0e:	68ba      	ldr	r2, [r7, #8]
 8004f10:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8004f12:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	78db      	ldrb	r3, [r3, #3]
 8004f18:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8004f1a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	2120      	movs	r1, #32
 8004f20:	5c5b      	ldrb	r3, [r3, r1]
 8004f22:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8004f24:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8004f2a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8004f30:	4313      	orrs	r3, r2
 8004f32:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	685a      	ldr	r2, [r3, #4]
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	699b      	ldr	r3, [r3, #24]
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	22ca      	movs	r2, #202	; 0xca
 8004f46:	625a      	str	r2, [r3, #36]	; 0x24
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	2253      	movs	r2, #83	; 0x53
 8004f4e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f54:	2380      	movs	r3, #128	; 0x80
 8004f56:	005b      	lsls	r3, r3, #1
 8004f58:	429a      	cmp	r2, r3
 8004f5a:	d14e      	bne.n	8004ffa <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	689a      	ldr	r2, [r3, #8]
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	495b      	ldr	r1, [pc, #364]	; (80050d4 <HAL_RTC_SetAlarm_IT+0x284>)
 8004f68:	400a      	ands	r2, r1
 8004f6a:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	68db      	ldr	r3, [r3, #12]
 8004f72:	22ff      	movs	r2, #255	; 0xff
 8004f74:	401a      	ands	r2, r3
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4957      	ldr	r1, [pc, #348]	; (80050d8 <HAL_RTC_SetAlarm_IT+0x288>)
 8004f7c:	430a      	orrs	r2, r1
 8004f7e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004f80:	f7fd fbec 	bl	800275c <HAL_GetTick>
 8004f84:	0003      	movs	r3, r0
 8004f86:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8004f88:	e016      	b.n	8004fb8 <HAL_RTC_SetAlarm_IT+0x168>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004f8a:	f7fd fbe7 	bl	800275c <HAL_GetTick>
 8004f8e:	0002      	movs	r2, r0
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	1ad2      	subs	r2, r2, r3
 8004f94:	23fa      	movs	r3, #250	; 0xfa
 8004f96:	009b      	lsls	r3, r3, #2
 8004f98:	429a      	cmp	r2, r3
 8004f9a:	d90d      	bls.n	8004fb8 <HAL_RTC_SetAlarm_IT+0x168>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	22ff      	movs	r2, #255	; 0xff
 8004fa2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	2221      	movs	r2, #33	; 0x21
 8004fa8:	2103      	movs	r1, #3
 8004faa:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2220      	movs	r2, #32
 8004fb0:	2100      	movs	r1, #0
 8004fb2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004fb4:	2303      	movs	r3, #3
 8004fb6:	e089      	b.n	80050cc <HAL_RTC_SetAlarm_IT+0x27c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	68db      	ldr	r3, [r3, #12]
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	4013      	ands	r3, r2
 8004fc2:	d0e2      	beq.n	8004f8a <HAL_RTC_SetAlarm_IT+0x13a>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	69fa      	ldr	r2, [r7, #28]
 8004fca:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	69ba      	ldr	r2, [r7, #24]
 8004fd2:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	689a      	ldr	r2, [r3, #8]
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	2180      	movs	r1, #128	; 0x80
 8004fe0:	0049      	lsls	r1, r1, #1
 8004fe2:	430a      	orrs	r2, r1
 8004fe4:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	689a      	ldr	r2, [r3, #8]
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	2180      	movs	r1, #128	; 0x80
 8004ff2:	0149      	lsls	r1, r1, #5
 8004ff4:	430a      	orrs	r2, r1
 8004ff6:	609a      	str	r2, [r3, #8]
 8004ff8:	e04d      	b.n	8005096 <HAL_RTC_SetAlarm_IT+0x246>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	689a      	ldr	r2, [r3, #8]
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4935      	ldr	r1, [pc, #212]	; (80050dc <HAL_RTC_SetAlarm_IT+0x28c>)
 8005006:	400a      	ands	r2, r1
 8005008:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	68db      	ldr	r3, [r3, #12]
 8005010:	22ff      	movs	r2, #255	; 0xff
 8005012:	401a      	ands	r2, r3
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4931      	ldr	r1, [pc, #196]	; (80050e0 <HAL_RTC_SetAlarm_IT+0x290>)
 800501a:	430a      	orrs	r2, r1
 800501c:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800501e:	f7fd fb9d 	bl	800275c <HAL_GetTick>
 8005022:	0003      	movs	r3, r0
 8005024:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8005026:	e016      	b.n	8005056 <HAL_RTC_SetAlarm_IT+0x206>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005028:	f7fd fb98 	bl	800275c <HAL_GetTick>
 800502c:	0002      	movs	r2, r0
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	1ad2      	subs	r2, r2, r3
 8005032:	23fa      	movs	r3, #250	; 0xfa
 8005034:	009b      	lsls	r3, r3, #2
 8005036:	429a      	cmp	r2, r3
 8005038:	d90d      	bls.n	8005056 <HAL_RTC_SetAlarm_IT+0x206>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	22ff      	movs	r2, #255	; 0xff
 8005040:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	2221      	movs	r2, #33	; 0x21
 8005046:	2103      	movs	r1, #3
 8005048:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	2220      	movs	r2, #32
 800504e:	2100      	movs	r1, #0
 8005050:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005052:	2303      	movs	r3, #3
 8005054:	e03a      	b.n	80050cc <HAL_RTC_SetAlarm_IT+0x27c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	68db      	ldr	r3, [r3, #12]
 800505c:	2202      	movs	r2, #2
 800505e:	4013      	ands	r3, r2
 8005060:	d0e2      	beq.n	8005028 <HAL_RTC_SetAlarm_IT+0x1d8>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	69fa      	ldr	r2, [r7, #28]
 8005068:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	69ba      	ldr	r2, [r7, #24]
 8005070:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	689a      	ldr	r2, [r3, #8]
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	2180      	movs	r1, #128	; 0x80
 800507e:	0089      	lsls	r1, r1, #2
 8005080:	430a      	orrs	r2, r1
 8005082:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	689a      	ldr	r2, [r3, #8]
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	2180      	movs	r1, #128	; 0x80
 8005090:	0189      	lsls	r1, r1, #6
 8005092:	430a      	orrs	r2, r1
 8005094:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8005096:	4b13      	ldr	r3, [pc, #76]	; (80050e4 <HAL_RTC_SetAlarm_IT+0x294>)
 8005098:	681a      	ldr	r2, [r3, #0]
 800509a:	4b12      	ldr	r3, [pc, #72]	; (80050e4 <HAL_RTC_SetAlarm_IT+0x294>)
 800509c:	2180      	movs	r1, #128	; 0x80
 800509e:	0289      	lsls	r1, r1, #10
 80050a0:	430a      	orrs	r2, r1
 80050a2:	601a      	str	r2, [r3, #0]

  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 80050a4:	4b0f      	ldr	r3, [pc, #60]	; (80050e4 <HAL_RTC_SetAlarm_IT+0x294>)
 80050a6:	689a      	ldr	r2, [r3, #8]
 80050a8:	4b0e      	ldr	r3, [pc, #56]	; (80050e4 <HAL_RTC_SetAlarm_IT+0x294>)
 80050aa:	2180      	movs	r1, #128	; 0x80
 80050ac:	0289      	lsls	r1, r1, #10
 80050ae:	430a      	orrs	r2, r1
 80050b0:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	22ff      	movs	r2, #255	; 0xff
 80050b8:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	2221      	movs	r2, #33	; 0x21
 80050be:	2101      	movs	r1, #1
 80050c0:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	2220      	movs	r2, #32
 80050c6:	2100      	movs	r1, #0
 80050c8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80050ca:	2300      	movs	r3, #0
}
 80050cc:	0018      	movs	r0, r3
 80050ce:	46bd      	mov	sp, r7
 80050d0:	b009      	add	sp, #36	; 0x24
 80050d2:	bd90      	pop	{r4, r7, pc}
 80050d4:	fffffeff 	.word	0xfffffeff
 80050d8:	fffffe7f 	.word	0xfffffe7f
 80050dc:	fffffdff 	.word	0xfffffdff
 80050e0:	fffffd7f 	.word	0xfffffd7f
 80050e4:	40010400 	.word	0x40010400

080050e8 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b084      	sub	sp, #16
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
 80050f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2220      	movs	r2, #32
 80050f6:	5c9b      	ldrb	r3, [r3, r2]
 80050f8:	2b01      	cmp	r3, #1
 80050fa:	d101      	bne.n	8005100 <HAL_RTC_DeactivateAlarm+0x18>
 80050fc:	2302      	movs	r3, #2
 80050fe:	e086      	b.n	800520e <HAL_RTC_DeactivateAlarm+0x126>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2220      	movs	r2, #32
 8005104:	2101      	movs	r1, #1
 8005106:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2221      	movs	r2, #33	; 0x21
 800510c:	2102      	movs	r1, #2
 800510e:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	22ca      	movs	r2, #202	; 0xca
 8005116:	625a      	str	r2, [r3, #36]	; 0x24
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	2253      	movs	r2, #83	; 0x53
 800511e:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 8005120:	683a      	ldr	r2, [r7, #0]
 8005122:	2380      	movs	r3, #128	; 0x80
 8005124:	005b      	lsls	r3, r3, #1
 8005126:	429a      	cmp	r2, r3
 8005128:	d132      	bne.n	8005190 <HAL_RTC_DeactivateAlarm+0xa8>
  {
    /* AlarmA */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	689a      	ldr	r2, [r3, #8]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4938      	ldr	r1, [pc, #224]	; (8005218 <HAL_RTC_DeactivateAlarm+0x130>)
 8005136:	400a      	ands	r2, r1
 8005138:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	689a      	ldr	r2, [r3, #8]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4935      	ldr	r1, [pc, #212]	; (800521c <HAL_RTC_DeactivateAlarm+0x134>)
 8005146:	400a      	ands	r2, r1
 8005148:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 800514a:	f7fd fb07 	bl	800275c <HAL_GetTick>
 800514e:	0003      	movs	r3, r0
 8005150:	60fb      	str	r3, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8005152:	e016      	b.n	8005182 <HAL_RTC_DeactivateAlarm+0x9a>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005154:	f7fd fb02 	bl	800275c <HAL_GetTick>
 8005158:	0002      	movs	r2, r0
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	1ad2      	subs	r2, r2, r3
 800515e:	23fa      	movs	r3, #250	; 0xfa
 8005160:	009b      	lsls	r3, r3, #2
 8005162:	429a      	cmp	r2, r3
 8005164:	d90d      	bls.n	8005182 <HAL_RTC_DeactivateAlarm+0x9a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	22ff      	movs	r2, #255	; 0xff
 800516c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2221      	movs	r2, #33	; 0x21
 8005172:	2103      	movs	r1, #3
 8005174:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2220      	movs	r2, #32
 800517a:	2100      	movs	r1, #0
 800517c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800517e:	2303      	movs	r3, #3
 8005180:	e045      	b.n	800520e <HAL_RTC_DeactivateAlarm+0x126>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	68db      	ldr	r3, [r3, #12]
 8005188:	2201      	movs	r2, #1
 800518a:	4013      	ands	r3, r2
 800518c:	d0e2      	beq.n	8005154 <HAL_RTC_DeactivateAlarm+0x6c>
 800518e:	e031      	b.n	80051f4 <HAL_RTC_DeactivateAlarm+0x10c>
    }
  }
  else
  {
    /* AlarmB */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	689a      	ldr	r2, [r3, #8]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4921      	ldr	r1, [pc, #132]	; (8005220 <HAL_RTC_DeactivateAlarm+0x138>)
 800519c:	400a      	ands	r2, r1
 800519e:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	689a      	ldr	r2, [r3, #8]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	491e      	ldr	r1, [pc, #120]	; (8005224 <HAL_RTC_DeactivateAlarm+0x13c>)
 80051ac:	400a      	ands	r2, r1
 80051ae:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 80051b0:	f7fd fad4 	bl	800275c <HAL_GetTick>
 80051b4:	0003      	movs	r3, r0
 80051b6:	60fb      	str	r3, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80051b8:	e016      	b.n	80051e8 <HAL_RTC_DeactivateAlarm+0x100>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80051ba:	f7fd facf 	bl	800275c <HAL_GetTick>
 80051be:	0002      	movs	r2, r0
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	1ad2      	subs	r2, r2, r3
 80051c4:	23fa      	movs	r3, #250	; 0xfa
 80051c6:	009b      	lsls	r3, r3, #2
 80051c8:	429a      	cmp	r2, r3
 80051ca:	d90d      	bls.n	80051e8 <HAL_RTC_DeactivateAlarm+0x100>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	22ff      	movs	r2, #255	; 0xff
 80051d2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2221      	movs	r2, #33	; 0x21
 80051d8:	2103      	movs	r1, #3
 80051da:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2220      	movs	r2, #32
 80051e0:	2100      	movs	r1, #0
 80051e2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80051e4:	2303      	movs	r3, #3
 80051e6:	e012      	b.n	800520e <HAL_RTC_DeactivateAlarm+0x126>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	68db      	ldr	r3, [r3, #12]
 80051ee:	2202      	movs	r2, #2
 80051f0:	4013      	ands	r3, r2
 80051f2:	d0e2      	beq.n	80051ba <HAL_RTC_DeactivateAlarm+0xd2>
      }
    }
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	22ff      	movs	r2, #255	; 0xff
 80051fa:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2221      	movs	r2, #33	; 0x21
 8005200:	2101      	movs	r1, #1
 8005202:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2220      	movs	r2, #32
 8005208:	2100      	movs	r1, #0
 800520a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800520c:	2300      	movs	r3, #0
}
 800520e:	0018      	movs	r0, r3
 8005210:	46bd      	mov	sp, r7
 8005212:	b004      	add	sp, #16
 8005214:	bd80      	pop	{r7, pc}
 8005216:	46c0      	nop			; (mov r8, r8)
 8005218:	fffffeff 	.word	0xfffffeff
 800521c:	ffffefff 	.word	0xffffefff
 8005220:	fffffdff 	.word	0xfffffdff
 8005224:	ffffdfff 	.word	0xffffdfff

08005228 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b082      	sub	sp, #8
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	689a      	ldr	r2, [r3, #8]
 8005236:	2380      	movs	r3, #128	; 0x80
 8005238:	015b      	lsls	r3, r3, #5
 800523a:	4013      	ands	r3, r2
 800523c:	d014      	beq.n	8005268 <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	68da      	ldr	r2, [r3, #12]
 8005244:	2380      	movs	r3, #128	; 0x80
 8005246:	005b      	lsls	r3, r3, #1
 8005248:	4013      	ands	r3, r2
 800524a:	d00d      	beq.n	8005268 <HAL_RTC_AlarmIRQHandler+0x40>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	0018      	movs	r0, r3
 8005250:	f7fb ff28 	bl	80010a4 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	68db      	ldr	r3, [r3, #12]
 800525a:	22ff      	movs	r2, #255	; 0xff
 800525c:	401a      	ands	r2, r3
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4915      	ldr	r1, [pc, #84]	; (80052b8 <HAL_RTC_AlarmIRQHandler+0x90>)
 8005264:	430a      	orrs	r2, r1
 8005266:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	689a      	ldr	r2, [r3, #8]
 800526e:	2380      	movs	r3, #128	; 0x80
 8005270:	019b      	lsls	r3, r3, #6
 8005272:	4013      	ands	r3, r2
 8005274:	d014      	beq.n	80052a0 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	68da      	ldr	r2, [r3, #12]
 800527c:	2380      	movs	r3, #128	; 0x80
 800527e:	009b      	lsls	r3, r3, #2
 8005280:	4013      	ands	r3, r2
 8005282:	d00d      	beq.n	80052a0 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* AlarmB callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	0018      	movs	r0, r3
 8005288:	f000 f8b3 	bl	80053f2 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	68db      	ldr	r3, [r3, #12]
 8005292:	22ff      	movs	r2, #255	; 0xff
 8005294:	401a      	ands	r2, r3
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4908      	ldr	r1, [pc, #32]	; (80052bc <HAL_RTC_AlarmIRQHandler+0x94>)
 800529c:	430a      	orrs	r2, r1
 800529e:	60da      	str	r2, [r3, #12]
    }
  }
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80052a0:	4b07      	ldr	r3, [pc, #28]	; (80052c0 <HAL_RTC_AlarmIRQHandler+0x98>)
 80052a2:	2280      	movs	r2, #128	; 0x80
 80052a4:	0292      	lsls	r2, r2, #10
 80052a6:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2221      	movs	r2, #33	; 0x21
 80052ac:	2101      	movs	r1, #1
 80052ae:	5499      	strb	r1, [r3, r2]
}
 80052b0:	46c0      	nop			; (mov r8, r8)
 80052b2:	46bd      	mov	sp, r7
 80052b4:	b002      	add	sp, #8
 80052b6:	bd80      	pop	{r7, pc}
 80052b8:	fffffe7f 	.word	0xfffffe7f
 80052bc:	fffffd7f 	.word	0xfffffd7f
 80052c0:	40010400 	.word	0x40010400

080052c4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b084      	sub	sp, #16
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	68da      	ldr	r2, [r3, #12]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	21a0      	movs	r1, #160	; 0xa0
 80052d8:	438a      	bics	r2, r1
 80052da:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80052dc:	f7fd fa3e 	bl	800275c <HAL_GetTick>
 80052e0:	0003      	movs	r3, r0
 80052e2:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80052e4:	e00a      	b.n	80052fc <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80052e6:	f7fd fa39 	bl	800275c <HAL_GetTick>
 80052ea:	0002      	movs	r2, r0
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	1ad2      	subs	r2, r2, r3
 80052f0:	23fa      	movs	r3, #250	; 0xfa
 80052f2:	009b      	lsls	r3, r3, #2
 80052f4:	429a      	cmp	r2, r3
 80052f6:	d901      	bls.n	80052fc <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80052f8:	2303      	movs	r3, #3
 80052fa:	e006      	b.n	800530a <HAL_RTC_WaitForSynchro+0x46>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	68db      	ldr	r3, [r3, #12]
 8005302:	2220      	movs	r2, #32
 8005304:	4013      	ands	r3, r2
 8005306:	d0ee      	beq.n	80052e6 <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 8005308:	2300      	movs	r3, #0
}
 800530a:	0018      	movs	r0, r3
 800530c:	46bd      	mov	sp, r7
 800530e:	b004      	add	sp, #16
 8005310:	bd80      	pop	{r7, pc}

08005312 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005312:	b580      	push	{r7, lr}
 8005314:	b084      	sub	sp, #16
 8005316:	af00      	add	r7, sp, #0
 8005318:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	68db      	ldr	r3, [r3, #12]
 8005320:	2240      	movs	r2, #64	; 0x40
 8005322:	4013      	ands	r3, r2
 8005324:	d11a      	bne.n	800535c <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	2201      	movs	r2, #1
 800532c:	4252      	negs	r2, r2
 800532e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005330:	f7fd fa14 	bl	800275c <HAL_GetTick>
 8005334:	0003      	movs	r3, r0
 8005336:	60fb      	str	r3, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005338:	e00a      	b.n	8005350 <RTC_EnterInitMode+0x3e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800533a:	f7fd fa0f 	bl	800275c <HAL_GetTick>
 800533e:	0002      	movs	r2, r0
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	1ad2      	subs	r2, r2, r3
 8005344:	23fa      	movs	r3, #250	; 0xfa
 8005346:	009b      	lsls	r3, r3, #2
 8005348:	429a      	cmp	r2, r3
 800534a:	d901      	bls.n	8005350 <RTC_EnterInitMode+0x3e>
      {
        return HAL_TIMEOUT;
 800534c:	2303      	movs	r3, #3
 800534e:	e006      	b.n	800535e <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	68db      	ldr	r3, [r3, #12]
 8005356:	2240      	movs	r2, #64	; 0x40
 8005358:	4013      	ands	r3, r2
 800535a:	d0ee      	beq.n	800533a <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800535c:	2300      	movs	r3, #0
}
 800535e:	0018      	movs	r0, r3
 8005360:	46bd      	mov	sp, r7
 8005362:	b004      	add	sp, #16
 8005364:	bd80      	pop	{r7, pc}

08005366 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005366:	b580      	push	{r7, lr}
 8005368:	b084      	sub	sp, #16
 800536a:	af00      	add	r7, sp, #0
 800536c:	0002      	movs	r2, r0
 800536e:	1dfb      	adds	r3, r7, #7
 8005370:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8005372:	2300      	movs	r3, #0
 8005374:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8005376:	230b      	movs	r3, #11
 8005378:	18fb      	adds	r3, r7, r3
 800537a:	1dfa      	adds	r2, r7, #7
 800537c:	7812      	ldrb	r2, [r2, #0]
 800537e:	701a      	strb	r2, [r3, #0]

  while (Param >= 10U)
 8005380:	e008      	b.n	8005394 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	3301      	adds	r3, #1
 8005386:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8005388:	220b      	movs	r2, #11
 800538a:	18bb      	adds	r3, r7, r2
 800538c:	18ba      	adds	r2, r7, r2
 800538e:	7812      	ldrb	r2, [r2, #0]
 8005390:	3a0a      	subs	r2, #10
 8005392:	701a      	strb	r2, [r3, #0]
  while (Param >= 10U)
 8005394:	230b      	movs	r3, #11
 8005396:	18fb      	adds	r3, r7, r3
 8005398:	781b      	ldrb	r3, [r3, #0]
 800539a:	2b09      	cmp	r3, #9
 800539c:	d8f1      	bhi.n	8005382 <RTC_ByteToBcd2+0x1c>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	b2db      	uxtb	r3, r3
 80053a2:	011b      	lsls	r3, r3, #4
 80053a4:	b2da      	uxtb	r2, r3
 80053a6:	230b      	movs	r3, #11
 80053a8:	18fb      	adds	r3, r7, r3
 80053aa:	781b      	ldrb	r3, [r3, #0]
 80053ac:	4313      	orrs	r3, r2
 80053ae:	b2db      	uxtb	r3, r3
}
 80053b0:	0018      	movs	r0, r3
 80053b2:	46bd      	mov	sp, r7
 80053b4:	b004      	add	sp, #16
 80053b6:	bd80      	pop	{r7, pc}

080053b8 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b084      	sub	sp, #16
 80053bc:	af00      	add	r7, sp, #0
 80053be:	0002      	movs	r2, r0
 80053c0:	1dfb      	adds	r3, r7, #7
 80053c2:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 80053c4:	1dfb      	adds	r3, r7, #7
 80053c6:	781b      	ldrb	r3, [r3, #0]
 80053c8:	091b      	lsrs	r3, r3, #4
 80053ca:	b2db      	uxtb	r3, r3
 80053cc:	001a      	movs	r2, r3
 80053ce:	0013      	movs	r3, r2
 80053d0:	009b      	lsls	r3, r3, #2
 80053d2:	189b      	adds	r3, r3, r2
 80053d4:	005b      	lsls	r3, r3, #1
 80053d6:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	b2da      	uxtb	r2, r3
 80053dc:	1dfb      	adds	r3, r7, #7
 80053de:	781b      	ldrb	r3, [r3, #0]
 80053e0:	210f      	movs	r1, #15
 80053e2:	400b      	ands	r3, r1
 80053e4:	b2db      	uxtb	r3, r3
 80053e6:	18d3      	adds	r3, r2, r3
 80053e8:	b2db      	uxtb	r3, r3
}
 80053ea:	0018      	movs	r0, r3
 80053ec:	46bd      	mov	sp, r7
 80053ee:	b004      	add	sp, #16
 80053f0:	bd80      	pop	{r7, pc}

080053f2 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80053f2:	b580      	push	{r7, lr}
 80053f4:	b082      	sub	sp, #8
 80053f6:	af00      	add	r7, sp, #0
 80053f8:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80053fa:	46c0      	nop			; (mov r8, r8)
 80053fc:	46bd      	mov	sp, r7
 80053fe:	b002      	add	sp, #8
 8005400:	bd80      	pop	{r7, pc}
	...

08005404 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b082      	sub	sp, #8
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d101      	bne.n	8005416 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005412:	2301      	movs	r3, #1
 8005414:	e059      	b.n	80054ca <HAL_SPI_Init+0xc6>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2200      	movs	r2, #0
 800541a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2251      	movs	r2, #81	; 0x51
 8005420:	5c9b      	ldrb	r3, [r3, r2]
 8005422:	b2db      	uxtb	r3, r3
 8005424:	2b00      	cmp	r3, #0
 8005426:	d107      	bne.n	8005438 <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2250      	movs	r2, #80	; 0x50
 800542c:	2100      	movs	r1, #0
 800542e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	0018      	movs	r0, r3
 8005434:	f7fc ff6a 	bl	800230c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2251      	movs	r2, #81	; 0x51
 800543c:	2102      	movs	r1, #2
 800543e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	681a      	ldr	r2, [r3, #0]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	2140      	movs	r1, #64	; 0x40
 800544c:	438a      	bics	r2, r1
 800544e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	685a      	ldr	r2, [r3, #4]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	689b      	ldr	r3, [r3, #8]
 8005458:	431a      	orrs	r2, r3
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	68db      	ldr	r3, [r3, #12]
 800545e:	431a      	orrs	r2, r3
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	691b      	ldr	r3, [r3, #16]
 8005464:	431a      	orrs	r2, r3
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	695b      	ldr	r3, [r3, #20]
 800546a:	431a      	orrs	r2, r3
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6999      	ldr	r1, [r3, #24]
 8005470:	2380      	movs	r3, #128	; 0x80
 8005472:	009b      	lsls	r3, r3, #2
 8005474:	400b      	ands	r3, r1
 8005476:	431a      	orrs	r2, r3
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	69db      	ldr	r3, [r3, #28]
 800547c:	431a      	orrs	r2, r3
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6a1b      	ldr	r3, [r3, #32]
 8005482:	431a      	orrs	r2, r3
 8005484:	0011      	movs	r1, r2
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	430a      	orrs	r2, r1
 8005490:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	699b      	ldr	r3, [r3, #24]
 8005496:	0c1b      	lsrs	r3, r3, #16
 8005498:	2204      	movs	r2, #4
 800549a:	4013      	ands	r3, r2
 800549c:	0019      	movs	r1, r3
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	430a      	orrs	r2, r1
 80054a8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	69da      	ldr	r2, [r3, #28]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4907      	ldr	r1, [pc, #28]	; (80054d4 <HAL_SPI_Init+0xd0>)
 80054b6:	400a      	ands	r2, r1
 80054b8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2200      	movs	r2, #0
 80054be:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2251      	movs	r2, #81	; 0x51
 80054c4:	2101      	movs	r1, #1
 80054c6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80054c8:	2300      	movs	r3, #0
}
 80054ca:	0018      	movs	r0, r3
 80054cc:	46bd      	mov	sp, r7
 80054ce:	b002      	add	sp, #8
 80054d0:	bd80      	pop	{r7, pc}
 80054d2:	46c0      	nop			; (mov r8, r8)
 80054d4:	fffff7ff 	.word	0xfffff7ff

080054d8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b088      	sub	sp, #32
 80054dc:	af00      	add	r7, sp, #0
 80054de:	60f8      	str	r0, [r7, #12]
 80054e0:	60b9      	str	r1, [r7, #8]
 80054e2:	603b      	str	r3, [r7, #0]
 80054e4:	1dbb      	adds	r3, r7, #6
 80054e6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80054e8:	231f      	movs	r3, #31
 80054ea:	18fb      	adds	r3, r7, r3
 80054ec:	2200      	movs	r2, #0
 80054ee:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	2250      	movs	r2, #80	; 0x50
 80054f4:	5c9b      	ldrb	r3, [r3, r2]
 80054f6:	2b01      	cmp	r3, #1
 80054f8:	d101      	bne.n	80054fe <HAL_SPI_Transmit+0x26>
 80054fa:	2302      	movs	r3, #2
 80054fc:	e136      	b.n	800576c <HAL_SPI_Transmit+0x294>
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	2250      	movs	r2, #80	; 0x50
 8005502:	2101      	movs	r1, #1
 8005504:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005506:	f7fd f929 	bl	800275c <HAL_GetTick>
 800550a:	0003      	movs	r3, r0
 800550c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800550e:	2316      	movs	r3, #22
 8005510:	18fb      	adds	r3, r7, r3
 8005512:	1dba      	adds	r2, r7, #6
 8005514:	8812      	ldrh	r2, [r2, #0]
 8005516:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	2251      	movs	r2, #81	; 0x51
 800551c:	5c9b      	ldrb	r3, [r3, r2]
 800551e:	b2db      	uxtb	r3, r3
 8005520:	2b01      	cmp	r3, #1
 8005522:	d004      	beq.n	800552e <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8005524:	231f      	movs	r3, #31
 8005526:	18fb      	adds	r3, r7, r3
 8005528:	2202      	movs	r2, #2
 800552a:	701a      	strb	r2, [r3, #0]
    goto error;
 800552c:	e113      	b.n	8005756 <HAL_SPI_Transmit+0x27e>
  }

  if ((pData == NULL) || (Size == 0U))
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d003      	beq.n	800553c <HAL_SPI_Transmit+0x64>
 8005534:	1dbb      	adds	r3, r7, #6
 8005536:	881b      	ldrh	r3, [r3, #0]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d104      	bne.n	8005546 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 800553c:	231f      	movs	r3, #31
 800553e:	18fb      	adds	r3, r7, r3
 8005540:	2201      	movs	r2, #1
 8005542:	701a      	strb	r2, [r3, #0]
    goto error;
 8005544:	e107      	b.n	8005756 <HAL_SPI_Transmit+0x27e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	2251      	movs	r2, #81	; 0x51
 800554a:	2103      	movs	r1, #3
 800554c:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2200      	movs	r2, #0
 8005552:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	68ba      	ldr	r2, [r7, #8]
 8005558:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	1dba      	adds	r2, r7, #6
 800555e:	8812      	ldrh	r2, [r2, #0]
 8005560:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	1dba      	adds	r2, r7, #6
 8005566:	8812      	ldrh	r2, [r2, #0]
 8005568:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	2200      	movs	r2, #0
 800556e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	2200      	movs	r2, #0
 8005574:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2200      	movs	r2, #0
 800557a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	2200      	movs	r2, #0
 8005580:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	2200      	movs	r2, #0
 8005586:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	689a      	ldr	r2, [r3, #8]
 800558c:	2380      	movs	r3, #128	; 0x80
 800558e:	021b      	lsls	r3, r3, #8
 8005590:	429a      	cmp	r2, r3
 8005592:	d108      	bne.n	80055a6 <HAL_SPI_Transmit+0xce>
  {
    SPI_1LINE_TX(hspi);
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	681a      	ldr	r2, [r3, #0]
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	2180      	movs	r1, #128	; 0x80
 80055a0:	01c9      	lsls	r1, r1, #7
 80055a2:	430a      	orrs	r2, r1
 80055a4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	2240      	movs	r2, #64	; 0x40
 80055ae:	4013      	ands	r3, r2
 80055b0:	2b40      	cmp	r3, #64	; 0x40
 80055b2:	d007      	beq.n	80055c4 <HAL_SPI_Transmit+0xec>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	681a      	ldr	r2, [r3, #0]
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	2140      	movs	r1, #64	; 0x40
 80055c0:	430a      	orrs	r2, r1
 80055c2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	68da      	ldr	r2, [r3, #12]
 80055c8:	2380      	movs	r3, #128	; 0x80
 80055ca:	011b      	lsls	r3, r3, #4
 80055cc:	429a      	cmp	r2, r3
 80055ce:	d14e      	bne.n	800566e <HAL_SPI_Transmit+0x196>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d004      	beq.n	80055e2 <HAL_SPI_Transmit+0x10a>
 80055d8:	2316      	movs	r3, #22
 80055da:	18fb      	adds	r3, r7, r3
 80055dc:	881b      	ldrh	r3, [r3, #0]
 80055de:	2b01      	cmp	r3, #1
 80055e0:	d13f      	bne.n	8005662 <HAL_SPI_Transmit+0x18a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055e6:	881a      	ldrh	r2, [r3, #0]
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055f2:	1c9a      	adds	r2, r3, #2
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055fc:	b29b      	uxth	r3, r3
 80055fe:	3b01      	subs	r3, #1
 8005600:	b29a      	uxth	r2, r3
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005606:	e02c      	b.n	8005662 <HAL_SPI_Transmit+0x18a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	689b      	ldr	r3, [r3, #8]
 800560e:	2202      	movs	r2, #2
 8005610:	4013      	ands	r3, r2
 8005612:	2b02      	cmp	r3, #2
 8005614:	d112      	bne.n	800563c <HAL_SPI_Transmit+0x164>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800561a:	881a      	ldrh	r2, [r3, #0]
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005626:	1c9a      	adds	r2, r3, #2
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005630:	b29b      	uxth	r3, r3
 8005632:	3b01      	subs	r3, #1
 8005634:	b29a      	uxth	r2, r3
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	86da      	strh	r2, [r3, #54]	; 0x36
 800563a:	e012      	b.n	8005662 <HAL_SPI_Transmit+0x18a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800563c:	f7fd f88e 	bl	800275c <HAL_GetTick>
 8005640:	0002      	movs	r2, r0
 8005642:	69bb      	ldr	r3, [r7, #24]
 8005644:	1ad3      	subs	r3, r2, r3
 8005646:	683a      	ldr	r2, [r7, #0]
 8005648:	429a      	cmp	r2, r3
 800564a:	d802      	bhi.n	8005652 <HAL_SPI_Transmit+0x17a>
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	3301      	adds	r3, #1
 8005650:	d102      	bne.n	8005658 <HAL_SPI_Transmit+0x180>
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d104      	bne.n	8005662 <HAL_SPI_Transmit+0x18a>
        {
          errorcode = HAL_TIMEOUT;
 8005658:	231f      	movs	r3, #31
 800565a:	18fb      	adds	r3, r7, r3
 800565c:	2203      	movs	r2, #3
 800565e:	701a      	strb	r2, [r3, #0]
          goto error;
 8005660:	e079      	b.n	8005756 <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005666:	b29b      	uxth	r3, r3
 8005668:	2b00      	cmp	r3, #0
 800566a:	d1cd      	bne.n	8005608 <HAL_SPI_Transmit+0x130>
 800566c:	e04f      	b.n	800570e <HAL_SPI_Transmit+0x236>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d004      	beq.n	8005680 <HAL_SPI_Transmit+0x1a8>
 8005676:	2316      	movs	r3, #22
 8005678:	18fb      	adds	r3, r7, r3
 800567a:	881b      	ldrh	r3, [r3, #0]
 800567c:	2b01      	cmp	r3, #1
 800567e:	d141      	bne.n	8005704 <HAL_SPI_Transmit+0x22c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	330c      	adds	r3, #12
 800568a:	7812      	ldrb	r2, [r2, #0]
 800568c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005692:	1c5a      	adds	r2, r3, #1
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800569c:	b29b      	uxth	r3, r3
 800569e:	3b01      	subs	r3, #1
 80056a0:	b29a      	uxth	r2, r3
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80056a6:	e02d      	b.n	8005704 <HAL_SPI_Transmit+0x22c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	689b      	ldr	r3, [r3, #8]
 80056ae:	2202      	movs	r2, #2
 80056b0:	4013      	ands	r3, r2
 80056b2:	2b02      	cmp	r3, #2
 80056b4:	d113      	bne.n	80056de <HAL_SPI_Transmit+0x206>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	330c      	adds	r3, #12
 80056c0:	7812      	ldrb	r2, [r2, #0]
 80056c2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056c8:	1c5a      	adds	r2, r3, #1
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056d2:	b29b      	uxth	r3, r3
 80056d4:	3b01      	subs	r3, #1
 80056d6:	b29a      	uxth	r2, r3
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	86da      	strh	r2, [r3, #54]	; 0x36
 80056dc:	e012      	b.n	8005704 <HAL_SPI_Transmit+0x22c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80056de:	f7fd f83d 	bl	800275c <HAL_GetTick>
 80056e2:	0002      	movs	r2, r0
 80056e4:	69bb      	ldr	r3, [r7, #24]
 80056e6:	1ad3      	subs	r3, r2, r3
 80056e8:	683a      	ldr	r2, [r7, #0]
 80056ea:	429a      	cmp	r2, r3
 80056ec:	d802      	bhi.n	80056f4 <HAL_SPI_Transmit+0x21c>
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	3301      	adds	r3, #1
 80056f2:	d102      	bne.n	80056fa <HAL_SPI_Transmit+0x222>
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d104      	bne.n	8005704 <HAL_SPI_Transmit+0x22c>
        {
          errorcode = HAL_TIMEOUT;
 80056fa:	231f      	movs	r3, #31
 80056fc:	18fb      	adds	r3, r7, r3
 80056fe:	2203      	movs	r2, #3
 8005700:	701a      	strb	r2, [r3, #0]
          goto error;
 8005702:	e028      	b.n	8005756 <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005708:	b29b      	uxth	r3, r3
 800570a:	2b00      	cmp	r3, #0
 800570c:	d1cc      	bne.n	80056a8 <HAL_SPI_Transmit+0x1d0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800570e:	69ba      	ldr	r2, [r7, #24]
 8005710:	6839      	ldr	r1, [r7, #0]
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	0018      	movs	r0, r3
 8005716:	f000 fb0f 	bl	8005d38 <SPI_EndRxTxTransaction>
 800571a:	1e03      	subs	r3, r0, #0
 800571c:	d002      	beq.n	8005724 <HAL_SPI_Transmit+0x24c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2220      	movs	r2, #32
 8005722:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	689b      	ldr	r3, [r3, #8]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d10a      	bne.n	8005742 <HAL_SPI_Transmit+0x26a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800572c:	2300      	movs	r3, #0
 800572e:	613b      	str	r3, [r7, #16]
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	68db      	ldr	r3, [r3, #12]
 8005736:	613b      	str	r3, [r7, #16]
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	689b      	ldr	r3, [r3, #8]
 800573e:	613b      	str	r3, [r7, #16]
 8005740:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005746:	2b00      	cmp	r3, #0
 8005748:	d004      	beq.n	8005754 <HAL_SPI_Transmit+0x27c>
  {
    errorcode = HAL_ERROR;
 800574a:	231f      	movs	r3, #31
 800574c:	18fb      	adds	r3, r7, r3
 800574e:	2201      	movs	r2, #1
 8005750:	701a      	strb	r2, [r3, #0]
 8005752:	e000      	b.n	8005756 <HAL_SPI_Transmit+0x27e>
  }

error:
 8005754:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	2251      	movs	r2, #81	; 0x51
 800575a:	2101      	movs	r1, #1
 800575c:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	2250      	movs	r2, #80	; 0x50
 8005762:	2100      	movs	r1, #0
 8005764:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8005766:	231f      	movs	r3, #31
 8005768:	18fb      	adds	r3, r7, r3
 800576a:	781b      	ldrb	r3, [r3, #0]
}
 800576c:	0018      	movs	r0, r3
 800576e:	46bd      	mov	sp, r7
 8005770:	b008      	add	sp, #32
 8005772:	bd80      	pop	{r7, pc}

08005774 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b086      	sub	sp, #24
 8005778:	af00      	add	r7, sp, #0
 800577a:	60f8      	str	r0, [r7, #12]
 800577c:	60b9      	str	r1, [r7, #8]
 800577e:	1dbb      	adds	r3, r7, #6
 8005780:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005782:	2317      	movs	r3, #23
 8005784:	18fb      	adds	r3, r7, r3
 8005786:	2200      	movs	r2, #0
 8005788:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2250      	movs	r2, #80	; 0x50
 800578e:	5c9b      	ldrb	r3, [r3, r2]
 8005790:	2b01      	cmp	r3, #1
 8005792:	d101      	bne.n	8005798 <HAL_SPI_Transmit_DMA+0x24>
 8005794:	2302      	movs	r3, #2
 8005796:	e09f      	b.n	80058d8 <HAL_SPI_Transmit_DMA+0x164>
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	2250      	movs	r2, #80	; 0x50
 800579c:	2101      	movs	r1, #1
 800579e:	5499      	strb	r1, [r3, r2]

  if (hspi->State != HAL_SPI_STATE_READY)
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	2251      	movs	r2, #81	; 0x51
 80057a4:	5c9b      	ldrb	r3, [r3, r2]
 80057a6:	b2db      	uxtb	r3, r3
 80057a8:	2b01      	cmp	r3, #1
 80057aa:	d004      	beq.n	80057b6 <HAL_SPI_Transmit_DMA+0x42>
  {
    errorcode = HAL_BUSY;
 80057ac:	2317      	movs	r3, #23
 80057ae:	18fb      	adds	r3, r7, r3
 80057b0:	2202      	movs	r2, #2
 80057b2:	701a      	strb	r2, [r3, #0]
    goto error;
 80057b4:	e089      	b.n	80058ca <HAL_SPI_Transmit_DMA+0x156>
  }

  if ((pData == NULL) || (Size == 0U))
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d003      	beq.n	80057c4 <HAL_SPI_Transmit_DMA+0x50>
 80057bc:	1dbb      	adds	r3, r7, #6
 80057be:	881b      	ldrh	r3, [r3, #0]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d104      	bne.n	80057ce <HAL_SPI_Transmit_DMA+0x5a>
  {
    errorcode = HAL_ERROR;
 80057c4:	2317      	movs	r3, #23
 80057c6:	18fb      	adds	r3, r7, r3
 80057c8:	2201      	movs	r2, #1
 80057ca:	701a      	strb	r2, [r3, #0]
    goto error;
 80057cc:	e07d      	b.n	80058ca <HAL_SPI_Transmit_DMA+0x156>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	2251      	movs	r2, #81	; 0x51
 80057d2:	2103      	movs	r1, #3
 80057d4:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2200      	movs	r2, #0
 80057da:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	68ba      	ldr	r2, [r7, #8]
 80057e0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	1dba      	adds	r2, r7, #6
 80057e6:	8812      	ldrh	r2, [r2, #0]
 80057e8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	1dba      	adds	r2, r7, #6
 80057ee:	8812      	ldrh	r2, [r2, #0]
 80057f0:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	2200      	movs	r2, #0
 80057f6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	2200      	movs	r2, #0
 80057fc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2200      	movs	r2, #0
 8005802:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2200      	movs	r2, #0
 8005808:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2200      	movs	r2, #0
 800580e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	689a      	ldr	r2, [r3, #8]
 8005814:	2380      	movs	r3, #128	; 0x80
 8005816:	021b      	lsls	r3, r3, #8
 8005818:	429a      	cmp	r2, r3
 800581a:	d108      	bne.n	800582e <HAL_SPI_Transmit_DMA+0xba>
  {
    SPI_1LINE_TX(hspi);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	681a      	ldr	r2, [r3, #0]
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	2180      	movs	r1, #128	; 0x80
 8005828:	01c9      	lsls	r1, r1, #7
 800582a:	430a      	orrs	r2, r1
 800582c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005832:	4a2b      	ldr	r2, [pc, #172]	; (80058e0 <HAL_SPI_Transmit_DMA+0x16c>)
 8005834:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800583a:	4a2a      	ldr	r2, [pc, #168]	; (80058e4 <HAL_SPI_Transmit_DMA+0x170>)
 800583c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005842:	4a29      	ldr	r2, [pc, #164]	; (80058e8 <HAL_SPI_Transmit_DMA+0x174>)
 8005844:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800584a:	2200      	movs	r2, #0
 800584c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount))
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005856:	0019      	movs	r1, r3
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	330c      	adds	r3, #12
 800585e:	001a      	movs	r2, r3
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005864:	b29b      	uxth	r3, r3
 8005866:	f7fd fb25 	bl	8002eb4 <HAL_DMA_Start_IT>
 800586a:	1e03      	subs	r3, r0, #0
 800586c:	d00e      	beq.n	800588c <HAL_SPI_Transmit_DMA+0x118>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005872:	2210      	movs	r2, #16
 8005874:	431a      	orrs	r2, r3
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800587a:	2317      	movs	r3, #23
 800587c:	18fb      	adds	r3, r7, r3
 800587e:	2201      	movs	r2, #1
 8005880:	701a      	strb	r2, [r3, #0]

    hspi->State = HAL_SPI_STATE_READY;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	2251      	movs	r2, #81	; 0x51
 8005886:	2101      	movs	r1, #1
 8005888:	5499      	strb	r1, [r3, r2]
    goto error;
 800588a:	e01e      	b.n	80058ca <HAL_SPI_Transmit_DMA+0x156>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	2240      	movs	r2, #64	; 0x40
 8005894:	4013      	ands	r3, r2
 8005896:	2b40      	cmp	r3, #64	; 0x40
 8005898:	d007      	beq.n	80058aa <HAL_SPI_Transmit_DMA+0x136>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	681a      	ldr	r2, [r3, #0]
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	2140      	movs	r1, #64	; 0x40
 80058a6:	430a      	orrs	r2, r1
 80058a8:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	685a      	ldr	r2, [r3, #4]
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	2120      	movs	r1, #32
 80058b6:	430a      	orrs	r2, r1
 80058b8:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	685a      	ldr	r2, [r3, #4]
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	2102      	movs	r1, #2
 80058c6:	430a      	orrs	r2, r1
 80058c8:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2250      	movs	r2, #80	; 0x50
 80058ce:	2100      	movs	r1, #0
 80058d0:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80058d2:	2317      	movs	r3, #23
 80058d4:	18fb      	adds	r3, r7, r3
 80058d6:	781b      	ldrb	r3, [r3, #0]
}
 80058d8:	0018      	movs	r0, r3
 80058da:	46bd      	mov	sp, r7
 80058dc:	b006      	add	sp, #24
 80058de:	bd80      	pop	{r7, pc}
 80058e0:	08005bcd 	.word	0x08005bcd
 80058e4:	08005b21 	.word	0x08005b21
 80058e8:	08005beb 	.word	0x08005beb

080058ec <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b088      	sub	sp, #32
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	689b      	ldr	r3, [r3, #8]
 8005902:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005904:	69bb      	ldr	r3, [r7, #24]
 8005906:	099b      	lsrs	r3, r3, #6
 8005908:	001a      	movs	r2, r3
 800590a:	2301      	movs	r3, #1
 800590c:	4013      	ands	r3, r2
 800590e:	d10f      	bne.n	8005930 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005910:	69bb      	ldr	r3, [r7, #24]
 8005912:	2201      	movs	r2, #1
 8005914:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005916:	d00b      	beq.n	8005930 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005918:	69fb      	ldr	r3, [r7, #28]
 800591a:	099b      	lsrs	r3, r3, #6
 800591c:	001a      	movs	r2, r3
 800591e:	2301      	movs	r3, #1
 8005920:	4013      	ands	r3, r2
 8005922:	d005      	beq.n	8005930 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005928:	687a      	ldr	r2, [r7, #4]
 800592a:	0010      	movs	r0, r2
 800592c:	4798      	blx	r3
    return;
 800592e:	e0d6      	b.n	8005ade <HAL_SPI_IRQHandler+0x1f2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005930:	69bb      	ldr	r3, [r7, #24]
 8005932:	085b      	lsrs	r3, r3, #1
 8005934:	001a      	movs	r2, r3
 8005936:	2301      	movs	r3, #1
 8005938:	4013      	ands	r3, r2
 800593a:	d00b      	beq.n	8005954 <HAL_SPI_IRQHandler+0x68>
 800593c:	69fb      	ldr	r3, [r7, #28]
 800593e:	09db      	lsrs	r3, r3, #7
 8005940:	001a      	movs	r2, r3
 8005942:	2301      	movs	r3, #1
 8005944:	4013      	ands	r3, r2
 8005946:	d005      	beq.n	8005954 <HAL_SPI_IRQHandler+0x68>
  {
    hspi->TxISR(hspi);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800594c:	687a      	ldr	r2, [r7, #4]
 800594e:	0010      	movs	r0, r2
 8005950:	4798      	blx	r3
    return;
 8005952:	e0c4      	b.n	8005ade <HAL_SPI_IRQHandler+0x1f2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005954:	69bb      	ldr	r3, [r7, #24]
 8005956:	095b      	lsrs	r3, r3, #5
 8005958:	001a      	movs	r2, r3
 800595a:	2301      	movs	r3, #1
 800595c:	4013      	ands	r3, r2
 800595e:	d10c      	bne.n	800597a <HAL_SPI_IRQHandler+0x8e>
 8005960:	69bb      	ldr	r3, [r7, #24]
 8005962:	099b      	lsrs	r3, r3, #6
 8005964:	001a      	movs	r2, r3
 8005966:	2301      	movs	r3, #1
 8005968:	4013      	ands	r3, r2
 800596a:	d106      	bne.n	800597a <HAL_SPI_IRQHandler+0x8e>
 800596c:	69bb      	ldr	r3, [r7, #24]
 800596e:	0a1b      	lsrs	r3, r3, #8
 8005970:	001a      	movs	r2, r3
 8005972:	2301      	movs	r3, #1
 8005974:	4013      	ands	r3, r2
 8005976:	d100      	bne.n	800597a <HAL_SPI_IRQHandler+0x8e>
 8005978:	e0b1      	b.n	8005ade <HAL_SPI_IRQHandler+0x1f2>
 800597a:	69fb      	ldr	r3, [r7, #28]
 800597c:	095b      	lsrs	r3, r3, #5
 800597e:	001a      	movs	r2, r3
 8005980:	2301      	movs	r3, #1
 8005982:	4013      	ands	r3, r2
 8005984:	d100      	bne.n	8005988 <HAL_SPI_IRQHandler+0x9c>
 8005986:	e0aa      	b.n	8005ade <HAL_SPI_IRQHandler+0x1f2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005988:	69bb      	ldr	r3, [r7, #24]
 800598a:	099b      	lsrs	r3, r3, #6
 800598c:	001a      	movs	r2, r3
 800598e:	2301      	movs	r3, #1
 8005990:	4013      	ands	r3, r2
 8005992:	d023      	beq.n	80059dc <HAL_SPI_IRQHandler+0xf0>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2251      	movs	r2, #81	; 0x51
 8005998:	5c9b      	ldrb	r3, [r3, r2]
 800599a:	b2db      	uxtb	r3, r3
 800599c:	2b03      	cmp	r3, #3
 800599e:	d011      	beq.n	80059c4 <HAL_SPI_IRQHandler+0xd8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059a4:	2204      	movs	r2, #4
 80059a6:	431a      	orrs	r2, r3
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80059ac:	2300      	movs	r3, #0
 80059ae:	617b      	str	r3, [r7, #20]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	68db      	ldr	r3, [r3, #12]
 80059b6:	617b      	str	r3, [r7, #20]
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	689b      	ldr	r3, [r3, #8]
 80059be:	617b      	str	r3, [r7, #20]
 80059c0:	697b      	ldr	r3, [r7, #20]
 80059c2:	e00b      	b.n	80059dc <HAL_SPI_IRQHandler+0xf0>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80059c4:	2300      	movs	r3, #0
 80059c6:	613b      	str	r3, [r7, #16]
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	68db      	ldr	r3, [r3, #12]
 80059ce:	613b      	str	r3, [r7, #16]
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	689b      	ldr	r3, [r3, #8]
 80059d6:	613b      	str	r3, [r7, #16]
 80059d8:	693b      	ldr	r3, [r7, #16]
        return;
 80059da:	e080      	b.n	8005ade <HAL_SPI_IRQHandler+0x1f2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80059dc:	69bb      	ldr	r3, [r7, #24]
 80059de:	095b      	lsrs	r3, r3, #5
 80059e0:	001a      	movs	r2, r3
 80059e2:	2301      	movs	r3, #1
 80059e4:	4013      	ands	r3, r2
 80059e6:	d014      	beq.n	8005a12 <HAL_SPI_IRQHandler+0x126>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059ec:	2201      	movs	r2, #1
 80059ee:	431a      	orrs	r2, r3
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80059f4:	2300      	movs	r3, #0
 80059f6:	60fb      	str	r3, [r7, #12]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	689b      	ldr	r3, [r3, #8]
 80059fe:	60fb      	str	r3, [r7, #12]
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	681a      	ldr	r2, [r3, #0]
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	2140      	movs	r1, #64	; 0x40
 8005a0c:	438a      	bics	r2, r1
 8005a0e:	601a      	str	r2, [r3, #0]
 8005a10:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005a12:	69bb      	ldr	r3, [r7, #24]
 8005a14:	0a1b      	lsrs	r3, r3, #8
 8005a16:	001a      	movs	r2, r3
 8005a18:	2301      	movs	r3, #1
 8005a1a:	4013      	ands	r3, r2
 8005a1c:	d00c      	beq.n	8005a38 <HAL_SPI_IRQHandler+0x14c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a22:	2208      	movs	r2, #8
 8005a24:	431a      	orrs	r2, r3
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	60bb      	str	r3, [r7, #8]
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	689b      	ldr	r3, [r3, #8]
 8005a34:	60bb      	str	r3, [r7, #8]
 8005a36:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d04d      	beq.n	8005adc <HAL_SPI_IRQHandler+0x1f0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	685a      	ldr	r2, [r3, #4]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	21e0      	movs	r1, #224	; 0xe0
 8005a4c:	438a      	bics	r2, r1
 8005a4e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2251      	movs	r2, #81	; 0x51
 8005a54:	2101      	movs	r1, #1
 8005a56:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005a58:	69fb      	ldr	r3, [r7, #28]
 8005a5a:	2202      	movs	r2, #2
 8005a5c:	4013      	ands	r3, r2
 8005a5e:	d103      	bne.n	8005a68 <HAL_SPI_IRQHandler+0x17c>
 8005a60:	69fb      	ldr	r3, [r7, #28]
 8005a62:	2201      	movs	r2, #1
 8005a64:	4013      	ands	r3, r2
 8005a66:	d032      	beq.n	8005ace <HAL_SPI_IRQHandler+0x1e2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	685a      	ldr	r2, [r3, #4]
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	2103      	movs	r1, #3
 8005a74:	438a      	bics	r2, r1
 8005a76:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d010      	beq.n	8005aa2 <HAL_SPI_IRQHandler+0x1b6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a84:	4a17      	ldr	r2, [pc, #92]	; (8005ae4 <HAL_SPI_IRQHandler+0x1f8>)
 8005a86:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a8c:	0018      	movs	r0, r3
 8005a8e:	f7fd fa77 	bl	8002f80 <HAL_DMA_Abort_IT>
 8005a92:	1e03      	subs	r3, r0, #0
 8005a94:	d005      	beq.n	8005aa2 <HAL_SPI_IRQHandler+0x1b6>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a9a:	2240      	movs	r2, #64	; 0x40
 8005a9c:	431a      	orrs	r2, r3
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d016      	beq.n	8005ad8 <HAL_SPI_IRQHandler+0x1ec>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005aae:	4a0d      	ldr	r2, [pc, #52]	; (8005ae4 <HAL_SPI_IRQHandler+0x1f8>)
 8005ab0:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ab6:	0018      	movs	r0, r3
 8005ab8:	f7fd fa62 	bl	8002f80 <HAL_DMA_Abort_IT>
 8005abc:	1e03      	subs	r3, r0, #0
 8005abe:	d00b      	beq.n	8005ad8 <HAL_SPI_IRQHandler+0x1ec>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ac4:	2240      	movs	r2, #64	; 0x40
 8005ac6:	431a      	orrs	r2, r3
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8005acc:	e004      	b.n	8005ad8 <HAL_SPI_IRQHandler+0x1ec>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	0018      	movs	r0, r3
 8005ad2:	f000 f811 	bl	8005af8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005ad6:	e000      	b.n	8005ada <HAL_SPI_IRQHandler+0x1ee>
        if (hspi->hdmatx != NULL)
 8005ad8:	46c0      	nop			; (mov r8, r8)
    return;
 8005ada:	46c0      	nop			; (mov r8, r8)
 8005adc:	46c0      	nop			; (mov r8, r8)
  }
}
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	b008      	add	sp, #32
 8005ae2:	bd80      	pop	{r7, pc}
 8005ae4:	08005c2d 	.word	0x08005c2d

08005ae8 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b082      	sub	sp, #8
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8005af0:	46c0      	nop			; (mov r8, r8)
 8005af2:	46bd      	mov	sp, r7
 8005af4:	b002      	add	sp, #8
 8005af6:	bd80      	pop	{r7, pc}

08005af8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b082      	sub	sp, #8
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005b00:	46c0      	nop			; (mov r8, r8)
 8005b02:	46bd      	mov	sp, r7
 8005b04:	b002      	add	sp, #8
 8005b06:	bd80      	pop	{r7, pc}

08005b08 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b082      	sub	sp, #8
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2251      	movs	r2, #81	; 0x51
 8005b14:	5c9b      	ldrb	r3, [r3, r2]
 8005b16:	b2db      	uxtb	r3, r3
}
 8005b18:	0018      	movs	r0, r3
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	b002      	add	sp, #8
 8005b1e:	bd80      	pop	{r7, pc}

08005b20 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b086      	sub	sp, #24
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b2c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005b2e:	f7fc fe15 	bl	800275c <HAL_GetTick>
 8005b32:	0003      	movs	r3, r0
 8005b34:	613b      	str	r3, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	2220      	movs	r2, #32
 8005b3e:	4013      	ands	r3, r2
 8005b40:	2b20      	cmp	r3, #32
 8005b42:	d03c      	beq.n	8005bbe <SPI_DMATransmitCplt+0x9e>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005b44:	697b      	ldr	r3, [r7, #20]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	685a      	ldr	r2, [r3, #4]
 8005b4a:	697b      	ldr	r3, [r7, #20]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	2120      	movs	r1, #32
 8005b50:	438a      	bics	r2, r1
 8005b52:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005b54:	697b      	ldr	r3, [r7, #20]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	685a      	ldr	r2, [r3, #4]
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	2102      	movs	r1, #2
 8005b60:	438a      	bics	r2, r1
 8005b62:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005b64:	693a      	ldr	r2, [r7, #16]
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	2164      	movs	r1, #100	; 0x64
 8005b6a:	0018      	movs	r0, r3
 8005b6c:	f000 f8e4 	bl	8005d38 <SPI_EndRxTxTransaction>
 8005b70:	1e03      	subs	r3, r0, #0
 8005b72:	d005      	beq.n	8005b80 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b74:	697b      	ldr	r3, [r7, #20]
 8005b76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b78:	2220      	movs	r2, #32
 8005b7a:	431a      	orrs	r2, r3
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	689b      	ldr	r3, [r3, #8]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d10a      	bne.n	8005b9e <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005b88:	2300      	movs	r3, #0
 8005b8a:	60fb      	str	r3, [r7, #12]
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	68db      	ldr	r3, [r3, #12]
 8005b92:	60fb      	str	r3, [r7, #12]
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	689b      	ldr	r3, [r3, #8]
 8005b9a:	60fb      	str	r3, [r7, #12]
 8005b9c:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8005b9e:	697b      	ldr	r3, [r7, #20]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8005ba4:	697b      	ldr	r3, [r7, #20]
 8005ba6:	2251      	movs	r2, #81	; 0x51
 8005ba8:	2101      	movs	r1, #1
 8005baa:	5499      	strb	r1, [r3, r2]

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d004      	beq.n	8005bbe <SPI_DMATransmitCplt+0x9e>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	0018      	movs	r0, r3
 8005bb8:	f7ff ff9e 	bl	8005af8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8005bbc:	e003      	b.n	8005bc6 <SPI_DMATransmitCplt+0xa6>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	0018      	movs	r0, r3
 8005bc2:	f7fa fc85 	bl	80004d0 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	b006      	add	sp, #24
 8005bca:	bd80      	pop	{r7, pc}

08005bcc <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b084      	sub	sp, #16
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bd8:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	0018      	movs	r0, r3
 8005bde:	f7ff ff83 	bl	8005ae8 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005be2:	46c0      	nop			; (mov r8, r8)
 8005be4:	46bd      	mov	sp, r7
 8005be6:	b004      	add	sp, #16
 8005be8:	bd80      	pop	{r7, pc}

08005bea <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8005bea:	b580      	push	{r7, lr}
 8005bec:	b084      	sub	sp, #16
 8005bee:	af00      	add	r7, sp, #0
 8005bf0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bf6:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	685a      	ldr	r2, [r3, #4]
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	2103      	movs	r1, #3
 8005c04:	438a      	bics	r2, r1
 8005c06:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c0c:	2210      	movs	r2, #16
 8005c0e:	431a      	orrs	r2, r3
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	2251      	movs	r2, #81	; 0x51
 8005c18:	2101      	movs	r1, #1
 8005c1a:	5499      	strb	r1, [r3, r2]
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	0018      	movs	r0, r3
 8005c20:	f7ff ff6a 	bl	8005af8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005c24:	46c0      	nop			; (mov r8, r8)
 8005c26:	46bd      	mov	sp, r7
 8005c28:	b004      	add	sp, #16
 8005c2a:	bd80      	pop	{r7, pc}

08005c2c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b084      	sub	sp, #16
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c38:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	2200      	movs	r2, #0
 8005c44:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	0018      	movs	r0, r3
 8005c4a:	f7ff ff55 	bl	8005af8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005c4e:	46c0      	nop			; (mov r8, r8)
 8005c50:	46bd      	mov	sp, r7
 8005c52:	b004      	add	sp, #16
 8005c54:	bd80      	pop	{r7, pc}
	...

08005c58 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b084      	sub	sp, #16
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	60f8      	str	r0, [r7, #12]
 8005c60:	60b9      	str	r1, [r7, #8]
 8005c62:	603b      	str	r3, [r7, #0]
 8005c64:	1dfb      	adds	r3, r7, #7
 8005c66:	701a      	strb	r2, [r3, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005c68:	e050      	b.n	8005d0c <SPI_WaitFlagStateUntilTimeout+0xb4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	3301      	adds	r3, #1
 8005c6e:	d04d      	beq.n	8005d0c <SPI_WaitFlagStateUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005c70:	f7fc fd74 	bl	800275c <HAL_GetTick>
 8005c74:	0002      	movs	r2, r0
 8005c76:	69bb      	ldr	r3, [r7, #24]
 8005c78:	1ad3      	subs	r3, r2, r3
 8005c7a:	683a      	ldr	r2, [r7, #0]
 8005c7c:	429a      	cmp	r2, r3
 8005c7e:	d902      	bls.n	8005c86 <SPI_WaitFlagStateUntilTimeout+0x2e>
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d142      	bne.n	8005d0c <SPI_WaitFlagStateUntilTimeout+0xb4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	685a      	ldr	r2, [r3, #4]
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	21e0      	movs	r1, #224	; 0xe0
 8005c92:	438a      	bics	r2, r1
 8005c94:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	685a      	ldr	r2, [r3, #4]
 8005c9a:	2382      	movs	r3, #130	; 0x82
 8005c9c:	005b      	lsls	r3, r3, #1
 8005c9e:	429a      	cmp	r2, r3
 8005ca0:	d113      	bne.n	8005cca <SPI_WaitFlagStateUntilTimeout+0x72>
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	689a      	ldr	r2, [r3, #8]
 8005ca6:	2380      	movs	r3, #128	; 0x80
 8005ca8:	021b      	lsls	r3, r3, #8
 8005caa:	429a      	cmp	r2, r3
 8005cac:	d005      	beq.n	8005cba <SPI_WaitFlagStateUntilTimeout+0x62>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	689a      	ldr	r2, [r3, #8]
 8005cb2:	2380      	movs	r3, #128	; 0x80
 8005cb4:	00db      	lsls	r3, r3, #3
 8005cb6:	429a      	cmp	r2, r3
 8005cb8:	d107      	bne.n	8005cca <SPI_WaitFlagStateUntilTimeout+0x72>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	681a      	ldr	r2, [r3, #0]
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	2140      	movs	r1, #64	; 0x40
 8005cc6:	438a      	bics	r2, r1
 8005cc8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005cce:	2380      	movs	r3, #128	; 0x80
 8005cd0:	019b      	lsls	r3, r3, #6
 8005cd2:	429a      	cmp	r2, r3
 8005cd4:	d110      	bne.n	8005cf8 <SPI_WaitFlagStateUntilTimeout+0xa0>
        {
          SPI_RESET_CRC(hspi);
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	681a      	ldr	r2, [r3, #0]
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4914      	ldr	r1, [pc, #80]	; (8005d34 <SPI_WaitFlagStateUntilTimeout+0xdc>)
 8005ce2:	400a      	ands	r2, r1
 8005ce4:	601a      	str	r2, [r3, #0]
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	681a      	ldr	r2, [r3, #0]
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	2180      	movs	r1, #128	; 0x80
 8005cf2:	0189      	lsls	r1, r1, #6
 8005cf4:	430a      	orrs	r2, r1
 8005cf6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	2251      	movs	r2, #81	; 0x51
 8005cfc:	2101      	movs	r1, #1
 8005cfe:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	2250      	movs	r2, #80	; 0x50
 8005d04:	2100      	movs	r1, #0
 8005d06:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005d08:	2303      	movs	r3, #3
 8005d0a:	e00f      	b.n	8005d2c <SPI_WaitFlagStateUntilTimeout+0xd4>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	689b      	ldr	r3, [r3, #8]
 8005d12:	68ba      	ldr	r2, [r7, #8]
 8005d14:	4013      	ands	r3, r2
 8005d16:	68ba      	ldr	r2, [r7, #8]
 8005d18:	1ad3      	subs	r3, r2, r3
 8005d1a:	425a      	negs	r2, r3
 8005d1c:	4153      	adcs	r3, r2
 8005d1e:	b2db      	uxtb	r3, r3
 8005d20:	001a      	movs	r2, r3
 8005d22:	1dfb      	adds	r3, r7, #7
 8005d24:	781b      	ldrb	r3, [r3, #0]
 8005d26:	429a      	cmp	r2, r3
 8005d28:	d19f      	bne.n	8005c6a <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8005d2a:	2300      	movs	r3, #0
}
 8005d2c:	0018      	movs	r0, r3
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	b004      	add	sp, #16
 8005d32:	bd80      	pop	{r7, pc}
 8005d34:	ffffdfff 	.word	0xffffdfff

08005d38 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b086      	sub	sp, #24
 8005d3c:	af02      	add	r7, sp, #8
 8005d3e:	60f8      	str	r0, [r7, #12]
 8005d40:	60b9      	str	r1, [r7, #8]
 8005d42:	607a      	str	r2, [r7, #4]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	685a      	ldr	r2, [r3, #4]
 8005d48:	2382      	movs	r3, #130	; 0x82
 8005d4a:	005b      	lsls	r3, r3, #1
 8005d4c:	429a      	cmp	r2, r3
 8005d4e:	d112      	bne.n	8005d76 <SPI_EndRxTxTransaction+0x3e>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005d50:	68ba      	ldr	r2, [r7, #8]
 8005d52:	68f8      	ldr	r0, [r7, #12]
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	9300      	str	r3, [sp, #0]
 8005d58:	0013      	movs	r3, r2
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	2180      	movs	r1, #128	; 0x80
 8005d5e:	f7ff ff7b 	bl	8005c58 <SPI_WaitFlagStateUntilTimeout>
 8005d62:	1e03      	subs	r3, r0, #0
 8005d64:	d020      	beq.n	8005da8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d6a:	2220      	movs	r2, #32
 8005d6c:	431a      	orrs	r2, r3
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005d72:	2303      	movs	r3, #3
 8005d74:	e019      	b.n	8005daa <SPI_EndRxTxTransaction+0x72>
    }
  }
  else
  {
    /* Control RXNE flag in case of Full-Duplex transfer */
    if (hspi->State == HAL_SPI_STATE_BUSY_TX_RX)
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	2251      	movs	r2, #81	; 0x51
 8005d7a:	5c9b      	ldrb	r3, [r3, r2]
 8005d7c:	b2db      	uxtb	r3, r3
 8005d7e:	2b05      	cmp	r3, #5
 8005d80:	d112      	bne.n	8005da8 <SPI_EndRxTxTransaction+0x70>
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005d82:	68ba      	ldr	r2, [r7, #8]
 8005d84:	68f8      	ldr	r0, [r7, #12]
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	9300      	str	r3, [sp, #0]
 8005d8a:	0013      	movs	r3, r2
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	2101      	movs	r1, #1
 8005d90:	f7ff ff62 	bl	8005c58 <SPI_WaitFlagStateUntilTimeout>
 8005d94:	1e03      	subs	r3, r0, #0
 8005d96:	d007      	beq.n	8005da8 <SPI_EndRxTxTransaction+0x70>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d9c:	2220      	movs	r2, #32
 8005d9e:	431a      	orrs	r2, r3
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005da4:	2303      	movs	r3, #3
 8005da6:	e000      	b.n	8005daa <SPI_EndRxTxTransaction+0x72>
      }
    }
  }
  return HAL_OK;
 8005da8:	2300      	movs	r3, #0
}
 8005daa:	0018      	movs	r0, r3
 8005dac:	46bd      	mov	sp, r7
 8005dae:	b004      	add	sp, #16
 8005db0:	bd80      	pop	{r7, pc}

08005db2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005db2:	b580      	push	{r7, lr}
 8005db4:	b082      	sub	sp, #8
 8005db6:	af00      	add	r7, sp, #0
 8005db8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d101      	bne.n	8005dc4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	e01e      	b.n	8005e02 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2239      	movs	r2, #57	; 0x39
 8005dc8:	5c9b      	ldrb	r3, [r3, r2]
 8005dca:	b2db      	uxtb	r3, r3
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d107      	bne.n	8005de0 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2238      	movs	r2, #56	; 0x38
 8005dd4:	2100      	movs	r1, #0
 8005dd6:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	0018      	movs	r0, r3
 8005ddc:	f7fc fb0e 	bl	80023fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2239      	movs	r2, #57	; 0x39
 8005de4:	2102      	movs	r1, #2
 8005de6:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681a      	ldr	r2, [r3, #0]
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	3304      	adds	r3, #4
 8005df0:	0019      	movs	r1, r3
 8005df2:	0010      	movs	r0, r2
 8005df4:	f000 f96c 	bl	80060d0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2239      	movs	r2, #57	; 0x39
 8005dfc:	2101      	movs	r1, #1
 8005dfe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005e00:	2300      	movs	r3, #0
}
 8005e02:	0018      	movs	r0, r3
 8005e04:	46bd      	mov	sp, r7
 8005e06:	b002      	add	sp, #8
 8005e08:	bd80      	pop	{r7, pc}

08005e0a <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005e0a:	b580      	push	{r7, lr}
 8005e0c:	b084      	sub	sp, #16
 8005e0e:	af00      	add	r7, sp, #0
 8005e10:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2239      	movs	r2, #57	; 0x39
 8005e16:	2102      	movs	r1, #2
 8005e18:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	689b      	ldr	r3, [r3, #8]
 8005e20:	2207      	movs	r2, #7
 8005e22:	4013      	ands	r3, r2
 8005e24:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	2b06      	cmp	r3, #6
 8005e2a:	d007      	beq.n	8005e3c <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	681a      	ldr	r2, [r3, #0]
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	2101      	movs	r1, #1
 8005e38:	430a      	orrs	r2, r1
 8005e3a:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2239      	movs	r2, #57	; 0x39
 8005e40:	2101      	movs	r1, #1
 8005e42:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8005e44:	2300      	movs	r3, #0
}
 8005e46:	0018      	movs	r0, r3
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	b004      	add	sp, #16
 8005e4c:	bd80      	pop	{r7, pc}

08005e4e <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8005e4e:	b580      	push	{r7, lr}
 8005e50:	b082      	sub	sp, #8
 8005e52:	af00      	add	r7, sp, #0
 8005e54:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d101      	bne.n	8005e60 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	e01e      	b.n	8005e9e <HAL_TIM_OC_Init+0x50>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2239      	movs	r2, #57	; 0x39
 8005e64:	5c9b      	ldrb	r3, [r3, r2]
 8005e66:	b2db      	uxtb	r3, r3
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d107      	bne.n	8005e7c <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2238      	movs	r2, #56	; 0x38
 8005e70:	2100      	movs	r1, #0
 8005e72:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	0018      	movs	r0, r3
 8005e78:	f000 f815 	bl	8005ea6 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2239      	movs	r2, #57	; 0x39
 8005e80:	2102      	movs	r1, #2
 8005e82:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681a      	ldr	r2, [r3, #0]
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	3304      	adds	r3, #4
 8005e8c:	0019      	movs	r1, r3
 8005e8e:	0010      	movs	r0, r2
 8005e90:	f000 f91e 	bl	80060d0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2239      	movs	r2, #57	; 0x39
 8005e98:	2101      	movs	r1, #1
 8005e9a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005e9c:	2300      	movs	r3, #0
}
 8005e9e:	0018      	movs	r0, r3
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	b002      	add	sp, #8
 8005ea4:	bd80      	pop	{r7, pc}

08005ea6 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8005ea6:	b580      	push	{r7, lr}
 8005ea8:	b082      	sub	sp, #8
 8005eaa:	af00      	add	r7, sp, #0
 8005eac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8005eae:	46c0      	nop			; (mov r8, r8)
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	b002      	add	sp, #8
 8005eb4:	bd80      	pop	{r7, pc}

08005eb6 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005eb6:	b580      	push	{r7, lr}
 8005eb8:	b084      	sub	sp, #16
 8005eba:	af00      	add	r7, sp, #0
 8005ebc:	60f8      	str	r0, [r7, #12]
 8005ebe:	60b9      	str	r1, [r7, #8]
 8005ec0:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	2238      	movs	r2, #56	; 0x38
 8005ec6:	5c9b      	ldrb	r3, [r3, r2]
 8005ec8:	2b01      	cmp	r3, #1
 8005eca:	d101      	bne.n	8005ed0 <HAL_TIM_OC_ConfigChannel+0x1a>
 8005ecc:	2302      	movs	r3, #2
 8005ece:	e03c      	b.n	8005f4a <HAL_TIM_OC_ConfigChannel+0x94>
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2238      	movs	r2, #56	; 0x38
 8005ed4:	2101      	movs	r1, #1
 8005ed6:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	2239      	movs	r2, #57	; 0x39
 8005edc:	2102      	movs	r1, #2
 8005ede:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2b04      	cmp	r3, #4
 8005ee4:	d010      	beq.n	8005f08 <HAL_TIM_OC_ConfigChannel+0x52>
 8005ee6:	d802      	bhi.n	8005eee <HAL_TIM_OC_ConfigChannel+0x38>
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d005      	beq.n	8005ef8 <HAL_TIM_OC_ConfigChannel+0x42>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
      break;
    }

    default:
      break;
 8005eec:	e024      	b.n	8005f38 <HAL_TIM_OC_ConfigChannel+0x82>
  switch (Channel)
 8005eee:	2b08      	cmp	r3, #8
 8005ef0:	d012      	beq.n	8005f18 <HAL_TIM_OC_ConfigChannel+0x62>
 8005ef2:	2b0c      	cmp	r3, #12
 8005ef4:	d018      	beq.n	8005f28 <HAL_TIM_OC_ConfigChannel+0x72>
      break;
 8005ef6:	e01f      	b.n	8005f38 <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	68ba      	ldr	r2, [r7, #8]
 8005efe:	0011      	movs	r1, r2
 8005f00:	0018      	movs	r0, r3
 8005f02:	f000 f943 	bl	800618c <TIM_OC1_SetConfig>
      break;
 8005f06:	e017      	b.n	8005f38 <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	68ba      	ldr	r2, [r7, #8]
 8005f0e:	0011      	movs	r1, r2
 8005f10:	0018      	movs	r0, r3
 8005f12:	f000 f977 	bl	8006204 <TIM_OC2_SetConfig>
      break;
 8005f16:	e00f      	b.n	8005f38 <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	68ba      	ldr	r2, [r7, #8]
 8005f1e:	0011      	movs	r1, r2
 8005f20:	0018      	movs	r0, r3
 8005f22:	f000 f9b1 	bl	8006288 <TIM_OC3_SetConfig>
      break;
 8005f26:	e007      	b.n	8005f38 <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	68ba      	ldr	r2, [r7, #8]
 8005f2e:	0011      	movs	r1, r2
 8005f30:	0018      	movs	r0, r3
 8005f32:	f000 f9e9 	bl	8006308 <TIM_OC4_SetConfig>
      break;
 8005f36:	46c0      	nop			; (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	2239      	movs	r2, #57	; 0x39
 8005f3c:	2101      	movs	r1, #1
 8005f3e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	2238      	movs	r2, #56	; 0x38
 8005f44:	2100      	movs	r1, #0
 8005f46:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005f48:	2300      	movs	r3, #0
}
 8005f4a:	0018      	movs	r0, r3
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	b004      	add	sp, #16
 8005f50:	bd80      	pop	{r7, pc}
	...

08005f54 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b084      	sub	sp, #16
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
 8005f5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2238      	movs	r2, #56	; 0x38
 8005f62:	5c9b      	ldrb	r3, [r3, r2]
 8005f64:	2b01      	cmp	r3, #1
 8005f66:	d101      	bne.n	8005f6c <HAL_TIM_ConfigClockSource+0x18>
 8005f68:	2302      	movs	r3, #2
 8005f6a:	e0ab      	b.n	80060c4 <HAL_TIM_ConfigClockSource+0x170>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2238      	movs	r2, #56	; 0x38
 8005f70:	2101      	movs	r1, #1
 8005f72:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2239      	movs	r2, #57	; 0x39
 8005f78:	2102      	movs	r1, #2
 8005f7a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	689b      	ldr	r3, [r3, #8]
 8005f82:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	2277      	movs	r2, #119	; 0x77
 8005f88:	4393      	bics	r3, r2
 8005f8a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	4a4f      	ldr	r2, [pc, #316]	; (80060cc <HAL_TIM_ConfigClockSource+0x178>)
 8005f90:	4013      	ands	r3, r2
 8005f92:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	68fa      	ldr	r2, [r7, #12]
 8005f9a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	2b40      	cmp	r3, #64	; 0x40
 8005fa2:	d100      	bne.n	8005fa6 <HAL_TIM_ConfigClockSource+0x52>
 8005fa4:	e06b      	b.n	800607e <HAL_TIM_ConfigClockSource+0x12a>
 8005fa6:	d80e      	bhi.n	8005fc6 <HAL_TIM_ConfigClockSource+0x72>
 8005fa8:	2b10      	cmp	r3, #16
 8005faa:	d100      	bne.n	8005fae <HAL_TIM_ConfigClockSource+0x5a>
 8005fac:	e077      	b.n	800609e <HAL_TIM_ConfigClockSource+0x14a>
 8005fae:	d803      	bhi.n	8005fb8 <HAL_TIM_ConfigClockSource+0x64>
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d100      	bne.n	8005fb6 <HAL_TIM_ConfigClockSource+0x62>
 8005fb4:	e073      	b.n	800609e <HAL_TIM_ConfigClockSource+0x14a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005fb6:	e07c      	b.n	80060b2 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8005fb8:	2b20      	cmp	r3, #32
 8005fba:	d100      	bne.n	8005fbe <HAL_TIM_ConfigClockSource+0x6a>
 8005fbc:	e06f      	b.n	800609e <HAL_TIM_ConfigClockSource+0x14a>
 8005fbe:	2b30      	cmp	r3, #48	; 0x30
 8005fc0:	d100      	bne.n	8005fc4 <HAL_TIM_ConfigClockSource+0x70>
 8005fc2:	e06c      	b.n	800609e <HAL_TIM_ConfigClockSource+0x14a>
      break;
 8005fc4:	e075      	b.n	80060b2 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8005fc6:	2b70      	cmp	r3, #112	; 0x70
 8005fc8:	d00e      	beq.n	8005fe8 <HAL_TIM_ConfigClockSource+0x94>
 8005fca:	d804      	bhi.n	8005fd6 <HAL_TIM_ConfigClockSource+0x82>
 8005fcc:	2b50      	cmp	r3, #80	; 0x50
 8005fce:	d036      	beq.n	800603e <HAL_TIM_ConfigClockSource+0xea>
 8005fd0:	2b60      	cmp	r3, #96	; 0x60
 8005fd2:	d044      	beq.n	800605e <HAL_TIM_ConfigClockSource+0x10a>
      break;
 8005fd4:	e06d      	b.n	80060b2 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8005fd6:	2280      	movs	r2, #128	; 0x80
 8005fd8:	0152      	lsls	r2, r2, #5
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d068      	beq.n	80060b0 <HAL_TIM_ConfigClockSource+0x15c>
 8005fde:	2280      	movs	r2, #128	; 0x80
 8005fe0:	0192      	lsls	r2, r2, #6
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d017      	beq.n	8006016 <HAL_TIM_ConfigClockSource+0xc2>
      break;
 8005fe6:	e064      	b.n	80060b2 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6818      	ldr	r0, [r3, #0]
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	6899      	ldr	r1, [r3, #8]
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	685a      	ldr	r2, [r3, #4]
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	68db      	ldr	r3, [r3, #12]
 8005ff8:	f000 fa46 	bl	8006488 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	689b      	ldr	r3, [r3, #8]
 8006002:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	2277      	movs	r2, #119	; 0x77
 8006008:	4313      	orrs	r3, r2
 800600a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	68fa      	ldr	r2, [r7, #12]
 8006012:	609a      	str	r2, [r3, #8]
      break;
 8006014:	e04d      	b.n	80060b2 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6818      	ldr	r0, [r3, #0]
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	6899      	ldr	r1, [r3, #8]
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	685a      	ldr	r2, [r3, #4]
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	68db      	ldr	r3, [r3, #12]
 8006026:	f000 fa2f 	bl	8006488 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	689a      	ldr	r2, [r3, #8]
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	2180      	movs	r1, #128	; 0x80
 8006036:	01c9      	lsls	r1, r1, #7
 8006038:	430a      	orrs	r2, r1
 800603a:	609a      	str	r2, [r3, #8]
      break;
 800603c:	e039      	b.n	80060b2 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6818      	ldr	r0, [r3, #0]
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	6859      	ldr	r1, [r3, #4]
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	68db      	ldr	r3, [r3, #12]
 800604a:	001a      	movs	r2, r3
 800604c:	f000 f9a2 	bl	8006394 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	2150      	movs	r1, #80	; 0x50
 8006056:	0018      	movs	r0, r3
 8006058:	f000 f9fc 	bl	8006454 <TIM_ITRx_SetConfig>
      break;
 800605c:	e029      	b.n	80060b2 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6818      	ldr	r0, [r3, #0]
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	6859      	ldr	r1, [r3, #4]
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	68db      	ldr	r3, [r3, #12]
 800606a:	001a      	movs	r2, r3
 800606c:	f000 f9c0 	bl	80063f0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	2160      	movs	r1, #96	; 0x60
 8006076:	0018      	movs	r0, r3
 8006078:	f000 f9ec 	bl	8006454 <TIM_ITRx_SetConfig>
      break;
 800607c:	e019      	b.n	80060b2 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6818      	ldr	r0, [r3, #0]
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	6859      	ldr	r1, [r3, #4]
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	68db      	ldr	r3, [r3, #12]
 800608a:	001a      	movs	r2, r3
 800608c:	f000 f982 	bl	8006394 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	2140      	movs	r1, #64	; 0x40
 8006096:	0018      	movs	r0, r3
 8006098:	f000 f9dc 	bl	8006454 <TIM_ITRx_SetConfig>
      break;
 800609c:	e009      	b.n	80060b2 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681a      	ldr	r2, [r3, #0]
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	0019      	movs	r1, r3
 80060a8:	0010      	movs	r0, r2
 80060aa:	f000 f9d3 	bl	8006454 <TIM_ITRx_SetConfig>
      break;
 80060ae:	e000      	b.n	80060b2 <HAL_TIM_ConfigClockSource+0x15e>
      break;
 80060b0:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2239      	movs	r2, #57	; 0x39
 80060b6:	2101      	movs	r1, #1
 80060b8:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2238      	movs	r2, #56	; 0x38
 80060be:	2100      	movs	r1, #0
 80060c0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80060c2:	2300      	movs	r3, #0
}
 80060c4:	0018      	movs	r0, r3
 80060c6:	46bd      	mov	sp, r7
 80060c8:	b004      	add	sp, #16
 80060ca:	bd80      	pop	{r7, pc}
 80060cc:	ffff00ff 	.word	0xffff00ff

080060d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b084      	sub	sp, #16
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
 80060d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80060e0:	687a      	ldr	r2, [r7, #4]
 80060e2:	2380      	movs	r3, #128	; 0x80
 80060e4:	05db      	lsls	r3, r3, #23
 80060e6:	429a      	cmp	r2, r3
 80060e8:	d00b      	beq.n	8006102 <TIM_Base_SetConfig+0x32>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	4a23      	ldr	r2, [pc, #140]	; (800617c <TIM_Base_SetConfig+0xac>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d007      	beq.n	8006102 <TIM_Base_SetConfig+0x32>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	4a22      	ldr	r2, [pc, #136]	; (8006180 <TIM_Base_SetConfig+0xb0>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d003      	beq.n	8006102 <TIM_Base_SetConfig+0x32>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	4a21      	ldr	r2, [pc, #132]	; (8006184 <TIM_Base_SetConfig+0xb4>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d108      	bne.n	8006114 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	2270      	movs	r2, #112	; 0x70
 8006106:	4393      	bics	r3, r2
 8006108:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	685b      	ldr	r3, [r3, #4]
 800610e:	68fa      	ldr	r2, [r7, #12]
 8006110:	4313      	orrs	r3, r2
 8006112:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006114:	687a      	ldr	r2, [r7, #4]
 8006116:	2380      	movs	r3, #128	; 0x80
 8006118:	05db      	lsls	r3, r3, #23
 800611a:	429a      	cmp	r2, r3
 800611c:	d00b      	beq.n	8006136 <TIM_Base_SetConfig+0x66>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	4a16      	ldr	r2, [pc, #88]	; (800617c <TIM_Base_SetConfig+0xac>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d007      	beq.n	8006136 <TIM_Base_SetConfig+0x66>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	4a15      	ldr	r2, [pc, #84]	; (8006180 <TIM_Base_SetConfig+0xb0>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d003      	beq.n	8006136 <TIM_Base_SetConfig+0x66>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	4a14      	ldr	r2, [pc, #80]	; (8006184 <TIM_Base_SetConfig+0xb4>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d108      	bne.n	8006148 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	4a13      	ldr	r2, [pc, #76]	; (8006188 <TIM_Base_SetConfig+0xb8>)
 800613a:	4013      	ands	r3, r2
 800613c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	68db      	ldr	r3, [r3, #12]
 8006142:	68fa      	ldr	r2, [r7, #12]
 8006144:	4313      	orrs	r3, r2
 8006146:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	2280      	movs	r2, #128	; 0x80
 800614c:	4393      	bics	r3, r2
 800614e:	001a      	movs	r2, r3
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	691b      	ldr	r3, [r3, #16]
 8006154:	4313      	orrs	r3, r2
 8006156:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	68fa      	ldr	r2, [r7, #12]
 800615c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	689a      	ldr	r2, [r3, #8]
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	681a      	ldr	r2, [r3, #0]
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2201      	movs	r2, #1
 8006172:	615a      	str	r2, [r3, #20]
}
 8006174:	46c0      	nop			; (mov r8, r8)
 8006176:	46bd      	mov	sp, r7
 8006178:	b004      	add	sp, #16
 800617a:	bd80      	pop	{r7, pc}
 800617c:	40000400 	.word	0x40000400
 8006180:	40010800 	.word	0x40010800
 8006184:	40011400 	.word	0x40011400
 8006188:	fffffcff 	.word	0xfffffcff

0800618c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b086      	sub	sp, #24
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
 8006194:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6a1b      	ldr	r3, [r3, #32]
 800619a:	2201      	movs	r2, #1
 800619c:	4393      	bics	r3, r2
 800619e:	001a      	movs	r2, r3
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6a1b      	ldr	r3, [r3, #32]
 80061a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	685b      	ldr	r3, [r3, #4]
 80061ae:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	699b      	ldr	r3, [r3, #24]
 80061b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	2270      	movs	r2, #112	; 0x70
 80061ba:	4393      	bics	r3, r2
 80061bc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	2203      	movs	r2, #3
 80061c2:	4393      	bics	r3, r2
 80061c4:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	68fa      	ldr	r2, [r7, #12]
 80061cc:	4313      	orrs	r3, r2
 80061ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80061d0:	697b      	ldr	r3, [r7, #20]
 80061d2:	2202      	movs	r2, #2
 80061d4:	4393      	bics	r3, r2
 80061d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	689b      	ldr	r3, [r3, #8]
 80061dc:	697a      	ldr	r2, [r7, #20]
 80061de:	4313      	orrs	r3, r2
 80061e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	693a      	ldr	r2, [r7, #16]
 80061e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	68fa      	ldr	r2, [r7, #12]
 80061ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	685a      	ldr	r2, [r3, #4]
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	697a      	ldr	r2, [r7, #20]
 80061fa:	621a      	str	r2, [r3, #32]
}
 80061fc:	46c0      	nop			; (mov r8, r8)
 80061fe:	46bd      	mov	sp, r7
 8006200:	b006      	add	sp, #24
 8006202:	bd80      	pop	{r7, pc}

08006204 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b086      	sub	sp, #24
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
 800620c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6a1b      	ldr	r3, [r3, #32]
 8006212:	2210      	movs	r2, #16
 8006214:	4393      	bics	r3, r2
 8006216:	001a      	movs	r2, r3
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6a1b      	ldr	r3, [r3, #32]
 8006220:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	685b      	ldr	r3, [r3, #4]
 8006226:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	699b      	ldr	r3, [r3, #24]
 800622c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	4a13      	ldr	r2, [pc, #76]	; (8006280 <TIM_OC2_SetConfig+0x7c>)
 8006232:	4013      	ands	r3, r2
 8006234:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	4a12      	ldr	r2, [pc, #72]	; (8006284 <TIM_OC2_SetConfig+0x80>)
 800623a:	4013      	ands	r3, r2
 800623c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	021b      	lsls	r3, r3, #8
 8006244:	68fa      	ldr	r2, [r7, #12]
 8006246:	4313      	orrs	r3, r2
 8006248:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	2220      	movs	r2, #32
 800624e:	4393      	bics	r3, r2
 8006250:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	689b      	ldr	r3, [r3, #8]
 8006256:	011b      	lsls	r3, r3, #4
 8006258:	697a      	ldr	r2, [r7, #20]
 800625a:	4313      	orrs	r3, r2
 800625c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	693a      	ldr	r2, [r7, #16]
 8006262:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	68fa      	ldr	r2, [r7, #12]
 8006268:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	685a      	ldr	r2, [r3, #4]
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	697a      	ldr	r2, [r7, #20]
 8006276:	621a      	str	r2, [r3, #32]
}
 8006278:	46c0      	nop			; (mov r8, r8)
 800627a:	46bd      	mov	sp, r7
 800627c:	b006      	add	sp, #24
 800627e:	bd80      	pop	{r7, pc}
 8006280:	ffff8fff 	.word	0xffff8fff
 8006284:	fffffcff 	.word	0xfffffcff

08006288 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b086      	sub	sp, #24
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
 8006290:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6a1b      	ldr	r3, [r3, #32]
 8006296:	4a1a      	ldr	r2, [pc, #104]	; (8006300 <TIM_OC3_SetConfig+0x78>)
 8006298:	401a      	ands	r2, r3
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6a1b      	ldr	r3, [r3, #32]
 80062a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	685b      	ldr	r3, [r3, #4]
 80062a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	69db      	ldr	r3, [r3, #28]
 80062ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	2270      	movs	r2, #112	; 0x70
 80062b4:	4393      	bics	r3, r2
 80062b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	2203      	movs	r2, #3
 80062bc:	4393      	bics	r3, r2
 80062be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	68fa      	ldr	r2, [r7, #12]
 80062c6:	4313      	orrs	r3, r2
 80062c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80062ca:	697b      	ldr	r3, [r7, #20]
 80062cc:	4a0d      	ldr	r2, [pc, #52]	; (8006304 <TIM_OC3_SetConfig+0x7c>)
 80062ce:	4013      	ands	r3, r2
 80062d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	689b      	ldr	r3, [r3, #8]
 80062d6:	021b      	lsls	r3, r3, #8
 80062d8:	697a      	ldr	r2, [r7, #20]
 80062da:	4313      	orrs	r3, r2
 80062dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	693a      	ldr	r2, [r7, #16]
 80062e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	68fa      	ldr	r2, [r7, #12]
 80062e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	685a      	ldr	r2, [r3, #4]
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	697a      	ldr	r2, [r7, #20]
 80062f6:	621a      	str	r2, [r3, #32]
}
 80062f8:	46c0      	nop			; (mov r8, r8)
 80062fa:	46bd      	mov	sp, r7
 80062fc:	b006      	add	sp, #24
 80062fe:	bd80      	pop	{r7, pc}
 8006300:	fffffeff 	.word	0xfffffeff
 8006304:	fffffdff 	.word	0xfffffdff

08006308 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b086      	sub	sp, #24
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
 8006310:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6a1b      	ldr	r3, [r3, #32]
 8006316:	4a1b      	ldr	r2, [pc, #108]	; (8006384 <TIM_OC4_SetConfig+0x7c>)
 8006318:	401a      	ands	r2, r3
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6a1b      	ldr	r3, [r3, #32]
 8006322:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	685b      	ldr	r3, [r3, #4]
 8006328:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	69db      	ldr	r3, [r3, #28]
 800632e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	4a15      	ldr	r2, [pc, #84]	; (8006388 <TIM_OC4_SetConfig+0x80>)
 8006334:	4013      	ands	r3, r2
 8006336:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	4a14      	ldr	r2, [pc, #80]	; (800638c <TIM_OC4_SetConfig+0x84>)
 800633c:	4013      	ands	r3, r2
 800633e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	021b      	lsls	r3, r3, #8
 8006346:	68fa      	ldr	r2, [r7, #12]
 8006348:	4313      	orrs	r3, r2
 800634a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800634c:	697b      	ldr	r3, [r7, #20]
 800634e:	4a10      	ldr	r2, [pc, #64]	; (8006390 <TIM_OC4_SetConfig+0x88>)
 8006350:	4013      	ands	r3, r2
 8006352:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	689b      	ldr	r3, [r3, #8]
 8006358:	031b      	lsls	r3, r3, #12
 800635a:	697a      	ldr	r2, [r7, #20]
 800635c:	4313      	orrs	r3, r2
 800635e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	693a      	ldr	r2, [r7, #16]
 8006364:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	68fa      	ldr	r2, [r7, #12]
 800636a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	685a      	ldr	r2, [r3, #4]
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	697a      	ldr	r2, [r7, #20]
 8006378:	621a      	str	r2, [r3, #32]
}
 800637a:	46c0      	nop			; (mov r8, r8)
 800637c:	46bd      	mov	sp, r7
 800637e:	b006      	add	sp, #24
 8006380:	bd80      	pop	{r7, pc}
 8006382:	46c0      	nop			; (mov r8, r8)
 8006384:	ffffefff 	.word	0xffffefff
 8006388:	ffff8fff 	.word	0xffff8fff
 800638c:	fffffcff 	.word	0xfffffcff
 8006390:	ffffdfff 	.word	0xffffdfff

08006394 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b086      	sub	sp, #24
 8006398:	af00      	add	r7, sp, #0
 800639a:	60f8      	str	r0, [r7, #12]
 800639c:	60b9      	str	r1, [r7, #8]
 800639e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	6a1b      	ldr	r3, [r3, #32]
 80063a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	6a1b      	ldr	r3, [r3, #32]
 80063aa:	2201      	movs	r2, #1
 80063ac:	4393      	bics	r3, r2
 80063ae:	001a      	movs	r2, r3
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	699b      	ldr	r3, [r3, #24]
 80063b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80063ba:	693b      	ldr	r3, [r7, #16]
 80063bc:	22f0      	movs	r2, #240	; 0xf0
 80063be:	4393      	bics	r3, r2
 80063c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	011b      	lsls	r3, r3, #4
 80063c6:	693a      	ldr	r2, [r7, #16]
 80063c8:	4313      	orrs	r3, r2
 80063ca:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80063cc:	697b      	ldr	r3, [r7, #20]
 80063ce:	220a      	movs	r2, #10
 80063d0:	4393      	bics	r3, r2
 80063d2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80063d4:	697a      	ldr	r2, [r7, #20]
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	4313      	orrs	r3, r2
 80063da:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	693a      	ldr	r2, [r7, #16]
 80063e0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	697a      	ldr	r2, [r7, #20]
 80063e6:	621a      	str	r2, [r3, #32]
}
 80063e8:	46c0      	nop			; (mov r8, r8)
 80063ea:	46bd      	mov	sp, r7
 80063ec:	b006      	add	sp, #24
 80063ee:	bd80      	pop	{r7, pc}

080063f0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b086      	sub	sp, #24
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	60f8      	str	r0, [r7, #12]
 80063f8:	60b9      	str	r1, [r7, #8]
 80063fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	6a1b      	ldr	r3, [r3, #32]
 8006400:	2210      	movs	r2, #16
 8006402:	4393      	bics	r3, r2
 8006404:	001a      	movs	r2, r3
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	699b      	ldr	r3, [r3, #24]
 800640e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	6a1b      	ldr	r3, [r3, #32]
 8006414:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006416:	697b      	ldr	r3, [r7, #20]
 8006418:	4a0d      	ldr	r2, [pc, #52]	; (8006450 <TIM_TI2_ConfigInputStage+0x60>)
 800641a:	4013      	ands	r3, r2
 800641c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	031b      	lsls	r3, r3, #12
 8006422:	697a      	ldr	r2, [r7, #20]
 8006424:	4313      	orrs	r3, r2
 8006426:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006428:	693b      	ldr	r3, [r7, #16]
 800642a:	22a0      	movs	r2, #160	; 0xa0
 800642c:	4393      	bics	r3, r2
 800642e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006430:	68bb      	ldr	r3, [r7, #8]
 8006432:	011b      	lsls	r3, r3, #4
 8006434:	693a      	ldr	r2, [r7, #16]
 8006436:	4313      	orrs	r3, r2
 8006438:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	697a      	ldr	r2, [r7, #20]
 800643e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	693a      	ldr	r2, [r7, #16]
 8006444:	621a      	str	r2, [r3, #32]
}
 8006446:	46c0      	nop			; (mov r8, r8)
 8006448:	46bd      	mov	sp, r7
 800644a:	b006      	add	sp, #24
 800644c:	bd80      	pop	{r7, pc}
 800644e:	46c0      	nop			; (mov r8, r8)
 8006450:	ffff0fff 	.word	0xffff0fff

08006454 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b084      	sub	sp, #16
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
 800645c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	689b      	ldr	r3, [r3, #8]
 8006462:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	2270      	movs	r2, #112	; 0x70
 8006468:	4393      	bics	r3, r2
 800646a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800646c:	683a      	ldr	r2, [r7, #0]
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	4313      	orrs	r3, r2
 8006472:	2207      	movs	r2, #7
 8006474:	4313      	orrs	r3, r2
 8006476:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	68fa      	ldr	r2, [r7, #12]
 800647c:	609a      	str	r2, [r3, #8]
}
 800647e:	46c0      	nop			; (mov r8, r8)
 8006480:	46bd      	mov	sp, r7
 8006482:	b004      	add	sp, #16
 8006484:	bd80      	pop	{r7, pc}
	...

08006488 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b086      	sub	sp, #24
 800648c:	af00      	add	r7, sp, #0
 800648e:	60f8      	str	r0, [r7, #12]
 8006490:	60b9      	str	r1, [r7, #8]
 8006492:	607a      	str	r2, [r7, #4]
 8006494:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	689b      	ldr	r3, [r3, #8]
 800649a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800649c:	697b      	ldr	r3, [r7, #20]
 800649e:	4a09      	ldr	r2, [pc, #36]	; (80064c4 <TIM_ETR_SetConfig+0x3c>)
 80064a0:	4013      	ands	r3, r2
 80064a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	021a      	lsls	r2, r3, #8
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	431a      	orrs	r2, r3
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	4313      	orrs	r3, r2
 80064b0:	697a      	ldr	r2, [r7, #20]
 80064b2:	4313      	orrs	r3, r2
 80064b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	697a      	ldr	r2, [r7, #20]
 80064ba:	609a      	str	r2, [r3, #8]
}
 80064bc:	46c0      	nop			; (mov r8, r8)
 80064be:	46bd      	mov	sp, r7
 80064c0:	b006      	add	sp, #24
 80064c2:	bd80      	pop	{r7, pc}
 80064c4:	ffff00ff 	.word	0xffff00ff

080064c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b084      	sub	sp, #16
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
 80064d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2238      	movs	r2, #56	; 0x38
 80064d6:	5c9b      	ldrb	r3, [r3, r2]
 80064d8:	2b01      	cmp	r3, #1
 80064da:	d101      	bne.n	80064e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80064dc:	2302      	movs	r3, #2
 80064de:	e032      	b.n	8006546 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2238      	movs	r2, #56	; 0x38
 80064e4:	2101      	movs	r1, #1
 80064e6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2239      	movs	r2, #57	; 0x39
 80064ec:	2102      	movs	r1, #2
 80064ee:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	685b      	ldr	r3, [r3, #4]
 80064f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	689b      	ldr	r3, [r3, #8]
 80064fe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	2270      	movs	r2, #112	; 0x70
 8006504:	4393      	bics	r3, r2
 8006506:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	68fa      	ldr	r2, [r7, #12]
 800650e:	4313      	orrs	r3, r2
 8006510:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	2280      	movs	r2, #128	; 0x80
 8006516:	4393      	bics	r3, r2
 8006518:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	685b      	ldr	r3, [r3, #4]
 800651e:	68ba      	ldr	r2, [r7, #8]
 8006520:	4313      	orrs	r3, r2
 8006522:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	68fa      	ldr	r2, [r7, #12]
 800652a:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	68ba      	ldr	r2, [r7, #8]
 8006532:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2239      	movs	r2, #57	; 0x39
 8006538:	2101      	movs	r1, #1
 800653a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2238      	movs	r2, #56	; 0x38
 8006540:	2100      	movs	r1, #0
 8006542:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006544:	2300      	movs	r3, #0
}
 8006546:	0018      	movs	r0, r3
 8006548:	46bd      	mov	sp, r7
 800654a:	b004      	add	sp, #16
 800654c:	bd80      	pop	{r7, pc}

0800654e <HAL_TIMEx_RemapConfig>:
  @endif
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 800654e:	b580      	push	{r7, lr}
 8006550:	b082      	sub	sp, #8
 8006552:	af00      	add	r7, sp, #0
 8006554:	6078      	str	r0, [r7, #4]
 8006556:	6039      	str	r1, [r7, #0]
  __HAL_LOCK(htim);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2238      	movs	r2, #56	; 0x38
 800655c:	5c9b      	ldrb	r3, [r3, r2]
 800655e:	2b01      	cmp	r3, #1
 8006560:	d101      	bne.n	8006566 <HAL_TIMEx_RemapConfig+0x18>
 8006562:	2302      	movs	r3, #2
 8006564:	e00c      	b.n	8006580 <HAL_TIMEx_RemapConfig+0x32>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2238      	movs	r2, #56	; 0x38
 800656a:	2101      	movs	r1, #1
 800656c:	5499      	strb	r1, [r3, r2]

  /* Check parameters */
  assert_param(IS_TIM_REMAP(htim->Instance, Remap));

  /* Set the Timer remapping configuration */
  WRITE_REG(htim->Instance->OR, Remap);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	683a      	ldr	r2, [r7, #0]
 8006574:	651a      	str	r2, [r3, #80]	; 0x50

  __HAL_UNLOCK(htim);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2238      	movs	r2, #56	; 0x38
 800657a:	2100      	movs	r1, #0
 800657c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800657e:	2300      	movs	r3, #0
}
 8006580:	0018      	movs	r0, r3
 8006582:	46bd      	mov	sp, r7
 8006584:	b002      	add	sp, #8
 8006586:	bd80      	pop	{r7, pc}

08006588 <__errno>:
 8006588:	4b01      	ldr	r3, [pc, #4]	; (8006590 <__errno+0x8>)
 800658a:	6818      	ldr	r0, [r3, #0]
 800658c:	4770      	bx	lr
 800658e:	46c0      	nop			; (mov r8, r8)
 8006590:	20000004 	.word	0x20000004

08006594 <__libc_init_array>:
 8006594:	b570      	push	{r4, r5, r6, lr}
 8006596:	2600      	movs	r6, #0
 8006598:	4d0c      	ldr	r5, [pc, #48]	; (80065cc <__libc_init_array+0x38>)
 800659a:	4c0d      	ldr	r4, [pc, #52]	; (80065d0 <__libc_init_array+0x3c>)
 800659c:	1b64      	subs	r4, r4, r5
 800659e:	10a4      	asrs	r4, r4, #2
 80065a0:	42a6      	cmp	r6, r4
 80065a2:	d109      	bne.n	80065b8 <__libc_init_array+0x24>
 80065a4:	2600      	movs	r6, #0
 80065a6:	f000 fc29 	bl	8006dfc <_init>
 80065aa:	4d0a      	ldr	r5, [pc, #40]	; (80065d4 <__libc_init_array+0x40>)
 80065ac:	4c0a      	ldr	r4, [pc, #40]	; (80065d8 <__libc_init_array+0x44>)
 80065ae:	1b64      	subs	r4, r4, r5
 80065b0:	10a4      	asrs	r4, r4, #2
 80065b2:	42a6      	cmp	r6, r4
 80065b4:	d105      	bne.n	80065c2 <__libc_init_array+0x2e>
 80065b6:	bd70      	pop	{r4, r5, r6, pc}
 80065b8:	00b3      	lsls	r3, r6, #2
 80065ba:	58eb      	ldr	r3, [r5, r3]
 80065bc:	4798      	blx	r3
 80065be:	3601      	adds	r6, #1
 80065c0:	e7ee      	b.n	80065a0 <__libc_init_array+0xc>
 80065c2:	00b3      	lsls	r3, r6, #2
 80065c4:	58eb      	ldr	r3, [r5, r3]
 80065c6:	4798      	blx	r3
 80065c8:	3601      	adds	r6, #1
 80065ca:	e7f2      	b.n	80065b2 <__libc_init_array+0x1e>
 80065cc:	08007444 	.word	0x08007444
 80065d0:	08007444 	.word	0x08007444
 80065d4:	08007444 	.word	0x08007444
 80065d8:	08007448 	.word	0x08007448

080065dc <memcpy>:
 80065dc:	2300      	movs	r3, #0
 80065de:	b510      	push	{r4, lr}
 80065e0:	429a      	cmp	r2, r3
 80065e2:	d100      	bne.n	80065e6 <memcpy+0xa>
 80065e4:	bd10      	pop	{r4, pc}
 80065e6:	5ccc      	ldrb	r4, [r1, r3]
 80065e8:	54c4      	strb	r4, [r0, r3]
 80065ea:	3301      	adds	r3, #1
 80065ec:	e7f8      	b.n	80065e0 <memcpy+0x4>

080065ee <memset>:
 80065ee:	0003      	movs	r3, r0
 80065f0:	1812      	adds	r2, r2, r0
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d100      	bne.n	80065f8 <memset+0xa>
 80065f6:	4770      	bx	lr
 80065f8:	7019      	strb	r1, [r3, #0]
 80065fa:	3301      	adds	r3, #1
 80065fc:	e7f9      	b.n	80065f2 <memset+0x4>
	...

08006600 <siprintf>:
 8006600:	b40e      	push	{r1, r2, r3}
 8006602:	b500      	push	{lr}
 8006604:	490b      	ldr	r1, [pc, #44]	; (8006634 <siprintf+0x34>)
 8006606:	b09c      	sub	sp, #112	; 0x70
 8006608:	ab1d      	add	r3, sp, #116	; 0x74
 800660a:	9002      	str	r0, [sp, #8]
 800660c:	9006      	str	r0, [sp, #24]
 800660e:	9107      	str	r1, [sp, #28]
 8006610:	9104      	str	r1, [sp, #16]
 8006612:	4809      	ldr	r0, [pc, #36]	; (8006638 <siprintf+0x38>)
 8006614:	4909      	ldr	r1, [pc, #36]	; (800663c <siprintf+0x3c>)
 8006616:	cb04      	ldmia	r3!, {r2}
 8006618:	9105      	str	r1, [sp, #20]
 800661a:	6800      	ldr	r0, [r0, #0]
 800661c:	a902      	add	r1, sp, #8
 800661e:	9301      	str	r3, [sp, #4]
 8006620:	f000 f870 	bl	8006704 <_svfiprintf_r>
 8006624:	2300      	movs	r3, #0
 8006626:	9a02      	ldr	r2, [sp, #8]
 8006628:	7013      	strb	r3, [r2, #0]
 800662a:	b01c      	add	sp, #112	; 0x70
 800662c:	bc08      	pop	{r3}
 800662e:	b003      	add	sp, #12
 8006630:	4718      	bx	r3
 8006632:	46c0      	nop			; (mov r8, r8)
 8006634:	7fffffff 	.word	0x7fffffff
 8006638:	20000004 	.word	0x20000004
 800663c:	ffff0208 	.word	0xffff0208

08006640 <__ssputs_r>:
 8006640:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006642:	688e      	ldr	r6, [r1, #8]
 8006644:	b085      	sub	sp, #20
 8006646:	0007      	movs	r7, r0
 8006648:	000c      	movs	r4, r1
 800664a:	9203      	str	r2, [sp, #12]
 800664c:	9301      	str	r3, [sp, #4]
 800664e:	429e      	cmp	r6, r3
 8006650:	d83c      	bhi.n	80066cc <__ssputs_r+0x8c>
 8006652:	2390      	movs	r3, #144	; 0x90
 8006654:	898a      	ldrh	r2, [r1, #12]
 8006656:	00db      	lsls	r3, r3, #3
 8006658:	421a      	tst	r2, r3
 800665a:	d034      	beq.n	80066c6 <__ssputs_r+0x86>
 800665c:	2503      	movs	r5, #3
 800665e:	6909      	ldr	r1, [r1, #16]
 8006660:	6823      	ldr	r3, [r4, #0]
 8006662:	1a5b      	subs	r3, r3, r1
 8006664:	9302      	str	r3, [sp, #8]
 8006666:	6963      	ldr	r3, [r4, #20]
 8006668:	9802      	ldr	r0, [sp, #8]
 800666a:	435d      	muls	r5, r3
 800666c:	0feb      	lsrs	r3, r5, #31
 800666e:	195d      	adds	r5, r3, r5
 8006670:	9b01      	ldr	r3, [sp, #4]
 8006672:	106d      	asrs	r5, r5, #1
 8006674:	3301      	adds	r3, #1
 8006676:	181b      	adds	r3, r3, r0
 8006678:	42ab      	cmp	r3, r5
 800667a:	d900      	bls.n	800667e <__ssputs_r+0x3e>
 800667c:	001d      	movs	r5, r3
 800667e:	0553      	lsls	r3, r2, #21
 8006680:	d532      	bpl.n	80066e8 <__ssputs_r+0xa8>
 8006682:	0029      	movs	r1, r5
 8006684:	0038      	movs	r0, r7
 8006686:	f000 fb19 	bl	8006cbc <_malloc_r>
 800668a:	1e06      	subs	r6, r0, #0
 800668c:	d109      	bne.n	80066a2 <__ssputs_r+0x62>
 800668e:	230c      	movs	r3, #12
 8006690:	603b      	str	r3, [r7, #0]
 8006692:	2340      	movs	r3, #64	; 0x40
 8006694:	2001      	movs	r0, #1
 8006696:	89a2      	ldrh	r2, [r4, #12]
 8006698:	4240      	negs	r0, r0
 800669a:	4313      	orrs	r3, r2
 800669c:	81a3      	strh	r3, [r4, #12]
 800669e:	b005      	add	sp, #20
 80066a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80066a2:	9a02      	ldr	r2, [sp, #8]
 80066a4:	6921      	ldr	r1, [r4, #16]
 80066a6:	f7ff ff99 	bl	80065dc <memcpy>
 80066aa:	89a3      	ldrh	r3, [r4, #12]
 80066ac:	4a14      	ldr	r2, [pc, #80]	; (8006700 <__ssputs_r+0xc0>)
 80066ae:	401a      	ands	r2, r3
 80066b0:	2380      	movs	r3, #128	; 0x80
 80066b2:	4313      	orrs	r3, r2
 80066b4:	81a3      	strh	r3, [r4, #12]
 80066b6:	9b02      	ldr	r3, [sp, #8]
 80066b8:	6126      	str	r6, [r4, #16]
 80066ba:	18f6      	adds	r6, r6, r3
 80066bc:	6026      	str	r6, [r4, #0]
 80066be:	6165      	str	r5, [r4, #20]
 80066c0:	9e01      	ldr	r6, [sp, #4]
 80066c2:	1aed      	subs	r5, r5, r3
 80066c4:	60a5      	str	r5, [r4, #8]
 80066c6:	9b01      	ldr	r3, [sp, #4]
 80066c8:	429e      	cmp	r6, r3
 80066ca:	d900      	bls.n	80066ce <__ssputs_r+0x8e>
 80066cc:	9e01      	ldr	r6, [sp, #4]
 80066ce:	0032      	movs	r2, r6
 80066d0:	9903      	ldr	r1, [sp, #12]
 80066d2:	6820      	ldr	r0, [r4, #0]
 80066d4:	f000 fa95 	bl	8006c02 <memmove>
 80066d8:	68a3      	ldr	r3, [r4, #8]
 80066da:	2000      	movs	r0, #0
 80066dc:	1b9b      	subs	r3, r3, r6
 80066de:	60a3      	str	r3, [r4, #8]
 80066e0:	6823      	ldr	r3, [r4, #0]
 80066e2:	199e      	adds	r6, r3, r6
 80066e4:	6026      	str	r6, [r4, #0]
 80066e6:	e7da      	b.n	800669e <__ssputs_r+0x5e>
 80066e8:	002a      	movs	r2, r5
 80066ea:	0038      	movs	r0, r7
 80066ec:	f000 fb44 	bl	8006d78 <_realloc_r>
 80066f0:	1e06      	subs	r6, r0, #0
 80066f2:	d1e0      	bne.n	80066b6 <__ssputs_r+0x76>
 80066f4:	6921      	ldr	r1, [r4, #16]
 80066f6:	0038      	movs	r0, r7
 80066f8:	f000 fa96 	bl	8006c28 <_free_r>
 80066fc:	e7c7      	b.n	800668e <__ssputs_r+0x4e>
 80066fe:	46c0      	nop			; (mov r8, r8)
 8006700:	fffffb7f 	.word	0xfffffb7f

08006704 <_svfiprintf_r>:
 8006704:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006706:	b0a1      	sub	sp, #132	; 0x84
 8006708:	9003      	str	r0, [sp, #12]
 800670a:	001d      	movs	r5, r3
 800670c:	898b      	ldrh	r3, [r1, #12]
 800670e:	000f      	movs	r7, r1
 8006710:	0016      	movs	r6, r2
 8006712:	061b      	lsls	r3, r3, #24
 8006714:	d511      	bpl.n	800673a <_svfiprintf_r+0x36>
 8006716:	690b      	ldr	r3, [r1, #16]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d10e      	bne.n	800673a <_svfiprintf_r+0x36>
 800671c:	2140      	movs	r1, #64	; 0x40
 800671e:	f000 facd 	bl	8006cbc <_malloc_r>
 8006722:	6038      	str	r0, [r7, #0]
 8006724:	6138      	str	r0, [r7, #16]
 8006726:	2800      	cmp	r0, #0
 8006728:	d105      	bne.n	8006736 <_svfiprintf_r+0x32>
 800672a:	230c      	movs	r3, #12
 800672c:	9a03      	ldr	r2, [sp, #12]
 800672e:	3801      	subs	r0, #1
 8006730:	6013      	str	r3, [r2, #0]
 8006732:	b021      	add	sp, #132	; 0x84
 8006734:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006736:	2340      	movs	r3, #64	; 0x40
 8006738:	617b      	str	r3, [r7, #20]
 800673a:	2300      	movs	r3, #0
 800673c:	ac08      	add	r4, sp, #32
 800673e:	6163      	str	r3, [r4, #20]
 8006740:	3320      	adds	r3, #32
 8006742:	7663      	strb	r3, [r4, #25]
 8006744:	3310      	adds	r3, #16
 8006746:	76a3      	strb	r3, [r4, #26]
 8006748:	9507      	str	r5, [sp, #28]
 800674a:	0035      	movs	r5, r6
 800674c:	782b      	ldrb	r3, [r5, #0]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d001      	beq.n	8006756 <_svfiprintf_r+0x52>
 8006752:	2b25      	cmp	r3, #37	; 0x25
 8006754:	d146      	bne.n	80067e4 <_svfiprintf_r+0xe0>
 8006756:	1bab      	subs	r3, r5, r6
 8006758:	9305      	str	r3, [sp, #20]
 800675a:	d00c      	beq.n	8006776 <_svfiprintf_r+0x72>
 800675c:	0032      	movs	r2, r6
 800675e:	0039      	movs	r1, r7
 8006760:	9803      	ldr	r0, [sp, #12]
 8006762:	f7ff ff6d 	bl	8006640 <__ssputs_r>
 8006766:	1c43      	adds	r3, r0, #1
 8006768:	d100      	bne.n	800676c <_svfiprintf_r+0x68>
 800676a:	e0ae      	b.n	80068ca <_svfiprintf_r+0x1c6>
 800676c:	6962      	ldr	r2, [r4, #20]
 800676e:	9b05      	ldr	r3, [sp, #20]
 8006770:	4694      	mov	ip, r2
 8006772:	4463      	add	r3, ip
 8006774:	6163      	str	r3, [r4, #20]
 8006776:	782b      	ldrb	r3, [r5, #0]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d100      	bne.n	800677e <_svfiprintf_r+0x7a>
 800677c:	e0a5      	b.n	80068ca <_svfiprintf_r+0x1c6>
 800677e:	2201      	movs	r2, #1
 8006780:	2300      	movs	r3, #0
 8006782:	4252      	negs	r2, r2
 8006784:	6062      	str	r2, [r4, #4]
 8006786:	a904      	add	r1, sp, #16
 8006788:	3254      	adds	r2, #84	; 0x54
 800678a:	1852      	adds	r2, r2, r1
 800678c:	1c6e      	adds	r6, r5, #1
 800678e:	6023      	str	r3, [r4, #0]
 8006790:	60e3      	str	r3, [r4, #12]
 8006792:	60a3      	str	r3, [r4, #8]
 8006794:	7013      	strb	r3, [r2, #0]
 8006796:	65a3      	str	r3, [r4, #88]	; 0x58
 8006798:	7831      	ldrb	r1, [r6, #0]
 800679a:	2205      	movs	r2, #5
 800679c:	4853      	ldr	r0, [pc, #332]	; (80068ec <_svfiprintf_r+0x1e8>)
 800679e:	f000 fa25 	bl	8006bec <memchr>
 80067a2:	1c75      	adds	r5, r6, #1
 80067a4:	2800      	cmp	r0, #0
 80067a6:	d11f      	bne.n	80067e8 <_svfiprintf_r+0xe4>
 80067a8:	6822      	ldr	r2, [r4, #0]
 80067aa:	06d3      	lsls	r3, r2, #27
 80067ac:	d504      	bpl.n	80067b8 <_svfiprintf_r+0xb4>
 80067ae:	2353      	movs	r3, #83	; 0x53
 80067b0:	a904      	add	r1, sp, #16
 80067b2:	185b      	adds	r3, r3, r1
 80067b4:	2120      	movs	r1, #32
 80067b6:	7019      	strb	r1, [r3, #0]
 80067b8:	0713      	lsls	r3, r2, #28
 80067ba:	d504      	bpl.n	80067c6 <_svfiprintf_r+0xc2>
 80067bc:	2353      	movs	r3, #83	; 0x53
 80067be:	a904      	add	r1, sp, #16
 80067c0:	185b      	adds	r3, r3, r1
 80067c2:	212b      	movs	r1, #43	; 0x2b
 80067c4:	7019      	strb	r1, [r3, #0]
 80067c6:	7833      	ldrb	r3, [r6, #0]
 80067c8:	2b2a      	cmp	r3, #42	; 0x2a
 80067ca:	d016      	beq.n	80067fa <_svfiprintf_r+0xf6>
 80067cc:	0035      	movs	r5, r6
 80067ce:	2100      	movs	r1, #0
 80067d0:	200a      	movs	r0, #10
 80067d2:	68e3      	ldr	r3, [r4, #12]
 80067d4:	782a      	ldrb	r2, [r5, #0]
 80067d6:	1c6e      	adds	r6, r5, #1
 80067d8:	3a30      	subs	r2, #48	; 0x30
 80067da:	2a09      	cmp	r2, #9
 80067dc:	d94e      	bls.n	800687c <_svfiprintf_r+0x178>
 80067de:	2900      	cmp	r1, #0
 80067e0:	d018      	beq.n	8006814 <_svfiprintf_r+0x110>
 80067e2:	e010      	b.n	8006806 <_svfiprintf_r+0x102>
 80067e4:	3501      	adds	r5, #1
 80067e6:	e7b1      	b.n	800674c <_svfiprintf_r+0x48>
 80067e8:	4b40      	ldr	r3, [pc, #256]	; (80068ec <_svfiprintf_r+0x1e8>)
 80067ea:	6822      	ldr	r2, [r4, #0]
 80067ec:	1ac0      	subs	r0, r0, r3
 80067ee:	2301      	movs	r3, #1
 80067f0:	4083      	lsls	r3, r0
 80067f2:	4313      	orrs	r3, r2
 80067f4:	6023      	str	r3, [r4, #0]
 80067f6:	002e      	movs	r6, r5
 80067f8:	e7ce      	b.n	8006798 <_svfiprintf_r+0x94>
 80067fa:	9b07      	ldr	r3, [sp, #28]
 80067fc:	1d19      	adds	r1, r3, #4
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	9107      	str	r1, [sp, #28]
 8006802:	2b00      	cmp	r3, #0
 8006804:	db01      	blt.n	800680a <_svfiprintf_r+0x106>
 8006806:	930b      	str	r3, [sp, #44]	; 0x2c
 8006808:	e004      	b.n	8006814 <_svfiprintf_r+0x110>
 800680a:	425b      	negs	r3, r3
 800680c:	60e3      	str	r3, [r4, #12]
 800680e:	2302      	movs	r3, #2
 8006810:	4313      	orrs	r3, r2
 8006812:	6023      	str	r3, [r4, #0]
 8006814:	782b      	ldrb	r3, [r5, #0]
 8006816:	2b2e      	cmp	r3, #46	; 0x2e
 8006818:	d10a      	bne.n	8006830 <_svfiprintf_r+0x12c>
 800681a:	786b      	ldrb	r3, [r5, #1]
 800681c:	2b2a      	cmp	r3, #42	; 0x2a
 800681e:	d135      	bne.n	800688c <_svfiprintf_r+0x188>
 8006820:	9b07      	ldr	r3, [sp, #28]
 8006822:	3502      	adds	r5, #2
 8006824:	1d1a      	adds	r2, r3, #4
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	9207      	str	r2, [sp, #28]
 800682a:	2b00      	cmp	r3, #0
 800682c:	db2b      	blt.n	8006886 <_svfiprintf_r+0x182>
 800682e:	9309      	str	r3, [sp, #36]	; 0x24
 8006830:	4e2f      	ldr	r6, [pc, #188]	; (80068f0 <_svfiprintf_r+0x1ec>)
 8006832:	7829      	ldrb	r1, [r5, #0]
 8006834:	2203      	movs	r2, #3
 8006836:	0030      	movs	r0, r6
 8006838:	f000 f9d8 	bl	8006bec <memchr>
 800683c:	2800      	cmp	r0, #0
 800683e:	d006      	beq.n	800684e <_svfiprintf_r+0x14a>
 8006840:	2340      	movs	r3, #64	; 0x40
 8006842:	1b80      	subs	r0, r0, r6
 8006844:	4083      	lsls	r3, r0
 8006846:	6822      	ldr	r2, [r4, #0]
 8006848:	3501      	adds	r5, #1
 800684a:	4313      	orrs	r3, r2
 800684c:	6023      	str	r3, [r4, #0]
 800684e:	7829      	ldrb	r1, [r5, #0]
 8006850:	2206      	movs	r2, #6
 8006852:	4828      	ldr	r0, [pc, #160]	; (80068f4 <_svfiprintf_r+0x1f0>)
 8006854:	1c6e      	adds	r6, r5, #1
 8006856:	7621      	strb	r1, [r4, #24]
 8006858:	f000 f9c8 	bl	8006bec <memchr>
 800685c:	2800      	cmp	r0, #0
 800685e:	d03c      	beq.n	80068da <_svfiprintf_r+0x1d6>
 8006860:	4b25      	ldr	r3, [pc, #148]	; (80068f8 <_svfiprintf_r+0x1f4>)
 8006862:	2b00      	cmp	r3, #0
 8006864:	d125      	bne.n	80068b2 <_svfiprintf_r+0x1ae>
 8006866:	2207      	movs	r2, #7
 8006868:	9b07      	ldr	r3, [sp, #28]
 800686a:	3307      	adds	r3, #7
 800686c:	4393      	bics	r3, r2
 800686e:	3308      	adds	r3, #8
 8006870:	9307      	str	r3, [sp, #28]
 8006872:	6963      	ldr	r3, [r4, #20]
 8006874:	9a04      	ldr	r2, [sp, #16]
 8006876:	189b      	adds	r3, r3, r2
 8006878:	6163      	str	r3, [r4, #20]
 800687a:	e766      	b.n	800674a <_svfiprintf_r+0x46>
 800687c:	4343      	muls	r3, r0
 800687e:	2101      	movs	r1, #1
 8006880:	189b      	adds	r3, r3, r2
 8006882:	0035      	movs	r5, r6
 8006884:	e7a6      	b.n	80067d4 <_svfiprintf_r+0xd0>
 8006886:	2301      	movs	r3, #1
 8006888:	425b      	negs	r3, r3
 800688a:	e7d0      	b.n	800682e <_svfiprintf_r+0x12a>
 800688c:	2300      	movs	r3, #0
 800688e:	200a      	movs	r0, #10
 8006890:	001a      	movs	r2, r3
 8006892:	3501      	adds	r5, #1
 8006894:	6063      	str	r3, [r4, #4]
 8006896:	7829      	ldrb	r1, [r5, #0]
 8006898:	1c6e      	adds	r6, r5, #1
 800689a:	3930      	subs	r1, #48	; 0x30
 800689c:	2909      	cmp	r1, #9
 800689e:	d903      	bls.n	80068a8 <_svfiprintf_r+0x1a4>
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d0c5      	beq.n	8006830 <_svfiprintf_r+0x12c>
 80068a4:	9209      	str	r2, [sp, #36]	; 0x24
 80068a6:	e7c3      	b.n	8006830 <_svfiprintf_r+0x12c>
 80068a8:	4342      	muls	r2, r0
 80068aa:	2301      	movs	r3, #1
 80068ac:	1852      	adds	r2, r2, r1
 80068ae:	0035      	movs	r5, r6
 80068b0:	e7f1      	b.n	8006896 <_svfiprintf_r+0x192>
 80068b2:	ab07      	add	r3, sp, #28
 80068b4:	9300      	str	r3, [sp, #0]
 80068b6:	003a      	movs	r2, r7
 80068b8:	4b10      	ldr	r3, [pc, #64]	; (80068fc <_svfiprintf_r+0x1f8>)
 80068ba:	0021      	movs	r1, r4
 80068bc:	9803      	ldr	r0, [sp, #12]
 80068be:	e000      	b.n	80068c2 <_svfiprintf_r+0x1be>
 80068c0:	bf00      	nop
 80068c2:	9004      	str	r0, [sp, #16]
 80068c4:	9b04      	ldr	r3, [sp, #16]
 80068c6:	3301      	adds	r3, #1
 80068c8:	d1d3      	bne.n	8006872 <_svfiprintf_r+0x16e>
 80068ca:	89bb      	ldrh	r3, [r7, #12]
 80068cc:	980d      	ldr	r0, [sp, #52]	; 0x34
 80068ce:	065b      	lsls	r3, r3, #25
 80068d0:	d400      	bmi.n	80068d4 <_svfiprintf_r+0x1d0>
 80068d2:	e72e      	b.n	8006732 <_svfiprintf_r+0x2e>
 80068d4:	2001      	movs	r0, #1
 80068d6:	4240      	negs	r0, r0
 80068d8:	e72b      	b.n	8006732 <_svfiprintf_r+0x2e>
 80068da:	ab07      	add	r3, sp, #28
 80068dc:	9300      	str	r3, [sp, #0]
 80068de:	003a      	movs	r2, r7
 80068e0:	4b06      	ldr	r3, [pc, #24]	; (80068fc <_svfiprintf_r+0x1f8>)
 80068e2:	0021      	movs	r1, r4
 80068e4:	9803      	ldr	r0, [sp, #12]
 80068e6:	f000 f879 	bl	80069dc <_printf_i>
 80068ea:	e7ea      	b.n	80068c2 <_svfiprintf_r+0x1be>
 80068ec:	08007411 	.word	0x08007411
 80068f0:	08007417 	.word	0x08007417
 80068f4:	0800741b 	.word	0x0800741b
 80068f8:	00000000 	.word	0x00000000
 80068fc:	08006641 	.word	0x08006641

08006900 <_printf_common>:
 8006900:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006902:	0015      	movs	r5, r2
 8006904:	9301      	str	r3, [sp, #4]
 8006906:	688a      	ldr	r2, [r1, #8]
 8006908:	690b      	ldr	r3, [r1, #16]
 800690a:	9000      	str	r0, [sp, #0]
 800690c:	000c      	movs	r4, r1
 800690e:	4293      	cmp	r3, r2
 8006910:	da00      	bge.n	8006914 <_printf_common+0x14>
 8006912:	0013      	movs	r3, r2
 8006914:	0022      	movs	r2, r4
 8006916:	602b      	str	r3, [r5, #0]
 8006918:	3243      	adds	r2, #67	; 0x43
 800691a:	7812      	ldrb	r2, [r2, #0]
 800691c:	2a00      	cmp	r2, #0
 800691e:	d001      	beq.n	8006924 <_printf_common+0x24>
 8006920:	3301      	adds	r3, #1
 8006922:	602b      	str	r3, [r5, #0]
 8006924:	6823      	ldr	r3, [r4, #0]
 8006926:	069b      	lsls	r3, r3, #26
 8006928:	d502      	bpl.n	8006930 <_printf_common+0x30>
 800692a:	682b      	ldr	r3, [r5, #0]
 800692c:	3302      	adds	r3, #2
 800692e:	602b      	str	r3, [r5, #0]
 8006930:	2706      	movs	r7, #6
 8006932:	6823      	ldr	r3, [r4, #0]
 8006934:	401f      	ands	r7, r3
 8006936:	d027      	beq.n	8006988 <_printf_common+0x88>
 8006938:	0023      	movs	r3, r4
 800693a:	3343      	adds	r3, #67	; 0x43
 800693c:	781b      	ldrb	r3, [r3, #0]
 800693e:	1e5a      	subs	r2, r3, #1
 8006940:	4193      	sbcs	r3, r2
 8006942:	6822      	ldr	r2, [r4, #0]
 8006944:	0692      	lsls	r2, r2, #26
 8006946:	d430      	bmi.n	80069aa <_printf_common+0xaa>
 8006948:	0022      	movs	r2, r4
 800694a:	9901      	ldr	r1, [sp, #4]
 800694c:	3243      	adds	r2, #67	; 0x43
 800694e:	9800      	ldr	r0, [sp, #0]
 8006950:	9e08      	ldr	r6, [sp, #32]
 8006952:	47b0      	blx	r6
 8006954:	1c43      	adds	r3, r0, #1
 8006956:	d025      	beq.n	80069a4 <_printf_common+0xa4>
 8006958:	2306      	movs	r3, #6
 800695a:	6820      	ldr	r0, [r4, #0]
 800695c:	682a      	ldr	r2, [r5, #0]
 800695e:	68e1      	ldr	r1, [r4, #12]
 8006960:	4003      	ands	r3, r0
 8006962:	2500      	movs	r5, #0
 8006964:	2b04      	cmp	r3, #4
 8006966:	d103      	bne.n	8006970 <_printf_common+0x70>
 8006968:	1a8d      	subs	r5, r1, r2
 800696a:	43eb      	mvns	r3, r5
 800696c:	17db      	asrs	r3, r3, #31
 800696e:	401d      	ands	r5, r3
 8006970:	68a3      	ldr	r3, [r4, #8]
 8006972:	6922      	ldr	r2, [r4, #16]
 8006974:	4293      	cmp	r3, r2
 8006976:	dd01      	ble.n	800697c <_printf_common+0x7c>
 8006978:	1a9b      	subs	r3, r3, r2
 800697a:	18ed      	adds	r5, r5, r3
 800697c:	2700      	movs	r7, #0
 800697e:	42bd      	cmp	r5, r7
 8006980:	d120      	bne.n	80069c4 <_printf_common+0xc4>
 8006982:	2000      	movs	r0, #0
 8006984:	e010      	b.n	80069a8 <_printf_common+0xa8>
 8006986:	3701      	adds	r7, #1
 8006988:	68e3      	ldr	r3, [r4, #12]
 800698a:	682a      	ldr	r2, [r5, #0]
 800698c:	1a9b      	subs	r3, r3, r2
 800698e:	42bb      	cmp	r3, r7
 8006990:	ddd2      	ble.n	8006938 <_printf_common+0x38>
 8006992:	0022      	movs	r2, r4
 8006994:	2301      	movs	r3, #1
 8006996:	3219      	adds	r2, #25
 8006998:	9901      	ldr	r1, [sp, #4]
 800699a:	9800      	ldr	r0, [sp, #0]
 800699c:	9e08      	ldr	r6, [sp, #32]
 800699e:	47b0      	blx	r6
 80069a0:	1c43      	adds	r3, r0, #1
 80069a2:	d1f0      	bne.n	8006986 <_printf_common+0x86>
 80069a4:	2001      	movs	r0, #1
 80069a6:	4240      	negs	r0, r0
 80069a8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80069aa:	2030      	movs	r0, #48	; 0x30
 80069ac:	18e1      	adds	r1, r4, r3
 80069ae:	3143      	adds	r1, #67	; 0x43
 80069b0:	7008      	strb	r0, [r1, #0]
 80069b2:	0021      	movs	r1, r4
 80069b4:	1c5a      	adds	r2, r3, #1
 80069b6:	3145      	adds	r1, #69	; 0x45
 80069b8:	7809      	ldrb	r1, [r1, #0]
 80069ba:	18a2      	adds	r2, r4, r2
 80069bc:	3243      	adds	r2, #67	; 0x43
 80069be:	3302      	adds	r3, #2
 80069c0:	7011      	strb	r1, [r2, #0]
 80069c2:	e7c1      	b.n	8006948 <_printf_common+0x48>
 80069c4:	0022      	movs	r2, r4
 80069c6:	2301      	movs	r3, #1
 80069c8:	321a      	adds	r2, #26
 80069ca:	9901      	ldr	r1, [sp, #4]
 80069cc:	9800      	ldr	r0, [sp, #0]
 80069ce:	9e08      	ldr	r6, [sp, #32]
 80069d0:	47b0      	blx	r6
 80069d2:	1c43      	adds	r3, r0, #1
 80069d4:	d0e6      	beq.n	80069a4 <_printf_common+0xa4>
 80069d6:	3701      	adds	r7, #1
 80069d8:	e7d1      	b.n	800697e <_printf_common+0x7e>
	...

080069dc <_printf_i>:
 80069dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80069de:	b089      	sub	sp, #36	; 0x24
 80069e0:	9204      	str	r2, [sp, #16]
 80069e2:	000a      	movs	r2, r1
 80069e4:	3243      	adds	r2, #67	; 0x43
 80069e6:	9305      	str	r3, [sp, #20]
 80069e8:	9003      	str	r0, [sp, #12]
 80069ea:	9202      	str	r2, [sp, #8]
 80069ec:	7e0a      	ldrb	r2, [r1, #24]
 80069ee:	000c      	movs	r4, r1
 80069f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80069f2:	2a6e      	cmp	r2, #110	; 0x6e
 80069f4:	d100      	bne.n	80069f8 <_printf_i+0x1c>
 80069f6:	e086      	b.n	8006b06 <_printf_i+0x12a>
 80069f8:	d81f      	bhi.n	8006a3a <_printf_i+0x5e>
 80069fa:	2a63      	cmp	r2, #99	; 0x63
 80069fc:	d033      	beq.n	8006a66 <_printf_i+0x8a>
 80069fe:	d808      	bhi.n	8006a12 <_printf_i+0x36>
 8006a00:	2a00      	cmp	r2, #0
 8006a02:	d100      	bne.n	8006a06 <_printf_i+0x2a>
 8006a04:	e08c      	b.n	8006b20 <_printf_i+0x144>
 8006a06:	2a58      	cmp	r2, #88	; 0x58
 8006a08:	d04d      	beq.n	8006aa6 <_printf_i+0xca>
 8006a0a:	0025      	movs	r5, r4
 8006a0c:	3542      	adds	r5, #66	; 0x42
 8006a0e:	702a      	strb	r2, [r5, #0]
 8006a10:	e030      	b.n	8006a74 <_printf_i+0x98>
 8006a12:	2a64      	cmp	r2, #100	; 0x64
 8006a14:	d001      	beq.n	8006a1a <_printf_i+0x3e>
 8006a16:	2a69      	cmp	r2, #105	; 0x69
 8006a18:	d1f7      	bne.n	8006a0a <_printf_i+0x2e>
 8006a1a:	6819      	ldr	r1, [r3, #0]
 8006a1c:	6825      	ldr	r5, [r4, #0]
 8006a1e:	1d0a      	adds	r2, r1, #4
 8006a20:	0628      	lsls	r0, r5, #24
 8006a22:	d529      	bpl.n	8006a78 <_printf_i+0x9c>
 8006a24:	6808      	ldr	r0, [r1, #0]
 8006a26:	601a      	str	r2, [r3, #0]
 8006a28:	2800      	cmp	r0, #0
 8006a2a:	da03      	bge.n	8006a34 <_printf_i+0x58>
 8006a2c:	232d      	movs	r3, #45	; 0x2d
 8006a2e:	9a02      	ldr	r2, [sp, #8]
 8006a30:	4240      	negs	r0, r0
 8006a32:	7013      	strb	r3, [r2, #0]
 8006a34:	4e6b      	ldr	r6, [pc, #428]	; (8006be4 <_printf_i+0x208>)
 8006a36:	270a      	movs	r7, #10
 8006a38:	e04f      	b.n	8006ada <_printf_i+0xfe>
 8006a3a:	2a73      	cmp	r2, #115	; 0x73
 8006a3c:	d074      	beq.n	8006b28 <_printf_i+0x14c>
 8006a3e:	d808      	bhi.n	8006a52 <_printf_i+0x76>
 8006a40:	2a6f      	cmp	r2, #111	; 0x6f
 8006a42:	d01f      	beq.n	8006a84 <_printf_i+0xa8>
 8006a44:	2a70      	cmp	r2, #112	; 0x70
 8006a46:	d1e0      	bne.n	8006a0a <_printf_i+0x2e>
 8006a48:	2220      	movs	r2, #32
 8006a4a:	6809      	ldr	r1, [r1, #0]
 8006a4c:	430a      	orrs	r2, r1
 8006a4e:	6022      	str	r2, [r4, #0]
 8006a50:	e003      	b.n	8006a5a <_printf_i+0x7e>
 8006a52:	2a75      	cmp	r2, #117	; 0x75
 8006a54:	d016      	beq.n	8006a84 <_printf_i+0xa8>
 8006a56:	2a78      	cmp	r2, #120	; 0x78
 8006a58:	d1d7      	bne.n	8006a0a <_printf_i+0x2e>
 8006a5a:	0022      	movs	r2, r4
 8006a5c:	2178      	movs	r1, #120	; 0x78
 8006a5e:	3245      	adds	r2, #69	; 0x45
 8006a60:	7011      	strb	r1, [r2, #0]
 8006a62:	4e61      	ldr	r6, [pc, #388]	; (8006be8 <_printf_i+0x20c>)
 8006a64:	e022      	b.n	8006aac <_printf_i+0xd0>
 8006a66:	0025      	movs	r5, r4
 8006a68:	681a      	ldr	r2, [r3, #0]
 8006a6a:	3542      	adds	r5, #66	; 0x42
 8006a6c:	1d11      	adds	r1, r2, #4
 8006a6e:	6019      	str	r1, [r3, #0]
 8006a70:	6813      	ldr	r3, [r2, #0]
 8006a72:	702b      	strb	r3, [r5, #0]
 8006a74:	2301      	movs	r3, #1
 8006a76:	e065      	b.n	8006b44 <_printf_i+0x168>
 8006a78:	6808      	ldr	r0, [r1, #0]
 8006a7a:	601a      	str	r2, [r3, #0]
 8006a7c:	0669      	lsls	r1, r5, #25
 8006a7e:	d5d3      	bpl.n	8006a28 <_printf_i+0x4c>
 8006a80:	b200      	sxth	r0, r0
 8006a82:	e7d1      	b.n	8006a28 <_printf_i+0x4c>
 8006a84:	6819      	ldr	r1, [r3, #0]
 8006a86:	6825      	ldr	r5, [r4, #0]
 8006a88:	1d08      	adds	r0, r1, #4
 8006a8a:	6018      	str	r0, [r3, #0]
 8006a8c:	6808      	ldr	r0, [r1, #0]
 8006a8e:	062e      	lsls	r6, r5, #24
 8006a90:	d505      	bpl.n	8006a9e <_printf_i+0xc2>
 8006a92:	4e54      	ldr	r6, [pc, #336]	; (8006be4 <_printf_i+0x208>)
 8006a94:	2708      	movs	r7, #8
 8006a96:	2a6f      	cmp	r2, #111	; 0x6f
 8006a98:	d01b      	beq.n	8006ad2 <_printf_i+0xf6>
 8006a9a:	270a      	movs	r7, #10
 8006a9c:	e019      	b.n	8006ad2 <_printf_i+0xf6>
 8006a9e:	066d      	lsls	r5, r5, #25
 8006aa0:	d5f7      	bpl.n	8006a92 <_printf_i+0xb6>
 8006aa2:	b280      	uxth	r0, r0
 8006aa4:	e7f5      	b.n	8006a92 <_printf_i+0xb6>
 8006aa6:	3145      	adds	r1, #69	; 0x45
 8006aa8:	4e4e      	ldr	r6, [pc, #312]	; (8006be4 <_printf_i+0x208>)
 8006aaa:	700a      	strb	r2, [r1, #0]
 8006aac:	6818      	ldr	r0, [r3, #0]
 8006aae:	6822      	ldr	r2, [r4, #0]
 8006ab0:	1d01      	adds	r1, r0, #4
 8006ab2:	6800      	ldr	r0, [r0, #0]
 8006ab4:	6019      	str	r1, [r3, #0]
 8006ab6:	0615      	lsls	r5, r2, #24
 8006ab8:	d521      	bpl.n	8006afe <_printf_i+0x122>
 8006aba:	07d3      	lsls	r3, r2, #31
 8006abc:	d502      	bpl.n	8006ac4 <_printf_i+0xe8>
 8006abe:	2320      	movs	r3, #32
 8006ac0:	431a      	orrs	r2, r3
 8006ac2:	6022      	str	r2, [r4, #0]
 8006ac4:	2710      	movs	r7, #16
 8006ac6:	2800      	cmp	r0, #0
 8006ac8:	d103      	bne.n	8006ad2 <_printf_i+0xf6>
 8006aca:	2320      	movs	r3, #32
 8006acc:	6822      	ldr	r2, [r4, #0]
 8006ace:	439a      	bics	r2, r3
 8006ad0:	6022      	str	r2, [r4, #0]
 8006ad2:	0023      	movs	r3, r4
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	3343      	adds	r3, #67	; 0x43
 8006ad8:	701a      	strb	r2, [r3, #0]
 8006ada:	6863      	ldr	r3, [r4, #4]
 8006adc:	60a3      	str	r3, [r4, #8]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	db58      	blt.n	8006b94 <_printf_i+0x1b8>
 8006ae2:	2204      	movs	r2, #4
 8006ae4:	6821      	ldr	r1, [r4, #0]
 8006ae6:	4391      	bics	r1, r2
 8006ae8:	6021      	str	r1, [r4, #0]
 8006aea:	2800      	cmp	r0, #0
 8006aec:	d154      	bne.n	8006b98 <_printf_i+0x1bc>
 8006aee:	9d02      	ldr	r5, [sp, #8]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d05a      	beq.n	8006baa <_printf_i+0x1ce>
 8006af4:	0025      	movs	r5, r4
 8006af6:	7833      	ldrb	r3, [r6, #0]
 8006af8:	3542      	adds	r5, #66	; 0x42
 8006afa:	702b      	strb	r3, [r5, #0]
 8006afc:	e055      	b.n	8006baa <_printf_i+0x1ce>
 8006afe:	0655      	lsls	r5, r2, #25
 8006b00:	d5db      	bpl.n	8006aba <_printf_i+0xde>
 8006b02:	b280      	uxth	r0, r0
 8006b04:	e7d9      	b.n	8006aba <_printf_i+0xde>
 8006b06:	681a      	ldr	r2, [r3, #0]
 8006b08:	680d      	ldr	r5, [r1, #0]
 8006b0a:	1d10      	adds	r0, r2, #4
 8006b0c:	6949      	ldr	r1, [r1, #20]
 8006b0e:	6018      	str	r0, [r3, #0]
 8006b10:	6813      	ldr	r3, [r2, #0]
 8006b12:	062e      	lsls	r6, r5, #24
 8006b14:	d501      	bpl.n	8006b1a <_printf_i+0x13e>
 8006b16:	6019      	str	r1, [r3, #0]
 8006b18:	e002      	b.n	8006b20 <_printf_i+0x144>
 8006b1a:	066d      	lsls	r5, r5, #25
 8006b1c:	d5fb      	bpl.n	8006b16 <_printf_i+0x13a>
 8006b1e:	8019      	strh	r1, [r3, #0]
 8006b20:	2300      	movs	r3, #0
 8006b22:	9d02      	ldr	r5, [sp, #8]
 8006b24:	6123      	str	r3, [r4, #16]
 8006b26:	e04f      	b.n	8006bc8 <_printf_i+0x1ec>
 8006b28:	681a      	ldr	r2, [r3, #0]
 8006b2a:	1d11      	adds	r1, r2, #4
 8006b2c:	6019      	str	r1, [r3, #0]
 8006b2e:	6815      	ldr	r5, [r2, #0]
 8006b30:	2100      	movs	r1, #0
 8006b32:	6862      	ldr	r2, [r4, #4]
 8006b34:	0028      	movs	r0, r5
 8006b36:	f000 f859 	bl	8006bec <memchr>
 8006b3a:	2800      	cmp	r0, #0
 8006b3c:	d001      	beq.n	8006b42 <_printf_i+0x166>
 8006b3e:	1b40      	subs	r0, r0, r5
 8006b40:	6060      	str	r0, [r4, #4]
 8006b42:	6863      	ldr	r3, [r4, #4]
 8006b44:	6123      	str	r3, [r4, #16]
 8006b46:	2300      	movs	r3, #0
 8006b48:	9a02      	ldr	r2, [sp, #8]
 8006b4a:	7013      	strb	r3, [r2, #0]
 8006b4c:	e03c      	b.n	8006bc8 <_printf_i+0x1ec>
 8006b4e:	6923      	ldr	r3, [r4, #16]
 8006b50:	002a      	movs	r2, r5
 8006b52:	9904      	ldr	r1, [sp, #16]
 8006b54:	9803      	ldr	r0, [sp, #12]
 8006b56:	9d05      	ldr	r5, [sp, #20]
 8006b58:	47a8      	blx	r5
 8006b5a:	1c43      	adds	r3, r0, #1
 8006b5c:	d03e      	beq.n	8006bdc <_printf_i+0x200>
 8006b5e:	6823      	ldr	r3, [r4, #0]
 8006b60:	079b      	lsls	r3, r3, #30
 8006b62:	d415      	bmi.n	8006b90 <_printf_i+0x1b4>
 8006b64:	9b07      	ldr	r3, [sp, #28]
 8006b66:	68e0      	ldr	r0, [r4, #12]
 8006b68:	4298      	cmp	r0, r3
 8006b6a:	da39      	bge.n	8006be0 <_printf_i+0x204>
 8006b6c:	0018      	movs	r0, r3
 8006b6e:	e037      	b.n	8006be0 <_printf_i+0x204>
 8006b70:	0022      	movs	r2, r4
 8006b72:	2301      	movs	r3, #1
 8006b74:	3219      	adds	r2, #25
 8006b76:	9904      	ldr	r1, [sp, #16]
 8006b78:	9803      	ldr	r0, [sp, #12]
 8006b7a:	9e05      	ldr	r6, [sp, #20]
 8006b7c:	47b0      	blx	r6
 8006b7e:	1c43      	adds	r3, r0, #1
 8006b80:	d02c      	beq.n	8006bdc <_printf_i+0x200>
 8006b82:	3501      	adds	r5, #1
 8006b84:	68e3      	ldr	r3, [r4, #12]
 8006b86:	9a07      	ldr	r2, [sp, #28]
 8006b88:	1a9b      	subs	r3, r3, r2
 8006b8a:	42ab      	cmp	r3, r5
 8006b8c:	dcf0      	bgt.n	8006b70 <_printf_i+0x194>
 8006b8e:	e7e9      	b.n	8006b64 <_printf_i+0x188>
 8006b90:	2500      	movs	r5, #0
 8006b92:	e7f7      	b.n	8006b84 <_printf_i+0x1a8>
 8006b94:	2800      	cmp	r0, #0
 8006b96:	d0ad      	beq.n	8006af4 <_printf_i+0x118>
 8006b98:	9d02      	ldr	r5, [sp, #8]
 8006b9a:	0039      	movs	r1, r7
 8006b9c:	f7f9 fb3a 	bl	8000214 <__aeabi_uidivmod>
 8006ba0:	5c73      	ldrb	r3, [r6, r1]
 8006ba2:	3d01      	subs	r5, #1
 8006ba4:	702b      	strb	r3, [r5, #0]
 8006ba6:	2800      	cmp	r0, #0
 8006ba8:	d1f7      	bne.n	8006b9a <_printf_i+0x1be>
 8006baa:	2f08      	cmp	r7, #8
 8006bac:	d109      	bne.n	8006bc2 <_printf_i+0x1e6>
 8006bae:	6823      	ldr	r3, [r4, #0]
 8006bb0:	07db      	lsls	r3, r3, #31
 8006bb2:	d506      	bpl.n	8006bc2 <_printf_i+0x1e6>
 8006bb4:	6863      	ldr	r3, [r4, #4]
 8006bb6:	6922      	ldr	r2, [r4, #16]
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	dc02      	bgt.n	8006bc2 <_printf_i+0x1e6>
 8006bbc:	2330      	movs	r3, #48	; 0x30
 8006bbe:	3d01      	subs	r5, #1
 8006bc0:	702b      	strb	r3, [r5, #0]
 8006bc2:	9b02      	ldr	r3, [sp, #8]
 8006bc4:	1b5b      	subs	r3, r3, r5
 8006bc6:	6123      	str	r3, [r4, #16]
 8006bc8:	9b05      	ldr	r3, [sp, #20]
 8006bca:	aa07      	add	r2, sp, #28
 8006bcc:	9300      	str	r3, [sp, #0]
 8006bce:	0021      	movs	r1, r4
 8006bd0:	9b04      	ldr	r3, [sp, #16]
 8006bd2:	9803      	ldr	r0, [sp, #12]
 8006bd4:	f7ff fe94 	bl	8006900 <_printf_common>
 8006bd8:	1c43      	adds	r3, r0, #1
 8006bda:	d1b8      	bne.n	8006b4e <_printf_i+0x172>
 8006bdc:	2001      	movs	r0, #1
 8006bde:	4240      	negs	r0, r0
 8006be0:	b009      	add	sp, #36	; 0x24
 8006be2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006be4:	08007422 	.word	0x08007422
 8006be8:	08007433 	.word	0x08007433

08006bec <memchr>:
 8006bec:	b2c9      	uxtb	r1, r1
 8006bee:	1882      	adds	r2, r0, r2
 8006bf0:	4290      	cmp	r0, r2
 8006bf2:	d101      	bne.n	8006bf8 <memchr+0xc>
 8006bf4:	2000      	movs	r0, #0
 8006bf6:	4770      	bx	lr
 8006bf8:	7803      	ldrb	r3, [r0, #0]
 8006bfa:	428b      	cmp	r3, r1
 8006bfc:	d0fb      	beq.n	8006bf6 <memchr+0xa>
 8006bfe:	3001      	adds	r0, #1
 8006c00:	e7f6      	b.n	8006bf0 <memchr+0x4>

08006c02 <memmove>:
 8006c02:	b510      	push	{r4, lr}
 8006c04:	4288      	cmp	r0, r1
 8006c06:	d902      	bls.n	8006c0e <memmove+0xc>
 8006c08:	188b      	adds	r3, r1, r2
 8006c0a:	4298      	cmp	r0, r3
 8006c0c:	d303      	bcc.n	8006c16 <memmove+0x14>
 8006c0e:	2300      	movs	r3, #0
 8006c10:	e007      	b.n	8006c22 <memmove+0x20>
 8006c12:	5c8b      	ldrb	r3, [r1, r2]
 8006c14:	5483      	strb	r3, [r0, r2]
 8006c16:	3a01      	subs	r2, #1
 8006c18:	d2fb      	bcs.n	8006c12 <memmove+0x10>
 8006c1a:	bd10      	pop	{r4, pc}
 8006c1c:	5ccc      	ldrb	r4, [r1, r3]
 8006c1e:	54c4      	strb	r4, [r0, r3]
 8006c20:	3301      	adds	r3, #1
 8006c22:	429a      	cmp	r2, r3
 8006c24:	d1fa      	bne.n	8006c1c <memmove+0x1a>
 8006c26:	e7f8      	b.n	8006c1a <memmove+0x18>

08006c28 <_free_r>:
 8006c28:	b570      	push	{r4, r5, r6, lr}
 8006c2a:	0005      	movs	r5, r0
 8006c2c:	2900      	cmp	r1, #0
 8006c2e:	d010      	beq.n	8006c52 <_free_r+0x2a>
 8006c30:	1f0c      	subs	r4, r1, #4
 8006c32:	6823      	ldr	r3, [r4, #0]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	da00      	bge.n	8006c3a <_free_r+0x12>
 8006c38:	18e4      	adds	r4, r4, r3
 8006c3a:	0028      	movs	r0, r5
 8006c3c:	f000 f8d4 	bl	8006de8 <__malloc_lock>
 8006c40:	4a1d      	ldr	r2, [pc, #116]	; (8006cb8 <_free_r+0x90>)
 8006c42:	6813      	ldr	r3, [r2, #0]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d105      	bne.n	8006c54 <_free_r+0x2c>
 8006c48:	6063      	str	r3, [r4, #4]
 8006c4a:	6014      	str	r4, [r2, #0]
 8006c4c:	0028      	movs	r0, r5
 8006c4e:	f000 f8cc 	bl	8006dea <__malloc_unlock>
 8006c52:	bd70      	pop	{r4, r5, r6, pc}
 8006c54:	42a3      	cmp	r3, r4
 8006c56:	d909      	bls.n	8006c6c <_free_r+0x44>
 8006c58:	6821      	ldr	r1, [r4, #0]
 8006c5a:	1860      	adds	r0, r4, r1
 8006c5c:	4283      	cmp	r3, r0
 8006c5e:	d1f3      	bne.n	8006c48 <_free_r+0x20>
 8006c60:	6818      	ldr	r0, [r3, #0]
 8006c62:	685b      	ldr	r3, [r3, #4]
 8006c64:	1841      	adds	r1, r0, r1
 8006c66:	6021      	str	r1, [r4, #0]
 8006c68:	e7ee      	b.n	8006c48 <_free_r+0x20>
 8006c6a:	0013      	movs	r3, r2
 8006c6c:	685a      	ldr	r2, [r3, #4]
 8006c6e:	2a00      	cmp	r2, #0
 8006c70:	d001      	beq.n	8006c76 <_free_r+0x4e>
 8006c72:	42a2      	cmp	r2, r4
 8006c74:	d9f9      	bls.n	8006c6a <_free_r+0x42>
 8006c76:	6819      	ldr	r1, [r3, #0]
 8006c78:	1858      	adds	r0, r3, r1
 8006c7a:	42a0      	cmp	r0, r4
 8006c7c:	d10b      	bne.n	8006c96 <_free_r+0x6e>
 8006c7e:	6820      	ldr	r0, [r4, #0]
 8006c80:	1809      	adds	r1, r1, r0
 8006c82:	1858      	adds	r0, r3, r1
 8006c84:	6019      	str	r1, [r3, #0]
 8006c86:	4282      	cmp	r2, r0
 8006c88:	d1e0      	bne.n	8006c4c <_free_r+0x24>
 8006c8a:	6810      	ldr	r0, [r2, #0]
 8006c8c:	6852      	ldr	r2, [r2, #4]
 8006c8e:	1841      	adds	r1, r0, r1
 8006c90:	6019      	str	r1, [r3, #0]
 8006c92:	605a      	str	r2, [r3, #4]
 8006c94:	e7da      	b.n	8006c4c <_free_r+0x24>
 8006c96:	42a0      	cmp	r0, r4
 8006c98:	d902      	bls.n	8006ca0 <_free_r+0x78>
 8006c9a:	230c      	movs	r3, #12
 8006c9c:	602b      	str	r3, [r5, #0]
 8006c9e:	e7d5      	b.n	8006c4c <_free_r+0x24>
 8006ca0:	6821      	ldr	r1, [r4, #0]
 8006ca2:	1860      	adds	r0, r4, r1
 8006ca4:	4282      	cmp	r2, r0
 8006ca6:	d103      	bne.n	8006cb0 <_free_r+0x88>
 8006ca8:	6810      	ldr	r0, [r2, #0]
 8006caa:	6852      	ldr	r2, [r2, #4]
 8006cac:	1841      	adds	r1, r0, r1
 8006cae:	6021      	str	r1, [r4, #0]
 8006cb0:	6062      	str	r2, [r4, #4]
 8006cb2:	605c      	str	r4, [r3, #4]
 8006cb4:	e7ca      	b.n	8006c4c <_free_r+0x24>
 8006cb6:	46c0      	nop			; (mov r8, r8)
 8006cb8:	200000bc 	.word	0x200000bc

08006cbc <_malloc_r>:
 8006cbc:	2303      	movs	r3, #3
 8006cbe:	b570      	push	{r4, r5, r6, lr}
 8006cc0:	1ccd      	adds	r5, r1, #3
 8006cc2:	439d      	bics	r5, r3
 8006cc4:	3508      	adds	r5, #8
 8006cc6:	0006      	movs	r6, r0
 8006cc8:	2d0c      	cmp	r5, #12
 8006cca:	d21e      	bcs.n	8006d0a <_malloc_r+0x4e>
 8006ccc:	250c      	movs	r5, #12
 8006cce:	42a9      	cmp	r1, r5
 8006cd0:	d81d      	bhi.n	8006d0e <_malloc_r+0x52>
 8006cd2:	0030      	movs	r0, r6
 8006cd4:	f000 f888 	bl	8006de8 <__malloc_lock>
 8006cd8:	4a25      	ldr	r2, [pc, #148]	; (8006d70 <_malloc_r+0xb4>)
 8006cda:	6814      	ldr	r4, [r2, #0]
 8006cdc:	0021      	movs	r1, r4
 8006cde:	2900      	cmp	r1, #0
 8006ce0:	d119      	bne.n	8006d16 <_malloc_r+0x5a>
 8006ce2:	4c24      	ldr	r4, [pc, #144]	; (8006d74 <_malloc_r+0xb8>)
 8006ce4:	6823      	ldr	r3, [r4, #0]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d103      	bne.n	8006cf2 <_malloc_r+0x36>
 8006cea:	0030      	movs	r0, r6
 8006cec:	f000 f86a 	bl	8006dc4 <_sbrk_r>
 8006cf0:	6020      	str	r0, [r4, #0]
 8006cf2:	0029      	movs	r1, r5
 8006cf4:	0030      	movs	r0, r6
 8006cf6:	f000 f865 	bl	8006dc4 <_sbrk_r>
 8006cfa:	1c43      	adds	r3, r0, #1
 8006cfc:	d12b      	bne.n	8006d56 <_malloc_r+0x9a>
 8006cfe:	230c      	movs	r3, #12
 8006d00:	0030      	movs	r0, r6
 8006d02:	6033      	str	r3, [r6, #0]
 8006d04:	f000 f871 	bl	8006dea <__malloc_unlock>
 8006d08:	e003      	b.n	8006d12 <_malloc_r+0x56>
 8006d0a:	2d00      	cmp	r5, #0
 8006d0c:	dadf      	bge.n	8006cce <_malloc_r+0x12>
 8006d0e:	230c      	movs	r3, #12
 8006d10:	6033      	str	r3, [r6, #0]
 8006d12:	2000      	movs	r0, #0
 8006d14:	bd70      	pop	{r4, r5, r6, pc}
 8006d16:	680b      	ldr	r3, [r1, #0]
 8006d18:	1b5b      	subs	r3, r3, r5
 8006d1a:	d419      	bmi.n	8006d50 <_malloc_r+0x94>
 8006d1c:	2b0b      	cmp	r3, #11
 8006d1e:	d903      	bls.n	8006d28 <_malloc_r+0x6c>
 8006d20:	600b      	str	r3, [r1, #0]
 8006d22:	18cc      	adds	r4, r1, r3
 8006d24:	6025      	str	r5, [r4, #0]
 8006d26:	e003      	b.n	8006d30 <_malloc_r+0x74>
 8006d28:	684b      	ldr	r3, [r1, #4]
 8006d2a:	428c      	cmp	r4, r1
 8006d2c:	d10d      	bne.n	8006d4a <_malloc_r+0x8e>
 8006d2e:	6013      	str	r3, [r2, #0]
 8006d30:	0030      	movs	r0, r6
 8006d32:	f000 f85a 	bl	8006dea <__malloc_unlock>
 8006d36:	0020      	movs	r0, r4
 8006d38:	2207      	movs	r2, #7
 8006d3a:	300b      	adds	r0, #11
 8006d3c:	1d23      	adds	r3, r4, #4
 8006d3e:	4390      	bics	r0, r2
 8006d40:	1ac3      	subs	r3, r0, r3
 8006d42:	d0e7      	beq.n	8006d14 <_malloc_r+0x58>
 8006d44:	425a      	negs	r2, r3
 8006d46:	50e2      	str	r2, [r4, r3]
 8006d48:	e7e4      	b.n	8006d14 <_malloc_r+0x58>
 8006d4a:	6063      	str	r3, [r4, #4]
 8006d4c:	000c      	movs	r4, r1
 8006d4e:	e7ef      	b.n	8006d30 <_malloc_r+0x74>
 8006d50:	000c      	movs	r4, r1
 8006d52:	6849      	ldr	r1, [r1, #4]
 8006d54:	e7c3      	b.n	8006cde <_malloc_r+0x22>
 8006d56:	2303      	movs	r3, #3
 8006d58:	1cc4      	adds	r4, r0, #3
 8006d5a:	439c      	bics	r4, r3
 8006d5c:	42a0      	cmp	r0, r4
 8006d5e:	d0e1      	beq.n	8006d24 <_malloc_r+0x68>
 8006d60:	1a21      	subs	r1, r4, r0
 8006d62:	0030      	movs	r0, r6
 8006d64:	f000 f82e 	bl	8006dc4 <_sbrk_r>
 8006d68:	1c43      	adds	r3, r0, #1
 8006d6a:	d1db      	bne.n	8006d24 <_malloc_r+0x68>
 8006d6c:	e7c7      	b.n	8006cfe <_malloc_r+0x42>
 8006d6e:	46c0      	nop			; (mov r8, r8)
 8006d70:	200000bc 	.word	0x200000bc
 8006d74:	200000c0 	.word	0x200000c0

08006d78 <_realloc_r>:
 8006d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d7a:	0007      	movs	r7, r0
 8006d7c:	000d      	movs	r5, r1
 8006d7e:	0016      	movs	r6, r2
 8006d80:	2900      	cmp	r1, #0
 8006d82:	d105      	bne.n	8006d90 <_realloc_r+0x18>
 8006d84:	0011      	movs	r1, r2
 8006d86:	f7ff ff99 	bl	8006cbc <_malloc_r>
 8006d8a:	0004      	movs	r4, r0
 8006d8c:	0020      	movs	r0, r4
 8006d8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d90:	2a00      	cmp	r2, #0
 8006d92:	d103      	bne.n	8006d9c <_realloc_r+0x24>
 8006d94:	f7ff ff48 	bl	8006c28 <_free_r>
 8006d98:	0034      	movs	r4, r6
 8006d9a:	e7f7      	b.n	8006d8c <_realloc_r+0x14>
 8006d9c:	f000 f826 	bl	8006dec <_malloc_usable_size_r>
 8006da0:	002c      	movs	r4, r5
 8006da2:	42b0      	cmp	r0, r6
 8006da4:	d2f2      	bcs.n	8006d8c <_realloc_r+0x14>
 8006da6:	0031      	movs	r1, r6
 8006da8:	0038      	movs	r0, r7
 8006daa:	f7ff ff87 	bl	8006cbc <_malloc_r>
 8006dae:	1e04      	subs	r4, r0, #0
 8006db0:	d0ec      	beq.n	8006d8c <_realloc_r+0x14>
 8006db2:	0029      	movs	r1, r5
 8006db4:	0032      	movs	r2, r6
 8006db6:	f7ff fc11 	bl	80065dc <memcpy>
 8006dba:	0029      	movs	r1, r5
 8006dbc:	0038      	movs	r0, r7
 8006dbe:	f7ff ff33 	bl	8006c28 <_free_r>
 8006dc2:	e7e3      	b.n	8006d8c <_realloc_r+0x14>

08006dc4 <_sbrk_r>:
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	b570      	push	{r4, r5, r6, lr}
 8006dc8:	4c06      	ldr	r4, [pc, #24]	; (8006de4 <_sbrk_r+0x20>)
 8006dca:	0005      	movs	r5, r0
 8006dcc:	0008      	movs	r0, r1
 8006dce:	6023      	str	r3, [r4, #0]
 8006dd0:	f7fb fb8a 	bl	80024e8 <_sbrk>
 8006dd4:	1c43      	adds	r3, r0, #1
 8006dd6:	d103      	bne.n	8006de0 <_sbrk_r+0x1c>
 8006dd8:	6823      	ldr	r3, [r4, #0]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d000      	beq.n	8006de0 <_sbrk_r+0x1c>
 8006dde:	602b      	str	r3, [r5, #0]
 8006de0:	bd70      	pop	{r4, r5, r6, pc}
 8006de2:	46c0      	nop			; (mov r8, r8)
 8006de4:	20000298 	.word	0x20000298

08006de8 <__malloc_lock>:
 8006de8:	4770      	bx	lr

08006dea <__malloc_unlock>:
 8006dea:	4770      	bx	lr

08006dec <_malloc_usable_size_r>:
 8006dec:	1f0b      	subs	r3, r1, #4
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	1f18      	subs	r0, r3, #4
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	da01      	bge.n	8006dfa <_malloc_usable_size_r+0xe>
 8006df6:	580b      	ldr	r3, [r1, r0]
 8006df8:	18c0      	adds	r0, r0, r3
 8006dfa:	4770      	bx	lr

08006dfc <_init>:
 8006dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dfe:	46c0      	nop			; (mov r8, r8)
 8006e00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e02:	bc08      	pop	{r3}
 8006e04:	469e      	mov	lr, r3
 8006e06:	4770      	bx	lr

08006e08 <_fini>:
 8006e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e0a:	46c0      	nop			; (mov r8, r8)
 8006e0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e0e:	bc08      	pop	{r3}
 8006e10:	469e      	mov	lr, r3
 8006e12:	4770      	bx	lr
