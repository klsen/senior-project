
project_L0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f74  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000804  08009034  08009034  00019034  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009838  08009838  000200cc  2**0
                  CONTENTS
  4 .ARM          00000000  08009838  08009838  000200cc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009838  08009838  000200cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009838  08009838  00019838  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800983c  0800983c  0001983c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000cc  20000000  08009840  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e0  200000cc  0800990c  000200cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003ac  0800990c  000203ac  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017f08  00000000  00000000  000200f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002ebd  00000000  00000000  00037ffc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001270  00000000  00000000  0003aec0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000010e0  00000000  00000000  0003c130  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017d8d  00000000  00000000  0003d210  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000fe68  00000000  00000000  00054f9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008d329  00000000  00000000  00064e05  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f212e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000448c  00000000  00000000  000f21ac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200000cc 	.word	0x200000cc
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800901c 	.word	0x0800901c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200000d0 	.word	0x200000d0
 8000104:	0800901c 	.word	0x0800901c

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f8f0 	bl	8000400 <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__divsi3>:
 800022c:	4603      	mov	r3, r0
 800022e:	430b      	orrs	r3, r1
 8000230:	d47f      	bmi.n	8000332 <__divsi3+0x106>
 8000232:	2200      	movs	r2, #0
 8000234:	0843      	lsrs	r3, r0, #1
 8000236:	428b      	cmp	r3, r1
 8000238:	d374      	bcc.n	8000324 <__divsi3+0xf8>
 800023a:	0903      	lsrs	r3, r0, #4
 800023c:	428b      	cmp	r3, r1
 800023e:	d35f      	bcc.n	8000300 <__divsi3+0xd4>
 8000240:	0a03      	lsrs	r3, r0, #8
 8000242:	428b      	cmp	r3, r1
 8000244:	d344      	bcc.n	80002d0 <__divsi3+0xa4>
 8000246:	0b03      	lsrs	r3, r0, #12
 8000248:	428b      	cmp	r3, r1
 800024a:	d328      	bcc.n	800029e <__divsi3+0x72>
 800024c:	0c03      	lsrs	r3, r0, #16
 800024e:	428b      	cmp	r3, r1
 8000250:	d30d      	bcc.n	800026e <__divsi3+0x42>
 8000252:	22ff      	movs	r2, #255	; 0xff
 8000254:	0209      	lsls	r1, r1, #8
 8000256:	ba12      	rev	r2, r2
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d302      	bcc.n	8000264 <__divsi3+0x38>
 800025e:	1212      	asrs	r2, r2, #8
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	d065      	beq.n	8000330 <__divsi3+0x104>
 8000264:	0b03      	lsrs	r3, r0, #12
 8000266:	428b      	cmp	r3, r1
 8000268:	d319      	bcc.n	800029e <__divsi3+0x72>
 800026a:	e000      	b.n	800026e <__divsi3+0x42>
 800026c:	0a09      	lsrs	r1, r1, #8
 800026e:	0bc3      	lsrs	r3, r0, #15
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x4c>
 8000274:	03cb      	lsls	r3, r1, #15
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b83      	lsrs	r3, r0, #14
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x58>
 8000280:	038b      	lsls	r3, r1, #14
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b43      	lsrs	r3, r0, #13
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x64>
 800028c:	034b      	lsls	r3, r1, #13
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b03      	lsrs	r3, r0, #12
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x70>
 8000298:	030b      	lsls	r3, r1, #12
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0ac3      	lsrs	r3, r0, #11
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x7c>
 80002a4:	02cb      	lsls	r3, r1, #11
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a83      	lsrs	r3, r0, #10
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x88>
 80002b0:	028b      	lsls	r3, r1, #10
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a43      	lsrs	r3, r0, #9
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x94>
 80002bc:	024b      	lsls	r3, r1, #9
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a03      	lsrs	r3, r0, #8
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0xa0>
 80002c8:	020b      	lsls	r3, r1, #8
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	d2cd      	bcs.n	800026c <__divsi3+0x40>
 80002d0:	09c3      	lsrs	r3, r0, #7
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xae>
 80002d6:	01cb      	lsls	r3, r1, #7
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0983      	lsrs	r3, r0, #6
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xba>
 80002e2:	018b      	lsls	r3, r1, #6
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0943      	lsrs	r3, r0, #5
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xc6>
 80002ee:	014b      	lsls	r3, r1, #5
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0903      	lsrs	r3, r0, #4
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xd2>
 80002fa:	010b      	lsls	r3, r1, #4
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	08c3      	lsrs	r3, r0, #3
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xde>
 8000306:	00cb      	lsls	r3, r1, #3
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0883      	lsrs	r3, r0, #2
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xea>
 8000312:	008b      	lsls	r3, r1, #2
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0843      	lsrs	r3, r0, #1
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xf6>
 800031e:	004b      	lsls	r3, r1, #1
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	1a41      	subs	r1, r0, r1
 8000326:	d200      	bcs.n	800032a <__divsi3+0xfe>
 8000328:	4601      	mov	r1, r0
 800032a:	4152      	adcs	r2, r2
 800032c:	4610      	mov	r0, r2
 800032e:	4770      	bx	lr
 8000330:	e05d      	b.n	80003ee <__divsi3+0x1c2>
 8000332:	0fca      	lsrs	r2, r1, #31
 8000334:	d000      	beq.n	8000338 <__divsi3+0x10c>
 8000336:	4249      	negs	r1, r1
 8000338:	1003      	asrs	r3, r0, #32
 800033a:	d300      	bcc.n	800033e <__divsi3+0x112>
 800033c:	4240      	negs	r0, r0
 800033e:	4053      	eors	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	469c      	mov	ip, r3
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d32d      	bcc.n	80003a6 <__divsi3+0x17a>
 800034a:	0a03      	lsrs	r3, r0, #8
 800034c:	428b      	cmp	r3, r1
 800034e:	d312      	bcc.n	8000376 <__divsi3+0x14a>
 8000350:	22fc      	movs	r2, #252	; 0xfc
 8000352:	0189      	lsls	r1, r1, #6
 8000354:	ba12      	rev	r2, r2
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d30c      	bcc.n	8000376 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d308      	bcc.n	8000376 <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	1192      	asrs	r2, r2, #6
 8000368:	428b      	cmp	r3, r1
 800036a:	d304      	bcc.n	8000376 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	d03a      	beq.n	80003e6 <__divsi3+0x1ba>
 8000370:	1192      	asrs	r2, r2, #6
 8000372:	e000      	b.n	8000376 <__divsi3+0x14a>
 8000374:	0989      	lsrs	r1, r1, #6
 8000376:	09c3      	lsrs	r3, r0, #7
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x154>
 800037c:	01cb      	lsls	r3, r1, #7
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0983      	lsrs	r3, r0, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x160>
 8000388:	018b      	lsls	r3, r1, #6
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0943      	lsrs	r3, r0, #5
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x16c>
 8000394:	014b      	lsls	r3, r1, #5
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0903      	lsrs	r3, r0, #4
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x178>
 80003a0:	010b      	lsls	r3, r1, #4
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	08c3      	lsrs	r3, r0, #3
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x184>
 80003ac:	00cb      	lsls	r3, r1, #3
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0883      	lsrs	r3, r0, #2
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x190>
 80003b8:	008b      	lsls	r3, r1, #2
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	d2d9      	bcs.n	8000374 <__divsi3+0x148>
 80003c0:	0843      	lsrs	r3, r0, #1
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d301      	bcc.n	80003ca <__divsi3+0x19e>
 80003c6:	004b      	lsls	r3, r1, #1
 80003c8:	1ac0      	subs	r0, r0, r3
 80003ca:	4152      	adcs	r2, r2
 80003cc:	1a41      	subs	r1, r0, r1
 80003ce:	d200      	bcs.n	80003d2 <__divsi3+0x1a6>
 80003d0:	4601      	mov	r1, r0
 80003d2:	4663      	mov	r3, ip
 80003d4:	4152      	adcs	r2, r2
 80003d6:	105b      	asrs	r3, r3, #1
 80003d8:	4610      	mov	r0, r2
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x1b4>
 80003dc:	4240      	negs	r0, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d500      	bpl.n	80003e4 <__divsi3+0x1b8>
 80003e2:	4249      	negs	r1, r1
 80003e4:	4770      	bx	lr
 80003e6:	4663      	mov	r3, ip
 80003e8:	105b      	asrs	r3, r3, #1
 80003ea:	d300      	bcc.n	80003ee <__divsi3+0x1c2>
 80003ec:	4240      	negs	r0, r0
 80003ee:	b501      	push	{r0, lr}
 80003f0:	2000      	movs	r0, #0
 80003f2:	f000 f805 	bl	8000400 <__aeabi_idiv0>
 80003f6:	bd02      	pop	{r1, pc}

080003f8 <__aeabi_idivmod>:
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d0f8      	beq.n	80003ee <__divsi3+0x1c2>
 80003fc:	e716      	b.n	800022c <__divsi3>
 80003fe:	4770      	bx	lr

08000400 <__aeabi_idiv0>:
 8000400:	4770      	bx	lr
 8000402:	46c0      	nop			; (mov r8, r8)

08000404 <SPI_CS_LOW>:
static uint8_t textSize;
static uint16_t textColor;
static uint16_t bg;

// ---- lower level functions ----
void SPI_CS_LOW() {HAL_GPIO_WritePin(CS_GPIO, CS_PIN, GPIO_PIN_RESET);}
 8000404:	b580      	push	{r7, lr}
 8000406:	af00      	add	r7, sp, #0
 8000408:	4b04      	ldr	r3, [pc, #16]	; (800041c <SPI_CS_LOW+0x18>)
 800040a:	2200      	movs	r2, #0
 800040c:	2180      	movs	r1, #128	; 0x80
 800040e:	0018      	movs	r0, r3
 8000410:	f004 fffb 	bl	800540a <HAL_GPIO_WritePin>
 8000414:	46c0      	nop			; (mov r8, r8)
 8000416:	46bd      	mov	sp, r7
 8000418:	bd80      	pop	{r7, pc}
 800041a:	46c0      	nop			; (mov r8, r8)
 800041c:	50000800 	.word	0x50000800

08000420 <SPI_CS_HIGH>:

void SPI_CS_HIGH() {HAL_GPIO_WritePin(CS_GPIO, CS_PIN, GPIO_PIN_SET);}
 8000420:	b580      	push	{r7, lr}
 8000422:	af00      	add	r7, sp, #0
 8000424:	4b04      	ldr	r3, [pc, #16]	; (8000438 <SPI_CS_HIGH+0x18>)
 8000426:	2201      	movs	r2, #1
 8000428:	2180      	movs	r1, #128	; 0x80
 800042a:	0018      	movs	r0, r3
 800042c:	f004 ffed 	bl	800540a <HAL_GPIO_WritePin>
 8000430:	46c0      	nop			; (mov r8, r8)
 8000432:	46bd      	mov	sp, r7
 8000434:	bd80      	pop	{r7, pc}
 8000436:	46c0      	nop			; (mov r8, r8)
 8000438:	50000800 	.word	0x50000800

0800043c <SPI_DC_LOW>:

void SPI_DC_LOW() {HAL_GPIO_WritePin(DC_GPIO, DC_PIN, GPIO_PIN_RESET);}
 800043c:	b580      	push	{r7, lr}
 800043e:	af00      	add	r7, sp, #0
 8000440:	4b04      	ldr	r3, [pc, #16]	; (8000454 <SPI_DC_LOW+0x18>)
 8000442:	2200      	movs	r2, #0
 8000444:	2140      	movs	r1, #64	; 0x40
 8000446:	0018      	movs	r0, r3
 8000448:	f004 ffdf 	bl	800540a <HAL_GPIO_WritePin>
 800044c:	46c0      	nop			; (mov r8, r8)
 800044e:	46bd      	mov	sp, r7
 8000450:	bd80      	pop	{r7, pc}
 8000452:	46c0      	nop			; (mov r8, r8)
 8000454:	50000400 	.word	0x50000400

08000458 <SPI_DC_HIGH>:

void SPI_DC_HIGH() {HAL_GPIO_WritePin(DC_GPIO, DC_PIN, GPIO_PIN_SET);}
 8000458:	b580      	push	{r7, lr}
 800045a:	af00      	add	r7, sp, #0
 800045c:	4b04      	ldr	r3, [pc, #16]	; (8000470 <SPI_DC_HIGH+0x18>)
 800045e:	2201      	movs	r2, #1
 8000460:	2140      	movs	r1, #64	; 0x40
 8000462:	0018      	movs	r0, r3
 8000464:	f004 ffd1 	bl	800540a <HAL_GPIO_WritePin>
 8000468:	46c0      	nop			; (mov r8, r8)
 800046a:	46bd      	mov	sp, r7
 800046c:	bd80      	pop	{r7, pc}
 800046e:	46c0      	nop			; (mov r8, r8)
 8000470:	50000400 	.word	0x50000400

08000474 <sendCommand>:

// still ripped but now im changing it
void sendCommand(uint8_t cmd, uint8_t *args, uint16_t numArgs, SPI_HandleTypeDef *hspi) {
 8000474:	b580      	push	{r7, lr}
 8000476:	b084      	sub	sp, #16
 8000478:	af00      	add	r7, sp, #0
 800047a:	60b9      	str	r1, [r7, #8]
 800047c:	0011      	movs	r1, r2
 800047e:	607b      	str	r3, [r7, #4]
 8000480:	230f      	movs	r3, #15
 8000482:	18fb      	adds	r3, r7, r3
 8000484:	1c02      	adds	r2, r0, #0
 8000486:	701a      	strb	r2, [r3, #0]
 8000488:	230c      	movs	r3, #12
 800048a:	18fb      	adds	r3, r7, r3
 800048c:	1c0a      	adds	r2, r1, #0
 800048e:	801a      	strh	r2, [r3, #0]
	while (HAL_SPI_GetState(hspi) == HAL_SPI_STATE_BUSY_TX);		// block next transfer request while DMA transfer is ongoing
 8000490:	46c0      	nop			; (mov r8, r8)
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	0018      	movs	r0, r3
 8000496:	f007 f935 	bl	8007704 <HAL_SPI_GetState>
 800049a:	0003      	movs	r3, r0
 800049c:	2b03      	cmp	r3, #3
 800049e:	d0f8      	beq.n	8000492 <sendCommand+0x1e>
	SPI_CS_LOW();	// chip select
 80004a0:	f7ff ffb0 	bl	8000404 <SPI_CS_LOW>

	SPI_DC_LOW();	// command mode
 80004a4:	f7ff ffca 	bl	800043c <SPI_DC_LOW>
	HAL_SPI_Transmit(hspi, &cmd, 1, 1000);	// not using DMA bc it's only 1 byte
 80004a8:	23fa      	movs	r3, #250	; 0xfa
 80004aa:	009b      	lsls	r3, r3, #2
 80004ac:	220f      	movs	r2, #15
 80004ae:	18b9      	adds	r1, r7, r2
 80004b0:	6878      	ldr	r0, [r7, #4]
 80004b2:	2201      	movs	r2, #1
 80004b4:	f006 fe44 	bl	8007140 <HAL_SPI_Transmit>

	SPI_DC_HIGH();	// data mode
 80004b8:	f7ff ffce 	bl	8000458 <SPI_DC_HIGH>
	if (numArgs) {
 80004bc:	230c      	movs	r3, #12
 80004be:	18fb      	adds	r3, r7, r3
 80004c0:	881b      	ldrh	r3, [r3, #0]
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d007      	beq.n	80004d6 <sendCommand+0x62>
		HAL_SPI_Transmit_IT(hspi, args, numArgs);
 80004c6:	230c      	movs	r3, #12
 80004c8:	18fb      	adds	r3, r7, r3
 80004ca:	881a      	ldrh	r2, [r3, #0]
 80004cc:	68b9      	ldr	r1, [r7, #8]
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	0018      	movs	r0, r3
 80004d2:	f006 ff83 	bl	80073dc <HAL_SPI_Transmit_IT>
//		HAL_SPI_Transmit_DMA(hspi, args, numArgs);
	}

//	SPI_CS_HIGH();	// chip select disable
}
 80004d6:	46c0      	nop			; (mov r8, r8)
 80004d8:	46bd      	mov	sp, r7
 80004da:	b004      	add	sp, #16
 80004dc:	bd80      	pop	{r7, pc}
	...

080004e0 <HAL_SPI_TxCpltCallback>:

// DMA callback on transfer compelete
// using only for sending data, but not commands
// dont send request when transfer is ongoing
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b082      	sub	sp, #8
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
	if (HAL_GPIO_ReadPin(CS_GPIO, CS_PIN) == GPIO_PIN_RESET) SPI_CS_HIGH();	// chip select disable
 80004e8:	4b06      	ldr	r3, [pc, #24]	; (8000504 <HAL_SPI_TxCpltCallback+0x24>)
 80004ea:	2180      	movs	r1, #128	; 0x80
 80004ec:	0018      	movs	r0, r3
 80004ee:	f004 ff6f 	bl	80053d0 <HAL_GPIO_ReadPin>
 80004f2:	1e03      	subs	r3, r0, #0
 80004f4:	d101      	bne.n	80004fa <HAL_SPI_TxCpltCallback+0x1a>
 80004f6:	f7ff ff93 	bl	8000420 <SPI_CS_HIGH>
}
 80004fa:	46c0      	nop			; (mov r8, r8)
 80004fc:	46bd      	mov	sp, r7
 80004fe:	b002      	add	sp, #8
 8000500:	bd80      	pop	{r7, pc}
 8000502:	46c0      	nop			; (mov r8, r8)
 8000504:	50000800 	.word	0x50000800

08000508 <displayInit>:

// array parser heavily based on Adafruit library code
void displayInit(uint8_t *args, SPI_HandleTypeDef *hspi) {
 8000508:	b5f0      	push	{r4, r5, r6, r7, lr}
 800050a:	b085      	sub	sp, #20
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
 8000510:	6039      	str	r1, [r7, #0]
	uint8_t  numCommands, cmd, numArgs;
	uint16_t ms;
	uint8_t index = 0;
 8000512:	220b      	movs	r2, #11
 8000514:	0011      	movs	r1, r2
 8000516:	18bb      	adds	r3, r7, r2
 8000518:	2200      	movs	r2, #0
 800051a:	701a      	strb	r2, [r3, #0]
	uint8_t data;

	numCommands = args[index++];   // Number of commands to follow
 800051c:	000a      	movs	r2, r1
 800051e:	18bb      	adds	r3, r7, r2
 8000520:	781b      	ldrb	r3, [r3, #0]
 8000522:	18ba      	adds	r2, r7, r2
 8000524:	1c59      	adds	r1, r3, #1
 8000526:	7011      	strb	r1, [r2, #0]
 8000528:	001a      	movs	r2, r3
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	189a      	adds	r2, r3, r2
 800052e:	230f      	movs	r3, #15
 8000530:	18fb      	adds	r3, r7, r3
 8000532:	7812      	ldrb	r2, [r2, #0]
 8000534:	701a      	strb	r2, [r3, #0]
	while(numCommands--) {                 // For each command...
 8000536:	e05e      	b.n	80005f6 <displayInit+0xee>
		cmd = args[index++];         // Read command
 8000538:	200b      	movs	r0, #11
 800053a:	183b      	adds	r3, r7, r0
 800053c:	781b      	ldrb	r3, [r3, #0]
 800053e:	183a      	adds	r2, r7, r0
 8000540:	1c59      	adds	r1, r3, #1
 8000542:	7011      	strb	r1, [r2, #0]
 8000544:	001a      	movs	r2, r3
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	189a      	adds	r2, r3, r2
 800054a:	230a      	movs	r3, #10
 800054c:	18fb      	adds	r3, r7, r3
 800054e:	7812      	ldrb	r2, [r2, #0]
 8000550:	701a      	strb	r2, [r3, #0]
		numArgs  = args[index++];    // Number of args to follow
 8000552:	183b      	adds	r3, r7, r0
 8000554:	781b      	ldrb	r3, [r3, #0]
 8000556:	183a      	adds	r2, r7, r0
 8000558:	1c59      	adds	r1, r3, #1
 800055a:	7011      	strb	r1, [r2, #0]
 800055c:	001a      	movs	r2, r3
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	189a      	adds	r2, r3, r2
 8000562:	2609      	movs	r6, #9
 8000564:	19bb      	adds	r3, r7, r6
 8000566:	7812      	ldrb	r2, [r2, #0]
 8000568:	701a      	strb	r2, [r3, #0]
		ms       = numArgs & ST_CMD_DELAY;   // If hibit set, delay follows args
 800056a:	19bb      	adds	r3, r7, r6
 800056c:	781b      	ldrb	r3, [r3, #0]
 800056e:	b29a      	uxth	r2, r3
 8000570:	210c      	movs	r1, #12
 8000572:	187b      	adds	r3, r7, r1
 8000574:	2180      	movs	r1, #128	; 0x80
 8000576:	400a      	ands	r2, r1
 8000578:	801a      	strh	r2, [r3, #0]
		numArgs &= ~ST_CMD_DELAY;            // Mask out delay bit
 800057a:	19bb      	adds	r3, r7, r6
 800057c:	19ba      	adds	r2, r7, r6
 800057e:	7812      	ldrb	r2, [r2, #0]
 8000580:	217f      	movs	r1, #127	; 0x7f
 8000582:	400a      	ands	r2, r1
 8000584:	701a      	strb	r2, [r3, #0]
		sendCommand(cmd, &args[index], numArgs, hspi);
 8000586:	0005      	movs	r5, r0
 8000588:	183b      	adds	r3, r7, r0
 800058a:	781b      	ldrb	r3, [r3, #0]
 800058c:	687a      	ldr	r2, [r7, #4]
 800058e:	18d1      	adds	r1, r2, r3
 8000590:	19bb      	adds	r3, r7, r6
 8000592:	781b      	ldrb	r3, [r3, #0]
 8000594:	b29a      	uxth	r2, r3
 8000596:	683c      	ldr	r4, [r7, #0]
 8000598:	230a      	movs	r3, #10
 800059a:	18fb      	adds	r3, r7, r3
 800059c:	7818      	ldrb	r0, [r3, #0]
 800059e:	0023      	movs	r3, r4
 80005a0:	f7ff ff68 	bl	8000474 <sendCommand>
		index += numArgs;
 80005a4:	0028      	movs	r0, r5
 80005a6:	183b      	adds	r3, r7, r0
 80005a8:	1839      	adds	r1, r7, r0
 80005aa:	19ba      	adds	r2, r7, r6
 80005ac:	7809      	ldrb	r1, [r1, #0]
 80005ae:	7812      	ldrb	r2, [r2, #0]
 80005b0:	188a      	adds	r2, r1, r2
 80005b2:	701a      	strb	r2, [r3, #0]

		if(ms) {
 80005b4:	210c      	movs	r1, #12
 80005b6:	187b      	adds	r3, r7, r1
 80005b8:	881b      	ldrh	r3, [r3, #0]
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d01b      	beq.n	80005f6 <displayInit+0xee>
			ms = args[index++]; // Read post-command delay time (ms)
 80005be:	220b      	movs	r2, #11
 80005c0:	18bb      	adds	r3, r7, r2
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	18ba      	adds	r2, r7, r2
 80005c6:	1c59      	adds	r1, r3, #1
 80005c8:	7011      	strb	r1, [r2, #0]
 80005ca:	001a      	movs	r2, r3
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	189b      	adds	r3, r3, r2
 80005d0:	781a      	ldrb	r2, [r3, #0]
 80005d2:	210c      	movs	r1, #12
 80005d4:	187b      	adds	r3, r7, r1
 80005d6:	801a      	strh	r2, [r3, #0]
			if(ms == 255) ms = 500;     // If 255, delay for 500 ms
 80005d8:	187b      	adds	r3, r7, r1
 80005da:	881b      	ldrh	r3, [r3, #0]
 80005dc:	2bff      	cmp	r3, #255	; 0xff
 80005de:	d104      	bne.n	80005ea <displayInit+0xe2>
 80005e0:	230c      	movs	r3, #12
 80005e2:	18fb      	adds	r3, r7, r3
 80005e4:	22fa      	movs	r2, #250	; 0xfa
 80005e6:	0052      	lsls	r2, r2, #1
 80005e8:	801a      	strh	r2, [r3, #0]
			HAL_Delay(ms);
 80005ea:	230c      	movs	r3, #12
 80005ec:	18fb      	adds	r3, r7, r3
 80005ee:	881b      	ldrh	r3, [r3, #0]
 80005f0:	0018      	movs	r0, r3
 80005f2:	f004 f887 	bl	8004704 <HAL_Delay>
	while(numCommands--) {                 // For each command...
 80005f6:	220f      	movs	r2, #15
 80005f8:	18bb      	adds	r3, r7, r2
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	18ba      	adds	r2, r7, r2
 80005fe:	1e59      	subs	r1, r3, #1
 8000600:	7011      	strb	r1, [r2, #0]
 8000602:	2b00      	cmp	r3, #0
 8000604:	d198      	bne.n	8000538 <displayInit+0x30>
		}
	}

	// note: this line may be doing more work than I think
	// (hard to read in datasheet)
	data = 0xC0;
 8000606:	2108      	movs	r1, #8
 8000608:	187b      	adds	r3, r7, r1
 800060a:	22c0      	movs	r2, #192	; 0xc0
 800060c:	701a      	strb	r2, [r3, #0]
	sendCommand(ST77XX_MADCTL, &data, 1, hspi);
 800060e:	683b      	ldr	r3, [r7, #0]
 8000610:	1879      	adds	r1, r7, r1
 8000612:	2201      	movs	r2, #1
 8000614:	2036      	movs	r0, #54	; 0x36
 8000616:	f7ff ff2d 	bl	8000474 <sendCommand>
}
 800061a:	46c0      	nop			; (mov r8, r8)
 800061c:	46bd      	mov	sp, r7
 800061e:	b005      	add	sp, #20
 8000620:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08000624 <TFT_startup>:

void TFT_startup(SPI_HandleTypeDef *hspi) {
 8000624:	b590      	push	{r4, r7, lr}
 8000626:	b0a3      	sub	sp, #140	; 0x8c
 8000628:	af02      	add	r7, sp, #8
 800062a:	6078      	str	r0, [r7, #4]
	// startup sequence: rcmd1->rcmd2red->rcmd3
	uint8_t initCommands[] = {
 800062c:	240c      	movs	r4, #12
 800062e:	193a      	adds	r2, r7, r4
 8000630:	4b14      	ldr	r3, [pc, #80]	; (8000684 <TFT_startup+0x60>)
 8000632:	0010      	movs	r0, r2
 8000634:	0019      	movs	r1, r3
 8000636:	2371      	movs	r3, #113	; 0x71
 8000638:	001a      	movs	r2, r3
 800063a:	f008 f8d1 	bl	80087e0 <memcpy>
			10,                           //     10 ms delay
		ST77XX_DISPON,    ST_CMD_DELAY, //  4: Main screen turn on, no args w/delay
			100	                        //     100 ms delay
	};

	displayInit(initCommands, hspi);
 800063e:	687a      	ldr	r2, [r7, #4]
 8000640:	193b      	adds	r3, r7, r4
 8000642:	0011      	movs	r1, r2
 8000644:	0018      	movs	r0, r3
 8000646:	f7ff ff5f 	bl	8000508 <displayInit>
	setAddrWindow(0, 0, WIDTH, HEIGHT, hspi);
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	9300      	str	r3, [sp, #0]
 800064e:	23a0      	movs	r3, #160	; 0xa0
 8000650:	2280      	movs	r2, #128	; 0x80
 8000652:	2100      	movs	r1, #0
 8000654:	2000      	movs	r0, #0
 8000656:	f000 f821 	bl	800069c <setAddrWindow>

	// set the global variables
	cursorX = 0;
 800065a:	4b0b      	ldr	r3, [pc, #44]	; (8000688 <TFT_startup+0x64>)
 800065c:	2200      	movs	r2, #0
 800065e:	701a      	strb	r2, [r3, #0]
	cursorY = 0;
 8000660:	4b0a      	ldr	r3, [pc, #40]	; (800068c <TFT_startup+0x68>)
 8000662:	2200      	movs	r2, #0
 8000664:	701a      	strb	r2, [r3, #0]
	textSize = 1;
 8000666:	4b0a      	ldr	r3, [pc, #40]	; (8000690 <TFT_startup+0x6c>)
 8000668:	2201      	movs	r2, #1
 800066a:	701a      	strb	r2, [r3, #0]
	textColor = ST77XX_BLACK;
 800066c:	4b09      	ldr	r3, [pc, #36]	; (8000694 <TFT_startup+0x70>)
 800066e:	2200      	movs	r2, #0
 8000670:	801a      	strh	r2, [r3, #0]
	bg = ST77XX_WHITE;
 8000672:	4b09      	ldr	r3, [pc, #36]	; (8000698 <TFT_startup+0x74>)
 8000674:	2201      	movs	r2, #1
 8000676:	4252      	negs	r2, r2
 8000678:	801a      	strh	r2, [r3, #0]
}
 800067a:	46c0      	nop			; (mov r8, r8)
 800067c:	46bd      	mov	sp, r7
 800067e:	b021      	add	sp, #132	; 0x84
 8000680:	bd90      	pop	{r4, r7, pc}
 8000682:	46c0      	nop			; (mov r8, r8)
 8000684:	08009034 	.word	0x08009034
 8000688:	200000e8 	.word	0x200000e8
 800068c:	200000e9 	.word	0x200000e9
 8000690:	200000ea 	.word	0x200000ea
 8000694:	200000ec 	.word	0x200000ec
 8000698:	200000ee 	.word	0x200000ee

0800069c <setAddrWindow>:

// draw something: set addr window -> write to ram memory
// sets specific area on display to write pixels to
// x and y for upper left corner, w for width, h for height
void setAddrWindow(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SPI_HandleTypeDef *hspi) {
 800069c:	b5b0      	push	{r4, r5, r7, lr}
 800069e:	b084      	sub	sp, #16
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	0005      	movs	r5, r0
 80006a4:	000c      	movs	r4, r1
 80006a6:	0010      	movs	r0, r2
 80006a8:	0019      	movs	r1, r3
 80006aa:	1dbb      	adds	r3, r7, #6
 80006ac:	1c2a      	adds	r2, r5, #0
 80006ae:	801a      	strh	r2, [r3, #0]
 80006b0:	1d3b      	adds	r3, r7, #4
 80006b2:	1c22      	adds	r2, r4, #0
 80006b4:	801a      	strh	r2, [r3, #0]
 80006b6:	1cbb      	adds	r3, r7, #2
 80006b8:	1c02      	adds	r2, r0, #0
 80006ba:	801a      	strh	r2, [r3, #0]
 80006bc:	003b      	movs	r3, r7
 80006be:	1c0a      	adds	r2, r1, #0
 80006c0:	801a      	strh	r2, [r3, #0]
	// not really needed for our display
	x += _xstart;
 80006c2:	1dbb      	adds	r3, r7, #6
 80006c4:	1dba      	adds	r2, r7, #6
 80006c6:	8812      	ldrh	r2, [r2, #0]
 80006c8:	801a      	strh	r2, [r3, #0]
	y += _ystart;
 80006ca:	1d3b      	adds	r3, r7, #4
 80006cc:	1d3a      	adds	r2, r7, #4
 80006ce:	8812      	ldrh	r2, [r2, #0]
 80006d0:	801a      	strh	r2, [r3, #0]

	uint8_t temp[4];
	temp[0] = (x & (0xFF00)) >> 8;
 80006d2:	1dbb      	adds	r3, r7, #6
 80006d4:	881b      	ldrh	r3, [r3, #0]
 80006d6:	0a1b      	lsrs	r3, r3, #8
 80006d8:	b29b      	uxth	r3, r3
 80006da:	b2da      	uxtb	r2, r3
 80006dc:	210c      	movs	r1, #12
 80006de:	187b      	adds	r3, r7, r1
 80006e0:	701a      	strb	r2, [r3, #0]
	temp[1] = x & (0xFF);
 80006e2:	1dbb      	adds	r3, r7, #6
 80006e4:	881b      	ldrh	r3, [r3, #0]
 80006e6:	b2da      	uxtb	r2, r3
 80006e8:	187b      	adds	r3, r7, r1
 80006ea:	705a      	strb	r2, [r3, #1]
	temp[2] = ((x+w-1) & (0xFF00)) >> 8;
 80006ec:	1dbb      	adds	r3, r7, #6
 80006ee:	881a      	ldrh	r2, [r3, #0]
 80006f0:	1cbb      	adds	r3, r7, #2
 80006f2:	881b      	ldrh	r3, [r3, #0]
 80006f4:	18d3      	adds	r3, r2, r3
 80006f6:	3b01      	subs	r3, #1
 80006f8:	121b      	asrs	r3, r3, #8
 80006fa:	b2da      	uxtb	r2, r3
 80006fc:	187b      	adds	r3, r7, r1
 80006fe:	709a      	strb	r2, [r3, #2]
	temp[3] = (x+w-1) & (0xFF);
 8000700:	1dbb      	adds	r3, r7, #6
 8000702:	881b      	ldrh	r3, [r3, #0]
 8000704:	b2da      	uxtb	r2, r3
 8000706:	1cbb      	adds	r3, r7, #2
 8000708:	881b      	ldrh	r3, [r3, #0]
 800070a:	b2db      	uxtb	r3, r3
 800070c:	18d3      	adds	r3, r2, r3
 800070e:	b2db      	uxtb	r3, r3
 8000710:	3b01      	subs	r3, #1
 8000712:	b2da      	uxtb	r2, r3
 8000714:	187b      	adds	r3, r7, r1
 8000716:	70da      	strb	r2, [r3, #3]
	sendCommand(ST77XX_CASET, temp, 4, hspi);
 8000718:	6a3b      	ldr	r3, [r7, #32]
 800071a:	000c      	movs	r4, r1
 800071c:	1879      	adds	r1, r7, r1
 800071e:	2204      	movs	r2, #4
 8000720:	202a      	movs	r0, #42	; 0x2a
 8000722:	f7ff fea7 	bl	8000474 <sendCommand>

	temp[0] = (y & (0xFF00)) >> 8;
 8000726:	1d3b      	adds	r3, r7, #4
 8000728:	881b      	ldrh	r3, [r3, #0]
 800072a:	0a1b      	lsrs	r3, r3, #8
 800072c:	b29b      	uxth	r3, r3
 800072e:	b2da      	uxtb	r2, r3
 8000730:	0021      	movs	r1, r4
 8000732:	187b      	adds	r3, r7, r1
 8000734:	701a      	strb	r2, [r3, #0]
	temp[1] = y & (0xFF);
 8000736:	1d3b      	adds	r3, r7, #4
 8000738:	881b      	ldrh	r3, [r3, #0]
 800073a:	b2da      	uxtb	r2, r3
 800073c:	187b      	adds	r3, r7, r1
 800073e:	705a      	strb	r2, [r3, #1]
	temp[2] = ((y+h-1) & (0xFF00)) >> 8;
 8000740:	1d3b      	adds	r3, r7, #4
 8000742:	881a      	ldrh	r2, [r3, #0]
 8000744:	003b      	movs	r3, r7
 8000746:	881b      	ldrh	r3, [r3, #0]
 8000748:	18d3      	adds	r3, r2, r3
 800074a:	3b01      	subs	r3, #1
 800074c:	121b      	asrs	r3, r3, #8
 800074e:	b2da      	uxtb	r2, r3
 8000750:	187b      	adds	r3, r7, r1
 8000752:	709a      	strb	r2, [r3, #2]
	temp[3] = (y+h-1) & (0x00FF);
 8000754:	1d3b      	adds	r3, r7, #4
 8000756:	881b      	ldrh	r3, [r3, #0]
 8000758:	b2da      	uxtb	r2, r3
 800075a:	003b      	movs	r3, r7
 800075c:	881b      	ldrh	r3, [r3, #0]
 800075e:	b2db      	uxtb	r3, r3
 8000760:	18d3      	adds	r3, r2, r3
 8000762:	b2db      	uxtb	r3, r3
 8000764:	3b01      	subs	r3, #1
 8000766:	b2da      	uxtb	r2, r3
 8000768:	187b      	adds	r3, r7, r1
 800076a:	70da      	strb	r2, [r3, #3]
	sendCommand(ST77XX_RASET, temp, 4, hspi);
 800076c:	6a3b      	ldr	r3, [r7, #32]
 800076e:	1879      	adds	r1, r7, r1
 8000770:	2204      	movs	r2, #4
 8000772:	202b      	movs	r0, #43	; 0x2b
 8000774:	f7ff fe7e 	bl	8000474 <sendCommand>
}
 8000778:	46c0      	nop			; (mov r8, r8)
 800077a:	46bd      	mov	sp, r7
 800077c:	b004      	add	sp, #16
 800077e:	bdb0      	pop	{r4, r5, r7, pc}

08000780 <colorFixer>:
// 8-bit spi bus wants msb first; in array, lowest index is sent first
// because L4 is little-endian
//   for 16-bit value, it sends lower byte before upper byte
//   resulting in device thinking lower byte is upper byte
// this switches byte order around
uint16_t colorFixer(uint16_t color) {
 8000780:	b580      	push	{r7, lr}
 8000782:	b084      	sub	sp, #16
 8000784:	af00      	add	r7, sp, #0
 8000786:	0002      	movs	r2, r0
 8000788:	1dbb      	adds	r3, r7, #6
 800078a:	801a      	strh	r2, [r3, #0]
	uint8_t a = color & 0xFF;
 800078c:	210f      	movs	r1, #15
 800078e:	187b      	adds	r3, r7, r1
 8000790:	1dba      	adds	r2, r7, #6
 8000792:	8812      	ldrh	r2, [r2, #0]
 8000794:	701a      	strb	r2, [r3, #0]
	uint8_t b = (color & 0xFF00) >> 8;
 8000796:	1dbb      	adds	r3, r7, #6
 8000798:	881b      	ldrh	r3, [r3, #0]
 800079a:	0a1b      	lsrs	r3, r3, #8
 800079c:	b29a      	uxth	r2, r3
 800079e:	200e      	movs	r0, #14
 80007a0:	183b      	adds	r3, r7, r0
 80007a2:	701a      	strb	r2, [r3, #0]
	uint16_t ret = (a << 8) | b;
 80007a4:	187b      	adds	r3, r7, r1
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	021b      	lsls	r3, r3, #8
 80007aa:	b21a      	sxth	r2, r3
 80007ac:	183b      	adds	r3, r7, r0
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	b21b      	sxth	r3, r3
 80007b2:	4313      	orrs	r3, r2
 80007b4:	b21a      	sxth	r2, r3
 80007b6:	210c      	movs	r1, #12
 80007b8:	187b      	adds	r3, r7, r1
 80007ba:	801a      	strh	r2, [r3, #0]

	return ret;
 80007bc:	187b      	adds	r3, r7, r1
 80007be:	881b      	ldrh	r3, [r3, #0]
}
 80007c0:	0018      	movs	r0, r3
 80007c2:	46bd      	mov	sp, r7
 80007c4:	b004      	add	sp, #16
 80007c6:	bd80      	pop	{r7, pc}

080007c8 <drawHLine>:
	setAddrWindow(x, y, 1, 1, hspi);
	uint16_t tempColor = colorFixer(color);		// else we're using address of something passed by value
	sendCommand(ST77XX_RAMWR, &tempColor, 2, hspi);
}

void drawHLine(uint8_t x, uint8_t y, uint8_t size, uint16_t color, SPI_HandleTypeDef *hspi) {
 80007c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007ca:	b091      	sub	sp, #68	; 0x44
 80007cc:	af02      	add	r7, sp, #8
 80007ce:	000c      	movs	r4, r1
 80007d0:	0016      	movs	r6, r2
 80007d2:	0019      	movs	r1, r3
 80007d4:	2327      	movs	r3, #39	; 0x27
 80007d6:	18fa      	adds	r2, r7, r3
 80007d8:	1c03      	adds	r3, r0, #0
 80007da:	7013      	strb	r3, [r2, #0]
 80007dc:	2326      	movs	r3, #38	; 0x26
 80007de:	18fb      	adds	r3, r7, r3
 80007e0:	1c22      	adds	r2, r4, #0
 80007e2:	701a      	strb	r2, [r3, #0]
 80007e4:	2325      	movs	r3, #37	; 0x25
 80007e6:	18fb      	adds	r3, r7, r3
 80007e8:	1c32      	adds	r2, r6, #0
 80007ea:	701a      	strb	r2, [r3, #0]
 80007ec:	2322      	movs	r3, #34	; 0x22
 80007ee:	18fb      	adds	r3, r7, r3
 80007f0:	1c0a      	adds	r2, r1, #0
 80007f2:	801a      	strh	r2, [r3, #0]
 80007f4:	466b      	mov	r3, sp
 80007f6:	001e      	movs	r6, r3
	// bounds checking
	if (x < 0) x = 0;						// don't set x out of bounds
	if (x > WIDTH) x = WIDTH;
 80007f8:	2327      	movs	r3, #39	; 0x27
 80007fa:	18fb      	adds	r3, r7, r3
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	2b80      	cmp	r3, #128	; 0x80
 8000800:	d903      	bls.n	800080a <drawHLine+0x42>
 8000802:	2327      	movs	r3, #39	; 0x27
 8000804:	18fb      	adds	r3, r7, r3
 8000806:	2280      	movs	r2, #128	; 0x80
 8000808:	701a      	strb	r2, [r3, #0]
	if (x+size > WIDTH) size = WIDTH-x;		// don't set size so line draws out of bounds
 800080a:	2327      	movs	r3, #39	; 0x27
 800080c:	18fb      	adds	r3, r7, r3
 800080e:	781a      	ldrb	r2, [r3, #0]
 8000810:	2325      	movs	r3, #37	; 0x25
 8000812:	18fb      	adds	r3, r7, r3
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	18d3      	adds	r3, r2, r3
 8000818:	2b80      	cmp	r3, #128	; 0x80
 800081a:	dd08      	ble.n	800082e <drawHLine+0x66>
 800081c:	2325      	movs	r3, #37	; 0x25
 800081e:	18fb      	adds	r3, r7, r3
 8000820:	2227      	movs	r2, #39	; 0x27
 8000822:	18ba      	adds	r2, r7, r2
 8000824:	7812      	ldrb	r2, [r2, #0]
 8000826:	2180      	movs	r1, #128	; 0x80
 8000828:	4249      	negs	r1, r1
 800082a:	1a8a      	subs	r2, r1, r2
 800082c:	701a      	strb	r2, [r3, #0]
	if (x+size < 0) size = 0-x;
	if ((y > HEIGHT) || (y < 0)) return;	// don't draw if y is out of bounds
 800082e:	2326      	movs	r3, #38	; 0x26
 8000830:	18fb      	adds	r3, r7, r3
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	2ba0      	cmp	r3, #160	; 0xa0
 8000836:	d868      	bhi.n	800090a <drawHLine+0x142>

	setAddrWindow(x, y, size, 1, hspi);
 8000838:	2327      	movs	r3, #39	; 0x27
 800083a:	18fb      	adds	r3, r7, r3
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	b298      	uxth	r0, r3
 8000840:	2326      	movs	r3, #38	; 0x26
 8000842:	18fb      	adds	r3, r7, r3
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	b299      	uxth	r1, r3
 8000848:	2325      	movs	r3, #37	; 0x25
 800084a:	18fb      	adds	r3, r7, r3
 800084c:	781b      	ldrb	r3, [r3, #0]
 800084e:	b29a      	uxth	r2, r3
 8000850:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000852:	9300      	str	r3, [sp, #0]
 8000854:	2301      	movs	r3, #1
 8000856:	f7ff ff21 	bl	800069c <setAddrWindow>
	uint16_t colors[size];
 800085a:	2325      	movs	r3, #37	; 0x25
 800085c:	18fb      	adds	r3, r7, r3
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	001a      	movs	r2, r3
 8000862:	3a01      	subs	r2, #1
 8000864:	633a      	str	r2, [r7, #48]	; 0x30
 8000866:	60bb      	str	r3, [r7, #8]
 8000868:	2200      	movs	r2, #0
 800086a:	60fa      	str	r2, [r7, #12]
 800086c:	68b8      	ldr	r0, [r7, #8]
 800086e:	68f9      	ldr	r1, [r7, #12]
 8000870:	0002      	movs	r2, r0
 8000872:	0f12      	lsrs	r2, r2, #28
 8000874:	000c      	movs	r4, r1
 8000876:	0124      	lsls	r4, r4, #4
 8000878:	61fc      	str	r4, [r7, #28]
 800087a:	69fc      	ldr	r4, [r7, #28]
 800087c:	4314      	orrs	r4, r2
 800087e:	61fc      	str	r4, [r7, #28]
 8000880:	0002      	movs	r2, r0
 8000882:	0112      	lsls	r2, r2, #4
 8000884:	61ba      	str	r2, [r7, #24]
 8000886:	603b      	str	r3, [r7, #0]
 8000888:	2200      	movs	r2, #0
 800088a:	607a      	str	r2, [r7, #4]
 800088c:	6838      	ldr	r0, [r7, #0]
 800088e:	6879      	ldr	r1, [r7, #4]
 8000890:	0002      	movs	r2, r0
 8000892:	0f12      	lsrs	r2, r2, #28
 8000894:	000c      	movs	r4, r1
 8000896:	0124      	lsls	r4, r4, #4
 8000898:	617c      	str	r4, [r7, #20]
 800089a:	697c      	ldr	r4, [r7, #20]
 800089c:	4314      	orrs	r4, r2
 800089e:	617c      	str	r4, [r7, #20]
 80008a0:	0002      	movs	r2, r0
 80008a2:	0112      	lsls	r2, r2, #4
 80008a4:	613a      	str	r2, [r7, #16]
 80008a6:	005b      	lsls	r3, r3, #1
 80008a8:	3301      	adds	r3, #1
 80008aa:	3307      	adds	r3, #7
 80008ac:	08db      	lsrs	r3, r3, #3
 80008ae:	00db      	lsls	r3, r3, #3
 80008b0:	466a      	mov	r2, sp
 80008b2:	1ad3      	subs	r3, r2, r3
 80008b4:	469d      	mov	sp, r3
 80008b6:	ab02      	add	r3, sp, #8
 80008b8:	3301      	adds	r3, #1
 80008ba:	085b      	lsrs	r3, r3, #1
 80008bc:	005b      	lsls	r3, r3, #1
 80008be:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (int i = 0; i < size; i++) {		// better way to make array of 1 color; SPI without moving address of sent?
 80008c0:	2300      	movs	r3, #0
 80008c2:	637b      	str	r3, [r7, #52]	; 0x34
 80008c4:	e00e      	b.n	80008e4 <drawHLine+0x11c>
		colors[i] = colorFixer(color);
 80008c6:	2322      	movs	r3, #34	; 0x22
 80008c8:	18fb      	adds	r3, r7, r3
 80008ca:	881b      	ldrh	r3, [r3, #0]
 80008cc:	0018      	movs	r0, r3
 80008ce:	f7ff ff57 	bl	8000780 <colorFixer>
 80008d2:	0003      	movs	r3, r0
 80008d4:	0019      	movs	r1, r3
 80008d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80008da:	0052      	lsls	r2, r2, #1
 80008dc:	52d1      	strh	r1, [r2, r3]
	for (int i = 0; i < size; i++) {		// better way to make array of 1 color; SPI without moving address of sent?
 80008de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008e0:	3301      	adds	r3, #1
 80008e2:	637b      	str	r3, [r7, #52]	; 0x34
 80008e4:	2325      	movs	r3, #37	; 0x25
 80008e6:	18fb      	adds	r3, r7, r3
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80008ec:	429a      	cmp	r2, r3
 80008ee:	dbea      	blt.n	80008c6 <drawHLine+0xfe>
//		colors[i] = color;
	}

	sendCommand(ST77XX_RAMWR, colors, size*2, hspi);
 80008f0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80008f2:	2325      	movs	r3, #37	; 0x25
 80008f4:	18fb      	adds	r3, r7, r3
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	b29b      	uxth	r3, r3
 80008fa:	18db      	adds	r3, r3, r3
 80008fc:	b29a      	uxth	r2, r3
 80008fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000900:	202c      	movs	r0, #44	; 0x2c
 8000902:	f7ff fdb7 	bl	8000474 <sendCommand>
 8000906:	46b5      	mov	sp, r6
 8000908:	e001      	b.n	800090e <drawHLine+0x146>
	if ((y > HEIGHT) || (y < 0)) return;	// don't draw if y is out of bounds
 800090a:	46c0      	nop			; (mov r8, r8)
 800090c:	46b5      	mov	sp, r6
}
 800090e:	46bd      	mov	sp, r7
 8000910:	b00f      	add	sp, #60	; 0x3c
 8000912:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000914 <drawVLine>:

void drawVLine(uint8_t x, uint8_t y, uint8_t size, uint16_t color, SPI_HandleTypeDef *hspi) {
 8000914:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000916:	b091      	sub	sp, #68	; 0x44
 8000918:	af02      	add	r7, sp, #8
 800091a:	000c      	movs	r4, r1
 800091c:	0016      	movs	r6, r2
 800091e:	0019      	movs	r1, r3
 8000920:	2327      	movs	r3, #39	; 0x27
 8000922:	18fa      	adds	r2, r7, r3
 8000924:	1c03      	adds	r3, r0, #0
 8000926:	7013      	strb	r3, [r2, #0]
 8000928:	2326      	movs	r3, #38	; 0x26
 800092a:	18fb      	adds	r3, r7, r3
 800092c:	1c22      	adds	r2, r4, #0
 800092e:	701a      	strb	r2, [r3, #0]
 8000930:	2325      	movs	r3, #37	; 0x25
 8000932:	18fb      	adds	r3, r7, r3
 8000934:	1c32      	adds	r2, r6, #0
 8000936:	701a      	strb	r2, [r3, #0]
 8000938:	2322      	movs	r3, #34	; 0x22
 800093a:	18fb      	adds	r3, r7, r3
 800093c:	1c0a      	adds	r2, r1, #0
 800093e:	801a      	strh	r2, [r3, #0]
 8000940:	466b      	mov	r3, sp
 8000942:	001e      	movs	r6, r3
	// bounds checking
	if (y < 0) y = 0;						// don't set x out of bounds
	if (y > HEIGHT) y = HEIGHT;
 8000944:	2326      	movs	r3, #38	; 0x26
 8000946:	18fb      	adds	r3, r7, r3
 8000948:	781b      	ldrb	r3, [r3, #0]
 800094a:	2ba0      	cmp	r3, #160	; 0xa0
 800094c:	d903      	bls.n	8000956 <drawVLine+0x42>
 800094e:	2326      	movs	r3, #38	; 0x26
 8000950:	18fb      	adds	r3, r7, r3
 8000952:	22a0      	movs	r2, #160	; 0xa0
 8000954:	701a      	strb	r2, [r3, #0]
	if (y+size > HEIGHT) size = HEIGHT-y;	// don't set size so line draws out of bounds
 8000956:	2326      	movs	r3, #38	; 0x26
 8000958:	18fb      	adds	r3, r7, r3
 800095a:	781a      	ldrb	r2, [r3, #0]
 800095c:	2325      	movs	r3, #37	; 0x25
 800095e:	18fb      	adds	r3, r7, r3
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	18d3      	adds	r3, r2, r3
 8000964:	2ba0      	cmp	r3, #160	; 0xa0
 8000966:	dd08      	ble.n	800097a <drawVLine+0x66>
 8000968:	2325      	movs	r3, #37	; 0x25
 800096a:	18fb      	adds	r3, r7, r3
 800096c:	2226      	movs	r2, #38	; 0x26
 800096e:	18ba      	adds	r2, r7, r2
 8000970:	7812      	ldrb	r2, [r2, #0]
 8000972:	2160      	movs	r1, #96	; 0x60
 8000974:	4249      	negs	r1, r1
 8000976:	1a8a      	subs	r2, r1, r2
 8000978:	701a      	strb	r2, [r3, #0]
	if (y+size < 0) size = 0-y;
	if ((x > WIDTH) || (x < 0)) return;		// don't draw if x is out of bounds
 800097a:	2327      	movs	r3, #39	; 0x27
 800097c:	18fb      	adds	r3, r7, r3
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	2b80      	cmp	r3, #128	; 0x80
 8000982:	d869      	bhi.n	8000a58 <drawVLine+0x144>

	setAddrWindow(x, y, 1, size, hspi);
 8000984:	2327      	movs	r3, #39	; 0x27
 8000986:	18fb      	adds	r3, r7, r3
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	b298      	uxth	r0, r3
 800098c:	2326      	movs	r3, #38	; 0x26
 800098e:	18fb      	adds	r3, r7, r3
 8000990:	781b      	ldrb	r3, [r3, #0]
 8000992:	b299      	uxth	r1, r3
 8000994:	2325      	movs	r3, #37	; 0x25
 8000996:	18fb      	adds	r3, r7, r3
 8000998:	781b      	ldrb	r3, [r3, #0]
 800099a:	b29a      	uxth	r2, r3
 800099c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800099e:	9300      	str	r3, [sp, #0]
 80009a0:	0013      	movs	r3, r2
 80009a2:	2201      	movs	r2, #1
 80009a4:	f7ff fe7a 	bl	800069c <setAddrWindow>
	uint16_t colors[size];
 80009a8:	2325      	movs	r3, #37	; 0x25
 80009aa:	18fb      	adds	r3, r7, r3
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	001a      	movs	r2, r3
 80009b0:	3a01      	subs	r2, #1
 80009b2:	633a      	str	r2, [r7, #48]	; 0x30
 80009b4:	60bb      	str	r3, [r7, #8]
 80009b6:	2200      	movs	r2, #0
 80009b8:	60fa      	str	r2, [r7, #12]
 80009ba:	68b8      	ldr	r0, [r7, #8]
 80009bc:	68f9      	ldr	r1, [r7, #12]
 80009be:	0002      	movs	r2, r0
 80009c0:	0f12      	lsrs	r2, r2, #28
 80009c2:	000c      	movs	r4, r1
 80009c4:	0124      	lsls	r4, r4, #4
 80009c6:	61fc      	str	r4, [r7, #28]
 80009c8:	69fc      	ldr	r4, [r7, #28]
 80009ca:	4314      	orrs	r4, r2
 80009cc:	61fc      	str	r4, [r7, #28]
 80009ce:	0002      	movs	r2, r0
 80009d0:	0112      	lsls	r2, r2, #4
 80009d2:	61ba      	str	r2, [r7, #24]
 80009d4:	603b      	str	r3, [r7, #0]
 80009d6:	2200      	movs	r2, #0
 80009d8:	607a      	str	r2, [r7, #4]
 80009da:	6838      	ldr	r0, [r7, #0]
 80009dc:	6879      	ldr	r1, [r7, #4]
 80009de:	0002      	movs	r2, r0
 80009e0:	0f12      	lsrs	r2, r2, #28
 80009e2:	000c      	movs	r4, r1
 80009e4:	0124      	lsls	r4, r4, #4
 80009e6:	617c      	str	r4, [r7, #20]
 80009e8:	697c      	ldr	r4, [r7, #20]
 80009ea:	4314      	orrs	r4, r2
 80009ec:	617c      	str	r4, [r7, #20]
 80009ee:	0002      	movs	r2, r0
 80009f0:	0112      	lsls	r2, r2, #4
 80009f2:	613a      	str	r2, [r7, #16]
 80009f4:	005b      	lsls	r3, r3, #1
 80009f6:	3301      	adds	r3, #1
 80009f8:	3307      	adds	r3, #7
 80009fa:	08db      	lsrs	r3, r3, #3
 80009fc:	00db      	lsls	r3, r3, #3
 80009fe:	466a      	mov	r2, sp
 8000a00:	1ad3      	subs	r3, r2, r3
 8000a02:	469d      	mov	sp, r3
 8000a04:	ab02      	add	r3, sp, #8
 8000a06:	3301      	adds	r3, #1
 8000a08:	085b      	lsrs	r3, r3, #1
 8000a0a:	005b      	lsls	r3, r3, #1
 8000a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (int i = 0; i < size; i++) {		// there has to be a better way to make array of 1 color
 8000a0e:	2300      	movs	r3, #0
 8000a10:	637b      	str	r3, [r7, #52]	; 0x34
 8000a12:	e00e      	b.n	8000a32 <drawVLine+0x11e>
											// SPI without moving address of sent buffer?
		colors[i] = colorFixer(color);
 8000a14:	2322      	movs	r3, #34	; 0x22
 8000a16:	18fb      	adds	r3, r7, r3
 8000a18:	881b      	ldrh	r3, [r3, #0]
 8000a1a:	0018      	movs	r0, r3
 8000a1c:	f7ff feb0 	bl	8000780 <colorFixer>
 8000a20:	0003      	movs	r3, r0
 8000a22:	0019      	movs	r1, r3
 8000a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000a28:	0052      	lsls	r2, r2, #1
 8000a2a:	52d1      	strh	r1, [r2, r3]
	for (int i = 0; i < size; i++) {		// there has to be a better way to make array of 1 color
 8000a2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a2e:	3301      	adds	r3, #1
 8000a30:	637b      	str	r3, [r7, #52]	; 0x34
 8000a32:	2325      	movs	r3, #37	; 0x25
 8000a34:	18fb      	adds	r3, r7, r3
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000a3a:	429a      	cmp	r2, r3
 8000a3c:	dbea      	blt.n	8000a14 <drawVLine+0x100>
	}

	sendCommand(ST77XX_RAMWR, colors, size*2, hspi);
 8000a3e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000a40:	2325      	movs	r3, #37	; 0x25
 8000a42:	18fb      	adds	r3, r7, r3
 8000a44:	781b      	ldrb	r3, [r3, #0]
 8000a46:	b29b      	uxth	r3, r3
 8000a48:	18db      	adds	r3, r3, r3
 8000a4a:	b29a      	uxth	r2, r3
 8000a4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000a4e:	202c      	movs	r0, #44	; 0x2c
 8000a50:	f7ff fd10 	bl	8000474 <sendCommand>
 8000a54:	46b5      	mov	sp, r6
 8000a56:	e001      	b.n	8000a5c <drawVLine+0x148>
	if ((x > WIDTH) || (x < 0)) return;		// don't draw if x is out of bounds
 8000a58:	46c0      	nop			; (mov r8, r8)
 8000a5a:	46b5      	mov	sp, r6
}
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	b00f      	add	sp, #60	; 0x3c
 8000a60:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000a62 <drawBuffer>:

void drawBuffer(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t *buffer, uint16_t bufferSize, SPI_HandleTypeDef *hspi) {
 8000a62:	b5b0      	push	{r4, r5, r7, lr}
 8000a64:	b084      	sub	sp, #16
 8000a66:	af02      	add	r7, sp, #8
 8000a68:	0005      	movs	r5, r0
 8000a6a:	000c      	movs	r4, r1
 8000a6c:	0010      	movs	r0, r2
 8000a6e:	0019      	movs	r1, r3
 8000a70:	1dfb      	adds	r3, r7, #7
 8000a72:	1c2a      	adds	r2, r5, #0
 8000a74:	701a      	strb	r2, [r3, #0]
 8000a76:	1dbb      	adds	r3, r7, #6
 8000a78:	1c22      	adds	r2, r4, #0
 8000a7a:	701a      	strb	r2, [r3, #0]
 8000a7c:	1d7b      	adds	r3, r7, #5
 8000a7e:	1c02      	adds	r2, r0, #0
 8000a80:	701a      	strb	r2, [r3, #0]
 8000a82:	1d3b      	adds	r3, r7, #4
 8000a84:	1c0a      	adds	r2, r1, #0
 8000a86:	701a      	strb	r2, [r3, #0]
	// just dont call this with out-of-range vals pls.
	if (x+w > WIDTH || y+h > HEIGHT) return;
 8000a88:	1dfb      	adds	r3, r7, #7
 8000a8a:	781a      	ldrb	r2, [r3, #0]
 8000a8c:	1d7b      	adds	r3, r7, #5
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	18d3      	adds	r3, r2, r3
 8000a92:	2b80      	cmp	r3, #128	; 0x80
 8000a94:	dc29      	bgt.n	8000aea <drawBuffer+0x88>
 8000a96:	1dbb      	adds	r3, r7, #6
 8000a98:	781a      	ldrb	r2, [r3, #0]
 8000a9a:	1d3b      	adds	r3, r7, #4
 8000a9c:	781b      	ldrb	r3, [r3, #0]
 8000a9e:	18d3      	adds	r3, r2, r3
 8000aa0:	2ba0      	cmp	r3, #160	; 0xa0
 8000aa2:	dc22      	bgt.n	8000aea <drawBuffer+0x88>

	// also don't call this with buffer size too big bc there's not enough ram for all pixels of display
	if (bufferSize > 10240) return;
 8000aa4:	231c      	movs	r3, #28
 8000aa6:	18fb      	adds	r3, r7, r3
 8000aa8:	881a      	ldrh	r2, [r3, #0]
 8000aaa:	23a0      	movs	r3, #160	; 0xa0
 8000aac:	019b      	lsls	r3, r3, #6
 8000aae:	429a      	cmp	r2, r3
 8000ab0:	d81d      	bhi.n	8000aee <drawBuffer+0x8c>

	setAddrWindow(x, y, w, h, hspi);
 8000ab2:	1dfb      	adds	r3, r7, #7
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	b298      	uxth	r0, r3
 8000ab8:	1dbb      	adds	r3, r7, #6
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	b299      	uxth	r1, r3
 8000abe:	1d7b      	adds	r3, r7, #5
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	b29a      	uxth	r2, r3
 8000ac4:	1d3b      	adds	r3, r7, #4
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	b29c      	uxth	r4, r3
 8000aca:	6a3b      	ldr	r3, [r7, #32]
 8000acc:	9300      	str	r3, [sp, #0]
 8000ace:	0023      	movs	r3, r4
 8000ad0:	f7ff fde4 	bl	800069c <setAddrWindow>
	sendCommand(ST77XX_RAMWR, buffer, bufferSize*2, hspi);
 8000ad4:	231c      	movs	r3, #28
 8000ad6:	18fb      	adds	r3, r7, r3
 8000ad8:	881b      	ldrh	r3, [r3, #0]
 8000ada:	18db      	adds	r3, r3, r3
 8000adc:	b29a      	uxth	r2, r3
 8000ade:	6a3b      	ldr	r3, [r7, #32]
 8000ae0:	69b9      	ldr	r1, [r7, #24]
 8000ae2:	202c      	movs	r0, #44	; 0x2c
 8000ae4:	f7ff fcc6 	bl	8000474 <sendCommand>
 8000ae8:	e002      	b.n	8000af0 <drawBuffer+0x8e>
	if (x+w > WIDTH || y+h > HEIGHT) return;
 8000aea:	46c0      	nop			; (mov r8, r8)
 8000aec:	e000      	b.n	8000af0 <drawBuffer+0x8e>
	if (bufferSize > 10240) return;
 8000aee:	46c0      	nop			; (mov r8, r8)
}
 8000af0:	46bd      	mov	sp, r7
 8000af2:	b002      	add	sp, #8
 8000af4:	bdb0      	pop	{r4, r5, r7, pc}

08000af6 <drawRect>:
			err -= 1;
		}
	}
}

void drawRect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint16_t color, SPI_HandleTypeDef *hspi) {
 8000af6:	b5b0      	push	{r4, r5, r7, lr}
 8000af8:	b084      	sub	sp, #16
 8000afa:	af02      	add	r7, sp, #8
 8000afc:	0005      	movs	r5, r0
 8000afe:	000c      	movs	r4, r1
 8000b00:	0010      	movs	r0, r2
 8000b02:	0019      	movs	r1, r3
 8000b04:	1dfb      	adds	r3, r7, #7
 8000b06:	1c2a      	adds	r2, r5, #0
 8000b08:	701a      	strb	r2, [r3, #0]
 8000b0a:	1dbb      	adds	r3, r7, #6
 8000b0c:	1c22      	adds	r2, r4, #0
 8000b0e:	701a      	strb	r2, [r3, #0]
 8000b10:	1d7b      	adds	r3, r7, #5
 8000b12:	1c02      	adds	r2, r0, #0
 8000b14:	701a      	strb	r2, [r3, #0]
 8000b16:	1d3b      	adds	r3, r7, #4
 8000b18:	1c0a      	adds	r2, r1, #0
 8000b1a:	701a      	strb	r2, [r3, #0]
	drawHLine(x, y, w, color, hspi);
 8000b1c:	2518      	movs	r5, #24
 8000b1e:	197b      	adds	r3, r7, r5
 8000b20:	881c      	ldrh	r4, [r3, #0]
 8000b22:	1d7b      	adds	r3, r7, #5
 8000b24:	781a      	ldrb	r2, [r3, #0]
 8000b26:	1dbb      	adds	r3, r7, #6
 8000b28:	7819      	ldrb	r1, [r3, #0]
 8000b2a:	1dfb      	adds	r3, r7, #7
 8000b2c:	7818      	ldrb	r0, [r3, #0]
 8000b2e:	69fb      	ldr	r3, [r7, #28]
 8000b30:	9300      	str	r3, [sp, #0]
 8000b32:	0023      	movs	r3, r4
 8000b34:	f7ff fe48 	bl	80007c8 <drawHLine>
	drawHLine(x, y+h-1, w, color, hspi);
 8000b38:	1dba      	adds	r2, r7, #6
 8000b3a:	1d3b      	adds	r3, r7, #4
 8000b3c:	7812      	ldrb	r2, [r2, #0]
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	18d3      	adds	r3, r2, r3
 8000b42:	b2db      	uxtb	r3, r3
 8000b44:	3b01      	subs	r3, #1
 8000b46:	b2d9      	uxtb	r1, r3
 8000b48:	197b      	adds	r3, r7, r5
 8000b4a:	881c      	ldrh	r4, [r3, #0]
 8000b4c:	1d7b      	adds	r3, r7, #5
 8000b4e:	781a      	ldrb	r2, [r3, #0]
 8000b50:	1dfb      	adds	r3, r7, #7
 8000b52:	7818      	ldrb	r0, [r3, #0]
 8000b54:	69fb      	ldr	r3, [r7, #28]
 8000b56:	9300      	str	r3, [sp, #0]
 8000b58:	0023      	movs	r3, r4
 8000b5a:	f7ff fe35 	bl	80007c8 <drawHLine>
	drawVLine(x, y, h, color, hspi);
 8000b5e:	197b      	adds	r3, r7, r5
 8000b60:	881c      	ldrh	r4, [r3, #0]
 8000b62:	1d3b      	adds	r3, r7, #4
 8000b64:	781a      	ldrb	r2, [r3, #0]
 8000b66:	1dbb      	adds	r3, r7, #6
 8000b68:	7819      	ldrb	r1, [r3, #0]
 8000b6a:	1dfb      	adds	r3, r7, #7
 8000b6c:	7818      	ldrb	r0, [r3, #0]
 8000b6e:	69fb      	ldr	r3, [r7, #28]
 8000b70:	9300      	str	r3, [sp, #0]
 8000b72:	0023      	movs	r3, r4
 8000b74:	f7ff fece 	bl	8000914 <drawVLine>
	drawVLine(x+w-1, y, h, color, hspi);
 8000b78:	1dfa      	adds	r2, r7, #7
 8000b7a:	1d7b      	adds	r3, r7, #5
 8000b7c:	7812      	ldrb	r2, [r2, #0]
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	18d3      	adds	r3, r2, r3
 8000b82:	b2db      	uxtb	r3, r3
 8000b84:	3b01      	subs	r3, #1
 8000b86:	b2d8      	uxtb	r0, r3
 8000b88:	197b      	adds	r3, r7, r5
 8000b8a:	881c      	ldrh	r4, [r3, #0]
 8000b8c:	1d3b      	adds	r3, r7, #4
 8000b8e:	781a      	ldrb	r2, [r3, #0]
 8000b90:	1dbb      	adds	r3, r7, #6
 8000b92:	7819      	ldrb	r1, [r3, #0]
 8000b94:	69fb      	ldr	r3, [r7, #28]
 8000b96:	9300      	str	r3, [sp, #0]
 8000b98:	0023      	movs	r3, r4
 8000b9a:	f7ff febb 	bl	8000914 <drawVLine>
}
 8000b9e:	46c0      	nop			; (mov r8, r8)
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	b002      	add	sp, #8
 8000ba4:	bdb0      	pop	{r4, r5, r7, pc}

08000ba6 <fillRect>:

void fillRect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint16_t color, SPI_HandleTypeDef *hspi) {
 8000ba6:	b5b0      	push	{r4, r5, r7, lr}
 8000ba8:	b086      	sub	sp, #24
 8000baa:	af02      	add	r7, sp, #8
 8000bac:	0005      	movs	r5, r0
 8000bae:	000c      	movs	r4, r1
 8000bb0:	0010      	movs	r0, r2
 8000bb2:	0019      	movs	r1, r3
 8000bb4:	1dfb      	adds	r3, r7, #7
 8000bb6:	1c2a      	adds	r2, r5, #0
 8000bb8:	701a      	strb	r2, [r3, #0]
 8000bba:	1dbb      	adds	r3, r7, #6
 8000bbc:	1c22      	adds	r2, r4, #0
 8000bbe:	701a      	strb	r2, [r3, #0]
 8000bc0:	1d7b      	adds	r3, r7, #5
 8000bc2:	1c02      	adds	r2, r0, #0
 8000bc4:	701a      	strb	r2, [r3, #0]
 8000bc6:	1d3b      	adds	r3, r7, #4
 8000bc8:	1c0a      	adds	r2, r1, #0
 8000bca:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < h; i++) {
 8000bcc:	2300      	movs	r3, #0
 8000bce:	60fb      	str	r3, [r7, #12]
 8000bd0:	e014      	b.n	8000bfc <fillRect+0x56>
		drawHLine(x, y+i, w, color, hspi);
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	b2da      	uxtb	r2, r3
 8000bd6:	1dbb      	adds	r3, r7, #6
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	18d3      	adds	r3, r2, r3
 8000bdc:	b2d9      	uxtb	r1, r3
 8000bde:	2320      	movs	r3, #32
 8000be0:	18fb      	adds	r3, r7, r3
 8000be2:	881c      	ldrh	r4, [r3, #0]
 8000be4:	1d7b      	adds	r3, r7, #5
 8000be6:	781a      	ldrb	r2, [r3, #0]
 8000be8:	1dfb      	adds	r3, r7, #7
 8000bea:	7818      	ldrb	r0, [r3, #0]
 8000bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bee:	9300      	str	r3, [sp, #0]
 8000bf0:	0023      	movs	r3, r4
 8000bf2:	f7ff fde9 	bl	80007c8 <drawHLine>
	for (int i = 0; i < h; i++) {
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	3301      	adds	r3, #1
 8000bfa:	60fb      	str	r3, [r7, #12]
 8000bfc:	1d3b      	adds	r3, r7, #4
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	68fa      	ldr	r2, [r7, #12]
 8000c02:	429a      	cmp	r2, r3
 8000c04:	dbe5      	blt.n	8000bd2 <fillRect+0x2c>
	}
}
 8000c06:	46c0      	nop			; (mov r8, r8)
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	b004      	add	sp, #16
 8000c0c:	bdb0      	pop	{r4, r5, r7, pc}

08000c0e <fillScreen>:

void fillScreen(uint16_t color, SPI_HandleTypeDef *hspi) {
 8000c0e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c10:	b091      	sub	sp, #68	; 0x44
 8000c12:	af04      	add	r7, sp, #16
 8000c14:	61b9      	str	r1, [r7, #24]
 8000c16:	221e      	movs	r2, #30
 8000c18:	18ba      	adds	r2, r7, r2
 8000c1a:	1c01      	adds	r1, r0, #0
 8000c1c:	8011      	strh	r1, [r2, #0]
 8000c1e:	466a      	mov	r2, sp
 8000c20:	607a      	str	r2, [r7, #4]
	uint16_t bufferSize = WIDTH*HEIGHT/4;
 8000c22:	2012      	movs	r0, #18
 8000c24:	2218      	movs	r2, #24
 8000c26:	18b9      	adds	r1, r7, r2
 8000c28:	180a      	adds	r2, r1, r0
 8000c2a:	21a0      	movs	r1, #160	; 0xa0
 8000c2c:	0149      	lsls	r1, r1, #5
 8000c2e:	8011      	strh	r1, [r2, #0]
	uint16_t buffer[bufferSize];
 8000c30:	2218      	movs	r2, #24
 8000c32:	18ba      	adds	r2, r7, r2
 8000c34:	1812      	adds	r2, r2, r0
 8000c36:	8812      	ldrh	r2, [r2, #0]
 8000c38:	0011      	movs	r1, r2
 8000c3a:	3901      	subs	r1, #1
 8000c3c:	6279      	str	r1, [r7, #36]	; 0x24
 8000c3e:	613a      	str	r2, [r7, #16]
 8000c40:	2100      	movs	r1, #0
 8000c42:	6179      	str	r1, [r7, #20]
 8000c44:	6939      	ldr	r1, [r7, #16]
 8000c46:	0f09      	lsrs	r1, r1, #28
 8000c48:	6978      	ldr	r0, [r7, #20]
 8000c4a:	0106      	lsls	r6, r0, #4
 8000c4c:	430e      	orrs	r6, r1
 8000c4e:	6939      	ldr	r1, [r7, #16]
 8000c50:	010d      	lsls	r5, r1, #4
 8000c52:	60ba      	str	r2, [r7, #8]
 8000c54:	2100      	movs	r1, #0
 8000c56:	60f9      	str	r1, [r7, #12]
 8000c58:	68bd      	ldr	r5, [r7, #8]
 8000c5a:	68fe      	ldr	r6, [r7, #12]
 8000c5c:	0029      	movs	r1, r5
 8000c5e:	0f09      	lsrs	r1, r1, #28
 8000c60:	0030      	movs	r0, r6
 8000c62:	0104      	lsls	r4, r0, #4
 8000c64:	430c      	orrs	r4, r1
 8000c66:	0029      	movs	r1, r5
 8000c68:	010b      	lsls	r3, r1, #4
 8000c6a:	0013      	movs	r3, r2
 8000c6c:	005b      	lsls	r3, r3, #1
 8000c6e:	3301      	adds	r3, #1
 8000c70:	3307      	adds	r3, #7
 8000c72:	08db      	lsrs	r3, r3, #3
 8000c74:	00db      	lsls	r3, r3, #3
 8000c76:	466a      	mov	r2, sp
 8000c78:	1ad3      	subs	r3, r2, r3
 8000c7a:	469d      	mov	sp, r3
 8000c7c:	ab04      	add	r3, sp, #16
 8000c7e:	3301      	adds	r3, #1
 8000c80:	085b      	lsrs	r3, r3, #1
 8000c82:	005b      	lsls	r3, r3, #1
 8000c84:	623b      	str	r3, [r7, #32]
	int i;
	for (i = 0; i < bufferSize; i++) {
 8000c86:	2300      	movs	r3, #0
 8000c88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000c8a:	e00e      	b.n	8000caa <fillScreen+0x9c>
		buffer[i] = colorFixer(color);
 8000c8c:	231e      	movs	r3, #30
 8000c8e:	18fb      	adds	r3, r7, r3
 8000c90:	881b      	ldrh	r3, [r3, #0]
 8000c92:	0018      	movs	r0, r3
 8000c94:	f7ff fd74 	bl	8000780 <colorFixer>
 8000c98:	0003      	movs	r3, r0
 8000c9a:	0019      	movs	r1, r3
 8000c9c:	6a3b      	ldr	r3, [r7, #32]
 8000c9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000ca0:	0052      	lsls	r2, r2, #1
 8000ca2:	52d1      	strh	r1, [r2, r3]
	for (i = 0; i < bufferSize; i++) {
 8000ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ca6:	3301      	adds	r3, #1
 8000ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000caa:	2312      	movs	r3, #18
 8000cac:	2218      	movs	r2, #24
 8000cae:	4694      	mov	ip, r2
 8000cb0:	44bc      	add	ip, r7
 8000cb2:	4463      	add	r3, ip
 8000cb4:	881b      	ldrh	r3, [r3, #0]
 8000cb6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000cb8:	429a      	cmp	r2, r3
 8000cba:	dbe7      	blt.n	8000c8c <fillScreen+0x7e>
	}

	for (i = 0; i < 4; i++) {
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000cc0:	e017      	b.n	8000cf2 <fillScreen+0xe4>
		drawBuffer(0, HEIGHT/4*i, WIDTH, HEIGHT/4, buffer, bufferSize, hspi);
 8000cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cc4:	b2db      	uxtb	r3, r3
 8000cc6:	2228      	movs	r2, #40	; 0x28
 8000cc8:	4353      	muls	r3, r2
 8000cca:	b2d9      	uxtb	r1, r3
 8000ccc:	6a3b      	ldr	r3, [r7, #32]
 8000cce:	69ba      	ldr	r2, [r7, #24]
 8000cd0:	9202      	str	r2, [sp, #8]
 8000cd2:	2212      	movs	r2, #18
 8000cd4:	2018      	movs	r0, #24
 8000cd6:	4684      	mov	ip, r0
 8000cd8:	44bc      	add	ip, r7
 8000cda:	4462      	add	r2, ip
 8000cdc:	8812      	ldrh	r2, [r2, #0]
 8000cde:	9201      	str	r2, [sp, #4]
 8000ce0:	9300      	str	r3, [sp, #0]
 8000ce2:	2328      	movs	r3, #40	; 0x28
 8000ce4:	2280      	movs	r2, #128	; 0x80
 8000ce6:	2000      	movs	r0, #0
 8000ce8:	f7ff febb 	bl	8000a62 <drawBuffer>
	for (i = 0; i < 4; i++) {
 8000cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cee:	3301      	adds	r3, #1
 8000cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cf4:	2b03      	cmp	r3, #3
 8000cf6:	dde4      	ble.n	8000cc2 <fillScreen+0xb4>
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	469d      	mov	sp, r3
	}
}
 8000cfc:	46c0      	nop			; (mov r8, r8)
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	b00d      	add	sp, #52	; 0x34
 8000d02:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000d04 <drawCenteredText>:
// ---- end of basic shapes and lines ----

// ---- start of more complicated graphics ----
void drawCenteredText(uint8_t x_center, uint8_t y, const char *str, SPI_HandleTypeDef *hspi) {
 8000d04:	b590      	push	{r4, r7, lr}
 8000d06:	b089      	sub	sp, #36	; 0x24
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	60ba      	str	r2, [r7, #8]
 8000d0c:	607b      	str	r3, [r7, #4]
 8000d0e:	230f      	movs	r3, #15
 8000d10:	18fb      	adds	r3, r7, r3
 8000d12:	1c02      	adds	r2, r0, #0
 8000d14:	701a      	strb	r2, [r3, #0]
 8000d16:	240e      	movs	r4, #14
 8000d18:	193b      	adds	r3, r7, r4
 8000d1a:	1c0a      	adds	r2, r1, #0
 8000d1c:	701a      	strb	r2, [r3, #0]
	uint8_t strSize = strlen(str);
 8000d1e:	68bb      	ldr	r3, [r7, #8]
 8000d20:	0018      	movs	r0, r3
 8000d22:	f7ff f9f1 	bl	8000108 <strlen>
 8000d26:	0002      	movs	r2, r0
 8000d28:	231f      	movs	r3, #31
 8000d2a:	18fb      	adds	r3, r7, r3
 8000d2c:	701a      	strb	r2, [r3, #0]
	// bounds checking. text box needed to print text should not end up out of bounds
	if (y+textSize*8 > HEIGHT) return;
 8000d2e:	193b      	adds	r3, r7, r4
 8000d30:	781a      	ldrb	r2, [r3, #0]
 8000d32:	4b24      	ldr	r3, [pc, #144]	; (8000dc4 <drawCenteredText+0xc0>)
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	00db      	lsls	r3, r3, #3
 8000d38:	18d3      	adds	r3, r2, r3
 8000d3a:	2ba0      	cmp	r3, #160	; 0xa0
 8000d3c:	dc3a      	bgt.n	8000db4 <drawCenteredText+0xb0>
	int leftBound = x_center-(strSize*textSize*6)/2;
 8000d3e:	230f      	movs	r3, #15
 8000d40:	18fb      	adds	r3, r7, r3
 8000d42:	7819      	ldrb	r1, [r3, #0]
 8000d44:	231f      	movs	r3, #31
 8000d46:	18fb      	adds	r3, r7, r3
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	4a1e      	ldr	r2, [pc, #120]	; (8000dc4 <drawCenteredText+0xc0>)
 8000d4c:	7812      	ldrb	r2, [r2, #0]
 8000d4e:	435a      	muls	r2, r3
 8000d50:	0013      	movs	r3, r2
 8000d52:	005b      	lsls	r3, r3, #1
 8000d54:	189b      	adds	r3, r3, r2
 8000d56:	005b      	lsls	r3, r3, #1
 8000d58:	d500      	bpl.n	8000d5c <drawCenteredText+0x58>
 8000d5a:	3301      	adds	r3, #1
 8000d5c:	105b      	asrs	r3, r3, #1
 8000d5e:	425b      	negs	r3, r3
 8000d60:	18cb      	adds	r3, r1, r3
 8000d62:	61bb      	str	r3, [r7, #24]
	int rightBound = x_center+(strSize*textSize*6)/2;
 8000d64:	230f      	movs	r3, #15
 8000d66:	18fb      	adds	r3, r7, r3
 8000d68:	7819      	ldrb	r1, [r3, #0]
 8000d6a:	231f      	movs	r3, #31
 8000d6c:	18fb      	adds	r3, r7, r3
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	4a14      	ldr	r2, [pc, #80]	; (8000dc4 <drawCenteredText+0xc0>)
 8000d72:	7812      	ldrb	r2, [r2, #0]
 8000d74:	435a      	muls	r2, r3
 8000d76:	0013      	movs	r3, r2
 8000d78:	005b      	lsls	r3, r3, #1
 8000d7a:	189b      	adds	r3, r3, r2
 8000d7c:	005b      	lsls	r3, r3, #1
 8000d7e:	d500      	bpl.n	8000d82 <drawCenteredText+0x7e>
 8000d80:	3301      	adds	r3, #1
 8000d82:	105b      	asrs	r3, r3, #1
 8000d84:	18cb      	adds	r3, r1, r3
 8000d86:	617b      	str	r3, [r7, #20]
	if (leftBound < 0) return;
 8000d88:	69bb      	ldr	r3, [r7, #24]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	db14      	blt.n	8000db8 <drawCenteredText+0xb4>
	if (rightBound > WIDTH) return;
 8000d8e:	697b      	ldr	r3, [r7, #20]
 8000d90:	2b80      	cmp	r3, #128	; 0x80
 8000d92:	dc13      	bgt.n	8000dbc <drawCenteredText+0xb8>

	setCursor(leftBound, y);
 8000d94:	69bb      	ldr	r3, [r7, #24]
 8000d96:	b2da      	uxtb	r2, r3
 8000d98:	230e      	movs	r3, #14
 8000d9a:	18fb      	adds	r3, r7, r3
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	0019      	movs	r1, r3
 8000da0:	0010      	movs	r0, r2
 8000da2:	f000 fc9f 	bl	80016e4 <setCursor>
	drawText(str, hspi);
 8000da6:	687a      	ldr	r2, [r7, #4]
 8000da8:	68bb      	ldr	r3, [r7, #8]
 8000daa:	0011      	movs	r1, r2
 8000dac:	0018      	movs	r0, r3
 8000dae:	f000 fc53 	bl	8001658 <drawText>
 8000db2:	e004      	b.n	8000dbe <drawCenteredText+0xba>
	if (y+textSize*8 > HEIGHT) return;
 8000db4:	46c0      	nop			; (mov r8, r8)
 8000db6:	e002      	b.n	8000dbe <drawCenteredText+0xba>
	if (leftBound < 0) return;
 8000db8:	46c0      	nop			; (mov r8, r8)
 8000dba:	e000      	b.n	8000dbe <drawCenteredText+0xba>
	if (rightBound > WIDTH) return;
 8000dbc:	46c0      	nop			; (mov r8, r8)
}
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	b009      	add	sp, #36	; 0x24
 8000dc2:	bd90      	pop	{r4, r7, pc}
 8000dc4:	200000ea 	.word	0x200000ea

08000dc8 <drawCenteredTextWithPadding>:

void drawCenteredTextWithPadding(uint8_t x_center, uint8_t y, uint8_t maxLength, const char *str, SPI_HandleTypeDef *hspi) {
 8000dc8:	b5b0      	push	{r4, r5, r7, lr}
 8000dca:	b088      	sub	sp, #32
 8000dcc:	af02      	add	r7, sp, #8
 8000dce:	0004      	movs	r4, r0
 8000dd0:	0008      	movs	r0, r1
 8000dd2:	0011      	movs	r1, r2
 8000dd4:	603b      	str	r3, [r7, #0]
 8000dd6:	1dfb      	adds	r3, r7, #7
 8000dd8:	1c22      	adds	r2, r4, #0
 8000dda:	701a      	strb	r2, [r3, #0]
 8000ddc:	1dbb      	adds	r3, r7, #6
 8000dde:	1c02      	adds	r2, r0, #0
 8000de0:	701a      	strb	r2, [r3, #0]
 8000de2:	1d7b      	adds	r3, r7, #5
 8000de4:	1c0a      	adds	r2, r1, #0
 8000de6:	701a      	strb	r2, [r3, #0]
	// bounds checking. text box needed to print text should not end up out of bounds
	if (y+textSize*8 > HEIGHT) return;
 8000de8:	1dbb      	adds	r3, r7, #6
 8000dea:	781a      	ldrb	r2, [r3, #0]
 8000dec:	4b60      	ldr	r3, [pc, #384]	; (8000f70 <drawCenteredTextWithPadding+0x1a8>)
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	00db      	lsls	r3, r3, #3
 8000df2:	18d3      	adds	r3, r2, r3
 8000df4:	2ba0      	cmp	r3, #160	; 0xa0
 8000df6:	dd00      	ble.n	8000dfa <drawCenteredTextWithPadding+0x32>
 8000df8:	e0af      	b.n	8000f5a <drawCenteredTextWithPadding+0x192>
	int leftBound = x_center-(maxLength*textSize*6)/2;
 8000dfa:	1dfb      	adds	r3, r7, #7
 8000dfc:	7819      	ldrb	r1, [r3, #0]
 8000dfe:	1d7b      	adds	r3, r7, #5
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	4a5b      	ldr	r2, [pc, #364]	; (8000f70 <drawCenteredTextWithPadding+0x1a8>)
 8000e04:	7812      	ldrb	r2, [r2, #0]
 8000e06:	435a      	muls	r2, r3
 8000e08:	0013      	movs	r3, r2
 8000e0a:	005b      	lsls	r3, r3, #1
 8000e0c:	189b      	adds	r3, r3, r2
 8000e0e:	005b      	lsls	r3, r3, #1
 8000e10:	d500      	bpl.n	8000e14 <drawCenteredTextWithPadding+0x4c>
 8000e12:	3301      	adds	r3, #1
 8000e14:	105b      	asrs	r3, r3, #1
 8000e16:	425b      	negs	r3, r3
 8000e18:	18cb      	adds	r3, r1, r3
 8000e1a:	617b      	str	r3, [r7, #20]
	int rightBound = x_center+(maxLength*textSize*6)/2;
 8000e1c:	1dfb      	adds	r3, r7, #7
 8000e1e:	7819      	ldrb	r1, [r3, #0]
 8000e20:	1d7b      	adds	r3, r7, #5
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	4a52      	ldr	r2, [pc, #328]	; (8000f70 <drawCenteredTextWithPadding+0x1a8>)
 8000e26:	7812      	ldrb	r2, [r2, #0]
 8000e28:	435a      	muls	r2, r3
 8000e2a:	0013      	movs	r3, r2
 8000e2c:	005b      	lsls	r3, r3, #1
 8000e2e:	189b      	adds	r3, r3, r2
 8000e30:	005b      	lsls	r3, r3, #1
 8000e32:	d500      	bpl.n	8000e36 <drawCenteredTextWithPadding+0x6e>
 8000e34:	3301      	adds	r3, #1
 8000e36:	105b      	asrs	r3, r3, #1
 8000e38:	18cb      	adds	r3, r1, r3
 8000e3a:	613b      	str	r3, [r7, #16]
	if (leftBound < 0) return;
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	da00      	bge.n	8000e44 <drawCenteredTextWithPadding+0x7c>
 8000e42:	e08c      	b.n	8000f5e <drawCenteredTextWithPadding+0x196>
	if (rightBound > WIDTH) return;
 8000e44:	693b      	ldr	r3, [r7, #16]
 8000e46:	2b80      	cmp	r3, #128	; 0x80
 8000e48:	dd00      	ble.n	8000e4c <drawCenteredTextWithPadding+0x84>
 8000e4a:	e08a      	b.n	8000f62 <drawCenteredTextWithPadding+0x19a>

	uint8_t strSize = strlen(str);
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	0018      	movs	r0, r3
 8000e50:	f7ff f95a 	bl	8000108 <strlen>
 8000e54:	0002      	movs	r2, r0
 8000e56:	210f      	movs	r1, #15
 8000e58:	187b      	adds	r3, r7, r1
 8000e5a:	701a      	strb	r2, [r3, #0]
	if (maxLength < strSize) return;		// size should not be greater than max
 8000e5c:	1d7a      	adds	r2, r7, #5
 8000e5e:	187b      	adds	r3, r7, r1
 8000e60:	7812      	ldrb	r2, [r2, #0]
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	429a      	cmp	r2, r3
 8000e66:	d200      	bcs.n	8000e6a <drawCenteredTextWithPadding+0xa2>
 8000e68:	e07d      	b.n	8000f66 <drawCenteredTextWithPadding+0x19e>

	// draw left and right padding
	uint8_t diff = maxLength-strSize;
 8000e6a:	240e      	movs	r4, #14
 8000e6c:	193b      	adds	r3, r7, r4
 8000e6e:	1d79      	adds	r1, r7, #5
 8000e70:	220f      	movs	r2, #15
 8000e72:	18ba      	adds	r2, r7, r2
 8000e74:	7809      	ldrb	r1, [r1, #0]
 8000e76:	7812      	ldrb	r2, [r2, #0]
 8000e78:	1a8a      	subs	r2, r1, r2
 8000e7a:	701a      	strb	r2, [r3, #0]
	fillRect(leftBound, y, diff*textSize*6/2, textSize*8, bg, hspi);		// math out of order to accomodate diff/2 being a non-int
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	b2d8      	uxtb	r0, r3
 8000e80:	193b      	adds	r3, r7, r4
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	4a3a      	ldr	r2, [pc, #232]	; (8000f70 <drawCenteredTextWithPadding+0x1a8>)
 8000e86:	7812      	ldrb	r2, [r2, #0]
 8000e88:	435a      	muls	r2, r3
 8000e8a:	0013      	movs	r3, r2
 8000e8c:	005b      	lsls	r3, r3, #1
 8000e8e:	189b      	adds	r3, r3, r2
 8000e90:	005b      	lsls	r3, r3, #1
 8000e92:	d500      	bpl.n	8000e96 <drawCenteredTextWithPadding+0xce>
 8000e94:	3301      	adds	r3, #1
 8000e96:	105b      	asrs	r3, r3, #1
 8000e98:	b2dc      	uxtb	r4, r3
 8000e9a:	4b35      	ldr	r3, [pc, #212]	; (8000f70 <drawCenteredTextWithPadding+0x1a8>)
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	00db      	lsls	r3, r3, #3
 8000ea0:	b2dd      	uxtb	r5, r3
 8000ea2:	4b34      	ldr	r3, [pc, #208]	; (8000f74 <drawCenteredTextWithPadding+0x1ac>)
 8000ea4:	881b      	ldrh	r3, [r3, #0]
 8000ea6:	1dba      	adds	r2, r7, #6
 8000ea8:	7811      	ldrb	r1, [r2, #0]
 8000eaa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000eac:	9201      	str	r2, [sp, #4]
 8000eae:	9300      	str	r3, [sp, #0]
 8000eb0:	002b      	movs	r3, r5
 8000eb2:	0022      	movs	r2, r4
 8000eb4:	f7ff fe77 	bl	8000ba6 <fillRect>
	fillRect(rightBound-diff*textSize*6/2, y, diff*textSize*6/2, textSize*8, bg, hspi);
 8000eb8:	230e      	movs	r3, #14
 8000eba:	18fb      	adds	r3, r7, r3
 8000ebc:	781b      	ldrb	r3, [r3, #0]
 8000ebe:	4a2c      	ldr	r2, [pc, #176]	; (8000f70 <drawCenteredTextWithPadding+0x1a8>)
 8000ec0:	7812      	ldrb	r2, [r2, #0]
 8000ec2:	435a      	muls	r2, r3
 8000ec4:	0013      	movs	r3, r2
 8000ec6:	005b      	lsls	r3, r3, #1
 8000ec8:	189b      	adds	r3, r3, r2
 8000eca:	005b      	lsls	r3, r3, #1
 8000ecc:	d500      	bpl.n	8000ed0 <drawCenteredTextWithPadding+0x108>
 8000ece:	3301      	adds	r3, #1
 8000ed0:	105b      	asrs	r3, r3, #1
 8000ed2:	425b      	negs	r3, r3
 8000ed4:	b2da      	uxtb	r2, r3
 8000ed6:	693b      	ldr	r3, [r7, #16]
 8000ed8:	b2db      	uxtb	r3, r3
 8000eda:	18d3      	adds	r3, r2, r3
 8000edc:	b2d8      	uxtb	r0, r3
 8000ede:	230e      	movs	r3, #14
 8000ee0:	18fb      	adds	r3, r7, r3
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	4a22      	ldr	r2, [pc, #136]	; (8000f70 <drawCenteredTextWithPadding+0x1a8>)
 8000ee6:	7812      	ldrb	r2, [r2, #0]
 8000ee8:	435a      	muls	r2, r3
 8000eea:	0013      	movs	r3, r2
 8000eec:	005b      	lsls	r3, r3, #1
 8000eee:	189b      	adds	r3, r3, r2
 8000ef0:	005b      	lsls	r3, r3, #1
 8000ef2:	d500      	bpl.n	8000ef6 <drawCenteredTextWithPadding+0x12e>
 8000ef4:	3301      	adds	r3, #1
 8000ef6:	105b      	asrs	r3, r3, #1
 8000ef8:	b2dc      	uxtb	r4, r3
 8000efa:	4b1d      	ldr	r3, [pc, #116]	; (8000f70 <drawCenteredTextWithPadding+0x1a8>)
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	00db      	lsls	r3, r3, #3
 8000f00:	b2dd      	uxtb	r5, r3
 8000f02:	4b1c      	ldr	r3, [pc, #112]	; (8000f74 <drawCenteredTextWithPadding+0x1ac>)
 8000f04:	881b      	ldrh	r3, [r3, #0]
 8000f06:	1dba      	adds	r2, r7, #6
 8000f08:	7811      	ldrb	r1, [r2, #0]
 8000f0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000f0c:	9201      	str	r2, [sp, #4]
 8000f0e:	9300      	str	r3, [sp, #0]
 8000f10:	002b      	movs	r3, r5
 8000f12:	0022      	movs	r2, r4
 8000f14:	f7ff fe47 	bl	8000ba6 <fillRect>

	int textLeftBound = x_center-(strSize*textSize*6)/2;
 8000f18:	1dfb      	adds	r3, r7, #7
 8000f1a:	7819      	ldrb	r1, [r3, #0]
 8000f1c:	230f      	movs	r3, #15
 8000f1e:	18fb      	adds	r3, r7, r3
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	4a13      	ldr	r2, [pc, #76]	; (8000f70 <drawCenteredTextWithPadding+0x1a8>)
 8000f24:	7812      	ldrb	r2, [r2, #0]
 8000f26:	435a      	muls	r2, r3
 8000f28:	0013      	movs	r3, r2
 8000f2a:	005b      	lsls	r3, r3, #1
 8000f2c:	189b      	adds	r3, r3, r2
 8000f2e:	005b      	lsls	r3, r3, #1
 8000f30:	d500      	bpl.n	8000f34 <drawCenteredTextWithPadding+0x16c>
 8000f32:	3301      	adds	r3, #1
 8000f34:	105b      	asrs	r3, r3, #1
 8000f36:	425b      	negs	r3, r3
 8000f38:	18cb      	adds	r3, r1, r3
 8000f3a:	60bb      	str	r3, [r7, #8]
	setCursor(textLeftBound, y);
 8000f3c:	68bb      	ldr	r3, [r7, #8]
 8000f3e:	b2da      	uxtb	r2, r3
 8000f40:	1dbb      	adds	r3, r7, #6
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	0019      	movs	r1, r3
 8000f46:	0010      	movs	r0, r2
 8000f48:	f000 fbcc 	bl	80016e4 <setCursor>
	drawText(str, hspi);
 8000f4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	0011      	movs	r1, r2
 8000f52:	0018      	movs	r0, r3
 8000f54:	f000 fb80 	bl	8001658 <drawText>
 8000f58:	e006      	b.n	8000f68 <drawCenteredTextWithPadding+0x1a0>
	if (y+textSize*8 > HEIGHT) return;
 8000f5a:	46c0      	nop			; (mov r8, r8)
 8000f5c:	e004      	b.n	8000f68 <drawCenteredTextWithPadding+0x1a0>
	if (leftBound < 0) return;
 8000f5e:	46c0      	nop			; (mov r8, r8)
 8000f60:	e002      	b.n	8000f68 <drawCenteredTextWithPadding+0x1a0>
	if (rightBound > WIDTH) return;
 8000f62:	46c0      	nop			; (mov r8, r8)
 8000f64:	e000      	b.n	8000f68 <drawCenteredTextWithPadding+0x1a0>
	if (maxLength < strSize) return;		// size should not be greater than max
 8000f66:	46c0      	nop			; (mov r8, r8)
}
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	b006      	add	sp, #24
 8000f6c:	bdb0      	pop	{r4, r5, r7, pc}
 8000f6e:	46c0      	nop			; (mov r8, r8)
 8000f70:	200000ea 	.word	0x200000ea
 8000f74:	200000ee 	.word	0x200000ee

08000f78 <clearTextLine>:

void clearTextLine(uint8_t y, SPI_HandleTypeDef *hspi) {
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b084      	sub	sp, #16
 8000f7c:	af02      	add	r7, sp, #8
 8000f7e:	0002      	movs	r2, r0
 8000f80:	6039      	str	r1, [r7, #0]
 8000f82:	1dfb      	adds	r3, r7, #7
 8000f84:	701a      	strb	r2, [r3, #0]
	fillRect(0, y, WIDTH, textSize*8, bg, hspi);
 8000f86:	4b0a      	ldr	r3, [pc, #40]	; (8000fb0 <clearTextLine+0x38>)
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	00db      	lsls	r3, r3, #3
 8000f8c:	b2d8      	uxtb	r0, r3
 8000f8e:	4b09      	ldr	r3, [pc, #36]	; (8000fb4 <clearTextLine+0x3c>)
 8000f90:	881b      	ldrh	r3, [r3, #0]
 8000f92:	1dfa      	adds	r2, r7, #7
 8000f94:	7811      	ldrb	r1, [r2, #0]
 8000f96:	683a      	ldr	r2, [r7, #0]
 8000f98:	9201      	str	r2, [sp, #4]
 8000f9a:	9300      	str	r3, [sp, #0]
 8000f9c:	0003      	movs	r3, r0
 8000f9e:	2280      	movs	r2, #128	; 0x80
 8000fa0:	2000      	movs	r0, #0
 8000fa2:	f7ff fe00 	bl	8000ba6 <fillRect>
}
 8000fa6:	46c0      	nop			; (mov r8, r8)
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	b002      	add	sp, #8
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	46c0      	nop			; (mov r8, r8)
 8000fb0:	200000ea 	.word	0x200000ea
 8000fb4:	200000ee 	.word	0x200000ee

08000fb8 <drawChar>:
// ---- end of more complicated graphics ----

// ---- text functions ----
void drawChar(uint8_t ch, SPI_HandleTypeDef *hspi) {
 8000fb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fba:	b095      	sub	sp, #84	; 0x54
 8000fbc:	af04      	add	r7, sp, #16
 8000fbe:	61b9      	str	r1, [r7, #24]
 8000fc0:	221f      	movs	r2, #31
 8000fc2:	18ba      	adds	r2, r7, r2
 8000fc4:	1c01      	adds	r1, r0, #0
 8000fc6:	7011      	strb	r1, [r2, #0]
 8000fc8:	466a      	mov	r2, sp
 8000fca:	607a      	str	r2, [r7, #4]
	uint16_t bufferSize = 6*8*textSize*textSize;
 8000fcc:	4abe      	ldr	r2, [pc, #760]	; (80012c8 <drawChar+0x310>)
 8000fce:	7812      	ldrb	r2, [r2, #0]
 8000fd0:	b292      	uxth	r2, r2
 8000fd2:	49bd      	ldr	r1, [pc, #756]	; (80012c8 <drawChar+0x310>)
 8000fd4:	7809      	ldrb	r1, [r1, #0]
 8000fd6:	b289      	uxth	r1, r1
 8000fd8:	434a      	muls	r2, r1
 8000fda:	b291      	uxth	r1, r2
 8000fdc:	221a      	movs	r2, #26
 8000fde:	2018      	movs	r0, #24
 8000fe0:	4684      	mov	ip, r0
 8000fe2:	44bc      	add	ip, r7
 8000fe4:	4462      	add	r2, ip
 8000fe6:	2030      	movs	r0, #48	; 0x30
 8000fe8:	4341      	muls	r1, r0
 8000fea:	8011      	strh	r1, [r2, #0]
	uint16_t buffer[bufferSize];
 8000fec:	221a      	movs	r2, #26
 8000fee:	2118      	movs	r1, #24
 8000ff0:	468c      	mov	ip, r1
 8000ff2:	44bc      	add	ip, r7
 8000ff4:	4462      	add	r2, ip
 8000ff6:	8812      	ldrh	r2, [r2, #0]
 8000ff8:	0011      	movs	r1, r2
 8000ffa:	3901      	subs	r1, #1
 8000ffc:	62f9      	str	r1, [r7, #44]	; 0x2c
 8000ffe:	613a      	str	r2, [r7, #16]
 8001000:	2100      	movs	r1, #0
 8001002:	6179      	str	r1, [r7, #20]
 8001004:	6939      	ldr	r1, [r7, #16]
 8001006:	0f09      	lsrs	r1, r1, #28
 8001008:	6978      	ldr	r0, [r7, #20]
 800100a:	0106      	lsls	r6, r0, #4
 800100c:	430e      	orrs	r6, r1
 800100e:	6939      	ldr	r1, [r7, #16]
 8001010:	010d      	lsls	r5, r1, #4
 8001012:	60ba      	str	r2, [r7, #8]
 8001014:	2100      	movs	r1, #0
 8001016:	60f9      	str	r1, [r7, #12]
 8001018:	68bd      	ldr	r5, [r7, #8]
 800101a:	68fe      	ldr	r6, [r7, #12]
 800101c:	0029      	movs	r1, r5
 800101e:	0f09      	lsrs	r1, r1, #28
 8001020:	0030      	movs	r0, r6
 8001022:	0104      	lsls	r4, r0, #4
 8001024:	430c      	orrs	r4, r1
 8001026:	0029      	movs	r1, r5
 8001028:	010b      	lsls	r3, r1, #4
 800102a:	0013      	movs	r3, r2
 800102c:	005b      	lsls	r3, r3, #1
 800102e:	3301      	adds	r3, #1
 8001030:	3307      	adds	r3, #7
 8001032:	08db      	lsrs	r3, r3, #3
 8001034:	00db      	lsls	r3, r3, #3
 8001036:	466a      	mov	r2, sp
 8001038:	1ad3      	subs	r3, r2, r3
 800103a:	469d      	mov	sp, r3
 800103c:	ab04      	add	r3, sp, #16
 800103e:	3301      	adds	r3, #1
 8001040:	085b      	lsrs	r3, r3, #1
 8001042:	005b      	lsls	r3, r3, #1
 8001044:	62bb      	str	r3, [r7, #40]	; 0x28
	int16_t rowOffset, address;

	for (int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
 8001046:	2325      	movs	r3, #37	; 0x25
 8001048:	2218      	movs	r2, #24
 800104a:	4694      	mov	ip, r2
 800104c:	44bc      	add	ip, r7
 800104e:	4463      	add	r3, ip
 8001050:	2200      	movs	r2, #0
 8001052:	701a      	strb	r2, [r3, #0]
 8001054:	e1f4      	b.n	8001440 <drawChar+0x488>
		uint8_t line = font[ch*5+i];
 8001056:	231f      	movs	r3, #31
 8001058:	18fb      	adds	r3, r7, r3
 800105a:	781a      	ldrb	r2, [r3, #0]
 800105c:	0013      	movs	r3, r2
 800105e:	009b      	lsls	r3, r3, #2
 8001060:	189a      	adds	r2, r3, r2
 8001062:	2325      	movs	r3, #37	; 0x25
 8001064:	2118      	movs	r1, #24
 8001066:	468c      	mov	ip, r1
 8001068:	44bc      	add	ip, r7
 800106a:	4463      	add	r3, ip
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	b25b      	sxtb	r3, r3
 8001070:	18d2      	adds	r2, r2, r3
 8001072:	2324      	movs	r3, #36	; 0x24
 8001074:	2118      	movs	r1, #24
 8001076:	468c      	mov	ip, r1
 8001078:	44bc      	add	ip, r7
 800107a:	4463      	add	r3, ip
 800107c:	4993      	ldr	r1, [pc, #588]	; (80012cc <drawChar+0x314>)
 800107e:	5c8a      	ldrb	r2, [r1, r2]
 8001080:	701a      	strb	r2, [r3, #0]
		for (int8_t j=0; j<8; j++, line >>= 1) {
 8001082:	2323      	movs	r3, #35	; 0x23
 8001084:	2218      	movs	r2, #24
 8001086:	4694      	mov	ip, r2
 8001088:	44bc      	add	ip, r7
 800108a:	4463      	add	r3, ip
 800108c:	2200      	movs	r2, #0
 800108e:	701a      	strb	r2, [r3, #0]
 8001090:	e1c0      	b.n	8001414 <drawChar+0x45c>
			if (line & 1) {
 8001092:	2324      	movs	r3, #36	; 0x24
 8001094:	2218      	movs	r2, #24
 8001096:	4694      	mov	ip, r2
 8001098:	44bc      	add	ip, r7
 800109a:	4463      	add	r3, ip
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	2201      	movs	r2, #1
 80010a0:	4013      	ands	r3, r2
 80010a2:	d100      	bne.n	80010a6 <drawChar+0xee>
 80010a4:	e0c8      	b.n	8001238 <drawChar+0x280>
				if (textSize == 1) {
 80010a6:	4b88      	ldr	r3, [pc, #544]	; (80012c8 <drawChar+0x310>)
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	2b01      	cmp	r3, #1
 80010ac:	d11c      	bne.n	80010e8 <drawChar+0x130>
					buffer[i+j*6] = colorFixer(textColor);
 80010ae:	4b88      	ldr	r3, [pc, #544]	; (80012d0 <drawChar+0x318>)
 80010b0:	8818      	ldrh	r0, [r3, #0]
 80010b2:	2325      	movs	r3, #37	; 0x25
 80010b4:	2218      	movs	r2, #24
 80010b6:	4694      	mov	ip, r2
 80010b8:	44bc      	add	ip, r7
 80010ba:	4463      	add	r3, ip
 80010bc:	2100      	movs	r1, #0
 80010be:	5659      	ldrsb	r1, [r3, r1]
 80010c0:	2323      	movs	r3, #35	; 0x23
 80010c2:	2218      	movs	r2, #24
 80010c4:	4694      	mov	ip, r2
 80010c6:	44bc      	add	ip, r7
 80010c8:	4463      	add	r3, ip
 80010ca:	2200      	movs	r2, #0
 80010cc:	569a      	ldrsb	r2, [r3, r2]
 80010ce:	0013      	movs	r3, r2
 80010d0:	005b      	lsls	r3, r3, #1
 80010d2:	189b      	adds	r3, r3, r2
 80010d4:	005b      	lsls	r3, r3, #1
 80010d6:	18cc      	adds	r4, r1, r3
 80010d8:	f7ff fb52 	bl	8000780 <colorFixer>
 80010dc:	0003      	movs	r3, r0
 80010de:	0019      	movs	r1, r3
 80010e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010e2:	0062      	lsls	r2, r4, #1
 80010e4:	52d1      	strh	r1, [r2, r3]
 80010e6:	e17f      	b.n	80013e8 <drawChar+0x430>
				}
				else {
					for (int8_t k = 0; k < textSize; k++) {
 80010e8:	2322      	movs	r3, #34	; 0x22
 80010ea:	2218      	movs	r2, #24
 80010ec:	4694      	mov	ip, r2
 80010ee:	44bc      	add	ip, r7
 80010f0:	4463      	add	r3, ip
 80010f2:	2200      	movs	r2, #0
 80010f4:	701a      	strb	r2, [r3, #0]
 80010f6:	e092      	b.n	800121e <drawChar+0x266>
						rowOffset = textSize*6;
 80010f8:	4b73      	ldr	r3, [pc, #460]	; (80012c8 <drawChar+0x310>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	b29b      	uxth	r3, r3
 80010fe:	1c1a      	adds	r2, r3, #0
 8001100:	1c13      	adds	r3, r2, #0
 8001102:	18db      	adds	r3, r3, r3
 8001104:	189b      	adds	r3, r3, r2
 8001106:	18db      	adds	r3, r3, r3
 8001108:	b29a      	uxth	r2, r3
 800110a:	2326      	movs	r3, #38	; 0x26
 800110c:	2118      	movs	r1, #24
 800110e:	468c      	mov	ip, r1
 8001110:	44bc      	add	ip, r7
 8001112:	4463      	add	r3, ip
 8001114:	801a      	strh	r2, [r3, #0]
						for (int8_t l = 0; l < textSize; l++) {
 8001116:	2321      	movs	r3, #33	; 0x21
 8001118:	2218      	movs	r2, #24
 800111a:	4694      	mov	ip, r2
 800111c:	44bc      	add	ip, r7
 800111e:	4463      	add	r3, ip
 8001120:	2200      	movs	r2, #0
 8001122:	701a      	strb	r2, [r3, #0]
 8001124:	e064      	b.n	80011f0 <drawChar+0x238>
							address = (textSize*textSize*j*6)+(i*textSize);
 8001126:	4b68      	ldr	r3, [pc, #416]	; (80012c8 <drawChar+0x310>)
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	b29b      	uxth	r3, r3
 800112c:	4a66      	ldr	r2, [pc, #408]	; (80012c8 <drawChar+0x310>)
 800112e:	7812      	ldrb	r2, [r2, #0]
 8001130:	b292      	uxth	r2, r2
 8001132:	4353      	muls	r3, r2
 8001134:	b29b      	uxth	r3, r3
 8001136:	2223      	movs	r2, #35	; 0x23
 8001138:	2118      	movs	r1, #24
 800113a:	468c      	mov	ip, r1
 800113c:	44bc      	add	ip, r7
 800113e:	4462      	add	r2, ip
 8001140:	7812      	ldrb	r2, [r2, #0]
 8001142:	b252      	sxtb	r2, r2
 8001144:	b292      	uxth	r2, r2
 8001146:	4353      	muls	r3, r2
 8001148:	b29b      	uxth	r3, r3
 800114a:	1c1a      	adds	r2, r3, #0
 800114c:	1c13      	adds	r3, r2, #0
 800114e:	18db      	adds	r3, r3, r3
 8001150:	189b      	adds	r3, r3, r2
 8001152:	18db      	adds	r3, r3, r3
 8001154:	b29a      	uxth	r2, r3
 8001156:	2325      	movs	r3, #37	; 0x25
 8001158:	2118      	movs	r1, #24
 800115a:	468c      	mov	ip, r1
 800115c:	44bc      	add	ip, r7
 800115e:	4463      	add	r3, ip
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	b25b      	sxtb	r3, r3
 8001164:	b29b      	uxth	r3, r3
 8001166:	4958      	ldr	r1, [pc, #352]	; (80012c8 <drawChar+0x310>)
 8001168:	7809      	ldrb	r1, [r1, #0]
 800116a:	b289      	uxth	r1, r1
 800116c:	434b      	muls	r3, r1
 800116e:	b29b      	uxth	r3, r3
 8001170:	18d3      	adds	r3, r2, r3
 8001172:	b29a      	uxth	r2, r3
 8001174:	210e      	movs	r1, #14
 8001176:	2018      	movs	r0, #24
 8001178:	183b      	adds	r3, r7, r0
 800117a:	185b      	adds	r3, r3, r1
 800117c:	801a      	strh	r2, [r3, #0]
							address += rowOffset*k+l;
 800117e:	2322      	movs	r3, #34	; 0x22
 8001180:	2218      	movs	r2, #24
 8001182:	4694      	mov	ip, r2
 8001184:	44bc      	add	ip, r7
 8001186:	4463      	add	r3, ip
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	b25b      	sxtb	r3, r3
 800118c:	b29b      	uxth	r3, r3
 800118e:	2226      	movs	r2, #38	; 0x26
 8001190:	2418      	movs	r4, #24
 8001192:	46a4      	mov	ip, r4
 8001194:	44bc      	add	ip, r7
 8001196:	4462      	add	r2, ip
 8001198:	8812      	ldrh	r2, [r2, #0]
 800119a:	4353      	muls	r3, r2
 800119c:	b29a      	uxth	r2, r3
 800119e:	2521      	movs	r5, #33	; 0x21
 80011a0:	183b      	adds	r3, r7, r0
 80011a2:	195b      	adds	r3, r3, r5
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	b25b      	sxtb	r3, r3
 80011a8:	b29b      	uxth	r3, r3
 80011aa:	18d3      	adds	r3, r2, r3
 80011ac:	b29a      	uxth	r2, r3
 80011ae:	183b      	adds	r3, r7, r0
 80011b0:	185b      	adds	r3, r3, r1
 80011b2:	881b      	ldrh	r3, [r3, #0]
 80011b4:	18d3      	adds	r3, r2, r3
 80011b6:	b29a      	uxth	r2, r3
 80011b8:	183b      	adds	r3, r7, r0
 80011ba:	185b      	adds	r3, r3, r1
 80011bc:	801a      	strh	r2, [r3, #0]
							buffer[address] = colorFixer(textColor);
 80011be:	4b44      	ldr	r3, [pc, #272]	; (80012d0 <drawChar+0x318>)
 80011c0:	881a      	ldrh	r2, [r3, #0]
 80011c2:	0006      	movs	r6, r0
 80011c4:	183b      	adds	r3, r7, r0
 80011c6:	185b      	adds	r3, r3, r1
 80011c8:	2400      	movs	r4, #0
 80011ca:	5f1c      	ldrsh	r4, [r3, r4]
 80011cc:	0010      	movs	r0, r2
 80011ce:	f7ff fad7 	bl	8000780 <colorFixer>
 80011d2:	0003      	movs	r3, r0
 80011d4:	0019      	movs	r1, r3
 80011d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011d8:	0062      	lsls	r2, r4, #1
 80011da:	52d1      	strh	r1, [r2, r3]
						for (int8_t l = 0; l < textSize; l++) {
 80011dc:	19bb      	adds	r3, r7, r6
 80011de:	195b      	adds	r3, r3, r5
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	b25b      	sxtb	r3, r3
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	3301      	adds	r3, #1
 80011e8:	b2da      	uxtb	r2, r3
 80011ea:	19bb      	adds	r3, r7, r6
 80011ec:	195b      	adds	r3, r3, r5
 80011ee:	701a      	strb	r2, [r3, #0]
 80011f0:	2321      	movs	r3, #33	; 0x21
 80011f2:	2218      	movs	r2, #24
 80011f4:	4694      	mov	ip, r2
 80011f6:	44bc      	add	ip, r7
 80011f8:	4463      	add	r3, ip
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	b25b      	sxtb	r3, r3
 80011fe:	4a32      	ldr	r2, [pc, #200]	; (80012c8 <drawChar+0x310>)
 8001200:	7812      	ldrb	r2, [r2, #0]
 8001202:	4293      	cmp	r3, r2
 8001204:	db8f      	blt.n	8001126 <drawChar+0x16e>
					for (int8_t k = 0; k < textSize; k++) {
 8001206:	2122      	movs	r1, #34	; 0x22
 8001208:	2018      	movs	r0, #24
 800120a:	183b      	adds	r3, r7, r0
 800120c:	185b      	adds	r3, r3, r1
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	b25b      	sxtb	r3, r3
 8001212:	b2db      	uxtb	r3, r3
 8001214:	3301      	adds	r3, #1
 8001216:	b2da      	uxtb	r2, r3
 8001218:	183b      	adds	r3, r7, r0
 800121a:	185b      	adds	r3, r3, r1
 800121c:	701a      	strb	r2, [r3, #0]
 800121e:	2322      	movs	r3, #34	; 0x22
 8001220:	2218      	movs	r2, #24
 8001222:	4694      	mov	ip, r2
 8001224:	44bc      	add	ip, r7
 8001226:	4463      	add	r3, ip
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	b25b      	sxtb	r3, r3
 800122c:	4a26      	ldr	r2, [pc, #152]	; (80012c8 <drawChar+0x310>)
 800122e:	7812      	ldrb	r2, [r2, #0]
 8001230:	4293      	cmp	r3, r2
 8001232:	da00      	bge.n	8001236 <drawChar+0x27e>
 8001234:	e760      	b.n	80010f8 <drawChar+0x140>
 8001236:	e0d7      	b.n	80013e8 <drawChar+0x430>
						}
					}
//					fillRect(cursorX+i*textSize, cursorY+j*textSize, textSize, textSize, textColor, hspi);
				}
			} else if (bg != textColor) {
 8001238:	4b26      	ldr	r3, [pc, #152]	; (80012d4 <drawChar+0x31c>)
 800123a:	881a      	ldrh	r2, [r3, #0]
 800123c:	4b24      	ldr	r3, [pc, #144]	; (80012d0 <drawChar+0x318>)
 800123e:	881b      	ldrh	r3, [r3, #0]
 8001240:	429a      	cmp	r2, r3
 8001242:	d100      	bne.n	8001246 <drawChar+0x28e>
 8001244:	e0d0      	b.n	80013e8 <drawChar+0x430>
				if (textSize == 1) {
 8001246:	4b20      	ldr	r3, [pc, #128]	; (80012c8 <drawChar+0x310>)
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	2b01      	cmp	r3, #1
 800124c:	d11c      	bne.n	8001288 <drawChar+0x2d0>
					buffer[i+j*6] = colorFixer(bg);
 800124e:	4b21      	ldr	r3, [pc, #132]	; (80012d4 <drawChar+0x31c>)
 8001250:	8818      	ldrh	r0, [r3, #0]
 8001252:	2325      	movs	r3, #37	; 0x25
 8001254:	2218      	movs	r2, #24
 8001256:	4694      	mov	ip, r2
 8001258:	44bc      	add	ip, r7
 800125a:	4463      	add	r3, ip
 800125c:	2100      	movs	r1, #0
 800125e:	5659      	ldrsb	r1, [r3, r1]
 8001260:	2323      	movs	r3, #35	; 0x23
 8001262:	2218      	movs	r2, #24
 8001264:	4694      	mov	ip, r2
 8001266:	44bc      	add	ip, r7
 8001268:	4463      	add	r3, ip
 800126a:	2200      	movs	r2, #0
 800126c:	569a      	ldrsb	r2, [r3, r2]
 800126e:	0013      	movs	r3, r2
 8001270:	005b      	lsls	r3, r3, #1
 8001272:	189b      	adds	r3, r3, r2
 8001274:	005b      	lsls	r3, r3, #1
 8001276:	18cc      	adds	r4, r1, r3
 8001278:	f7ff fa82 	bl	8000780 <colorFixer>
 800127c:	0003      	movs	r3, r0
 800127e:	0019      	movs	r1, r3
 8001280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001282:	0062      	lsls	r2, r4, #1
 8001284:	52d1      	strh	r1, [r2, r3]
 8001286:	e0af      	b.n	80013e8 <drawChar+0x430>
				}
				else {
					for (int8_t k = 0; k < textSize; k++) {
 8001288:	2320      	movs	r3, #32
 800128a:	2218      	movs	r2, #24
 800128c:	4694      	mov	ip, r2
 800128e:	44bc      	add	ip, r7
 8001290:	4463      	add	r3, ip
 8001292:	2200      	movs	r2, #0
 8001294:	701a      	strb	r2, [r3, #0]
 8001296:	e09b      	b.n	80013d0 <drawChar+0x418>
						rowOffset = textSize*6;
 8001298:	4b0b      	ldr	r3, [pc, #44]	; (80012c8 <drawChar+0x310>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	b29b      	uxth	r3, r3
 800129e:	1c1a      	adds	r2, r3, #0
 80012a0:	1c13      	adds	r3, r2, #0
 80012a2:	18db      	adds	r3, r3, r3
 80012a4:	189b      	adds	r3, r3, r2
 80012a6:	18db      	adds	r3, r3, r3
 80012a8:	b29a      	uxth	r2, r3
 80012aa:	2326      	movs	r3, #38	; 0x26
 80012ac:	2118      	movs	r1, #24
 80012ae:	468c      	mov	ip, r1
 80012b0:	44bc      	add	ip, r7
 80012b2:	4463      	add	r3, ip
 80012b4:	801a      	strh	r2, [r3, #0]
						for (int8_t l = 0; l < textSize; l++) {
 80012b6:	231f      	movs	r3, #31
 80012b8:	2218      	movs	r2, #24
 80012ba:	4694      	mov	ip, r2
 80012bc:	44bc      	add	ip, r7
 80012be:	4463      	add	r3, ip
 80012c0:	2200      	movs	r2, #0
 80012c2:	701a      	strb	r2, [r3, #0]
 80012c4:	e06d      	b.n	80013a2 <drawChar+0x3ea>
 80012c6:	46c0      	nop			; (mov r8, r8)
 80012c8:	200000ea 	.word	0x200000ea
 80012cc:	0800928c 	.word	0x0800928c
 80012d0:	200000ec 	.word	0x200000ec
 80012d4:	200000ee 	.word	0x200000ee
							address = (textSize*textSize*j*6)+(i*textSize);
 80012d8:	4bda      	ldr	r3, [pc, #872]	; (8001644 <drawChar+0x68c>)
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	b29b      	uxth	r3, r3
 80012de:	4ad9      	ldr	r2, [pc, #868]	; (8001644 <drawChar+0x68c>)
 80012e0:	7812      	ldrb	r2, [r2, #0]
 80012e2:	b292      	uxth	r2, r2
 80012e4:	4353      	muls	r3, r2
 80012e6:	b29b      	uxth	r3, r3
 80012e8:	2223      	movs	r2, #35	; 0x23
 80012ea:	2118      	movs	r1, #24
 80012ec:	468c      	mov	ip, r1
 80012ee:	44bc      	add	ip, r7
 80012f0:	4462      	add	r2, ip
 80012f2:	7812      	ldrb	r2, [r2, #0]
 80012f4:	b252      	sxtb	r2, r2
 80012f6:	b292      	uxth	r2, r2
 80012f8:	4353      	muls	r3, r2
 80012fa:	b29b      	uxth	r3, r3
 80012fc:	1c1a      	adds	r2, r3, #0
 80012fe:	1c13      	adds	r3, r2, #0
 8001300:	18db      	adds	r3, r3, r3
 8001302:	189b      	adds	r3, r3, r2
 8001304:	18db      	adds	r3, r3, r3
 8001306:	b29a      	uxth	r2, r3
 8001308:	2325      	movs	r3, #37	; 0x25
 800130a:	2118      	movs	r1, #24
 800130c:	468c      	mov	ip, r1
 800130e:	44bc      	add	ip, r7
 8001310:	4463      	add	r3, ip
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	b25b      	sxtb	r3, r3
 8001316:	b29b      	uxth	r3, r3
 8001318:	49ca      	ldr	r1, [pc, #808]	; (8001644 <drawChar+0x68c>)
 800131a:	7809      	ldrb	r1, [r1, #0]
 800131c:	b289      	uxth	r1, r1
 800131e:	434b      	muls	r3, r1
 8001320:	b29b      	uxth	r3, r3
 8001322:	18d3      	adds	r3, r2, r3
 8001324:	b29a      	uxth	r2, r3
 8001326:	210e      	movs	r1, #14
 8001328:	2018      	movs	r0, #24
 800132a:	183b      	adds	r3, r7, r0
 800132c:	185b      	adds	r3, r3, r1
 800132e:	801a      	strh	r2, [r3, #0]
							address += rowOffset*k+l;
 8001330:	2320      	movs	r3, #32
 8001332:	2218      	movs	r2, #24
 8001334:	4694      	mov	ip, r2
 8001336:	44bc      	add	ip, r7
 8001338:	4463      	add	r3, ip
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	b25b      	sxtb	r3, r3
 800133e:	b29b      	uxth	r3, r3
 8001340:	2226      	movs	r2, #38	; 0x26
 8001342:	2418      	movs	r4, #24
 8001344:	46a4      	mov	ip, r4
 8001346:	44bc      	add	ip, r7
 8001348:	4462      	add	r2, ip
 800134a:	8812      	ldrh	r2, [r2, #0]
 800134c:	4353      	muls	r3, r2
 800134e:	b29a      	uxth	r2, r3
 8001350:	251f      	movs	r5, #31
 8001352:	183b      	adds	r3, r7, r0
 8001354:	195b      	adds	r3, r3, r5
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	b25b      	sxtb	r3, r3
 800135a:	b29b      	uxth	r3, r3
 800135c:	18d3      	adds	r3, r2, r3
 800135e:	b29a      	uxth	r2, r3
 8001360:	183b      	adds	r3, r7, r0
 8001362:	185b      	adds	r3, r3, r1
 8001364:	881b      	ldrh	r3, [r3, #0]
 8001366:	18d3      	adds	r3, r2, r3
 8001368:	b29a      	uxth	r2, r3
 800136a:	183b      	adds	r3, r7, r0
 800136c:	185b      	adds	r3, r3, r1
 800136e:	801a      	strh	r2, [r3, #0]
							buffer[address] = colorFixer(bg);
 8001370:	4bb5      	ldr	r3, [pc, #724]	; (8001648 <drawChar+0x690>)
 8001372:	881a      	ldrh	r2, [r3, #0]
 8001374:	0006      	movs	r6, r0
 8001376:	183b      	adds	r3, r7, r0
 8001378:	185b      	adds	r3, r3, r1
 800137a:	2400      	movs	r4, #0
 800137c:	5f1c      	ldrsh	r4, [r3, r4]
 800137e:	0010      	movs	r0, r2
 8001380:	f7ff f9fe 	bl	8000780 <colorFixer>
 8001384:	0003      	movs	r3, r0
 8001386:	0019      	movs	r1, r3
 8001388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800138a:	0062      	lsls	r2, r4, #1
 800138c:	52d1      	strh	r1, [r2, r3]
						for (int8_t l = 0; l < textSize; l++) {
 800138e:	19bb      	adds	r3, r7, r6
 8001390:	195b      	adds	r3, r3, r5
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	b25b      	sxtb	r3, r3
 8001396:	b2db      	uxtb	r3, r3
 8001398:	3301      	adds	r3, #1
 800139a:	b2da      	uxtb	r2, r3
 800139c:	19bb      	adds	r3, r7, r6
 800139e:	195b      	adds	r3, r3, r5
 80013a0:	701a      	strb	r2, [r3, #0]
 80013a2:	231f      	movs	r3, #31
 80013a4:	2218      	movs	r2, #24
 80013a6:	4694      	mov	ip, r2
 80013a8:	44bc      	add	ip, r7
 80013aa:	4463      	add	r3, ip
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	b25b      	sxtb	r3, r3
 80013b0:	4aa4      	ldr	r2, [pc, #656]	; (8001644 <drawChar+0x68c>)
 80013b2:	7812      	ldrb	r2, [r2, #0]
 80013b4:	4293      	cmp	r3, r2
 80013b6:	db8f      	blt.n	80012d8 <drawChar+0x320>
					for (int8_t k = 0; k < textSize; k++) {
 80013b8:	2120      	movs	r1, #32
 80013ba:	2018      	movs	r0, #24
 80013bc:	183b      	adds	r3, r7, r0
 80013be:	185b      	adds	r3, r3, r1
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	b25b      	sxtb	r3, r3
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	3301      	adds	r3, #1
 80013c8:	b2da      	uxtb	r2, r3
 80013ca:	183b      	adds	r3, r7, r0
 80013cc:	185b      	adds	r3, r3, r1
 80013ce:	701a      	strb	r2, [r3, #0]
 80013d0:	2320      	movs	r3, #32
 80013d2:	2218      	movs	r2, #24
 80013d4:	4694      	mov	ip, r2
 80013d6:	44bc      	add	ip, r7
 80013d8:	4463      	add	r3, ip
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	b25b      	sxtb	r3, r3
 80013de:	4a99      	ldr	r2, [pc, #612]	; (8001644 <drawChar+0x68c>)
 80013e0:	7812      	ldrb	r2, [r2, #0]
 80013e2:	4293      	cmp	r3, r2
 80013e4:	da00      	bge.n	80013e8 <drawChar+0x430>
 80013e6:	e757      	b.n	8001298 <drawChar+0x2e0>
		for (int8_t j=0; j<8; j++, line >>= 1) {
 80013e8:	2123      	movs	r1, #35	; 0x23
 80013ea:	2018      	movs	r0, #24
 80013ec:	183b      	adds	r3, r7, r0
 80013ee:	185b      	adds	r3, r3, r1
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	b25b      	sxtb	r3, r3
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	3301      	adds	r3, #1
 80013f8:	b2da      	uxtb	r2, r3
 80013fa:	183b      	adds	r3, r7, r0
 80013fc:	185b      	adds	r3, r3, r1
 80013fe:	701a      	strb	r2, [r3, #0]
 8001400:	2224      	movs	r2, #36	; 0x24
 8001402:	183b      	adds	r3, r7, r0
 8001404:	189b      	adds	r3, r3, r2
 8001406:	2118      	movs	r1, #24
 8001408:	468c      	mov	ip, r1
 800140a:	44bc      	add	ip, r7
 800140c:	4462      	add	r2, ip
 800140e:	7812      	ldrb	r2, [r2, #0]
 8001410:	0852      	lsrs	r2, r2, #1
 8001412:	701a      	strb	r2, [r3, #0]
 8001414:	2323      	movs	r3, #35	; 0x23
 8001416:	2218      	movs	r2, #24
 8001418:	4694      	mov	ip, r2
 800141a:	44bc      	add	ip, r7
 800141c:	4463      	add	r3, ip
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	b25b      	sxtb	r3, r3
 8001422:	2b07      	cmp	r3, #7
 8001424:	dc00      	bgt.n	8001428 <drawChar+0x470>
 8001426:	e634      	b.n	8001092 <drawChar+0xda>
	for (int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
 8001428:	2125      	movs	r1, #37	; 0x25
 800142a:	2018      	movs	r0, #24
 800142c:	183b      	adds	r3, r7, r0
 800142e:	185b      	adds	r3, r3, r1
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	b25b      	sxtb	r3, r3
 8001434:	b2db      	uxtb	r3, r3
 8001436:	3301      	adds	r3, #1
 8001438:	b2da      	uxtb	r2, r3
 800143a:	183b      	adds	r3, r7, r0
 800143c:	185b      	adds	r3, r3, r1
 800143e:	701a      	strb	r2, [r3, #0]
 8001440:	2325      	movs	r3, #37	; 0x25
 8001442:	2218      	movs	r2, #24
 8001444:	4694      	mov	ip, r2
 8001446:	44bc      	add	ip, r7
 8001448:	4463      	add	r3, ip
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	b25b      	sxtb	r3, r3
 800144e:	2b04      	cmp	r3, #4
 8001450:	dc00      	bgt.n	8001454 <drawChar+0x49c>
 8001452:	e600      	b.n	8001056 <drawChar+0x9e>
				}
			}
		}
	}

	if (bg != textColor) { // If opaque, draw vertical line for last column
 8001454:	4b7c      	ldr	r3, [pc, #496]	; (8001648 <drawChar+0x690>)
 8001456:	881a      	ldrh	r2, [r3, #0]
 8001458:	4b7c      	ldr	r3, [pc, #496]	; (800164c <drawChar+0x694>)
 800145a:	881b      	ldrh	r3, [r3, #0]
 800145c:	429a      	cmp	r2, r3
 800145e:	d100      	bne.n	8001462 <drawChar+0x4aa>
 8001460:	e0ca      	b.n	80015f8 <drawChar+0x640>
		for (int8_t j = 0; j < 8; j++) {
 8001462:	231e      	movs	r3, #30
 8001464:	2218      	movs	r2, #24
 8001466:	4694      	mov	ip, r2
 8001468:	44bc      	add	ip, r7
 800146a:	4463      	add	r3, ip
 800146c:	2200      	movs	r2, #0
 800146e:	701a      	strb	r2, [r3, #0]
 8001470:	e0b8      	b.n	80015e4 <drawChar+0x62c>
			if (textSize == 1) {
 8001472:	4b74      	ldr	r3, [pc, #464]	; (8001644 <drawChar+0x68c>)
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	2b01      	cmp	r3, #1
 8001478:	d116      	bne.n	80014a8 <drawChar+0x4f0>
				buffer[5+j*6] = colorFixer(bg);
 800147a:	4b73      	ldr	r3, [pc, #460]	; (8001648 <drawChar+0x690>)
 800147c:	8819      	ldrh	r1, [r3, #0]
 800147e:	231e      	movs	r3, #30
 8001480:	2218      	movs	r2, #24
 8001482:	4694      	mov	ip, r2
 8001484:	44bc      	add	ip, r7
 8001486:	4463      	add	r3, ip
 8001488:	2200      	movs	r2, #0
 800148a:	569a      	ldrsb	r2, [r3, r2]
 800148c:	0013      	movs	r3, r2
 800148e:	005b      	lsls	r3, r3, #1
 8001490:	189b      	adds	r3, r3, r2
 8001492:	005b      	lsls	r3, r3, #1
 8001494:	1d5c      	adds	r4, r3, #5
 8001496:	0008      	movs	r0, r1
 8001498:	f7ff f972 	bl	8000780 <colorFixer>
 800149c:	0003      	movs	r3, r0
 800149e:	0019      	movs	r1, r3
 80014a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014a2:	0062      	lsls	r2, r4, #1
 80014a4:	52d1      	strh	r1, [r2, r3]
 80014a6:	e091      	b.n	80015cc <drawChar+0x614>
			}
			else {
				for (int8_t k = 0; k < textSize; k++) {
 80014a8:	231d      	movs	r3, #29
 80014aa:	2218      	movs	r2, #24
 80014ac:	4694      	mov	ip, r2
 80014ae:	44bc      	add	ip, r7
 80014b0:	4463      	add	r3, ip
 80014b2:	2200      	movs	r2, #0
 80014b4:	701a      	strb	r2, [r3, #0]
 80014b6:	e07d      	b.n	80015b4 <drawChar+0x5fc>
					for (int8_t l = 0; l < textSize; l++) {
 80014b8:	231c      	movs	r3, #28
 80014ba:	2218      	movs	r2, #24
 80014bc:	4694      	mov	ip, r2
 80014be:	44bc      	add	ip, r7
 80014c0:	4463      	add	r3, ip
 80014c2:	2200      	movs	r2, #0
 80014c4:	701a      	strb	r2, [r3, #0]
 80014c6:	e05e      	b.n	8001586 <drawChar+0x5ce>
						address = (textSize*textSize*j*6)+(5*textSize);
 80014c8:	4b5e      	ldr	r3, [pc, #376]	; (8001644 <drawChar+0x68c>)
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	b29b      	uxth	r3, r3
 80014ce:	4a5d      	ldr	r2, [pc, #372]	; (8001644 <drawChar+0x68c>)
 80014d0:	7812      	ldrb	r2, [r2, #0]
 80014d2:	b292      	uxth	r2, r2
 80014d4:	4353      	muls	r3, r2
 80014d6:	b29b      	uxth	r3, r3
 80014d8:	221e      	movs	r2, #30
 80014da:	2118      	movs	r1, #24
 80014dc:	468c      	mov	ip, r1
 80014de:	44bc      	add	ip, r7
 80014e0:	4462      	add	r2, ip
 80014e2:	7812      	ldrb	r2, [r2, #0]
 80014e4:	b252      	sxtb	r2, r2
 80014e6:	b292      	uxth	r2, r2
 80014e8:	4353      	muls	r3, r2
 80014ea:	b29b      	uxth	r3, r3
 80014ec:	1c1a      	adds	r2, r3, #0
 80014ee:	1c13      	adds	r3, r2, #0
 80014f0:	18db      	adds	r3, r3, r3
 80014f2:	189b      	adds	r3, r3, r2
 80014f4:	18db      	adds	r3, r3, r3
 80014f6:	b29a      	uxth	r2, r3
 80014f8:	4b52      	ldr	r3, [pc, #328]	; (8001644 <drawChar+0x68c>)
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	b29b      	uxth	r3, r3
 80014fe:	1c19      	adds	r1, r3, #0
 8001500:	0089      	lsls	r1, r1, #2
 8001502:	18cb      	adds	r3, r1, r3
 8001504:	b29b      	uxth	r3, r3
 8001506:	18d3      	adds	r3, r2, r3
 8001508:	b29a      	uxth	r2, r3
 800150a:	210e      	movs	r1, #14
 800150c:	2018      	movs	r0, #24
 800150e:	183b      	adds	r3, r7, r0
 8001510:	185b      	adds	r3, r3, r1
 8001512:	801a      	strh	r2, [r3, #0]
						address += rowOffset*k+l;
 8001514:	231d      	movs	r3, #29
 8001516:	2218      	movs	r2, #24
 8001518:	4694      	mov	ip, r2
 800151a:	44bc      	add	ip, r7
 800151c:	4463      	add	r3, ip
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	b25b      	sxtb	r3, r3
 8001522:	b29b      	uxth	r3, r3
 8001524:	2226      	movs	r2, #38	; 0x26
 8001526:	2418      	movs	r4, #24
 8001528:	46a4      	mov	ip, r4
 800152a:	44bc      	add	ip, r7
 800152c:	4462      	add	r2, ip
 800152e:	8812      	ldrh	r2, [r2, #0]
 8001530:	4353      	muls	r3, r2
 8001532:	b29a      	uxth	r2, r3
 8001534:	251c      	movs	r5, #28
 8001536:	183b      	adds	r3, r7, r0
 8001538:	195b      	adds	r3, r3, r5
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	b25b      	sxtb	r3, r3
 800153e:	b29b      	uxth	r3, r3
 8001540:	18d3      	adds	r3, r2, r3
 8001542:	b29a      	uxth	r2, r3
 8001544:	183b      	adds	r3, r7, r0
 8001546:	185b      	adds	r3, r3, r1
 8001548:	881b      	ldrh	r3, [r3, #0]
 800154a:	18d3      	adds	r3, r2, r3
 800154c:	b29a      	uxth	r2, r3
 800154e:	183b      	adds	r3, r7, r0
 8001550:	185b      	adds	r3, r3, r1
 8001552:	801a      	strh	r2, [r3, #0]
						buffer[address] = colorFixer(bg);
 8001554:	4b3c      	ldr	r3, [pc, #240]	; (8001648 <drawChar+0x690>)
 8001556:	881a      	ldrh	r2, [r3, #0]
 8001558:	0006      	movs	r6, r0
 800155a:	183b      	adds	r3, r7, r0
 800155c:	185b      	adds	r3, r3, r1
 800155e:	2400      	movs	r4, #0
 8001560:	5f1c      	ldrsh	r4, [r3, r4]
 8001562:	0010      	movs	r0, r2
 8001564:	f7ff f90c 	bl	8000780 <colorFixer>
 8001568:	0003      	movs	r3, r0
 800156a:	0019      	movs	r1, r3
 800156c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800156e:	0062      	lsls	r2, r4, #1
 8001570:	52d1      	strh	r1, [r2, r3]
					for (int8_t l = 0; l < textSize; l++) {
 8001572:	19bb      	adds	r3, r7, r6
 8001574:	195b      	adds	r3, r3, r5
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	b25b      	sxtb	r3, r3
 800157a:	b2db      	uxtb	r3, r3
 800157c:	3301      	adds	r3, #1
 800157e:	b2da      	uxtb	r2, r3
 8001580:	19bb      	adds	r3, r7, r6
 8001582:	195b      	adds	r3, r3, r5
 8001584:	701a      	strb	r2, [r3, #0]
 8001586:	231c      	movs	r3, #28
 8001588:	2218      	movs	r2, #24
 800158a:	4694      	mov	ip, r2
 800158c:	44bc      	add	ip, r7
 800158e:	4463      	add	r3, ip
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	b25b      	sxtb	r3, r3
 8001594:	4a2b      	ldr	r2, [pc, #172]	; (8001644 <drawChar+0x68c>)
 8001596:	7812      	ldrb	r2, [r2, #0]
 8001598:	4293      	cmp	r3, r2
 800159a:	db95      	blt.n	80014c8 <drawChar+0x510>
				for (int8_t k = 0; k < textSize; k++) {
 800159c:	211d      	movs	r1, #29
 800159e:	2018      	movs	r0, #24
 80015a0:	183b      	adds	r3, r7, r0
 80015a2:	185b      	adds	r3, r3, r1
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	b25b      	sxtb	r3, r3
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	3301      	adds	r3, #1
 80015ac:	b2da      	uxtb	r2, r3
 80015ae:	183b      	adds	r3, r7, r0
 80015b0:	185b      	adds	r3, r3, r1
 80015b2:	701a      	strb	r2, [r3, #0]
 80015b4:	231d      	movs	r3, #29
 80015b6:	2218      	movs	r2, #24
 80015b8:	4694      	mov	ip, r2
 80015ba:	44bc      	add	ip, r7
 80015bc:	4463      	add	r3, ip
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	b25b      	sxtb	r3, r3
 80015c2:	4a20      	ldr	r2, [pc, #128]	; (8001644 <drawChar+0x68c>)
 80015c4:	7812      	ldrb	r2, [r2, #0]
 80015c6:	4293      	cmp	r3, r2
 80015c8:	da00      	bge.n	80015cc <drawChar+0x614>
 80015ca:	e775      	b.n	80014b8 <drawChar+0x500>
		for (int8_t j = 0; j < 8; j++) {
 80015cc:	211e      	movs	r1, #30
 80015ce:	2018      	movs	r0, #24
 80015d0:	183b      	adds	r3, r7, r0
 80015d2:	185b      	adds	r3, r3, r1
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	b25b      	sxtb	r3, r3
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	3301      	adds	r3, #1
 80015dc:	b2da      	uxtb	r2, r3
 80015de:	183b      	adds	r3, r7, r0
 80015e0:	185b      	adds	r3, r3, r1
 80015e2:	701a      	strb	r2, [r3, #0]
 80015e4:	231e      	movs	r3, #30
 80015e6:	2218      	movs	r2, #24
 80015e8:	4694      	mov	ip, r2
 80015ea:	44bc      	add	ip, r7
 80015ec:	4463      	add	r3, ip
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	b25b      	sxtb	r3, r3
 80015f2:	2b07      	cmp	r3, #7
 80015f4:	dc00      	bgt.n	80015f8 <drawChar+0x640>
 80015f6:	e73c      	b.n	8001472 <drawChar+0x4ba>
			}
		}
//		else fillRect(cursorX+5*textSize, cursorY, textSize, 8*textSize, bg, hspi);
	}

	drawBuffer(cursorX, cursorY, 6*textSize, 8*textSize, buffer, bufferSize, hspi);
 80015f8:	4b15      	ldr	r3, [pc, #84]	; (8001650 <drawChar+0x698>)
 80015fa:	7818      	ldrb	r0, [r3, #0]
 80015fc:	4b15      	ldr	r3, [pc, #84]	; (8001654 <drawChar+0x69c>)
 80015fe:	7819      	ldrb	r1, [r3, #0]
 8001600:	4b10      	ldr	r3, [pc, #64]	; (8001644 <drawChar+0x68c>)
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	1c1a      	adds	r2, r3, #0
 8001606:	1c13      	adds	r3, r2, #0
 8001608:	18db      	adds	r3, r3, r3
 800160a:	189b      	adds	r3, r3, r2
 800160c:	18db      	adds	r3, r3, r3
 800160e:	b2dc      	uxtb	r4, r3
 8001610:	4b0c      	ldr	r3, [pc, #48]	; (8001644 <drawChar+0x68c>)
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	00db      	lsls	r3, r3, #3
 8001616:	b2dd      	uxtb	r5, r3
 8001618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800161a:	69ba      	ldr	r2, [r7, #24]
 800161c:	9202      	str	r2, [sp, #8]
 800161e:	221a      	movs	r2, #26
 8001620:	2618      	movs	r6, #24
 8001622:	46b4      	mov	ip, r6
 8001624:	44bc      	add	ip, r7
 8001626:	4462      	add	r2, ip
 8001628:	8812      	ldrh	r2, [r2, #0]
 800162a:	9201      	str	r2, [sp, #4]
 800162c:	9300      	str	r3, [sp, #0]
 800162e:	002b      	movs	r3, r5
 8001630:	0022      	movs	r2, r4
 8001632:	f7ff fa16 	bl	8000a62 <drawBuffer>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	469d      	mov	sp, r3
//	setCursor(cursorX+6, cursorY);
}
 800163a:	46c0      	nop			; (mov r8, r8)
 800163c:	46bd      	mov	sp, r7
 800163e:	b011      	add	sp, #68	; 0x44
 8001640:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001642:	46c0      	nop			; (mov r8, r8)
 8001644:	200000ea 	.word	0x200000ea
 8001648:	200000ee 	.word	0x200000ee
 800164c:	200000ec 	.word	0x200000ec
 8001650:	200000e8 	.word	0x200000e8
 8001654:	200000e9 	.word	0x200000e9

08001658 <drawText>:

// this function is slow, and you can definitely see a scrolling speed thing going on
// how to remove this so it prints near instantly?
// maybe not needed if all we're doing is printing time (very few characters)
void drawText(const char *str, SPI_HandleTypeDef *hspi) {
 8001658:	b580      	push	{r7, lr}
 800165a:	b084      	sub	sp, #16
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	6039      	str	r1, [r7, #0]
	// add text wrap
	for (int i = 0; str[i] != '\0'; i++) {
 8001662:	2300      	movs	r3, #0
 8001664:	60fb      	str	r3, [r7, #12]
 8001666:	e01d      	b.n	80016a4 <drawText+0x4c>
		drawChar(str[i], hspi);
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	687a      	ldr	r2, [r7, #4]
 800166c:	18d3      	adds	r3, r2, r3
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	683a      	ldr	r2, [r7, #0]
 8001672:	0011      	movs	r1, r2
 8001674:	0018      	movs	r0, r3
 8001676:	f7ff fc9f 	bl	8000fb8 <drawChar>
		setCursor(cursorX+textSize*6, cursorY);
 800167a:	4b0f      	ldr	r3, [pc, #60]	; (80016b8 <drawText+0x60>)
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	1c1a      	adds	r2, r3, #0
 8001680:	1c13      	adds	r3, r2, #0
 8001682:	18db      	adds	r3, r3, r3
 8001684:	189b      	adds	r3, r3, r2
 8001686:	18db      	adds	r3, r3, r3
 8001688:	b2da      	uxtb	r2, r3
 800168a:	4b0c      	ldr	r3, [pc, #48]	; (80016bc <drawText+0x64>)
 800168c:	781b      	ldrb	r3, [r3, #0]
 800168e:	18d3      	adds	r3, r2, r3
 8001690:	b2da      	uxtb	r2, r3
 8001692:	4b0b      	ldr	r3, [pc, #44]	; (80016c0 <drawText+0x68>)
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	0019      	movs	r1, r3
 8001698:	0010      	movs	r0, r2
 800169a:	f000 f823 	bl	80016e4 <setCursor>
	for (int i = 0; str[i] != '\0'; i++) {
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	3301      	adds	r3, #1
 80016a2:	60fb      	str	r3, [r7, #12]
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	687a      	ldr	r2, [r7, #4]
 80016a8:	18d3      	adds	r3, r2, r3
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d1db      	bne.n	8001668 <drawText+0x10>
	}
}
 80016b0:	46c0      	nop			; (mov r8, r8)
 80016b2:	46bd      	mov	sp, r7
 80016b4:	b004      	add	sp, #16
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	200000ea 	.word	0x200000ea
 80016bc:	200000e8 	.word	0x200000e8
 80016c0:	200000e9 	.word	0x200000e9

080016c4 <setBackgroundColor>:
		setCursor(cursorX+textSize*6, cursorY);
	}
//	setCursor(x+i*textSize*6, y);
}

void setBackgroundColor(uint16_t color) {bg = color;}
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	0002      	movs	r2, r0
 80016cc:	1dbb      	adds	r3, r7, #6
 80016ce:	801a      	strh	r2, [r3, #0]
 80016d0:	4b03      	ldr	r3, [pc, #12]	; (80016e0 <setBackgroundColor+0x1c>)
 80016d2:	1dba      	adds	r2, r7, #6
 80016d4:	8812      	ldrh	r2, [r2, #0]
 80016d6:	801a      	strh	r2, [r3, #0]
 80016d8:	46c0      	nop			; (mov r8, r8)
 80016da:	46bd      	mov	sp, r7
 80016dc:	b002      	add	sp, #8
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	200000ee 	.word	0x200000ee

080016e4 <setCursor>:

void setCursor(uint8_t x, uint8_t y) {
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	0002      	movs	r2, r0
 80016ec:	1dfb      	adds	r3, r7, #7
 80016ee:	701a      	strb	r2, [r3, #0]
 80016f0:	1dbb      	adds	r3, r7, #6
 80016f2:	1c0a      	adds	r2, r1, #0
 80016f4:	701a      	strb	r2, [r3, #0]
	cursorX = x;
 80016f6:	4b06      	ldr	r3, [pc, #24]	; (8001710 <setCursor+0x2c>)
 80016f8:	1dfa      	adds	r2, r7, #7
 80016fa:	7812      	ldrb	r2, [r2, #0]
 80016fc:	701a      	strb	r2, [r3, #0]
	cursorY = y;
 80016fe:	4b05      	ldr	r3, [pc, #20]	; (8001714 <setCursor+0x30>)
 8001700:	1dba      	adds	r2, r7, #6
 8001702:	7812      	ldrb	r2, [r2, #0]
 8001704:	701a      	strb	r2, [r3, #0]
}
 8001706:	46c0      	nop			; (mov r8, r8)
 8001708:	46bd      	mov	sp, r7
 800170a:	b002      	add	sp, #8
 800170c:	bd80      	pop	{r7, pc}
 800170e:	46c0      	nop			; (mov r8, r8)
 8001710:	200000e8 	.word	0x200000e8
 8001714:	200000e9 	.word	0x200000e9

08001718 <setTextSize>:

void setTextSize(uint8_t size) {textSize = size;}
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0
 800171e:	0002      	movs	r2, r0
 8001720:	1dfb      	adds	r3, r7, #7
 8001722:	701a      	strb	r2, [r3, #0]
 8001724:	4b03      	ldr	r3, [pc, #12]	; (8001734 <setTextSize+0x1c>)
 8001726:	1dfa      	adds	r2, r7, #7
 8001728:	7812      	ldrb	r2, [r2, #0]
 800172a:	701a      	strb	r2, [r3, #0]
 800172c:	46c0      	nop			; (mov r8, r8)
 800172e:	46bd      	mov	sp, r7
 8001730:	b002      	add	sp, #8
 8001732:	bd80      	pop	{r7, pc}
 8001734:	200000ea 	.word	0x200000ea

08001738 <setTextColor>:

void setTextColor(uint16_t color) {textColor = color;}
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
 800173e:	0002      	movs	r2, r0
 8001740:	1dbb      	adds	r3, r7, #6
 8001742:	801a      	strh	r2, [r3, #0]
 8001744:	4b03      	ldr	r3, [pc, #12]	; (8001754 <setTextColor+0x1c>)
 8001746:	1dba      	adds	r2, r7, #6
 8001748:	8812      	ldrh	r2, [r2, #0]
 800174a:	801a      	strh	r2, [r3, #0]
 800174c:	46c0      	nop			; (mov r8, r8)
 800174e:	46bd      	mov	sp, r7
 8001750:	b002      	add	sp, #8
 8001752:	bd80      	pop	{r7, pc}
 8001754:	200000ec 	.word	0x200000ec

08001758 <clearScreen>:

void clearScreen(uint16_t backgroundColor, SPI_HandleTypeDef *hspi) {
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
 800175e:	0002      	movs	r2, r0
 8001760:	6039      	str	r1, [r7, #0]
 8001762:	1dbb      	adds	r3, r7, #6
 8001764:	801a      	strh	r2, [r3, #0]
	bg = backgroundColor;
 8001766:	4b07      	ldr	r3, [pc, #28]	; (8001784 <clearScreen+0x2c>)
 8001768:	1dba      	adds	r2, r7, #6
 800176a:	8812      	ldrh	r2, [r2, #0]
 800176c:	801a      	strh	r2, [r3, #0]
	fillScreen(backgroundColor, hspi);
 800176e:	683a      	ldr	r2, [r7, #0]
 8001770:	1dbb      	adds	r3, r7, #6
 8001772:	881b      	ldrh	r3, [r3, #0]
 8001774:	0011      	movs	r1, r2
 8001776:	0018      	movs	r0, r3
 8001778:	f7ff fa49 	bl	8000c0e <fillScreen>
}
 800177c:	46c0      	nop			; (mov r8, r8)
 800177e:	46bd      	mov	sp, r7
 8001780:	b002      	add	sp, #8
 8001782:	bd80      	pop	{r7, pc}
 8001784:	200000ee 	.word	0x200000ee

08001788 <setTime>:

#include "clocks.h"

// set rtc time. uses perosnal struct as arg
// assert members not null for set functions?
void setTime(struct times *t, RTC_HandleTypeDef *hrtc) {
 8001788:	b590      	push	{r4, r7, lr}
 800178a:	b089      	sub	sp, #36	; 0x24
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
 8001790:	6039      	str	r1, [r7, #0]
	RTC_TimeTypeDef stime = {0};	// change to malloc call? does that work in embedded?
 8001792:	210c      	movs	r1, #12
 8001794:	000c      	movs	r4, r1
 8001796:	187b      	adds	r3, r7, r1
 8001798:	0018      	movs	r0, r3
 800179a:	2314      	movs	r3, #20
 800179c:	001a      	movs	r2, r3
 800179e:	2100      	movs	r1, #0
 80017a0:	f007 f827 	bl	80087f2 <memset>

	// set using args later
	stime.Hours = t->hr;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	781a      	ldrb	r2, [r3, #0]
 80017a8:	0021      	movs	r1, r4
 80017aa:	187b      	adds	r3, r7, r1
 80017ac:	701a      	strb	r2, [r3, #0]
	stime.Minutes = t->min;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	785a      	ldrb	r2, [r3, #1]
 80017b2:	187b      	adds	r3, r7, r1
 80017b4:	705a      	strb	r2, [r3, #1]
	stime.Seconds = t->sec;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	789a      	ldrb	r2, [r3, #2]
 80017ba:	187b      	adds	r3, r7, r1
 80017bc:	709a      	strb	r2, [r3, #2]

	stime.TimeFormat = RTC_HOURFORMAT_24;
 80017be:	187b      	adds	r3, r7, r1
 80017c0:	2200      	movs	r2, #0
 80017c2:	70da      	strb	r2, [r3, #3]

	// not sure what these do, but probably fine if set to 0 or ignored
	stime.SubSeconds = 0;
 80017c4:	187b      	adds	r3, r7, r1
 80017c6:	2200      	movs	r2, #0
 80017c8:	605a      	str	r2, [r3, #4]
	stime.SecondFraction = 0;
 80017ca:	187b      	adds	r3, r7, r1
 80017cc:	2200      	movs	r2, #0
 80017ce:	609a      	str	r2, [r3, #8]

	stime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;		// add daylight savings later?
 80017d0:	187b      	adds	r3, r7, r1
 80017d2:	2200      	movs	r2, #0
 80017d4:	60da      	str	r2, [r3, #12]
	stime.StoreOperation = RTC_STOREOPERATION_SET;		// not sure what this does
 80017d6:	187b      	adds	r3, r7, r1
 80017d8:	2280      	movs	r2, #128	; 0x80
 80017da:	02d2      	lsls	r2, r2, #11
 80017dc:	611a      	str	r2, [r3, #16]

	// do nothing until done
	// not following BCD format (4-bit digit 1, 4-bit digit 2)
	// while makes program hang? ignore instead?
//	while (HAL_RTC_SetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK);
	HAL_RTC_SetTime(hrtc, &stime, RTC_FORMAT_BIN);
 80017de:	1879      	adds	r1, r7, r1
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	2200      	movs	r2, #0
 80017e4:	0018      	movs	r0, r3
 80017e6:	f004 ff53 	bl	8006690 <HAL_RTC_SetTime>

//	runClockDisplay(&htim22);
}
 80017ea:	46c0      	nop			; (mov r8, r8)
 80017ec:	46bd      	mov	sp, r7
 80017ee:	b009      	add	sp, #36	; 0x24
 80017f0:	bd90      	pop	{r4, r7, pc}

080017f2 <setDate>:

// set rtc date. uses personal struct
void setDate(struct dates *d, RTC_HandleTypeDef *hrtc) {
 80017f2:	b590      	push	{r4, r7, lr}
 80017f4:	b085      	sub	sp, #20
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	6078      	str	r0, [r7, #4]
 80017fa:	6039      	str	r1, [r7, #0]
	// ---- date ----
	RTC_DateTypeDef sdate = {0};
 80017fc:	240c      	movs	r4, #12
 80017fe:	193b      	adds	r3, r7, r4
 8001800:	2200      	movs	r2, #0
 8001802:	601a      	str	r2, [r3, #0]

	sdate.Month = d->month;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	789a      	ldrb	r2, [r3, #2]
 8001808:	193b      	adds	r3, r7, r4
 800180a:	705a      	strb	r2, [r3, #1]
	sdate.Date = d->date;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	78da      	ldrb	r2, [r3, #3]
 8001810:	193b      	adds	r3, r7, r4
 8001812:	709a      	strb	r2, [r3, #2]
	sdate.WeekDay = weekdayCalculator(d->yr, d->month, d->date) % 7;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	8818      	ldrh	r0, [r3, #0]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	7899      	ldrb	r1, [r3, #2]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	78db      	ldrb	r3, [r3, #3]
 8001820:	001a      	movs	r2, r3
 8001822:	f000 fa35 	bl	8001c90 <weekdayCalculator>
 8001826:	0003      	movs	r3, r0
 8001828:	2107      	movs	r1, #7
 800182a:	0018      	movs	r0, r3
 800182c:	f7fe fcfa 	bl	8000224 <__aeabi_uidivmod>
 8001830:	000b      	movs	r3, r1
 8001832:	b2da      	uxtb	r2, r3
 8001834:	193b      	adds	r3, r7, r4
 8001836:	701a      	strb	r2, [r3, #0]
	sdate.Year = d->yr % 100; 		// set only between 0-99. part of the library (!?)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	881b      	ldrh	r3, [r3, #0]
 800183c:	2164      	movs	r1, #100	; 0x64
 800183e:	0018      	movs	r0, r3
 8001840:	f7fe fcf0 	bl	8000224 <__aeabi_uidivmod>
 8001844:	000b      	movs	r3, r1
 8001846:	b29b      	uxth	r3, r3
 8001848:	b2da      	uxtb	r2, r3
 800184a:	193b      	adds	r3, r7, r4
 800184c:	70da      	strb	r2, [r3, #3]

	HAL_RTC_SetDate(hrtc, &sdate, RTC_FORMAT_BIN);
 800184e:	1939      	adds	r1, r7, r4
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	2200      	movs	r2, #0
 8001854:	0018      	movs	r0, r3
 8001856:	f005 f83b 	bl	80068d0 <HAL_RTC_SetDate>

//	runClockDisplay(&htim22);
}
 800185a:	46c0      	nop			; (mov r8, r8)
 800185c:	46bd      	mov	sp, r7
 800185e:	b005      	add	sp, #20
 8001860:	bd90      	pop	{r4, r7, pc}

08001862 <setDateTime>:

void setDateTime(struct dates *d, struct times *t, RTC_HandleTypeDef *hrtc) {
 8001862:	b580      	push	{r7, lr}
 8001864:	b084      	sub	sp, #16
 8001866:	af00      	add	r7, sp, #0
 8001868:	60f8      	str	r0, [r7, #12]
 800186a:	60b9      	str	r1, [r7, #8]
 800186c:	607a      	str	r2, [r7, #4]
	setDate(d, hrtc);
 800186e:	687a      	ldr	r2, [r7, #4]
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	0011      	movs	r1, r2
 8001874:	0018      	movs	r0, r3
 8001876:	f7ff ffbc 	bl	80017f2 <setDate>
	setTime(t, hrtc);
 800187a:	687a      	ldr	r2, [r7, #4]
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	0011      	movs	r1, r2
 8001880:	0018      	movs	r0, r3
 8001882:	f7ff ff81 	bl	8001788 <setTime>
}
 8001886:	46c0      	nop			; (mov r8, r8)
 8001888:	46bd      	mov	sp, r7
 800188a:	b004      	add	sp, #16
 800188c:	bd80      	pop	{r7, pc}
	...

08001890 <setAlarm>:

// for time of day+week
void setAlarm(struct alarmTimes *a, RTC_HandleTypeDef *hrtc) {
 8001890:	b5b0      	push	{r4, r5, r7, lr}
 8001892:	b092      	sub	sp, #72	; 0x48
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
 8001898:	6039      	str	r1, [r7, #0]
	RTC_AlarmTypeDef salarm = {0};		// is there a problem with using pointers instead?
 800189a:	2520      	movs	r5, #32
 800189c:	197b      	adds	r3, r7, r5
 800189e:	0018      	movs	r0, r3
 80018a0:	2328      	movs	r3, #40	; 0x28
 80018a2:	001a      	movs	r2, r3
 80018a4:	2100      	movs	r1, #0
 80018a6:	f006 ffa4 	bl	80087f2 <memset>
	RTC_TimeTypeDef salarmtime = {0};
 80018aa:	240c      	movs	r4, #12
 80018ac:	193b      	adds	r3, r7, r4
 80018ae:	0018      	movs	r0, r3
 80018b0:	2314      	movs	r3, #20
 80018b2:	001a      	movs	r2, r3
 80018b4:	2100      	movs	r1, #0
 80018b6:	f006 ff9c 	bl	80087f2 <memset>

	watchAlarm = *a;	// this is probably fine (value at a is defined already)
 80018ba:	4a23      	ldr	r2, [pc, #140]	; (8001948 <setAlarm+0xb8>)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	0010      	movs	r0, r2
 80018c0:	0019      	movs	r1, r3
 80018c2:	2304      	movs	r3, #4
 80018c4:	001a      	movs	r2, r3
 80018c6:	f006 ff8b 	bl	80087e0 <memcpy>

	// change to set with args
	salarmtime.Hours = a->hr;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	781a      	ldrb	r2, [r3, #0]
 80018ce:	193b      	adds	r3, r7, r4
 80018d0:	701a      	strb	r2, [r3, #0]
	salarmtime.Minutes = a->min;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	785a      	ldrb	r2, [r3, #1]
 80018d6:	193b      	adds	r3, r7, r4
 80018d8:	705a      	strb	r2, [r3, #1]
	salarmtime.Seconds = a->sec;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	789a      	ldrb	r2, [r3, #2]
 80018de:	193b      	adds	r3, r7, r4
 80018e0:	709a      	strb	r2, [r3, #2]
	salarmtime.TimeFormat = RTC_HOURFORMAT_24;
 80018e2:	193b      	adds	r3, r7, r4
 80018e4:	2200      	movs	r2, #0
 80018e6:	70da      	strb	r2, [r3, #3]
	salarmtime.SubSeconds = 0;
 80018e8:	0021      	movs	r1, r4
 80018ea:	187b      	adds	r3, r7, r1
 80018ec:	2200      	movs	r2, #0
 80018ee:	605a      	str	r2, [r3, #4]
	salarmtime.SecondFraction = 0;
 80018f0:	187b      	adds	r3, r7, r1
 80018f2:	2200      	movs	r2, #0
 80018f4:	609a      	str	r2, [r3, #8]
	salarmtime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80018f6:	187b      	adds	r3, r7, r1
 80018f8:	2200      	movs	r2, #0
 80018fa:	60da      	str	r2, [r3, #12]
	salarmtime.StoreOperation = RTC_STOREOPERATION_RESET;
 80018fc:	187b      	adds	r3, r7, r1
 80018fe:	2200      	movs	r2, #0
 8001900:	611a      	str	r2, [r3, #16]

	salarm.AlarmTime = salarmtime;
 8001902:	197b      	adds	r3, r7, r5
 8001904:	187a      	adds	r2, r7, r1
 8001906:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001908:	c313      	stmia	r3!, {r0, r1, r4}
 800190a:	ca03      	ldmia	r2!, {r0, r1}
 800190c:	c303      	stmia	r3!, {r0, r1}
	salarm.AlarmMask = RTC_ALARMMASK_NONE;
 800190e:	197b      	adds	r3, r7, r5
 8001910:	2200      	movs	r2, #0
 8001912:	615a      	str	r2, [r3, #20]
	salarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001914:	197b      	adds	r3, r7, r5
 8001916:	2200      	movs	r2, #0
 8001918:	619a      	str	r2, [r3, #24]
	salarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_WEEKDAY;
 800191a:	197b      	adds	r3, r7, r5
 800191c:	2280      	movs	r2, #128	; 0x80
 800191e:	05d2      	lsls	r2, r2, #23
 8001920:	61da      	str	r2, [r3, #28]
	salarm.AlarmDateWeekDay = a->weekday;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	78d9      	ldrb	r1, [r3, #3]
 8001926:	197b      	adds	r3, r7, r5
 8001928:	2220      	movs	r2, #32
 800192a:	5499      	strb	r1, [r3, r2]
	salarm.Alarm = RTC_ALARM_A;			// change if using different alarm
 800192c:	197b      	adds	r3, r7, r5
 800192e:	2280      	movs	r2, #128	; 0x80
 8001930:	0052      	lsls	r2, r2, #1
 8001932:	625a      	str	r2, [r3, #36]	; 0x24

	// do nothing until done
	HAL_RTC_SetAlarm_IT(hrtc, &salarm, RTC_FORMAT_BIN);
 8001934:	1979      	adds	r1, r7, r5
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	2200      	movs	r2, #0
 800193a:	0018      	movs	r0, r3
 800193c:	f005 f8c4 	bl	8006ac8 <HAL_RTC_SetAlarm_IT>
}
 8001940:	46c0      	nop			; (mov r8, r8)
 8001942:	46bd      	mov	sp, r7
 8001944:	b012      	add	sp, #72	; 0x48
 8001946:	bdb0      	pop	{r4, r5, r7, pc}
 8001948:	20000138 	.word	0x20000138

0800194c <setClockAlarm>:

// set an alarm for the next second.
// for triggering display updates.
// uses rtc weekday. should have weekday calculator integrated before using
void setClockAlarm(RTC_HandleTypeDef *hrtc) {
 800194c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800194e:	b097      	sub	sp, #92	; 0x5c
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
	RTC_AlarmTypeDef salarm = {0};			// malloc if using pointers
 8001954:	242c      	movs	r4, #44	; 0x2c
 8001956:	193b      	adds	r3, r7, r4
 8001958:	0018      	movs	r0, r3
 800195a:	2328      	movs	r3, #40	; 0x28
 800195c:	001a      	movs	r2, r3
 800195e:	2100      	movs	r1, #0
 8001960:	f006 ff47 	bl	80087f2 <memset>
	RTC_TimeTypeDef salarmtime = {0};
 8001964:	2518      	movs	r5, #24
 8001966:	197b      	adds	r3, r7, r5
 8001968:	0018      	movs	r0, r3
 800196a:	2314      	movs	r3, #20
 800196c:	001a      	movs	r2, r3
 800196e:	2100      	movs	r1, #0
 8001970:	f006 ff3f 	bl	80087f2 <memset>

	struct dates currentDate = {0};
 8001974:	2310      	movs	r3, #16
 8001976:	18fb      	adds	r3, r7, r3
 8001978:	0018      	movs	r0, r3
 800197a:	2306      	movs	r3, #6
 800197c:	001a      	movs	r2, r3
 800197e:	2100      	movs	r1, #0
 8001980:	f006 ff37 	bl	80087f2 <memset>
	struct times currentTime = {0};
 8001984:	210c      	movs	r1, #12
 8001986:	000e      	movs	r6, r1
 8001988:	187b      	adds	r3, r7, r1
 800198a:	0018      	movs	r0, r3
 800198c:	2303      	movs	r3, #3
 800198e:	001a      	movs	r2, r3
 8001990:	2100      	movs	r1, #0
 8001992:	f006 ff2e 	bl	80087f2 <memset>

	getDateTime(&currentDate, &currentTime, hrtc);
 8001996:	687a      	ldr	r2, [r7, #4]
 8001998:	0031      	movs	r1, r6
 800199a:	000c      	movs	r4, r1
 800199c:	1879      	adds	r1, r7, r1
 800199e:	2310      	movs	r3, #16
 80019a0:	18fb      	adds	r3, r7, r3
 80019a2:	0018      	movs	r0, r3
 80019a4:	f000 f8da 	bl	8001b5c <getDateTime>

	struct alarmTimes a = {0};
 80019a8:	2608      	movs	r6, #8
 80019aa:	19bb      	adds	r3, r7, r6
 80019ac:	2200      	movs	r2, #0
 80019ae:	601a      	str	r2, [r3, #0]
	uint8_t s,m,h,w;
	s = currentTime.sec + 1;
 80019b0:	0021      	movs	r1, r4
 80019b2:	187b      	adds	r3, r7, r1
 80019b4:	789a      	ldrb	r2, [r3, #2]
 80019b6:	2057      	movs	r0, #87	; 0x57
 80019b8:	183b      	adds	r3, r7, r0
 80019ba:	3201      	adds	r2, #1
 80019bc:	701a      	strb	r2, [r3, #0]
	m = currentTime.min + s/60;
 80019be:	187b      	adds	r3, r7, r1
 80019c0:	785c      	ldrb	r4, [r3, #1]
 80019c2:	183b      	adds	r3, r7, r0
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	213c      	movs	r1, #60	; 0x3c
 80019c8:	0018      	movs	r0, r3
 80019ca:	f7fe fba5 	bl	8000118 <__udivsi3>
 80019ce:	0003      	movs	r3, r0
 80019d0:	b2da      	uxtb	r2, r3
 80019d2:	2056      	movs	r0, #86	; 0x56
 80019d4:	183b      	adds	r3, r7, r0
 80019d6:	18a2      	adds	r2, r4, r2
 80019d8:	701a      	strb	r2, [r3, #0]
	h = currentTime.hr + m/60;
 80019da:	210c      	movs	r1, #12
 80019dc:	187b      	adds	r3, r7, r1
 80019de:	781c      	ldrb	r4, [r3, #0]
 80019e0:	0002      	movs	r2, r0
 80019e2:	18bb      	adds	r3, r7, r2
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	213c      	movs	r1, #60	; 0x3c
 80019e8:	0018      	movs	r0, r3
 80019ea:	f7fe fb95 	bl	8000118 <__udivsi3>
 80019ee:	0003      	movs	r3, r0
 80019f0:	b2da      	uxtb	r2, r3
 80019f2:	2155      	movs	r1, #85	; 0x55
 80019f4:	187b      	adds	r3, r7, r1
 80019f6:	18a2      	adds	r2, r4, r2
 80019f8:	701a      	strb	r2, [r3, #0]
	w = currentDate.weekday + h/24;
 80019fa:	2310      	movs	r3, #16
 80019fc:	18fb      	adds	r3, r7, r3
 80019fe:	791c      	ldrb	r4, [r3, #4]
 8001a00:	187b      	adds	r3, r7, r1
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	2118      	movs	r1, #24
 8001a06:	0018      	movs	r0, r3
 8001a08:	f7fe fb86 	bl	8000118 <__udivsi3>
 8001a0c:	0003      	movs	r3, r0
 8001a0e:	b2da      	uxtb	r2, r3
 8001a10:	2354      	movs	r3, #84	; 0x54
 8001a12:	18fb      	adds	r3, r7, r3
 8001a14:	18a2      	adds	r2, r4, r2
 8001a16:	701a      	strb	r2, [r3, #0]
	a.sec = s % 60;
 8001a18:	2057      	movs	r0, #87	; 0x57
 8001a1a:	183b      	adds	r3, r7, r0
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	213c      	movs	r1, #60	; 0x3c
 8001a20:	0018      	movs	r0, r3
 8001a22:	f7fe fbff 	bl	8000224 <__aeabi_uidivmod>
 8001a26:	000b      	movs	r3, r1
 8001a28:	b2da      	uxtb	r2, r3
 8001a2a:	19bb      	adds	r3, r7, r6
 8001a2c:	709a      	strb	r2, [r3, #2]
	a.min = m % 60;
 8001a2e:	2256      	movs	r2, #86	; 0x56
 8001a30:	18bb      	adds	r3, r7, r2
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	213c      	movs	r1, #60	; 0x3c
 8001a36:	0018      	movs	r0, r3
 8001a38:	f7fe fbf4 	bl	8000224 <__aeabi_uidivmod>
 8001a3c:	000b      	movs	r3, r1
 8001a3e:	b2da      	uxtb	r2, r3
 8001a40:	19bb      	adds	r3, r7, r6
 8001a42:	705a      	strb	r2, [r3, #1]
	a.hr = h % 24;
 8001a44:	2155      	movs	r1, #85	; 0x55
 8001a46:	187b      	adds	r3, r7, r1
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	2118      	movs	r1, #24
 8001a4c:	0018      	movs	r0, r3
 8001a4e:	f7fe fbe9 	bl	8000224 <__aeabi_uidivmod>
 8001a52:	000b      	movs	r3, r1
 8001a54:	b2da      	uxtb	r2, r3
 8001a56:	19bb      	adds	r3, r7, r6
 8001a58:	701a      	strb	r2, [r3, #0]
	a.weekday = (w-1) % 7 + 1;
 8001a5a:	2354      	movs	r3, #84	; 0x54
 8001a5c:	18fb      	adds	r3, r7, r3
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	3b01      	subs	r3, #1
 8001a62:	2107      	movs	r1, #7
 8001a64:	0018      	movs	r0, r3
 8001a66:	f7fe fcc7 	bl	80003f8 <__aeabi_idivmod>
 8001a6a:	000b      	movs	r3, r1
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	3301      	adds	r3, #1
 8001a70:	b2da      	uxtb	r2, r3
 8001a72:	0030      	movs	r0, r6
 8001a74:	183b      	adds	r3, r7, r0
 8001a76:	70da      	strb	r2, [r3, #3]

	salarmtime.Hours = a.hr;
 8001a78:	183b      	adds	r3, r7, r0
 8001a7a:	781a      	ldrb	r2, [r3, #0]
 8001a7c:	197b      	adds	r3, r7, r5
 8001a7e:	701a      	strb	r2, [r3, #0]
	salarmtime.Minutes = a.min;
 8001a80:	183b      	adds	r3, r7, r0
 8001a82:	785a      	ldrb	r2, [r3, #1]
 8001a84:	197b      	adds	r3, r7, r5
 8001a86:	705a      	strb	r2, [r3, #1]
	salarmtime.Seconds = a.sec;
 8001a88:	183b      	adds	r3, r7, r0
 8001a8a:	789a      	ldrb	r2, [r3, #2]
 8001a8c:	197b      	adds	r3, r7, r5
 8001a8e:	709a      	strb	r2, [r3, #2]
	salarmtime.TimeFormat = RTC_HOURFORMAT_24;
 8001a90:	197b      	adds	r3, r7, r5
 8001a92:	2200      	movs	r2, #0
 8001a94:	70da      	strb	r2, [r3, #3]
	salarmtime.SubSeconds = 0;
 8001a96:	0029      	movs	r1, r5
 8001a98:	187b      	adds	r3, r7, r1
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	605a      	str	r2, [r3, #4]
	salarmtime.SecondFraction = 0;
 8001a9e:	187b      	adds	r3, r7, r1
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	609a      	str	r2, [r3, #8]
	salarmtime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001aa4:	187b      	adds	r3, r7, r1
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	60da      	str	r2, [r3, #12]
	salarmtime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001aaa:	187b      	adds	r3, r7, r1
 8001aac:	2200      	movs	r2, #0
 8001aae:	611a      	str	r2, [r3, #16]

	salarm.AlarmTime = salarmtime;
 8001ab0:	242c      	movs	r4, #44	; 0x2c
 8001ab2:	193b      	adds	r3, r7, r4
 8001ab4:	187a      	adds	r2, r7, r1
 8001ab6:	ca62      	ldmia	r2!, {r1, r5, r6}
 8001ab8:	c362      	stmia	r3!, {r1, r5, r6}
 8001aba:	ca22      	ldmia	r2!, {r1, r5}
 8001abc:	c322      	stmia	r3!, {r1, r5}
	salarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001abe:	193b      	adds	r3, r7, r4
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	615a      	str	r2, [r3, #20]
	salarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001ac4:	193b      	adds	r3, r7, r4
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	619a      	str	r2, [r3, #24]
	salarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_WEEKDAY;
 8001aca:	193b      	adds	r3, r7, r4
 8001acc:	2280      	movs	r2, #128	; 0x80
 8001ace:	05d2      	lsls	r2, r2, #23
 8001ad0:	61da      	str	r2, [r3, #28]
	salarm.AlarmDateWeekDay = a.weekday;
 8001ad2:	183b      	adds	r3, r7, r0
 8001ad4:	78d9      	ldrb	r1, [r3, #3]
 8001ad6:	193b      	adds	r3, r7, r4
 8001ad8:	2220      	movs	r2, #32
 8001ada:	5499      	strb	r1, [r3, r2]
	salarm.Alarm = RTC_ALARM_B;			// change if using different alarm
 8001adc:	193b      	adds	r3, r7, r4
 8001ade:	2280      	movs	r2, #128	; 0x80
 8001ae0:	0092      	lsls	r2, r2, #2
 8001ae2:	625a      	str	r2, [r3, #36]	; 0x24

	// do nothing until done
	HAL_RTC_SetAlarm_IT(hrtc, &salarm, RTC_FORMAT_BIN);
 8001ae4:	1939      	adds	r1, r7, r4
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	0018      	movs	r0, r3
 8001aec:	f004 ffec 	bl	8006ac8 <HAL_RTC_SetAlarm_IT>
}
 8001af0:	46c0      	nop			; (mov r8, r8)
 8001af2:	46bd      	mov	sp, r7
 8001af4:	b017      	add	sp, #92	; 0x5c
 8001af6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001af8 <HAL_RTC_AlarmAEventCallback>:

// ---- callbacks for interrupts ----
// used for alarm function in project
// meant to send signal to use motor
// change to use hw timer so signal is temporary
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
	// change pin to whatever's accessible
	// using PC0
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_0);
 8001b00:	4b0a      	ldr	r3, [pc, #40]	; (8001b2c <HAL_RTC_AlarmAEventCallback+0x34>)
 8001b02:	2101      	movs	r1, #1
 8001b04:	0018      	movs	r0, r3
 8001b06:	f003 fc9d 	bl	8005444 <HAL_GPIO_TogglePin>

	HAL_RTC_DeactivateAlarm(hrtc, RTC_ALARM_A);
 8001b0a:	2380      	movs	r3, #128	; 0x80
 8001b0c:	005a      	lsls	r2, r3, #1
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	0011      	movs	r1, r2
 8001b12:	0018      	movs	r0, r3
 8001b14:	f005 f924 	bl	8006d60 <HAL_RTC_DeactivateAlarm>
	isAlarmRunning = 0;
 8001b18:	4b05      	ldr	r3, [pc, #20]	; (8001b30 <HAL_RTC_AlarmAEventCallback+0x38>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	701a      	strb	r2, [r3, #0]
	updateFace.alarm = 1;
 8001b1e:	4b05      	ldr	r3, [pc, #20]	; (8001b34 <HAL_RTC_AlarmAEventCallback+0x3c>)
 8001b20:	2201      	movs	r2, #1
 8001b22:	709a      	strb	r2, [r3, #2]
}
 8001b24:	46c0      	nop			; (mov r8, r8)
 8001b26:	46bd      	mov	sp, r7
 8001b28:	b002      	add	sp, #8
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	50000800 	.word	0x50000800
 8001b30:	2000014c 	.word	0x2000014c
 8001b34:	20000140 	.word	0x20000140

08001b38 <HAL_RTCEx_AlarmBEventCallback>:

void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc) {
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
//	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_1);
//	HAL_RTC_DeactivateAlarm(hrtc, RTC_ALARM_B);
//	isTimerRunning = 0;
//	updateFace.timer = 1;

	updateFace.clock = 1;
 8001b40:	4b05      	ldr	r3, [pc, #20]	; (8001b58 <HAL_RTCEx_AlarmBEventCallback+0x20>)
 8001b42:	2201      	movs	r2, #1
 8001b44:	701a      	strb	r2, [r3, #0]
	setClockAlarm(hrtc);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	0018      	movs	r0, r3
 8001b4a:	f7ff feff 	bl	800194c <setClockAlarm>
}
 8001b4e:	46c0      	nop			; (mov r8, r8)
 8001b50:	46bd      	mov	sp, r7
 8001b52:	b002      	add	sp, #8
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	46c0      	nop			; (mov r8, r8)
 8001b58:	20000140 	.word	0x20000140

08001b5c <getDateTime>:
	d->date = sdate.Date;
	d->weekday = sdate.WeekDay;
}

// not using getDate and getTime for efficiency (?)
void getDateTime(struct dates *d, struct times *t, RTC_HandleTypeDef *hrtc) {
 8001b5c:	b590      	push	{r4, r7, lr}
 8001b5e:	b08b      	sub	sp, #44	; 0x2c
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	60f8      	str	r0, [r7, #12]
 8001b64:	60b9      	str	r1, [r7, #8]
 8001b66:	607a      	str	r2, [r7, #4]
	RTC_DateTypeDef sdate;
	RTC_TimeTypeDef stime;

	// programming manual says to read time after date. something shadow registers.
	// not done automatically in HAL
	HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN);
 8001b68:	2310      	movs	r3, #16
 8001b6a:	18f9      	adds	r1, r7, r3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	0018      	movs	r0, r3
 8001b72:	f004 fe51 	bl	8006818 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(hrtc, &sdate, RTC_FORMAT_BIN);
 8001b76:	2424      	movs	r4, #36	; 0x24
 8001b78:	1939      	adds	r1, r7, r4
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	0018      	movs	r0, r3
 8001b80:	f004 ff54 	bl	8006a2c <HAL_RTC_GetDate>

	d->yr = sdate.Year > 50 ? sdate.Year+1900 : sdate.Year+2000;		// make assumptions on whether it's 19xx or 20xx
 8001b84:	193b      	adds	r3, r7, r4
 8001b86:	78db      	ldrb	r3, [r3, #3]
 8001b88:	2b32      	cmp	r3, #50	; 0x32
 8001b8a:	d908      	bls.n	8001b9e <getDateTime+0x42>
 8001b8c:	2324      	movs	r3, #36	; 0x24
 8001b8e:	18fb      	adds	r3, r7, r3
 8001b90:	78db      	ldrb	r3, [r3, #3]
 8001b92:	b29b      	uxth	r3, r3
 8001b94:	4a16      	ldr	r2, [pc, #88]	; (8001bf0 <getDateTime+0x94>)
 8001b96:	4694      	mov	ip, r2
 8001b98:	4463      	add	r3, ip
 8001b9a:	b29b      	uxth	r3, r3
 8001b9c:	e008      	b.n	8001bb0 <getDateTime+0x54>
 8001b9e:	2324      	movs	r3, #36	; 0x24
 8001ba0:	18fb      	adds	r3, r7, r3
 8001ba2:	78db      	ldrb	r3, [r3, #3]
 8001ba4:	b29b      	uxth	r3, r3
 8001ba6:	22fa      	movs	r2, #250	; 0xfa
 8001ba8:	00d2      	lsls	r2, r2, #3
 8001baa:	4694      	mov	ip, r2
 8001bac:	4463      	add	r3, ip
 8001bae:	b29b      	uxth	r3, r3
 8001bb0:	68fa      	ldr	r2, [r7, #12]
 8001bb2:	8013      	strh	r3, [r2, #0]
	d->month = sdate.Month;
 8001bb4:	2124      	movs	r1, #36	; 0x24
 8001bb6:	187b      	adds	r3, r7, r1
 8001bb8:	785a      	ldrb	r2, [r3, #1]
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	709a      	strb	r2, [r3, #2]
	d->date = sdate.Date;
 8001bbe:	187b      	adds	r3, r7, r1
 8001bc0:	789a      	ldrb	r2, [r3, #2]
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	70da      	strb	r2, [r3, #3]
	d->weekday = sdate.WeekDay;
 8001bc6:	187b      	adds	r3, r7, r1
 8001bc8:	781a      	ldrb	r2, [r3, #0]
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	711a      	strb	r2, [r3, #4]

	t->hr = stime.Hours;
 8001bce:	2110      	movs	r1, #16
 8001bd0:	187b      	adds	r3, r7, r1
 8001bd2:	781a      	ldrb	r2, [r3, #0]
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	701a      	strb	r2, [r3, #0]
	t->min = stime.Minutes;
 8001bd8:	187b      	adds	r3, r7, r1
 8001bda:	785a      	ldrb	r2, [r3, #1]
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	705a      	strb	r2, [r3, #1]
	t->sec = stime.Seconds;
 8001be0:	187b      	adds	r3, r7, r1
 8001be2:	789a      	ldrb	r2, [r3, #2]
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	709a      	strb	r2, [r3, #2]
}
 8001be8:	46c0      	nop			; (mov r8, r8)
 8001bea:	46bd      	mov	sp, r7
 8001bec:	b00b      	add	sp, #44	; 0x2c
 8001bee:	bd90      	pop	{r4, r7, pc}
 8001bf0:	0000076c 	.word	0x0000076c

08001bf4 <timeToSeconds>:
// ---- end of clock get functions ----

// ---- converters ----
uint32_t timeToSeconds(struct times *t) {
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
	return t->sec + t->min*60 + t->hr*3600;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	789b      	ldrb	r3, [r3, #2]
 8001c00:	0019      	movs	r1, r3
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	785b      	ldrb	r3, [r3, #1]
 8001c06:	001a      	movs	r2, r3
 8001c08:	0013      	movs	r3, r2
 8001c0a:	011b      	lsls	r3, r3, #4
 8001c0c:	1a9b      	subs	r3, r3, r2
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	18c9      	adds	r1, r1, r3
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	781b      	ldrb	r3, [r3, #0]
 8001c16:	001a      	movs	r2, r3
 8001c18:	0013      	movs	r3, r2
 8001c1a:	011b      	lsls	r3, r3, #4
 8001c1c:	1a9b      	subs	r3, r3, r2
 8001c1e:	011a      	lsls	r2, r3, #4
 8001c20:	1ad2      	subs	r2, r2, r3
 8001c22:	0113      	lsls	r3, r2, #4
 8001c24:	001a      	movs	r2, r3
 8001c26:	0013      	movs	r3, r2
 8001c28:	18cb      	adds	r3, r1, r3
}
 8001c2a:	0018      	movs	r0, r3
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	b002      	add	sp, #8
 8001c30:	bd80      	pop	{r7, pc}

08001c32 <secondsToTime>:

void secondsToTime(struct times *t, uint32_t seconds) {
 8001c32:	b580      	push	{r7, lr}
 8001c34:	b082      	sub	sp, #8
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	6078      	str	r0, [r7, #4]
 8001c3a:	6039      	str	r1, [r7, #0]
	t->hr = seconds / 3600;
 8001c3c:	683a      	ldr	r2, [r7, #0]
 8001c3e:	23e1      	movs	r3, #225	; 0xe1
 8001c40:	0119      	lsls	r1, r3, #4
 8001c42:	0010      	movs	r0, r2
 8001c44:	f7fe fa68 	bl	8000118 <__udivsi3>
 8001c48:	0003      	movs	r3, r0
 8001c4a:	b2da      	uxtb	r2, r3
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	701a      	strb	r2, [r3, #0]
	seconds %= 3600;
 8001c50:	683a      	ldr	r2, [r7, #0]
 8001c52:	23e1      	movs	r3, #225	; 0xe1
 8001c54:	0119      	lsls	r1, r3, #4
 8001c56:	0010      	movs	r0, r2
 8001c58:	f7fe fae4 	bl	8000224 <__aeabi_uidivmod>
 8001c5c:	000b      	movs	r3, r1
 8001c5e:	603b      	str	r3, [r7, #0]
	t->min = seconds / 60;
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	213c      	movs	r1, #60	; 0x3c
 8001c64:	0018      	movs	r0, r3
 8001c66:	f7fe fa57 	bl	8000118 <__udivsi3>
 8001c6a:	0003      	movs	r3, r0
 8001c6c:	b2da      	uxtb	r2, r3
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	705a      	strb	r2, [r3, #1]
	seconds %= 60;
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	213c      	movs	r1, #60	; 0x3c
 8001c76:	0018      	movs	r0, r3
 8001c78:	f7fe fad4 	bl	8000224 <__aeabi_uidivmod>
 8001c7c:	000b      	movs	r3, r1
 8001c7e:	603b      	str	r3, [r7, #0]
	t->sec = seconds;
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	b2da      	uxtb	r2, r3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	709a      	strb	r2, [r3, #2]
}
 8001c88:	46c0      	nop			; (mov r8, r8)
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	b002      	add	sp, #8
 8001c8e:	bd80      	pop	{r7, pc}

08001c90 <weekdayCalculator>:
 * weekdays is 0-6, with 0 being sunday. hal uses 1=monday, 7=sunday - just call with % 7 to integrate with hal
 * months given in 1-12, with 1 being january. hal uses the same setup
 * rtc represents years with last 2 digits only. make sure year has all 4 numbers
 * should be accurate for any gregorian date
 */
uint8_t weekdayCalculator(uint16_t year, uint8_t month, uint8_t day) {
 8001c90:	b590      	push	{r4, r7, lr}
 8001c92:	b085      	sub	sp, #20
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	0004      	movs	r4, r0
 8001c98:	0008      	movs	r0, r1
 8001c9a:	0011      	movs	r1, r2
 8001c9c:	1dbb      	adds	r3, r7, #6
 8001c9e:	1c22      	adds	r2, r4, #0
 8001ca0:	801a      	strh	r2, [r3, #0]
 8001ca2:	1d7b      	adds	r3, r7, #5
 8001ca4:	1c02      	adds	r2, r0, #0
 8001ca6:	701a      	strb	r2, [r3, #0]
 8001ca8:	1d3b      	adds	r3, r7, #4
 8001caa:	1c0a      	adds	r2, r1, #0
 8001cac:	701a      	strb	r2, [r3, #0]
	static uint8_t table[] = {0, 3, 2, 5, 0, 3, 5, 1, 4, 6, 2, 4};
	if (month < 3) year--;
 8001cae:	1d7b      	adds	r3, r7, #5
 8001cb0:	781b      	ldrb	r3, [r3, #0]
 8001cb2:	2b02      	cmp	r3, #2
 8001cb4:	d804      	bhi.n	8001cc0 <weekdayCalculator+0x30>
 8001cb6:	1dbb      	adds	r3, r7, #6
 8001cb8:	881a      	ldrh	r2, [r3, #0]
 8001cba:	1dbb      	adds	r3, r7, #6
 8001cbc:	3a01      	subs	r2, #1
 8001cbe:	801a      	strh	r2, [r3, #0]
	uint16_t temp = (year + year/4 - year/100 + year/400 + table[month-1] + day) % 7;
 8001cc0:	1dbb      	adds	r3, r7, #6
 8001cc2:	881b      	ldrh	r3, [r3, #0]
 8001cc4:	1dba      	adds	r2, r7, #6
 8001cc6:	8812      	ldrh	r2, [r2, #0]
 8001cc8:	0892      	lsrs	r2, r2, #2
 8001cca:	b292      	uxth	r2, r2
 8001ccc:	189c      	adds	r4, r3, r2
 8001cce:	1dbb      	adds	r3, r7, #6
 8001cd0:	881b      	ldrh	r3, [r3, #0]
 8001cd2:	2164      	movs	r1, #100	; 0x64
 8001cd4:	0018      	movs	r0, r3
 8001cd6:	f7fe fa1f 	bl	8000118 <__udivsi3>
 8001cda:	0003      	movs	r3, r0
 8001cdc:	b29b      	uxth	r3, r3
 8001cde:	1ae4      	subs	r4, r4, r3
 8001ce0:	1dbb      	adds	r3, r7, #6
 8001ce2:	881a      	ldrh	r2, [r3, #0]
 8001ce4:	23c8      	movs	r3, #200	; 0xc8
 8001ce6:	0059      	lsls	r1, r3, #1
 8001ce8:	0010      	movs	r0, r2
 8001cea:	f7fe fa15 	bl	8000118 <__udivsi3>
 8001cee:	0003      	movs	r3, r0
 8001cf0:	b29b      	uxth	r3, r3
 8001cf2:	18e3      	adds	r3, r4, r3
 8001cf4:	1d7a      	adds	r2, r7, #5
 8001cf6:	7812      	ldrb	r2, [r2, #0]
 8001cf8:	3a01      	subs	r2, #1
 8001cfa:	490b      	ldr	r1, [pc, #44]	; (8001d28 <weekdayCalculator+0x98>)
 8001cfc:	5c8a      	ldrb	r2, [r1, r2]
 8001cfe:	189a      	adds	r2, r3, r2
 8001d00:	1d3b      	adds	r3, r7, #4
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	18d3      	adds	r3, r2, r3
 8001d06:	2107      	movs	r1, #7
 8001d08:	0018      	movs	r0, r3
 8001d0a:	f7fe fb75 	bl	80003f8 <__aeabi_idivmod>
 8001d0e:	000b      	movs	r3, r1
 8001d10:	001a      	movs	r2, r3
 8001d12:	210e      	movs	r1, #14
 8001d14:	187b      	adds	r3, r7, r1
 8001d16:	801a      	strh	r2, [r3, #0]
	return temp;
 8001d18:	187b      	adds	r3, r7, r1
 8001d1a:	881b      	ldrh	r3, [r3, #0]
 8001d1c:	b2db      	uxtb	r3, r3
}
 8001d1e:	0018      	movs	r0, r3
 8001d20:	46bd      	mov	sp, r7
 8001d22:	b005      	add	sp, #20
 8001d24:	bd90      	pop	{r4, r7, pc}
 8001d26:	46c0      	nop			; (mov r8, r8)
 8001d28:	20000000 	.word	0x20000000

08001d2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d30:	f002 fc88 	bl	8004644 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d34:	f000 f846 	bl	8001dc4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */
//  peripheralClockConfig();
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d38:	f000 fc54 	bl	80025e4 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001d3c:	f000 fa04 	bl	8002148 <MX_SPI1_Init>
  MX_ADC_Init();
 8001d40:	f000 f8c8 	bl	8001ed4 <MX_ADC_Init>
  MX_RTC_Init();
 8001d44:	f000 f952 	bl	8001fec <MX_RTC_Init>
  MX_TIM21_Init();
 8001d48:	f000 fb08 	bl	800235c <MX_TIM21_Init>
  MX_LPTIM1_Init();
 8001d4c:	f000 f926 	bl	8001f9c <MX_LPTIM1_Init>
  MX_DMA_Init();
 8001d50:	f000 fc2a 	bl	80025a8 <MX_DMA_Init>
  MX_TIM22_Init();
 8001d54:	f000 fb9a 	bl	800248c <MX_TIM22_Init>
  MX_TIM2_Init();
 8001d58:	f000 fa32 	bl	80021c0 <MX_TIM2_Init>
  MX_TIM6_Init();
 8001d5c:	f000 fac4 	bl	80022e8 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  	/* initialization for display */
	HAL_Delay(2000);
 8001d60:	23fa      	movs	r3, #250	; 0xfa
 8001d62:	00db      	lsls	r3, r3, #3
 8001d64:	0018      	movs	r0, r3
 8001d66:	f002 fccd 	bl	8004704 <HAL_Delay>
	TFT_startup(&hspi1);
 8001d6a:	4b11      	ldr	r3, [pc, #68]	; (8001db0 <main+0x84>)
 8001d6c:	0018      	movs	r0, r3
 8001d6e:	f7fe fc59 	bl	8000624 <TFT_startup>
	clearScreen(ST77XX_RED, &hspi1);
 8001d72:	4a0f      	ldr	r2, [pc, #60]	; (8001db0 <main+0x84>)
 8001d74:	23f8      	movs	r3, #248	; 0xf8
 8001d76:	021b      	lsls	r3, r3, #8
 8001d78:	0011      	movs	r1, r2
 8001d7a:	0018      	movs	r0, r3
 8001d7c:	f7ff fcec 	bl	8001758 <clearScreen>

	/* start updating display for ui */
	initFace();
 8001d80:	f001 ff68 	bl	8003c54 <initFace>
//	runClockDisplay();
	setClockAlarm(&hrtc);
 8001d84:	4b0b      	ldr	r3, [pc, #44]	; (8001db4 <main+0x88>)
 8001d86:	0018      	movs	r0, r3
 8001d88:	f7ff fde0 	bl	800194c <setClockAlarm>
	runTimerStopwatchBase(&htim21);
 8001d8c:	4b0a      	ldr	r3, [pc, #40]	; (8001db8 <main+0x8c>)
 8001d8e:	0018      	movs	r0, r3
 8001d90:	f002 fc22 	bl	80045d8 <runTimerStopwatchBase>
//	  lineTest(&hspi1);
//	  charTest(&hspi1);
//	  textTest(bg, &hspi1);

	  // ui/nav tests or full run. uncomment when ready
	  updateWithButtons(&hrtc, &htim21, &htim2, &htim6);
 8001d94:	4b09      	ldr	r3, [pc, #36]	; (8001dbc <main+0x90>)
 8001d96:	4a0a      	ldr	r2, [pc, #40]	; (8001dc0 <main+0x94>)
 8001d98:	4907      	ldr	r1, [pc, #28]	; (8001db8 <main+0x8c>)
 8001d9a:	4806      	ldr	r0, [pc, #24]	; (8001db4 <main+0x88>)
 8001d9c:	f000 fd02 	bl	80027a4 <updateWithButtons>
	  updateDisplay(&hrtc, &hspi1);
 8001da0:	4a03      	ldr	r2, [pc, #12]	; (8001db0 <main+0x84>)
 8001da2:	4b04      	ldr	r3, [pc, #16]	; (8001db4 <main+0x88>)
 8001da4:	0011      	movs	r1, r2
 8001da6:	0018      	movs	r0, r3
 8001da8:	f001 f968 	bl	800307c <updateDisplay>
	  updateWithButtons(&hrtc, &htim21, &htim2, &htim6);
 8001dac:	e7f2      	b.n	8001d94 <main+0x68>
 8001dae:	46c0      	nop			; (mov r8, r8)
 8001db0:	20000230 	.word	0x20000230
 8001db4:	2000020c 	.word	0x2000020c
 8001db8:	20000368 	.word	0x20000368
 8001dbc:	20000150 	.word	0x20000150
 8001dc0:	20000288 	.word	0x20000288

08001dc4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001dc4:	b590      	push	{r4, r7, lr}
 8001dc6:	b09f      	sub	sp, #124	; 0x7c
 8001dc8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001dca:	2440      	movs	r4, #64	; 0x40
 8001dcc:	193b      	adds	r3, r7, r4
 8001dce:	0018      	movs	r0, r3
 8001dd0:	2338      	movs	r3, #56	; 0x38
 8001dd2:	001a      	movs	r2, r3
 8001dd4:	2100      	movs	r1, #0
 8001dd6:	f006 fd0c 	bl	80087f2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001dda:	232c      	movs	r3, #44	; 0x2c
 8001ddc:	18fb      	adds	r3, r7, r3
 8001dde:	0018      	movs	r0, r3
 8001de0:	2314      	movs	r3, #20
 8001de2:	001a      	movs	r2, r3
 8001de4:	2100      	movs	r1, #0
 8001de6:	f006 fd04 	bl	80087f2 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001dea:	1d3b      	adds	r3, r7, #4
 8001dec:	0018      	movs	r0, r3
 8001dee:	2328      	movs	r3, #40	; 0x28
 8001df0:	001a      	movs	r2, r3
 8001df2:	2100      	movs	r1, #0
 8001df4:	f006 fcfd 	bl	80087f2 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001df8:	4b33      	ldr	r3, [pc, #204]	; (8001ec8 <SystemClock_Config+0x104>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a33      	ldr	r2, [pc, #204]	; (8001ecc <SystemClock_Config+0x108>)
 8001dfe:	401a      	ands	r2, r3
 8001e00:	4b31      	ldr	r3, [pc, #196]	; (8001ec8 <SystemClock_Config+0x104>)
 8001e02:	2180      	movs	r1, #128	; 0x80
 8001e04:	0109      	lsls	r1, r1, #4
 8001e06:	430a      	orrs	r2, r1
 8001e08:	601a      	str	r2, [r3, #0]
  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8001e0a:	f003 fca3 	bl	8005754 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001e0e:	4b30      	ldr	r3, [pc, #192]	; (8001ed0 <SystemClock_Config+0x10c>)
 8001e10:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e12:	4b2f      	ldr	r3, [pc, #188]	; (8001ed0 <SystemClock_Config+0x10c>)
 8001e14:	492d      	ldr	r1, [pc, #180]	; (8001ecc <SystemClock_Config+0x108>)
 8001e16:	400a      	ands	r2, r1
 8001e18:	651a      	str	r2, [r3, #80]	; 0x50
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 8001e1a:	193b      	adds	r3, r7, r4
 8001e1c:	2226      	movs	r2, #38	; 0x26
 8001e1e:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001e20:	193b      	adds	r3, r7, r4
 8001e22:	2280      	movs	r2, #128	; 0x80
 8001e24:	0052      	lsls	r2, r2, #1
 8001e26:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e28:	0021      	movs	r1, r4
 8001e2a:	187b      	adds	r3, r7, r1
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e30:	187b      	adds	r3, r7, r1
 8001e32:	2210      	movs	r2, #16
 8001e34:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001e36:	187b      	adds	r3, r7, r1
 8001e38:	2201      	movs	r2, #1
 8001e3a:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e3c:	187b      	adds	r3, r7, r1
 8001e3e:	2202      	movs	r2, #2
 8001e40:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001e42:	187b      	adds	r3, r7, r1
 8001e44:	2200      	movs	r2, #0
 8001e46:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8001e48:	187b      	adds	r3, r7, r1
 8001e4a:	2280      	movs	r2, #128	; 0x80
 8001e4c:	02d2      	lsls	r2, r2, #11
 8001e4e:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8001e50:	187b      	adds	r3, r7, r1
 8001e52:	2280      	movs	r2, #128	; 0x80
 8001e54:	03d2      	lsls	r2, r2, #15
 8001e56:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e58:	187b      	adds	r3, r7, r1
 8001e5a:	0018      	movs	r0, r3
 8001e5c:	f003 fc88 	bl	8005770 <HAL_RCC_OscConfig>
 8001e60:	1e03      	subs	r3, r0, #0
 8001e62:	d001      	beq.n	8001e68 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8001e64:	f000 fc50 	bl	8002708 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e68:	212c      	movs	r1, #44	; 0x2c
 8001e6a:	187b      	adds	r3, r7, r1
 8001e6c:	220f      	movs	r2, #15
 8001e6e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e70:	187b      	adds	r3, r7, r1
 8001e72:	2203      	movs	r2, #3
 8001e74:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e76:	187b      	adds	r3, r7, r1
 8001e78:	2200      	movs	r2, #0
 8001e7a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001e7c:	187b      	adds	r3, r7, r1
 8001e7e:	2200      	movs	r2, #0
 8001e80:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e82:	187b      	adds	r3, r7, r1
 8001e84:	2200      	movs	r2, #0
 8001e86:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001e88:	187b      	adds	r3, r7, r1
 8001e8a:	2101      	movs	r1, #1
 8001e8c:	0018      	movs	r0, r3
 8001e8e:	f004 f83f 	bl	8005f10 <HAL_RCC_ClockConfig>
 8001e92:	1e03      	subs	r3, r0, #0
 8001e94:	d001      	beq.n	8001e9a <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8001e96:	f000 fc37 	bl	8002708 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_LPTIM1;
 8001e9a:	1d3b      	adds	r3, r7, #4
 8001e9c:	22a0      	movs	r2, #160	; 0xa0
 8001e9e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001ea0:	1d3b      	adds	r3, r7, #4
 8001ea2:	2280      	movs	r2, #128	; 0x80
 8001ea4:	0252      	lsls	r2, r2, #9
 8001ea6:	605a      	str	r2, [r3, #4]
  PeriphClkInit.LptimClockSelection = RCC_LPTIM1CLKSOURCE_LSE;
 8001ea8:	1d3b      	adds	r3, r7, #4
 8001eaa:	22c0      	movs	r2, #192	; 0xc0
 8001eac:	0312      	lsls	r2, r2, #12
 8001eae:	621a      	str	r2, [r3, #32]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001eb0:	1d3b      	adds	r3, r7, #4
 8001eb2:	0018      	movs	r0, r3
 8001eb4:	f004 f9da 	bl	800626c <HAL_RCCEx_PeriphCLKConfig>
 8001eb8:	1e03      	subs	r3, r0, #0
 8001eba:	d001      	beq.n	8001ec0 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8001ebc:	f000 fc24 	bl	8002708 <Error_Handler>
  }
}
 8001ec0:	46c0      	nop			; (mov r8, r8)
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	b01f      	add	sp, #124	; 0x7c
 8001ec6:	bd90      	pop	{r4, r7, pc}
 8001ec8:	40007000 	.word	0x40007000
 8001ecc:	ffffe7ff 	.word	0xffffe7ff
 8001ed0:	40021000 	.word	0x40021000

08001ed4 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001eda:	003b      	movs	r3, r7
 8001edc:	0018      	movs	r0, r3
 8001ede:	2308      	movs	r3, #8
 8001ee0:	001a      	movs	r2, r3
 8001ee2:	2100      	movs	r1, #0
 8001ee4:	f006 fc85 	bl	80087f2 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc.Instance = ADC1;
 8001ee8:	4b2a      	ldr	r3, [pc, #168]	; (8001f94 <MX_ADC_Init+0xc0>)
 8001eea:	4a2b      	ldr	r2, [pc, #172]	; (8001f98 <MX_ADC_Init+0xc4>)
 8001eec:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8001eee:	4b29      	ldr	r3, [pc, #164]	; (8001f94 <MX_ADC_Init+0xc0>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001ef4:	4b27      	ldr	r3, [pc, #156]	; (8001f94 <MX_ADC_Init+0xc0>)
 8001ef6:	2280      	movs	r2, #128	; 0x80
 8001ef8:	05d2      	lsls	r2, r2, #23
 8001efa:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001efc:	4b25      	ldr	r3, [pc, #148]	; (8001f94 <MX_ADC_Init+0xc0>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001f02:	4b24      	ldr	r3, [pc, #144]	; (8001f94 <MX_ADC_Init+0xc0>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8001f08:	4b22      	ldr	r3, [pc, #136]	; (8001f94 <MX_ADC_Init+0xc0>)
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001f0e:	4b21      	ldr	r3, [pc, #132]	; (8001f94 <MX_ADC_Init+0xc0>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8001f14:	4b1f      	ldr	r3, [pc, #124]	; (8001f94 <MX_ADC_Init+0xc0>)
 8001f16:	2220      	movs	r2, #32
 8001f18:	2100      	movs	r1, #0
 8001f1a:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001f1c:	4b1d      	ldr	r3, [pc, #116]	; (8001f94 <MX_ADC_Init+0xc0>)
 8001f1e:	2221      	movs	r2, #33	; 0x21
 8001f20:	2100      	movs	r1, #0
 8001f22:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001f24:	4b1b      	ldr	r3, [pc, #108]	; (8001f94 <MX_ADC_Init+0xc0>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001f2a:	4b1a      	ldr	r3, [pc, #104]	; (8001f94 <MX_ADC_Init+0xc0>)
 8001f2c:	22c2      	movs	r2, #194	; 0xc2
 8001f2e:	32ff      	adds	r2, #255	; 0xff
 8001f30:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001f32:	4b18      	ldr	r3, [pc, #96]	; (8001f94 <MX_ADC_Init+0xc0>)
 8001f34:	222c      	movs	r2, #44	; 0x2c
 8001f36:	2100      	movs	r1, #0
 8001f38:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001f3a:	4b16      	ldr	r3, [pc, #88]	; (8001f94 <MX_ADC_Init+0xc0>)
 8001f3c:	2204      	movs	r2, #4
 8001f3e:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001f40:	4b14      	ldr	r3, [pc, #80]	; (8001f94 <MX_ADC_Init+0xc0>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8001f46:	4b13      	ldr	r3, [pc, #76]	; (8001f94 <MX_ADC_Init+0xc0>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8001f4c:	4b11      	ldr	r3, [pc, #68]	; (8001f94 <MX_ADC_Init+0xc0>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8001f52:	4b10      	ldr	r3, [pc, #64]	; (8001f94 <MX_ADC_Init+0xc0>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001f58:	4b0e      	ldr	r3, [pc, #56]	; (8001f94 <MX_ADC_Init+0xc0>)
 8001f5a:	0018      	movs	r0, r3
 8001f5c:	f002 fbf0 	bl	8004740 <HAL_ADC_Init>
 8001f60:	1e03      	subs	r3, r0, #0
 8001f62:	d001      	beq.n	8001f68 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8001f64:	f000 fbd0 	bl	8002708 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001f68:	003b      	movs	r3, r7
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8001f6e:	003b      	movs	r3, r7
 8001f70:	2280      	movs	r2, #128	; 0x80
 8001f72:	0152      	lsls	r2, r2, #5
 8001f74:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001f76:	003a      	movs	r2, r7
 8001f78:	4b06      	ldr	r3, [pc, #24]	; (8001f94 <MX_ADC_Init+0xc0>)
 8001f7a:	0011      	movs	r1, r2
 8001f7c:	0018      	movs	r0, r3
 8001f7e:	f002 fd53 	bl	8004a28 <HAL_ADC_ConfigChannel>
 8001f82:	1e03      	subs	r3, r0, #0
 8001f84:	d001      	beq.n	8001f8a <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8001f86:	f000 fbbf 	bl	8002708 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8001f8a:	46c0      	nop			; (mov r8, r8)
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	b002      	add	sp, #8
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	46c0      	nop			; (mov r8, r8)
 8001f94:	200002c4 	.word	0x200002c4
 8001f98:	40012400 	.word	0x40012400

08001f9c <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8001fa0:	4b0f      	ldr	r3, [pc, #60]	; (8001fe0 <MX_LPTIM1_Init+0x44>)
 8001fa2:	4a10      	ldr	r2, [pc, #64]	; (8001fe4 <MX_LPTIM1_Init+0x48>)
 8001fa4:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8001fa6:	4b0e      	ldr	r3, [pc, #56]	; (8001fe0 <MX_LPTIM1_Init+0x44>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8001fac:	4b0c      	ldr	r3, [pc, #48]	; (8001fe0 <MX_LPTIM1_Init+0x44>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8001fb2:	4b0b      	ldr	r3, [pc, #44]	; (8001fe0 <MX_LPTIM1_Init+0x44>)
 8001fb4:	4a0c      	ldr	r2, [pc, #48]	; (8001fe8 <MX_LPTIM1_Init+0x4c>)
 8001fb6:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8001fb8:	4b09      	ldr	r3, [pc, #36]	; (8001fe0 <MX_LPTIM1_Init+0x44>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8001fbe:	4b08      	ldr	r3, [pc, #32]	; (8001fe0 <MX_LPTIM1_Init+0x44>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8001fc4:	4b06      	ldr	r3, [pc, #24]	; (8001fe0 <MX_LPTIM1_Init+0x44>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8001fca:	4b05      	ldr	r3, [pc, #20]	; (8001fe0 <MX_LPTIM1_Init+0x44>)
 8001fcc:	0018      	movs	r0, r3
 8001fce:	f003 fa67 	bl	80054a0 <HAL_LPTIM_Init>
 8001fd2:	1e03      	subs	r3, r0, #0
 8001fd4:	d001      	beq.n	8001fda <MX_LPTIM1_Init+0x3e>
  {
    Error_Handler();
 8001fd6:	f000 fb97 	bl	8002708 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 8001fda:	46c0      	nop			; (mov r8, r8)
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	200001dc 	.word	0x200001dc
 8001fe4:	40007c00 	.word	0x40007c00
 8001fe8:	0000ffff 	.word	0x0000ffff

08001fec <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b090      	sub	sp, #64	; 0x40
 8001ff0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001ff2:	232c      	movs	r3, #44	; 0x2c
 8001ff4:	18fb      	adds	r3, r7, r3
 8001ff6:	0018      	movs	r0, r3
 8001ff8:	2314      	movs	r3, #20
 8001ffa:	001a      	movs	r2, r3
 8001ffc:	2100      	movs	r1, #0
 8001ffe:	f006 fbf8 	bl	80087f2 <memset>
  RTC_DateTypeDef sDate = {0};
 8002002:	2328      	movs	r3, #40	; 0x28
 8002004:	18fb      	adds	r3, r7, r3
 8002006:	2200      	movs	r2, #0
 8002008:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 800200a:	003b      	movs	r3, r7
 800200c:	0018      	movs	r0, r3
 800200e:	2328      	movs	r3, #40	; 0x28
 8002010:	001a      	movs	r2, r3
 8002012:	2100      	movs	r1, #0
 8002014:	f006 fbed 	bl	80087f2 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8002018:	4b49      	ldr	r3, [pc, #292]	; (8002140 <MX_RTC_Init+0x154>)
 800201a:	4a4a      	ldr	r2, [pc, #296]	; (8002144 <MX_RTC_Init+0x158>)
 800201c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800201e:	4b48      	ldr	r3, [pc, #288]	; (8002140 <MX_RTC_Init+0x154>)
 8002020:	2200      	movs	r2, #0
 8002022:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002024:	4b46      	ldr	r3, [pc, #280]	; (8002140 <MX_RTC_Init+0x154>)
 8002026:	227f      	movs	r2, #127	; 0x7f
 8002028:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800202a:	4b45      	ldr	r3, [pc, #276]	; (8002140 <MX_RTC_Init+0x154>)
 800202c:	22ff      	movs	r2, #255	; 0xff
 800202e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002030:	4b43      	ldr	r3, [pc, #268]	; (8002140 <MX_RTC_Init+0x154>)
 8002032:	2200      	movs	r2, #0
 8002034:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002036:	4b42      	ldr	r3, [pc, #264]	; (8002140 <MX_RTC_Init+0x154>)
 8002038:	2200      	movs	r2, #0
 800203a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800203c:	4b40      	ldr	r3, [pc, #256]	; (8002140 <MX_RTC_Init+0x154>)
 800203e:	2200      	movs	r2, #0
 8002040:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002042:	4b3f      	ldr	r3, [pc, #252]	; (8002140 <MX_RTC_Init+0x154>)
 8002044:	2200      	movs	r2, #0
 8002046:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002048:	4b3d      	ldr	r3, [pc, #244]	; (8002140 <MX_RTC_Init+0x154>)
 800204a:	0018      	movs	r0, r3
 800204c:	f004 fa82 	bl	8006554 <HAL_RTC_Init>
 8002050:	1e03      	subs	r3, r0, #0
 8002052:	d001      	beq.n	8002058 <MX_RTC_Init+0x6c>
  {
    Error_Handler();
 8002054:	f000 fb58 	bl	8002708 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0;
 8002058:	212c      	movs	r1, #44	; 0x2c
 800205a:	187b      	adds	r3, r7, r1
 800205c:	2200      	movs	r2, #0
 800205e:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0;
 8002060:	187b      	adds	r3, r7, r1
 8002062:	2200      	movs	r2, #0
 8002064:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 8002066:	187b      	adds	r3, r7, r1
 8002068:	2200      	movs	r2, #0
 800206a:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800206c:	187b      	adds	r3, r7, r1
 800206e:	2200      	movs	r2, #0
 8002070:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002072:	187b      	adds	r3, r7, r1
 8002074:	2200      	movs	r2, #0
 8002076:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8002078:	1879      	adds	r1, r7, r1
 800207a:	4b31      	ldr	r3, [pc, #196]	; (8002140 <MX_RTC_Init+0x154>)
 800207c:	2200      	movs	r2, #0
 800207e:	0018      	movs	r0, r3
 8002080:	f004 fb06 	bl	8006690 <HAL_RTC_SetTime>
 8002084:	1e03      	subs	r3, r0, #0
 8002086:	d001      	beq.n	800208c <MX_RTC_Init+0xa0>
  {
    Error_Handler();
 8002088:	f000 fb3e 	bl	8002708 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SUNDAY;
 800208c:	2128      	movs	r1, #40	; 0x28
 800208e:	187b      	adds	r3, r7, r1
 8002090:	2207      	movs	r2, #7
 8002092:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_DECEMBER;
 8002094:	187b      	adds	r3, r7, r1
 8002096:	2212      	movs	r2, #18
 8002098:	705a      	strb	r2, [r3, #1]
  sDate.Date = 1;
 800209a:	187b      	adds	r3, r7, r1
 800209c:	2201      	movs	r2, #1
 800209e:	709a      	strb	r2, [r3, #2]
  sDate.Year = 19;
 80020a0:	187b      	adds	r3, r7, r1
 80020a2:	2213      	movs	r2, #19
 80020a4:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80020a6:	1879      	adds	r1, r7, r1
 80020a8:	4b25      	ldr	r3, [pc, #148]	; (8002140 <MX_RTC_Init+0x154>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	0018      	movs	r0, r3
 80020ae:	f004 fc0f 	bl	80068d0 <HAL_RTC_SetDate>
 80020b2:	1e03      	subs	r3, r0, #0
 80020b4:	d001      	beq.n	80020ba <MX_RTC_Init+0xce>
  {
    Error_Handler();
 80020b6:	f000 fb27 	bl	8002708 <Error_Handler>
  }
  /** Enable the Alarm A 
  */
  sAlarm.AlarmTime.Hours = 0;
 80020ba:	003b      	movs	r3, r7
 80020bc:	2200      	movs	r2, #0
 80020be:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0;
 80020c0:	003b      	movs	r3, r7
 80020c2:	2200      	movs	r2, #0
 80020c4:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0;
 80020c6:	003b      	movs	r3, r7
 80020c8:	2200      	movs	r2, #0
 80020ca:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 80020cc:	003b      	movs	r3, r7
 80020ce:	2200      	movs	r2, #0
 80020d0:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80020d2:	003b      	movs	r3, r7
 80020d4:	2200      	movs	r2, #0
 80020d6:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80020d8:	003b      	movs	r3, r7
 80020da:	2200      	movs	r2, #0
 80020dc:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80020de:	003b      	movs	r3, r7
 80020e0:	2200      	movs	r2, #0
 80020e2:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80020e4:	003b      	movs	r3, r7
 80020e6:	2200      	movs	r2, #0
 80020e8:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80020ea:	003b      	movs	r3, r7
 80020ec:	2200      	movs	r2, #0
 80020ee:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 1;
 80020f0:	003b      	movs	r3, r7
 80020f2:	2220      	movs	r2, #32
 80020f4:	2101      	movs	r1, #1
 80020f6:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 80020f8:	003b      	movs	r3, r7
 80020fa:	2280      	movs	r2, #128	; 0x80
 80020fc:	0052      	lsls	r2, r2, #1
 80020fe:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8002100:	0039      	movs	r1, r7
 8002102:	4b0f      	ldr	r3, [pc, #60]	; (8002140 <MX_RTC_Init+0x154>)
 8002104:	2200      	movs	r2, #0
 8002106:	0018      	movs	r0, r3
 8002108:	f004 fcde 	bl	8006ac8 <HAL_RTC_SetAlarm_IT>
 800210c:	1e03      	subs	r3, r0, #0
 800210e:	d001      	beq.n	8002114 <MX_RTC_Init+0x128>
  {
    Error_Handler();
 8002110:	f000 fafa 	bl	8002708 <Error_Handler>
  }
  /** Enable the Alarm B 
  */
  sAlarm.AlarmDateWeekDay = 1;
 8002114:	003b      	movs	r3, r7
 8002116:	2220      	movs	r2, #32
 8002118:	2101      	movs	r1, #1
 800211a:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_B;
 800211c:	003b      	movs	r3, r7
 800211e:	2280      	movs	r2, #128	; 0x80
 8002120:	0092      	lsls	r2, r2, #2
 8002122:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8002124:	0039      	movs	r1, r7
 8002126:	4b06      	ldr	r3, [pc, #24]	; (8002140 <MX_RTC_Init+0x154>)
 8002128:	2200      	movs	r2, #0
 800212a:	0018      	movs	r0, r3
 800212c:	f004 fccc 	bl	8006ac8 <HAL_RTC_SetAlarm_IT>
 8002130:	1e03      	subs	r3, r0, #0
 8002132:	d001      	beq.n	8002138 <MX_RTC_Init+0x14c>
  {
    Error_Handler();
 8002134:	f000 fae8 	bl	8002708 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002138:	46c0      	nop			; (mov r8, r8)
 800213a:	46bd      	mov	sp, r7
 800213c:	b010      	add	sp, #64	; 0x40
 800213e:	bd80      	pop	{r7, pc}
 8002140:	2000020c 	.word	0x2000020c
 8002144:	40002800 	.word	0x40002800

08002148 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800214c:	4b19      	ldr	r3, [pc, #100]	; (80021b4 <MX_SPI1_Init+0x6c>)
 800214e:	4a1a      	ldr	r2, [pc, #104]	; (80021b8 <MX_SPI1_Init+0x70>)
 8002150:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002152:	4b18      	ldr	r3, [pc, #96]	; (80021b4 <MX_SPI1_Init+0x6c>)
 8002154:	2282      	movs	r2, #130	; 0x82
 8002156:	0052      	lsls	r2, r2, #1
 8002158:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800215a:	4b16      	ldr	r3, [pc, #88]	; (80021b4 <MX_SPI1_Init+0x6c>)
 800215c:	2200      	movs	r2, #0
 800215e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002160:	4b14      	ldr	r3, [pc, #80]	; (80021b4 <MX_SPI1_Init+0x6c>)
 8002162:	2200      	movs	r2, #0
 8002164:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002166:	4b13      	ldr	r3, [pc, #76]	; (80021b4 <MX_SPI1_Init+0x6c>)
 8002168:	2200      	movs	r2, #0
 800216a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800216c:	4b11      	ldr	r3, [pc, #68]	; (80021b4 <MX_SPI1_Init+0x6c>)
 800216e:	2200      	movs	r2, #0
 8002170:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002172:	4b10      	ldr	r3, [pc, #64]	; (80021b4 <MX_SPI1_Init+0x6c>)
 8002174:	2280      	movs	r2, #128	; 0x80
 8002176:	0092      	lsls	r2, r2, #2
 8002178:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800217a:	4b0e      	ldr	r3, [pc, #56]	; (80021b4 <MX_SPI1_Init+0x6c>)
 800217c:	2200      	movs	r2, #0
 800217e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002180:	4b0c      	ldr	r3, [pc, #48]	; (80021b4 <MX_SPI1_Init+0x6c>)
 8002182:	2200      	movs	r2, #0
 8002184:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002186:	4b0b      	ldr	r3, [pc, #44]	; (80021b4 <MX_SPI1_Init+0x6c>)
 8002188:	2200      	movs	r2, #0
 800218a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800218c:	4b09      	ldr	r3, [pc, #36]	; (80021b4 <MX_SPI1_Init+0x6c>)
 800218e:	2200      	movs	r2, #0
 8002190:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002192:	4b08      	ldr	r3, [pc, #32]	; (80021b4 <MX_SPI1_Init+0x6c>)
 8002194:	2207      	movs	r2, #7
 8002196:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002198:	4b06      	ldr	r3, [pc, #24]	; (80021b4 <MX_SPI1_Init+0x6c>)
 800219a:	0018      	movs	r0, r3
 800219c:	f004 ff66 	bl	800706c <HAL_SPI_Init>
 80021a0:	1e03      	subs	r3, r0, #0
 80021a2:	d001      	beq.n	80021a8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80021a4:	f000 fab0 	bl	8002708 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
  hspi1.hdmatx = &hdma_spi1_tx;
 80021a8:	4b02      	ldr	r3, [pc, #8]	; (80021b4 <MX_SPI1_Init+0x6c>)
 80021aa:	4a04      	ldr	r2, [pc, #16]	; (80021bc <MX_SPI1_Init+0x74>)
 80021ac:	649a      	str	r2, [r3, #72]	; 0x48
  /* USER CODE END SPI1_Init 2 */

}
 80021ae:	46c0      	nop			; (mov r8, r8)
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	20000230 	.word	0x20000230
 80021b8:	40013000 	.word	0x40013000
 80021bc:	20000320 	.word	0x20000320

080021c0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b08a      	sub	sp, #40	; 0x28
 80021c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021c6:	2318      	movs	r3, #24
 80021c8:	18fb      	adds	r3, r7, r3
 80021ca:	0018      	movs	r0, r3
 80021cc:	2310      	movs	r3, #16
 80021ce:	001a      	movs	r2, r3
 80021d0:	2100      	movs	r1, #0
 80021d2:	f006 fb0e 	bl	80087f2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021d6:	2310      	movs	r3, #16
 80021d8:	18fb      	adds	r3, r7, r3
 80021da:	0018      	movs	r0, r3
 80021dc:	2308      	movs	r3, #8
 80021de:	001a      	movs	r2, r3
 80021e0:	2100      	movs	r1, #0
 80021e2:	f006 fb06 	bl	80087f2 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021e6:	003b      	movs	r3, r7
 80021e8:	0018      	movs	r0, r3
 80021ea:	2310      	movs	r3, #16
 80021ec:	001a      	movs	r2, r3
 80021ee:	2100      	movs	r1, #0
 80021f0:	f006 faff 	bl	80087f2 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80021f4:	4b3b      	ldr	r3, [pc, #236]	; (80022e4 <MX_TIM2_Init+0x124>)
 80021f6:	2280      	movs	r2, #128	; 0x80
 80021f8:	05d2      	lsls	r2, r2, #23
 80021fa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80021fc:	4b39      	ldr	r3, [pc, #228]	; (80022e4 <MX_TIM2_Init+0x124>)
 80021fe:	2200      	movs	r2, #0
 8002200:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002202:	4b38      	ldr	r3, [pc, #224]	; (80022e4 <MX_TIM2_Init+0x124>)
 8002204:	2200      	movs	r2, #0
 8002206:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0x8000;
 8002208:	4b36      	ldr	r3, [pc, #216]	; (80022e4 <MX_TIM2_Init+0x124>)
 800220a:	2280      	movs	r2, #128	; 0x80
 800220c:	0212      	lsls	r2, r2, #8
 800220e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002210:	4b34      	ldr	r3, [pc, #208]	; (80022e4 <MX_TIM2_Init+0x124>)
 8002212:	2200      	movs	r2, #0
 8002214:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002216:	4b33      	ldr	r3, [pc, #204]	; (80022e4 <MX_TIM2_Init+0x124>)
 8002218:	2200      	movs	r2, #0
 800221a:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800221c:	4b31      	ldr	r3, [pc, #196]	; (80022e4 <MX_TIM2_Init+0x124>)
 800221e:	0018      	movs	r0, r3
 8002220:	f005 fbea 	bl	80079f8 <HAL_TIM_Base_Init>
 8002224:	1e03      	subs	r3, r0, #0
 8002226:	d001      	beq.n	800222c <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8002228:	f000 fa6e 	bl	8002708 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800222c:	2118      	movs	r1, #24
 800222e:	187b      	adds	r3, r7, r1
 8002230:	2280      	movs	r2, #128	; 0x80
 8002232:	0152      	lsls	r2, r2, #5
 8002234:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002236:	187a      	adds	r2, r7, r1
 8002238:	4b2a      	ldr	r3, [pc, #168]	; (80022e4 <MX_TIM2_Init+0x124>)
 800223a:	0011      	movs	r1, r2
 800223c:	0018      	movs	r0, r3
 800223e:	f005 ff45 	bl	80080cc <HAL_TIM_ConfigClockSource>
 8002242:	1e03      	subs	r3, r0, #0
 8002244:	d001      	beq.n	800224a <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8002246:	f000 fa5f 	bl	8002708 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800224a:	4b26      	ldr	r3, [pc, #152]	; (80022e4 <MX_TIM2_Init+0x124>)
 800224c:	0018      	movs	r0, r3
 800224e:	f005 fd1b 	bl	8007c88 <HAL_TIM_PWM_Init>
 8002252:	1e03      	subs	r3, r0, #0
 8002254:	d001      	beq.n	800225a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8002256:	f000 fa57 	bl	8002708 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 800225a:	4b22      	ldr	r3, [pc, #136]	; (80022e4 <MX_TIM2_Init+0x124>)
 800225c:	0018      	movs	r0, r3
 800225e:	f005 fc3b 	bl	8007ad8 <HAL_TIM_OC_Init>
 8002262:	1e03      	subs	r3, r0, #0
 8002264:	d001      	beq.n	800226a <MX_TIM2_Init+0xaa>
  {
    Error_Handler();
 8002266:	f000 fa4f 	bl	8002708 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800226a:	2110      	movs	r1, #16
 800226c:	187b      	adds	r3, r7, r1
 800226e:	2200      	movs	r2, #0
 8002270:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002272:	187b      	adds	r3, r7, r1
 8002274:	2200      	movs	r2, #0
 8002276:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002278:	187a      	adds	r2, r7, r1
 800227a:	4b1a      	ldr	r3, [pc, #104]	; (80022e4 <MX_TIM2_Init+0x124>)
 800227c:	0011      	movs	r1, r2
 800227e:	0018      	movs	r0, r3
 8002280:	f006 fa19 	bl	80086b6 <HAL_TIMEx_MasterConfigSynchronization>
 8002284:	1e03      	subs	r3, r0, #0
 8002286:	d001      	beq.n	800228c <MX_TIM2_Init+0xcc>
  {
    Error_Handler();
 8002288:	f000 fa3e 	bl	8002708 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800228c:	003b      	movs	r3, r7
 800228e:	2260      	movs	r2, #96	; 0x60
 8002290:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8002292:	003b      	movs	r3, r7
 8002294:	2200      	movs	r2, #0
 8002296:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002298:	003b      	movs	r3, r7
 800229a:	2200      	movs	r2, #0
 800229c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800229e:	003b      	movs	r3, r7
 80022a0:	2200      	movs	r2, #0
 80022a2:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80022a4:	0039      	movs	r1, r7
 80022a6:	4b0f      	ldr	r3, [pc, #60]	; (80022e4 <MX_TIM2_Init+0x124>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	0018      	movs	r0, r3
 80022ac:	f005 fe56 	bl	8007f5c <HAL_TIM_PWM_ConfigChannel>
 80022b0:	1e03      	subs	r3, r0, #0
 80022b2:	d001      	beq.n	80022b8 <MX_TIM2_Init+0xf8>
  {
    Error_Handler();
 80022b4:	f000 fa28 	bl	8002708 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80022b8:	003b      	movs	r3, r7
 80022ba:	2200      	movs	r2, #0
 80022bc:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80022be:	0039      	movs	r1, r7
 80022c0:	4b08      	ldr	r3, [pc, #32]	; (80022e4 <MX_TIM2_Init+0x124>)
 80022c2:	2204      	movs	r2, #4
 80022c4:	0018      	movs	r0, r3
 80022c6:	f005 fdfb 	bl	8007ec0 <HAL_TIM_OC_ConfigChannel>
 80022ca:	1e03      	subs	r3, r0, #0
 80022cc:	d001      	beq.n	80022d2 <MX_TIM2_Init+0x112>
  {
    Error_Handler();
 80022ce:	f000 fa1b 	bl	8002708 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80022d2:	4b04      	ldr	r3, [pc, #16]	; (80022e4 <MX_TIM2_Init+0x124>)
 80022d4:	0018      	movs	r0, r3
 80022d6:	f001 fe57 	bl	8003f88 <HAL_TIM_MspPostInit>

}
 80022da:	46c0      	nop			; (mov r8, r8)
 80022dc:	46bd      	mov	sp, r7
 80022de:	b00a      	add	sp, #40	; 0x28
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	46c0      	nop			; (mov r8, r8)
 80022e4:	20000288 	.word	0x20000288

080022e8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b082      	sub	sp, #8
 80022ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022ee:	003b      	movs	r3, r7
 80022f0:	0018      	movs	r0, r3
 80022f2:	2308      	movs	r3, #8
 80022f4:	001a      	movs	r2, r3
 80022f6:	2100      	movs	r1, #0
 80022f8:	f006 fa7b 	bl	80087f2 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80022fc:	4b15      	ldr	r3, [pc, #84]	; (8002354 <MX_TIM6_Init+0x6c>)
 80022fe:	4a16      	ldr	r2, [pc, #88]	; (8002358 <MX_TIM6_Init+0x70>)
 8002300:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0x80;
 8002302:	4b14      	ldr	r3, [pc, #80]	; (8002354 <MX_TIM6_Init+0x6c>)
 8002304:	2280      	movs	r2, #128	; 0x80
 8002306:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002308:	4b12      	ldr	r3, [pc, #72]	; (8002354 <MX_TIM6_Init+0x6c>)
 800230a:	2200      	movs	r2, #0
 800230c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 32768;
 800230e:	4b11      	ldr	r3, [pc, #68]	; (8002354 <MX_TIM6_Init+0x6c>)
 8002310:	2280      	movs	r2, #128	; 0x80
 8002312:	0212      	lsls	r2, r2, #8
 8002314:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002316:	4b0f      	ldr	r3, [pc, #60]	; (8002354 <MX_TIM6_Init+0x6c>)
 8002318:	2200      	movs	r2, #0
 800231a:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800231c:	4b0d      	ldr	r3, [pc, #52]	; (8002354 <MX_TIM6_Init+0x6c>)
 800231e:	0018      	movs	r0, r3
 8002320:	f005 fb6a 	bl	80079f8 <HAL_TIM_Base_Init>
 8002324:	1e03      	subs	r3, r0, #0
 8002326:	d001      	beq.n	800232c <MX_TIM6_Init+0x44>
  {
    Error_Handler();
 8002328:	f000 f9ee 	bl	8002708 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800232c:	003b      	movs	r3, r7
 800232e:	2200      	movs	r2, #0
 8002330:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002332:	003b      	movs	r3, r7
 8002334:	2200      	movs	r2, #0
 8002336:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002338:	003a      	movs	r2, r7
 800233a:	4b06      	ldr	r3, [pc, #24]	; (8002354 <MX_TIM6_Init+0x6c>)
 800233c:	0011      	movs	r1, r2
 800233e:	0018      	movs	r0, r3
 8002340:	f006 f9b9 	bl	80086b6 <HAL_TIMEx_MasterConfigSynchronization>
 8002344:	1e03      	subs	r3, r0, #0
 8002346:	d001      	beq.n	800234c <MX_TIM6_Init+0x64>
  {
    Error_Handler();
 8002348:	f000 f9de 	bl	8002708 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800234c:	46c0      	nop			; (mov r8, r8)
 800234e:	46bd      	mov	sp, r7
 8002350:	b002      	add	sp, #8
 8002352:	bd80      	pop	{r7, pc}
 8002354:	20000150 	.word	0x20000150
 8002358:	40001000 	.word	0x40001000

0800235c <MX_TIM21_Init>:
  * @brief TIM21 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM21_Init(void)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b08a      	sub	sp, #40	; 0x28
 8002360:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM21_Init 0 */

  /* USER CODE END TIM21_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002362:	2318      	movs	r3, #24
 8002364:	18fb      	adds	r3, r7, r3
 8002366:	0018      	movs	r0, r3
 8002368:	2310      	movs	r3, #16
 800236a:	001a      	movs	r2, r3
 800236c:	2100      	movs	r1, #0
 800236e:	f006 fa40 	bl	80087f2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002372:	2310      	movs	r3, #16
 8002374:	18fb      	adds	r3, r7, r3
 8002376:	0018      	movs	r0, r3
 8002378:	2308      	movs	r3, #8
 800237a:	001a      	movs	r2, r3
 800237c:	2100      	movs	r1, #0
 800237e:	f006 fa38 	bl	80087f2 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002382:	003b      	movs	r3, r7
 8002384:	0018      	movs	r0, r3
 8002386:	2310      	movs	r3, #16
 8002388:	001a      	movs	r2, r3
 800238a:	2100      	movs	r1, #0
 800238c:	f006 fa31 	bl	80087f2 <memset>

  /* USER CODE BEGIN TIM21_Init 1 */

  /* USER CODE END TIM21_Init 1 */
  htim21.Instance = TIM21;
 8002390:	4b3c      	ldr	r3, [pc, #240]	; (8002484 <MX_TIM21_Init+0x128>)
 8002392:	4a3d      	ldr	r2, [pc, #244]	; (8002488 <MX_TIM21_Init+0x12c>)
 8002394:	601a      	str	r2, [r3, #0]
  htim21.Init.Prescaler = 0;
 8002396:	4b3b      	ldr	r3, [pc, #236]	; (8002484 <MX_TIM21_Init+0x128>)
 8002398:	2200      	movs	r2, #0
 800239a:	605a      	str	r2, [r3, #4]
  htim21.Init.CounterMode = TIM_COUNTERMODE_UP;
 800239c:	4b39      	ldr	r3, [pc, #228]	; (8002484 <MX_TIM21_Init+0x128>)
 800239e:	2200      	movs	r2, #0
 80023a0:	609a      	str	r2, [r3, #8]
  htim21.Init.Period = 0x8000;
 80023a2:	4b38      	ldr	r3, [pc, #224]	; (8002484 <MX_TIM21_Init+0x128>)
 80023a4:	2280      	movs	r2, #128	; 0x80
 80023a6:	0212      	lsls	r2, r2, #8
 80023a8:	60da      	str	r2, [r3, #12]
  htim21.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023aa:	4b36      	ldr	r3, [pc, #216]	; (8002484 <MX_TIM21_Init+0x128>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	611a      	str	r2, [r3, #16]
  htim21.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023b0:	4b34      	ldr	r3, [pc, #208]	; (8002484 <MX_TIM21_Init+0x128>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim21) != HAL_OK)
 80023b6:	4b33      	ldr	r3, [pc, #204]	; (8002484 <MX_TIM21_Init+0x128>)
 80023b8:	0018      	movs	r0, r3
 80023ba:	f005 fb1d 	bl	80079f8 <HAL_TIM_Base_Init>
 80023be:	1e03      	subs	r3, r0, #0
 80023c0:	d001      	beq.n	80023c6 <MX_TIM21_Init+0x6a>
  {
    Error_Handler();
 80023c2:	f000 f9a1 	bl	8002708 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 80023c6:	2118      	movs	r1, #24
 80023c8:	187b      	adds	r3, r7, r1
 80023ca:	2280      	movs	r2, #128	; 0x80
 80023cc:	0192      	lsls	r2, r2, #6
 80023ce:	601a      	str	r2, [r3, #0]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 80023d0:	187b      	adds	r3, r7, r1
 80023d2:	2200      	movs	r2, #0
 80023d4:	605a      	str	r2, [r3, #4]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 80023d6:	187b      	adds	r3, r7, r1
 80023d8:	2200      	movs	r2, #0
 80023da:	609a      	str	r2, [r3, #8]
  sClockSourceConfig.ClockFilter = 0;
 80023dc:	187b      	adds	r3, r7, r1
 80023de:	2200      	movs	r2, #0
 80023e0:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_ConfigClockSource(&htim21, &sClockSourceConfig) != HAL_OK)
 80023e2:	187a      	adds	r2, r7, r1
 80023e4:	4b27      	ldr	r3, [pc, #156]	; (8002484 <MX_TIM21_Init+0x128>)
 80023e6:	0011      	movs	r1, r2
 80023e8:	0018      	movs	r0, r3
 80023ea:	f005 fe6f 	bl	80080cc <HAL_TIM_ConfigClockSource>
 80023ee:	1e03      	subs	r3, r0, #0
 80023f0:	d001      	beq.n	80023f6 <MX_TIM21_Init+0x9a>
  {
    Error_Handler();
 80023f2:	f000 f989 	bl	8002708 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim21) != HAL_OK)
 80023f6:	4b23      	ldr	r3, [pc, #140]	; (8002484 <MX_TIM21_Init+0x128>)
 80023f8:	0018      	movs	r0, r3
 80023fa:	f005 fb6d 	bl	8007ad8 <HAL_TIM_OC_Init>
 80023fe:	1e03      	subs	r3, r0, #0
 8002400:	d001      	beq.n	8002406 <MX_TIM21_Init+0xaa>
  {
    Error_Handler();
 8002402:	f000 f981 	bl	8002708 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002406:	2110      	movs	r1, #16
 8002408:	187b      	adds	r3, r7, r1
 800240a:	2200      	movs	r2, #0
 800240c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800240e:	187b      	adds	r3, r7, r1
 8002410:	2200      	movs	r2, #0
 8002412:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim21, &sMasterConfig) != HAL_OK)
 8002414:	187a      	adds	r2, r7, r1
 8002416:	4b1b      	ldr	r3, [pc, #108]	; (8002484 <MX_TIM21_Init+0x128>)
 8002418:	0011      	movs	r1, r2
 800241a:	0018      	movs	r0, r3
 800241c:	f006 f94b 	bl	80086b6 <HAL_TIMEx_MasterConfigSynchronization>
 8002420:	1e03      	subs	r3, r0, #0
 8002422:	d001      	beq.n	8002428 <MX_TIM21_Init+0xcc>
  {
    Error_Handler();
 8002424:	f000 f970 	bl	8002708 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim21, TIM21_ETR_LSE) != HAL_OK)
 8002428:	4b16      	ldr	r3, [pc, #88]	; (8002484 <MX_TIM21_Init+0x128>)
 800242a:	2103      	movs	r1, #3
 800242c:	0018      	movs	r0, r3
 800242e:	f006 f985 	bl	800873c <HAL_TIMEx_RemapConfig>
 8002432:	1e03      	subs	r3, r0, #0
 8002434:	d001      	beq.n	800243a <MX_TIM21_Init+0xde>
  {
    Error_Handler();
 8002436:	f000 f967 	bl	8002708 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800243a:	003b      	movs	r3, r7
 800243c:	2200      	movs	r2, #0
 800243e:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8002440:	003b      	movs	r3, r7
 8002442:	2200      	movs	r2, #0
 8002444:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002446:	003b      	movs	r3, r7
 8002448:	2200      	movs	r2, #0
 800244a:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800244c:	003b      	movs	r3, r7
 800244e:	2200      	movs	r2, #0
 8002450:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_OC_ConfigChannel(&htim21, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002452:	0039      	movs	r1, r7
 8002454:	4b0b      	ldr	r3, [pc, #44]	; (8002484 <MX_TIM21_Init+0x128>)
 8002456:	2200      	movs	r2, #0
 8002458:	0018      	movs	r0, r3
 800245a:	f005 fd31 	bl	8007ec0 <HAL_TIM_OC_ConfigChannel>
 800245e:	1e03      	subs	r3, r0, #0
 8002460:	d001      	beq.n	8002466 <MX_TIM21_Init+0x10a>
  {
    Error_Handler();
 8002462:	f000 f951 	bl	8002708 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim21, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002466:	0039      	movs	r1, r7
 8002468:	4b06      	ldr	r3, [pc, #24]	; (8002484 <MX_TIM21_Init+0x128>)
 800246a:	2204      	movs	r2, #4
 800246c:	0018      	movs	r0, r3
 800246e:	f005 fd27 	bl	8007ec0 <HAL_TIM_OC_ConfigChannel>
 8002472:	1e03      	subs	r3, r0, #0
 8002474:	d001      	beq.n	800247a <MX_TIM21_Init+0x11e>
  {
    Error_Handler();
 8002476:	f000 f947 	bl	8002708 <Error_Handler>
  }
  /* USER CODE BEGIN TIM21_Init 2 */

  /* USER CODE END TIM21_Init 2 */

}
 800247a:	46c0      	nop			; (mov r8, r8)
 800247c:	46bd      	mov	sp, r7
 800247e:	b00a      	add	sp, #40	; 0x28
 8002480:	bd80      	pop	{r7, pc}
 8002482:	46c0      	nop			; (mov r8, r8)
 8002484:	20000368 	.word	0x20000368
 8002488:	40010800 	.word	0x40010800

0800248c <MX_TIM22_Init>:
  * @brief TIM22 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM22_Init(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b08a      	sub	sp, #40	; 0x28
 8002490:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM22_Init 0 */

  /* USER CODE END TIM22_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002492:	2318      	movs	r3, #24
 8002494:	18fb      	adds	r3, r7, r3
 8002496:	0018      	movs	r0, r3
 8002498:	2310      	movs	r3, #16
 800249a:	001a      	movs	r2, r3
 800249c:	2100      	movs	r1, #0
 800249e:	f006 f9a8 	bl	80087f2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024a2:	2310      	movs	r3, #16
 80024a4:	18fb      	adds	r3, r7, r3
 80024a6:	0018      	movs	r0, r3
 80024a8:	2308      	movs	r3, #8
 80024aa:	001a      	movs	r2, r3
 80024ac:	2100      	movs	r1, #0
 80024ae:	f006 f9a0 	bl	80087f2 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80024b2:	003b      	movs	r3, r7
 80024b4:	0018      	movs	r0, r3
 80024b6:	2310      	movs	r3, #16
 80024b8:	001a      	movs	r2, r3
 80024ba:	2100      	movs	r1, #0
 80024bc:	f006 f999 	bl	80087f2 <memset>

  /* USER CODE BEGIN TIM22_Init 1 */

  /* USER CODE END TIM22_Init 1 */
  htim22.Instance = TIM22;
 80024c0:	4b37      	ldr	r3, [pc, #220]	; (80025a0 <MX_TIM22_Init+0x114>)
 80024c2:	4a38      	ldr	r2, [pc, #224]	; (80025a4 <MX_TIM22_Init+0x118>)
 80024c4:	601a      	str	r2, [r3, #0]
  htim22.Init.Prescaler = 0x400;
 80024c6:	4b36      	ldr	r3, [pc, #216]	; (80025a0 <MX_TIM22_Init+0x114>)
 80024c8:	2280      	movs	r2, #128	; 0x80
 80024ca:	00d2      	lsls	r2, r2, #3
 80024cc:	605a      	str	r2, [r3, #4]
  htim22.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024ce:	4b34      	ldr	r3, [pc, #208]	; (80025a0 <MX_TIM22_Init+0x114>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	609a      	str	r2, [r3, #8]
  htim22.Init.Period = 1920;
 80024d4:	4b32      	ldr	r3, [pc, #200]	; (80025a0 <MX_TIM22_Init+0x114>)
 80024d6:	22f0      	movs	r2, #240	; 0xf0
 80024d8:	00d2      	lsls	r2, r2, #3
 80024da:	60da      	str	r2, [r3, #12]
  htim22.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024dc:	4b30      	ldr	r3, [pc, #192]	; (80025a0 <MX_TIM22_Init+0x114>)
 80024de:	2200      	movs	r2, #0
 80024e0:	611a      	str	r2, [r3, #16]
  htim22.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024e2:	4b2f      	ldr	r3, [pc, #188]	; (80025a0 <MX_TIM22_Init+0x114>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim22) != HAL_OK)
 80024e8:	4b2d      	ldr	r3, [pc, #180]	; (80025a0 <MX_TIM22_Init+0x114>)
 80024ea:	0018      	movs	r0, r3
 80024ec:	f005 fa84 	bl	80079f8 <HAL_TIM_Base_Init>
 80024f0:	1e03      	subs	r3, r0, #0
 80024f2:	d001      	beq.n	80024f8 <MX_TIM22_Init+0x6c>
  {
    Error_Handler();
 80024f4:	f000 f908 	bl	8002708 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 80024f8:	2118      	movs	r1, #24
 80024fa:	187b      	adds	r3, r7, r1
 80024fc:	2280      	movs	r2, #128	; 0x80
 80024fe:	0192      	lsls	r2, r2, #6
 8002500:	601a      	str	r2, [r3, #0]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 8002502:	187b      	adds	r3, r7, r1
 8002504:	2200      	movs	r2, #0
 8002506:	605a      	str	r2, [r3, #4]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 8002508:	187b      	adds	r3, r7, r1
 800250a:	2200      	movs	r2, #0
 800250c:	609a      	str	r2, [r3, #8]
  sClockSourceConfig.ClockFilter = 0;
 800250e:	187b      	adds	r3, r7, r1
 8002510:	2200      	movs	r2, #0
 8002512:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_ConfigClockSource(&htim22, &sClockSourceConfig) != HAL_OK)
 8002514:	187a      	adds	r2, r7, r1
 8002516:	4b22      	ldr	r3, [pc, #136]	; (80025a0 <MX_TIM22_Init+0x114>)
 8002518:	0011      	movs	r1, r2
 800251a:	0018      	movs	r0, r3
 800251c:	f005 fdd6 	bl	80080cc <HAL_TIM_ConfigClockSource>
 8002520:	1e03      	subs	r3, r0, #0
 8002522:	d001      	beq.n	8002528 <MX_TIM22_Init+0x9c>
  {
    Error_Handler();
 8002524:	f000 f8f0 	bl	8002708 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim22) != HAL_OK)
 8002528:	4b1d      	ldr	r3, [pc, #116]	; (80025a0 <MX_TIM22_Init+0x114>)
 800252a:	0018      	movs	r0, r3
 800252c:	f005 fad4 	bl	8007ad8 <HAL_TIM_OC_Init>
 8002530:	1e03      	subs	r3, r0, #0
 8002532:	d001      	beq.n	8002538 <MX_TIM22_Init+0xac>
  {
    Error_Handler();
 8002534:	f000 f8e8 	bl	8002708 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002538:	2110      	movs	r1, #16
 800253a:	187b      	adds	r3, r7, r1
 800253c:	2200      	movs	r2, #0
 800253e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002540:	187b      	adds	r3, r7, r1
 8002542:	2200      	movs	r2, #0
 8002544:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim22, &sMasterConfig) != HAL_OK)
 8002546:	187a      	adds	r2, r7, r1
 8002548:	4b15      	ldr	r3, [pc, #84]	; (80025a0 <MX_TIM22_Init+0x114>)
 800254a:	0011      	movs	r1, r2
 800254c:	0018      	movs	r0, r3
 800254e:	f006 f8b2 	bl	80086b6 <HAL_TIMEx_MasterConfigSynchronization>
 8002552:	1e03      	subs	r3, r0, #0
 8002554:	d001      	beq.n	800255a <MX_TIM22_Init+0xce>
  {
    Error_Handler();
 8002556:	f000 f8d7 	bl	8002708 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim22, TIM22_ETR_LSE) != HAL_OK)
 800255a:	4b11      	ldr	r3, [pc, #68]	; (80025a0 <MX_TIM22_Init+0x114>)
 800255c:	2103      	movs	r1, #3
 800255e:	0018      	movs	r0, r3
 8002560:	f006 f8ec 	bl	800873c <HAL_TIMEx_RemapConfig>
 8002564:	1e03      	subs	r3, r0, #0
 8002566:	d001      	beq.n	800256c <MX_TIM22_Init+0xe0>
  {
    Error_Handler();
 8002568:	f000 f8ce 	bl	8002708 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800256c:	003b      	movs	r3, r7
 800256e:	2200      	movs	r2, #0
 8002570:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8002572:	003b      	movs	r3, r7
 8002574:	2200      	movs	r2, #0
 8002576:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002578:	003b      	movs	r3, r7
 800257a:	2200      	movs	r2, #0
 800257c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800257e:	003b      	movs	r3, r7
 8002580:	2200      	movs	r2, #0
 8002582:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_OC_ConfigChannel(&htim22, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002584:	0039      	movs	r1, r7
 8002586:	4b06      	ldr	r3, [pc, #24]	; (80025a0 <MX_TIM22_Init+0x114>)
 8002588:	2200      	movs	r2, #0
 800258a:	0018      	movs	r0, r3
 800258c:	f005 fc98 	bl	8007ec0 <HAL_TIM_OC_ConfigChannel>
 8002590:	1e03      	subs	r3, r0, #0
 8002592:	d001      	beq.n	8002598 <MX_TIM22_Init+0x10c>
  {
    Error_Handler();
 8002594:	f000 f8b8 	bl	8002708 <Error_Handler>
  }
  /* USER CODE BEGIN TIM22_Init 2 */

  /* USER CODE END TIM22_Init 2 */

}
 8002598:	46c0      	nop			; (mov r8, r8)
 800259a:	46bd      	mov	sp, r7
 800259c:	b00a      	add	sp, #40	; 0x28
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	200001a0 	.word	0x200001a0
 80025a4:	40011400 	.word	0x40011400

080025a8 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b082      	sub	sp, #8
 80025ac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80025ae:	4b0c      	ldr	r3, [pc, #48]	; (80025e0 <MX_DMA_Init+0x38>)
 80025b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025b2:	4b0b      	ldr	r3, [pc, #44]	; (80025e0 <MX_DMA_Init+0x38>)
 80025b4:	2101      	movs	r1, #1
 80025b6:	430a      	orrs	r2, r1
 80025b8:	631a      	str	r2, [r3, #48]	; 0x30
 80025ba:	4b09      	ldr	r3, [pc, #36]	; (80025e0 <MX_DMA_Init+0x38>)
 80025bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025be:	2201      	movs	r2, #1
 80025c0:	4013      	ands	r3, r2
 80025c2:	607b      	str	r3, [r7, #4]
 80025c4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80025c6:	2200      	movs	r2, #0
 80025c8:	2100      	movs	r1, #0
 80025ca:	200a      	movs	r0, #10
 80025cc:	f002 fbc2 	bl	8004d54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80025d0:	200a      	movs	r0, #10
 80025d2:	f002 fbd4 	bl	8004d7e <HAL_NVIC_EnableIRQ>

}
 80025d6:	46c0      	nop			; (mov r8, r8)
 80025d8:	46bd      	mov	sp, r7
 80025da:	b002      	add	sp, #8
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	46c0      	nop			; (mov r8, r8)
 80025e0:	40021000 	.word	0x40021000

080025e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80025e4:	b590      	push	{r4, r7, lr}
 80025e6:	b089      	sub	sp, #36	; 0x24
 80025e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025ea:	240c      	movs	r4, #12
 80025ec:	193b      	adds	r3, r7, r4
 80025ee:	0018      	movs	r0, r3
 80025f0:	2314      	movs	r3, #20
 80025f2:	001a      	movs	r2, r3
 80025f4:	2100      	movs	r1, #0
 80025f6:	f006 f8fc 	bl	80087f2 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80025fa:	4b3e      	ldr	r3, [pc, #248]	; (80026f4 <MX_GPIO_Init+0x110>)
 80025fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025fe:	4b3d      	ldr	r3, [pc, #244]	; (80026f4 <MX_GPIO_Init+0x110>)
 8002600:	2104      	movs	r1, #4
 8002602:	430a      	orrs	r2, r1
 8002604:	62da      	str	r2, [r3, #44]	; 0x2c
 8002606:	4b3b      	ldr	r3, [pc, #236]	; (80026f4 <MX_GPIO_Init+0x110>)
 8002608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800260a:	2204      	movs	r2, #4
 800260c:	4013      	ands	r3, r2
 800260e:	60bb      	str	r3, [r7, #8]
 8002610:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002612:	4b38      	ldr	r3, [pc, #224]	; (80026f4 <MX_GPIO_Init+0x110>)
 8002614:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002616:	4b37      	ldr	r3, [pc, #220]	; (80026f4 <MX_GPIO_Init+0x110>)
 8002618:	2101      	movs	r1, #1
 800261a:	430a      	orrs	r2, r1
 800261c:	62da      	str	r2, [r3, #44]	; 0x2c
 800261e:	4b35      	ldr	r3, [pc, #212]	; (80026f4 <MX_GPIO_Init+0x110>)
 8002620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002622:	2201      	movs	r2, #1
 8002624:	4013      	ands	r3, r2
 8002626:	607b      	str	r3, [r7, #4]
 8002628:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800262a:	4b32      	ldr	r3, [pc, #200]	; (80026f4 <MX_GPIO_Init+0x110>)
 800262c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800262e:	4b31      	ldr	r3, [pc, #196]	; (80026f4 <MX_GPIO_Init+0x110>)
 8002630:	2102      	movs	r1, #2
 8002632:	430a      	orrs	r2, r1
 8002634:	62da      	str	r2, [r3, #44]	; 0x2c
 8002636:	4b2f      	ldr	r3, [pc, #188]	; (80026f4 <MX_GPIO_Init+0x110>)
 8002638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800263a:	2202      	movs	r2, #2
 800263c:	4013      	ands	r3, r2
 800263e:	603b      	str	r3, [r7, #0]
 8002640:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_7, GPIO_PIN_RESET);
 8002642:	4b2d      	ldr	r3, [pc, #180]	; (80026f8 <MX_GPIO_Init+0x114>)
 8002644:	2200      	movs	r2, #0
 8002646:	218b      	movs	r1, #139	; 0x8b
 8002648:	0018      	movs	r0, r3
 800264a:	f002 fede 	bl	800540a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_6, GPIO_PIN_RESET);
 800264e:	4b2b      	ldr	r3, [pc, #172]	; (80026fc <MX_GPIO_Init+0x118>)
 8002650:	2200      	movs	r2, #0
 8002652:	2142      	movs	r1, #66	; 0x42
 8002654:	0018      	movs	r0, r3
 8002656:	f002 fed8 	bl	800540a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 PC3 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_7;
 800265a:	0021      	movs	r1, r4
 800265c:	187b      	adds	r3, r7, r1
 800265e:	228b      	movs	r2, #139	; 0x8b
 8002660:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002662:	187b      	adds	r3, r7, r1
 8002664:	2201      	movs	r2, #1
 8002666:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002668:	187b      	adds	r3, r7, r1
 800266a:	2200      	movs	r2, #0
 800266c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800266e:	187b      	adds	r3, r7, r1
 8002670:	2200      	movs	r2, #0
 8002672:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002674:	000c      	movs	r4, r1
 8002676:	187b      	adds	r3, r7, r1
 8002678:	4a1f      	ldr	r2, [pc, #124]	; (80026f8 <MX_GPIO_Init+0x114>)
 800267a:	0019      	movs	r1, r3
 800267c:	0010      	movs	r0, r2
 800267e:	f002 fd29 	bl	80050d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6;
 8002682:	0021      	movs	r1, r4
 8002684:	187b      	adds	r3, r7, r1
 8002686:	2242      	movs	r2, #66	; 0x42
 8002688:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800268a:	187b      	adds	r3, r7, r1
 800268c:	2201      	movs	r2, #1
 800268e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002690:	187b      	adds	r3, r7, r1
 8002692:	2200      	movs	r2, #0
 8002694:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002696:	187b      	adds	r3, r7, r1
 8002698:	2200      	movs	r2, #0
 800269a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800269c:	000c      	movs	r4, r1
 800269e:	187b      	adds	r3, r7, r1
 80026a0:	4a16      	ldr	r2, [pc, #88]	; (80026fc <MX_GPIO_Init+0x118>)
 80026a2:	0019      	movs	r1, r3
 80026a4:	0010      	movs	r0, r2
 80026a6:	f002 fd15 	bl	80050d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80026aa:	0021      	movs	r1, r4
 80026ac:	187b      	adds	r3, r7, r1
 80026ae:	4a14      	ldr	r2, [pc, #80]	; (8002700 <MX_GPIO_Init+0x11c>)
 80026b0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80026b2:	187b      	adds	r3, r7, r1
 80026b4:	4a13      	ldr	r2, [pc, #76]	; (8002704 <MX_GPIO_Init+0x120>)
 80026b6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80026b8:	187b      	adds	r3, r7, r1
 80026ba:	2202      	movs	r2, #2
 80026bc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026be:	187b      	adds	r3, r7, r1
 80026c0:	4a0e      	ldr	r2, [pc, #56]	; (80026fc <MX_GPIO_Init+0x118>)
 80026c2:	0019      	movs	r1, r3
 80026c4:	0010      	movs	r0, r2
 80026c6:	f002 fd05 	bl	80050d4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 80026ca:	2200      	movs	r2, #0
 80026cc:	2100      	movs	r1, #0
 80026ce:	2006      	movs	r0, #6
 80026d0:	f002 fb40 	bl	8004d54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 80026d4:	2006      	movs	r0, #6
 80026d6:	f002 fb52 	bl	8004d7e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80026da:	2200      	movs	r2, #0
 80026dc:	2100      	movs	r1, #0
 80026de:	2007      	movs	r0, #7
 80026e0:	f002 fb38 	bl	8004d54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80026e4:	2007      	movs	r0, #7
 80026e6:	f002 fb4a 	bl	8004d7e <HAL_NVIC_EnableIRQ>

}
 80026ea:	46c0      	nop			; (mov r8, r8)
 80026ec:	46bd      	mov	sp, r7
 80026ee:	b009      	add	sp, #36	; 0x24
 80026f0:	bd90      	pop	{r4, r7, pc}
 80026f2:	46c0      	nop			; (mov r8, r8)
 80026f4:	40021000 	.word	0x40021000
 80026f8:	50000800 	.word	0x50000800
 80026fc:	50000400 	.word	0x50000400
 8002700:	0000e004 	.word	0x0000e004
 8002704:	10110000 	.word	0x10110000

08002708 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800270c:	46c0      	nop			; (mov r8, r8)
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
	...

08002714 <HAL_GPIO_EXTI_Callback>:
	"Nov",
	"Dec"
};

// button interrupt(s)
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002714:	b580      	push	{r7, lr}
 8002716:	b082      	sub	sp, #8
 8002718:	af00      	add	r7, sp, #0
 800271a:	0002      	movs	r2, r0
 800271c:	1dbb      	adds	r3, r7, #6
 800271e:	801a      	strh	r2, [r3, #0]
	HAL_NVIC_DisableIRQ(EXTI2_3_IRQn);
 8002720:	2006      	movs	r0, #6
 8002722:	f002 fb3c 	bl	8004d9e <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI4_15_IRQn);
 8002726:	2007      	movs	r0, #7
 8002728:	f002 fb39 	bl	8004d9e <HAL_NVIC_DisableIRQ>
	HAL_NVIC_ClearPendingIRQ(EXTI2_3_IRQn);
 800272c:	2006      	movs	r0, #6
 800272e:	f002 fb53 	bl	8004dd8 <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_ClearPendingIRQ(EXTI4_15_IRQn);
 8002732:	2007      	movs	r0, #7
 8002734:	f002 fb50 	bl	8004dd8 <HAL_NVIC_ClearPendingIRQ>

	if (GPIO_Pin == BUTTON1) buttons.is1Pressed = 1;
 8002738:	1dbb      	adds	r3, r7, #6
 800273a:	881b      	ldrh	r3, [r3, #0]
 800273c:	2b04      	cmp	r3, #4
 800273e:	d102      	bne.n	8002746 <HAL_GPIO_EXTI_Callback+0x32>
 8002740:	4b15      	ldr	r3, [pc, #84]	; (8002798 <HAL_GPIO_EXTI_Callback+0x84>)
 8002742:	2201      	movs	r2, #1
 8002744:	701a      	strb	r2, [r3, #0]
	if (GPIO_Pin == BUTTON2) buttons.is2Pressed = 1;
 8002746:	1dbb      	adds	r3, r7, #6
 8002748:	881a      	ldrh	r2, [r3, #0]
 800274a:	2380      	movs	r3, #128	; 0x80
 800274c:	019b      	lsls	r3, r3, #6
 800274e:	429a      	cmp	r2, r3
 8002750:	d102      	bne.n	8002758 <HAL_GPIO_EXTI_Callback+0x44>
 8002752:	4b11      	ldr	r3, [pc, #68]	; (8002798 <HAL_GPIO_EXTI_Callback+0x84>)
 8002754:	2201      	movs	r2, #1
 8002756:	705a      	strb	r2, [r3, #1]
	if (GPIO_Pin == BUTTON3) buttons.is3Pressed = 1;
 8002758:	1dbb      	adds	r3, r7, #6
 800275a:	881a      	ldrh	r2, [r3, #0]
 800275c:	2380      	movs	r3, #128	; 0x80
 800275e:	01db      	lsls	r3, r3, #7
 8002760:	429a      	cmp	r2, r3
 8002762:	d102      	bne.n	800276a <HAL_GPIO_EXTI_Callback+0x56>
 8002764:	4b0c      	ldr	r3, [pc, #48]	; (8002798 <HAL_GPIO_EXTI_Callback+0x84>)
 8002766:	2201      	movs	r2, #1
 8002768:	709a      	strb	r2, [r3, #2]
	if (GPIO_Pin == BUTTON4) buttons.is4Pressed = 1;
 800276a:	1dbb      	adds	r3, r7, #6
 800276c:	881a      	ldrh	r2, [r3, #0]
 800276e:	2380      	movs	r3, #128	; 0x80
 8002770:	021b      	lsls	r3, r3, #8
 8002772:	429a      	cmp	r2, r3
 8002774:	d102      	bne.n	800277c <HAL_GPIO_EXTI_Callback+0x68>
 8002776:	4b08      	ldr	r3, [pc, #32]	; (8002798 <HAL_GPIO_EXTI_Callback+0x84>)
 8002778:	2201      	movs	r2, #1
 800277a:	70da      	strb	r2, [r3, #3]

	HAL_TIM_Base_Start_IT(&htim6);
 800277c:	4b07      	ldr	r3, [pc, #28]	; (800279c <HAL_GPIO_EXTI_Callback+0x88>)
 800277e:	0018      	movs	r0, r3
 8002780:	f005 f966 	bl	8007a50 <HAL_TIM_Base_Start_IT>

	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_3);		// should run for any button
 8002784:	4b06      	ldr	r3, [pc, #24]	; (80027a0 <HAL_GPIO_EXTI_Callback+0x8c>)
 8002786:	2108      	movs	r1, #8
 8002788:	0018      	movs	r0, r3
 800278a:	f002 fe5b 	bl	8005444 <HAL_GPIO_TogglePin>
}
 800278e:	46c0      	nop			; (mov r8, r8)
 8002790:	46bd      	mov	sp, r7
 8002792:	b002      	add	sp, #8
 8002794:	bd80      	pop	{r7, pc}
 8002796:	46c0      	nop			; (mov r8, r8)
 8002798:	2000018c 	.word	0x2000018c
 800279c:	20000150 	.word	0x20000150
 80027a0:	50000800 	.word	0x50000800

080027a4 <updateWithButtons>:

void updateWithButtons(RTC_HandleTypeDef *hrtc, TIM_HandleTypeDef *timerStopwatchTim, TIM_HandleTypeDef *motorBacklightTim, TIM_HandleTypeDef *buttonTim) {
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b084      	sub	sp, #16
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	60f8      	str	r0, [r7, #12]
 80027ac:	60b9      	str	r1, [r7, #8]
 80027ae:	607a      	str	r2, [r7, #4]
 80027b0:	603b      	str	r3, [r7, #0]
	/* program flow:
	 *   check current face used
	 *   check current variables and check button pressed
	 */
	// button 1 changes the face on screen.
	if (buttons.is1Pressed) {
 80027b2:	4b2f      	ldr	r3, [pc, #188]	; (8002870 <updateWithButtons+0xcc>)
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d030      	beq.n	800281e <updateWithButtons+0x7a>
		buttons.is1Pressed = 0;
 80027bc:	4b2c      	ldr	r3, [pc, #176]	; (8002870 <updateWithButtons+0xcc>)
 80027be:	2200      	movs	r2, #0
 80027c0:	701a      	strb	r2, [r3, #0]
		isFaceBeingChanged = 1;
 80027c2:	4b2c      	ldr	r3, [pc, #176]	; (8002874 <updateWithButtons+0xd0>)
 80027c4:	2201      	movs	r2, #1
 80027c6:	701a      	strb	r2, [r3, #0]
		faceOnDisplay = (faceOnDisplay + 1) % NUM_FACES;
 80027c8:	4b2b      	ldr	r3, [pc, #172]	; (8002878 <updateWithButtons+0xd4>)
 80027ca:	781b      	ldrb	r3, [r3, #0]
 80027cc:	3301      	adds	r3, #1
 80027ce:	4a2b      	ldr	r2, [pc, #172]	; (800287c <updateWithButtons+0xd8>)
 80027d0:	4013      	ands	r3, r2
 80027d2:	d504      	bpl.n	80027de <updateWithButtons+0x3a>
 80027d4:	3b01      	subs	r3, #1
 80027d6:	2204      	movs	r2, #4
 80027d8:	4252      	negs	r2, r2
 80027da:	4313      	orrs	r3, r2
 80027dc:	3301      	adds	r3, #1
 80027de:	b2da      	uxtb	r2, r3
 80027e0:	4b25      	ldr	r3, [pc, #148]	; (8002878 <updateWithButtons+0xd4>)
 80027e2:	701a      	strb	r2, [r3, #0]
		switch (faceOnDisplay) {
 80027e4:	4b24      	ldr	r3, [pc, #144]	; (8002878 <updateWithButtons+0xd4>)
 80027e6:	781b      	ldrb	r3, [r3, #0]
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d00c      	beq.n	8002806 <updateWithButtons+0x62>
 80027ec:	dc02      	bgt.n	80027f4 <updateWithButtons+0x50>
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d005      	beq.n	80027fe <updateWithButtons+0x5a>
			case faceClock: updateFace.clock = 1; break;
			case faceTimer: updateFace.timer = 1; break;
			case faceAlarm: updateFace.alarm = 1; break;
			case faceStopwatch: updateFace.stopwatch = 1; break;
			default: break;
 80027f2:	e015      	b.n	8002820 <updateWithButtons+0x7c>
		switch (faceOnDisplay) {
 80027f4:	2b02      	cmp	r3, #2
 80027f6:	d00a      	beq.n	800280e <updateWithButtons+0x6a>
 80027f8:	2b03      	cmp	r3, #3
 80027fa:	d00c      	beq.n	8002816 <updateWithButtons+0x72>
			default: break;
 80027fc:	e010      	b.n	8002820 <updateWithButtons+0x7c>
			case faceClock: updateFace.clock = 1; break;
 80027fe:	4b20      	ldr	r3, [pc, #128]	; (8002880 <updateWithButtons+0xdc>)
 8002800:	2201      	movs	r2, #1
 8002802:	701a      	strb	r2, [r3, #0]
 8002804:	e00c      	b.n	8002820 <updateWithButtons+0x7c>
			case faceTimer: updateFace.timer = 1; break;
 8002806:	4b1e      	ldr	r3, [pc, #120]	; (8002880 <updateWithButtons+0xdc>)
 8002808:	2201      	movs	r2, #1
 800280a:	705a      	strb	r2, [r3, #1]
 800280c:	e008      	b.n	8002820 <updateWithButtons+0x7c>
			case faceAlarm: updateFace.alarm = 1; break;
 800280e:	4b1c      	ldr	r3, [pc, #112]	; (8002880 <updateWithButtons+0xdc>)
 8002810:	2201      	movs	r2, #1
 8002812:	709a      	strb	r2, [r3, #2]
 8002814:	e004      	b.n	8002820 <updateWithButtons+0x7c>
			case faceStopwatch: updateFace.stopwatch = 1; break;
 8002816:	4b1a      	ldr	r3, [pc, #104]	; (8002880 <updateWithButtons+0xdc>)
 8002818:	2201      	movs	r2, #1
 800281a:	70da      	strb	r2, [r3, #3]
 800281c:	e000      	b.n	8002820 <updateWithButtons+0x7c>
		}
	}
 800281e:	46c0      	nop			; (mov r8, r8)

	if (faceOnDisplay == faceClock) updateClockState(hrtc);
 8002820:	4b15      	ldr	r3, [pc, #84]	; (8002878 <updateWithButtons+0xd4>)
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d104      	bne.n	8002832 <updateWithButtons+0x8e>
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	0018      	movs	r0, r3
 800282c:	f000 f82a 	bl	8002884 <updateClockState>
	else if (faceOnDisplay == faceTimer) updateTimerState(timerStopwatchTim);
	else if (faceOnDisplay == faceAlarm) updateAlarmState(hrtc);
	else if (faceOnDisplay == faceStopwatch) updateStopwatchState(timerStopwatchTim);
}
 8002830:	e019      	b.n	8002866 <updateWithButtons+0xc2>
	else if (faceOnDisplay == faceTimer) updateTimerState(timerStopwatchTim);
 8002832:	4b11      	ldr	r3, [pc, #68]	; (8002878 <updateWithButtons+0xd4>)
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	2b01      	cmp	r3, #1
 8002838:	d104      	bne.n	8002844 <updateWithButtons+0xa0>
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	0018      	movs	r0, r3
 800283e:	f000 f94b 	bl	8002ad8 <updateTimerState>
}
 8002842:	e010      	b.n	8002866 <updateWithButtons+0xc2>
	else if (faceOnDisplay == faceAlarm) updateAlarmState(hrtc);
 8002844:	4b0c      	ldr	r3, [pc, #48]	; (8002878 <updateWithButtons+0xd4>)
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	2b02      	cmp	r3, #2
 800284a:	d104      	bne.n	8002856 <updateWithButtons+0xb2>
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	0018      	movs	r0, r3
 8002850:	f000 fa7c 	bl	8002d4c <updateAlarmState>
}
 8002854:	e007      	b.n	8002866 <updateWithButtons+0xc2>
	else if (faceOnDisplay == faceStopwatch) updateStopwatchState(timerStopwatchTim);
 8002856:	4b08      	ldr	r3, [pc, #32]	; (8002878 <updateWithButtons+0xd4>)
 8002858:	781b      	ldrb	r3, [r3, #0]
 800285a:	2b03      	cmp	r3, #3
 800285c:	d103      	bne.n	8002866 <updateWithButtons+0xc2>
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	0018      	movs	r0, r3
 8002862:	f000 fba9 	bl	8002fb8 <updateStopwatchState>
}
 8002866:	46c0      	nop			; (mov r8, r8)
 8002868:	46bd      	mov	sp, r7
 800286a:	b004      	add	sp, #16
 800286c:	bd80      	pop	{r7, pc}
 800286e:	46c0      	nop			; (mov r8, r8)
 8002870:	2000018c 	.word	0x2000018c
 8002874:	20000060 	.word	0x20000060
 8002878:	20000114 	.word	0x20000114
 800287c:	80000003 	.word	0x80000003
 8002880:	20000140 	.word	0x20000140

08002884 <updateClockState>:
 *     the clock is updated and we revert back to default mode.
 *
 * notes:
 *   make date setting more robust (invalidate date entries when that day of month doesn't exist or just change modulo)
 */
void updateClockState(RTC_HandleTypeDef *hrtc) {
 8002884:	b590      	push	{r4, r7, lr}
 8002886:	b083      	sub	sp, #12
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
	// change fields up, do nothing if not setting clock
	if (buttons.is2Pressed && clockVars.isBeingSet) {
 800288c:	4b8d      	ldr	r3, [pc, #564]	; (8002ac4 <updateClockState+0x240>)
 800288e:	785b      	ldrb	r3, [r3, #1]
 8002890:	b2db      	uxtb	r3, r3
 8002892:	2b00      	cmp	r3, #0
 8002894:	d060      	beq.n	8002958 <updateClockState+0xd4>
 8002896:	4b8c      	ldr	r3, [pc, #560]	; (8002ac8 <updateClockState+0x244>)
 8002898:	781b      	ldrb	r3, [r3, #0]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d05c      	beq.n	8002958 <updateClockState+0xd4>
		buttons.is2Pressed = 0;
 800289e:	4b89      	ldr	r3, [pc, #548]	; (8002ac4 <updateClockState+0x240>)
 80028a0:	2200      	movs	r2, #0
 80028a2:	705a      	strb	r2, [r3, #1]
		updateFace.clock = 1;
 80028a4:	4b89      	ldr	r3, [pc, #548]	; (8002acc <updateClockState+0x248>)
 80028a6:	2201      	movs	r2, #1
 80028a8:	701a      	strb	r2, [r3, #0]
		switch (clockVars.fieldBeingSet) {
 80028aa:	4b87      	ldr	r3, [pc, #540]	; (8002ac8 <updateClockState+0x244>)
 80028ac:	785b      	ldrb	r3, [r3, #1]
 80028ae:	2b05      	cmp	r3, #5
 80028b0:	d854      	bhi.n	800295c <updateClockState+0xd8>
 80028b2:	009a      	lsls	r2, r3, #2
 80028b4:	4b86      	ldr	r3, [pc, #536]	; (8002ad0 <updateClockState+0x24c>)
 80028b6:	18d3      	adds	r3, r2, r3
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	469f      	mov	pc, r3
			case 1: clockVars.timeToSet->min = (clockVars.timeToSet->min+1) % 60; break;
 80028bc:	4b82      	ldr	r3, [pc, #520]	; (8002ac8 <updateClockState+0x244>)
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	785b      	ldrb	r3, [r3, #1]
 80028c2:	3301      	adds	r3, #1
 80028c4:	213c      	movs	r1, #60	; 0x3c
 80028c6:	0018      	movs	r0, r3
 80028c8:	f7fd fd96 	bl	80003f8 <__aeabi_idivmod>
 80028cc:	000b      	movs	r3, r1
 80028ce:	001a      	movs	r2, r3
 80028d0:	4b7d      	ldr	r3, [pc, #500]	; (8002ac8 <updateClockState+0x244>)
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	b2d2      	uxtb	r2, r2
 80028d6:	705a      	strb	r2, [r3, #1]
 80028d8:	e041      	b.n	800295e <updateClockState+0xda>
			case 2: clockVars.timeToSet->hr = (clockVars.timeToSet->hr+1) % 24; break;
 80028da:	4b7b      	ldr	r3, [pc, #492]	; (8002ac8 <updateClockState+0x244>)
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	781b      	ldrb	r3, [r3, #0]
 80028e0:	3301      	adds	r3, #1
 80028e2:	2118      	movs	r1, #24
 80028e4:	0018      	movs	r0, r3
 80028e6:	f7fd fd87 	bl	80003f8 <__aeabi_idivmod>
 80028ea:	000b      	movs	r3, r1
 80028ec:	001a      	movs	r2, r3
 80028ee:	4b76      	ldr	r3, [pc, #472]	; (8002ac8 <updateClockState+0x244>)
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	b2d2      	uxtb	r2, r2
 80028f4:	701a      	strb	r2, [r3, #0]
 80028f6:	e032      	b.n	800295e <updateClockState+0xda>
			case 3: clockVars.dateToSet->yr++; break;		// supposed to be between large numbers. no need for bounds checking
 80028f8:	4b73      	ldr	r3, [pc, #460]	; (8002ac8 <updateClockState+0x244>)
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	881a      	ldrh	r2, [r3, #0]
 80028fe:	3201      	adds	r2, #1
 8002900:	b292      	uxth	r2, r2
 8002902:	801a      	strh	r2, [r3, #0]
 8002904:	e02b      	b.n	800295e <updateClockState+0xda>
			case 4: clockVars.dateToSet->month = (clockVars.dateToSet->month) % 12 + 1; break;
 8002906:	4b70      	ldr	r3, [pc, #448]	; (8002ac8 <updateClockState+0x244>)
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	789b      	ldrb	r3, [r3, #2]
 800290c:	210c      	movs	r1, #12
 800290e:	0018      	movs	r0, r3
 8002910:	f7fd fc88 	bl	8000224 <__aeabi_uidivmod>
 8002914:	000b      	movs	r3, r1
 8002916:	b2da      	uxtb	r2, r3
 8002918:	4b6b      	ldr	r3, [pc, #428]	; (8002ac8 <updateClockState+0x244>)
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	3201      	adds	r2, #1
 800291e:	b2d2      	uxtb	r2, r2
 8002920:	709a      	strb	r2, [r3, #2]
 8002922:	e01c      	b.n	800295e <updateClockState+0xda>
			case 5: clockVars.dateToSet->date = ((clockVars.dateToSet->date) % maxDaysInMonth(clockVars.dateToSet->month, clockVars.dateToSet->yr)) + 1; break;
 8002924:	4b68      	ldr	r3, [pc, #416]	; (8002ac8 <updateClockState+0x244>)
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	78dc      	ldrb	r4, [r3, #3]
 800292a:	4b67      	ldr	r3, [pc, #412]	; (8002ac8 <updateClockState+0x244>)
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	789a      	ldrb	r2, [r3, #2]
 8002930:	4b65      	ldr	r3, [pc, #404]	; (8002ac8 <updateClockState+0x244>)
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	881b      	ldrh	r3, [r3, #0]
 8002936:	0019      	movs	r1, r3
 8002938:	0010      	movs	r0, r2
 800293a:	f001 f921 	bl	8003b80 <maxDaysInMonth>
 800293e:	0003      	movs	r3, r0
 8002940:	0019      	movs	r1, r3
 8002942:	0020      	movs	r0, r4
 8002944:	f7fd fc6e 	bl	8000224 <__aeabi_uidivmod>
 8002948:	000b      	movs	r3, r1
 800294a:	b2da      	uxtb	r2, r3
 800294c:	4b5e      	ldr	r3, [pc, #376]	; (8002ac8 <updateClockState+0x244>)
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	3201      	adds	r2, #1
 8002952:	b2d2      	uxtb	r2, r2
 8002954:	70da      	strb	r2, [r3, #3]
 8002956:	e002      	b.n	800295e <updateClockState+0xda>
			default: break;
		}
	}
 8002958:	46c0      	nop			; (mov r8, r8)
 800295a:	e000      	b.n	800295e <updateClockState+0xda>
			default: break;
 800295c:	46c0      	nop			; (mov r8, r8)
	// change fields down, do nothing if not setting clock
	if (buttons.is3Pressed && clockVars.isBeingSet) {
 800295e:	4b59      	ldr	r3, [pc, #356]	; (8002ac4 <updateClockState+0x240>)
 8002960:	789b      	ldrb	r3, [r3, #2]
 8002962:	b2db      	uxtb	r3, r3
 8002964:	2b00      	cmp	r3, #0
 8002966:	d066      	beq.n	8002a36 <updateClockState+0x1b2>
 8002968:	4b57      	ldr	r3, [pc, #348]	; (8002ac8 <updateClockState+0x244>)
 800296a:	781b      	ldrb	r3, [r3, #0]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d062      	beq.n	8002a36 <updateClockState+0x1b2>
		buttons.is3Pressed = 0;
 8002970:	4b54      	ldr	r3, [pc, #336]	; (8002ac4 <updateClockState+0x240>)
 8002972:	2200      	movs	r2, #0
 8002974:	709a      	strb	r2, [r3, #2]
		updateFace.clock = 1;
 8002976:	4b55      	ldr	r3, [pc, #340]	; (8002acc <updateClockState+0x248>)
 8002978:	2201      	movs	r2, #1
 800297a:	701a      	strb	r2, [r3, #0]
		switch (clockVars.fieldBeingSet) {
 800297c:	4b52      	ldr	r3, [pc, #328]	; (8002ac8 <updateClockState+0x244>)
 800297e:	785b      	ldrb	r3, [r3, #1]
 8002980:	2b05      	cmp	r3, #5
 8002982:	d85a      	bhi.n	8002a3a <updateClockState+0x1b6>
 8002984:	009a      	lsls	r2, r3, #2
 8002986:	4b53      	ldr	r3, [pc, #332]	; (8002ad4 <updateClockState+0x250>)
 8002988:	18d3      	adds	r3, r2, r3
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	469f      	mov	pc, r3
			case 1:
				if (clockVars.timeToSet->min == 0) clockVars.timeToSet->min = 59;
 800298e:	4b4e      	ldr	r3, [pc, #312]	; (8002ac8 <updateClockState+0x244>)
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	785b      	ldrb	r3, [r3, #1]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d104      	bne.n	80029a2 <updateClockState+0x11e>
 8002998:	4b4b      	ldr	r3, [pc, #300]	; (8002ac8 <updateClockState+0x244>)
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	223b      	movs	r2, #59	; 0x3b
 800299e:	705a      	strb	r2, [r3, #1]
				else clockVars.timeToSet->min--;
				break;
 80029a0:	e04c      	b.n	8002a3c <updateClockState+0x1b8>
				else clockVars.timeToSet->min--;
 80029a2:	4b49      	ldr	r3, [pc, #292]	; (8002ac8 <updateClockState+0x244>)
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	785a      	ldrb	r2, [r3, #1]
 80029a8:	3a01      	subs	r2, #1
 80029aa:	b2d2      	uxtb	r2, r2
 80029ac:	705a      	strb	r2, [r3, #1]
				break;
 80029ae:	e045      	b.n	8002a3c <updateClockState+0x1b8>
			case 2:
				if (clockVars.timeToSet->hr == 0) clockVars.timeToSet->hr = 23;
 80029b0:	4b45      	ldr	r3, [pc, #276]	; (8002ac8 <updateClockState+0x244>)
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	781b      	ldrb	r3, [r3, #0]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d104      	bne.n	80029c4 <updateClockState+0x140>
 80029ba:	4b43      	ldr	r3, [pc, #268]	; (8002ac8 <updateClockState+0x244>)
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	2217      	movs	r2, #23
 80029c0:	701a      	strb	r2, [r3, #0]
				else clockVars.timeToSet->hr--;
				break;
 80029c2:	e03b      	b.n	8002a3c <updateClockState+0x1b8>
				else clockVars.timeToSet->hr--;
 80029c4:	4b40      	ldr	r3, [pc, #256]	; (8002ac8 <updateClockState+0x244>)
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	781a      	ldrb	r2, [r3, #0]
 80029ca:	3a01      	subs	r2, #1
 80029cc:	b2d2      	uxtb	r2, r2
 80029ce:	701a      	strb	r2, [r3, #0]
				break;
 80029d0:	e034      	b.n	8002a3c <updateClockState+0x1b8>
			case 3: clockVars.dateToSet->yr--; break;		// supposed to be from 1950-2050. no need to do bounds checking
 80029d2:	4b3d      	ldr	r3, [pc, #244]	; (8002ac8 <updateClockState+0x244>)
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	881a      	ldrh	r2, [r3, #0]
 80029d8:	3a01      	subs	r2, #1
 80029da:	b292      	uxth	r2, r2
 80029dc:	801a      	strh	r2, [r3, #0]
 80029de:	e02d      	b.n	8002a3c <updateClockState+0x1b8>
			case 4: //clockVars.dateToSet->month = clockVars.dateToSet->month == 1 ? 12 : clockVars.dateToSet->month-1; break;
				if (clockVars.dateToSet->month == 1) clockVars.dateToSet->month = 12;
 80029e0:	4b39      	ldr	r3, [pc, #228]	; (8002ac8 <updateClockState+0x244>)
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	789b      	ldrb	r3, [r3, #2]
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	d104      	bne.n	80029f4 <updateClockState+0x170>
 80029ea:	4b37      	ldr	r3, [pc, #220]	; (8002ac8 <updateClockState+0x244>)
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	220c      	movs	r2, #12
 80029f0:	709a      	strb	r2, [r3, #2]
				else clockVars.dateToSet->month--;
				break;
 80029f2:	e023      	b.n	8002a3c <updateClockState+0x1b8>
				else clockVars.dateToSet->month--;
 80029f4:	4b34      	ldr	r3, [pc, #208]	; (8002ac8 <updateClockState+0x244>)
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	789a      	ldrb	r2, [r3, #2]
 80029fa:	3a01      	subs	r2, #1
 80029fc:	b2d2      	uxtb	r2, r2
 80029fe:	709a      	strb	r2, [r3, #2]
				break;
 8002a00:	e01c      	b.n	8002a3c <updateClockState+0x1b8>
			case 5:
				if (clockVars.dateToSet->date == 1) clockVars.dateToSet->date = maxDaysInMonth(clockVars.dateToSet->month, clockVars.dateToSet->yr);
 8002a02:	4b31      	ldr	r3, [pc, #196]	; (8002ac8 <updateClockState+0x244>)
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	78db      	ldrb	r3, [r3, #3]
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d10d      	bne.n	8002a28 <updateClockState+0x1a4>
 8002a0c:	4b2e      	ldr	r3, [pc, #184]	; (8002ac8 <updateClockState+0x244>)
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	789a      	ldrb	r2, [r3, #2]
 8002a12:	4b2d      	ldr	r3, [pc, #180]	; (8002ac8 <updateClockState+0x244>)
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	8819      	ldrh	r1, [r3, #0]
 8002a18:	4b2b      	ldr	r3, [pc, #172]	; (8002ac8 <updateClockState+0x244>)
 8002a1a:	685c      	ldr	r4, [r3, #4]
 8002a1c:	0010      	movs	r0, r2
 8002a1e:	f001 f8af 	bl	8003b80 <maxDaysInMonth>
 8002a22:	0003      	movs	r3, r0
 8002a24:	70e3      	strb	r3, [r4, #3]
				else clockVars.dateToSet->date--;
				break;
 8002a26:	e009      	b.n	8002a3c <updateClockState+0x1b8>
				else clockVars.dateToSet->date--;
 8002a28:	4b27      	ldr	r3, [pc, #156]	; (8002ac8 <updateClockState+0x244>)
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	78da      	ldrb	r2, [r3, #3]
 8002a2e:	3a01      	subs	r2, #1
 8002a30:	b2d2      	uxtb	r2, r2
 8002a32:	70da      	strb	r2, [r3, #3]
				break;
 8002a34:	e002      	b.n	8002a3c <updateClockState+0x1b8>
			default: break;
		}
	}
 8002a36:	46c0      	nop			; (mov r8, r8)
 8002a38:	e000      	b.n	8002a3c <updateClockState+0x1b8>
			default: break;
 8002a3a:	46c0      	nop			; (mov r8, r8)
	// switches between setting mode and default mode. changes between different clock fields
	if (buttons.is4Pressed) {
 8002a3c:	4b21      	ldr	r3, [pc, #132]	; (8002ac4 <updateClockState+0x240>)
 8002a3e:	78db      	ldrb	r3, [r3, #3]
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d03a      	beq.n	8002abc <updateClockState+0x238>
		buttons.is4Pressed = 0;
 8002a46:	4b1f      	ldr	r3, [pc, #124]	; (8002ac4 <updateClockState+0x240>)
 8002a48:	2200      	movs	r2, #0
 8002a4a:	70da      	strb	r2, [r3, #3]
		updateFace.clock = 1;
 8002a4c:	4b1f      	ldr	r3, [pc, #124]	; (8002acc <updateClockState+0x248>)
 8002a4e:	2201      	movs	r2, #1
 8002a50:	701a      	strb	r2, [r3, #0]
		clockVars.fieldBeingSet = (clockVars.fieldBeingSet + 1) % (NUM_CLOCKFIELDS + 1);
 8002a52:	4b1d      	ldr	r3, [pc, #116]	; (8002ac8 <updateClockState+0x244>)
 8002a54:	785b      	ldrb	r3, [r3, #1]
 8002a56:	3301      	adds	r3, #1
 8002a58:	2106      	movs	r1, #6
 8002a5a:	0018      	movs	r0, r3
 8002a5c:	f7fd fccc 	bl	80003f8 <__aeabi_idivmod>
 8002a60:	000b      	movs	r3, r1
 8002a62:	b2da      	uxtb	r2, r3
 8002a64:	4b18      	ldr	r3, [pc, #96]	; (8002ac8 <updateClockState+0x244>)
 8002a66:	705a      	strb	r2, [r3, #1]
		if (clockVars.fieldBeingSet != 0) {
 8002a68:	4b17      	ldr	r3, [pc, #92]	; (8002ac8 <updateClockState+0x244>)
 8002a6a:	785b      	ldrb	r3, [r3, #1]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d016      	beq.n	8002a9e <updateClockState+0x21a>
			clockVars.isBeingSet = 1;
 8002a70:	4b15      	ldr	r3, [pc, #84]	; (8002ac8 <updateClockState+0x244>)
 8002a72:	2201      	movs	r2, #1
 8002a74:	701a      	strb	r2, [r3, #0]

			// should pull current time when first entering setting mode
			if (clockVars.fieldBeingSet == 1) {
 8002a76:	4b14      	ldr	r3, [pc, #80]	; (8002ac8 <updateClockState+0x244>)
 8002a78:	785b      	ldrb	r3, [r3, #1]
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d11e      	bne.n	8002abc <updateClockState+0x238>
				getDateTime(clockVars.dateToSet, clockVars.timeToSet, hrtc);
 8002a7e:	4b12      	ldr	r3, [pc, #72]	; (8002ac8 <updateClockState+0x244>)
 8002a80:	6858      	ldr	r0, [r3, #4]
 8002a82:	4b11      	ldr	r3, [pc, #68]	; (8002ac8 <updateClockState+0x244>)
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	0019      	movs	r1, r3
 8002a8a:	f7ff f867 	bl	8001b5c <getDateTime>
				HAL_RTC_DeactivateAlarm(hrtc, RTC_ALARM_B);
 8002a8e:	2380      	movs	r3, #128	; 0x80
 8002a90:	009a      	lsls	r2, r3, #2
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	0011      	movs	r1, r2
 8002a96:	0018      	movs	r0, r3
 8002a98:	f004 f962 	bl	8006d60 <HAL_RTC_DeactivateAlarm>
			setDateTime(clockVars.dateToSet, clockVars.timeToSet, hrtc);
			setClockAlarm(hrtc);
		}
	}
	// checks on clock set for other buttons here (what did this note mean??)
}
 8002a9c:	e00e      	b.n	8002abc <updateClockState+0x238>
			clockVars.isBeingSet = 0;
 8002a9e:	4b0a      	ldr	r3, [pc, #40]	; (8002ac8 <updateClockState+0x244>)
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	701a      	strb	r2, [r3, #0]
			setDateTime(clockVars.dateToSet, clockVars.timeToSet, hrtc);
 8002aa4:	4b08      	ldr	r3, [pc, #32]	; (8002ac8 <updateClockState+0x244>)
 8002aa6:	6858      	ldr	r0, [r3, #4]
 8002aa8:	4b07      	ldr	r3, [pc, #28]	; (8002ac8 <updateClockState+0x244>)
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	687a      	ldr	r2, [r7, #4]
 8002aae:	0019      	movs	r1, r3
 8002ab0:	f7fe fed7 	bl	8001862 <setDateTime>
			setClockAlarm(hrtc);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	0018      	movs	r0, r3
 8002ab8:	f7fe ff48 	bl	800194c <setClockAlarm>
}
 8002abc:	46c0      	nop			; (mov r8, r8)
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	b003      	add	sp, #12
 8002ac2:	bd90      	pop	{r4, r7, pc}
 8002ac4:	2000018c 	.word	0x2000018c
 8002ac8:	200000f0 	.word	0x200000f0
 8002acc:	20000140 	.word	0x20000140
 8002ad0:	0800978c 	.word	0x0800978c
 8002ad4:	080097a4 	.word	0x080097a4

08002ad8 <updateTimerState>:
 *     second, timer only runs for half second.)
 *     also not sure how to implement pause using rtc (alarm value has to change depending on how long timer is paused for)
 *   might need to change to using only hardware timer for this instead of rtc because of problems listed above
 *   insert a few more functions into this (those that need to use the hardware)
 */
void updateTimerState(TIM_HandleTypeDef *timerStopwatchTim) {
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b082      	sub	sp, #8
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
	if (timerVars.isBeingSet) {
 8002ae0:	4b93      	ldr	r3, [pc, #588]	; (8002d30 <updateTimerState+0x258>)
 8002ae2:	781b      	ldrb	r3, [r3, #0]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d100      	bne.n	8002aea <updateTimerState+0x12>
 8002ae8:	e089      	b.n	8002bfe <updateTimerState+0x126>
		if (buttons.is2Pressed) {
 8002aea:	4b92      	ldr	r3, [pc, #584]	; (8002d34 <updateTimerState+0x25c>)
 8002aec:	785b      	ldrb	r3, [r3, #1]
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d03b      	beq.n	8002b6c <updateTimerState+0x94>
			buttons.is2Pressed = 0;
 8002af4:	4b8f      	ldr	r3, [pc, #572]	; (8002d34 <updateTimerState+0x25c>)
 8002af6:	2200      	movs	r2, #0
 8002af8:	705a      	strb	r2, [r3, #1]
			updateFace.timer = 1;
 8002afa:	4b8f      	ldr	r3, [pc, #572]	; (8002d38 <updateTimerState+0x260>)
 8002afc:	2201      	movs	r2, #1
 8002afe:	705a      	strb	r2, [r3, #1]

			// set field up
			switch (timerVars.fieldBeingSet) {
 8002b00:	4b8b      	ldr	r3, [pc, #556]	; (8002d30 <updateTimerState+0x258>)
 8002b02:	785b      	ldrb	r3, [r3, #1]
 8002b04:	2b02      	cmp	r3, #2
 8002b06:	d013      	beq.n	8002b30 <updateTimerState+0x58>
 8002b08:	2b03      	cmp	r3, #3
 8002b0a:	d020      	beq.n	8002b4e <updateTimerState+0x76>
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d000      	beq.n	8002b12 <updateTimerState+0x3a>
				case 1: timerVars.timeToSet->sec = (timerVars.timeToSet->sec+1) % 60; break;
				case 2: timerVars.timeToSet->min = (timerVars.timeToSet->min+1) % 60; break;
				case 3: timerVars.timeToSet->hr = (timerVars.timeToSet->hr+1) % 100; break;
				default: break;
 8002b10:	e02d      	b.n	8002b6e <updateTimerState+0x96>
				case 1: timerVars.timeToSet->sec = (timerVars.timeToSet->sec+1) % 60; break;
 8002b12:	4b87      	ldr	r3, [pc, #540]	; (8002d30 <updateTimerState+0x258>)
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	789b      	ldrb	r3, [r3, #2]
 8002b18:	3301      	adds	r3, #1
 8002b1a:	213c      	movs	r1, #60	; 0x3c
 8002b1c:	0018      	movs	r0, r3
 8002b1e:	f7fd fc6b 	bl	80003f8 <__aeabi_idivmod>
 8002b22:	000b      	movs	r3, r1
 8002b24:	001a      	movs	r2, r3
 8002b26:	4b82      	ldr	r3, [pc, #520]	; (8002d30 <updateTimerState+0x258>)
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	b2d2      	uxtb	r2, r2
 8002b2c:	709a      	strb	r2, [r3, #2]
 8002b2e:	e01e      	b.n	8002b6e <updateTimerState+0x96>
				case 2: timerVars.timeToSet->min = (timerVars.timeToSet->min+1) % 60; break;
 8002b30:	4b7f      	ldr	r3, [pc, #508]	; (8002d30 <updateTimerState+0x258>)
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	785b      	ldrb	r3, [r3, #1]
 8002b36:	3301      	adds	r3, #1
 8002b38:	213c      	movs	r1, #60	; 0x3c
 8002b3a:	0018      	movs	r0, r3
 8002b3c:	f7fd fc5c 	bl	80003f8 <__aeabi_idivmod>
 8002b40:	000b      	movs	r3, r1
 8002b42:	001a      	movs	r2, r3
 8002b44:	4b7a      	ldr	r3, [pc, #488]	; (8002d30 <updateTimerState+0x258>)
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	b2d2      	uxtb	r2, r2
 8002b4a:	705a      	strb	r2, [r3, #1]
 8002b4c:	e00f      	b.n	8002b6e <updateTimerState+0x96>
				case 3: timerVars.timeToSet->hr = (timerVars.timeToSet->hr+1) % 100; break;
 8002b4e:	4b78      	ldr	r3, [pc, #480]	; (8002d30 <updateTimerState+0x258>)
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	781b      	ldrb	r3, [r3, #0]
 8002b54:	3301      	adds	r3, #1
 8002b56:	2164      	movs	r1, #100	; 0x64
 8002b58:	0018      	movs	r0, r3
 8002b5a:	f7fd fc4d 	bl	80003f8 <__aeabi_idivmod>
 8002b5e:	000b      	movs	r3, r1
 8002b60:	001a      	movs	r2, r3
 8002b62:	4b73      	ldr	r3, [pc, #460]	; (8002d30 <updateTimerState+0x258>)
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	b2d2      	uxtb	r2, r2
 8002b68:	701a      	strb	r2, [r3, #0]
 8002b6a:	e000      	b.n	8002b6e <updateTimerState+0x96>
			}
		}
 8002b6c:	46c0      	nop			; (mov r8, r8)
		if (buttons.is3Pressed) {
 8002b6e:	4b71      	ldr	r3, [pc, #452]	; (8002d34 <updateTimerState+0x25c>)
 8002b70:	789b      	ldrb	r3, [r3, #2]
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d100      	bne.n	8002b7a <updateTimerState+0xa2>
 8002b78:	e092      	b.n	8002ca0 <updateTimerState+0x1c8>
			buttons.is3Pressed = 0;
 8002b7a:	4b6e      	ldr	r3, [pc, #440]	; (8002d34 <updateTimerState+0x25c>)
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	709a      	strb	r2, [r3, #2]
			updateFace.timer = 1;
 8002b80:	4b6d      	ldr	r3, [pc, #436]	; (8002d38 <updateTimerState+0x260>)
 8002b82:	2201      	movs	r2, #1
 8002b84:	705a      	strb	r2, [r3, #1]

			// set field down
			switch (timerVars.fieldBeingSet) {
 8002b86:	4b6a      	ldr	r3, [pc, #424]	; (8002d30 <updateTimerState+0x258>)
 8002b88:	785b      	ldrb	r3, [r3, #1]
 8002b8a:	2b02      	cmp	r3, #2
 8002b8c:	d015      	beq.n	8002bba <updateTimerState+0xe2>
 8002b8e:	2b03      	cmp	r3, #3
 8002b90:	d024      	beq.n	8002bdc <updateTimerState+0x104>
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d000      	beq.n	8002b98 <updateTimerState+0xc0>
					break;
				case 3:
					if (timerVars.timeToSet->hr == 0) timerVars.timeToSet->hr = 99;		// no limit on hour, since we're not using day
					else timerVars.timeToSet->hr--;
					break;
				default: break;
 8002b96:	e084      	b.n	8002ca2 <updateTimerState+0x1ca>
					if (timerVars.timeToSet->sec == 0) timerVars.timeToSet->sec = 59;
 8002b98:	4b65      	ldr	r3, [pc, #404]	; (8002d30 <updateTimerState+0x258>)
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	789b      	ldrb	r3, [r3, #2]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d104      	bne.n	8002bac <updateTimerState+0xd4>
 8002ba2:	4b63      	ldr	r3, [pc, #396]	; (8002d30 <updateTimerState+0x258>)
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	223b      	movs	r2, #59	; 0x3b
 8002ba8:	709a      	strb	r2, [r3, #2]
					break;
 8002baa:	e07a      	b.n	8002ca2 <updateTimerState+0x1ca>
					else timerVars.timeToSet->sec--;
 8002bac:	4b60      	ldr	r3, [pc, #384]	; (8002d30 <updateTimerState+0x258>)
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	789a      	ldrb	r2, [r3, #2]
 8002bb2:	3a01      	subs	r2, #1
 8002bb4:	b2d2      	uxtb	r2, r2
 8002bb6:	709a      	strb	r2, [r3, #2]
					break;
 8002bb8:	e073      	b.n	8002ca2 <updateTimerState+0x1ca>
					if (timerVars.timeToSet->min == 0) timerVars.timeToSet->min = 59;
 8002bba:	4b5d      	ldr	r3, [pc, #372]	; (8002d30 <updateTimerState+0x258>)
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	785b      	ldrb	r3, [r3, #1]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d104      	bne.n	8002bce <updateTimerState+0xf6>
 8002bc4:	4b5a      	ldr	r3, [pc, #360]	; (8002d30 <updateTimerState+0x258>)
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	223b      	movs	r2, #59	; 0x3b
 8002bca:	705a      	strb	r2, [r3, #1]
					break;
 8002bcc:	e069      	b.n	8002ca2 <updateTimerState+0x1ca>
					else timerVars.timeToSet->min--;
 8002bce:	4b58      	ldr	r3, [pc, #352]	; (8002d30 <updateTimerState+0x258>)
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	785a      	ldrb	r2, [r3, #1]
 8002bd4:	3a01      	subs	r2, #1
 8002bd6:	b2d2      	uxtb	r2, r2
 8002bd8:	705a      	strb	r2, [r3, #1]
					break;
 8002bda:	e062      	b.n	8002ca2 <updateTimerState+0x1ca>
					if (timerVars.timeToSet->hr == 0) timerVars.timeToSet->hr = 99;		// no limit on hour, since we're not using day
 8002bdc:	4b54      	ldr	r3, [pc, #336]	; (8002d30 <updateTimerState+0x258>)
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	781b      	ldrb	r3, [r3, #0]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d104      	bne.n	8002bf0 <updateTimerState+0x118>
 8002be6:	4b52      	ldr	r3, [pc, #328]	; (8002d30 <updateTimerState+0x258>)
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	2263      	movs	r2, #99	; 0x63
 8002bec:	701a      	strb	r2, [r3, #0]
					break;
 8002bee:	e058      	b.n	8002ca2 <updateTimerState+0x1ca>
					else timerVars.timeToSet->hr--;
 8002bf0:	4b4f      	ldr	r3, [pc, #316]	; (8002d30 <updateTimerState+0x258>)
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	781a      	ldrb	r2, [r3, #0]
 8002bf6:	3a01      	subs	r2, #1
 8002bf8:	b2d2      	uxtb	r2, r2
 8002bfa:	701a      	strb	r2, [r3, #0]
					break;
 8002bfc:	e051      	b.n	8002ca2 <updateTimerState+0x1ca>
			}
		}
	}
	// not done
	else if (timerVars.isSet) {
 8002bfe:	4b4c      	ldr	r3, [pc, #304]	; (8002d30 <updateTimerState+0x258>)
 8002c00:	789b      	ldrb	r3, [r3, #2]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d04d      	beq.n	8002ca2 <updateTimerState+0x1ca>
		if (buttons.is2Pressed && isTimerRunning == 0) {
 8002c06:	4b4b      	ldr	r3, [pc, #300]	; (8002d34 <updateTimerState+0x25c>)
 8002c08:	785b      	ldrb	r3, [r3, #1]
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d014      	beq.n	8002c3a <updateTimerState+0x162>
 8002c10:	4b4a      	ldr	r3, [pc, #296]	; (8002d3c <updateTimerState+0x264>)
 8002c12:	781b      	ldrb	r3, [r3, #0]
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d10f      	bne.n	8002c3a <updateTimerState+0x162>
			buttons.is2Pressed = 0;
 8002c1a:	4b46      	ldr	r3, [pc, #280]	; (8002d34 <updateTimerState+0x25c>)
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	705a      	strb	r2, [r3, #1]
			updateFace.timer = 1;
 8002c20:	4b45      	ldr	r3, [pc, #276]	; (8002d38 <updateTimerState+0x260>)
 8002c22:	2201      	movs	r2, #1
 8002c24:	705a      	strb	r2, [r3, #1]

			// start timer
			runTimer(timerStopwatchTim);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	0018      	movs	r0, r3
 8002c2a:	f001 fbb7 	bl	800439c <runTimer>
			isTimerRunning = 1;
 8002c2e:	4b43      	ldr	r3, [pc, #268]	; (8002d3c <updateTimerState+0x264>)
 8002c30:	2201      	movs	r2, #1
 8002c32:	701a      	strb	r2, [r3, #0]
			isTimerPaused = 0;
 8002c34:	4b42      	ldr	r3, [pc, #264]	; (8002d40 <updateTimerState+0x268>)
 8002c36:	2200      	movs	r2, #0
 8002c38:	701a      	strb	r2, [r3, #0]
		}
		if (buttons.is3Pressed && isTimerRunning) {
 8002c3a:	4b3e      	ldr	r3, [pc, #248]	; (8002d34 <updateTimerState+0x25c>)
 8002c3c:	789b      	ldrb	r3, [r3, #2]
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d014      	beq.n	8002c6e <updateTimerState+0x196>
 8002c44:	4b3d      	ldr	r3, [pc, #244]	; (8002d3c <updateTimerState+0x264>)
 8002c46:	781b      	ldrb	r3, [r3, #0]
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d00f      	beq.n	8002c6e <updateTimerState+0x196>
			buttons.is3Pressed = 0;
 8002c4e:	4b39      	ldr	r3, [pc, #228]	; (8002d34 <updateTimerState+0x25c>)
 8002c50:	2200      	movs	r2, #0
 8002c52:	709a      	strb	r2, [r3, #2]
			updateFace.timer = 1;
 8002c54:	4b38      	ldr	r3, [pc, #224]	; (8002d38 <updateTimerState+0x260>)
 8002c56:	2201      	movs	r2, #1
 8002c58:	705a      	strb	r2, [r3, #1]

			// pause timer
			pauseTimer(timerStopwatchTim);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	0018      	movs	r0, r3
 8002c5e:	f001 fbf9 	bl	8004454 <pauseTimer>
			isTimerRunning = 0;
 8002c62:	4b36      	ldr	r3, [pc, #216]	; (8002d3c <updateTimerState+0x264>)
 8002c64:	2200      	movs	r2, #0
 8002c66:	701a      	strb	r2, [r3, #0]
			isTimerPaused = 1;
 8002c68:	4b35      	ldr	r3, [pc, #212]	; (8002d40 <updateTimerState+0x268>)
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	701a      	strb	r2, [r3, #0]
		}
		if (buttons.is4Pressed) {
 8002c6e:	4b31      	ldr	r3, [pc, #196]	; (8002d34 <updateTimerState+0x25c>)
 8002c70:	78db      	ldrb	r3, [r3, #3]
 8002c72:	b2db      	uxtb	r3, r3
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d014      	beq.n	8002ca2 <updateTimerState+0x1ca>
			buttons.is4Pressed = 0;
 8002c78:	4b2e      	ldr	r3, [pc, #184]	; (8002d34 <updateTimerState+0x25c>)
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	70da      	strb	r2, [r3, #3]
			updateFace.timer = 1;
 8002c7e:	4b2e      	ldr	r3, [pc, #184]	; (8002d38 <updateTimerState+0x260>)
 8002c80:	2201      	movs	r2, #1
 8002c82:	705a      	strb	r2, [r3, #1]

			// stop and clear timer
			stopTimer(timerStopwatchTim);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	0018      	movs	r0, r3
 8002c88:	f001 fbf8 	bl	800447c <stopTimer>
			timerVars.isSet = 0;
 8002c8c:	4b28      	ldr	r3, [pc, #160]	; (8002d30 <updateTimerState+0x258>)
 8002c8e:	2200      	movs	r2, #0
 8002c90:	709a      	strb	r2, [r3, #2]
			isTimerRunning = 0;
 8002c92:	4b2a      	ldr	r3, [pc, #168]	; (8002d3c <updateTimerState+0x264>)
 8002c94:	2200      	movs	r2, #0
 8002c96:	701a      	strb	r2, [r3, #0]
			isTimerPaused = 0;
 8002c98:	4b29      	ldr	r3, [pc, #164]	; (8002d40 <updateTimerState+0x268>)
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	701a      	strb	r2, [r3, #0]
 8002c9e:	e000      	b.n	8002ca2 <updateTimerState+0x1ca>
		}
 8002ca0:	46c0      	nop			; (mov r8, r8)
		}
	}
	// not done? might be done (other buttons start/stop timer)
	if (buttons.is4Pressed) {
 8002ca2:	4b24      	ldr	r3, [pc, #144]	; (8002d34 <updateTimerState+0x25c>)
 8002ca4:	78db      	ldrb	r3, [r3, #3]
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d03c      	beq.n	8002d26 <updateTimerState+0x24e>
		buttons.is4Pressed = 0;
 8002cac:	4b21      	ldr	r3, [pc, #132]	; (8002d34 <updateTimerState+0x25c>)
 8002cae:	2200      	movs	r2, #0
 8002cb0:	70da      	strb	r2, [r3, #3]
		updateFace.timer = 1;
 8002cb2:	4b21      	ldr	r3, [pc, #132]	; (8002d38 <updateTimerState+0x260>)
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	705a      	strb	r2, [r3, #1]

		// change field/mode
		timerVars.fieldBeingSet = (timerVars.fieldBeingSet + 1) % (NUM_TIMERFIELDS + 1);
 8002cb8:	4b1d      	ldr	r3, [pc, #116]	; (8002d30 <updateTimerState+0x258>)
 8002cba:	785b      	ldrb	r3, [r3, #1]
 8002cbc:	3301      	adds	r3, #1
 8002cbe:	4a21      	ldr	r2, [pc, #132]	; (8002d44 <updateTimerState+0x26c>)
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	d504      	bpl.n	8002cce <updateTimerState+0x1f6>
 8002cc4:	3b01      	subs	r3, #1
 8002cc6:	2204      	movs	r2, #4
 8002cc8:	4252      	negs	r2, r2
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	3301      	adds	r3, #1
 8002cce:	b2da      	uxtb	r2, r3
 8002cd0:	4b17      	ldr	r3, [pc, #92]	; (8002d30 <updateTimerState+0x258>)
 8002cd2:	705a      	strb	r2, [r3, #1]
		if (timerVars.fieldBeingSet != 0) {
 8002cd4:	4b16      	ldr	r3, [pc, #88]	; (8002d30 <updateTimerState+0x258>)
 8002cd6:	785b      	ldrb	r3, [r3, #1]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d016      	beq.n	8002d0a <updateTimerState+0x232>
			timerVars.isBeingSet = 1;
 8002cdc:	4b14      	ldr	r3, [pc, #80]	; (8002d30 <updateTimerState+0x258>)
 8002cde:	2201      	movs	r2, #1
 8002ce0:	701a      	strb	r2, [r3, #0]
			timerVars.isSet = 0;
 8002ce2:	4b13      	ldr	r3, [pc, #76]	; (8002d30 <updateTimerState+0x258>)
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	709a      	strb	r2, [r3, #2]

			// set temp fields to 0 when first entering setting mode
			if (timerVars.fieldBeingSet == 1) {
 8002ce8:	4b11      	ldr	r3, [pc, #68]	; (8002d30 <updateTimerState+0x258>)
 8002cea:	785b      	ldrb	r3, [r3, #1]
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d11a      	bne.n	8002d26 <updateTimerState+0x24e>
				timerVars.timeToSet->sec = 0;
 8002cf0:	4b0f      	ldr	r3, [pc, #60]	; (8002d30 <updateTimerState+0x258>)
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	709a      	strb	r2, [r3, #2]
				timerVars.timeToSet->min = 0;
 8002cf8:	4b0d      	ldr	r3, [pc, #52]	; (8002d30 <updateTimerState+0x258>)
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	705a      	strb	r2, [r3, #1]
				timerVars.timeToSet->hr = 0;
 8002d00:	4b0b      	ldr	r3, [pc, #44]	; (8002d30 <updateTimerState+0x258>)
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	2200      	movs	r2, #0
 8002d06:	701a      	strb	r2, [r3, #0]
			timerVars.isBeingSet = 0;
			timerVars.isSet = 1;
			timerCounter = timeToSeconds(timerVars.timeToSet);
		}
	}
}
 8002d08:	e00d      	b.n	8002d26 <updateTimerState+0x24e>
			timerVars.isBeingSet = 0;
 8002d0a:	4b09      	ldr	r3, [pc, #36]	; (8002d30 <updateTimerState+0x258>)
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	701a      	strb	r2, [r3, #0]
			timerVars.isSet = 1;
 8002d10:	4b07      	ldr	r3, [pc, #28]	; (8002d30 <updateTimerState+0x258>)
 8002d12:	2201      	movs	r2, #1
 8002d14:	709a      	strb	r2, [r3, #2]
			timerCounter = timeToSeconds(timerVars.timeToSet);
 8002d16:	4b06      	ldr	r3, [pc, #24]	; (8002d30 <updateTimerState+0x258>)
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	0018      	movs	r0, r3
 8002d1c:	f7fe ff6a 	bl	8001bf4 <timeToSeconds>
 8002d20:	0002      	movs	r2, r0
 8002d22:	4b09      	ldr	r3, [pc, #36]	; (8002d48 <updateTimerState+0x270>)
 8002d24:	601a      	str	r2, [r3, #0]
}
 8002d26:	46c0      	nop			; (mov r8, r8)
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	b002      	add	sp, #8
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	46c0      	nop			; (mov r8, r8)
 8002d30:	200000fc 	.word	0x200000fc
 8002d34:	2000018c 	.word	0x2000018c
 8002d38:	20000140 	.word	0x20000140
 8002d3c:	20000190 	.word	0x20000190
 8002d40:	20000198 	.word	0x20000198
 8002d44:	80000003 	.word	0x80000003
 8002d48:	20000148 	.word	0x20000148

08002d4c <updateAlarmState>:
 *   should change to make it possible to have multiple alarms
 *   also pick alarms that repeat and alarms that don't
 *   need to make changes to ui to make this happen
 *   currently just does old behavior (only 1 alarm)
 */
void updateAlarmState(RTC_HandleTypeDef *hrtc) {
 8002d4c:	b5b0      	push	{r4, r5, r7, lr}
 8002d4e:	b086      	sub	sp, #24
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
	if (buttons.is2Pressed && alarmVars.isBeingSet) {
 8002d54:	4b94      	ldr	r3, [pc, #592]	; (8002fa8 <updateAlarmState+0x25c>)
 8002d56:	785b      	ldrb	r3, [r3, #1]
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d052      	beq.n	8002e04 <updateAlarmState+0xb8>
 8002d5e:	4b93      	ldr	r3, [pc, #588]	; (8002fac <updateAlarmState+0x260>)
 8002d60:	781b      	ldrb	r3, [r3, #0]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d04e      	beq.n	8002e04 <updateAlarmState+0xb8>
		buttons.is2Pressed = 0;
 8002d66:	4b90      	ldr	r3, [pc, #576]	; (8002fa8 <updateAlarmState+0x25c>)
 8002d68:	2200      	movs	r2, #0
 8002d6a:	705a      	strb	r2, [r3, #1]
		updateFace.alarm = 1;
 8002d6c:	4b90      	ldr	r3, [pc, #576]	; (8002fb0 <updateAlarmState+0x264>)
 8002d6e:	2201      	movs	r2, #1
 8002d70:	709a      	strb	r2, [r3, #2]

		// change fields up
		switch (alarmVars.fieldBeingSet) {
 8002d72:	4b8e      	ldr	r3, [pc, #568]	; (8002fac <updateAlarmState+0x260>)
 8002d74:	785b      	ldrb	r3, [r3, #1]
 8002d76:	2b02      	cmp	r3, #2
 8002d78:	d017      	beq.n	8002daa <updateAlarmState+0x5e>
 8002d7a:	dc02      	bgt.n	8002d82 <updateAlarmState+0x36>
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d005      	beq.n	8002d8c <updateAlarmState+0x40>
			case 1: alarmVars.alarmToSet->sec = (alarmVars.alarmToSet->sec + 1) % 60; break;
			case 2: alarmVars.alarmToSet->min = (alarmVars.alarmToSet->min + 1) % 60; break;
			case 3: alarmVars.alarmToSet->hr = (alarmVars.alarmToSet->hr + 1) % 24; break;
			case 4: alarmVars.alarmToSet->weekday = (alarmVars.alarmToSet->weekday) % 7 + 1; break;
			default: break;
 8002d80:	e041      	b.n	8002e06 <updateAlarmState+0xba>
		switch (alarmVars.fieldBeingSet) {
 8002d82:	2b03      	cmp	r3, #3
 8002d84:	d020      	beq.n	8002dc8 <updateAlarmState+0x7c>
 8002d86:	2b04      	cmp	r3, #4
 8002d88:	d02d      	beq.n	8002de6 <updateAlarmState+0x9a>
			default: break;
 8002d8a:	e03c      	b.n	8002e06 <updateAlarmState+0xba>
			case 1: alarmVars.alarmToSet->sec = (alarmVars.alarmToSet->sec + 1) % 60; break;
 8002d8c:	4b87      	ldr	r3, [pc, #540]	; (8002fac <updateAlarmState+0x260>)
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	789b      	ldrb	r3, [r3, #2]
 8002d92:	3301      	adds	r3, #1
 8002d94:	213c      	movs	r1, #60	; 0x3c
 8002d96:	0018      	movs	r0, r3
 8002d98:	f7fd fb2e 	bl	80003f8 <__aeabi_idivmod>
 8002d9c:	000b      	movs	r3, r1
 8002d9e:	001a      	movs	r2, r3
 8002da0:	4b82      	ldr	r3, [pc, #520]	; (8002fac <updateAlarmState+0x260>)
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	b2d2      	uxtb	r2, r2
 8002da6:	709a      	strb	r2, [r3, #2]
 8002da8:	e02d      	b.n	8002e06 <updateAlarmState+0xba>
			case 2: alarmVars.alarmToSet->min = (alarmVars.alarmToSet->min + 1) % 60; break;
 8002daa:	4b80      	ldr	r3, [pc, #512]	; (8002fac <updateAlarmState+0x260>)
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	785b      	ldrb	r3, [r3, #1]
 8002db0:	3301      	adds	r3, #1
 8002db2:	213c      	movs	r1, #60	; 0x3c
 8002db4:	0018      	movs	r0, r3
 8002db6:	f7fd fb1f 	bl	80003f8 <__aeabi_idivmod>
 8002dba:	000b      	movs	r3, r1
 8002dbc:	001a      	movs	r2, r3
 8002dbe:	4b7b      	ldr	r3, [pc, #492]	; (8002fac <updateAlarmState+0x260>)
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	b2d2      	uxtb	r2, r2
 8002dc4:	705a      	strb	r2, [r3, #1]
 8002dc6:	e01e      	b.n	8002e06 <updateAlarmState+0xba>
			case 3: alarmVars.alarmToSet->hr = (alarmVars.alarmToSet->hr + 1) % 24; break;
 8002dc8:	4b78      	ldr	r3, [pc, #480]	; (8002fac <updateAlarmState+0x260>)
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	781b      	ldrb	r3, [r3, #0]
 8002dce:	3301      	adds	r3, #1
 8002dd0:	2118      	movs	r1, #24
 8002dd2:	0018      	movs	r0, r3
 8002dd4:	f7fd fb10 	bl	80003f8 <__aeabi_idivmod>
 8002dd8:	000b      	movs	r3, r1
 8002dda:	001a      	movs	r2, r3
 8002ddc:	4b73      	ldr	r3, [pc, #460]	; (8002fac <updateAlarmState+0x260>)
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	b2d2      	uxtb	r2, r2
 8002de2:	701a      	strb	r2, [r3, #0]
 8002de4:	e00f      	b.n	8002e06 <updateAlarmState+0xba>
			case 4: alarmVars.alarmToSet->weekday = (alarmVars.alarmToSet->weekday) % 7 + 1; break;
 8002de6:	4b71      	ldr	r3, [pc, #452]	; (8002fac <updateAlarmState+0x260>)
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	78db      	ldrb	r3, [r3, #3]
 8002dec:	2107      	movs	r1, #7
 8002dee:	0018      	movs	r0, r3
 8002df0:	f7fd fa18 	bl	8000224 <__aeabi_uidivmod>
 8002df4:	000b      	movs	r3, r1
 8002df6:	b2da      	uxtb	r2, r3
 8002df8:	4b6c      	ldr	r3, [pc, #432]	; (8002fac <updateAlarmState+0x260>)
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	3201      	adds	r2, #1
 8002dfe:	b2d2      	uxtb	r2, r2
 8002e00:	70da      	strb	r2, [r3, #3]
 8002e02:	e000      	b.n	8002e06 <updateAlarmState+0xba>
		}
	}
 8002e04:	46c0      	nop			; (mov r8, r8)
	if (buttons.is3Pressed && alarmVars.isBeingSet) {
 8002e06:	4b68      	ldr	r3, [pc, #416]	; (8002fa8 <updateAlarmState+0x25c>)
 8002e08:	789b      	ldrb	r3, [r3, #2]
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d05a      	beq.n	8002ec6 <updateAlarmState+0x17a>
 8002e10:	4b66      	ldr	r3, [pc, #408]	; (8002fac <updateAlarmState+0x260>)
 8002e12:	781b      	ldrb	r3, [r3, #0]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d056      	beq.n	8002ec6 <updateAlarmState+0x17a>
		buttons.is3Pressed = 0;
 8002e18:	4b63      	ldr	r3, [pc, #396]	; (8002fa8 <updateAlarmState+0x25c>)
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	709a      	strb	r2, [r3, #2]
		updateFace.alarm = 1;
 8002e1e:	4b64      	ldr	r3, [pc, #400]	; (8002fb0 <updateAlarmState+0x264>)
 8002e20:	2201      	movs	r2, #1
 8002e22:	709a      	strb	r2, [r3, #2]

		// change fields down
		switch (alarmVars.fieldBeingSet) {
 8002e24:	4b61      	ldr	r3, [pc, #388]	; (8002fac <updateAlarmState+0x260>)
 8002e26:	785b      	ldrb	r3, [r3, #1]
 8002e28:	2b02      	cmp	r3, #2
 8002e2a:	d019      	beq.n	8002e60 <updateAlarmState+0x114>
 8002e2c:	dc02      	bgt.n	8002e34 <updateAlarmState+0xe8>
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d005      	beq.n	8002e3e <updateAlarmState+0xf2>
				break;
			case 4:
				if (alarmVars.alarmToSet->weekday == RTC_WEEKDAY_MONDAY) alarmVars.alarmToSet->weekday = RTC_WEEKDAY_SUNDAY;
				else alarmVars.alarmToSet->weekday--;
				break;
			default: break;
 8002e32:	e049      	b.n	8002ec8 <updateAlarmState+0x17c>
		switch (alarmVars.fieldBeingSet) {
 8002e34:	2b03      	cmp	r3, #3
 8002e36:	d024      	beq.n	8002e82 <updateAlarmState+0x136>
 8002e38:	2b04      	cmp	r3, #4
 8002e3a:	d033      	beq.n	8002ea4 <updateAlarmState+0x158>
			default: break;
 8002e3c:	e044      	b.n	8002ec8 <updateAlarmState+0x17c>
				if (alarmVars.alarmToSet->sec == 0) alarmVars.alarmToSet->sec = 59;
 8002e3e:	4b5b      	ldr	r3, [pc, #364]	; (8002fac <updateAlarmState+0x260>)
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	789b      	ldrb	r3, [r3, #2]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d104      	bne.n	8002e52 <updateAlarmState+0x106>
 8002e48:	4b58      	ldr	r3, [pc, #352]	; (8002fac <updateAlarmState+0x260>)
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	223b      	movs	r2, #59	; 0x3b
 8002e4e:	709a      	strb	r2, [r3, #2]
				break;
 8002e50:	e03a      	b.n	8002ec8 <updateAlarmState+0x17c>
				else alarmVars.alarmToSet->sec--;
 8002e52:	4b56      	ldr	r3, [pc, #344]	; (8002fac <updateAlarmState+0x260>)
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	789a      	ldrb	r2, [r3, #2]
 8002e58:	3a01      	subs	r2, #1
 8002e5a:	b2d2      	uxtb	r2, r2
 8002e5c:	709a      	strb	r2, [r3, #2]
				break;
 8002e5e:	e033      	b.n	8002ec8 <updateAlarmState+0x17c>
				if (alarmVars.alarmToSet->min == 0) alarmVars.alarmToSet->min = 59;
 8002e60:	4b52      	ldr	r3, [pc, #328]	; (8002fac <updateAlarmState+0x260>)
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	785b      	ldrb	r3, [r3, #1]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d104      	bne.n	8002e74 <updateAlarmState+0x128>
 8002e6a:	4b50      	ldr	r3, [pc, #320]	; (8002fac <updateAlarmState+0x260>)
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	223b      	movs	r2, #59	; 0x3b
 8002e70:	705a      	strb	r2, [r3, #1]
				break;
 8002e72:	e029      	b.n	8002ec8 <updateAlarmState+0x17c>
				else alarmVars.alarmToSet->min--;
 8002e74:	4b4d      	ldr	r3, [pc, #308]	; (8002fac <updateAlarmState+0x260>)
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	785a      	ldrb	r2, [r3, #1]
 8002e7a:	3a01      	subs	r2, #1
 8002e7c:	b2d2      	uxtb	r2, r2
 8002e7e:	705a      	strb	r2, [r3, #1]
				break;
 8002e80:	e022      	b.n	8002ec8 <updateAlarmState+0x17c>
				if (alarmVars.alarmToSet->hr == 0) alarmVars.alarmToSet->hr = 23;
 8002e82:	4b4a      	ldr	r3, [pc, #296]	; (8002fac <updateAlarmState+0x260>)
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	781b      	ldrb	r3, [r3, #0]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d104      	bne.n	8002e96 <updateAlarmState+0x14a>
 8002e8c:	4b47      	ldr	r3, [pc, #284]	; (8002fac <updateAlarmState+0x260>)
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	2217      	movs	r2, #23
 8002e92:	701a      	strb	r2, [r3, #0]
				break;
 8002e94:	e018      	b.n	8002ec8 <updateAlarmState+0x17c>
				else alarmVars.alarmToSet->hr--;
 8002e96:	4b45      	ldr	r3, [pc, #276]	; (8002fac <updateAlarmState+0x260>)
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	781a      	ldrb	r2, [r3, #0]
 8002e9c:	3a01      	subs	r2, #1
 8002e9e:	b2d2      	uxtb	r2, r2
 8002ea0:	701a      	strb	r2, [r3, #0]
				break;
 8002ea2:	e011      	b.n	8002ec8 <updateAlarmState+0x17c>
				if (alarmVars.alarmToSet->weekday == RTC_WEEKDAY_MONDAY) alarmVars.alarmToSet->weekday = RTC_WEEKDAY_SUNDAY;
 8002ea4:	4b41      	ldr	r3, [pc, #260]	; (8002fac <updateAlarmState+0x260>)
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	78db      	ldrb	r3, [r3, #3]
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	d104      	bne.n	8002eb8 <updateAlarmState+0x16c>
 8002eae:	4b3f      	ldr	r3, [pc, #252]	; (8002fac <updateAlarmState+0x260>)
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	2207      	movs	r2, #7
 8002eb4:	70da      	strb	r2, [r3, #3]
				break;
 8002eb6:	e007      	b.n	8002ec8 <updateAlarmState+0x17c>
				else alarmVars.alarmToSet->weekday--;
 8002eb8:	4b3c      	ldr	r3, [pc, #240]	; (8002fac <updateAlarmState+0x260>)
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	78da      	ldrb	r2, [r3, #3]
 8002ebe:	3a01      	subs	r2, #1
 8002ec0:	b2d2      	uxtb	r2, r2
 8002ec2:	70da      	strb	r2, [r3, #3]
				break;
 8002ec4:	e000      	b.n	8002ec8 <updateAlarmState+0x17c>
		}
	}
 8002ec6:	46c0      	nop			; (mov r8, r8)
	if (buttons.is4Pressed) {
 8002ec8:	4b37      	ldr	r3, [pc, #220]	; (8002fa8 <updateAlarmState+0x25c>)
 8002eca:	78db      	ldrb	r3, [r3, #3]
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d066      	beq.n	8002fa0 <updateAlarmState+0x254>
		buttons.is4Pressed = 0;
 8002ed2:	4b35      	ldr	r3, [pc, #212]	; (8002fa8 <updateAlarmState+0x25c>)
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	70da      	strb	r2, [r3, #3]
		updateFace.alarm = 1;
 8002ed8:	4b35      	ldr	r3, [pc, #212]	; (8002fb0 <updateAlarmState+0x264>)
 8002eda:	2201      	movs	r2, #1
 8002edc:	709a      	strb	r2, [r3, #2]

		if (isAlarmRunning == 0) {
 8002ede:	4b35      	ldr	r3, [pc, #212]	; (8002fb4 <updateAlarmState+0x268>)
 8002ee0:	781b      	ldrb	r3, [r3, #0]
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d151      	bne.n	8002f8c <updateAlarmState+0x240>
			// toggle between fields
			alarmVars.fieldBeingSet = (alarmVars.fieldBeingSet + 1) % (NUM_ALARMFIELDS + 1);
 8002ee8:	4b30      	ldr	r3, [pc, #192]	; (8002fac <updateAlarmState+0x260>)
 8002eea:	785b      	ldrb	r3, [r3, #1]
 8002eec:	3301      	adds	r3, #1
 8002eee:	2105      	movs	r1, #5
 8002ef0:	0018      	movs	r0, r3
 8002ef2:	f7fd fa81 	bl	80003f8 <__aeabi_idivmod>
 8002ef6:	000b      	movs	r3, r1
 8002ef8:	b2da      	uxtb	r2, r3
 8002efa:	4b2c      	ldr	r3, [pc, #176]	; (8002fac <updateAlarmState+0x260>)
 8002efc:	705a      	strb	r2, [r3, #1]
			if (alarmVars.fieldBeingSet != 0) {
 8002efe:	4b2b      	ldr	r3, [pc, #172]	; (8002fac <updateAlarmState+0x260>)
 8002f00:	785b      	ldrb	r3, [r3, #1]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d034      	beq.n	8002f70 <updateAlarmState+0x224>
				alarmVars.isBeingSet = 1;
 8002f06:	4b29      	ldr	r3, [pc, #164]	; (8002fac <updateAlarmState+0x260>)
 8002f08:	2201      	movs	r2, #1
 8002f0a:	701a      	strb	r2, [r3, #0]
				if (alarmVars.fieldBeingSet == 1) {
 8002f0c:	4b27      	ldr	r3, [pc, #156]	; (8002fac <updateAlarmState+0x260>)
 8002f0e:	785b      	ldrb	r3, [r3, #1]
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d145      	bne.n	8002fa0 <updateAlarmState+0x254>
					struct dates d = {0};
 8002f14:	2510      	movs	r5, #16
 8002f16:	197b      	adds	r3, r7, r5
 8002f18:	0018      	movs	r0, r3
 8002f1a:	2306      	movs	r3, #6
 8002f1c:	001a      	movs	r2, r3
 8002f1e:	2100      	movs	r1, #0
 8002f20:	f005 fc67 	bl	80087f2 <memset>
					struct times t = {0};
 8002f24:	240c      	movs	r4, #12
 8002f26:	193b      	adds	r3, r7, r4
 8002f28:	0018      	movs	r0, r3
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	001a      	movs	r2, r3
 8002f2e:	2100      	movs	r1, #0
 8002f30:	f005 fc5f 	bl	80087f2 <memset>
					getDateTime(&d, &t, hrtc);
 8002f34:	687a      	ldr	r2, [r7, #4]
 8002f36:	0021      	movs	r1, r4
 8002f38:	000c      	movs	r4, r1
 8002f3a:	1879      	adds	r1, r7, r1
 8002f3c:	197b      	adds	r3, r7, r5
 8002f3e:	0018      	movs	r0, r3
 8002f40:	f7fe fe0c 	bl	8001b5c <getDateTime>
					alarmVars.alarmToSet->sec = t.sec;
 8002f44:	4b19      	ldr	r3, [pc, #100]	; (8002fac <updateAlarmState+0x260>)
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	0021      	movs	r1, r4
 8002f4a:	187a      	adds	r2, r7, r1
 8002f4c:	7892      	ldrb	r2, [r2, #2]
 8002f4e:	709a      	strb	r2, [r3, #2]
					alarmVars.alarmToSet->min = t.min;
 8002f50:	4b16      	ldr	r3, [pc, #88]	; (8002fac <updateAlarmState+0x260>)
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	187a      	adds	r2, r7, r1
 8002f56:	7852      	ldrb	r2, [r2, #1]
 8002f58:	705a      	strb	r2, [r3, #1]
					alarmVars.alarmToSet->hr = t.hr;
 8002f5a:	4b14      	ldr	r3, [pc, #80]	; (8002fac <updateAlarmState+0x260>)
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	187a      	adds	r2, r7, r1
 8002f60:	7812      	ldrb	r2, [r2, #0]
 8002f62:	701a      	strb	r2, [r3, #0]
					alarmVars.alarmToSet->weekday = d.weekday;
 8002f64:	4b11      	ldr	r3, [pc, #68]	; (8002fac <updateAlarmState+0x260>)
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	197a      	adds	r2, r7, r5
 8002f6a:	7912      	ldrb	r2, [r2, #4]
 8002f6c:	70da      	strb	r2, [r3, #3]
			// stop and clear alarm hw
			isAlarmRunning = 0;
			HAL_RTC_DeactivateAlarm(hrtc, RTC_ALARM_A);
		}
	}
}
 8002f6e:	e017      	b.n	8002fa0 <updateAlarmState+0x254>
				alarmVars.isBeingSet = 0;
 8002f70:	4b0e      	ldr	r3, [pc, #56]	; (8002fac <updateAlarmState+0x260>)
 8002f72:	2200      	movs	r2, #0
 8002f74:	701a      	strb	r2, [r3, #0]
				isAlarmRunning = 1;
 8002f76:	4b0f      	ldr	r3, [pc, #60]	; (8002fb4 <updateAlarmState+0x268>)
 8002f78:	2201      	movs	r2, #1
 8002f7a:	701a      	strb	r2, [r3, #0]
				setAlarm(alarmVars.alarmToSet, hrtc);
 8002f7c:	4b0b      	ldr	r3, [pc, #44]	; (8002fac <updateAlarmState+0x260>)
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	687a      	ldr	r2, [r7, #4]
 8002f82:	0011      	movs	r1, r2
 8002f84:	0018      	movs	r0, r3
 8002f86:	f7fe fc83 	bl	8001890 <setAlarm>
}
 8002f8a:	e009      	b.n	8002fa0 <updateAlarmState+0x254>
			isAlarmRunning = 0;
 8002f8c:	4b09      	ldr	r3, [pc, #36]	; (8002fb4 <updateAlarmState+0x268>)
 8002f8e:	2200      	movs	r2, #0
 8002f90:	701a      	strb	r2, [r3, #0]
			HAL_RTC_DeactivateAlarm(hrtc, RTC_ALARM_A);
 8002f92:	2380      	movs	r3, #128	; 0x80
 8002f94:	005a      	lsls	r2, r3, #1
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	0011      	movs	r1, r2
 8002f9a:	0018      	movs	r0, r3
 8002f9c:	f003 fee0 	bl	8006d60 <HAL_RTC_DeactivateAlarm>
}
 8002fa0:	46c0      	nop			; (mov r8, r8)
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	b006      	add	sp, #24
 8002fa6:	bdb0      	pop	{r4, r5, r7, pc}
 8002fa8:	2000018c 	.word	0x2000018c
 8002fac:	20000104 	.word	0x20000104
 8002fb0:	20000140 	.word	0x20000140
 8002fb4:	2000014c 	.word	0x2000014c

08002fb8 <updateStopwatchState>:
 * notes:
 *   using lptim now, but might need to change to use other timer as lptim might be used by adc
 *     to take regular measurements of the battery
 *   would just have to modify functions in timers.c
 */
void updateStopwatchState(TIM_HandleTypeDef *timerStopwatchTim) {
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b082      	sub	sp, #8
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
	if (buttons.is2Pressed) {	// start/stop
 8002fc0:	4b28      	ldr	r3, [pc, #160]	; (8003064 <updateStopwatchState+0xac>)
 8002fc2:	785b      	ldrb	r3, [r3, #1]
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d01f      	beq.n	800300a <updateStopwatchState+0x52>
		buttons.is2Pressed = 0;
 8002fca:	4b26      	ldr	r3, [pc, #152]	; (8003064 <updateStopwatchState+0xac>)
 8002fcc:	2200      	movs	r2, #0
 8002fce:	705a      	strb	r2, [r3, #1]
		updateFace.stopwatch = 1;
 8002fd0:	4b25      	ldr	r3, [pc, #148]	; (8003068 <updateStopwatchState+0xb0>)
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	70da      	strb	r2, [r3, #3]

		if (isStopwatchRunning == 0) {
 8002fd6:	4b25      	ldr	r3, [pc, #148]	; (800306c <updateStopwatchState+0xb4>)
 8002fd8:	781b      	ldrb	r3, [r3, #0]
 8002fda:	b2db      	uxtb	r3, r3
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d10a      	bne.n	8002ff6 <updateStopwatchState+0x3e>
			runStopwatch(timerStopwatchTim);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	0018      	movs	r0, r3
 8002fe4:	f001 fa62 	bl	80044ac <runStopwatch>
			isStopwatchRunning = 1;
 8002fe8:	4b20      	ldr	r3, [pc, #128]	; (800306c <updateStopwatchState+0xb4>)
 8002fea:	2201      	movs	r2, #1
 8002fec:	701a      	strb	r2, [r3, #0]
			isStopwatchPaused = 0;
 8002fee:	4b20      	ldr	r3, [pc, #128]	; (8003070 <updateStopwatchState+0xb8>)
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	701a      	strb	r2, [r3, #0]
 8002ff4:	e009      	b.n	800300a <updateStopwatchState+0x52>
		}
		else {
			pauseStopwatch(timerStopwatchTim);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	0018      	movs	r0, r3
 8002ffa:	f001 fab9 	bl	8004570 <pauseStopwatch>
			isStopwatchRunning = 0;
 8002ffe:	4b1b      	ldr	r3, [pc, #108]	; (800306c <updateStopwatchState+0xb4>)
 8003000:	2200      	movs	r2, #0
 8003002:	701a      	strb	r2, [r3, #0]
			isStopwatchPaused = 1;
 8003004:	4b1a      	ldr	r3, [pc, #104]	; (8003070 <updateStopwatchState+0xb8>)
 8003006:	2201      	movs	r2, #1
 8003008:	701a      	strb	r2, [r3, #0]
		}
	}
	if (buttons.is3Pressed) {
 800300a:	4b16      	ldr	r3, [pc, #88]	; (8003064 <updateStopwatchState+0xac>)
 800300c:	789b      	ldrb	r3, [r3, #2]
 800300e:	b2db      	uxtb	r3, r3
 8003010:	2b00      	cmp	r3, #0
 8003012:	d00d      	beq.n	8003030 <updateStopwatchState+0x78>
		buttons.is3Pressed = 0;
 8003014:	4b13      	ldr	r3, [pc, #76]	; (8003064 <updateStopwatchState+0xac>)
 8003016:	2200      	movs	r2, #0
 8003018:	709a      	strb	r2, [r3, #2]
		updateFace.stopwatch = 1;
 800301a:	4b13      	ldr	r3, [pc, #76]	; (8003068 <updateStopwatchState+0xb0>)
 800301c:	2201      	movs	r2, #1
 800301e:	70da      	strb	r2, [r3, #3]

		// pull data and set lap
		stopwatchVars.lapPrev = stopwatchVars.lapCurrent;
 8003020:	4b14      	ldr	r3, [pc, #80]	; (8003074 <updateStopwatchState+0xbc>)
 8003022:	685a      	ldr	r2, [r3, #4]
 8003024:	4b13      	ldr	r3, [pc, #76]	; (8003074 <updateStopwatchState+0xbc>)
 8003026:	601a      	str	r2, [r3, #0]
		stopwatchVars.lapCurrent = stopwatchCounter;
 8003028:	4b13      	ldr	r3, [pc, #76]	; (8003078 <updateStopwatchState+0xc0>)
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	4b11      	ldr	r3, [pc, #68]	; (8003074 <updateStopwatchState+0xbc>)
 800302e:	605a      	str	r2, [r3, #4]
	}
	if (buttons.is4Pressed) {
 8003030:	4b0c      	ldr	r3, [pc, #48]	; (8003064 <updateStopwatchState+0xac>)
 8003032:	78db      	ldrb	r3, [r3, #3]
 8003034:	b2db      	uxtb	r3, r3
 8003036:	2b00      	cmp	r3, #0
 8003038:	d00f      	beq.n	800305a <updateStopwatchState+0xa2>
		buttons.is4Pressed = 0;
 800303a:	4b0a      	ldr	r3, [pc, #40]	; (8003064 <updateStopwatchState+0xac>)
 800303c:	2200      	movs	r2, #0
 800303e:	70da      	strb	r2, [r3, #3]
		updateFace.stopwatch = 1;
 8003040:	4b09      	ldr	r3, [pc, #36]	; (8003068 <updateStopwatchState+0xb0>)
 8003042:	2201      	movs	r2, #1
 8003044:	70da      	strb	r2, [r3, #3]

		// clear stopwatch hw
		clearStopwatch(timerStopwatchTim);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	0018      	movs	r0, r3
 800304a:	f001 faa5 	bl	8004598 <clearStopwatch>
		isStopwatchRunning = 0;
 800304e:	4b07      	ldr	r3, [pc, #28]	; (800306c <updateStopwatchState+0xb4>)
 8003050:	2200      	movs	r2, #0
 8003052:	701a      	strb	r2, [r3, #0]
		isStopwatchPaused = 0;
 8003054:	4b06      	ldr	r3, [pc, #24]	; (8003070 <updateStopwatchState+0xb8>)
 8003056:	2200      	movs	r2, #0
 8003058:	701a      	strb	r2, [r3, #0]
	}
}
 800305a:	46c0      	nop			; (mov r8, r8)
 800305c:	46bd      	mov	sp, r7
 800305e:	b002      	add	sp, #8
 8003060:	bd80      	pop	{r7, pc}
 8003062:	46c0      	nop			; (mov r8, r8)
 8003064:	2000018c 	.word	0x2000018c
 8003068:	20000140 	.word	0x20000140
 800306c:	20000144 	.word	0x20000144
 8003070:	20000191 	.word	0x20000191
 8003074:	2000010c 	.word	0x2000010c
 8003078:	2000019c 	.word	0x2000019c

0800307c <updateDisplay>:

// update screen based on global variables
// going in main, so it's executing in a while loop
//   software interrupt on flag so that this doesn't run all the time?
void updateDisplay(RTC_HandleTypeDef *hrtc, SPI_HandleTypeDef *hspi) {
 800307c:	b580      	push	{r7, lr}
 800307e:	b082      	sub	sp, #8
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	6039      	str	r1, [r7, #0]
	// change faces
	if (isFaceBeingChanged == 1) {
 8003086:	4b53      	ldr	r3, [pc, #332]	; (80031d4 <updateDisplay+0x158>)
 8003088:	781b      	ldrb	r3, [r3, #0]
 800308a:	2b01      	cmp	r3, #1
 800308c:	d147      	bne.n	800311e <updateDisplay+0xa2>
		isFaceBeingChanged = 0;
 800308e:	4b51      	ldr	r3, [pc, #324]	; (80031d4 <updateDisplay+0x158>)
 8003090:	2200      	movs	r2, #0
 8003092:	701a      	strb	r2, [r3, #0]

		// drawing titles and boxes that won't be rewritten during normal operation within
		// a specific face (titles and buttons)
		if (faceOnDisplay == faceClock) {
 8003094:	4b50      	ldr	r3, [pc, #320]	; (80031d8 <updateDisplay+0x15c>)
 8003096:	781b      	ldrb	r3, [r3, #0]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d10b      	bne.n	80030b4 <updateDisplay+0x38>
			clearScreen(ST77XX_CYAN, hspi);
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	4a4f      	ldr	r2, [pc, #316]	; (80031dc <updateDisplay+0x160>)
 80030a0:	0019      	movs	r1, r3
 80030a2:	0010      	movs	r0, r2
 80030a4:	f7fe fb58 	bl	8001758 <clearScreen>
			drawTitle("clock", hspi);
 80030a8:	683a      	ldr	r2, [r7, #0]
 80030aa:	4b4d      	ldr	r3, [pc, #308]	; (80031e0 <updateDisplay+0x164>)
 80030ac:	0011      	movs	r1, r2
 80030ae:	0018      	movs	r0, r3
 80030b0:	f000 fb92 	bl	80037d8 <drawTitle>
		}
		if (faceOnDisplay == faceTimer) {
 80030b4:	4b48      	ldr	r3, [pc, #288]	; (80031d8 <updateDisplay+0x15c>)
 80030b6:	781b      	ldrb	r3, [r3, #0]
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d10c      	bne.n	80030d6 <updateDisplay+0x5a>
			clearScreen(ST77XX_GREEN, hspi);
 80030bc:	683a      	ldr	r2, [r7, #0]
 80030be:	23fc      	movs	r3, #252	; 0xfc
 80030c0:	00db      	lsls	r3, r3, #3
 80030c2:	0011      	movs	r1, r2
 80030c4:	0018      	movs	r0, r3
 80030c6:	f7fe fb47 	bl	8001758 <clearScreen>
			drawTitle("timer", hspi);
 80030ca:	683a      	ldr	r2, [r7, #0]
 80030cc:	4b45      	ldr	r3, [pc, #276]	; (80031e4 <updateDisplay+0x168>)
 80030ce:	0011      	movs	r1, r2
 80030d0:	0018      	movs	r0, r3
 80030d2:	f000 fb81 	bl	80037d8 <drawTitle>
		}
		if (faceOnDisplay == faceAlarm) {
 80030d6:	4b40      	ldr	r3, [pc, #256]	; (80031d8 <updateDisplay+0x15c>)
 80030d8:	781b      	ldrb	r3, [r3, #0]
 80030da:	2b02      	cmp	r3, #2
 80030dc:	d10b      	bne.n	80030f6 <updateDisplay+0x7a>
			clearScreen(ST77XX_MAGENTA, hspi);
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	4a41      	ldr	r2, [pc, #260]	; (80031e8 <updateDisplay+0x16c>)
 80030e2:	0019      	movs	r1, r3
 80030e4:	0010      	movs	r0, r2
 80030e6:	f7fe fb37 	bl	8001758 <clearScreen>
			drawTitle("alarm", hspi);
 80030ea:	683a      	ldr	r2, [r7, #0]
 80030ec:	4b3f      	ldr	r3, [pc, #252]	; (80031ec <updateDisplay+0x170>)
 80030ee:	0011      	movs	r1, r2
 80030f0:	0018      	movs	r0, r3
 80030f2:	f000 fb71 	bl	80037d8 <drawTitle>
		}
		if (faceOnDisplay == faceStopwatch) {
 80030f6:	4b38      	ldr	r3, [pc, #224]	; (80031d8 <updateDisplay+0x15c>)
 80030f8:	781b      	ldrb	r3, [r3, #0]
 80030fa:	2b03      	cmp	r3, #3
 80030fc:	d10b      	bne.n	8003116 <updateDisplay+0x9a>
			clearScreen(ST77XX_YELLOW, hspi);
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	4a3b      	ldr	r2, [pc, #236]	; (80031f0 <updateDisplay+0x174>)
 8003102:	0019      	movs	r1, r3
 8003104:	0010      	movs	r0, r2
 8003106:	f7fe fb27 	bl	8001758 <clearScreen>
			drawTitle("stopwatch", hspi);
 800310a:	683a      	ldr	r2, [r7, #0]
 800310c:	4b39      	ldr	r3, [pc, #228]	; (80031f4 <updateDisplay+0x178>)
 800310e:	0011      	movs	r1, r2
 8003110:	0018      	movs	r0, r3
 8003112:	f000 fb61 	bl	80037d8 <drawTitle>
		}

		drawButtons(hspi);
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	0018      	movs	r0, r3
 800311a:	f000 fb19 	bl	8003750 <drawButtons>
	}

	// update clock face
	if (faceOnDisplay == faceClock) {
 800311e:	4b2e      	ldr	r3, [pc, #184]	; (80031d8 <updateDisplay+0x15c>)
 8003120:	781b      	ldrb	r3, [r3, #0]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d112      	bne.n	800314c <updateDisplay+0xd0>
		if (updateFace.clock == 1) {
 8003126:	4b34      	ldr	r3, [pc, #208]	; (80031f8 <updateDisplay+0x17c>)
 8003128:	781b      	ldrb	r3, [r3, #0]
 800312a:	b2db      	uxtb	r3, r3
 800312c:	2b01      	cmp	r3, #1
 800312e:	d14c      	bne.n	80031ca <updateDisplay+0x14e>
			updateFace.clock = 0;
 8003130:	4b31      	ldr	r3, [pc, #196]	; (80031f8 <updateDisplay+0x17c>)
 8003132:	2200      	movs	r2, #0
 8003134:	701a      	strb	r2, [r3, #0]
			setBackgroundColor(ST77XX_CYAN);
 8003136:	4b29      	ldr	r3, [pc, #164]	; (80031dc <updateDisplay+0x160>)
 8003138:	0018      	movs	r0, r3
 800313a:	f7fe fac3 	bl	80016c4 <setBackgroundColor>
			updateClockDisplay(hrtc, hspi);
 800313e:	683a      	ldr	r2, [r7, #0]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	0011      	movs	r1, r2
 8003144:	0018      	movs	r0, r3
 8003146:	f000 f859 	bl	80031fc <updateClockDisplay>
			updateFace.stopwatch = 0;
			setBackgroundColor(ST77XX_YELLOW);
			updateStopwatchDisplay(hspi);
		}
	}
}
 800314a:	e03e      	b.n	80031ca <updateDisplay+0x14e>
	else if (faceOnDisplay == faceTimer) {
 800314c:	4b22      	ldr	r3, [pc, #136]	; (80031d8 <updateDisplay+0x15c>)
 800314e:	781b      	ldrb	r3, [r3, #0]
 8003150:	2b01      	cmp	r3, #1
 8003152:	d111      	bne.n	8003178 <updateDisplay+0xfc>
		if (updateFace.timer == 1) {
 8003154:	4b28      	ldr	r3, [pc, #160]	; (80031f8 <updateDisplay+0x17c>)
 8003156:	785b      	ldrb	r3, [r3, #1]
 8003158:	b2db      	uxtb	r3, r3
 800315a:	2b01      	cmp	r3, #1
 800315c:	d135      	bne.n	80031ca <updateDisplay+0x14e>
			updateFace.timer = 0;
 800315e:	4b26      	ldr	r3, [pc, #152]	; (80031f8 <updateDisplay+0x17c>)
 8003160:	2200      	movs	r2, #0
 8003162:	705a      	strb	r2, [r3, #1]
			setBackgroundColor(ST77XX_GREEN);
 8003164:	23fc      	movs	r3, #252	; 0xfc
 8003166:	00db      	lsls	r3, r3, #3
 8003168:	0018      	movs	r0, r3
 800316a:	f7fe faab 	bl	80016c4 <setBackgroundColor>
			updateTimerDisplay(hspi);
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	0018      	movs	r0, r3
 8003172:	f000 f8ef 	bl	8003354 <updateTimerDisplay>
}
 8003176:	e028      	b.n	80031ca <updateDisplay+0x14e>
	else if (faceOnDisplay == faceAlarm) {
 8003178:	4b17      	ldr	r3, [pc, #92]	; (80031d8 <updateDisplay+0x15c>)
 800317a:	781b      	ldrb	r3, [r3, #0]
 800317c:	2b02      	cmp	r3, #2
 800317e:	d110      	bne.n	80031a2 <updateDisplay+0x126>
		if (updateFace.alarm == 1) {
 8003180:	4b1d      	ldr	r3, [pc, #116]	; (80031f8 <updateDisplay+0x17c>)
 8003182:	789b      	ldrb	r3, [r3, #2]
 8003184:	b2db      	uxtb	r3, r3
 8003186:	2b01      	cmp	r3, #1
 8003188:	d11f      	bne.n	80031ca <updateDisplay+0x14e>
			updateFace.alarm = 0;
 800318a:	4b1b      	ldr	r3, [pc, #108]	; (80031f8 <updateDisplay+0x17c>)
 800318c:	2200      	movs	r2, #0
 800318e:	709a      	strb	r2, [r3, #2]
			setBackgroundColor(ST77XX_MAGENTA);
 8003190:	4b15      	ldr	r3, [pc, #84]	; (80031e8 <updateDisplay+0x16c>)
 8003192:	0018      	movs	r0, r3
 8003194:	f7fe fa96 	bl	80016c4 <setBackgroundColor>
			updateAlarmDisplay(hspi);
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	0018      	movs	r0, r3
 800319c:	f000 f9aa 	bl	80034f4 <updateAlarmDisplay>
}
 80031a0:	e013      	b.n	80031ca <updateDisplay+0x14e>
	else if (faceOnDisplay == faceStopwatch) {
 80031a2:	4b0d      	ldr	r3, [pc, #52]	; (80031d8 <updateDisplay+0x15c>)
 80031a4:	781b      	ldrb	r3, [r3, #0]
 80031a6:	2b03      	cmp	r3, #3
 80031a8:	d10f      	bne.n	80031ca <updateDisplay+0x14e>
		if (updateFace.stopwatch == 1) {
 80031aa:	4b13      	ldr	r3, [pc, #76]	; (80031f8 <updateDisplay+0x17c>)
 80031ac:	78db      	ldrb	r3, [r3, #3]
 80031ae:	b2db      	uxtb	r3, r3
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d10a      	bne.n	80031ca <updateDisplay+0x14e>
			updateFace.stopwatch = 0;
 80031b4:	4b10      	ldr	r3, [pc, #64]	; (80031f8 <updateDisplay+0x17c>)
 80031b6:	2200      	movs	r2, #0
 80031b8:	70da      	strb	r2, [r3, #3]
			setBackgroundColor(ST77XX_YELLOW);
 80031ba:	4b0d      	ldr	r3, [pc, #52]	; (80031f0 <updateDisplay+0x174>)
 80031bc:	0018      	movs	r0, r3
 80031be:	f7fe fa81 	bl	80016c4 <setBackgroundColor>
			updateStopwatchDisplay(hspi);
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	0018      	movs	r0, r3
 80031c6:	f000 fa3f 	bl	8003648 <updateStopwatchDisplay>
}
 80031ca:	46c0      	nop			; (mov r8, r8)
 80031cc:	46bd      	mov	sp, r7
 80031ce:	b002      	add	sp, #8
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	46c0      	nop			; (mov r8, r8)
 80031d4:	20000060 	.word	0x20000060
 80031d8:	20000114 	.word	0x20000114
 80031dc:	000007ff 	.word	0x000007ff
 80031e0:	08009124 	.word	0x08009124
 80031e4:	0800912c 	.word	0x0800912c
 80031e8:	0000f81f 	.word	0x0000f81f
 80031ec:	08009134 	.word	0x08009134
 80031f0:	0000ffe0 	.word	0x0000ffe0
 80031f4:	0800913c 	.word	0x0800913c
 80031f8:	20000140 	.word	0x20000140

080031fc <updateClockDisplay>:

void updateClockDisplay(RTC_HandleTypeDef *hrtc, SPI_HandleTypeDef *hspi) {
 80031fc:	b5b0      	push	{r4, r5, r7, lr}
 80031fe:	b088      	sub	sp, #32
 8003200:	af02      	add	r7, sp, #8
 8003202:	6078      	str	r0, [r7, #4]
 8003204:	6039      	str	r1, [r7, #0]
	struct dates currentDate = {0};
 8003206:	2310      	movs	r3, #16
 8003208:	18fb      	adds	r3, r7, r3
 800320a:	0018      	movs	r0, r3
 800320c:	2306      	movs	r3, #6
 800320e:	001a      	movs	r2, r3
 8003210:	2100      	movs	r1, #0
 8003212:	f005 faee 	bl	80087f2 <memset>
	struct times currentTime = {0};
 8003216:	230c      	movs	r3, #12
 8003218:	18fb      	adds	r3, r7, r3
 800321a:	0018      	movs	r0, r3
 800321c:	2303      	movs	r3, #3
 800321e:	001a      	movs	r2, r3
 8003220:	2100      	movs	r1, #0
 8003222:	f005 fae6 	bl	80087f2 <memset>

	if (clockVars.isBeingSet == 0) {
 8003226:	4b3f      	ldr	r3, [pc, #252]	; (8003324 <updateClockDisplay+0x128>)
 8003228:	781b      	ldrb	r3, [r3, #0]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d11c      	bne.n	8003268 <updateClockDisplay+0x6c>
		getDateTime(&currentDate, &currentTime, hrtc);
 800322e:	687a      	ldr	r2, [r7, #4]
 8003230:	240c      	movs	r4, #12
 8003232:	1939      	adds	r1, r7, r4
 8003234:	2510      	movs	r5, #16
 8003236:	197b      	adds	r3, r7, r5
 8003238:	0018      	movs	r0, r3
 800323a:	f7fe fc8f 	bl	8001b5c <getDateTime>
		drawClock(&currentDate, &currentTime, hspi);
 800323e:	683a      	ldr	r2, [r7, #0]
 8003240:	1939      	adds	r1, r7, r4
 8003242:	197b      	adds	r3, r7, r5
 8003244:	0018      	movs	r0, r3
 8003246:	f000 fb3b 	bl	80038c0 <drawClock>

		setTextSize(1);
 800324a:	2001      	movs	r0, #1
 800324c:	f7fe fa64 	bl	8001718 <setTextSize>
		// clear line that says "setting ___"
		clearTextLine(44, hspi);
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	0019      	movs	r1, r3
 8003254:	202c      	movs	r0, #44	; 0x2c
 8003256:	f7fd fe8f 	bl	8000f78 <clearTextLine>

		// draw button text
		drawButtonText("", "", "set", hspi);
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	4a32      	ldr	r2, [pc, #200]	; (8003328 <updateClockDisplay+0x12c>)
 800325e:	4933      	ldr	r1, [pc, #204]	; (800332c <updateClockDisplay+0x130>)
 8003260:	4832      	ldr	r0, [pc, #200]	; (800332c <updateClockDisplay+0x130>)
 8003262:	f000 fa8f 	bl	8003784 <drawButtonText>
			default: break;
		}

		drawClock(clockVars.dateToSet, clockVars.timeToSet, hspi);
	}
}
 8003266:	e059      	b.n	800331c <updateClockDisplay+0x120>
	else if (clockVars.isBeingSet == 1) {
 8003268:	4b2e      	ldr	r3, [pc, #184]	; (8003324 <updateClockDisplay+0x128>)
 800326a:	781b      	ldrb	r3, [r3, #0]
 800326c:	2b01      	cmp	r3, #1
 800326e:	d155      	bne.n	800331c <updateClockDisplay+0x120>
		if (clockVars.fieldBeingSet == 1) drawButtonText("up", "down", "change", hspi);
 8003270:	4b2c      	ldr	r3, [pc, #176]	; (8003324 <updateClockDisplay+0x128>)
 8003272:	785b      	ldrb	r3, [r3, #1]
 8003274:	2b01      	cmp	r3, #1
 8003276:	d105      	bne.n	8003284 <updateClockDisplay+0x88>
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	4a2d      	ldr	r2, [pc, #180]	; (8003330 <updateClockDisplay+0x134>)
 800327c:	492d      	ldr	r1, [pc, #180]	; (8003334 <updateClockDisplay+0x138>)
 800327e:	482e      	ldr	r0, [pc, #184]	; (8003338 <updateClockDisplay+0x13c>)
 8003280:	f000 fa80 	bl	8003784 <drawButtonText>
		clearTextLine(44, hspi);
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	0019      	movs	r1, r3
 8003288:	202c      	movs	r0, #44	; 0x2c
 800328a:	f7fd fe75 	bl	8000f78 <clearTextLine>
		setTextSize(1);
 800328e:	2001      	movs	r0, #1
 8003290:	f7fe fa42 	bl	8001718 <setTextSize>
		switch (clockVars.fieldBeingSet) {
 8003294:	4b23      	ldr	r3, [pc, #140]	; (8003324 <updateClockDisplay+0x128>)
 8003296:	785b      	ldrb	r3, [r3, #1]
 8003298:	2b05      	cmp	r3, #5
 800329a:	d836      	bhi.n	800330a <updateClockDisplay+0x10e>
 800329c:	009a      	lsls	r2, r3, #2
 800329e:	4b27      	ldr	r3, [pc, #156]	; (800333c <updateClockDisplay+0x140>)
 80032a0:	18d3      	adds	r3, r2, r3
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	469f      	mov	pc, r3
			case 1:	drawCenteredTextWithPadding(WIDTH/2, 44, 17, "setting minute...", hspi); break;
 80032a6:	4a26      	ldr	r2, [pc, #152]	; (8003340 <updateClockDisplay+0x144>)
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	9300      	str	r3, [sp, #0]
 80032ac:	0013      	movs	r3, r2
 80032ae:	2211      	movs	r2, #17
 80032b0:	212c      	movs	r1, #44	; 0x2c
 80032b2:	2040      	movs	r0, #64	; 0x40
 80032b4:	f7fd fd88 	bl	8000dc8 <drawCenteredTextWithPadding>
 80032b8:	e028      	b.n	800330c <updateClockDisplay+0x110>
			case 2:	drawCenteredTextWithPadding(WIDTH/2, 44, 17, "setting hour...", hspi);	break;
 80032ba:	4a22      	ldr	r2, [pc, #136]	; (8003344 <updateClockDisplay+0x148>)
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	9300      	str	r3, [sp, #0]
 80032c0:	0013      	movs	r3, r2
 80032c2:	2211      	movs	r2, #17
 80032c4:	212c      	movs	r1, #44	; 0x2c
 80032c6:	2040      	movs	r0, #64	; 0x40
 80032c8:	f7fd fd7e 	bl	8000dc8 <drawCenteredTextWithPadding>
 80032cc:	e01e      	b.n	800330c <updateClockDisplay+0x110>
			case 3: drawCenteredTextWithPadding(WIDTH/2, 44, 17, "setting year...", hspi); break;
 80032ce:	4a1e      	ldr	r2, [pc, #120]	; (8003348 <updateClockDisplay+0x14c>)
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	9300      	str	r3, [sp, #0]
 80032d4:	0013      	movs	r3, r2
 80032d6:	2211      	movs	r2, #17
 80032d8:	212c      	movs	r1, #44	; 0x2c
 80032da:	2040      	movs	r0, #64	; 0x40
 80032dc:	f7fd fd74 	bl	8000dc8 <drawCenteredTextWithPadding>
 80032e0:	e014      	b.n	800330c <updateClockDisplay+0x110>
			case 4: drawCenteredTextWithPadding(WIDTH/2, 44, 17, "setting month...", hspi); break;
 80032e2:	4a1a      	ldr	r2, [pc, #104]	; (800334c <updateClockDisplay+0x150>)
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	9300      	str	r3, [sp, #0]
 80032e8:	0013      	movs	r3, r2
 80032ea:	2211      	movs	r2, #17
 80032ec:	212c      	movs	r1, #44	; 0x2c
 80032ee:	2040      	movs	r0, #64	; 0x40
 80032f0:	f7fd fd6a 	bl	8000dc8 <drawCenteredTextWithPadding>
 80032f4:	e00a      	b.n	800330c <updateClockDisplay+0x110>
			case 5: drawCenteredTextWithPadding(WIDTH/2, 44, 17, "setting date...", hspi); break;
 80032f6:	4a16      	ldr	r2, [pc, #88]	; (8003350 <updateClockDisplay+0x154>)
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	9300      	str	r3, [sp, #0]
 80032fc:	0013      	movs	r3, r2
 80032fe:	2211      	movs	r2, #17
 8003300:	212c      	movs	r1, #44	; 0x2c
 8003302:	2040      	movs	r0, #64	; 0x40
 8003304:	f7fd fd60 	bl	8000dc8 <drawCenteredTextWithPadding>
 8003308:	e000      	b.n	800330c <updateClockDisplay+0x110>
			default: break;
 800330a:	46c0      	nop			; (mov r8, r8)
		drawClock(clockVars.dateToSet, clockVars.timeToSet, hspi);
 800330c:	4b05      	ldr	r3, [pc, #20]	; (8003324 <updateClockDisplay+0x128>)
 800330e:	6858      	ldr	r0, [r3, #4]
 8003310:	4b04      	ldr	r3, [pc, #16]	; (8003324 <updateClockDisplay+0x128>)
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	683a      	ldr	r2, [r7, #0]
 8003316:	0019      	movs	r1, r3
 8003318:	f000 fad2 	bl	80038c0 <drawClock>
}
 800331c:	46c0      	nop			; (mov r8, r8)
 800331e:	46bd      	mov	sp, r7
 8003320:	b006      	add	sp, #24
 8003322:	bdb0      	pop	{r4, r5, r7, pc}
 8003324:	200000f0 	.word	0x200000f0
 8003328:	08009148 	.word	0x08009148
 800332c:	080090a8 	.word	0x080090a8
 8003330:	0800914c 	.word	0x0800914c
 8003334:	08009154 	.word	0x08009154
 8003338:	0800915c 	.word	0x0800915c
 800333c:	080097bc 	.word	0x080097bc
 8003340:	08009160 	.word	0x08009160
 8003344:	08009174 	.word	0x08009174
 8003348:	08009184 	.word	0x08009184
 800334c:	08009194 	.word	0x08009194
 8003350:	080091a8 	.word	0x080091a8

08003354 <updateTimerDisplay>:

void updateTimerDisplay(SPI_HandleTypeDef *hspi) {
 8003354:	b590      	push	{r4, r7, lr}
 8003356:	b087      	sub	sp, #28
 8003358:	af02      	add	r7, sp, #8
 800335a:	6078      	str	r0, [r7, #4]
	struct times currentTimer = {0};
 800335c:	230c      	movs	r3, #12
 800335e:	18fb      	adds	r3, r7, r3
 8003360:	0018      	movs	r0, r3
 8003362:	2303      	movs	r3, #3
 8003364:	001a      	movs	r2, r3
 8003366:	2100      	movs	r1, #0
 8003368:	f005 fa43 	bl	80087f2 <memset>

	if (timerVars.isBeingSet == 0) {
 800336c:	4b4f      	ldr	r3, [pc, #316]	; (80034ac <updateTimerDisplay+0x158>)
 800336e:	781b      	ldrb	r3, [r3, #0]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d15a      	bne.n	800342a <updateTimerDisplay+0xd6>
		if (timerVars.isSet == 0) {
 8003374:	4b4d      	ldr	r3, [pc, #308]	; (80034ac <updateTimerDisplay+0x158>)
 8003376:	789b      	ldrb	r3, [r3, #2]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d11a      	bne.n	80033b2 <updateTimerDisplay+0x5e>
			setTextSize(2);
 800337c:	2002      	movs	r0, #2
 800337e:	f7fe f9cb 	bl	8001718 <setTextSize>
			clearTextLine(68, hspi);	// clear timer time text
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	0019      	movs	r1, r3
 8003386:	2044      	movs	r0, #68	; 0x44
 8003388:	f7fd fdf6 	bl	8000f78 <clearTextLine>

			// write "timer unset"
			setTextSize(1);
 800338c:	2001      	movs	r0, #1
 800338e:	f7fe f9c3 	bl	8001718 <setTextSize>
			drawCenteredTextWithPadding(WIDTH/2, 84, 12, "timer unset", hspi);
 8003392:	4a47      	ldr	r2, [pc, #284]	; (80034b0 <updateTimerDisplay+0x15c>)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	9300      	str	r3, [sp, #0]
 8003398:	0013      	movs	r3, r2
 800339a:	220c      	movs	r2, #12
 800339c:	2154      	movs	r1, #84	; 0x54
 800339e:	2040      	movs	r0, #64	; 0x40
 80033a0:	f7fd fd12 	bl	8000dc8 <drawCenteredTextWithPadding>

			// draw button text
			drawButtonText("", "", "set", hspi);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	4a43      	ldr	r2, [pc, #268]	; (80034b4 <updateTimerDisplay+0x160>)
 80033a8:	4943      	ldr	r1, [pc, #268]	; (80034b8 <updateTimerDisplay+0x164>)
 80033aa:	4843      	ldr	r0, [pc, #268]	; (80034b8 <updateTimerDisplay+0x164>)
 80033ac:	f000 f9ea 	bl	8003784 <drawButtonText>
			default: break;
		}

		drawTimer(timerVars.timeToSet, hspi);
	}
}
 80033b0:	e078      	b.n	80034a4 <updateTimerDisplay+0x150>
			secondsToTime(&currentTimer, timerCounter);
 80033b2:	4b42      	ldr	r3, [pc, #264]	; (80034bc <updateTimerDisplay+0x168>)
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	240c      	movs	r4, #12
 80033b8:	193b      	adds	r3, r7, r4
 80033ba:	0011      	movs	r1, r2
 80033bc:	0018      	movs	r0, r3
 80033be:	f7fe fc38 	bl	8001c32 <secondsToTime>
			drawTimer(&currentTimer, hspi);
 80033c2:	687a      	ldr	r2, [r7, #4]
 80033c4:	193b      	adds	r3, r7, r4
 80033c6:	0011      	movs	r1, r2
 80033c8:	0018      	movs	r0, r3
 80033ca:	f000 fb13 	bl	80039f4 <drawTimer>
			if (isTimerPaused == 1) {
 80033ce:	4b3c      	ldr	r3, [pc, #240]	; (80034c0 <updateTimerDisplay+0x16c>)
 80033d0:	781b      	ldrb	r3, [r3, #0]
 80033d2:	b2db      	uxtb	r3, r3
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d109      	bne.n	80033ec <updateTimerDisplay+0x98>
				drawCenteredTextWithPadding(WIDTH/2, 84, 12, "timer paused", hspi);
 80033d8:	4a3a      	ldr	r2, [pc, #232]	; (80034c4 <updateTimerDisplay+0x170>)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	9300      	str	r3, [sp, #0]
 80033de:	0013      	movs	r3, r2
 80033e0:	220c      	movs	r2, #12
 80033e2:	2154      	movs	r1, #84	; 0x54
 80033e4:	2040      	movs	r0, #64	; 0x40
 80033e6:	f7fd fcef 	bl	8000dc8 <drawCenteredTextWithPadding>
 80033ea:	e017      	b.n	800341c <updateTimerDisplay+0xc8>
			else if (isTimerRunning == 0 && timerCounter != 0) {
 80033ec:	4b36      	ldr	r3, [pc, #216]	; (80034c8 <updateTimerDisplay+0x174>)
 80033ee:	781b      	ldrb	r3, [r3, #0]
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d10d      	bne.n	8003412 <updateTimerDisplay+0xbe>
 80033f6:	4b31      	ldr	r3, [pc, #196]	; (80034bc <updateTimerDisplay+0x168>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d009      	beq.n	8003412 <updateTimerDisplay+0xbe>
				drawCenteredTextWithPadding(WIDTH/2, 84, 12, "timer set!", hspi);
 80033fe:	4a33      	ldr	r2, [pc, #204]	; (80034cc <updateTimerDisplay+0x178>)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	9300      	str	r3, [sp, #0]
 8003404:	0013      	movs	r3, r2
 8003406:	220c      	movs	r2, #12
 8003408:	2154      	movs	r1, #84	; 0x54
 800340a:	2040      	movs	r0, #64	; 0x40
 800340c:	f7fd fcdc 	bl	8000dc8 <drawCenteredTextWithPadding>
 8003410:	e004      	b.n	800341c <updateTimerDisplay+0xc8>
				clearTextLine(84, hspi);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	0019      	movs	r1, r3
 8003416:	2054      	movs	r0, #84	; 0x54
 8003418:	f7fd fdae 	bl	8000f78 <clearTextLine>
			drawButtonText("run", "pause", "clear", hspi);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	4a2c      	ldr	r2, [pc, #176]	; (80034d0 <updateTimerDisplay+0x17c>)
 8003420:	492c      	ldr	r1, [pc, #176]	; (80034d4 <updateTimerDisplay+0x180>)
 8003422:	482d      	ldr	r0, [pc, #180]	; (80034d8 <updateTimerDisplay+0x184>)
 8003424:	f000 f9ae 	bl	8003784 <drawButtonText>
}
 8003428:	e03c      	b.n	80034a4 <updateTimerDisplay+0x150>
	else if (timerVars.isBeingSet == 1) {
 800342a:	4b20      	ldr	r3, [pc, #128]	; (80034ac <updateTimerDisplay+0x158>)
 800342c:	781b      	ldrb	r3, [r3, #0]
 800342e:	2b01      	cmp	r3, #1
 8003430:	d138      	bne.n	80034a4 <updateTimerDisplay+0x150>
		drawButtonText("up", "down", "change", hspi);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	4a29      	ldr	r2, [pc, #164]	; (80034dc <updateTimerDisplay+0x188>)
 8003436:	492a      	ldr	r1, [pc, #168]	; (80034e0 <updateTimerDisplay+0x18c>)
 8003438:	482a      	ldr	r0, [pc, #168]	; (80034e4 <updateTimerDisplay+0x190>)
 800343a:	f000 f9a3 	bl	8003784 <drawButtonText>
		clearTextLine(52, hspi);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	0019      	movs	r1, r3
 8003442:	2034      	movs	r0, #52	; 0x34
 8003444:	f7fd fd98 	bl	8000f78 <clearTextLine>
		switch (timerVars.fieldBeingSet) {
 8003448:	4b18      	ldr	r3, [pc, #96]	; (80034ac <updateTimerDisplay+0x158>)
 800344a:	785b      	ldrb	r3, [r3, #1]
 800344c:	2b02      	cmp	r3, #2
 800344e:	d00e      	beq.n	800346e <updateTimerDisplay+0x11a>
 8003450:	2b03      	cmp	r3, #3
 8003452:	d016      	beq.n	8003482 <updateTimerDisplay+0x12e>
 8003454:	2b01      	cmp	r3, #1
 8003456:	d000      	beq.n	800345a <updateTimerDisplay+0x106>
			default: break;
 8003458:	e01d      	b.n	8003496 <updateTimerDisplay+0x142>
			case 1: drawCenteredTextWithPadding(WIDTH/2, 52, 17, "setting second...", hspi); break;
 800345a:	4a23      	ldr	r2, [pc, #140]	; (80034e8 <updateTimerDisplay+0x194>)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	9300      	str	r3, [sp, #0]
 8003460:	0013      	movs	r3, r2
 8003462:	2211      	movs	r2, #17
 8003464:	2134      	movs	r1, #52	; 0x34
 8003466:	2040      	movs	r0, #64	; 0x40
 8003468:	f7fd fcae 	bl	8000dc8 <drawCenteredTextWithPadding>
 800346c:	e013      	b.n	8003496 <updateTimerDisplay+0x142>
			case 2: drawCenteredTextWithPadding(WIDTH/2, 52, 17, "setting minute...", hspi); break;
 800346e:	4a1f      	ldr	r2, [pc, #124]	; (80034ec <updateTimerDisplay+0x198>)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	9300      	str	r3, [sp, #0]
 8003474:	0013      	movs	r3, r2
 8003476:	2211      	movs	r2, #17
 8003478:	2134      	movs	r1, #52	; 0x34
 800347a:	2040      	movs	r0, #64	; 0x40
 800347c:	f7fd fca4 	bl	8000dc8 <drawCenteredTextWithPadding>
 8003480:	e009      	b.n	8003496 <updateTimerDisplay+0x142>
			case 3: drawCenteredTextWithPadding(WIDTH/2, 52, 17, "setting hour...", hspi); break;
 8003482:	4a1b      	ldr	r2, [pc, #108]	; (80034f0 <updateTimerDisplay+0x19c>)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	9300      	str	r3, [sp, #0]
 8003488:	0013      	movs	r3, r2
 800348a:	2211      	movs	r2, #17
 800348c:	2134      	movs	r1, #52	; 0x34
 800348e:	2040      	movs	r0, #64	; 0x40
 8003490:	f7fd fc9a 	bl	8000dc8 <drawCenteredTextWithPadding>
 8003494:	46c0      	nop			; (mov r8, r8)
		drawTimer(timerVars.timeToSet, hspi);
 8003496:	4b05      	ldr	r3, [pc, #20]	; (80034ac <updateTimerDisplay+0x158>)
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	0011      	movs	r1, r2
 800349e:	0018      	movs	r0, r3
 80034a0:	f000 faa8 	bl	80039f4 <drawTimer>
}
 80034a4:	46c0      	nop			; (mov r8, r8)
 80034a6:	46bd      	mov	sp, r7
 80034a8:	b005      	add	sp, #20
 80034aa:	bd90      	pop	{r4, r7, pc}
 80034ac:	200000fc 	.word	0x200000fc
 80034b0:	080091b8 	.word	0x080091b8
 80034b4:	08009148 	.word	0x08009148
 80034b8:	080090a8 	.word	0x080090a8
 80034bc:	20000148 	.word	0x20000148
 80034c0:	20000198 	.word	0x20000198
 80034c4:	080091c4 	.word	0x080091c4
 80034c8:	20000190 	.word	0x20000190
 80034cc:	080091d4 	.word	0x080091d4
 80034d0:	080091e0 	.word	0x080091e0
 80034d4:	080091e8 	.word	0x080091e8
 80034d8:	080091f0 	.word	0x080091f0
 80034dc:	0800914c 	.word	0x0800914c
 80034e0:	08009154 	.word	0x08009154
 80034e4:	0800915c 	.word	0x0800915c
 80034e8:	080091f4 	.word	0x080091f4
 80034ec:	08009160 	.word	0x08009160
 80034f0:	08009174 	.word	0x08009174

080034f4 <updateAlarmDisplay>:

void updateAlarmDisplay(SPI_HandleTypeDef *hspi) {
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b084      	sub	sp, #16
 80034f8:	af02      	add	r7, sp, #8
 80034fa:	6078      	str	r0, [r7, #4]
	if (alarmVars.isBeingSet == 0) {
 80034fc:	4b45      	ldr	r3, [pc, #276]	; (8003614 <updateAlarmDisplay+0x120>)
 80034fe:	781b      	ldrb	r3, [r3, #0]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d139      	bne.n	8003578 <updateAlarmDisplay+0x84>
		if (isAlarmRunning == 0) {
 8003504:	4b44      	ldr	r3, [pc, #272]	; (8003618 <updateAlarmDisplay+0x124>)
 8003506:	781b      	ldrb	r3, [r3, #0]
 8003508:	b2db      	uxtb	r3, r3
 800350a:	2b00      	cmp	r3, #0
 800350c:	d11a      	bne.n	8003544 <updateAlarmDisplay+0x50>
			setTextSize(3);
 800350e:	2003      	movs	r0, #3
 8003510:	f7fe f902 	bl	8001718 <setTextSize>
			clearTextLine(68, hspi);	// clear alarm time text
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	0019      	movs	r1, r3
 8003518:	2044      	movs	r0, #68	; 0x44
 800351a:	f7fd fd2d 	bl	8000f78 <clearTextLine>

			setTextSize(1);
 800351e:	2001      	movs	r0, #1
 8003520:	f7fe f8fa 	bl	8001718 <setTextSize>
			drawCenteredTextWithPadding(WIDTH/2, 92, 11, "alarm unset", hspi);
 8003524:	4a3d      	ldr	r2, [pc, #244]	; (800361c <updateAlarmDisplay+0x128>)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	9300      	str	r3, [sp, #0]
 800352a:	0013      	movs	r3, r2
 800352c:	220b      	movs	r2, #11
 800352e:	215c      	movs	r1, #92	; 0x5c
 8003530:	2040      	movs	r0, #64	; 0x40
 8003532:	f7fd fc49 	bl	8000dc8 <drawCenteredTextWithPadding>

			// draw button text
			drawButtonText("", "", "clear", hspi);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4a39      	ldr	r2, [pc, #228]	; (8003620 <updateAlarmDisplay+0x12c>)
 800353a:	493a      	ldr	r1, [pc, #232]	; (8003624 <updateAlarmDisplay+0x130>)
 800353c:	4839      	ldr	r0, [pc, #228]	; (8003624 <updateAlarmDisplay+0x130>)
 800353e:	f000 f921 	bl	8003784 <drawButtonText>
		// draw button text
		drawButtonText("up", "down", "change", hspi);

		drawAlarm(alarmVars.alarmToSet, hspi);
	}
}
 8003542:	e062      	b.n	800360a <updateAlarmDisplay+0x116>
			setTextSize(1);
 8003544:	2001      	movs	r0, #1
 8003546:	f7fe f8e7 	bl	8001718 <setTextSize>
			drawCenteredTextWithPadding(WIDTH/2, 92, 11, "alarm set", hspi);
 800354a:	4a37      	ldr	r2, [pc, #220]	; (8003628 <updateAlarmDisplay+0x134>)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	9300      	str	r3, [sp, #0]
 8003550:	0013      	movs	r3, r2
 8003552:	220b      	movs	r2, #11
 8003554:	215c      	movs	r1, #92	; 0x5c
 8003556:	2040      	movs	r0, #64	; 0x40
 8003558:	f7fd fc36 	bl	8000dc8 <drawCenteredTextWithPadding>
			drawAlarm(alarmVars.alarmToSet, hspi);
 800355c:	4b2d      	ldr	r3, [pc, #180]	; (8003614 <updateAlarmDisplay+0x120>)
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	687a      	ldr	r2, [r7, #4]
 8003562:	0011      	movs	r1, r2
 8003564:	0018      	movs	r0, r3
 8003566:	f000 fa69 	bl	8003a3c <drawAlarm>
			drawButtonText("", "", "clear", hspi);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	4a2c      	ldr	r2, [pc, #176]	; (8003620 <updateAlarmDisplay+0x12c>)
 800356e:	492d      	ldr	r1, [pc, #180]	; (8003624 <updateAlarmDisplay+0x130>)
 8003570:	482c      	ldr	r0, [pc, #176]	; (8003624 <updateAlarmDisplay+0x130>)
 8003572:	f000 f907 	bl	8003784 <drawButtonText>
}
 8003576:	e048      	b.n	800360a <updateAlarmDisplay+0x116>
	else if (alarmVars.isBeingSet == 1) {
 8003578:	4b26      	ldr	r3, [pc, #152]	; (8003614 <updateAlarmDisplay+0x120>)
 800357a:	781b      	ldrb	r3, [r3, #0]
 800357c:	2b01      	cmp	r3, #1
 800357e:	d144      	bne.n	800360a <updateAlarmDisplay+0x116>
		setTextSize(1);
 8003580:	2001      	movs	r0, #1
 8003582:	f7fe f8c9 	bl	8001718 <setTextSize>
		switch (alarmVars.fieldBeingSet) {
 8003586:	4b23      	ldr	r3, [pc, #140]	; (8003614 <updateAlarmDisplay+0x120>)
 8003588:	785b      	ldrb	r3, [r3, #1]
 800358a:	2b02      	cmp	r3, #2
 800358c:	d012      	beq.n	80035b4 <updateAlarmDisplay+0xc0>
 800358e:	dc02      	bgt.n	8003596 <updateAlarmDisplay+0xa2>
 8003590:	2b01      	cmp	r3, #1
 8003592:	d005      	beq.n	80035a0 <updateAlarmDisplay+0xac>
			default: break;
 8003594:	e02c      	b.n	80035f0 <updateAlarmDisplay+0xfc>
		switch (alarmVars.fieldBeingSet) {
 8003596:	2b03      	cmp	r3, #3
 8003598:	d016      	beq.n	80035c8 <updateAlarmDisplay+0xd4>
 800359a:	2b04      	cmp	r3, #4
 800359c:	d01e      	beq.n	80035dc <updateAlarmDisplay+0xe8>
			default: break;
 800359e:	e027      	b.n	80035f0 <updateAlarmDisplay+0xfc>
			case 1: drawCenteredTextWithPadding(WIDTH/2, 52, 17, "setting second...", hspi); break;
 80035a0:	4a22      	ldr	r2, [pc, #136]	; (800362c <updateAlarmDisplay+0x138>)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	9300      	str	r3, [sp, #0]
 80035a6:	0013      	movs	r3, r2
 80035a8:	2211      	movs	r2, #17
 80035aa:	2134      	movs	r1, #52	; 0x34
 80035ac:	2040      	movs	r0, #64	; 0x40
 80035ae:	f7fd fc0b 	bl	8000dc8 <drawCenteredTextWithPadding>
 80035b2:	e01d      	b.n	80035f0 <updateAlarmDisplay+0xfc>
			case 2: drawCenteredTextWithPadding(WIDTH/2, 52, 17, "setting minute...", hspi); break;
 80035b4:	4a1e      	ldr	r2, [pc, #120]	; (8003630 <updateAlarmDisplay+0x13c>)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	9300      	str	r3, [sp, #0]
 80035ba:	0013      	movs	r3, r2
 80035bc:	2211      	movs	r2, #17
 80035be:	2134      	movs	r1, #52	; 0x34
 80035c0:	2040      	movs	r0, #64	; 0x40
 80035c2:	f7fd fc01 	bl	8000dc8 <drawCenteredTextWithPadding>
 80035c6:	e013      	b.n	80035f0 <updateAlarmDisplay+0xfc>
			case 3: drawCenteredTextWithPadding(WIDTH/2, 52, 17, "setting hour...", hspi); break;
 80035c8:	4a1a      	ldr	r2, [pc, #104]	; (8003634 <updateAlarmDisplay+0x140>)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	9300      	str	r3, [sp, #0]
 80035ce:	0013      	movs	r3, r2
 80035d0:	2211      	movs	r2, #17
 80035d2:	2134      	movs	r1, #52	; 0x34
 80035d4:	2040      	movs	r0, #64	; 0x40
 80035d6:	f7fd fbf7 	bl	8000dc8 <drawCenteredTextWithPadding>
 80035da:	e009      	b.n	80035f0 <updateAlarmDisplay+0xfc>
			case 4: drawCenteredTextWithPadding(WIDTH/2, 52, 17, "setting day...", hspi); break;
 80035dc:	4a16      	ldr	r2, [pc, #88]	; (8003638 <updateAlarmDisplay+0x144>)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	9300      	str	r3, [sp, #0]
 80035e2:	0013      	movs	r3, r2
 80035e4:	2211      	movs	r2, #17
 80035e6:	2134      	movs	r1, #52	; 0x34
 80035e8:	2040      	movs	r0, #64	; 0x40
 80035ea:	f7fd fbed 	bl	8000dc8 <drawCenteredTextWithPadding>
 80035ee:	46c0      	nop			; (mov r8, r8)
		drawButtonText("up", "down", "change", hspi);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	4a12      	ldr	r2, [pc, #72]	; (800363c <updateAlarmDisplay+0x148>)
 80035f4:	4912      	ldr	r1, [pc, #72]	; (8003640 <updateAlarmDisplay+0x14c>)
 80035f6:	4813      	ldr	r0, [pc, #76]	; (8003644 <updateAlarmDisplay+0x150>)
 80035f8:	f000 f8c4 	bl	8003784 <drawButtonText>
		drawAlarm(alarmVars.alarmToSet, hspi);
 80035fc:	4b05      	ldr	r3, [pc, #20]	; (8003614 <updateAlarmDisplay+0x120>)
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	687a      	ldr	r2, [r7, #4]
 8003602:	0011      	movs	r1, r2
 8003604:	0018      	movs	r0, r3
 8003606:	f000 fa19 	bl	8003a3c <drawAlarm>
}
 800360a:	46c0      	nop			; (mov r8, r8)
 800360c:	46bd      	mov	sp, r7
 800360e:	b002      	add	sp, #8
 8003610:	bd80      	pop	{r7, pc}
 8003612:	46c0      	nop			; (mov r8, r8)
 8003614:	20000104 	.word	0x20000104
 8003618:	2000014c 	.word	0x2000014c
 800361c:	08009208 	.word	0x08009208
 8003620:	080091e0 	.word	0x080091e0
 8003624:	080090a8 	.word	0x080090a8
 8003628:	08009214 	.word	0x08009214
 800362c:	080091f4 	.word	0x080091f4
 8003630:	08009160 	.word	0x08009160
 8003634:	08009174 	.word	0x08009174
 8003638:	08009220 	.word	0x08009220
 800363c:	0800914c 	.word	0x0800914c
 8003640:	08009154 	.word	0x08009154
 8003644:	0800915c 	.word	0x0800915c

08003648 <updateStopwatchDisplay>:

void updateStopwatchDisplay(SPI_HandleTypeDef *hspi) {
 8003648:	b580      	push	{r7, lr}
 800364a:	b082      	sub	sp, #8
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
	drawStopwatch(stopwatchCounter, hspi);
 8003650:	4b15      	ldr	r3, [pc, #84]	; (80036a8 <updateStopwatchDisplay+0x60>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	687a      	ldr	r2, [r7, #4]
 8003656:	0011      	movs	r1, r2
 8003658:	0018      	movs	r0, r3
 800365a:	f000 fa25 	bl	8003aa8 <drawStopwatch>
	drawStopwatchLap(stopwatchVars.lapCurrent-stopwatchVars.lapPrev, hspi);
 800365e:	4b13      	ldr	r3, [pc, #76]	; (80036ac <updateStopwatchDisplay+0x64>)
 8003660:	685a      	ldr	r2, [r3, #4]
 8003662:	4b12      	ldr	r3, [pc, #72]	; (80036ac <updateStopwatchDisplay+0x64>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	1ad3      	subs	r3, r2, r3
 8003668:	687a      	ldr	r2, [r7, #4]
 800366a:	0011      	movs	r1, r2
 800366c:	0018      	movs	r0, r3
 800366e:	f000 fa51 	bl	8003b14 <drawStopwatchLap>

	if (isStopwatchRunning == 0) drawButtonText("run", "lap", "clear", hspi);
 8003672:	4b0f      	ldr	r3, [pc, #60]	; (80036b0 <updateStopwatchDisplay+0x68>)
 8003674:	781b      	ldrb	r3, [r3, #0]
 8003676:	b2db      	uxtb	r3, r3
 8003678:	2b00      	cmp	r3, #0
 800367a:	d106      	bne.n	800368a <updateStopwatchDisplay+0x42>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	4a0d      	ldr	r2, [pc, #52]	; (80036b4 <updateStopwatchDisplay+0x6c>)
 8003680:	490d      	ldr	r1, [pc, #52]	; (80036b8 <updateStopwatchDisplay+0x70>)
 8003682:	480e      	ldr	r0, [pc, #56]	; (80036bc <updateStopwatchDisplay+0x74>)
 8003684:	f000 f87e 	bl	8003784 <drawButtonText>
	else if (isStopwatchRunning == 1) drawButtonText("pause", "lap", "clear", hspi);
}
 8003688:	e00a      	b.n	80036a0 <updateStopwatchDisplay+0x58>
	else if (isStopwatchRunning == 1) drawButtonText("pause", "lap", "clear", hspi);
 800368a:	4b09      	ldr	r3, [pc, #36]	; (80036b0 <updateStopwatchDisplay+0x68>)
 800368c:	781b      	ldrb	r3, [r3, #0]
 800368e:	b2db      	uxtb	r3, r3
 8003690:	2b01      	cmp	r3, #1
 8003692:	d105      	bne.n	80036a0 <updateStopwatchDisplay+0x58>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	4a07      	ldr	r2, [pc, #28]	; (80036b4 <updateStopwatchDisplay+0x6c>)
 8003698:	4907      	ldr	r1, [pc, #28]	; (80036b8 <updateStopwatchDisplay+0x70>)
 800369a:	4809      	ldr	r0, [pc, #36]	; (80036c0 <updateStopwatchDisplay+0x78>)
 800369c:	f000 f872 	bl	8003784 <drawButtonText>
}
 80036a0:	46c0      	nop			; (mov r8, r8)
 80036a2:	46bd      	mov	sp, r7
 80036a4:	b002      	add	sp, #8
 80036a6:	bd80      	pop	{r7, pc}
 80036a8:	2000019c 	.word	0x2000019c
 80036ac:	2000010c 	.word	0x2000010c
 80036b0:	20000144 	.word	0x20000144
 80036b4:	080091e0 	.word	0x080091e0
 80036b8:	08009230 	.word	0x08009230
 80036bc:	080091f0 	.word	0x080091f0
 80036c0:	080091e8 	.word	0x080091e8

080036c4 <drawButton>:

void drawButton(uint8_t x_center, uint8_t y_center, SPI_HandleTypeDef *hspi) {
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b084      	sub	sp, #16
 80036c8:	af02      	add	r7, sp, #8
 80036ca:	603a      	str	r2, [r7, #0]
 80036cc:	1dfb      	adds	r3, r7, #7
 80036ce:	1c02      	adds	r2, r0, #0
 80036d0:	701a      	strb	r2, [r3, #0]
 80036d2:	1dbb      	adds	r3, r7, #6
 80036d4:	1c0a      	adds	r2, r1, #0
 80036d6:	701a      	strb	r2, [r3, #0]
	// bounds checking. probably already done in draw/fillRect
	if (x_center-5 < 0 || x_center+5 > WIDTH || y_center-5 < 0 || y_center+5 > HEIGHT) return;
 80036d8:	1dfb      	adds	r3, r7, #7
 80036da:	781b      	ldrb	r3, [r3, #0]
 80036dc:	3b05      	subs	r3, #5
 80036de:	2b00      	cmp	r3, #0
 80036e0:	db2f      	blt.n	8003742 <drawButton+0x7e>
 80036e2:	1dfb      	adds	r3, r7, #7
 80036e4:	781b      	ldrb	r3, [r3, #0]
 80036e6:	3305      	adds	r3, #5
 80036e8:	2b80      	cmp	r3, #128	; 0x80
 80036ea:	dc2a      	bgt.n	8003742 <drawButton+0x7e>
 80036ec:	1dbb      	adds	r3, r7, #6
 80036ee:	781b      	ldrb	r3, [r3, #0]
 80036f0:	3b05      	subs	r3, #5
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	db25      	blt.n	8003742 <drawButton+0x7e>
 80036f6:	1dbb      	adds	r3, r7, #6
 80036f8:	781b      	ldrb	r3, [r3, #0]
 80036fa:	3305      	adds	r3, #5
 80036fc:	2ba0      	cmp	r3, #160	; 0xa0
 80036fe:	dc20      	bgt.n	8003742 <drawButton+0x7e>

	// draw rect size 8 with 1 pixel border
	// parameters give center position of graphic
	drawRect(x_center-5, y_center-5, 10, 10, ST77XX_BLACK, hspi);
 8003700:	1dfb      	adds	r3, r7, #7
 8003702:	781b      	ldrb	r3, [r3, #0]
 8003704:	3b05      	subs	r3, #5
 8003706:	b2d8      	uxtb	r0, r3
 8003708:	1dbb      	adds	r3, r7, #6
 800370a:	781b      	ldrb	r3, [r3, #0]
 800370c:	3b05      	subs	r3, #5
 800370e:	b2d9      	uxtb	r1, r3
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	9301      	str	r3, [sp, #4]
 8003714:	2300      	movs	r3, #0
 8003716:	9300      	str	r3, [sp, #0]
 8003718:	230a      	movs	r3, #10
 800371a:	220a      	movs	r2, #10
 800371c:	f7fd f9eb 	bl	8000af6 <drawRect>
	fillRect(x_center-4, y_center-4, 8, 8, ST77XX_WHITE, hspi);
 8003720:	1dfb      	adds	r3, r7, #7
 8003722:	781b      	ldrb	r3, [r3, #0]
 8003724:	3b04      	subs	r3, #4
 8003726:	b2d8      	uxtb	r0, r3
 8003728:	1dbb      	adds	r3, r7, #6
 800372a:	781b      	ldrb	r3, [r3, #0]
 800372c:	3b04      	subs	r3, #4
 800372e:	b2d9      	uxtb	r1, r3
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	9301      	str	r3, [sp, #4]
 8003734:	4b05      	ldr	r3, [pc, #20]	; (800374c <drawButton+0x88>)
 8003736:	9300      	str	r3, [sp, #0]
 8003738:	2308      	movs	r3, #8
 800373a:	2208      	movs	r2, #8
 800373c:	f7fd fa33 	bl	8000ba6 <fillRect>
 8003740:	e000      	b.n	8003744 <drawButton+0x80>
	if (x_center-5 < 0 || x_center+5 > WIDTH || y_center-5 < 0 || y_center+5 > HEIGHT) return;
 8003742:	46c0      	nop			; (mov r8, r8)
}
 8003744:	46bd      	mov	sp, r7
 8003746:	b002      	add	sp, #8
 8003748:	bd80      	pop	{r7, pc}
 800374a:	46c0      	nop			; (mov r8, r8)
 800374c:	0000ffff 	.word	0x0000ffff

08003750 <drawButtons>:

void drawButtons(SPI_HandleTypeDef *hspi) {
 8003750:	b580      	push	{r7, lr}
 8003752:	b082      	sub	sp, #8
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
	// 3 buttons. positioned so their text boxes, which are centered over button, can have equal spacing left and right
	drawButton(22, HEIGHT-15, hspi);		// button 1
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	001a      	movs	r2, r3
 800375c:	2191      	movs	r1, #145	; 0x91
 800375e:	2016      	movs	r0, #22
 8003760:	f7ff ffb0 	bl	80036c4 <drawButton>
	drawButton(64, HEIGHT-15, hspi);		// button 2
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	001a      	movs	r2, r3
 8003768:	2191      	movs	r1, #145	; 0x91
 800376a:	2040      	movs	r0, #64	; 0x40
 800376c:	f7ff ffaa 	bl	80036c4 <drawButton>
	drawButton(106, HEIGHT-15, hspi);		// button 3
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	001a      	movs	r2, r3
 8003774:	2191      	movs	r1, #145	; 0x91
 8003776:	206a      	movs	r0, #106	; 0x6a
 8003778:	f7ff ffa4 	bl	80036c4 <drawButton>
}
 800377c:	46c0      	nop			; (mov r8, r8)
 800377e:	46bd      	mov	sp, r7
 8003780:	b002      	add	sp, #8
 8003782:	bd80      	pop	{r7, pc}

08003784 <drawButtonText>:

void drawButtonText(const char *str1, const char *str2, const char *str3, SPI_HandleTypeDef *hspi) {
 8003784:	b580      	push	{r7, lr}
 8003786:	b086      	sub	sp, #24
 8003788:	af02      	add	r7, sp, #8
 800378a:	60f8      	str	r0, [r7, #12]
 800378c:	60b9      	str	r1, [r7, #8]
 800378e:	607a      	str	r2, [r7, #4]
 8003790:	603b      	str	r3, [r7, #0]
	setTextSize(1);
 8003792:	2001      	movs	r0, #1
 8003794:	f7fd ffc0 	bl	8001718 <setTextSize>
	drawCenteredTextWithPadding(22, HEIGHT-28, 7, str1, hspi);		// button 1
 8003798:	68fa      	ldr	r2, [r7, #12]
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	9300      	str	r3, [sp, #0]
 800379e:	0013      	movs	r3, r2
 80037a0:	2207      	movs	r2, #7
 80037a2:	2184      	movs	r1, #132	; 0x84
 80037a4:	2016      	movs	r0, #22
 80037a6:	f7fd fb0f 	bl	8000dc8 <drawCenteredTextWithPadding>
	drawCenteredTextWithPadding(64, HEIGHT-28, 7, str2, hspi);		// button 2
 80037aa:	68ba      	ldr	r2, [r7, #8]
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	9300      	str	r3, [sp, #0]
 80037b0:	0013      	movs	r3, r2
 80037b2:	2207      	movs	r2, #7
 80037b4:	2184      	movs	r1, #132	; 0x84
 80037b6:	2040      	movs	r0, #64	; 0x40
 80037b8:	f7fd fb06 	bl	8000dc8 <drawCenteredTextWithPadding>
	drawCenteredTextWithPadding(106, HEIGHT-28, 7, str3, hspi);		// button 3
 80037bc:	687a      	ldr	r2, [r7, #4]
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	9300      	str	r3, [sp, #0]
 80037c2:	0013      	movs	r3, r2
 80037c4:	2207      	movs	r2, #7
 80037c6:	2184      	movs	r1, #132	; 0x84
 80037c8:	206a      	movs	r0, #106	; 0x6a
 80037ca:	f7fd fafd 	bl	8000dc8 <drawCenteredTextWithPadding>
}
 80037ce:	46c0      	nop			; (mov r8, r8)
 80037d0:	46bd      	mov	sp, r7
 80037d2:	b004      	add	sp, #16
 80037d4:	bd80      	pop	{r7, pc}
	...

080037d8 <drawTitle>:

void drawTitle(char *str, SPI_HandleTypeDef *hspi) {
 80037d8:	b580      	push	{r7, lr}
 80037da:	b084      	sub	sp, #16
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
 80037e0:	6039      	str	r1, [r7, #0]
	uint8_t strSize = strlen(str);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	0018      	movs	r0, r3
 80037e6:	f7fc fc8f 	bl	8000108 <strlen>
 80037ea:	0002      	movs	r2, r0
 80037ec:	210f      	movs	r1, #15
 80037ee:	187b      	adds	r3, r7, r1
 80037f0:	701a      	strb	r2, [r3, #0]

	// drawing title
	if (12*strSize < WIDTH) {			// about string size = 10 for width = 128
 80037f2:	187b      	adds	r3, r7, r1
 80037f4:	781a      	ldrb	r2, [r3, #0]
 80037f6:	0013      	movs	r3, r2
 80037f8:	005b      	lsls	r3, r3, #1
 80037fa:	189b      	adds	r3, r3, r2
 80037fc:	009b      	lsls	r3, r3, #2
 80037fe:	2b7f      	cmp	r3, #127	; 0x7f
 8003800:	dc14      	bgt.n	800382c <drawTitle+0x54>
		setTextSize(2);
 8003802:	2002      	movs	r0, #2
 8003804:	f7fd ff88 	bl	8001718 <setTextSize>
		setCursor((WIDTH-12*strSize)/2, 10);
 8003808:	230f      	movs	r3, #15
 800380a:	18fb      	adds	r3, r7, r3
 800380c:	781a      	ldrb	r2, [r3, #0]
 800380e:	0013      	movs	r3, r2
 8003810:	0092      	lsls	r2, r2, #2
 8003812:	1a9b      	subs	r3, r3, r2
 8003814:	009b      	lsls	r3, r3, #2
 8003816:	3380      	adds	r3, #128	; 0x80
 8003818:	2b00      	cmp	r3, #0
 800381a:	da00      	bge.n	800381e <drawTitle+0x46>
 800381c:	3301      	adds	r3, #1
 800381e:	105b      	asrs	r3, r3, #1
 8003820:	b2db      	uxtb	r3, r3
 8003822:	210a      	movs	r1, #10
 8003824:	0018      	movs	r0, r3
 8003826:	f7fd ff5d 	bl	80016e4 <setCursor>
 800382a:	e039      	b.n	80038a0 <drawTitle+0xc8>
	}
	else if (6*strSize < WIDTH) {		// about string size = 21 for width = 128
 800382c:	230f      	movs	r3, #15
 800382e:	18fb      	adds	r3, r7, r3
 8003830:	781a      	ldrb	r2, [r3, #0]
 8003832:	0013      	movs	r3, r2
 8003834:	005b      	lsls	r3, r3, #1
 8003836:	189b      	adds	r3, r3, r2
 8003838:	005b      	lsls	r3, r3, #1
 800383a:	2b7f      	cmp	r3, #127	; 0x7f
 800383c:	dc14      	bgt.n	8003868 <drawTitle+0x90>
		setTextSize(1);
 800383e:	2001      	movs	r0, #1
 8003840:	f7fd ff6a 	bl	8001718 <setTextSize>
		setCursor((WIDTH-6*strSize)/2, 10);
 8003844:	230f      	movs	r3, #15
 8003846:	18fb      	adds	r3, r7, r3
 8003848:	781a      	ldrb	r2, [r3, #0]
 800384a:	0013      	movs	r3, r2
 800384c:	0092      	lsls	r2, r2, #2
 800384e:	1a9b      	subs	r3, r3, r2
 8003850:	005b      	lsls	r3, r3, #1
 8003852:	3380      	adds	r3, #128	; 0x80
 8003854:	2b00      	cmp	r3, #0
 8003856:	da00      	bge.n	800385a <drawTitle+0x82>
 8003858:	3301      	adds	r3, #1
 800385a:	105b      	asrs	r3, r3, #1
 800385c:	b2db      	uxtb	r3, r3
 800385e:	210a      	movs	r1, #10
 8003860:	0018      	movs	r0, r3
 8003862:	f7fd ff3f 	bl	80016e4 <setCursor>
 8003866:	e01b      	b.n	80038a0 <drawTitle+0xc8>
	}
	else {
		setTextSize(1);
 8003868:	2001      	movs	r0, #1
 800386a:	f7fd ff55 	bl	8001718 <setTextSize>
		sprintf(str, "it's too long");		// should not need to worry about null access, since this string is shorter than case above
 800386e:	687a      	ldr	r2, [r7, #4]
 8003870:	4b12      	ldr	r3, [pc, #72]	; (80038bc <drawTitle+0xe4>)
 8003872:	0010      	movs	r0, r2
 8003874:	0019      	movs	r1, r3
 8003876:	230e      	movs	r3, #14
 8003878:	001a      	movs	r2, r3
 800387a:	f004 ffb1 	bl	80087e0 <memcpy>
		setCursor((WIDTH-6*strSize)/2, 10);
 800387e:	230f      	movs	r3, #15
 8003880:	18fb      	adds	r3, r7, r3
 8003882:	781a      	ldrb	r2, [r3, #0]
 8003884:	0013      	movs	r3, r2
 8003886:	0092      	lsls	r2, r2, #2
 8003888:	1a9b      	subs	r3, r3, r2
 800388a:	005b      	lsls	r3, r3, #1
 800388c:	3380      	adds	r3, #128	; 0x80
 800388e:	2b00      	cmp	r3, #0
 8003890:	da00      	bge.n	8003894 <drawTitle+0xbc>
 8003892:	3301      	adds	r3, #1
 8003894:	105b      	asrs	r3, r3, #1
 8003896:	b2db      	uxtb	r3, r3
 8003898:	210a      	movs	r1, #10
 800389a:	0018      	movs	r0, r3
 800389c:	f7fd ff22 	bl	80016e4 <setCursor>
	}

	setTextColor(ST77XX_BLACK);
 80038a0:	2000      	movs	r0, #0
 80038a2:	f7fd ff49 	bl	8001738 <setTextColor>
	drawText(str, hspi);
 80038a6:	683a      	ldr	r2, [r7, #0]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	0011      	movs	r1, r2
 80038ac:	0018      	movs	r0, r3
 80038ae:	f7fd fed3 	bl	8001658 <drawText>
}
 80038b2:	46c0      	nop			; (mov r8, r8)
 80038b4:	46bd      	mov	sp, r7
 80038b6:	b004      	add	sp, #16
 80038b8:	bd80      	pop	{r7, pc}
 80038ba:	46c0      	nop			; (mov r8, r8)
 80038bc:	08009234 	.word	0x08009234

080038c0 <drawClock>:

// draw time and date
// should optimize to only redraw part that changed
void drawClock(struct dates *d, struct times *t, SPI_HandleTypeDef *hspi) {
 80038c0:	b5b0      	push	{r4, r5, r7, lr}
 80038c2:	b090      	sub	sp, #64	; 0x40
 80038c4:	af02      	add	r7, sp, #8
 80038c6:	60f8      	str	r0, [r7, #12]
 80038c8:	60b9      	str	r1, [r7, #8]
 80038ca:	607a      	str	r2, [r7, #4]
	// notes on paper.
	char str[40];

	// no need to draw padding for those that always have the same length
	// drawing hr and min, 12-hr format
	if (t->hr % 12 == 0) sprintf(str, "%2d:%02d", 12, t->min);
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	781b      	ldrb	r3, [r3, #0]
 80038d0:	210c      	movs	r1, #12
 80038d2:	0018      	movs	r0, r3
 80038d4:	f7fc fca6 	bl	8000224 <__aeabi_uidivmod>
 80038d8:	000b      	movs	r3, r1
 80038da:	b2db      	uxtb	r3, r3
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d108      	bne.n	80038f2 <drawClock+0x32>
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	785b      	ldrb	r3, [r3, #1]
 80038e4:	493c      	ldr	r1, [pc, #240]	; (80039d8 <drawClock+0x118>)
 80038e6:	2210      	movs	r2, #16
 80038e8:	18b8      	adds	r0, r7, r2
 80038ea:	220c      	movs	r2, #12
 80038ec:	f005 f808 	bl	8008900 <siprintf>
 80038f0:	e00f      	b.n	8003912 <drawClock+0x52>
	else sprintf(str, "%2d:%02d", t->hr%12, t->min);
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	781b      	ldrb	r3, [r3, #0]
 80038f6:	210c      	movs	r1, #12
 80038f8:	0018      	movs	r0, r3
 80038fa:	f7fc fc93 	bl	8000224 <__aeabi_uidivmod>
 80038fe:	000b      	movs	r3, r1
 8003900:	b2db      	uxtb	r3, r3
 8003902:	001a      	movs	r2, r3
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	785b      	ldrb	r3, [r3, #1]
 8003908:	4933      	ldr	r1, [pc, #204]	; (80039d8 <drawClock+0x118>)
 800390a:	2010      	movs	r0, #16
 800390c:	1838      	adds	r0, r7, r0
 800390e:	f004 fff7 	bl	8008900 <siprintf>
	setTextSize(3);
 8003912:	2003      	movs	r0, #3
 8003914:	f7fd ff00 	bl	8001718 <setTextSize>
	setTextColor(ST77XX_BLACK);
 8003918:	2000      	movs	r0, #0
 800391a:	f7fd ff0d 	bl	8001738 <setTextColor>
	drawCenteredText(52, 60, str, hspi);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2410      	movs	r4, #16
 8003922:	193a      	adds	r2, r7, r4
 8003924:	213c      	movs	r1, #60	; 0x3c
 8003926:	2034      	movs	r0, #52	; 0x34
 8003928:	f7fd f9ec 	bl	8000d04 <drawCenteredText>

	// drawing sec
	sprintf(str, "%02d", t->sec);
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	789b      	ldrb	r3, [r3, #2]
 8003930:	001a      	movs	r2, r3
 8003932:	492a      	ldr	r1, [pc, #168]	; (80039dc <drawClock+0x11c>)
 8003934:	193b      	adds	r3, r7, r4
 8003936:	0018      	movs	r0, r3
 8003938:	f004 ffe2 	bl	8008900 <siprintf>
	setTextSize(2);
 800393c:	2002      	movs	r0, #2
 800393e:	f7fd feeb 	bl	8001718 <setTextSize>
	drawCenteredText(109, 68, str, hspi);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	193a      	adds	r2, r7, r4
 8003946:	2144      	movs	r1, #68	; 0x44
 8003948:	206d      	movs	r0, #109	; 0x6d
 800394a:	f7fd f9db 	bl	8000d04 <drawCenteredText>

	// drawing AM/PM text
	setTextSize(1);
 800394e:	2001      	movs	r0, #1
 8003950:	f7fd fee2 	bl	8001718 <setTextSize>
	if (t->hr < 12) drawCenteredText(103, 60, "AM", hspi);
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	781b      	ldrb	r3, [r3, #0]
 8003958:	2b0b      	cmp	r3, #11
 800395a:	d806      	bhi.n	800396a <drawClock+0xaa>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	4a20      	ldr	r2, [pc, #128]	; (80039e0 <drawClock+0x120>)
 8003960:	213c      	movs	r1, #60	; 0x3c
 8003962:	2067      	movs	r0, #103	; 0x67
 8003964:	f7fd f9ce 	bl	8000d04 <drawCenteredText>
 8003968:	e005      	b.n	8003976 <drawClock+0xb6>
	else drawCenteredText(103, 60, "PM", hspi);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	4a1d      	ldr	r2, [pc, #116]	; (80039e4 <drawClock+0x124>)
 800396e:	213c      	movs	r1, #60	; 0x3c
 8003970:	2067      	movs	r0, #103	; 0x67
 8003972:	f7fd f9c7 	bl	8000d04 <drawCenteredText>

	// drawing date
	setTextSize(1);
 8003976:	2001      	movs	r0, #1
 8003978:	f7fd fece 	bl	8001718 <setTextSize>
	sprintf(str, "%s %d %04d", monthNames[d->month], d->date, d->yr);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	789b      	ldrb	r3, [r3, #2]
 8003980:	001a      	movs	r2, r3
 8003982:	4b19      	ldr	r3, [pc, #100]	; (80039e8 <drawClock+0x128>)
 8003984:	0092      	lsls	r2, r2, #2
 8003986:	58d2      	ldr	r2, [r2, r3]
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	78db      	ldrb	r3, [r3, #3]
 800398c:	001c      	movs	r4, r3
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	881b      	ldrh	r3, [r3, #0]
 8003992:	4916      	ldr	r1, [pc, #88]	; (80039ec <drawClock+0x12c>)
 8003994:	2510      	movs	r5, #16
 8003996:	1978      	adds	r0, r7, r5
 8003998:	9300      	str	r3, [sp, #0]
 800399a:	0023      	movs	r3, r4
 800399c:	f004 ffb0 	bl	8008900 <siprintf>
	drawCenteredTextWithPadding(WIDTH/2, 84, 11, str, hspi);
 80039a0:	197a      	adds	r2, r7, r5
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	9300      	str	r3, [sp, #0]
 80039a6:	0013      	movs	r3, r2
 80039a8:	220b      	movs	r2, #11
 80039aa:	2154      	movs	r1, #84	; 0x54
 80039ac:	2040      	movs	r0, #64	; 0x40
 80039ae:	f7fd fa0b 	bl	8000dc8 <drawCenteredTextWithPadding>

	// drawing weekday
	drawCenteredTextWithPadding(WIDTH/2, 92, 9, weekdayNames[d->weekday], hspi);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	791b      	ldrb	r3, [r3, #4]
 80039b6:	001a      	movs	r2, r3
 80039b8:	4b0d      	ldr	r3, [pc, #52]	; (80039f0 <drawClock+0x130>)
 80039ba:	0092      	lsls	r2, r2, #2
 80039bc:	58d2      	ldr	r2, [r2, r3]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	9300      	str	r3, [sp, #0]
 80039c2:	0013      	movs	r3, r2
 80039c4:	2209      	movs	r2, #9
 80039c6:	215c      	movs	r1, #92	; 0x5c
 80039c8:	2040      	movs	r0, #64	; 0x40
 80039ca:	f7fd f9fd 	bl	8000dc8 <drawCenteredTextWithPadding>
}
 80039ce:	46c0      	nop			; (mov r8, r8)
 80039d0:	46bd      	mov	sp, r7
 80039d2:	b00e      	add	sp, #56	; 0x38
 80039d4:	bdb0      	pop	{r4, r5, r7, pc}
 80039d6:	46c0      	nop			; (mov r8, r8)
 80039d8:	08009244 	.word	0x08009244
 80039dc:	08009250 	.word	0x08009250
 80039e0:	08009258 	.word	0x08009258
 80039e4:	0800925c 	.word	0x0800925c
 80039e8:	2000002c 	.word	0x2000002c
 80039ec:	08009260 	.word	0x08009260
 80039f0:	2000000c 	.word	0x2000000c

080039f4 <drawTimer>:

void drawTimer(struct times *t, SPI_HandleTypeDef *hspi) {
 80039f4:	b5b0      	push	{r4, r5, r7, lr}
 80039f6:	b08e      	sub	sp, #56	; 0x38
 80039f8:	af02      	add	r7, sp, #8
 80039fa:	6078      	str	r0, [r7, #4]
 80039fc:	6039      	str	r1, [r7, #0]
	char str[40];

	// only drawing hr:min:sec of timer
	setTextSize(2);
 80039fe:	2002      	movs	r0, #2
 8003a00:	f7fd fe8a 	bl	8001718 <setTextSize>
	sprintf(str, "%2d:%2d:%2d", t->hr, t->min, t->sec);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	781b      	ldrb	r3, [r3, #0]
 8003a08:	001a      	movs	r2, r3
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	785b      	ldrb	r3, [r3, #1]
 8003a0e:	001c      	movs	r4, r3
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	789b      	ldrb	r3, [r3, #2]
 8003a14:	4908      	ldr	r1, [pc, #32]	; (8003a38 <drawTimer+0x44>)
 8003a16:	2508      	movs	r5, #8
 8003a18:	1978      	adds	r0, r7, r5
 8003a1a:	9300      	str	r3, [sp, #0]
 8003a1c:	0023      	movs	r3, r4
 8003a1e:	f004 ff6f 	bl	8008900 <siprintf>
	drawCenteredText(WIDTH/2, HEIGHT/2-12, str, hspi);		// about y=68
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	197a      	adds	r2, r7, r5
 8003a26:	2144      	movs	r1, #68	; 0x44
 8003a28:	2040      	movs	r0, #64	; 0x40
 8003a2a:	f7fd f96b 	bl	8000d04 <drawCenteredText>

	// leaving room to draw "timer set!/unset"
}
 8003a2e:	46c0      	nop			; (mov r8, r8)
 8003a30:	46bd      	mov	sp, r7
 8003a32:	b00c      	add	sp, #48	; 0x30
 8003a34:	bdb0      	pop	{r4, r5, r7, pc}
 8003a36:	46c0      	nop			; (mov r8, r8)
 8003a38:	0800926c 	.word	0x0800926c

08003a3c <drawAlarm>:

void drawAlarm(struct alarmTimes *a, SPI_HandleTypeDef *hspi) {
 8003a3c:	b5b0      	push	{r4, r5, r7, lr}
 8003a3e:	b08e      	sub	sp, #56	; 0x38
 8003a40:	af02      	add	r7, sp, #8
 8003a42:	6078      	str	r0, [r7, #4]
 8003a44:	6039      	str	r1, [r7, #0]
	char str[40];

	// drawing hr:min:sec
	setTextSize(2);
 8003a46:	2002      	movs	r0, #2
 8003a48:	f7fd fe66 	bl	8001718 <setTextSize>
	sprintf(str, "%2d:%2d:%2d", a->hr, a->min, a->sec);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	781b      	ldrb	r3, [r3, #0]
 8003a50:	001a      	movs	r2, r3
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	785b      	ldrb	r3, [r3, #1]
 8003a56:	001c      	movs	r4, r3
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	789b      	ldrb	r3, [r3, #2]
 8003a5c:	4910      	ldr	r1, [pc, #64]	; (8003aa0 <drawAlarm+0x64>)
 8003a5e:	2508      	movs	r5, #8
 8003a60:	1978      	adds	r0, r7, r5
 8003a62:	9300      	str	r3, [sp, #0]
 8003a64:	0023      	movs	r3, r4
 8003a66:	f004 ff4b 	bl	8008900 <siprintf>
	drawCenteredText(WIDTH/2, 68, str, hspi);
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	197a      	adds	r2, r7, r5
 8003a6e:	2144      	movs	r1, #68	; 0x44
 8003a70:	2040      	movs	r0, #64	; 0x40
 8003a72:	f7fd f947 	bl	8000d04 <drawCenteredText>

	// drawing weekday
	setTextSize(1);
 8003a76:	2001      	movs	r0, #1
 8003a78:	f7fd fe4e 	bl	8001718 <setTextSize>
	drawCenteredTextWithPadding(WIDTH/2, 84, 9, weekdayNames[a->weekday], hspi);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	78db      	ldrb	r3, [r3, #3]
 8003a80:	001a      	movs	r2, r3
 8003a82:	4b08      	ldr	r3, [pc, #32]	; (8003aa4 <drawAlarm+0x68>)
 8003a84:	0092      	lsls	r2, r2, #2
 8003a86:	58d2      	ldr	r2, [r2, r3]
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	9300      	str	r3, [sp, #0]
 8003a8c:	0013      	movs	r3, r2
 8003a8e:	2209      	movs	r2, #9
 8003a90:	2154      	movs	r1, #84	; 0x54
 8003a92:	2040      	movs	r0, #64	; 0x40
 8003a94:	f7fd f998 	bl	8000dc8 <drawCenteredTextWithPadding>
}
 8003a98:	46c0      	nop			; (mov r8, r8)
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	b00c      	add	sp, #48	; 0x30
 8003a9e:	bdb0      	pop	{r4, r5, r7, pc}
 8003aa0:	0800926c 	.word	0x0800926c
 8003aa4:	2000000c 	.word	0x2000000c

08003aa8 <drawStopwatch>:

void drawStopwatch(uint32_t seconds, SPI_HandleTypeDef *hspi) {
 8003aa8:	b5b0      	push	{r4, r5, r7, lr}
 8003aaa:	b090      	sub	sp, #64	; 0x40
 8003aac:	af02      	add	r7, sp, #8
 8003aae:	6078      	str	r0, [r7, #4]
 8003ab0:	6039      	str	r1, [r7, #0]
	struct times t = {0};
 8003ab2:	2134      	movs	r1, #52	; 0x34
 8003ab4:	000c      	movs	r4, r1
 8003ab6:	187b      	adds	r3, r7, r1
 8003ab8:	0018      	movs	r0, r3
 8003aba:	2303      	movs	r3, #3
 8003abc:	001a      	movs	r2, r3
 8003abe:	2100      	movs	r1, #0
 8003ac0:	f004 fe97 	bl	80087f2 <memset>
	char str[40];

	secondsToTime(&t, seconds);
 8003ac4:	687a      	ldr	r2, [r7, #4]
 8003ac6:	0021      	movs	r1, r4
 8003ac8:	000c      	movs	r4, r1
 8003aca:	187b      	adds	r3, r7, r1
 8003acc:	0011      	movs	r1, r2
 8003ace:	0018      	movs	r0, r3
 8003ad0:	f7fe f8af 	bl	8001c32 <secondsToTime>

	// drawing hr:min:sec
	setTextSize(2);
 8003ad4:	2002      	movs	r0, #2
 8003ad6:	f7fd fe1f 	bl	8001718 <setTextSize>
	sprintf(str, "%2d:%2d:%2d", t.hr, t.min, t.sec);
 8003ada:	0021      	movs	r1, r4
 8003adc:	187b      	adds	r3, r7, r1
 8003ade:	781b      	ldrb	r3, [r3, #0]
 8003ae0:	001a      	movs	r2, r3
 8003ae2:	187b      	adds	r3, r7, r1
 8003ae4:	785b      	ldrb	r3, [r3, #1]
 8003ae6:	001c      	movs	r4, r3
 8003ae8:	187b      	adds	r3, r7, r1
 8003aea:	789b      	ldrb	r3, [r3, #2]
 8003aec:	4908      	ldr	r1, [pc, #32]	; (8003b10 <drawStopwatch+0x68>)
 8003aee:	250c      	movs	r5, #12
 8003af0:	1978      	adds	r0, r7, r5
 8003af2:	9300      	str	r3, [sp, #0]
 8003af4:	0023      	movs	r3, r4
 8003af6:	f004 ff03 	bl	8008900 <siprintf>
	drawCenteredText(WIDTH/2, 68, str, hspi);
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	197a      	adds	r2, r7, r5
 8003afe:	2144      	movs	r1, #68	; 0x44
 8003b00:	2040      	movs	r0, #64	; 0x40
 8003b02:	f7fd f8ff 	bl	8000d04 <drawCenteredText>

	// leaving room for lap
}
 8003b06:	46c0      	nop			; (mov r8, r8)
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	b00e      	add	sp, #56	; 0x38
 8003b0c:	bdb0      	pop	{r4, r5, r7, pc}
 8003b0e:	46c0      	nop			; (mov r8, r8)
 8003b10:	0800926c 	.word	0x0800926c

08003b14 <drawStopwatchLap>:

void drawStopwatchLap(uint32_t seconds, SPI_HandleTypeDef *hspi) {
 8003b14:	b5b0      	push	{r4, r5, r7, lr}
 8003b16:	b090      	sub	sp, #64	; 0x40
 8003b18:	af02      	add	r7, sp, #8
 8003b1a:	6078      	str	r0, [r7, #4]
 8003b1c:	6039      	str	r1, [r7, #0]
	struct times t = {0};
 8003b1e:	2134      	movs	r1, #52	; 0x34
 8003b20:	000c      	movs	r4, r1
 8003b22:	187b      	adds	r3, r7, r1
 8003b24:	0018      	movs	r0, r3
 8003b26:	2303      	movs	r3, #3
 8003b28:	001a      	movs	r2, r3
 8003b2a:	2100      	movs	r1, #0
 8003b2c:	f004 fe61 	bl	80087f2 <memset>
	char str[40];

	secondsToTime(&t, seconds);
 8003b30:	687a      	ldr	r2, [r7, #4]
 8003b32:	0021      	movs	r1, r4
 8003b34:	000c      	movs	r4, r1
 8003b36:	187b      	adds	r3, r7, r1
 8003b38:	0011      	movs	r1, r2
 8003b3a:	0018      	movs	r0, r3
 8003b3c:	f7fe f879 	bl	8001c32 <secondsToTime>

	// drawing hr:min:sec
	setTextSize(1);
 8003b40:	2001      	movs	r0, #1
 8003b42:	f7fd fde9 	bl	8001718 <setTextSize>
	sprintf(str, "lap: %2d:%2d:%2d", t.hr, t.min, t.sec);
 8003b46:	0021      	movs	r1, r4
 8003b48:	187b      	adds	r3, r7, r1
 8003b4a:	781b      	ldrb	r3, [r3, #0]
 8003b4c:	001a      	movs	r2, r3
 8003b4e:	187b      	adds	r3, r7, r1
 8003b50:	785b      	ldrb	r3, [r3, #1]
 8003b52:	001c      	movs	r4, r3
 8003b54:	187b      	adds	r3, r7, r1
 8003b56:	789b      	ldrb	r3, [r3, #2]
 8003b58:	4908      	ldr	r1, [pc, #32]	; (8003b7c <drawStopwatchLap+0x68>)
 8003b5a:	250c      	movs	r5, #12
 8003b5c:	1978      	adds	r0, r7, r5
 8003b5e:	9300      	str	r3, [sp, #0]
 8003b60:	0023      	movs	r3, r4
 8003b62:	f004 fecd 	bl	8008900 <siprintf>
	drawCenteredText(WIDTH/2, 84, str, hspi);
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	197a      	adds	r2, r7, r5
 8003b6a:	2154      	movs	r1, #84	; 0x54
 8003b6c:	2040      	movs	r0, #64	; 0x40
 8003b6e:	f7fd f8c9 	bl	8000d04 <drawCenteredText>
}
 8003b72:	46c0      	nop			; (mov r8, r8)
 8003b74:	46bd      	mov	sp, r7
 8003b76:	b00e      	add	sp, #56	; 0x38
 8003b78:	bdb0      	pop	{r4, r5, r7, pc}
 8003b7a:	46c0      	nop			; (mov r8, r8)
 8003b7c:	08009278 	.word	0x08009278

08003b80 <maxDaysInMonth>:

// calculator for number of days in a month given a month and accounting for leap years
// assumes month is 1-12, 1=january, 12=december
uint8_t maxDaysInMonth(uint8_t month, uint16_t year) {
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b082      	sub	sp, #8
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	0002      	movs	r2, r0
 8003b88:	1dfb      	adds	r3, r7, #7
 8003b8a:	701a      	strb	r2, [r3, #0]
 8003b8c:	1d3b      	adds	r3, r7, #4
 8003b8e:	1c0a      	adds	r2, r1, #0
 8003b90:	801a      	strh	r2, [r3, #0]
	if (month == 0 || month > 12) return 0;		// bounds checking
 8003b92:	1dfb      	adds	r3, r7, #7
 8003b94:	781b      	ldrb	r3, [r3, #0]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d003      	beq.n	8003ba2 <maxDaysInMonth+0x22>
 8003b9a:	1dfb      	adds	r3, r7, #7
 8003b9c:	781b      	ldrb	r3, [r3, #0]
 8003b9e:	2b0c      	cmp	r3, #12
 8003ba0:	d901      	bls.n	8003ba6 <maxDaysInMonth+0x26>
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	e052      	b.n	8003c4c <maxDaysInMonth+0xcc>

	// not using built-in defines, because they're in BCD
	if (month == 1  ||		// january
 8003ba6:	1dfb      	adds	r3, r7, #7
 8003ba8:	781b      	ldrb	r3, [r3, #0]
 8003baa:	2b01      	cmp	r3, #1
 8003bac:	d017      	beq.n	8003bde <maxDaysInMonth+0x5e>
 8003bae:	1dfb      	adds	r3, r7, #7
 8003bb0:	781b      	ldrb	r3, [r3, #0]
 8003bb2:	2b03      	cmp	r3, #3
 8003bb4:	d013      	beq.n	8003bde <maxDaysInMonth+0x5e>
		month == 3  ||		// march
 8003bb6:	1dfb      	adds	r3, r7, #7
 8003bb8:	781b      	ldrb	r3, [r3, #0]
 8003bba:	2b05      	cmp	r3, #5
 8003bbc:	d00f      	beq.n	8003bde <maxDaysInMonth+0x5e>
		month == 5  ||		// may
 8003bbe:	1dfb      	adds	r3, r7, #7
 8003bc0:	781b      	ldrb	r3, [r3, #0]
 8003bc2:	2b07      	cmp	r3, #7
 8003bc4:	d00b      	beq.n	8003bde <maxDaysInMonth+0x5e>
		month == 7  ||		// july
 8003bc6:	1dfb      	adds	r3, r7, #7
 8003bc8:	781b      	ldrb	r3, [r3, #0]
 8003bca:	2b08      	cmp	r3, #8
 8003bcc:	d007      	beq.n	8003bde <maxDaysInMonth+0x5e>
		month == 8  ||		// august
 8003bce:	1dfb      	adds	r3, r7, #7
 8003bd0:	781b      	ldrb	r3, [r3, #0]
 8003bd2:	2b0a      	cmp	r3, #10
 8003bd4:	d003      	beq.n	8003bde <maxDaysInMonth+0x5e>
		month == 10 ||		// october
 8003bd6:	1dfb      	adds	r3, r7, #7
 8003bd8:	781b      	ldrb	r3, [r3, #0]
 8003bda:	2b0c      	cmp	r3, #12
 8003bdc:	d101      	bne.n	8003be2 <maxDaysInMonth+0x62>
		month == 12) {		// december
		return 31;
 8003bde:	231f      	movs	r3, #31
 8003be0:	e034      	b.n	8003c4c <maxDaysInMonth+0xcc>
	}
	else if (month == 4 ||	// april
 8003be2:	1dfb      	adds	r3, r7, #7
 8003be4:	781b      	ldrb	r3, [r3, #0]
 8003be6:	2b04      	cmp	r3, #4
 8003be8:	d00b      	beq.n	8003c02 <maxDaysInMonth+0x82>
 8003bea:	1dfb      	adds	r3, r7, #7
 8003bec:	781b      	ldrb	r3, [r3, #0]
 8003bee:	2b06      	cmp	r3, #6
 8003bf0:	d007      	beq.n	8003c02 <maxDaysInMonth+0x82>
			 month == 6 ||	// june
 8003bf2:	1dfb      	adds	r3, r7, #7
 8003bf4:	781b      	ldrb	r3, [r3, #0]
 8003bf6:	2b09      	cmp	r3, #9
 8003bf8:	d003      	beq.n	8003c02 <maxDaysInMonth+0x82>
			 month == 9 ||	// september
 8003bfa:	1dfb      	adds	r3, r7, #7
 8003bfc:	781b      	ldrb	r3, [r3, #0]
 8003bfe:	2b0b      	cmp	r3, #11
 8003c00:	d101      	bne.n	8003c06 <maxDaysInMonth+0x86>
			 month == 11) {	// november
		return 30;
 8003c02:	231e      	movs	r3, #30
 8003c04:	e022      	b.n	8003c4c <maxDaysInMonth+0xcc>
	}

	// february/leap year calculator
	// leap year for every 4th year, but every 100th year is not a leap year except on every 400th year
	// ex. 2020 is a leap year, 2100 is not a leap year, 2000 is a leap year.
	else if (year % 400 == 0) return 29;
 8003c06:	1d3b      	adds	r3, r7, #4
 8003c08:	881a      	ldrh	r2, [r3, #0]
 8003c0a:	23c8      	movs	r3, #200	; 0xc8
 8003c0c:	0059      	lsls	r1, r3, #1
 8003c0e:	0010      	movs	r0, r2
 8003c10:	f7fc fb08 	bl	8000224 <__aeabi_uidivmod>
 8003c14:	000b      	movs	r3, r1
 8003c16:	b29b      	uxth	r3, r3
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d101      	bne.n	8003c20 <maxDaysInMonth+0xa0>
 8003c1c:	231d      	movs	r3, #29
 8003c1e:	e015      	b.n	8003c4c <maxDaysInMonth+0xcc>
	else if (year % 100 == 0) return 28;
 8003c20:	1d3b      	adds	r3, r7, #4
 8003c22:	881b      	ldrh	r3, [r3, #0]
 8003c24:	2164      	movs	r1, #100	; 0x64
 8003c26:	0018      	movs	r0, r3
 8003c28:	f7fc fafc 	bl	8000224 <__aeabi_uidivmod>
 8003c2c:	000b      	movs	r3, r1
 8003c2e:	b29b      	uxth	r3, r3
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d101      	bne.n	8003c38 <maxDaysInMonth+0xb8>
 8003c34:	231c      	movs	r3, #28
 8003c36:	e009      	b.n	8003c4c <maxDaysInMonth+0xcc>
	else if (year % 4 == 0) return 29;
 8003c38:	1d3b      	adds	r3, r7, #4
 8003c3a:	881b      	ldrh	r3, [r3, #0]
 8003c3c:	2203      	movs	r2, #3
 8003c3e:	4013      	ands	r3, r2
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d101      	bne.n	8003c4a <maxDaysInMonth+0xca>
 8003c46:	231d      	movs	r3, #29
 8003c48:	e000      	b.n	8003c4c <maxDaysInMonth+0xcc>
	else return 28;
 8003c4a:	231c      	movs	r3, #28
}
 8003c4c:	0018      	movs	r0, r3
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	b002      	add	sp, #8
 8003c52:	bd80      	pop	{r7, pc}

08003c54 <initFace>:

void initFace() {
 8003c54:	b580      	push	{r7, lr}
 8003c56:	af00      	add	r7, sp, #0
//	isFaceBeingChanged = 1;
//	faceOnDisplay = faceClock;
	updateFace.clock = 1;
 8003c58:	4b12      	ldr	r3, [pc, #72]	; (8003ca4 <initFace+0x50>)
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	701a      	strb	r2, [r3, #0]

	clockVars.dateToSet = (struct dates *)calloc(1, sizeof(struct dates *));
 8003c5e:	2104      	movs	r1, #4
 8003c60:	2001      	movs	r0, #1
 8003c62:	f004 fd89 	bl	8008778 <calloc>
 8003c66:	0003      	movs	r3, r0
 8003c68:	001a      	movs	r2, r3
 8003c6a:	4b0f      	ldr	r3, [pc, #60]	; (8003ca8 <initFace+0x54>)
 8003c6c:	605a      	str	r2, [r3, #4]
	clockVars.timeToSet = (struct times *)calloc(1, sizeof(struct times *));
 8003c6e:	2104      	movs	r1, #4
 8003c70:	2001      	movs	r0, #1
 8003c72:	f004 fd81 	bl	8008778 <calloc>
 8003c76:	0003      	movs	r3, r0
 8003c78:	001a      	movs	r2, r3
 8003c7a:	4b0b      	ldr	r3, [pc, #44]	; (8003ca8 <initFace+0x54>)
 8003c7c:	609a      	str	r2, [r3, #8]
	timerVars.timeToSet = (struct times *)calloc(1, sizeof(struct times *));
 8003c7e:	2104      	movs	r1, #4
 8003c80:	2001      	movs	r0, #1
 8003c82:	f004 fd79 	bl	8008778 <calloc>
 8003c86:	0003      	movs	r3, r0
 8003c88:	001a      	movs	r2, r3
 8003c8a:	4b08      	ldr	r3, [pc, #32]	; (8003cac <initFace+0x58>)
 8003c8c:	605a      	str	r2, [r3, #4]
	alarmVars.alarmToSet = (struct alarmTimes *)calloc(1, sizeof(struct alarmTimes *));
 8003c8e:	2104      	movs	r1, #4
 8003c90:	2001      	movs	r0, #1
 8003c92:	f004 fd71 	bl	8008778 <calloc>
 8003c96:	0003      	movs	r3, r0
 8003c98:	001a      	movs	r2, r3
 8003c9a:	4b05      	ldr	r3, [pc, #20]	; (8003cb0 <initFace+0x5c>)
 8003c9c:	605a      	str	r2, [r3, #4]
//	struct alarmTimes tempalarm = {0};
//	*clockVars.dateToSet = tempclockdate;
//	*clockVars.timeToSet = tempclocktime;
//	*timerVars.timeToSet = temptimer;
//	*alarmVars.alarmToSet = tempalarm;
}
 8003c9e:	46c0      	nop			; (mov r8, r8)
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}
 8003ca4:	20000140 	.word	0x20000140
 8003ca8:	200000f0 	.word	0x200000f0
 8003cac:	200000fc 	.word	0x200000fc
 8003cb0:	20000104 	.word	0x20000104

08003cb4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cb8:	4b07      	ldr	r3, [pc, #28]	; (8003cd8 <HAL_MspInit+0x24>)
 8003cba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003cbc:	4b06      	ldr	r3, [pc, #24]	; (8003cd8 <HAL_MspInit+0x24>)
 8003cbe:	2101      	movs	r1, #1
 8003cc0:	430a      	orrs	r2, r1
 8003cc2:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8003cc4:	4b04      	ldr	r3, [pc, #16]	; (8003cd8 <HAL_MspInit+0x24>)
 8003cc6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cc8:	4b03      	ldr	r3, [pc, #12]	; (8003cd8 <HAL_MspInit+0x24>)
 8003cca:	2180      	movs	r1, #128	; 0x80
 8003ccc:	0549      	lsls	r1, r1, #21
 8003cce:	430a      	orrs	r2, r1
 8003cd0:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003cd2:	46c0      	nop			; (mov r8, r8)
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}
 8003cd8:	40021000 	.word	0x40021000

08003cdc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b088      	sub	sp, #32
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ce4:	230c      	movs	r3, #12
 8003ce6:	18fb      	adds	r3, r7, r3
 8003ce8:	0018      	movs	r0, r3
 8003cea:	2314      	movs	r3, #20
 8003cec:	001a      	movs	r2, r3
 8003cee:	2100      	movs	r1, #0
 8003cf0:	f004 fd7f 	bl	80087f2 <memset>
  if(hadc->Instance==ADC1)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a15      	ldr	r2, [pc, #84]	; (8003d50 <HAL_ADC_MspInit+0x74>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d123      	bne.n	8003d46 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003cfe:	4b15      	ldr	r3, [pc, #84]	; (8003d54 <HAL_ADC_MspInit+0x78>)
 8003d00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d02:	4b14      	ldr	r3, [pc, #80]	; (8003d54 <HAL_ADC_MspInit+0x78>)
 8003d04:	2180      	movs	r1, #128	; 0x80
 8003d06:	0089      	lsls	r1, r1, #2
 8003d08:	430a      	orrs	r2, r1
 8003d0a:	635a      	str	r2, [r3, #52]	; 0x34
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d0c:	4b11      	ldr	r3, [pc, #68]	; (8003d54 <HAL_ADC_MspInit+0x78>)
 8003d0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d10:	4b10      	ldr	r3, [pc, #64]	; (8003d54 <HAL_ADC_MspInit+0x78>)
 8003d12:	2101      	movs	r1, #1
 8003d14:	430a      	orrs	r2, r1
 8003d16:	62da      	str	r2, [r3, #44]	; 0x2c
 8003d18:	4b0e      	ldr	r3, [pc, #56]	; (8003d54 <HAL_ADC_MspInit+0x78>)
 8003d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	4013      	ands	r3, r2
 8003d20:	60bb      	str	r3, [r7, #8]
 8003d22:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration    
    PA0     ------> ADC_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003d24:	210c      	movs	r1, #12
 8003d26:	187b      	adds	r3, r7, r1
 8003d28:	2201      	movs	r2, #1
 8003d2a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003d2c:	187b      	adds	r3, r7, r1
 8003d2e:	2203      	movs	r2, #3
 8003d30:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d32:	187b      	adds	r3, r7, r1
 8003d34:	2200      	movs	r2, #0
 8003d36:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d38:	187a      	adds	r2, r7, r1
 8003d3a:	23a0      	movs	r3, #160	; 0xa0
 8003d3c:	05db      	lsls	r3, r3, #23
 8003d3e:	0011      	movs	r1, r2
 8003d40:	0018      	movs	r0, r3
 8003d42:	f001 f9c7 	bl	80050d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003d46:	46c0      	nop			; (mov r8, r8)
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	b008      	add	sp, #32
 8003d4c:	bd80      	pop	{r7, pc}
 8003d4e:	46c0      	nop			; (mov r8, r8)
 8003d50:	40012400 	.word	0x40012400
 8003d54:	40021000 	.word	0x40021000

08003d58 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b082      	sub	sp, #8
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  if(hlptim->Instance==LPTIM1)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a0a      	ldr	r2, [pc, #40]	; (8003d90 <HAL_LPTIM_MspInit+0x38>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d10e      	bne.n	8003d88 <HAL_LPTIM_MspInit+0x30>
  {
  /* USER CODE BEGIN LPTIM1_MspInit 0 */

  /* USER CODE END LPTIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8003d6a:	4b0a      	ldr	r3, [pc, #40]	; (8003d94 <HAL_LPTIM_MspInit+0x3c>)
 8003d6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d6e:	4b09      	ldr	r3, [pc, #36]	; (8003d94 <HAL_LPTIM_MspInit+0x3c>)
 8003d70:	2180      	movs	r1, #128	; 0x80
 8003d72:	0609      	lsls	r1, r1, #24
 8003d74:	430a      	orrs	r2, r1
 8003d76:	639a      	str	r2, [r3, #56]	; 0x38
    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 8003d78:	2200      	movs	r2, #0
 8003d7a:	2100      	movs	r1, #0
 8003d7c:	200d      	movs	r0, #13
 8003d7e:	f000 ffe9 	bl	8004d54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 8003d82:	200d      	movs	r0, #13
 8003d84:	f000 fffb 	bl	8004d7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }

}
 8003d88:	46c0      	nop			; (mov r8, r8)
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	b002      	add	sp, #8
 8003d8e:	bd80      	pop	{r7, pc}
 8003d90:	40007c00 	.word	0x40007c00
 8003d94:	40021000 	.word	0x40021000

08003d98 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b082      	sub	sp, #8
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a0a      	ldr	r2, [pc, #40]	; (8003dd0 <HAL_RTC_MspInit+0x38>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d10e      	bne.n	8003dc8 <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003daa:	4b0a      	ldr	r3, [pc, #40]	; (8003dd4 <HAL_RTC_MspInit+0x3c>)
 8003dac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003dae:	4b09      	ldr	r3, [pc, #36]	; (8003dd4 <HAL_RTC_MspInit+0x3c>)
 8003db0:	2180      	movs	r1, #128	; 0x80
 8003db2:	02c9      	lsls	r1, r1, #11
 8003db4:	430a      	orrs	r2, r1
 8003db6:	651a      	str	r2, [r3, #80]	; 0x50
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8003db8:	2200      	movs	r2, #0
 8003dba:	2100      	movs	r1, #0
 8003dbc:	2002      	movs	r0, #2
 8003dbe:	f000 ffc9 	bl	8004d54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8003dc2:	2002      	movs	r0, #2
 8003dc4:	f000 ffdb 	bl	8004d7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003dc8:	46c0      	nop			; (mov r8, r8)
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	b002      	add	sp, #8
 8003dce:	bd80      	pop	{r7, pc}
 8003dd0:	40002800 	.word	0x40002800
 8003dd4:	40021000 	.word	0x40021000

08003dd8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b088      	sub	sp, #32
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003de0:	230c      	movs	r3, #12
 8003de2:	18fb      	adds	r3, r7, r3
 8003de4:	0018      	movs	r0, r3
 8003de6:	2314      	movs	r3, #20
 8003de8:	001a      	movs	r2, r3
 8003dea:	2100      	movs	r1, #0
 8003dec:	f004 fd01 	bl	80087f2 <memset>
  if(hspi->Instance==SPI1)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a30      	ldr	r2, [pc, #192]	; (8003eb8 <HAL_SPI_MspInit+0xe0>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d15a      	bne.n	8003eb0 <HAL_SPI_MspInit+0xd8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003dfa:	4b30      	ldr	r3, [pc, #192]	; (8003ebc <HAL_SPI_MspInit+0xe4>)
 8003dfc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003dfe:	4b2f      	ldr	r3, [pc, #188]	; (8003ebc <HAL_SPI_MspInit+0xe4>)
 8003e00:	2180      	movs	r1, #128	; 0x80
 8003e02:	0149      	lsls	r1, r1, #5
 8003e04:	430a      	orrs	r2, r1
 8003e06:	635a      	str	r2, [r3, #52]	; 0x34
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e08:	4b2c      	ldr	r3, [pc, #176]	; (8003ebc <HAL_SPI_MspInit+0xe4>)
 8003e0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e0c:	4b2b      	ldr	r3, [pc, #172]	; (8003ebc <HAL_SPI_MspInit+0xe4>)
 8003e0e:	2101      	movs	r1, #1
 8003e10:	430a      	orrs	r2, r1
 8003e12:	62da      	str	r2, [r3, #44]	; 0x2c
 8003e14:	4b29      	ldr	r3, [pc, #164]	; (8003ebc <HAL_SPI_MspInit+0xe4>)
 8003e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e18:	2201      	movs	r2, #1
 8003e1a:	4013      	ands	r3, r2
 8003e1c:	60bb      	str	r3, [r7, #8]
 8003e1e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8003e20:	210c      	movs	r1, #12
 8003e22:	187b      	adds	r3, r7, r1
 8003e24:	22a0      	movs	r2, #160	; 0xa0
 8003e26:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e28:	187b      	adds	r3, r7, r1
 8003e2a:	2202      	movs	r2, #2
 8003e2c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e2e:	187b      	adds	r3, r7, r1
 8003e30:	2200      	movs	r2, #0
 8003e32:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e34:	187b      	adds	r3, r7, r1
 8003e36:	2203      	movs	r2, #3
 8003e38:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8003e3a:	187b      	adds	r3, r7, r1
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e40:	187a      	adds	r2, r7, r1
 8003e42:	23a0      	movs	r3, #160	; 0xa0
 8003e44:	05db      	lsls	r3, r3, #23
 8003e46:	0011      	movs	r1, r2
 8003e48:	0018      	movs	r0, r3
 8003e4a:	f001 f943 	bl	80050d4 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8003e4e:	4b1c      	ldr	r3, [pc, #112]	; (8003ec0 <HAL_SPI_MspInit+0xe8>)
 8003e50:	4a1c      	ldr	r2, [pc, #112]	; (8003ec4 <HAL_SPI_MspInit+0xec>)
 8003e52:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
 8003e54:	4b1a      	ldr	r3, [pc, #104]	; (8003ec0 <HAL_SPI_MspInit+0xe8>)
 8003e56:	2201      	movs	r2, #1
 8003e58:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003e5a:	4b19      	ldr	r3, [pc, #100]	; (8003ec0 <HAL_SPI_MspInit+0xe8>)
 8003e5c:	2210      	movs	r2, #16
 8003e5e:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003e60:	4b17      	ldr	r3, [pc, #92]	; (8003ec0 <HAL_SPI_MspInit+0xe8>)
 8003e62:	2200      	movs	r2, #0
 8003e64:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003e66:	4b16      	ldr	r3, [pc, #88]	; (8003ec0 <HAL_SPI_MspInit+0xe8>)
 8003e68:	2280      	movs	r2, #128	; 0x80
 8003e6a:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003e6c:	4b14      	ldr	r3, [pc, #80]	; (8003ec0 <HAL_SPI_MspInit+0xe8>)
 8003e6e:	2200      	movs	r2, #0
 8003e70:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003e72:	4b13      	ldr	r3, [pc, #76]	; (8003ec0 <HAL_SPI_MspInit+0xe8>)
 8003e74:	2200      	movs	r2, #0
 8003e76:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8003e78:	4b11      	ldr	r3, [pc, #68]	; (8003ec0 <HAL_SPI_MspInit+0xe8>)
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003e7e:	4b10      	ldr	r3, [pc, #64]	; (8003ec0 <HAL_SPI_MspInit+0xe8>)
 8003e80:	2200      	movs	r2, #0
 8003e82:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8003e84:	4b0e      	ldr	r3, [pc, #56]	; (8003ec0 <HAL_SPI_MspInit+0xe8>)
 8003e86:	0018      	movs	r0, r3
 8003e88:	f000 ffb6 	bl	8004df8 <HAL_DMA_Init>
 8003e8c:	1e03      	subs	r3, r0, #0
 8003e8e:	d001      	beq.n	8003e94 <HAL_SPI_MspInit+0xbc>
    {
      Error_Handler();
 8003e90:	f7fe fc3a 	bl	8002708 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	4a0a      	ldr	r2, [pc, #40]	; (8003ec0 <HAL_SPI_MspInit+0xe8>)
 8003e98:	649a      	str	r2, [r3, #72]	; 0x48
 8003e9a:	4b09      	ldr	r3, [pc, #36]	; (8003ec0 <HAL_SPI_MspInit+0xe8>)
 8003e9c:	687a      	ldr	r2, [r7, #4]
 8003e9e:	629a      	str	r2, [r3, #40]	; 0x28

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	2100      	movs	r1, #0
 8003ea4:	2019      	movs	r0, #25
 8003ea6:	f000 ff55 	bl	8004d54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8003eaa:	2019      	movs	r0, #25
 8003eac:	f000 ff67 	bl	8004d7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003eb0:	46c0      	nop			; (mov r8, r8)
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	b008      	add	sp, #32
 8003eb6:	bd80      	pop	{r7, pc}
 8003eb8:	40013000 	.word	0x40013000
 8003ebc:	40021000 	.word	0x40021000
 8003ec0:	20000320 	.word	0x20000320
 8003ec4:	40020030 	.word	0x40020030

08003ec8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b082      	sub	sp, #8
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	2380      	movs	r3, #128	; 0x80
 8003ed6:	05db      	lsls	r3, r3, #23
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d10e      	bne.n	8003efa <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003edc:	4b26      	ldr	r3, [pc, #152]	; (8003f78 <HAL_TIM_Base_MspInit+0xb0>)
 8003ede:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ee0:	4b25      	ldr	r3, [pc, #148]	; (8003f78 <HAL_TIM_Base_MspInit+0xb0>)
 8003ee2:	2101      	movs	r1, #1
 8003ee4:	430a      	orrs	r2, r1
 8003ee6:	639a      	str	r2, [r3, #56]	; 0x38
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003ee8:	2200      	movs	r2, #0
 8003eea:	2100      	movs	r1, #0
 8003eec:	200f      	movs	r0, #15
 8003eee:	f000 ff31 	bl	8004d54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003ef2:	200f      	movs	r0, #15
 8003ef4:	f000 ff43 	bl	8004d7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM22_MspInit 1 */

  /* USER CODE END TIM22_MspInit 1 */
  }

}
 8003ef8:	e03a      	b.n	8003f70 <HAL_TIM_Base_MspInit+0xa8>
  else if(htim_base->Instance==TIM6)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a1f      	ldr	r2, [pc, #124]	; (8003f7c <HAL_TIM_Base_MspInit+0xb4>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d10e      	bne.n	8003f22 <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003f04:	4b1c      	ldr	r3, [pc, #112]	; (8003f78 <HAL_TIM_Base_MspInit+0xb0>)
 8003f06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f08:	4b1b      	ldr	r3, [pc, #108]	; (8003f78 <HAL_TIM_Base_MspInit+0xb0>)
 8003f0a:	2110      	movs	r1, #16
 8003f0c:	430a      	orrs	r2, r1
 8003f0e:	639a      	str	r2, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003f10:	2200      	movs	r2, #0
 8003f12:	2100      	movs	r1, #0
 8003f14:	2011      	movs	r0, #17
 8003f16:	f000 ff1d 	bl	8004d54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003f1a:	2011      	movs	r0, #17
 8003f1c:	f000 ff2f 	bl	8004d7e <HAL_NVIC_EnableIRQ>
}
 8003f20:	e026      	b.n	8003f70 <HAL_TIM_Base_MspInit+0xa8>
  else if(htim_base->Instance==TIM21)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a16      	ldr	r2, [pc, #88]	; (8003f80 <HAL_TIM_Base_MspInit+0xb8>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d10e      	bne.n	8003f4a <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM21_CLK_ENABLE();
 8003f2c:	4b12      	ldr	r3, [pc, #72]	; (8003f78 <HAL_TIM_Base_MspInit+0xb0>)
 8003f2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f30:	4b11      	ldr	r3, [pc, #68]	; (8003f78 <HAL_TIM_Base_MspInit+0xb0>)
 8003f32:	2104      	movs	r1, #4
 8003f34:	430a      	orrs	r2, r1
 8003f36:	635a      	str	r2, [r3, #52]	; 0x34
    HAL_NVIC_SetPriority(TIM21_IRQn, 0, 0);
 8003f38:	2200      	movs	r2, #0
 8003f3a:	2100      	movs	r1, #0
 8003f3c:	2014      	movs	r0, #20
 8003f3e:	f000 ff09 	bl	8004d54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM21_IRQn);
 8003f42:	2014      	movs	r0, #20
 8003f44:	f000 ff1b 	bl	8004d7e <HAL_NVIC_EnableIRQ>
}
 8003f48:	e012      	b.n	8003f70 <HAL_TIM_Base_MspInit+0xa8>
  else if(htim_base->Instance==TIM22)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a0d      	ldr	r2, [pc, #52]	; (8003f84 <HAL_TIM_Base_MspInit+0xbc>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d10d      	bne.n	8003f70 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM22_CLK_ENABLE();
 8003f54:	4b08      	ldr	r3, [pc, #32]	; (8003f78 <HAL_TIM_Base_MspInit+0xb0>)
 8003f56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f58:	4b07      	ldr	r3, [pc, #28]	; (8003f78 <HAL_TIM_Base_MspInit+0xb0>)
 8003f5a:	2120      	movs	r1, #32
 8003f5c:	430a      	orrs	r2, r1
 8003f5e:	635a      	str	r2, [r3, #52]	; 0x34
    HAL_NVIC_SetPriority(TIM22_IRQn, 0, 0);
 8003f60:	2200      	movs	r2, #0
 8003f62:	2100      	movs	r1, #0
 8003f64:	2016      	movs	r0, #22
 8003f66:	f000 fef5 	bl	8004d54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM22_IRQn);
 8003f6a:	2016      	movs	r0, #22
 8003f6c:	f000 ff07 	bl	8004d7e <HAL_NVIC_EnableIRQ>
}
 8003f70:	46c0      	nop			; (mov r8, r8)
 8003f72:	46bd      	mov	sp, r7
 8003f74:	b002      	add	sp, #8
 8003f76:	bd80      	pop	{r7, pc}
 8003f78:	40021000 	.word	0x40021000
 8003f7c:	40001000 	.word	0x40001000
 8003f80:	40010800 	.word	0x40010800
 8003f84:	40011400 	.word	0x40011400

08003f88 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b088      	sub	sp, #32
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f90:	230c      	movs	r3, #12
 8003f92:	18fb      	adds	r3, r7, r3
 8003f94:	0018      	movs	r0, r3
 8003f96:	2314      	movs	r3, #20
 8003f98:	001a      	movs	r2, r3
 8003f9a:	2100      	movs	r1, #0
 8003f9c:	f004 fc29 	bl	80087f2 <memset>
  if(htim->Instance==TIM2)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	2380      	movs	r3, #128	; 0x80
 8003fa6:	05db      	lsls	r3, r3, #23
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	d123      	bne.n	8003ff4 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fac:	4b13      	ldr	r3, [pc, #76]	; (8003ffc <HAL_TIM_MspPostInit+0x74>)
 8003fae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fb0:	4b12      	ldr	r3, [pc, #72]	; (8003ffc <HAL_TIM_MspPostInit+0x74>)
 8003fb2:	2101      	movs	r1, #1
 8003fb4:	430a      	orrs	r2, r1
 8003fb6:	62da      	str	r2, [r3, #44]	; 0x2c
 8003fb8:	4b10      	ldr	r3, [pc, #64]	; (8003ffc <HAL_TIM_MspPostInit+0x74>)
 8003fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	4013      	ands	r3, r2
 8003fc0:	60bb      	str	r3, [r7, #8]
 8003fc2:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration    
    PA15     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003fc4:	210c      	movs	r1, #12
 8003fc6:	187b      	adds	r3, r7, r1
 8003fc8:	2280      	movs	r2, #128	; 0x80
 8003fca:	0212      	lsls	r2, r2, #8
 8003fcc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fce:	187b      	adds	r3, r7, r1
 8003fd0:	2202      	movs	r2, #2
 8003fd2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fd4:	187b      	adds	r3, r7, r1
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fda:	187b      	adds	r3, r7, r1
 8003fdc:	2200      	movs	r2, #0
 8003fde:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM2;
 8003fe0:	187b      	adds	r3, r7, r1
 8003fe2:	2205      	movs	r2, #5
 8003fe4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fe6:	187a      	adds	r2, r7, r1
 8003fe8:	23a0      	movs	r3, #160	; 0xa0
 8003fea:	05db      	lsls	r3, r3, #23
 8003fec:	0011      	movs	r1, r2
 8003fee:	0018      	movs	r0, r3
 8003ff0:	f001 f870 	bl	80050d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8003ff4:	46c0      	nop			; (mov r8, r8)
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	b008      	add	sp, #32
 8003ffa:	bd80      	pop	{r7, pc}
 8003ffc:	40021000 	.word	0x40021000

08004000 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004004:	46c0      	nop			; (mov r8, r8)
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}

0800400a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800400a:	b580      	push	{r7, lr}
 800400c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800400e:	e7fe      	b.n	800400e <HardFault_Handler+0x4>

08004010 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8004014:	46c0      	nop			; (mov r8, r8)
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}

0800401a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800401a:	b580      	push	{r7, lr}
 800401c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800401e:	46c0      	nop			; (mov r8, r8)
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}

08004024 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004028:	f000 fb56 	bl	80046d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800402c:	46c0      	nop			; (mov r8, r8)
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}
	...

08004034 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8004038:	4b03      	ldr	r3, [pc, #12]	; (8004048 <RTC_IRQHandler+0x14>)
 800403a:	0018      	movs	r0, r3
 800403c:	f002 ff30 	bl	8006ea0 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8004040:	46c0      	nop			; (mov r8, r8)
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}
 8004046:	46c0      	nop			; (mov r8, r8)
 8004048:	2000020c 	.word	0x2000020c

0800404c <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8004050:	2004      	movs	r0, #4
 8004052:	f001 fa09 	bl	8005468 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8004056:	46c0      	nop			; (mov r8, r8)
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}

0800405c <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8004060:	2380      	movs	r3, #128	; 0x80
 8004062:	019b      	lsls	r3, r3, #6
 8004064:	0018      	movs	r0, r3
 8004066:	f001 f9ff 	bl	8005468 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 800406a:	2380      	movs	r3, #128	; 0x80
 800406c:	01db      	lsls	r3, r3, #7
 800406e:	0018      	movs	r0, r3
 8004070:	f001 f9fa 	bl	8005468 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8004074:	2380      	movs	r3, #128	; 0x80
 8004076:	021b      	lsls	r3, r3, #8
 8004078:	0018      	movs	r0, r3
 800407a:	f001 f9f5 	bl	8005468 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800407e:	46c0      	nop			; (mov r8, r8)
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}

08004084 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8004088:	4b03      	ldr	r3, [pc, #12]	; (8004098 <DMA1_Channel2_3_IRQHandler+0x14>)
 800408a:	0018      	movs	r0, r3
 800408c:	f000 ff74 	bl	8004f78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8004090:	46c0      	nop			; (mov r8, r8)
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}
 8004096:	46c0      	nop			; (mov r8, r8)
 8004098:	20000320 	.word	0x20000320

0800409c <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt / LPTIM1 wake-up interrupt through EXTI line 29.
  */
void LPTIM1_IRQHandler(void)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 80040a0:	4b03      	ldr	r3, [pc, #12]	; (80040b0 <LPTIM1_IRQHandler+0x14>)
 80040a2:	0018      	movs	r0, r3
 80040a4:	f001 fa7c 	bl	80055a0 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 80040a8:	46c0      	nop			; (mov r8, r8)
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}
 80040ae:	46c0      	nop			; (mov r8, r8)
 80040b0:	200001dc 	.word	0x200001dc

080040b4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80040b8:	4b03      	ldr	r3, [pc, #12]	; (80040c8 <TIM2_IRQHandler+0x14>)
 80040ba:	0018      	movs	r0, r3
 80040bc:	f003 fe18 	bl	8007cf0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80040c0:	46c0      	nop			; (mov r8, r8)
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}
 80040c6:	46c0      	nop			; (mov r8, r8)
 80040c8:	20000288 	.word	0x20000288

080040cc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1/DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80040d0:	4b03      	ldr	r3, [pc, #12]	; (80040e0 <TIM6_DAC_IRQHandler+0x14>)
 80040d2:	0018      	movs	r0, r3
 80040d4:	f003 fe0c 	bl	8007cf0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80040d8:	46c0      	nop			; (mov r8, r8)
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}
 80040de:	46c0      	nop			; (mov r8, r8)
 80040e0:	20000150 	.word	0x20000150

080040e4 <TIM21_IRQHandler>:

/**
  * @brief This function handles TIM21 global interrupt.
  */
void TIM21_IRQHandler(void)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM21_IRQn 0 */

  /* USER CODE END TIM21_IRQn 0 */
  HAL_TIM_IRQHandler(&htim21);
 80040e8:	4b03      	ldr	r3, [pc, #12]	; (80040f8 <TIM21_IRQHandler+0x14>)
 80040ea:	0018      	movs	r0, r3
 80040ec:	f003 fe00 	bl	8007cf0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM21_IRQn 1 */

  /* USER CODE END TIM21_IRQn 1 */
}
 80040f0:	46c0      	nop			; (mov r8, r8)
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}
 80040f6:	46c0      	nop			; (mov r8, r8)
 80040f8:	20000368 	.word	0x20000368

080040fc <TIM22_IRQHandler>:

/**
  * @brief This function handles TIM22 global interrupt.
  */
void TIM22_IRQHandler(void)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM22_IRQn 0 */

  /* USER CODE END TIM22_IRQn 0 */
  HAL_TIM_IRQHandler(&htim22);
 8004100:	4b03      	ldr	r3, [pc, #12]	; (8004110 <TIM22_IRQHandler+0x14>)
 8004102:	0018      	movs	r0, r3
 8004104:	f003 fdf4 	bl	8007cf0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM22_IRQn 1 */

  /* USER CODE END TIM22_IRQn 1 */
}
 8004108:	46c0      	nop			; (mov r8, r8)
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}
 800410e:	46c0      	nop			; (mov r8, r8)
 8004110:	200001a0 	.word	0x200001a0

08004114 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8004118:	4b03      	ldr	r3, [pc, #12]	; (8004128 <SPI1_IRQHandler+0x14>)
 800411a:	0018      	movs	r0, r3
 800411c:	f003 f9ec 	bl	80074f8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8004120:	46c0      	nop			; (mov r8, r8)
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}
 8004126:	46c0      	nop			; (mov r8, r8)
 8004128:	20000230 	.word	0x20000230

0800412c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b084      	sub	sp, #16
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004134:	4b11      	ldr	r3, [pc, #68]	; (800417c <_sbrk+0x50>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d102      	bne.n	8004142 <_sbrk+0x16>
		heap_end = &end;
 800413c:	4b0f      	ldr	r3, [pc, #60]	; (800417c <_sbrk+0x50>)
 800413e:	4a10      	ldr	r2, [pc, #64]	; (8004180 <_sbrk+0x54>)
 8004140:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8004142:	4b0e      	ldr	r3, [pc, #56]	; (800417c <_sbrk+0x50>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8004148:	4b0c      	ldr	r3, [pc, #48]	; (800417c <_sbrk+0x50>)
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	18d3      	adds	r3, r2, r3
 8004150:	466a      	mov	r2, sp
 8004152:	4293      	cmp	r3, r2
 8004154:	d907      	bls.n	8004166 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8004156:	f004 fb19 	bl	800878c <__errno>
 800415a:	0003      	movs	r3, r0
 800415c:	220c      	movs	r2, #12
 800415e:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8004160:	2301      	movs	r3, #1
 8004162:	425b      	negs	r3, r3
 8004164:	e006      	b.n	8004174 <_sbrk+0x48>
	}

	heap_end += incr;
 8004166:	4b05      	ldr	r3, [pc, #20]	; (800417c <_sbrk+0x50>)
 8004168:	681a      	ldr	r2, [r3, #0]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	18d2      	adds	r2, r2, r3
 800416e:	4b03      	ldr	r3, [pc, #12]	; (800417c <_sbrk+0x50>)
 8004170:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 8004172:	68fb      	ldr	r3, [r7, #12]
}
 8004174:	0018      	movs	r0, r3
 8004176:	46bd      	mov	sp, r7
 8004178:	b004      	add	sp, #16
 800417a:	bd80      	pop	{r7, pc}
 800417c:	20000118 	.word	0x20000118
 8004180:	200003b0 	.word	0x200003b0

08004184 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8004188:	4b17      	ldr	r3, [pc, #92]	; (80041e8 <SystemInit+0x64>)
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	4b16      	ldr	r3, [pc, #88]	; (80041e8 <SystemInit+0x64>)
 800418e:	2180      	movs	r1, #128	; 0x80
 8004190:	0049      	lsls	r1, r1, #1
 8004192:	430a      	orrs	r2, r1
 8004194:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8004196:	4b14      	ldr	r3, [pc, #80]	; (80041e8 <SystemInit+0x64>)
 8004198:	68da      	ldr	r2, [r3, #12]
 800419a:	4b13      	ldr	r3, [pc, #76]	; (80041e8 <SystemInit+0x64>)
 800419c:	4913      	ldr	r1, [pc, #76]	; (80041ec <SystemInit+0x68>)
 800419e:	400a      	ands	r2, r1
 80041a0:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 80041a2:	4b11      	ldr	r3, [pc, #68]	; (80041e8 <SystemInit+0x64>)
 80041a4:	681a      	ldr	r2, [r3, #0]
 80041a6:	4b10      	ldr	r3, [pc, #64]	; (80041e8 <SystemInit+0x64>)
 80041a8:	4911      	ldr	r1, [pc, #68]	; (80041f0 <SystemInit+0x6c>)
 80041aa:	400a      	ands	r2, r1
 80041ac:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80041ae:	4b0e      	ldr	r3, [pc, #56]	; (80041e8 <SystemInit+0x64>)
 80041b0:	689a      	ldr	r2, [r3, #8]
 80041b2:	4b0d      	ldr	r3, [pc, #52]	; (80041e8 <SystemInit+0x64>)
 80041b4:	2101      	movs	r1, #1
 80041b6:	438a      	bics	r2, r1
 80041b8:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 80041ba:	4b0b      	ldr	r3, [pc, #44]	; (80041e8 <SystemInit+0x64>)
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	4b0a      	ldr	r3, [pc, #40]	; (80041e8 <SystemInit+0x64>)
 80041c0:	490c      	ldr	r1, [pc, #48]	; (80041f4 <SystemInit+0x70>)
 80041c2:	400a      	ands	r2, r1
 80041c4:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 80041c6:	4b08      	ldr	r3, [pc, #32]	; (80041e8 <SystemInit+0x64>)
 80041c8:	68da      	ldr	r2, [r3, #12]
 80041ca:	4b07      	ldr	r3, [pc, #28]	; (80041e8 <SystemInit+0x64>)
 80041cc:	490a      	ldr	r1, [pc, #40]	; (80041f8 <SystemInit+0x74>)
 80041ce:	400a      	ands	r2, r1
 80041d0:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80041d2:	4b05      	ldr	r3, [pc, #20]	; (80041e8 <SystemInit+0x64>)
 80041d4:	2200      	movs	r2, #0
 80041d6:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80041d8:	4b08      	ldr	r3, [pc, #32]	; (80041fc <SystemInit+0x78>)
 80041da:	2280      	movs	r2, #128	; 0x80
 80041dc:	0512      	lsls	r2, r2, #20
 80041de:	609a      	str	r2, [r3, #8]
#endif
}
 80041e0:	46c0      	nop			; (mov r8, r8)
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}
 80041e6:	46c0      	nop			; (mov r8, r8)
 80041e8:	40021000 	.word	0x40021000
 80041ec:	88ff400c 	.word	0x88ff400c
 80041f0:	fef6fff6 	.word	0xfef6fff6
 80041f4:	fffbffff 	.word	0xfffbffff
 80041f8:	ff02ffff 	.word	0xff02ffff
 80041fc:	e000ed00 	.word	0xe000ed00

08004200 <HAL_TIM_PeriodElapsedCallback>:
static uint32_t stopwatchPauseMarker = 0;
static uint8_t isMotorRunning = 0;
static uint8_t motorStateCounter = 0;

// important boye that is called for a bunch of different timers
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8004200:	b580      	push	{r7, lr}
 8004202:	b082      	sub	sp, #8
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
	// button's timer
	if (htim->Instance == TIM6) {
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a39      	ldr	r2, [pc, #228]	; (80042f4 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d11f      	bne.n	8004252 <HAL_TIM_PeriodElapsedCallback+0x52>
		// renable button interrupts and clear pending
		HAL_TIM_Base_Stop_IT(htim);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	0018      	movs	r0, r3
 8004216:	f003 fc3d 	bl	8007a94 <HAL_TIM_Base_Stop_IT>
		HAL_NVIC_ClearPendingIRQ(EXTI2_3_IRQn);
 800421a:	2006      	movs	r0, #6
 800421c:	f000 fddc 	bl	8004dd8 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_ClearPendingIRQ(EXTI4_15_IRQn);
 8004220:	2007      	movs	r0, #7
 8004222:	f000 fdd9 	bl	8004dd8 <HAL_NVIC_ClearPendingIRQ>
		__HAL_GPIO_EXTI_CLEAR_IT(BUTTON1);
 8004226:	4b34      	ldr	r3, [pc, #208]	; (80042f8 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8004228:	2204      	movs	r2, #4
 800422a:	615a      	str	r2, [r3, #20]
		__HAL_GPIO_EXTI_CLEAR_IT(BUTTON2);
 800422c:	4b32      	ldr	r3, [pc, #200]	; (80042f8 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 800422e:	2280      	movs	r2, #128	; 0x80
 8004230:	0192      	lsls	r2, r2, #6
 8004232:	615a      	str	r2, [r3, #20]
		__HAL_GPIO_EXTI_CLEAR_IT(BUTTON3);
 8004234:	4b30      	ldr	r3, [pc, #192]	; (80042f8 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8004236:	2280      	movs	r2, #128	; 0x80
 8004238:	01d2      	lsls	r2, r2, #7
 800423a:	615a      	str	r2, [r3, #20]
		__HAL_GPIO_EXTI_CLEAR_IT(BUTTON4);
 800423c:	4b2e      	ldr	r3, [pc, #184]	; (80042f8 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 800423e:	2280      	movs	r2, #128	; 0x80
 8004240:	0212      	lsls	r2, r2, #8
 8004242:	615a      	str	r2, [r3, #20]

		HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8004244:	2006      	movs	r0, #6
 8004246:	f000 fd9a 	bl	8004d7e <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800424a:	2007      	movs	r0, #7
 800424c:	f000 fd97 	bl	8004d7e <HAL_NVIC_EnableIRQ>
	}
	// sampler's timer
	else if (htim->Instance == TIM22) {
//		canSampleADC = 1;
	}
}
 8004250:	e04b      	b.n	80042ea <HAL_TIM_PeriodElapsedCallback+0xea>
	else if (htim->Instance == TIM2) {
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681a      	ldr	r2, [r3, #0]
 8004256:	2380      	movs	r3, #128	; 0x80
 8004258:	05db      	lsls	r3, r3, #23
 800425a:	429a      	cmp	r2, r3
 800425c:	d145      	bne.n	80042ea <HAL_TIM_PeriodElapsedCallback+0xea>
		if (motorStateCounter == 5) {
 800425e:	4b27      	ldr	r3, [pc, #156]	; (80042fc <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8004260:	781b      	ldrb	r3, [r3, #0]
 8004262:	2b05      	cmp	r3, #5
 8004264:	d10b      	bne.n	800427e <HAL_TIM_PeriodElapsedCallback+0x7e>
			isMotorRunning = 0;
 8004266:	4b26      	ldr	r3, [pc, #152]	; (8004300 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8004268:	2200      	movs	r2, #0
 800426a:	701a      	strb	r2, [r3, #0]
			motorStateCounter = 0;
 800426c:	4b23      	ldr	r3, [pc, #140]	; (80042fc <HAL_TIM_PeriodElapsedCallback+0xfc>)
 800426e:	2200      	movs	r2, #0
 8004270:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_PIN, GPIO_PIN_RESET);
 8004272:	4b24      	ldr	r3, [pc, #144]	; (8004304 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8004274:	2200      	movs	r2, #0
 8004276:	2101      	movs	r1, #1
 8004278:	0018      	movs	r0, r3
 800427a:	f001 f8c6 	bl	800540a <HAL_GPIO_WritePin>
		if (isMotorRunning) {
 800427e:	4b20      	ldr	r3, [pc, #128]	; (8004300 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8004280:	781b      	ldrb	r3, [r3, #0]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d031      	beq.n	80042ea <HAL_TIM_PeriodElapsedCallback+0xea>
			switch(motorStateCounter) {
 8004286:	4b1d      	ldr	r3, [pc, #116]	; (80042fc <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8004288:	781b      	ldrb	r3, [r3, #0]
 800428a:	2b04      	cmp	r3, #4
 800428c:	d827      	bhi.n	80042de <HAL_TIM_PeriodElapsedCallback+0xde>
 800428e:	009a      	lsls	r2, r3, #2
 8004290:	4b1d      	ldr	r3, [pc, #116]	; (8004308 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8004292:	18d3      	adds	r3, r2, r3
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	469f      	mov	pc, r3
				case 0: HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_PIN, GPIO_PIN_SET); break;
 8004298:	4b1a      	ldr	r3, [pc, #104]	; (8004304 <HAL_TIM_PeriodElapsedCallback+0x104>)
 800429a:	2201      	movs	r2, #1
 800429c:	2101      	movs	r1, #1
 800429e:	0018      	movs	r0, r3
 80042a0:	f001 f8b3 	bl	800540a <HAL_GPIO_WritePin>
 80042a4:	e01b      	b.n	80042de <HAL_TIM_PeriodElapsedCallback+0xde>
				case 1: HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_PIN, GPIO_PIN_RESET); break;
 80042a6:	4b17      	ldr	r3, [pc, #92]	; (8004304 <HAL_TIM_PeriodElapsedCallback+0x104>)
 80042a8:	2200      	movs	r2, #0
 80042aa:	2101      	movs	r1, #1
 80042ac:	0018      	movs	r0, r3
 80042ae:	f001 f8ac 	bl	800540a <HAL_GPIO_WritePin>
 80042b2:	e014      	b.n	80042de <HAL_TIM_PeriodElapsedCallback+0xde>
				case 2: HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_PIN, GPIO_PIN_SET); break;
 80042b4:	4b13      	ldr	r3, [pc, #76]	; (8004304 <HAL_TIM_PeriodElapsedCallback+0x104>)
 80042b6:	2201      	movs	r2, #1
 80042b8:	2101      	movs	r1, #1
 80042ba:	0018      	movs	r0, r3
 80042bc:	f001 f8a5 	bl	800540a <HAL_GPIO_WritePin>
 80042c0:	e00d      	b.n	80042de <HAL_TIM_PeriodElapsedCallback+0xde>
				case 3: HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_PIN, GPIO_PIN_RESET); break;
 80042c2:	4b10      	ldr	r3, [pc, #64]	; (8004304 <HAL_TIM_PeriodElapsedCallback+0x104>)
 80042c4:	2200      	movs	r2, #0
 80042c6:	2101      	movs	r1, #1
 80042c8:	0018      	movs	r0, r3
 80042ca:	f001 f89e 	bl	800540a <HAL_GPIO_WritePin>
 80042ce:	e006      	b.n	80042de <HAL_TIM_PeriodElapsedCallback+0xde>
				case 4: HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_PIN, GPIO_PIN_SET); break;
 80042d0:	4b0c      	ldr	r3, [pc, #48]	; (8004304 <HAL_TIM_PeriodElapsedCallback+0x104>)
 80042d2:	2201      	movs	r2, #1
 80042d4:	2101      	movs	r1, #1
 80042d6:	0018      	movs	r0, r3
 80042d8:	f001 f897 	bl	800540a <HAL_GPIO_WritePin>
 80042dc:	46c0      	nop			; (mov r8, r8)
			++motorStateCounter;
 80042de:	4b07      	ldr	r3, [pc, #28]	; (80042fc <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80042e0:	781b      	ldrb	r3, [r3, #0]
 80042e2:	3301      	adds	r3, #1
 80042e4:	b2da      	uxtb	r2, r3
 80042e6:	4b05      	ldr	r3, [pc, #20]	; (80042fc <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80042e8:	701a      	strb	r2, [r3, #0]
}
 80042ea:	46c0      	nop			; (mov r8, r8)
 80042ec:	46bd      	mov	sp, r7
 80042ee:	b002      	add	sp, #8
 80042f0:	bd80      	pop	{r7, pc}
 80042f2:	46c0      	nop			; (mov r8, r8)
 80042f4:	40001000 	.word	0x40001000
 80042f8:	40010400 	.word	0x40010400
 80042fc:	2000012d 	.word	0x2000012d
 8004300:	2000012c 	.word	0x2000012c
 8004304:	50000400 	.word	0x50000400
 8004308:	080097f0 	.word	0x080097f0

0800430c <HAL_TIM_OC_DelayElapsedCallback>:

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 800430c:	b580      	push	{r7, lr}
 800430e:	b082      	sub	sp, #8
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM21) {
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a1a      	ldr	r2, [pc, #104]	; (8004384 <HAL_TIM_OC_DelayElapsedCallback+0x78>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d129      	bne.n	8004372 <HAL_TIM_OC_DelayElapsedCallback+0x66>
		// timer's channel
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	7e1b      	ldrb	r3, [r3, #24]
 8004322:	2b01      	cmp	r3, #1
 8004324:	d119      	bne.n	800435a <HAL_TIM_OC_DelayElapsedCallback+0x4e>
			updateFace.timer = 1;
 8004326:	4b18      	ldr	r3, [pc, #96]	; (8004388 <HAL_TIM_OC_DelayElapsedCallback+0x7c>)
 8004328:	2201      	movs	r2, #1
 800432a:	705a      	strb	r2, [r3, #1]
			if (timerCounter != 1) --timerCounter;
 800432c:	4b17      	ldr	r3, [pc, #92]	; (800438c <HAL_TIM_OC_DelayElapsedCallback+0x80>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	2b01      	cmp	r3, #1
 8004332:	d005      	beq.n	8004340 <HAL_TIM_OC_DelayElapsedCallback+0x34>
 8004334:	4b15      	ldr	r3, [pc, #84]	; (800438c <HAL_TIM_OC_DelayElapsedCallback+0x80>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	1e5a      	subs	r2, r3, #1
 800433a:	4b14      	ldr	r3, [pc, #80]	; (800438c <HAL_TIM_OC_DelayElapsedCallback+0x80>)
 800433c:	601a      	str	r2, [r3, #0]
 800433e:	e018      	b.n	8004372 <HAL_TIM_OC_DelayElapsedCallback+0x66>
			else {
				--timerCounter;
 8004340:	4b12      	ldr	r3, [pc, #72]	; (800438c <HAL_TIM_OC_DelayElapsedCallback+0x80>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	1e5a      	subs	r2, r3, #1
 8004346:	4b11      	ldr	r3, [pc, #68]	; (800438c <HAL_TIM_OC_DelayElapsedCallback+0x80>)
 8004348:	601a      	str	r2, [r3, #0]
				isTimerRunning = 0;
 800434a:	4b11      	ldr	r3, [pc, #68]	; (8004390 <HAL_TIM_OC_DelayElapsedCallback+0x84>)
 800434c:	2200      	movs	r2, #0
 800434e:	701a      	strb	r2, [r3, #0]
				stopTimer(htim);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	0018      	movs	r0, r3
 8004354:	f000 f892 	bl	800447c <stopTimer>
 8004358:	e00b      	b.n	8004372 <HAL_TIM_OC_DelayElapsedCallback+0x66>
			}
		}
		// stopwatch's channel
		else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) {
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	7e1b      	ldrb	r3, [r3, #24]
 800435e:	2b02      	cmp	r3, #2
 8004360:	d107      	bne.n	8004372 <HAL_TIM_OC_DelayElapsedCallback+0x66>
			updateFace.stopwatch = 1;
 8004362:	4b09      	ldr	r3, [pc, #36]	; (8004388 <HAL_TIM_OC_DelayElapsedCallback+0x7c>)
 8004364:	2201      	movs	r2, #1
 8004366:	70da      	strb	r2, [r3, #3]
			++stopwatchCounter;
 8004368:	4b0a      	ldr	r3, [pc, #40]	; (8004394 <HAL_TIM_OC_DelayElapsedCallback+0x88>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	1c5a      	adds	r2, r3, #1
 800436e:	4b09      	ldr	r3, [pc, #36]	; (8004394 <HAL_TIM_OC_DelayElapsedCallback+0x88>)
 8004370:	601a      	str	r2, [r3, #0]
		}
	}
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_1);
 8004372:	4b09      	ldr	r3, [pc, #36]	; (8004398 <HAL_TIM_OC_DelayElapsedCallback+0x8c>)
 8004374:	2102      	movs	r1, #2
 8004376:	0018      	movs	r0, r3
 8004378:	f001 f864 	bl	8005444 <HAL_GPIO_TogglePin>
}
 800437c:	46c0      	nop			; (mov r8, r8)
 800437e:	46bd      	mov	sp, r7
 8004380:	b002      	add	sp, #8
 8004382:	bd80      	pop	{r7, pc}
 8004384:	40010800 	.word	0x40010800
 8004388:	20000140 	.word	0x20000140
 800438c:	20000148 	.word	0x20000148
 8004390:	20000190 	.word	0x20000190
 8004394:	2000019c 	.word	0x2000019c
 8004398:	50000800 	.word	0x50000800

0800439c <runTimer>:

// ---- important timer functions  ----
void runTimer(TIM_HandleTypeDef *htim) {
 800439c:	b590      	push	{r4, r7, lr}
 800439e:	b089      	sub	sp, #36	; 0x24
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
	TIM_OC_InitTypeDef sConfig = {0};
 80043a4:	2408      	movs	r4, #8
 80043a6:	193b      	adds	r3, r7, r4
 80043a8:	0018      	movs	r0, r3
 80043aa:	2310      	movs	r3, #16
 80043ac:	001a      	movs	r2, r3
 80043ae:	2100      	movs	r1, #0
 80043b0:	f004 fa1f 	bl	80087f2 <memset>
	sConfig.OCMode = TIM_OCMODE_TIMING;
 80043b4:	193b      	adds	r3, r7, r4
 80043b6:	2200      	movs	r2, #0
 80043b8:	601a      	str	r2, [r3, #0]
	sConfig.OCPolarity = TIM_OCPOLARITY_HIGH;
 80043ba:	193b      	adds	r3, r7, r4
 80043bc:	2200      	movs	r2, #0
 80043be:	609a      	str	r2, [r3, #8]
	sConfig.OCFastMode = TIM_OCFAST_DISABLE;
 80043c0:	193b      	adds	r3, r7, r4
 80043c2:	2200      	movs	r2, #0
 80043c4:	60da      	str	r2, [r3, #12]

	// calculating pulse/OC trigger
	if (isTimerPaused == 0) {		// 1st run, hasn't been paused yet
 80043c6:	4b1e      	ldr	r3, [pc, #120]	; (8004440 <runTimer+0xa4>)
 80043c8:	781b      	ldrb	r3, [r3, #0]
 80043ca:	b2db      	uxtb	r3, r3
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d106      	bne.n	80043de <runTimer+0x42>
		sConfig.Pulse = htim->Instance->CNT;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043d6:	2308      	movs	r3, #8
 80043d8:	18fb      	adds	r3, r7, r3
 80043da:	605a      	str	r2, [r3, #4]
 80043dc:	e020      	b.n	8004420 <runTimer+0x84>
	}
	else {		// unpausing
		uint32_t temp = htim->Instance->CNT;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e4:	61fb      	str	r3, [r7, #28]

		// count needed to get from pause marker to start marker - basically how many steps it would've taken to get to next cycle
		// shifted to account for negative behavior
		uint32_t diff = ((int)(timerStartMarker-timerPauseMarker)+0x8000) % 0x8000;
 80043e6:	4b17      	ldr	r3, [pc, #92]	; (8004444 <runTimer+0xa8>)
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	4b17      	ldr	r3, [pc, #92]	; (8004448 <runTimer+0xac>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	1ad3      	subs	r3, r2, r3
 80043f0:	2280      	movs	r2, #128	; 0x80
 80043f2:	0212      	lsls	r2, r2, #8
 80043f4:	4694      	mov	ip, r2
 80043f6:	4463      	add	r3, ip
 80043f8:	4a14      	ldr	r2, [pc, #80]	; (800444c <runTimer+0xb0>)
 80043fa:	4013      	ands	r3, r2
 80043fc:	d503      	bpl.n	8004406 <runTimer+0x6a>
 80043fe:	3b01      	subs	r3, #1
 8004400:	4a13      	ldr	r2, [pc, #76]	; (8004450 <runTimer+0xb4>)
 8004402:	4313      	orrs	r3, r2
 8004404:	3301      	adds	r3, #1
 8004406:	61bb      	str	r3, [r7, #24]
		sConfig.Pulse = (temp+diff) % 0x8000;
 8004408:	69fa      	ldr	r2, [r7, #28]
 800440a:	69bb      	ldr	r3, [r7, #24]
 800440c:	18d3      	adds	r3, r2, r3
 800440e:	045b      	lsls	r3, r3, #17
 8004410:	0c5a      	lsrs	r2, r3, #17
 8004412:	2108      	movs	r1, #8
 8004414:	187b      	adds	r3, r7, r1
 8004416:	605a      	str	r2, [r3, #4]
		timerStartMarker = sConfig.Pulse;		// set new start marker
 8004418:	187b      	adds	r3, r7, r1
 800441a:	685a      	ldr	r2, [r3, #4]
 800441c:	4b09      	ldr	r3, [pc, #36]	; (8004444 <runTimer+0xa8>)
 800441e:	601a      	str	r2, [r3, #0]
	}

	HAL_TIM_OC_ConfigChannel(htim, &sConfig, TIM_CHANNEL_1);
 8004420:	2308      	movs	r3, #8
 8004422:	18f9      	adds	r1, r7, r3
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2200      	movs	r2, #0
 8004428:	0018      	movs	r0, r3
 800442a:	f003 fd49 	bl	8007ec0 <HAL_TIM_OC_ConfigChannel>
	HAL_TIM_OC_Start_IT(htim, TIM_CHANNEL_1);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2100      	movs	r1, #0
 8004432:	0018      	movs	r0, r3
 8004434:	f003 fb84 	bl	8007b40 <HAL_TIM_OC_Start_IT>
}
 8004438:	46c0      	nop			; (mov r8, r8)
 800443a:	46bd      	mov	sp, r7
 800443c:	b009      	add	sp, #36	; 0x24
 800443e:	bd90      	pop	{r4, r7, pc}
 8004440:	20000198 	.word	0x20000198
 8004444:	2000011c 	.word	0x2000011c
 8004448:	20000120 	.word	0x20000120
 800444c:	80007fff 	.word	0x80007fff
 8004450:	ffff8000 	.word	0xffff8000

08004454 <pauseTimer>:

// flags should be set in nav
void pauseTimer(TIM_HandleTypeDef *htim) {
 8004454:	b580      	push	{r7, lr}
 8004456:	b082      	sub	sp, #8
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
	HAL_TIM_OC_Stop_IT(htim, TIM_CHANNEL_1);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2100      	movs	r1, #0
 8004460:	0018      	movs	r0, r3
 8004462:	f003 fbbf 	bl	8007be4 <HAL_TIM_OC_Stop_IT>
	timerPauseMarker = htim->Instance->CNT;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800446c:	4b02      	ldr	r3, [pc, #8]	; (8004478 <pauseTimer+0x24>)
 800446e:	601a      	str	r2, [r3, #0]
}
 8004470:	46c0      	nop			; (mov r8, r8)
 8004472:	46bd      	mov	sp, r7
 8004474:	b002      	add	sp, #8
 8004476:	bd80      	pop	{r7, pc}
 8004478:	20000120 	.word	0x20000120

0800447c <stopTimer>:

void stopTimer(TIM_HandleTypeDef *htim) {
 800447c:	b580      	push	{r7, lr}
 800447e:	b082      	sub	sp, #8
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
	HAL_TIM_OC_Stop_IT(htim, TIM_CHANNEL_1);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2100      	movs	r1, #0
 8004488:	0018      	movs	r0, r3
 800448a:	f003 fbab 	bl	8007be4 <HAL_TIM_OC_Stop_IT>
	timerStartMarker = 0;
 800448e:	4b05      	ldr	r3, [pc, #20]	; (80044a4 <stopTimer+0x28>)
 8004490:	2200      	movs	r2, #0
 8004492:	601a      	str	r2, [r3, #0]
	timerPauseMarker = 0;
 8004494:	4b04      	ldr	r3, [pc, #16]	; (80044a8 <stopTimer+0x2c>)
 8004496:	2200      	movs	r2, #0
 8004498:	601a      	str	r2, [r3, #0]
}
 800449a:	46c0      	nop			; (mov r8, r8)
 800449c:	46bd      	mov	sp, r7
 800449e:	b002      	add	sp, #8
 80044a0:	bd80      	pop	{r7, pc}
 80044a2:	46c0      	nop			; (mov r8, r8)
 80044a4:	2000011c 	.word	0x2000011c
 80044a8:	20000120 	.word	0x20000120

080044ac <runStopwatch>:

// set stopwatch. using lptimer. maybe better with regular timer?
// can operate in stop mode if using lptimer
// modify to update screen/set flags when necessary
// uses TIM21 clocked by LSE (or at least should)
void runStopwatch(TIM_HandleTypeDef *htim) {
 80044ac:	b590      	push	{r4, r7, lr}
 80044ae:	b089      	sub	sp, #36	; 0x24
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
//	htim->Instance->CNT = tempStopwatchCounter;
//	HAL_TIM_Base_Start_IT(htim);
	TIM_OC_InitTypeDef sConfig = {0};
 80044b4:	2408      	movs	r4, #8
 80044b6:	193b      	adds	r3, r7, r4
 80044b8:	0018      	movs	r0, r3
 80044ba:	2310      	movs	r3, #16
 80044bc:	001a      	movs	r2, r3
 80044be:	2100      	movs	r1, #0
 80044c0:	f004 f997 	bl	80087f2 <memset>
	sConfig.OCMode = TIM_OCMODE_TIMING;
 80044c4:	193b      	adds	r3, r7, r4
 80044c6:	2200      	movs	r2, #0
 80044c8:	601a      	str	r2, [r3, #0]
	sConfig.OCPolarity = TIM_OCPOLARITY_HIGH;
 80044ca:	193b      	adds	r3, r7, r4
 80044cc:	2200      	movs	r2, #0
 80044ce:	609a      	str	r2, [r3, #8]
	sConfig.OCFastMode = TIM_OCFAST_DISABLE;
 80044d0:	193b      	adds	r3, r7, r4
 80044d2:	2200      	movs	r2, #0
 80044d4:	60da      	str	r2, [r3, #12]

	// calculating pulse/OC trigger
	if (isStopwatchPaused == 0) {		// 1st run, hasn't been paused yet
 80044d6:	4b20      	ldr	r3, [pc, #128]	; (8004558 <runStopwatch+0xac>)
 80044d8:	781b      	ldrb	r3, [r3, #0]
 80044da:	b2db      	uxtb	r3, r3
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d109      	bne.n	80044f4 <runStopwatch+0x48>
		stopwatchCounter = 0;
 80044e0:	4b1e      	ldr	r3, [pc, #120]	; (800455c <runStopwatch+0xb0>)
 80044e2:	2200      	movs	r2, #0
 80044e4:	601a      	str	r2, [r3, #0]
		sConfig.Pulse = htim->Instance->CNT;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80044ec:	2308      	movs	r3, #8
 80044ee:	18fb      	adds	r3, r7, r3
 80044f0:	605a      	str	r2, [r3, #4]
 80044f2:	e020      	b.n	8004536 <runStopwatch+0x8a>
	}
	else {		// unpausing
		uint32_t temp = htim->Instance->CNT;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044fa:	61fb      	str	r3, [r7, #28]

		// count needed to get from pause marker to start marker - basically how many steps it would've taken to get to next cycle
		// shifted to account for negative behavior
		uint32_t diff = ((int)(stopwatchStartMarker-stopwatchPauseMarker)+0x8000) % 0x8000;
 80044fc:	4b18      	ldr	r3, [pc, #96]	; (8004560 <runStopwatch+0xb4>)
 80044fe:	681a      	ldr	r2, [r3, #0]
 8004500:	4b18      	ldr	r3, [pc, #96]	; (8004564 <runStopwatch+0xb8>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	1ad3      	subs	r3, r2, r3
 8004506:	2280      	movs	r2, #128	; 0x80
 8004508:	0212      	lsls	r2, r2, #8
 800450a:	4694      	mov	ip, r2
 800450c:	4463      	add	r3, ip
 800450e:	4a16      	ldr	r2, [pc, #88]	; (8004568 <runStopwatch+0xbc>)
 8004510:	4013      	ands	r3, r2
 8004512:	d503      	bpl.n	800451c <runStopwatch+0x70>
 8004514:	3b01      	subs	r3, #1
 8004516:	4a15      	ldr	r2, [pc, #84]	; (800456c <runStopwatch+0xc0>)
 8004518:	4313      	orrs	r3, r2
 800451a:	3301      	adds	r3, #1
 800451c:	61bb      	str	r3, [r7, #24]
		sConfig.Pulse = (temp+diff) % 0x8000;
 800451e:	69fa      	ldr	r2, [r7, #28]
 8004520:	69bb      	ldr	r3, [r7, #24]
 8004522:	18d3      	adds	r3, r2, r3
 8004524:	045b      	lsls	r3, r3, #17
 8004526:	0c5a      	lsrs	r2, r3, #17
 8004528:	2108      	movs	r1, #8
 800452a:	187b      	adds	r3, r7, r1
 800452c:	605a      	str	r2, [r3, #4]
		stopwatchStartMarker = sConfig.Pulse;		// set new start marker
 800452e:	187b      	adds	r3, r7, r1
 8004530:	685a      	ldr	r2, [r3, #4]
 8004532:	4b0b      	ldr	r3, [pc, #44]	; (8004560 <runStopwatch+0xb4>)
 8004534:	601a      	str	r2, [r3, #0]
	}

	HAL_TIM_OC_ConfigChannel(htim, &sConfig, TIM_CHANNEL_2);
 8004536:	2308      	movs	r3, #8
 8004538:	18f9      	adds	r1, r7, r3
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2204      	movs	r2, #4
 800453e:	0018      	movs	r0, r3
 8004540:	f003 fcbe 	bl	8007ec0 <HAL_TIM_OC_ConfigChannel>
	HAL_TIM_OC_Start_IT(htim, TIM_CHANNEL_2);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2104      	movs	r1, #4
 8004548:	0018      	movs	r0, r3
 800454a:	f003 faf9 	bl	8007b40 <HAL_TIM_OC_Start_IT>
}
 800454e:	46c0      	nop			; (mov r8, r8)
 8004550:	46bd      	mov	sp, r7
 8004552:	b009      	add	sp, #36	; 0x24
 8004554:	bd90      	pop	{r4, r7, pc}
 8004556:	46c0      	nop			; (mov r8, r8)
 8004558:	20000191 	.word	0x20000191
 800455c:	2000019c 	.word	0x2000019c
 8004560:	20000124 	.word	0x20000124
 8004564:	20000128 	.word	0x20000128
 8004568:	80007fff 	.word	0x80007fff
 800456c:	ffff8000 	.word	0xffff8000

08004570 <pauseStopwatch>:

// stop the timer or pause it or whatever.
// counter value might reset and screw up timekeeping? should save?
void pauseStopwatch(TIM_HandleTypeDef *htim) {
 8004570:	b580      	push	{r7, lr}
 8004572:	b082      	sub	sp, #8
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
	HAL_TIM_OC_Stop_IT(htim, TIM_CHANNEL_2);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2104      	movs	r1, #4
 800457c:	0018      	movs	r0, r3
 800457e:	f003 fb31 	bl	8007be4 <HAL_TIM_OC_Stop_IT>
	stopwatchPauseMarker = htim->Instance->CNT;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004588:	4b02      	ldr	r3, [pc, #8]	; (8004594 <pauseStopwatch+0x24>)
 800458a:	601a      	str	r2, [r3, #0]
}
 800458c:	46c0      	nop			; (mov r8, r8)
 800458e:	46bd      	mov	sp, r7
 8004590:	b002      	add	sp, #8
 8004592:	bd80      	pop	{r7, pc}
 8004594:	20000128 	.word	0x20000128

08004598 <clearStopwatch>:

void clearStopwatch(TIM_HandleTypeDef *htim) {
 8004598:	b580      	push	{r7, lr}
 800459a:	b082      	sub	sp, #8
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
	HAL_TIM_OC_Stop_IT(htim, TIM_CHANNEL_2);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2104      	movs	r1, #4
 80045a4:	0018      	movs	r0, r3
 80045a6:	f003 fb1d 	bl	8007be4 <HAL_TIM_OC_Stop_IT>
	stopwatchPauseMarker = htim->Instance->CNT;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80045b0:	4b06      	ldr	r3, [pc, #24]	; (80045cc <clearStopwatch+0x34>)
 80045b2:	601a      	str	r2, [r3, #0]
	stopwatchStartMarker = htim->Instance->CNT;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80045ba:	4b05      	ldr	r3, [pc, #20]	; (80045d0 <clearStopwatch+0x38>)
 80045bc:	601a      	str	r2, [r3, #0]

	stopwatchCounter = 0;
 80045be:	4b05      	ldr	r3, [pc, #20]	; (80045d4 <clearStopwatch+0x3c>)
 80045c0:	2200      	movs	r2, #0
 80045c2:	601a      	str	r2, [r3, #0]
}
 80045c4:	46c0      	nop			; (mov r8, r8)
 80045c6:	46bd      	mov	sp, r7
 80045c8:	b002      	add	sp, #8
 80045ca:	bd80      	pop	{r7, pc}
 80045cc:	20000128 	.word	0x20000128
 80045d0:	20000124 	.word	0x20000124
 80045d4:	2000019c 	.word	0x2000019c

080045d8 <runTimerStopwatchBase>:

void runTimerStopwatchBase(TIM_HandleTypeDef *htim) {HAL_TIM_Base_Start_IT(htim);}
 80045d8:	b580      	push	{r7, lr}
 80045da:	b082      	sub	sp, #8
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	0018      	movs	r0, r3
 80045e4:	f003 fa34 	bl	8007a50 <HAL_TIM_Base_Start_IT>
 80045e8:	46c0      	nop			; (mov r8, r8)
 80045ea:	46bd      	mov	sp, r7
 80045ec:	b002      	add	sp, #8
 80045ee:	bd80      	pop	{r7, pc}

080045f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80045f0:	480d      	ldr	r0, [pc, #52]	; (8004628 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80045f2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 80045f4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80045f6:	e003      	b.n	8004600 <LoopCopyDataInit>

080045f8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80045f8:	4b0c      	ldr	r3, [pc, #48]	; (800462c <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 80045fa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80045fc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80045fe:	3104      	adds	r1, #4

08004600 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8004600:	480b      	ldr	r0, [pc, #44]	; (8004630 <LoopForever+0xa>)
  ldr  r3, =_edata
 8004602:	4b0c      	ldr	r3, [pc, #48]	; (8004634 <LoopForever+0xe>)
  adds  r2, r0, r1
 8004604:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004606:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004608:	d3f6      	bcc.n	80045f8 <CopyDataInit>
  ldr  r2, =_sbss
 800460a:	4a0b      	ldr	r2, [pc, #44]	; (8004638 <LoopForever+0x12>)
  b  LoopFillZerobss
 800460c:	e002      	b.n	8004614 <LoopFillZerobss>

0800460e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 800460e:	2300      	movs	r3, #0
  str  r3, [r2]
 8004610:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004612:	3204      	adds	r2, #4

08004614 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8004614:	4b09      	ldr	r3, [pc, #36]	; (800463c <LoopForever+0x16>)
  cmp  r2, r3
 8004616:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004618:	d3f9      	bcc.n	800460e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800461a:	f7ff fdb3 	bl	8004184 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800461e:	f004 f8bb 	bl	8008798 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004622:	f7fd fb83 	bl	8001d2c <main>

08004626 <LoopForever>:

LoopForever:
    b LoopForever
 8004626:	e7fe      	b.n	8004626 <LoopForever>
   ldr   r0, =_estack
 8004628:	20005000 	.word	0x20005000
  ldr  r3, =_sidata
 800462c:	08009840 	.word	0x08009840
  ldr  r0, =_sdata
 8004630:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004634:	200000cc 	.word	0x200000cc
  ldr  r2, =_sbss
 8004638:	200000cc 	.word	0x200000cc
  ldr  r3, = _ebss
 800463c:	200003ac 	.word	0x200003ac

08004640 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004640:	e7fe      	b.n	8004640 <ADC1_COMP_IRQHandler>
	...

08004644 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b082      	sub	sp, #8
 8004648:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800464a:	1dfb      	adds	r3, r7, #7
 800464c:	2200      	movs	r2, #0
 800464e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8004650:	4b0b      	ldr	r3, [pc, #44]	; (8004680 <HAL_Init+0x3c>)
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	4b0a      	ldr	r3, [pc, #40]	; (8004680 <HAL_Init+0x3c>)
 8004656:	2140      	movs	r1, #64	; 0x40
 8004658:	430a      	orrs	r2, r1
 800465a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800465c:	2000      	movs	r0, #0
 800465e:	f000 f811 	bl	8004684 <HAL_InitTick>
 8004662:	1e03      	subs	r3, r0, #0
 8004664:	d003      	beq.n	800466e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8004666:	1dfb      	adds	r3, r7, #7
 8004668:	2201      	movs	r2, #1
 800466a:	701a      	strb	r2, [r3, #0]
 800466c:	e001      	b.n	8004672 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800466e:	f7ff fb21 	bl	8003cb4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004672:	1dfb      	adds	r3, r7, #7
 8004674:	781b      	ldrb	r3, [r3, #0]
}
 8004676:	0018      	movs	r0, r3
 8004678:	46bd      	mov	sp, r7
 800467a:	b002      	add	sp, #8
 800467c:	bd80      	pop	{r7, pc}
 800467e:	46c0      	nop			; (mov r8, r8)
 8004680:	40022000 	.word	0x40022000

08004684 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b084      	sub	sp, #16
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800468c:	230f      	movs	r3, #15
 800468e:	18fb      	adds	r3, r7, r3
 8004690:	2200      	movs	r2, #0
 8004692:	701a      	strb	r2, [r3, #0]

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8004694:	4b0f      	ldr	r3, [pc, #60]	; (80046d4 <HAL_InitTick+0x50>)
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	23fa      	movs	r3, #250	; 0xfa
 800469a:	0099      	lsls	r1, r3, #2
 800469c:	0010      	movs	r0, r2
 800469e:	f7fb fd3b 	bl	8000118 <__udivsi3>
 80046a2:	0003      	movs	r3, r0
 80046a4:	0018      	movs	r0, r3
 80046a6:	f000 fb8a 	bl	8004dbe <HAL_SYSTICK_Config>
 80046aa:	1e03      	subs	r3, r0, #0
 80046ac:	d004      	beq.n	80046b8 <HAL_InitTick+0x34>
  {
    status = HAL_ERROR;
 80046ae:	230f      	movs	r3, #15
 80046b0:	18fb      	adds	r3, r7, r3
 80046b2:	2201      	movs	r2, #1
 80046b4:	701a      	strb	r2, [r3, #0]
 80046b6:	e006      	b.n	80046c6 <HAL_InitTick+0x42>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 80046b8:	6879      	ldr	r1, [r7, #4]
 80046ba:	2301      	movs	r3, #1
 80046bc:	425b      	negs	r3, r3
 80046be:	2200      	movs	r2, #0
 80046c0:	0018      	movs	r0, r3
 80046c2:	f000 fb47 	bl	8004d54 <HAL_NVIC_SetPriority>
  }

  /* Return function status */
  return status;
 80046c6:	230f      	movs	r3, #15
 80046c8:	18fb      	adds	r3, r7, r3
 80046ca:	781b      	ldrb	r3, [r3, #0]
}
 80046cc:	0018      	movs	r0, r3
 80046ce:	46bd      	mov	sp, r7
 80046d0:	b004      	add	sp, #16
 80046d2:	bd80      	pop	{r7, pc}
 80046d4:	20000064 	.word	0x20000064

080046d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	af00      	add	r7, sp, #0
  uwTick++;
 80046dc:	4b03      	ldr	r3, [pc, #12]	; (80046ec <HAL_IncTick+0x14>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	1c5a      	adds	r2, r3, #1
 80046e2:	4b02      	ldr	r3, [pc, #8]	; (80046ec <HAL_IncTick+0x14>)
 80046e4:	601a      	str	r2, [r3, #0]
}
 80046e6:	46c0      	nop			; (mov r8, r8)
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}
 80046ec:	200003a4 	.word	0x200003a4

080046f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	af00      	add	r7, sp, #0
  return uwTick;
 80046f4:	4b02      	ldr	r3, [pc, #8]	; (8004700 <HAL_GetTick+0x10>)
 80046f6:	681b      	ldr	r3, [r3, #0]
}
 80046f8:	0018      	movs	r0, r3
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}
 80046fe:	46c0      	nop			; (mov r8, r8)
 8004700:	200003a4 	.word	0x200003a4

08004704 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b084      	sub	sp, #16
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800470c:	f7ff fff0 	bl	80046f0 <HAL_GetTick>
 8004710:	0003      	movs	r3, r0
 8004712:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	3301      	adds	r3, #1
 800471c:	d002      	beq.n	8004724 <HAL_Delay+0x20>
  {
    wait++;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	3301      	adds	r3, #1
 8004722:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004724:	46c0      	nop			; (mov r8, r8)
 8004726:	f7ff ffe3 	bl	80046f0 <HAL_GetTick>
 800472a:	0002      	movs	r2, r0
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	1ad3      	subs	r3, r2, r3
 8004730:	68fa      	ldr	r2, [r7, #12]
 8004732:	429a      	cmp	r2, r3
 8004734:	d8f7      	bhi.n	8004726 <HAL_Delay+0x22>
  {
  }
}
 8004736:	46c0      	nop			; (mov r8, r8)
 8004738:	46bd      	mov	sp, r7
 800473a:	b004      	add	sp, #16
 800473c:	bd80      	pop	{r7, pc}
	...

08004740 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b082      	sub	sp, #8
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d101      	bne.n	8004752 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	e159      	b.n	8004a06 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004756:	2b00      	cmp	r3, #0
 8004758:	d10a      	bne.n	8004770 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2200      	movs	r2, #0
 800475e:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2250      	movs	r2, #80	; 0x50
 8004764:	2100      	movs	r1, #0
 8004766:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	0018      	movs	r0, r3
 800476c:	f7ff fab6 	bl	8003cdc <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004774:	2210      	movs	r2, #16
 8004776:	4013      	ands	r3, r2
 8004778:	2b10      	cmp	r3, #16
 800477a:	d005      	beq.n	8004788 <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	689b      	ldr	r3, [r3, #8]
 8004782:	2204      	movs	r2, #4
 8004784:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8004786:	d00b      	beq.n	80047a0 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800478c:	2210      	movs	r2, #16
 800478e:	431a      	orrs	r2, r3
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2250      	movs	r2, #80	; 0x50
 8004798:	2100      	movs	r1, #0
 800479a:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800479c:	2301      	movs	r3, #1
 800479e:	e132      	b.n	8004a06 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047a4:	4a9a      	ldr	r2, [pc, #616]	; (8004a10 <HAL_ADC_Init+0x2d0>)
 80047a6:	4013      	ands	r3, r2
 80047a8:	2202      	movs	r2, #2
 80047aa:	431a      	orrs	r2, r3
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	2203      	movs	r2, #3
 80047b8:	4013      	ands	r3, r2
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	d108      	bne.n	80047d0 <HAL_ADC_Init+0x90>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	2201      	movs	r2, #1
 80047c6:	4013      	ands	r3, r2
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	d101      	bne.n	80047d0 <HAL_ADC_Init+0x90>
 80047cc:	2301      	movs	r3, #1
 80047ce:	e000      	b.n	80047d2 <HAL_ADC_Init+0x92>
 80047d0:	2300      	movs	r3, #0
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d149      	bne.n	800486a <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	685a      	ldr	r2, [r3, #4]
 80047da:	23c0      	movs	r3, #192	; 0xc0
 80047dc:	061b      	lsls	r3, r3, #24
 80047de:	429a      	cmp	r2, r3
 80047e0:	d00b      	beq.n	80047fa <HAL_ADC_Init+0xba>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	685a      	ldr	r2, [r3, #4]
 80047e6:	2380      	movs	r3, #128	; 0x80
 80047e8:	05db      	lsls	r3, r3, #23
 80047ea:	429a      	cmp	r2, r3
 80047ec:	d005      	beq.n	80047fa <HAL_ADC_Init+0xba>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	685a      	ldr	r2, [r3, #4]
 80047f2:	2380      	movs	r3, #128	; 0x80
 80047f4:	061b      	lsls	r3, r3, #24
 80047f6:	429a      	cmp	r2, r3
 80047f8:	d111      	bne.n	800481e <HAL_ADC_Init+0xde>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	691a      	ldr	r2, [r3, #16]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	0092      	lsls	r2, r2, #2
 8004806:	0892      	lsrs	r2, r2, #2
 8004808:	611a      	str	r2, [r3, #16]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	6919      	ldr	r1, [r3, #16]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	685a      	ldr	r2, [r3, #4]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	430a      	orrs	r2, r1
 800481a:	611a      	str	r2, [r3, #16]
 800481c:	e014      	b.n	8004848 <HAL_ADC_Init+0x108>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	691a      	ldr	r2, [r3, #16]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	0092      	lsls	r2, r2, #2
 800482a:	0892      	lsrs	r2, r2, #2
 800482c:	611a      	str	r2, [r3, #16]
 800482e:	4b79      	ldr	r3, [pc, #484]	; (8004a14 <HAL_ADC_Init+0x2d4>)
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	4b78      	ldr	r3, [pc, #480]	; (8004a14 <HAL_ADC_Init+0x2d4>)
 8004834:	4978      	ldr	r1, [pc, #480]	; (8004a18 <HAL_ADC_Init+0x2d8>)
 8004836:	400a      	ands	r2, r1
 8004838:	601a      	str	r2, [r3, #0]
 800483a:	4b76      	ldr	r3, [pc, #472]	; (8004a14 <HAL_ADC_Init+0x2d4>)
 800483c:	6819      	ldr	r1, [r3, #0]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	685a      	ldr	r2, [r3, #4]
 8004842:	4b74      	ldr	r3, [pc, #464]	; (8004a14 <HAL_ADC_Init+0x2d4>)
 8004844:	430a      	orrs	r2, r1
 8004846:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	68da      	ldr	r2, [r3, #12]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	2118      	movs	r1, #24
 8004854:	438a      	bics	r2, r1
 8004856:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	68d9      	ldr	r1, [r3, #12]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	689a      	ldr	r2, [r3, #8]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	430a      	orrs	r2, r1
 8004868:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 800486a:	4b6a      	ldr	r3, [pc, #424]	; (8004a14 <HAL_ADC_Init+0x2d4>)
 800486c:	681a      	ldr	r2, [r3, #0]
 800486e:	4b69      	ldr	r3, [pc, #420]	; (8004a14 <HAL_ADC_Init+0x2d4>)
 8004870:	496a      	ldr	r1, [pc, #424]	; (8004a1c <HAL_ADC_Init+0x2dc>)
 8004872:	400a      	ands	r2, r1
 8004874:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 8004876:	4b67      	ldr	r3, [pc, #412]	; (8004a14 <HAL_ADC_Init+0x2d4>)
 8004878:	6819      	ldr	r1, [r3, #0]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800487e:	065a      	lsls	r2, r3, #25
 8004880:	4b64      	ldr	r3, [pc, #400]	; (8004a14 <HAL_ADC_Init+0x2d4>)
 8004882:	430a      	orrs	r2, r1
 8004884:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	689a      	ldr	r2, [r3, #8]
 800488c:	2380      	movs	r3, #128	; 0x80
 800488e:	055b      	lsls	r3, r3, #21
 8004890:	4013      	ands	r3, r2
 8004892:	d108      	bne.n	80048a6 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	689a      	ldr	r2, [r3, #8]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	2180      	movs	r1, #128	; 0x80
 80048a0:	0549      	lsls	r1, r1, #21
 80048a2:	430a      	orrs	r2, r1
 80048a4:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	68da      	ldr	r2, [r3, #12]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	495b      	ldr	r1, [pc, #364]	; (8004a20 <HAL_ADC_Init+0x2e0>)
 80048b2:	400a      	ands	r2, r1
 80048b4:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	68d9      	ldr	r1, [r3, #12]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	691b      	ldr	r3, [r3, #16]
 80048c4:	2b02      	cmp	r3, #2
 80048c6:	d101      	bne.n	80048cc <HAL_ADC_Init+0x18c>
 80048c8:	2304      	movs	r3, #4
 80048ca:	e000      	b.n	80048ce <HAL_ADC_Init+0x18e>
 80048cc:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80048ce:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2020      	movs	r0, #32
 80048d4:	5c1b      	ldrb	r3, [r3, r0]
 80048d6:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80048d8:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	202c      	movs	r0, #44	; 0x2c
 80048de:	5c1b      	ldrb	r3, [r3, r0]
 80048e0:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80048e2:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80048e8:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	699b      	ldr	r3, [r3, #24]
 80048ee:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 80048f0:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	69db      	ldr	r3, [r3, #28]
 80048f6:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80048f8:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	430a      	orrs	r2, r1
 8004900:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004906:	23c2      	movs	r3, #194	; 0xc2
 8004908:	33ff      	adds	r3, #255	; 0xff
 800490a:	429a      	cmp	r2, r3
 800490c:	d00b      	beq.n	8004926 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	68d9      	ldr	r1, [r3, #12]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800491c:	431a      	orrs	r2, r3
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	430a      	orrs	r2, r1
 8004924:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2221      	movs	r2, #33	; 0x21
 800492a:	5c9b      	ldrb	r3, [r3, r2]
 800492c:	2b01      	cmp	r3, #1
 800492e:	d11a      	bne.n	8004966 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2220      	movs	r2, #32
 8004934:	5c9b      	ldrb	r3, [r3, r2]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d109      	bne.n	800494e <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	68da      	ldr	r2, [r3, #12]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	2180      	movs	r1, #128	; 0x80
 8004946:	0249      	lsls	r1, r1, #9
 8004948:	430a      	orrs	r2, r1
 800494a:	60da      	str	r2, [r3, #12]
 800494c:	e00b      	b.n	8004966 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004952:	2220      	movs	r2, #32
 8004954:	431a      	orrs	r2, r3
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800495e:	2201      	movs	r2, #1
 8004960:	431a      	orrs	r2, r3
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800496a:	2b01      	cmp	r3, #1
 800496c:	d11f      	bne.n	80049ae <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	691a      	ldr	r2, [r3, #16]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	492a      	ldr	r1, [pc, #168]	; (8004a24 <HAL_ADC_Init+0x2e4>)
 800497a:	400a      	ands	r2, r1
 800497c:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	6919      	ldr	r1, [r3, #16]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 800498c:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 8004992:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	430a      	orrs	r2, r1
 800499a:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	691a      	ldr	r2, [r3, #16]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	2101      	movs	r1, #1
 80049a8:	430a      	orrs	r2, r1
 80049aa:	611a      	str	r2, [r3, #16]
 80049ac:	e00e      	b.n	80049cc <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	691b      	ldr	r3, [r3, #16]
 80049b4:	2201      	movs	r2, #1
 80049b6:	4013      	ands	r3, r2
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	d107      	bne.n	80049cc <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	691a      	ldr	r2, [r3, #16]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	2101      	movs	r1, #1
 80049c8:	438a      	bics	r2, r1
 80049ca:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	695a      	ldr	r2, [r3, #20]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	2107      	movs	r1, #7
 80049d8:	438a      	bics	r2, r1
 80049da:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	6959      	ldr	r1, [r3, #20]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	430a      	orrs	r2, r1
 80049ec:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2200      	movs	r2, #0
 80049f2:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049f8:	2203      	movs	r2, #3
 80049fa:	4393      	bics	r3, r2
 80049fc:	2201      	movs	r2, #1
 80049fe:	431a      	orrs	r2, r3
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8004a04:	2300      	movs	r3, #0
}
 8004a06:	0018      	movs	r0, r3
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	b002      	add	sp, #8
 8004a0c:	bd80      	pop	{r7, pc}
 8004a0e:	46c0      	nop			; (mov r8, r8)
 8004a10:	fffffefd 	.word	0xfffffefd
 8004a14:	40012708 	.word	0x40012708
 8004a18:	ffc3ffff 	.word	0xffc3ffff
 8004a1c:	fdffffff 	.word	0xfdffffff
 8004a20:	fffe0219 	.word	0xfffe0219
 8004a24:	fffffc03 	.word	0xfffffc03

08004a28 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b082      	sub	sp, #8
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
 8004a30:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2250      	movs	r2, #80	; 0x50
 8004a36:	5c9b      	ldrb	r3, [r3, r2]
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	d101      	bne.n	8004a40 <HAL_ADC_ConfigChannel+0x18>
 8004a3c:	2302      	movs	r3, #2
 8004a3e:	e085      	b.n	8004b4c <HAL_ADC_ConfigChannel+0x124>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2250      	movs	r2, #80	; 0x50
 8004a44:	2101      	movs	r1, #1
 8004a46:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	2204      	movs	r2, #4
 8004a50:	4013      	ands	r3, r2
 8004a52:	d00b      	beq.n	8004a6c <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a58:	2220      	movs	r2, #32
 8004a5a:	431a      	orrs	r2, r3
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2250      	movs	r2, #80	; 0x50
 8004a64:	2100      	movs	r1, #0
 8004a66:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	e06f      	b.n	8004b4c <HAL_ADC_ConfigChannel+0x124>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	4a38      	ldr	r2, [pc, #224]	; (8004b54 <HAL_ADC_ConfigChannel+0x12c>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d035      	beq.n	8004ae2 <HAL_ADC_ConfigChannel+0xba>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	035b      	lsls	r3, r3, #13
 8004a82:	0b5a      	lsrs	r2, r3, #13
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	430a      	orrs	r2, r1
 8004a8a:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	681a      	ldr	r2, [r3, #0]
 8004a90:	2380      	movs	r3, #128	; 0x80
 8004a92:	02db      	lsls	r3, r3, #11
 8004a94:	4013      	ands	r3, r2
 8004a96:	d009      	beq.n	8004aac <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 8004a98:	4b2f      	ldr	r3, [pc, #188]	; (8004b58 <HAL_ADC_ConfigChannel+0x130>)
 8004a9a:	681a      	ldr	r2, [r3, #0]
 8004a9c:	4b2e      	ldr	r3, [pc, #184]	; (8004b58 <HAL_ADC_ConfigChannel+0x130>)
 8004a9e:	2180      	movs	r1, #128	; 0x80
 8004aa0:	0409      	lsls	r1, r1, #16
 8004aa2:	430a      	orrs	r2, r1
 8004aa4:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8004aa6:	200a      	movs	r0, #10
 8004aa8:	f000 f85e 	bl	8004b68 <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	681a      	ldr	r2, [r3, #0]
 8004ab0:	2380      	movs	r3, #128	; 0x80
 8004ab2:	029b      	lsls	r3, r3, #10
 8004ab4:	4013      	ands	r3, r2
 8004ab6:	d006      	beq.n	8004ac6 <HAL_ADC_ConfigChannel+0x9e>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 8004ab8:	4b27      	ldr	r3, [pc, #156]	; (8004b58 <HAL_ADC_ConfigChannel+0x130>)
 8004aba:	681a      	ldr	r2, [r3, #0]
 8004abc:	4b26      	ldr	r3, [pc, #152]	; (8004b58 <HAL_ADC_ConfigChannel+0x130>)
 8004abe:	2180      	movs	r1, #128	; 0x80
 8004ac0:	03c9      	lsls	r1, r1, #15
 8004ac2:	430a      	orrs	r2, r1
 8004ac4:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	681a      	ldr	r2, [r3, #0]
 8004aca:	2380      	movs	r3, #128	; 0x80
 8004acc:	025b      	lsls	r3, r3, #9
 8004ace:	4013      	ands	r3, r2
 8004ad0:	d037      	beq.n	8004b42 <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR |= ADC_CCR_VLCDEN;   
 8004ad2:	4b21      	ldr	r3, [pc, #132]	; (8004b58 <HAL_ADC_ConfigChannel+0x130>)
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	4b20      	ldr	r3, [pc, #128]	; (8004b58 <HAL_ADC_ConfigChannel+0x130>)
 8004ad8:	2180      	movs	r1, #128	; 0x80
 8004ada:	0449      	lsls	r1, r1, #17
 8004adc:	430a      	orrs	r2, r1
 8004ade:	601a      	str	r2, [r3, #0]
 8004ae0:	e02f      	b.n	8004b42 <HAL_ADC_ConfigChannel+0x11a>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	035b      	lsls	r3, r3, #13
 8004aee:	0b5b      	lsrs	r3, r3, #13
 8004af0:	43d9      	mvns	r1, r3
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	400a      	ands	r2, r1
 8004af8:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	2380      	movs	r3, #128	; 0x80
 8004b00:	02db      	lsls	r3, r3, #11
 8004b02:	4013      	ands	r3, r2
 8004b04:	d005      	beq.n	8004b12 <HAL_ADC_ConfigChannel+0xea>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 8004b06:	4b14      	ldr	r3, [pc, #80]	; (8004b58 <HAL_ADC_ConfigChannel+0x130>)
 8004b08:	681a      	ldr	r2, [r3, #0]
 8004b0a:	4b13      	ldr	r3, [pc, #76]	; (8004b58 <HAL_ADC_ConfigChannel+0x130>)
 8004b0c:	4913      	ldr	r1, [pc, #76]	; (8004b5c <HAL_ADC_ConfigChannel+0x134>)
 8004b0e:	400a      	ands	r2, r1
 8004b10:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	681a      	ldr	r2, [r3, #0]
 8004b16:	2380      	movs	r3, #128	; 0x80
 8004b18:	029b      	lsls	r3, r3, #10
 8004b1a:	4013      	ands	r3, r2
 8004b1c:	d005      	beq.n	8004b2a <HAL_ADC_ConfigChannel+0x102>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8004b1e:	4b0e      	ldr	r3, [pc, #56]	; (8004b58 <HAL_ADC_ConfigChannel+0x130>)
 8004b20:	681a      	ldr	r2, [r3, #0]
 8004b22:	4b0d      	ldr	r3, [pc, #52]	; (8004b58 <HAL_ADC_ConfigChannel+0x130>)
 8004b24:	490e      	ldr	r1, [pc, #56]	; (8004b60 <HAL_ADC_ConfigChannel+0x138>)
 8004b26:	400a      	ands	r2, r1
 8004b28:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	681a      	ldr	r2, [r3, #0]
 8004b2e:	2380      	movs	r3, #128	; 0x80
 8004b30:	025b      	lsls	r3, r3, #9
 8004b32:	4013      	ands	r3, r2
 8004b34:	d005      	beq.n	8004b42 <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR &= ~ADC_CCR_VLCDEN;   
 8004b36:	4b08      	ldr	r3, [pc, #32]	; (8004b58 <HAL_ADC_ConfigChannel+0x130>)
 8004b38:	681a      	ldr	r2, [r3, #0]
 8004b3a:	4b07      	ldr	r3, [pc, #28]	; (8004b58 <HAL_ADC_ConfigChannel+0x130>)
 8004b3c:	4909      	ldr	r1, [pc, #36]	; (8004b64 <HAL_ADC_ConfigChannel+0x13c>)
 8004b3e:	400a      	ands	r2, r1
 8004b40:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2250      	movs	r2, #80	; 0x50
 8004b46:	2100      	movs	r1, #0
 8004b48:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 8004b4a:	2300      	movs	r3, #0
}
 8004b4c:	0018      	movs	r0, r3
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	b002      	add	sp, #8
 8004b52:	bd80      	pop	{r7, pc}
 8004b54:	00001001 	.word	0x00001001
 8004b58:	40012708 	.word	0x40012708
 8004b5c:	ff7fffff 	.word	0xff7fffff
 8004b60:	ffbfffff 	.word	0xffbfffff
 8004b64:	feffffff 	.word	0xfeffffff

08004b68 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b084      	sub	sp, #16
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8004b70:	4b0a      	ldr	r3, [pc, #40]	; (8004b9c <ADC_DelayMicroSecond+0x34>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	490a      	ldr	r1, [pc, #40]	; (8004ba0 <ADC_DelayMicroSecond+0x38>)
 8004b76:	0018      	movs	r0, r3
 8004b78:	f7fb face 	bl	8000118 <__udivsi3>
 8004b7c:	0003      	movs	r3, r0
 8004b7e:	001a      	movs	r2, r3
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	4353      	muls	r3, r2
 8004b84:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 8004b86:	e002      	b.n	8004b8e <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	3b01      	subs	r3, #1
 8004b8c:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d1f9      	bne.n	8004b88 <ADC_DelayMicroSecond+0x20>
  } 
}
 8004b94:	46c0      	nop			; (mov r8, r8)
 8004b96:	46bd      	mov	sp, r7
 8004b98:	b004      	add	sp, #16
 8004b9a:	bd80      	pop	{r7, pc}
 8004b9c:	20000064 	.word	0x20000064
 8004ba0:	000f4240 	.word	0x000f4240

08004ba4 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b082      	sub	sp, #8
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	0002      	movs	r2, r0
 8004bac:	1dfb      	adds	r3, r7, #7
 8004bae:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8004bb0:	1dfb      	adds	r3, r7, #7
 8004bb2:	781b      	ldrb	r3, [r3, #0]
 8004bb4:	001a      	movs	r2, r3
 8004bb6:	231f      	movs	r3, #31
 8004bb8:	401a      	ands	r2, r3
 8004bba:	4b04      	ldr	r3, [pc, #16]	; (8004bcc <NVIC_EnableIRQ+0x28>)
 8004bbc:	2101      	movs	r1, #1
 8004bbe:	4091      	lsls	r1, r2
 8004bc0:	000a      	movs	r2, r1
 8004bc2:	601a      	str	r2, [r3, #0]
}
 8004bc4:	46c0      	nop			; (mov r8, r8)
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	b002      	add	sp, #8
 8004bca:	bd80      	pop	{r7, pc}
 8004bcc:	e000e100 	.word	0xe000e100

08004bd0 <NVIC_DisableIRQ>:
  \brief   Disable External Interrupt
  \details Disables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b082      	sub	sp, #8
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	0002      	movs	r2, r0
 8004bd8:	1dfb      	adds	r3, r7, #7
 8004bda:	701a      	strb	r2, [r3, #0]
  NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8004bdc:	1dfb      	adds	r3, r7, #7
 8004bde:	781b      	ldrb	r3, [r3, #0]
 8004be0:	001a      	movs	r2, r3
 8004be2:	231f      	movs	r3, #31
 8004be4:	4013      	ands	r3, r2
 8004be6:	4905      	ldr	r1, [pc, #20]	; (8004bfc <NVIC_DisableIRQ+0x2c>)
 8004be8:	2201      	movs	r2, #1
 8004bea:	409a      	lsls	r2, r3
 8004bec:	0013      	movs	r3, r2
 8004bee:	2280      	movs	r2, #128	; 0x80
 8004bf0:	508b      	str	r3, [r1, r2]
}
 8004bf2:	46c0      	nop			; (mov r8, r8)
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	b002      	add	sp, #8
 8004bf8:	bd80      	pop	{r7, pc}
 8004bfa:	46c0      	nop			; (mov r8, r8)
 8004bfc:	e000e100 	.word	0xe000e100

08004c00 <NVIC_ClearPendingIRQ>:
  \brief   Clear Pending Interrupt
  \details Clears the pending bit of an external interrupt.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b082      	sub	sp, #8
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	0002      	movs	r2, r0
 8004c08:	1dfb      	adds	r3, r7, #7
 8004c0a:	701a      	strb	r2, [r3, #0]
  NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8004c0c:	1dfb      	adds	r3, r7, #7
 8004c0e:	781b      	ldrb	r3, [r3, #0]
 8004c10:	001a      	movs	r2, r3
 8004c12:	231f      	movs	r3, #31
 8004c14:	4013      	ands	r3, r2
 8004c16:	4905      	ldr	r1, [pc, #20]	; (8004c2c <NVIC_ClearPendingIRQ+0x2c>)
 8004c18:	2201      	movs	r2, #1
 8004c1a:	409a      	lsls	r2, r3
 8004c1c:	23c0      	movs	r3, #192	; 0xc0
 8004c1e:	005b      	lsls	r3, r3, #1
 8004c20:	50ca      	str	r2, [r1, r3]
}
 8004c22:	46c0      	nop			; (mov r8, r8)
 8004c24:	46bd      	mov	sp, r7
 8004c26:	b002      	add	sp, #8
 8004c28:	bd80      	pop	{r7, pc}
 8004c2a:	46c0      	nop			; (mov r8, r8)
 8004c2c:	e000e100 	.word	0xe000e100

08004c30 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004c30:	b590      	push	{r4, r7, lr}
 8004c32:	b083      	sub	sp, #12
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	0002      	movs	r2, r0
 8004c38:	6039      	str	r1, [r7, #0]
 8004c3a:	1dfb      	adds	r3, r7, #7
 8004c3c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 8004c3e:	1dfb      	adds	r3, r7, #7
 8004c40:	781b      	ldrb	r3, [r3, #0]
 8004c42:	2b7f      	cmp	r3, #127	; 0x7f
 8004c44:	d932      	bls.n	8004cac <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004c46:	4a2f      	ldr	r2, [pc, #188]	; (8004d04 <NVIC_SetPriority+0xd4>)
 8004c48:	1dfb      	adds	r3, r7, #7
 8004c4a:	781b      	ldrb	r3, [r3, #0]
 8004c4c:	0019      	movs	r1, r3
 8004c4e:	230f      	movs	r3, #15
 8004c50:	400b      	ands	r3, r1
 8004c52:	3b08      	subs	r3, #8
 8004c54:	089b      	lsrs	r3, r3, #2
 8004c56:	3306      	adds	r3, #6
 8004c58:	009b      	lsls	r3, r3, #2
 8004c5a:	18d3      	adds	r3, r2, r3
 8004c5c:	3304      	adds	r3, #4
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	1dfa      	adds	r2, r7, #7
 8004c62:	7812      	ldrb	r2, [r2, #0]
 8004c64:	0011      	movs	r1, r2
 8004c66:	2203      	movs	r2, #3
 8004c68:	400a      	ands	r2, r1
 8004c6a:	00d2      	lsls	r2, r2, #3
 8004c6c:	21ff      	movs	r1, #255	; 0xff
 8004c6e:	4091      	lsls	r1, r2
 8004c70:	000a      	movs	r2, r1
 8004c72:	43d2      	mvns	r2, r2
 8004c74:	401a      	ands	r2, r3
 8004c76:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	019b      	lsls	r3, r3, #6
 8004c7c:	22ff      	movs	r2, #255	; 0xff
 8004c7e:	401a      	ands	r2, r3
 8004c80:	1dfb      	adds	r3, r7, #7
 8004c82:	781b      	ldrb	r3, [r3, #0]
 8004c84:	0018      	movs	r0, r3
 8004c86:	2303      	movs	r3, #3
 8004c88:	4003      	ands	r3, r0
 8004c8a:	00db      	lsls	r3, r3, #3
 8004c8c:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004c8e:	481d      	ldr	r0, [pc, #116]	; (8004d04 <NVIC_SetPriority+0xd4>)
 8004c90:	1dfb      	adds	r3, r7, #7
 8004c92:	781b      	ldrb	r3, [r3, #0]
 8004c94:	001c      	movs	r4, r3
 8004c96:	230f      	movs	r3, #15
 8004c98:	4023      	ands	r3, r4
 8004c9a:	3b08      	subs	r3, #8
 8004c9c:	089b      	lsrs	r3, r3, #2
 8004c9e:	430a      	orrs	r2, r1
 8004ca0:	3306      	adds	r3, #6
 8004ca2:	009b      	lsls	r3, r3, #2
 8004ca4:	18c3      	adds	r3, r0, r3
 8004ca6:	3304      	adds	r3, #4
 8004ca8:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8004caa:	e027      	b.n	8004cfc <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004cac:	4a16      	ldr	r2, [pc, #88]	; (8004d08 <NVIC_SetPriority+0xd8>)
 8004cae:	1dfb      	adds	r3, r7, #7
 8004cb0:	781b      	ldrb	r3, [r3, #0]
 8004cb2:	b25b      	sxtb	r3, r3
 8004cb4:	089b      	lsrs	r3, r3, #2
 8004cb6:	33c0      	adds	r3, #192	; 0xc0
 8004cb8:	009b      	lsls	r3, r3, #2
 8004cba:	589b      	ldr	r3, [r3, r2]
 8004cbc:	1dfa      	adds	r2, r7, #7
 8004cbe:	7812      	ldrb	r2, [r2, #0]
 8004cc0:	0011      	movs	r1, r2
 8004cc2:	2203      	movs	r2, #3
 8004cc4:	400a      	ands	r2, r1
 8004cc6:	00d2      	lsls	r2, r2, #3
 8004cc8:	21ff      	movs	r1, #255	; 0xff
 8004cca:	4091      	lsls	r1, r2
 8004ccc:	000a      	movs	r2, r1
 8004cce:	43d2      	mvns	r2, r2
 8004cd0:	401a      	ands	r2, r3
 8004cd2:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	019b      	lsls	r3, r3, #6
 8004cd8:	22ff      	movs	r2, #255	; 0xff
 8004cda:	401a      	ands	r2, r3
 8004cdc:	1dfb      	adds	r3, r7, #7
 8004cde:	781b      	ldrb	r3, [r3, #0]
 8004ce0:	0018      	movs	r0, r3
 8004ce2:	2303      	movs	r3, #3
 8004ce4:	4003      	ands	r3, r0
 8004ce6:	00db      	lsls	r3, r3, #3
 8004ce8:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004cea:	4807      	ldr	r0, [pc, #28]	; (8004d08 <NVIC_SetPriority+0xd8>)
 8004cec:	1dfb      	adds	r3, r7, #7
 8004cee:	781b      	ldrb	r3, [r3, #0]
 8004cf0:	b25b      	sxtb	r3, r3
 8004cf2:	089b      	lsrs	r3, r3, #2
 8004cf4:	430a      	orrs	r2, r1
 8004cf6:	33c0      	adds	r3, #192	; 0xc0
 8004cf8:	009b      	lsls	r3, r3, #2
 8004cfa:	501a      	str	r2, [r3, r0]
}
 8004cfc:	46c0      	nop			; (mov r8, r8)
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	b003      	add	sp, #12
 8004d02:	bd90      	pop	{r4, r7, pc}
 8004d04:	e000ed00 	.word	0xe000ed00
 8004d08:	e000e100 	.word	0xe000e100

08004d0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b082      	sub	sp, #8
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	3b01      	subs	r3, #1
 8004d18:	4a0c      	ldr	r2, [pc, #48]	; (8004d4c <SysTick_Config+0x40>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d901      	bls.n	8004d22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e010      	b.n	8004d44 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004d22:	4b0b      	ldr	r3, [pc, #44]	; (8004d50 <SysTick_Config+0x44>)
 8004d24:	687a      	ldr	r2, [r7, #4]
 8004d26:	3a01      	subs	r2, #1
 8004d28:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	425b      	negs	r3, r3
 8004d2e:	2103      	movs	r1, #3
 8004d30:	0018      	movs	r0, r3
 8004d32:	f7ff ff7d 	bl	8004c30 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004d36:	4b06      	ldr	r3, [pc, #24]	; (8004d50 <SysTick_Config+0x44>)
 8004d38:	2200      	movs	r2, #0
 8004d3a:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004d3c:	4b04      	ldr	r3, [pc, #16]	; (8004d50 <SysTick_Config+0x44>)
 8004d3e:	2207      	movs	r2, #7
 8004d40:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004d42:	2300      	movs	r3, #0
}
 8004d44:	0018      	movs	r0, r3
 8004d46:	46bd      	mov	sp, r7
 8004d48:	b002      	add	sp, #8
 8004d4a:	bd80      	pop	{r7, pc}
 8004d4c:	00ffffff 	.word	0x00ffffff
 8004d50:	e000e010 	.word	0xe000e010

08004d54 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b084      	sub	sp, #16
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	60b9      	str	r1, [r7, #8]
 8004d5c:	607a      	str	r2, [r7, #4]
 8004d5e:	210f      	movs	r1, #15
 8004d60:	187b      	adds	r3, r7, r1
 8004d62:	1c02      	adds	r2, r0, #0
 8004d64:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8004d66:	68ba      	ldr	r2, [r7, #8]
 8004d68:	187b      	adds	r3, r7, r1
 8004d6a:	781b      	ldrb	r3, [r3, #0]
 8004d6c:	b25b      	sxtb	r3, r3
 8004d6e:	0011      	movs	r1, r2
 8004d70:	0018      	movs	r0, r3
 8004d72:	f7ff ff5d 	bl	8004c30 <NVIC_SetPriority>
}
 8004d76:	46c0      	nop			; (mov r8, r8)
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	b004      	add	sp, #16
 8004d7c:	bd80      	pop	{r7, pc}

08004d7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d7e:	b580      	push	{r7, lr}
 8004d80:	b082      	sub	sp, #8
 8004d82:	af00      	add	r7, sp, #0
 8004d84:	0002      	movs	r2, r0
 8004d86:	1dfb      	adds	r3, r7, #7
 8004d88:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004d8a:	1dfb      	adds	r3, r7, #7
 8004d8c:	781b      	ldrb	r3, [r3, #0]
 8004d8e:	b25b      	sxtb	r3, r3
 8004d90:	0018      	movs	r0, r3
 8004d92:	f7ff ff07 	bl	8004ba4 <NVIC_EnableIRQ>
}
 8004d96:	46c0      	nop			; (mov r8, r8)
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	b002      	add	sp, #8
 8004d9c:	bd80      	pop	{r7, pc}

08004d9e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004d9e:	b580      	push	{r7, lr}
 8004da0:	b082      	sub	sp, #8
 8004da2:	af00      	add	r7, sp, #0
 8004da4:	0002      	movs	r2, r0
 8004da6:	1dfb      	adds	r3, r7, #7
 8004da8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004daa:	1dfb      	adds	r3, r7, #7
 8004dac:	781b      	ldrb	r3, [r3, #0]
 8004dae:	b25b      	sxtb	r3, r3
 8004db0:	0018      	movs	r0, r3
 8004db2:	f7ff ff0d 	bl	8004bd0 <NVIC_DisableIRQ>
}
 8004db6:	46c0      	nop			; (mov r8, r8)
 8004db8:	46bd      	mov	sp, r7
 8004dba:	b002      	add	sp, #8
 8004dbc:	bd80      	pop	{r7, pc}

08004dbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004dbe:	b580      	push	{r7, lr}
 8004dc0:	b082      	sub	sp, #8
 8004dc2:	af00      	add	r7, sp, #0
 8004dc4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	0018      	movs	r0, r3
 8004dca:	f7ff ff9f 	bl	8004d0c <SysTick_Config>
 8004dce:	0003      	movs	r3, r0
}
 8004dd0:	0018      	movs	r0, r3
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	b002      	add	sp, #8
 8004dd6:	bd80      	pop	{r7, pc}

08004dd8 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{ 
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b082      	sub	sp, #8
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	0002      	movs	r2, r0
 8004de0:	1dfb      	adds	r3, r7, #7
 8004de2:	701a      	strb	r2, [r3, #0]
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8004de4:	1dfb      	adds	r3, r7, #7
 8004de6:	781b      	ldrb	r3, [r3, #0]
 8004de8:	b25b      	sxtb	r3, r3
 8004dea:	0018      	movs	r0, r3
 8004dec:	f7ff ff08 	bl	8004c00 <NVIC_ClearPendingIRQ>
}
 8004df0:	46c0      	nop			; (mov r8, r8)
 8004df2:	46bd      	mov	sp, r7
 8004df4:	b002      	add	sp, #8
 8004df6:	bd80      	pop	{r7, pc}

08004df8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b084      	sub	sp, #16
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d101      	bne.n	8004e0a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004e06:	2301      	movs	r3, #1
 8004e08:	e061      	b.n	8004ece <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a32      	ldr	r2, [pc, #200]	; (8004ed8 <HAL_DMA_Init+0xe0>)
 8004e10:	4694      	mov	ip, r2
 8004e12:	4463      	add	r3, ip
 8004e14:	2114      	movs	r1, #20
 8004e16:	0018      	movs	r0, r3
 8004e18:	f7fb f97e 	bl	8000118 <__udivsi3>
 8004e1c:	0003      	movs	r3, r0
 8004e1e:	009a      	lsls	r2, r3, #2
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	4a2d      	ldr	r2, [pc, #180]	; (8004edc <HAL_DMA_Init+0xe4>)
 8004e28:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2225      	movs	r2, #37	; 0x25
 8004e2e:	2102      	movs	r1, #2
 8004e30:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	4a28      	ldr	r2, [pc, #160]	; (8004ee0 <HAL_DMA_Init+0xe8>)
 8004e3e:	4013      	ands	r3, r2
 8004e40:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004e4a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	691b      	ldr	r3, [r3, #16]
 8004e50:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e56:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	699b      	ldr	r3, [r3, #24]
 8004e5c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e62:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6a1b      	ldr	r3, [r3, #32]
 8004e68:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004e6a:	68fa      	ldr	r2, [r7, #12]
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	68fa      	ldr	r2, [r7, #12]
 8004e76:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	689a      	ldr	r2, [r3, #8]
 8004e7c:	2380      	movs	r3, #128	; 0x80
 8004e7e:	01db      	lsls	r3, r3, #7
 8004e80:	429a      	cmp	r2, r3
 8004e82:	d018      	beq.n	8004eb6 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004e84:	4b17      	ldr	r3, [pc, #92]	; (8004ee4 <HAL_DMA_Init+0xec>)
 8004e86:	681a      	ldr	r2, [r3, #0]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e8c:	211c      	movs	r1, #28
 8004e8e:	400b      	ands	r3, r1
 8004e90:	210f      	movs	r1, #15
 8004e92:	4099      	lsls	r1, r3
 8004e94:	000b      	movs	r3, r1
 8004e96:	43d9      	mvns	r1, r3
 8004e98:	4b12      	ldr	r3, [pc, #72]	; (8004ee4 <HAL_DMA_Init+0xec>)
 8004e9a:	400a      	ands	r2, r1
 8004e9c:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004e9e:	4b11      	ldr	r3, [pc, #68]	; (8004ee4 <HAL_DMA_Init+0xec>)
 8004ea0:	6819      	ldr	r1, [r3, #0]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	685a      	ldr	r2, [r3, #4]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eaa:	201c      	movs	r0, #28
 8004eac:	4003      	ands	r3, r0
 8004eae:	409a      	lsls	r2, r3
 8004eb0:	4b0c      	ldr	r3, [pc, #48]	; (8004ee4 <HAL_DMA_Init+0xec>)
 8004eb2:	430a      	orrs	r2, r1
 8004eb4:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2225      	movs	r2, #37	; 0x25
 8004ec0:	2101      	movs	r1, #1
 8004ec2:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2224      	movs	r2, #36	; 0x24
 8004ec8:	2100      	movs	r1, #0
 8004eca:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004ecc:	2300      	movs	r3, #0
}
 8004ece:	0018      	movs	r0, r3
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	b004      	add	sp, #16
 8004ed4:	bd80      	pop	{r7, pc}
 8004ed6:	46c0      	nop			; (mov r8, r8)
 8004ed8:	bffdfff8 	.word	0xbffdfff8
 8004edc:	40020000 	.word	0x40020000
 8004ee0:	ffff800f 	.word	0xffff800f
 8004ee4:	400200a8 	.word	0x400200a8

08004ee8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b084      	sub	sp, #16
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ef0:	230f      	movs	r3, #15
 8004ef2:	18fb      	adds	r3, r7, r3
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2225      	movs	r2, #37	; 0x25
 8004efc:	5c9b      	ldrb	r3, [r3, r2]
 8004efe:	b2db      	uxtb	r3, r3
 8004f00:	2b02      	cmp	r3, #2
 8004f02:	d007      	beq.n	8004f14 <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2204      	movs	r2, #4
 8004f08:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004f0a:	230f      	movs	r3, #15
 8004f0c:	18fb      	adds	r3, r7, r3
 8004f0e:	2201      	movs	r2, #1
 8004f10:	701a      	strb	r2, [r3, #0]
 8004f12:	e02a      	b.n	8004f6a <HAL_DMA_Abort_IT+0x82>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	681a      	ldr	r2, [r3, #0]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	210e      	movs	r1, #14
 8004f20:	438a      	bics	r2, r1
 8004f22:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	681a      	ldr	r2, [r3, #0]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	2101      	movs	r1, #1
 8004f30:	438a      	bics	r2, r1
 8004f32:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f38:	221c      	movs	r2, #28
 8004f3a:	401a      	ands	r2, r3
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f40:	2101      	movs	r1, #1
 8004f42:	4091      	lsls	r1, r2
 8004f44:	000a      	movs	r2, r1
 8004f46:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2225      	movs	r2, #37	; 0x25
 8004f4c:	2101      	movs	r1, #1
 8004f4e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2224      	movs	r2, #36	; 0x24
 8004f54:	2100      	movs	r1, #0
 8004f56:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d004      	beq.n	8004f6a <HAL_DMA_Abort_IT+0x82>
    {
      hdma->XferAbortCallback(hdma);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f64:	687a      	ldr	r2, [r7, #4]
 8004f66:	0010      	movs	r0, r2
 8004f68:	4798      	blx	r3
    }
  }
  return status;
 8004f6a:	230f      	movs	r3, #15
 8004f6c:	18fb      	adds	r3, r7, r3
 8004f6e:	781b      	ldrb	r3, [r3, #0]
}
 8004f70:	0018      	movs	r0, r3
 8004f72:	46bd      	mov	sp, r7
 8004f74:	b004      	add	sp, #16
 8004f76:	bd80      	pop	{r7, pc}

08004f78 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b084      	sub	sp, #16
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f94:	221c      	movs	r2, #28
 8004f96:	4013      	ands	r3, r2
 8004f98:	2204      	movs	r2, #4
 8004f9a:	409a      	lsls	r2, r3
 8004f9c:	0013      	movs	r3, r2
 8004f9e:	68fa      	ldr	r2, [r7, #12]
 8004fa0:	4013      	ands	r3, r2
 8004fa2:	d026      	beq.n	8004ff2 <HAL_DMA_IRQHandler+0x7a>
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	2204      	movs	r2, #4
 8004fa8:	4013      	ands	r3, r2
 8004faa:	d022      	beq.n	8004ff2 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	2220      	movs	r2, #32
 8004fb4:	4013      	ands	r3, r2
 8004fb6:	d107      	bne.n	8004fc8 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	681a      	ldr	r2, [r3, #0]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	2104      	movs	r1, #4
 8004fc4:	438a      	bics	r2, r1
 8004fc6:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fcc:	221c      	movs	r2, #28
 8004fce:	401a      	ands	r2, r3
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fd4:	2104      	movs	r1, #4
 8004fd6:	4091      	lsls	r1, r2
 8004fd8:	000a      	movs	r2, r1
 8004fda:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d100      	bne.n	8004fe6 <HAL_DMA_IRQHandler+0x6e>
 8004fe4:	e071      	b.n	80050ca <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fea:	687a      	ldr	r2, [r7, #4]
 8004fec:	0010      	movs	r0, r2
 8004fee:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8004ff0:	e06b      	b.n	80050ca <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ff6:	221c      	movs	r2, #28
 8004ff8:	4013      	ands	r3, r2
 8004ffa:	2202      	movs	r2, #2
 8004ffc:	409a      	lsls	r2, r3
 8004ffe:	0013      	movs	r3, r2
 8005000:	68fa      	ldr	r2, [r7, #12]
 8005002:	4013      	ands	r3, r2
 8005004:	d02d      	beq.n	8005062 <HAL_DMA_IRQHandler+0xea>
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	2202      	movs	r2, #2
 800500a:	4013      	ands	r3, r2
 800500c:	d029      	beq.n	8005062 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	2220      	movs	r2, #32
 8005016:	4013      	ands	r3, r2
 8005018:	d10b      	bne.n	8005032 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	681a      	ldr	r2, [r3, #0]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	210a      	movs	r1, #10
 8005026:	438a      	bics	r2, r1
 8005028:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2225      	movs	r2, #37	; 0x25
 800502e:	2101      	movs	r1, #1
 8005030:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005036:	221c      	movs	r2, #28
 8005038:	401a      	ands	r2, r3
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800503e:	2102      	movs	r1, #2
 8005040:	4091      	lsls	r1, r2
 8005042:	000a      	movs	r2, r1
 8005044:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2224      	movs	r2, #36	; 0x24
 800504a:	2100      	movs	r1, #0
 800504c:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005052:	2b00      	cmp	r3, #0
 8005054:	d039      	beq.n	80050ca <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800505a:	687a      	ldr	r2, [r7, #4]
 800505c:	0010      	movs	r0, r2
 800505e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8005060:	e033      	b.n	80050ca <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005066:	221c      	movs	r2, #28
 8005068:	4013      	ands	r3, r2
 800506a:	2208      	movs	r2, #8
 800506c:	409a      	lsls	r2, r3
 800506e:	0013      	movs	r3, r2
 8005070:	68fa      	ldr	r2, [r7, #12]
 8005072:	4013      	ands	r3, r2
 8005074:	d02a      	beq.n	80050cc <HAL_DMA_IRQHandler+0x154>
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	2208      	movs	r2, #8
 800507a:	4013      	ands	r3, r2
 800507c:	d026      	beq.n	80050cc <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	681a      	ldr	r2, [r3, #0]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	210e      	movs	r1, #14
 800508a:	438a      	bics	r2, r1
 800508c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005092:	221c      	movs	r2, #28
 8005094:	401a      	ands	r2, r3
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800509a:	2101      	movs	r1, #1
 800509c:	4091      	lsls	r1, r2
 800509e:	000a      	movs	r2, r1
 80050a0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2201      	movs	r2, #1
 80050a6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2225      	movs	r2, #37	; 0x25
 80050ac:	2101      	movs	r1, #1
 80050ae:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2224      	movs	r2, #36	; 0x24
 80050b4:	2100      	movs	r1, #0
 80050b6:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d005      	beq.n	80050cc <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050c4:	687a      	ldr	r2, [r7, #4]
 80050c6:	0010      	movs	r0, r2
 80050c8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80050ca:	46c0      	nop			; (mov r8, r8)
 80050cc:	46c0      	nop			; (mov r8, r8)
}
 80050ce:	46bd      	mov	sp, r7
 80050d0:	b004      	add	sp, #16
 80050d2:	bd80      	pop	{r7, pc}

080050d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b086      	sub	sp, #24
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
 80050dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80050de:	2300      	movs	r3, #0
 80050e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80050e2:	2300      	movs	r3, #0
 80050e4:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80050e6:	2300      	movs	r3, #0
 80050e8:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,(GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80050ea:	e155      	b.n	8005398 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	2101      	movs	r1, #1
 80050f2:	697a      	ldr	r2, [r7, #20]
 80050f4:	4091      	lsls	r1, r2
 80050f6:	000a      	movs	r2, r1
 80050f8:	4013      	ands	r3, r2
 80050fa:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d100      	bne.n	8005104 <HAL_GPIO_Init+0x30>
 8005102:	e146      	b.n	8005392 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	2b02      	cmp	r3, #2
 800510a:	d003      	beq.n	8005114 <HAL_GPIO_Init+0x40>
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	2b12      	cmp	r3, #18
 8005112:	d123      	bne.n	800515c <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3U];
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	08da      	lsrs	r2, r3, #3
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	3208      	adds	r2, #8
 800511c:	0092      	lsls	r2, r2, #2
 800511e:	58d3      	ldr	r3, [r2, r3]
 8005120:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8005122:	697b      	ldr	r3, [r7, #20]
 8005124:	2207      	movs	r2, #7
 8005126:	4013      	ands	r3, r2
 8005128:	009b      	lsls	r3, r3, #2
 800512a:	220f      	movs	r2, #15
 800512c:	409a      	lsls	r2, r3
 800512e:	0013      	movs	r3, r2
 8005130:	43da      	mvns	r2, r3
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	4013      	ands	r3, r2
 8005136:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	691a      	ldr	r2, [r3, #16]
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	2107      	movs	r1, #7
 8005140:	400b      	ands	r3, r1
 8005142:	009b      	lsls	r3, r3, #2
 8005144:	409a      	lsls	r2, r3
 8005146:	0013      	movs	r3, r2
 8005148:	693a      	ldr	r2, [r7, #16]
 800514a:	4313      	orrs	r3, r2
 800514c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	08da      	lsrs	r2, r3, #3
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	3208      	adds	r2, #8
 8005156:	0092      	lsls	r2, r2, #2
 8005158:	6939      	ldr	r1, [r7, #16]
 800515a:	50d1      	str	r1, [r2, r3]
      } 

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	2b01      	cmp	r3, #1
 8005162:	d00b      	beq.n	800517c <HAL_GPIO_Init+0xa8>
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	2b02      	cmp	r3, #2
 800516a:	d007      	beq.n	800517c <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005170:	2b11      	cmp	r3, #17
 8005172:	d003      	beq.n	800517c <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	2b12      	cmp	r3, #18
 800517a:	d130      	bne.n	80051de <HAL_GPIO_Init+0x10a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	005b      	lsls	r3, r3, #1
 8005186:	2203      	movs	r2, #3
 8005188:	409a      	lsls	r2, r3
 800518a:	0013      	movs	r3, r2
 800518c:	43da      	mvns	r2, r3
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	4013      	ands	r3, r2
 8005192:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	68da      	ldr	r2, [r3, #12]
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	005b      	lsls	r3, r3, #1
 800519c:	409a      	lsls	r2, r3
 800519e:	0013      	movs	r3, r2
 80051a0:	693a      	ldr	r2, [r7, #16]
 80051a2:	4313      	orrs	r3, r2
 80051a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	693a      	ldr	r2, [r7, #16]
 80051aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp= GPIOx->OTYPER;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80051b2:	2201      	movs	r2, #1
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	409a      	lsls	r2, r3
 80051b8:	0013      	movs	r3, r2
 80051ba:	43da      	mvns	r2, r3
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	4013      	ands	r3, r2
 80051c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	091b      	lsrs	r3, r3, #4
 80051c8:	2201      	movs	r2, #1
 80051ca:	401a      	ands	r2, r3
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	409a      	lsls	r2, r3
 80051d0:	0013      	movs	r3, r2
 80051d2:	693a      	ldr	r2, [r7, #16]
 80051d4:	4313      	orrs	r3, r2
 80051d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	693a      	ldr	r2, [r7, #16]
 80051dc:	605a      	str	r2, [r3, #4]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	005b      	lsls	r3, r3, #1
 80051e8:	2203      	movs	r2, #3
 80051ea:	409a      	lsls	r2, r3
 80051ec:	0013      	movs	r3, r2
 80051ee:	43da      	mvns	r2, r3
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	4013      	ands	r3, r2
 80051f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	2203      	movs	r2, #3
 80051fc:	401a      	ands	r2, r3
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	005b      	lsls	r3, r3, #1
 8005202:	409a      	lsls	r2, r3
 8005204:	0013      	movs	r3, r2
 8005206:	693a      	ldr	r2, [r7, #16]
 8005208:	4313      	orrs	r3, r2
 800520a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	693a      	ldr	r2, [r7, #16]
 8005210:	601a      	str	r2, [r3, #0]

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	68db      	ldr	r3, [r3, #12]
 8005216:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	005b      	lsls	r3, r3, #1
 800521c:	2203      	movs	r2, #3
 800521e:	409a      	lsls	r2, r3
 8005220:	0013      	movs	r3, r2
 8005222:	43da      	mvns	r2, r3
 8005224:	693b      	ldr	r3, [r7, #16]
 8005226:	4013      	ands	r3, r2
 8005228:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	689a      	ldr	r2, [r3, #8]
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	005b      	lsls	r3, r3, #1
 8005232:	409a      	lsls	r2, r3
 8005234:	0013      	movs	r3, r2
 8005236:	693a      	ldr	r2, [r7, #16]
 8005238:	4313      	orrs	r3, r2
 800523a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	693a      	ldr	r2, [r7, #16]
 8005240:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	685a      	ldr	r2, [r3, #4]
 8005246:	2380      	movs	r3, #128	; 0x80
 8005248:	055b      	lsls	r3, r3, #21
 800524a:	4013      	ands	r3, r2
 800524c:	d100      	bne.n	8005250 <HAL_GPIO_Init+0x17c>
 800524e:	e0a0      	b.n	8005392 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005250:	4b57      	ldr	r3, [pc, #348]	; (80053b0 <HAL_GPIO_Init+0x2dc>)
 8005252:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005254:	4b56      	ldr	r3, [pc, #344]	; (80053b0 <HAL_GPIO_Init+0x2dc>)
 8005256:	2101      	movs	r1, #1
 8005258:	430a      	orrs	r2, r1
 800525a:	635a      	str	r2, [r3, #52]	; 0x34
        
        temp = SYSCFG->EXTICR[position >> 2U];
 800525c:	4a55      	ldr	r2, [pc, #340]	; (80053b4 <HAL_GPIO_Init+0x2e0>)
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	089b      	lsrs	r3, r3, #2
 8005262:	3302      	adds	r3, #2
 8005264:	009b      	lsls	r3, r3, #2
 8005266:	589b      	ldr	r3, [r3, r2]
 8005268:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	2203      	movs	r2, #3
 800526e:	4013      	ands	r3, r2
 8005270:	009b      	lsls	r3, r3, #2
 8005272:	220f      	movs	r2, #15
 8005274:	409a      	lsls	r2, r3
 8005276:	0013      	movs	r3, r2
 8005278:	43da      	mvns	r2, r3
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	4013      	ands	r3, r2
 800527e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8005280:	687a      	ldr	r2, [r7, #4]
 8005282:	23a0      	movs	r3, #160	; 0xa0
 8005284:	05db      	lsls	r3, r3, #23
 8005286:	429a      	cmp	r2, r3
 8005288:	d01f      	beq.n	80052ca <HAL_GPIO_Init+0x1f6>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	4a4a      	ldr	r2, [pc, #296]	; (80053b8 <HAL_GPIO_Init+0x2e4>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d019      	beq.n	80052c6 <HAL_GPIO_Init+0x1f2>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	4a49      	ldr	r2, [pc, #292]	; (80053bc <HAL_GPIO_Init+0x2e8>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d013      	beq.n	80052c2 <HAL_GPIO_Init+0x1ee>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	4a48      	ldr	r2, [pc, #288]	; (80053c0 <HAL_GPIO_Init+0x2ec>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d00d      	beq.n	80052be <HAL_GPIO_Init+0x1ea>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	4a47      	ldr	r2, [pc, #284]	; (80053c4 <HAL_GPIO_Init+0x2f0>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d007      	beq.n	80052ba <HAL_GPIO_Init+0x1e6>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	4a46      	ldr	r2, [pc, #280]	; (80053c8 <HAL_GPIO_Init+0x2f4>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d101      	bne.n	80052b6 <HAL_GPIO_Init+0x1e2>
 80052b2:	2305      	movs	r3, #5
 80052b4:	e00a      	b.n	80052cc <HAL_GPIO_Init+0x1f8>
 80052b6:	2306      	movs	r3, #6
 80052b8:	e008      	b.n	80052cc <HAL_GPIO_Init+0x1f8>
 80052ba:	2304      	movs	r3, #4
 80052bc:	e006      	b.n	80052cc <HAL_GPIO_Init+0x1f8>
 80052be:	2303      	movs	r3, #3
 80052c0:	e004      	b.n	80052cc <HAL_GPIO_Init+0x1f8>
 80052c2:	2302      	movs	r3, #2
 80052c4:	e002      	b.n	80052cc <HAL_GPIO_Init+0x1f8>
 80052c6:	2301      	movs	r3, #1
 80052c8:	e000      	b.n	80052cc <HAL_GPIO_Init+0x1f8>
 80052ca:	2300      	movs	r3, #0
 80052cc:	697a      	ldr	r2, [r7, #20]
 80052ce:	2103      	movs	r1, #3
 80052d0:	400a      	ands	r2, r1
 80052d2:	0092      	lsls	r2, r2, #2
 80052d4:	4093      	lsls	r3, r2
 80052d6:	693a      	ldr	r2, [r7, #16]
 80052d8:	4313      	orrs	r3, r2
 80052da:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80052dc:	4935      	ldr	r1, [pc, #212]	; (80053b4 <HAL_GPIO_Init+0x2e0>)
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	089b      	lsrs	r3, r3, #2
 80052e2:	3302      	adds	r3, #2
 80052e4:	009b      	lsls	r3, r3, #2
 80052e6:	693a      	ldr	r2, [r7, #16]
 80052e8:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80052ea:	4b38      	ldr	r3, [pc, #224]	; (80053cc <HAL_GPIO_Init+0x2f8>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	43da      	mvns	r2, r3
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	4013      	ands	r3, r2
 80052f8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	685a      	ldr	r2, [r3, #4]
 80052fe:	2380      	movs	r3, #128	; 0x80
 8005300:	025b      	lsls	r3, r3, #9
 8005302:	4013      	ands	r3, r2
 8005304:	d003      	beq.n	800530e <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8005306:	693a      	ldr	r2, [r7, #16]
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	4313      	orrs	r3, r2
 800530c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800530e:	4b2f      	ldr	r3, [pc, #188]	; (80053cc <HAL_GPIO_Init+0x2f8>)
 8005310:	693a      	ldr	r2, [r7, #16]
 8005312:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8005314:	4b2d      	ldr	r3, [pc, #180]	; (80053cc <HAL_GPIO_Init+0x2f8>)
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	43da      	mvns	r2, r3
 800531e:	693b      	ldr	r3, [r7, #16]
 8005320:	4013      	ands	r3, r2
 8005322:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	685a      	ldr	r2, [r3, #4]
 8005328:	2380      	movs	r3, #128	; 0x80
 800532a:	029b      	lsls	r3, r3, #10
 800532c:	4013      	ands	r3, r2
 800532e:	d003      	beq.n	8005338 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8005330:	693a      	ldr	r2, [r7, #16]
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	4313      	orrs	r3, r2
 8005336:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8005338:	4b24      	ldr	r3, [pc, #144]	; (80053cc <HAL_GPIO_Init+0x2f8>)
 800533a:	693a      	ldr	r2, [r7, #16]
 800533c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800533e:	4b23      	ldr	r3, [pc, #140]	; (80053cc <HAL_GPIO_Init+0x2f8>)
 8005340:	689b      	ldr	r3, [r3, #8]
 8005342:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	43da      	mvns	r2, r3
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	4013      	ands	r3, r2
 800534c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	685a      	ldr	r2, [r3, #4]
 8005352:	2380      	movs	r3, #128	; 0x80
 8005354:	035b      	lsls	r3, r3, #13
 8005356:	4013      	ands	r3, r2
 8005358:	d003      	beq.n	8005362 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 800535a:	693a      	ldr	r2, [r7, #16]
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	4313      	orrs	r3, r2
 8005360:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8005362:	4b1a      	ldr	r3, [pc, #104]	; (80053cc <HAL_GPIO_Init+0x2f8>)
 8005364:	693a      	ldr	r2, [r7, #16]
 8005366:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8005368:	4b18      	ldr	r3, [pc, #96]	; (80053cc <HAL_GPIO_Init+0x2f8>)
 800536a:	68db      	ldr	r3, [r3, #12]
 800536c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	43da      	mvns	r2, r3
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	4013      	ands	r3, r2
 8005376:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	685a      	ldr	r2, [r3, #4]
 800537c:	2380      	movs	r3, #128	; 0x80
 800537e:	039b      	lsls	r3, r3, #14
 8005380:	4013      	ands	r3, r2
 8005382:	d003      	beq.n	800538c <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8005384:	693a      	ldr	r2, [r7, #16]
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	4313      	orrs	r3, r2
 800538a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800538c:	4b0f      	ldr	r3, [pc, #60]	; (80053cc <HAL_GPIO_Init+0x2f8>)
 800538e:	693a      	ldr	r2, [r7, #16]
 8005390:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	3301      	adds	r3, #1
 8005396:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	681a      	ldr	r2, [r3, #0]
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	40da      	lsrs	r2, r3
 80053a0:	1e13      	subs	r3, r2, #0
 80053a2:	d000      	beq.n	80053a6 <HAL_GPIO_Init+0x2d2>
 80053a4:	e6a2      	b.n	80050ec <HAL_GPIO_Init+0x18>
  }
}
 80053a6:	46c0      	nop			; (mov r8, r8)
 80053a8:	46bd      	mov	sp, r7
 80053aa:	b006      	add	sp, #24
 80053ac:	bd80      	pop	{r7, pc}
 80053ae:	46c0      	nop			; (mov r8, r8)
 80053b0:	40021000 	.word	0x40021000
 80053b4:	40010000 	.word	0x40010000
 80053b8:	50000400 	.word	0x50000400
 80053bc:	50000800 	.word	0x50000800
 80053c0:	50000c00 	.word	0x50000c00
 80053c4:	50001000 	.word	0x50001000
 80053c8:	50001c00 	.word	0x50001c00
 80053cc:	40010400 	.word	0x40010400

080053d0 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b084      	sub	sp, #16
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
 80053d8:	000a      	movs	r2, r1
 80053da:	1cbb      	adds	r3, r7, #2
 80053dc:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;
  
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  
  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	691b      	ldr	r3, [r3, #16]
 80053e2:	1cba      	adds	r2, r7, #2
 80053e4:	8812      	ldrh	r2, [r2, #0]
 80053e6:	4013      	ands	r3, r2
 80053e8:	d004      	beq.n	80053f4 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80053ea:	230f      	movs	r3, #15
 80053ec:	18fb      	adds	r3, r7, r3
 80053ee:	2201      	movs	r2, #1
 80053f0:	701a      	strb	r2, [r3, #0]
 80053f2:	e003      	b.n	80053fc <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80053f4:	230f      	movs	r3, #15
 80053f6:	18fb      	adds	r3, r7, r3
 80053f8:	2200      	movs	r2, #0
 80053fa:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80053fc:	230f      	movs	r3, #15
 80053fe:	18fb      	adds	r3, r7, r3
 8005400:	781b      	ldrb	r3, [r3, #0]
}
 8005402:	0018      	movs	r0, r3
 8005404:	46bd      	mov	sp, r7
 8005406:	b004      	add	sp, #16
 8005408:	bd80      	pop	{r7, pc}

0800540a <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800540a:	b580      	push	{r7, lr}
 800540c:	b082      	sub	sp, #8
 800540e:	af00      	add	r7, sp, #0
 8005410:	6078      	str	r0, [r7, #4]
 8005412:	0008      	movs	r0, r1
 8005414:	0011      	movs	r1, r2
 8005416:	1cbb      	adds	r3, r7, #2
 8005418:	1c02      	adds	r2, r0, #0
 800541a:	801a      	strh	r2, [r3, #0]
 800541c:	1c7b      	adds	r3, r7, #1
 800541e:	1c0a      	adds	r2, r1, #0
 8005420:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 8005422:	1c7b      	adds	r3, r7, #1
 8005424:	781b      	ldrb	r3, [r3, #0]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d004      	beq.n	8005434 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 800542a:	1cbb      	adds	r3, r7, #2
 800542c:	881a      	ldrh	r2, [r3, #0]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8005432:	e003      	b.n	800543c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8005434:	1cbb      	adds	r3, r7, #2
 8005436:	881a      	ldrh	r2, [r3, #0]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800543c:	46c0      	nop			; (mov r8, r8)
 800543e:	46bd      	mov	sp, r7
 8005440:	b002      	add	sp, #8
 8005442:	bd80      	pop	{r7, pc}

08005444 <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b082      	sub	sp, #8
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
 800544c:	000a      	movs	r2, r1
 800544e:	1cbb      	adds	r3, r7, #2
 8005450:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	695a      	ldr	r2, [r3, #20]
 8005456:	1cbb      	adds	r3, r7, #2
 8005458:	881b      	ldrh	r3, [r3, #0]
 800545a:	405a      	eors	r2, r3
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	615a      	str	r2, [r3, #20]
}
 8005460:	46c0      	nop			; (mov r8, r8)
 8005462:	46bd      	mov	sp, r7
 8005464:	b002      	add	sp, #8
 8005466:	bd80      	pop	{r7, pc}

08005468 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b082      	sub	sp, #8
 800546c:	af00      	add	r7, sp, #0
 800546e:	0002      	movs	r2, r0
 8005470:	1dbb      	adds	r3, r7, #6
 8005472:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 8005474:	4b09      	ldr	r3, [pc, #36]	; (800549c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8005476:	695b      	ldr	r3, [r3, #20]
 8005478:	1dba      	adds	r2, r7, #6
 800547a:	8812      	ldrh	r2, [r2, #0]
 800547c:	4013      	ands	r3, r2
 800547e:	d008      	beq.n	8005492 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005480:	4b06      	ldr	r3, [pc, #24]	; (800549c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8005482:	1dba      	adds	r2, r7, #6
 8005484:	8812      	ldrh	r2, [r2, #0]
 8005486:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005488:	1dbb      	adds	r3, r7, #6
 800548a:	881b      	ldrh	r3, [r3, #0]
 800548c:	0018      	movs	r0, r3
 800548e:	f7fd f941 	bl	8002714 <HAL_GPIO_EXTI_Callback>
  }
}
 8005492:	46c0      	nop			; (mov r8, r8)
 8005494:	46bd      	mov	sp, r7
 8005496:	b002      	add	sp, #8
 8005498:	bd80      	pop	{r7, pc}
 800549a:	46c0      	nop			; (mov r8, r8)
 800549c:	40010400 	.word	0x40010400

080054a0 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b084      	sub	sp, #16
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d101      	bne.n	80054b2 <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 80054ae:	2301      	movs	r3, #1
 80054b0:	e06c      	b.n	800558c <HAL_LPTIM_Init+0xec>
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	222e      	movs	r2, #46	; 0x2e
 80054b6:	5c9b      	ldrb	r3, [r3, r2]
 80054b8:	b2db      	uxtb	r3, r3
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d107      	bne.n	80054ce <HAL_LPTIM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	222d      	movs	r2, #45	; 0x2d
 80054c2:	2100      	movs	r1, #0
 80054c4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	0018      	movs	r0, r3
 80054ca:	f7fe fc45 	bl	8003d58 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	222e      	movs	r2, #46	; 0x2e
 80054d2:	2102      	movs	r1, #2
 80054d4:	5499      	strb	r1, [r3, r2]

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	68db      	ldr	r3, [r3, #12]
 80054dc:	60fb      	str	r3, [r7, #12]

  if (((hlptim->Init.Clock.Source) == LPTIM_CLOCKSOURCE_ULPTIM) || ((hlptim->Init.CounterSource) == LPTIM_COUNTERSOURCE_EXTERNAL))
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	2b01      	cmp	r3, #1
 80054e4:	d005      	beq.n	80054f2 <HAL_LPTIM_Init+0x52>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80054ea:	2380      	movs	r3, #128	; 0x80
 80054ec:	041b      	lsls	r3, r3, #16
 80054ee:	429a      	cmp	r2, r3
 80054f0:	d103      	bne.n	80054fa <HAL_LPTIM_Init+0x5a>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	221e      	movs	r2, #30
 80054f6:	4393      	bics	r3, r2
 80054f8:	60fb      	str	r3, [r7, #12]
  }
  if ((hlptim->Init.Trigger.Source) != LPTIM_TRIGSOURCE_SOFTWARE)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	695b      	ldr	r3, [r3, #20]
 80054fe:	4a25      	ldr	r2, [pc, #148]	; (8005594 <HAL_LPTIM_Init+0xf4>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d003      	beq.n	800550c <HAL_LPTIM_Init+0x6c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	4a24      	ldr	r2, [pc, #144]	; (8005598 <HAL_LPTIM_Init+0xf8>)
 8005508:	4013      	ands	r3, r2
 800550a:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, CKPOL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_CKPOL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	4a23      	ldr	r2, [pc, #140]	; (800559c <HAL_LPTIM_Init+0xfc>)
 8005510:	4013      	ands	r3, r2
 8005512:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800551c:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 8005522:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 8005528:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 800552e:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8005530:	68fa      	ldr	r2, [r7, #12]
 8005532:	4313      	orrs	r3, r2
 8005534:	60fb      	str	r3, [r7, #12]

  if (((hlptim->Init.Clock.Source) == LPTIM_CLOCKSOURCE_ULPTIM) || ((hlptim->Init.CounterSource) == LPTIM_COUNTERSOURCE_EXTERNAL))
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	2b01      	cmp	r3, #1
 800553c:	d005      	beq.n	800554a <HAL_LPTIM_Init+0xaa>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005542:	2380      	movs	r3, #128	; 0x80
 8005544:	041b      	lsls	r3, r3, #16
 8005546:	429a      	cmp	r2, r3
 8005548:	d107      	bne.n	800555a <HAL_LPTIM_Init+0xba>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8005552:	4313      	orrs	r3, r2
 8005554:	68fa      	ldr	r2, [r7, #12]
 8005556:	4313      	orrs	r3, r2
 8005558:	60fb      	str	r3, [r7, #12]
  }

  if ((hlptim->Init.Trigger.Source) != LPTIM_TRIGSOURCE_SOFTWARE)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	695b      	ldr	r3, [r3, #20]
 800555e:	4a0d      	ldr	r2, [pc, #52]	; (8005594 <HAL_LPTIM_Init+0xf4>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d00a      	beq.n	800557a <HAL_LPTIM_Init+0xda>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 800556c:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8005572:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8005574:	68fa      	ldr	r2, [r7, #12]
 8005576:	4313      	orrs	r3, r2
 8005578:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	68fa      	ldr	r2, [r7, #12]
 8005580:	60da      	str	r2, [r3, #12]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	222e      	movs	r2, #46	; 0x2e
 8005586:	2101      	movs	r1, #1
 8005588:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800558a:	2300      	movs	r3, #0
}
 800558c:	0018      	movs	r0, r3
 800558e:	46bd      	mov	sp, r7
 8005590:	b004      	add	sp, #16
 8005592:	bd80      	pop	{r7, pc}
 8005594:	0000ffff 	.word	0x0000ffff
 8005598:	ffff1f3f 	.word	0xffff1f3f
 800559c:	ff19f1f8 	.word	0xff19f1f8

080055a0 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b082      	sub	sp, #8
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	2201      	movs	r2, #1
 80055b0:	4013      	ands	r3, r2
 80055b2:	2b01      	cmp	r3, #1
 80055b4:	d10e      	bne.n	80055d4 <HAL_LPTIM_IRQHandler+0x34>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	689b      	ldr	r3, [r3, #8]
 80055bc:	2201      	movs	r2, #1
 80055be:	4013      	ands	r3, r2
 80055c0:	2b01      	cmp	r3, #1
 80055c2:	d107      	bne.n	80055d4 <HAL_LPTIM_IRQHandler+0x34>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	2201      	movs	r2, #1
 80055ca:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	0018      	movs	r0, r3
 80055d0:	f000 f888 	bl	80056e4 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	2202      	movs	r2, #2
 80055dc:	4013      	ands	r3, r2
 80055de:	2b02      	cmp	r3, #2
 80055e0:	d10e      	bne.n	8005600 <HAL_LPTIM_IRQHandler+0x60>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	689b      	ldr	r3, [r3, #8]
 80055e8:	2202      	movs	r2, #2
 80055ea:	4013      	ands	r3, r2
 80055ec:	2b02      	cmp	r3, #2
 80055ee:	d107      	bne.n	8005600 <HAL_LPTIM_IRQHandler+0x60>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	2202      	movs	r2, #2
 80055f6:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	0018      	movs	r0, r3
 80055fc:	f000 f87a 	bl	80056f4 <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	2204      	movs	r2, #4
 8005608:	4013      	ands	r3, r2
 800560a:	2b04      	cmp	r3, #4
 800560c:	d10e      	bne.n	800562c <HAL_LPTIM_IRQHandler+0x8c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	689b      	ldr	r3, [r3, #8]
 8005614:	2204      	movs	r2, #4
 8005616:	4013      	ands	r3, r2
 8005618:	2b04      	cmp	r3, #4
 800561a:	d107      	bne.n	800562c <HAL_LPTIM_IRQHandler+0x8c>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	2204      	movs	r2, #4
 8005622:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	0018      	movs	r0, r3
 8005628:	f000 f86c 	bl	8005704 <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	2208      	movs	r2, #8
 8005634:	4013      	ands	r3, r2
 8005636:	2b08      	cmp	r3, #8
 8005638:	d10e      	bne.n	8005658 <HAL_LPTIM_IRQHandler+0xb8>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	689b      	ldr	r3, [r3, #8]
 8005640:	2208      	movs	r2, #8
 8005642:	4013      	ands	r3, r2
 8005644:	2b08      	cmp	r3, #8
 8005646:	d107      	bne.n	8005658 <HAL_LPTIM_IRQHandler+0xb8>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	2208      	movs	r2, #8
 800564e:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	0018      	movs	r0, r3
 8005654:	f000 f85e 	bl	8005714 <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	2210      	movs	r2, #16
 8005660:	4013      	ands	r3, r2
 8005662:	2b10      	cmp	r3, #16
 8005664:	d10e      	bne.n	8005684 <HAL_LPTIM_IRQHandler+0xe4>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	689b      	ldr	r3, [r3, #8]
 800566c:	2210      	movs	r2, #16
 800566e:	4013      	ands	r3, r2
 8005670:	2b10      	cmp	r3, #16
 8005672:	d107      	bne.n	8005684 <HAL_LPTIM_IRQHandler+0xe4>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	2210      	movs	r2, #16
 800567a:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	0018      	movs	r0, r3
 8005680:	f000 f850 	bl	8005724 <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	2220      	movs	r2, #32
 800568c:	4013      	ands	r3, r2
 800568e:	2b20      	cmp	r3, #32
 8005690:	d10e      	bne.n	80056b0 <HAL_LPTIM_IRQHandler+0x110>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	689b      	ldr	r3, [r3, #8]
 8005698:	2220      	movs	r2, #32
 800569a:	4013      	ands	r3, r2
 800569c:	2b20      	cmp	r3, #32
 800569e:	d107      	bne.n	80056b0 <HAL_LPTIM_IRQHandler+0x110>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	2220      	movs	r2, #32
 80056a6:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	0018      	movs	r0, r3
 80056ac:	f000 f842 	bl	8005734 <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	2240      	movs	r2, #64	; 0x40
 80056b8:	4013      	ands	r3, r2
 80056ba:	2b40      	cmp	r3, #64	; 0x40
 80056bc:	d10e      	bne.n	80056dc <HAL_LPTIM_IRQHandler+0x13c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	689b      	ldr	r3, [r3, #8]
 80056c4:	2240      	movs	r2, #64	; 0x40
 80056c6:	4013      	ands	r3, r2
 80056c8:	2b40      	cmp	r3, #64	; 0x40
 80056ca:	d107      	bne.n	80056dc <HAL_LPTIM_IRQHandler+0x13c>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	2240      	movs	r2, #64	; 0x40
 80056d2:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	0018      	movs	r0, r3
 80056d8:	f000 f834 	bl	8005744 <HAL_LPTIM_DirectionDownCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 80056dc:	46c0      	nop			; (mov r8, r8)
 80056de:	46bd      	mov	sp, r7
 80056e0:	b002      	add	sp, #8
 80056e2:	bd80      	pop	{r7, pc}

080056e4 <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b082      	sub	sp, #8
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 80056ec:	46c0      	nop			; (mov r8, r8)
 80056ee:	46bd      	mov	sp, r7
 80056f0:	b002      	add	sp, #8
 80056f2:	bd80      	pop	{r7, pc}

080056f4 <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b082      	sub	sp, #8
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 80056fc:	46c0      	nop			; (mov r8, r8)
 80056fe:	46bd      	mov	sp, r7
 8005700:	b002      	add	sp, #8
 8005702:	bd80      	pop	{r7, pc}

08005704 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b082      	sub	sp, #8
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 800570c:	46c0      	nop			; (mov r8, r8)
 800570e:	46bd      	mov	sp, r7
 8005710:	b002      	add	sp, #8
 8005712:	bd80      	pop	{r7, pc}

08005714 <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b082      	sub	sp, #8
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 800571c:	46c0      	nop			; (mov r8, r8)
 800571e:	46bd      	mov	sp, r7
 8005720:	b002      	add	sp, #8
 8005722:	bd80      	pop	{r7, pc}

08005724 <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b082      	sub	sp, #8
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 800572c:	46c0      	nop			; (mov r8, r8)
 800572e:	46bd      	mov	sp, r7
 8005730:	b002      	add	sp, #8
 8005732:	bd80      	pop	{r7, pc}

08005734 <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b082      	sub	sp, #8
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 800573c:	46c0      	nop			; (mov r8, r8)
 800573e:	46bd      	mov	sp, r7
 8005740:	b002      	add	sp, #8
 8005742:	bd80      	pop	{r7, pc}

08005744 <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b082      	sub	sp, #8
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 800574c:	46c0      	nop			; (mov r8, r8)
 800574e:	46bd      	mov	sp, r7
 8005750:	b002      	add	sp, #8
 8005752:	bd80      	pop	{r7, pc}

08005754 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 8005758:	4b04      	ldr	r3, [pc, #16]	; (800576c <HAL_PWR_EnableBkUpAccess+0x18>)
 800575a:	681a      	ldr	r2, [r3, #0]
 800575c:	4b03      	ldr	r3, [pc, #12]	; (800576c <HAL_PWR_EnableBkUpAccess+0x18>)
 800575e:	2180      	movs	r1, #128	; 0x80
 8005760:	0049      	lsls	r1, r1, #1
 8005762:	430a      	orrs	r2, r1
 8005764:	601a      	str	r2, [r3, #0]
}
 8005766:	46c0      	nop			; (mov r8, r8)
 8005768:	46bd      	mov	sp, r7
 800576a:	bd80      	pop	{r7, pc}
 800576c:	40007000 	.word	0x40007000

08005770 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005770:	b5b0      	push	{r4, r5, r7, lr}
 8005772:	b08a      	sub	sp, #40	; 0x28
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d102      	bne.n	8005784 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800577e:	2301      	movs	r3, #1
 8005780:	f000 fbbc 	bl	8005efc <HAL_RCC_OscConfig+0x78c>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005784:	4bc8      	ldr	r3, [pc, #800]	; (8005aa8 <HAL_RCC_OscConfig+0x338>)
 8005786:	68db      	ldr	r3, [r3, #12]
 8005788:	220c      	movs	r2, #12
 800578a:	4013      	ands	r3, r2
 800578c:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800578e:	4bc6      	ldr	r3, [pc, #792]	; (8005aa8 <HAL_RCC_OscConfig+0x338>)
 8005790:	68da      	ldr	r2, [r3, #12]
 8005792:	2380      	movs	r3, #128	; 0x80
 8005794:	025b      	lsls	r3, r3, #9
 8005796:	4013      	ands	r3, r2
 8005798:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	2201      	movs	r2, #1
 80057a0:	4013      	ands	r3, r2
 80057a2:	d100      	bne.n	80057a6 <HAL_RCC_OscConfig+0x36>
 80057a4:	e07e      	b.n	80058a4 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80057a6:	69fb      	ldr	r3, [r7, #28]
 80057a8:	2b08      	cmp	r3, #8
 80057aa:	d007      	beq.n	80057bc <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80057ac:	69fb      	ldr	r3, [r7, #28]
 80057ae:	2b0c      	cmp	r3, #12
 80057b0:	d112      	bne.n	80057d8 <HAL_RCC_OscConfig+0x68>
 80057b2:	69ba      	ldr	r2, [r7, #24]
 80057b4:	2380      	movs	r3, #128	; 0x80
 80057b6:	025b      	lsls	r3, r3, #9
 80057b8:	429a      	cmp	r2, r3
 80057ba:	d10d      	bne.n	80057d8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057bc:	4bba      	ldr	r3, [pc, #744]	; (8005aa8 <HAL_RCC_OscConfig+0x338>)
 80057be:	681a      	ldr	r2, [r3, #0]
 80057c0:	2380      	movs	r3, #128	; 0x80
 80057c2:	029b      	lsls	r3, r3, #10
 80057c4:	4013      	ands	r3, r2
 80057c6:	d100      	bne.n	80057ca <HAL_RCC_OscConfig+0x5a>
 80057c8:	e06b      	b.n	80058a2 <HAL_RCC_OscConfig+0x132>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d167      	bne.n	80058a2 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80057d2:	2301      	movs	r3, #1
 80057d4:	f000 fb92 	bl	8005efc <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	685a      	ldr	r2, [r3, #4]
 80057dc:	2380      	movs	r3, #128	; 0x80
 80057de:	025b      	lsls	r3, r3, #9
 80057e0:	429a      	cmp	r2, r3
 80057e2:	d107      	bne.n	80057f4 <HAL_RCC_OscConfig+0x84>
 80057e4:	4bb0      	ldr	r3, [pc, #704]	; (8005aa8 <HAL_RCC_OscConfig+0x338>)
 80057e6:	681a      	ldr	r2, [r3, #0]
 80057e8:	4baf      	ldr	r3, [pc, #700]	; (8005aa8 <HAL_RCC_OscConfig+0x338>)
 80057ea:	2180      	movs	r1, #128	; 0x80
 80057ec:	0249      	lsls	r1, r1, #9
 80057ee:	430a      	orrs	r2, r1
 80057f0:	601a      	str	r2, [r3, #0]
 80057f2:	e027      	b.n	8005844 <HAL_RCC_OscConfig+0xd4>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	685a      	ldr	r2, [r3, #4]
 80057f8:	23a0      	movs	r3, #160	; 0xa0
 80057fa:	02db      	lsls	r3, r3, #11
 80057fc:	429a      	cmp	r2, r3
 80057fe:	d10e      	bne.n	800581e <HAL_RCC_OscConfig+0xae>
 8005800:	4ba9      	ldr	r3, [pc, #676]	; (8005aa8 <HAL_RCC_OscConfig+0x338>)
 8005802:	681a      	ldr	r2, [r3, #0]
 8005804:	4ba8      	ldr	r3, [pc, #672]	; (8005aa8 <HAL_RCC_OscConfig+0x338>)
 8005806:	2180      	movs	r1, #128	; 0x80
 8005808:	02c9      	lsls	r1, r1, #11
 800580a:	430a      	orrs	r2, r1
 800580c:	601a      	str	r2, [r3, #0]
 800580e:	4ba6      	ldr	r3, [pc, #664]	; (8005aa8 <HAL_RCC_OscConfig+0x338>)
 8005810:	681a      	ldr	r2, [r3, #0]
 8005812:	4ba5      	ldr	r3, [pc, #660]	; (8005aa8 <HAL_RCC_OscConfig+0x338>)
 8005814:	2180      	movs	r1, #128	; 0x80
 8005816:	0249      	lsls	r1, r1, #9
 8005818:	430a      	orrs	r2, r1
 800581a:	601a      	str	r2, [r3, #0]
 800581c:	e012      	b.n	8005844 <HAL_RCC_OscConfig+0xd4>
 800581e:	4ba2      	ldr	r3, [pc, #648]	; (8005aa8 <HAL_RCC_OscConfig+0x338>)
 8005820:	681a      	ldr	r2, [r3, #0]
 8005822:	4ba1      	ldr	r3, [pc, #644]	; (8005aa8 <HAL_RCC_OscConfig+0x338>)
 8005824:	49a1      	ldr	r1, [pc, #644]	; (8005aac <HAL_RCC_OscConfig+0x33c>)
 8005826:	400a      	ands	r2, r1
 8005828:	601a      	str	r2, [r3, #0]
 800582a:	4b9f      	ldr	r3, [pc, #636]	; (8005aa8 <HAL_RCC_OscConfig+0x338>)
 800582c:	681a      	ldr	r2, [r3, #0]
 800582e:	2380      	movs	r3, #128	; 0x80
 8005830:	025b      	lsls	r3, r3, #9
 8005832:	4013      	ands	r3, r2
 8005834:	60fb      	str	r3, [r7, #12]
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	4b9b      	ldr	r3, [pc, #620]	; (8005aa8 <HAL_RCC_OscConfig+0x338>)
 800583a:	681a      	ldr	r2, [r3, #0]
 800583c:	4b9a      	ldr	r3, [pc, #616]	; (8005aa8 <HAL_RCC_OscConfig+0x338>)
 800583e:	499c      	ldr	r1, [pc, #624]	; (8005ab0 <HAL_RCC_OscConfig+0x340>)
 8005840:	400a      	ands	r2, r1
 8005842:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d015      	beq.n	8005878 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800584c:	f7fe ff50 	bl	80046f0 <HAL_GetTick>
 8005850:	0003      	movs	r3, r0
 8005852:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005854:	e009      	b.n	800586a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005856:	f7fe ff4b 	bl	80046f0 <HAL_GetTick>
 800585a:	0002      	movs	r2, r0
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	1ad3      	subs	r3, r2, r3
 8005860:	2b64      	cmp	r3, #100	; 0x64
 8005862:	d902      	bls.n	800586a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005864:	2303      	movs	r3, #3
 8005866:	f000 fb49 	bl	8005efc <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800586a:	4b8f      	ldr	r3, [pc, #572]	; (8005aa8 <HAL_RCC_OscConfig+0x338>)
 800586c:	681a      	ldr	r2, [r3, #0]
 800586e:	2380      	movs	r3, #128	; 0x80
 8005870:	029b      	lsls	r3, r3, #10
 8005872:	4013      	ands	r3, r2
 8005874:	d0ef      	beq.n	8005856 <HAL_RCC_OscConfig+0xe6>
 8005876:	e015      	b.n	80058a4 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005878:	f7fe ff3a 	bl	80046f0 <HAL_GetTick>
 800587c:	0003      	movs	r3, r0
 800587e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005880:	e008      	b.n	8005894 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005882:	f7fe ff35 	bl	80046f0 <HAL_GetTick>
 8005886:	0002      	movs	r2, r0
 8005888:	697b      	ldr	r3, [r7, #20]
 800588a:	1ad3      	subs	r3, r2, r3
 800588c:	2b64      	cmp	r3, #100	; 0x64
 800588e:	d901      	bls.n	8005894 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8005890:	2303      	movs	r3, #3
 8005892:	e333      	b.n	8005efc <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005894:	4b84      	ldr	r3, [pc, #528]	; (8005aa8 <HAL_RCC_OscConfig+0x338>)
 8005896:	681a      	ldr	r2, [r3, #0]
 8005898:	2380      	movs	r3, #128	; 0x80
 800589a:	029b      	lsls	r3, r3, #10
 800589c:	4013      	ands	r3, r2
 800589e:	d1f0      	bne.n	8005882 <HAL_RCC_OscConfig+0x112>
 80058a0:	e000      	b.n	80058a4 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058a2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	2202      	movs	r2, #2
 80058aa:	4013      	ands	r3, r2
 80058ac:	d100      	bne.n	80058b0 <HAL_RCC_OscConfig+0x140>
 80058ae:	e098      	b.n	80059e2 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	68db      	ldr	r3, [r3, #12]
 80058b4:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80058b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b8:	2220      	movs	r2, #32
 80058ba:	4013      	ands	r3, r2
 80058bc:	d009      	beq.n	80058d2 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80058be:	4b7a      	ldr	r3, [pc, #488]	; (8005aa8 <HAL_RCC_OscConfig+0x338>)
 80058c0:	681a      	ldr	r2, [r3, #0]
 80058c2:	4b79      	ldr	r3, [pc, #484]	; (8005aa8 <HAL_RCC_OscConfig+0x338>)
 80058c4:	2120      	movs	r1, #32
 80058c6:	430a      	orrs	r2, r1
 80058c8:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 80058ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058cc:	2220      	movs	r2, #32
 80058ce:	4393      	bics	r3, r2
 80058d0:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80058d2:	69fb      	ldr	r3, [r7, #28]
 80058d4:	2b04      	cmp	r3, #4
 80058d6:	d005      	beq.n	80058e4 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80058d8:	69fb      	ldr	r3, [r7, #28]
 80058da:	2b0c      	cmp	r3, #12
 80058dc:	d13d      	bne.n	800595a <HAL_RCC_OscConfig+0x1ea>
 80058de:	69bb      	ldr	r3, [r7, #24]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d13a      	bne.n	800595a <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80058e4:	4b70      	ldr	r3, [pc, #448]	; (8005aa8 <HAL_RCC_OscConfig+0x338>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	2204      	movs	r2, #4
 80058ea:	4013      	ands	r3, r2
 80058ec:	d004      	beq.n	80058f8 <HAL_RCC_OscConfig+0x188>
 80058ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d101      	bne.n	80058f8 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80058f4:	2301      	movs	r3, #1
 80058f6:	e301      	b.n	8005efc <HAL_RCC_OscConfig+0x78c>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058f8:	4b6b      	ldr	r3, [pc, #428]	; (8005aa8 <HAL_RCC_OscConfig+0x338>)
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	4a6d      	ldr	r2, [pc, #436]	; (8005ab4 <HAL_RCC_OscConfig+0x344>)
 80058fe:	4013      	ands	r3, r2
 8005900:	0019      	movs	r1, r3
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	691b      	ldr	r3, [r3, #16]
 8005906:	021a      	lsls	r2, r3, #8
 8005908:	4b67      	ldr	r3, [pc, #412]	; (8005aa8 <HAL_RCC_OscConfig+0x338>)
 800590a:	430a      	orrs	r2, r1
 800590c:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800590e:	4b66      	ldr	r3, [pc, #408]	; (8005aa8 <HAL_RCC_OscConfig+0x338>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	2209      	movs	r2, #9
 8005914:	4393      	bics	r3, r2
 8005916:	0019      	movs	r1, r3
 8005918:	4b63      	ldr	r3, [pc, #396]	; (8005aa8 <HAL_RCC_OscConfig+0x338>)
 800591a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800591c:	430a      	orrs	r2, r1
 800591e:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005920:	f000 fc20 	bl	8006164 <HAL_RCC_GetSysClockFreq>
 8005924:	0001      	movs	r1, r0
 8005926:	4b60      	ldr	r3, [pc, #384]	; (8005aa8 <HAL_RCC_OscConfig+0x338>)
 8005928:	68db      	ldr	r3, [r3, #12]
 800592a:	091b      	lsrs	r3, r3, #4
 800592c:	220f      	movs	r2, #15
 800592e:	4013      	ands	r3, r2
 8005930:	4a61      	ldr	r2, [pc, #388]	; (8005ab8 <HAL_RCC_OscConfig+0x348>)
 8005932:	5cd3      	ldrb	r3, [r2, r3]
 8005934:	000a      	movs	r2, r1
 8005936:	40da      	lsrs	r2, r3
 8005938:	4b60      	ldr	r3, [pc, #384]	; (8005abc <HAL_RCC_OscConfig+0x34c>)
 800593a:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (TICK_INT_PRIORITY);
 800593c:	2513      	movs	r5, #19
 800593e:	197c      	adds	r4, r7, r5
 8005940:	2000      	movs	r0, #0
 8005942:	f7fe fe9f 	bl	8004684 <HAL_InitTick>
 8005946:	0003      	movs	r3, r0
 8005948:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800594a:	197b      	adds	r3, r7, r5
 800594c:	781b      	ldrb	r3, [r3, #0]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d047      	beq.n	80059e2 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8005952:	2313      	movs	r3, #19
 8005954:	18fb      	adds	r3, r7, r3
 8005956:	781b      	ldrb	r3, [r3, #0]
 8005958:	e2d0      	b.n	8005efc <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800595a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800595c:	2b00      	cmp	r3, #0
 800595e:	d027      	beq.n	80059b0 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8005960:	4b51      	ldr	r3, [pc, #324]	; (8005aa8 <HAL_RCC_OscConfig+0x338>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	2209      	movs	r2, #9
 8005966:	4393      	bics	r3, r2
 8005968:	0019      	movs	r1, r3
 800596a:	4b4f      	ldr	r3, [pc, #316]	; (8005aa8 <HAL_RCC_OscConfig+0x338>)
 800596c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800596e:	430a      	orrs	r2, r1
 8005970:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005972:	f7fe febd 	bl	80046f0 <HAL_GetTick>
 8005976:	0003      	movs	r3, r0
 8005978:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800597a:	e008      	b.n	800598e <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800597c:	f7fe feb8 	bl	80046f0 <HAL_GetTick>
 8005980:	0002      	movs	r2, r0
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	1ad3      	subs	r3, r2, r3
 8005986:	2b02      	cmp	r3, #2
 8005988:	d901      	bls.n	800598e <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 800598a:	2303      	movs	r3, #3
 800598c:	e2b6      	b.n	8005efc <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800598e:	4b46      	ldr	r3, [pc, #280]	; (8005aa8 <HAL_RCC_OscConfig+0x338>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	2204      	movs	r2, #4
 8005994:	4013      	ands	r3, r2
 8005996:	d0f1      	beq.n	800597c <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005998:	4b43      	ldr	r3, [pc, #268]	; (8005aa8 <HAL_RCC_OscConfig+0x338>)
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	4a45      	ldr	r2, [pc, #276]	; (8005ab4 <HAL_RCC_OscConfig+0x344>)
 800599e:	4013      	ands	r3, r2
 80059a0:	0019      	movs	r1, r3
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	691b      	ldr	r3, [r3, #16]
 80059a6:	021a      	lsls	r2, r3, #8
 80059a8:	4b3f      	ldr	r3, [pc, #252]	; (8005aa8 <HAL_RCC_OscConfig+0x338>)
 80059aa:	430a      	orrs	r2, r1
 80059ac:	605a      	str	r2, [r3, #4]
 80059ae:	e018      	b.n	80059e2 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80059b0:	4b3d      	ldr	r3, [pc, #244]	; (8005aa8 <HAL_RCC_OscConfig+0x338>)
 80059b2:	681a      	ldr	r2, [r3, #0]
 80059b4:	4b3c      	ldr	r3, [pc, #240]	; (8005aa8 <HAL_RCC_OscConfig+0x338>)
 80059b6:	2101      	movs	r1, #1
 80059b8:	438a      	bics	r2, r1
 80059ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059bc:	f7fe fe98 	bl	80046f0 <HAL_GetTick>
 80059c0:	0003      	movs	r3, r0
 80059c2:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80059c4:	e008      	b.n	80059d8 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80059c6:	f7fe fe93 	bl	80046f0 <HAL_GetTick>
 80059ca:	0002      	movs	r2, r0
 80059cc:	697b      	ldr	r3, [r7, #20]
 80059ce:	1ad3      	subs	r3, r2, r3
 80059d0:	2b02      	cmp	r3, #2
 80059d2:	d901      	bls.n	80059d8 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 80059d4:	2303      	movs	r3, #3
 80059d6:	e291      	b.n	8005efc <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80059d8:	4b33      	ldr	r3, [pc, #204]	; (8005aa8 <HAL_RCC_OscConfig+0x338>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	2204      	movs	r2, #4
 80059de:	4013      	ands	r3, r2
 80059e0:	d1f1      	bne.n	80059c6 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	2210      	movs	r2, #16
 80059e8:	4013      	ands	r3, r2
 80059ea:	d100      	bne.n	80059ee <HAL_RCC_OscConfig+0x27e>
 80059ec:	e09f      	b.n	8005b2e <HAL_RCC_OscConfig+0x3be>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 80059ee:	69fb      	ldr	r3, [r7, #28]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d13f      	bne.n	8005a74 <HAL_RCC_OscConfig+0x304>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80059f4:	4b2c      	ldr	r3, [pc, #176]	; (8005aa8 <HAL_RCC_OscConfig+0x338>)
 80059f6:	681a      	ldr	r2, [r3, #0]
 80059f8:	2380      	movs	r3, #128	; 0x80
 80059fa:	009b      	lsls	r3, r3, #2
 80059fc:	4013      	ands	r3, r2
 80059fe:	d005      	beq.n	8005a0c <HAL_RCC_OscConfig+0x29c>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	69db      	ldr	r3, [r3, #28]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d101      	bne.n	8005a0c <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8005a08:	2301      	movs	r3, #1
 8005a0a:	e277      	b.n	8005efc <HAL_RCC_OscConfig+0x78c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005a0c:	4b26      	ldr	r3, [pc, #152]	; (8005aa8 <HAL_RCC_OscConfig+0x338>)
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	4a2b      	ldr	r2, [pc, #172]	; (8005ac0 <HAL_RCC_OscConfig+0x350>)
 8005a12:	4013      	ands	r3, r2
 8005a14:	0019      	movs	r1, r3
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005a1a:	4b23      	ldr	r3, [pc, #140]	; (8005aa8 <HAL_RCC_OscConfig+0x338>)
 8005a1c:	430a      	orrs	r2, r1
 8005a1e:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005a20:	4b21      	ldr	r3, [pc, #132]	; (8005aa8 <HAL_RCC_OscConfig+0x338>)
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	021b      	lsls	r3, r3, #8
 8005a26:	0a19      	lsrs	r1, r3, #8
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6a1b      	ldr	r3, [r3, #32]
 8005a2c:	061a      	lsls	r2, r3, #24
 8005a2e:	4b1e      	ldr	r3, [pc, #120]	; (8005aa8 <HAL_RCC_OscConfig+0x338>)
 8005a30:	430a      	orrs	r2, r1
 8005a32:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a38:	0b5b      	lsrs	r3, r3, #13
 8005a3a:	3301      	adds	r3, #1
 8005a3c:	2280      	movs	r2, #128	; 0x80
 8005a3e:	0212      	lsls	r2, r2, #8
 8005a40:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8005a42:	4b19      	ldr	r3, [pc, #100]	; (8005aa8 <HAL_RCC_OscConfig+0x338>)
 8005a44:	68db      	ldr	r3, [r3, #12]
 8005a46:	091b      	lsrs	r3, r3, #4
 8005a48:	210f      	movs	r1, #15
 8005a4a:	400b      	ands	r3, r1
 8005a4c:	491a      	ldr	r1, [pc, #104]	; (8005ab8 <HAL_RCC_OscConfig+0x348>)
 8005a4e:	5ccb      	ldrb	r3, [r1, r3]
 8005a50:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8005a52:	4b1a      	ldr	r3, [pc, #104]	; (8005abc <HAL_RCC_OscConfig+0x34c>)
 8005a54:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8005a56:	2513      	movs	r5, #19
 8005a58:	197c      	adds	r4, r7, r5
 8005a5a:	2000      	movs	r0, #0
 8005a5c:	f7fe fe12 	bl	8004684 <HAL_InitTick>
 8005a60:	0003      	movs	r3, r0
 8005a62:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8005a64:	197b      	adds	r3, r7, r5
 8005a66:	781b      	ldrb	r3, [r3, #0]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d060      	beq.n	8005b2e <HAL_RCC_OscConfig+0x3be>
        {
          return status;
 8005a6c:	2313      	movs	r3, #19
 8005a6e:	18fb      	adds	r3, r7, r3
 8005a70:	781b      	ldrb	r3, [r3, #0]
 8005a72:	e243      	b.n	8005efc <HAL_RCC_OscConfig+0x78c>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	69db      	ldr	r3, [r3, #28]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d03e      	beq.n	8005afa <HAL_RCC_OscConfig+0x38a>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005a7c:	4b0a      	ldr	r3, [pc, #40]	; (8005aa8 <HAL_RCC_OscConfig+0x338>)
 8005a7e:	681a      	ldr	r2, [r3, #0]
 8005a80:	4b09      	ldr	r3, [pc, #36]	; (8005aa8 <HAL_RCC_OscConfig+0x338>)
 8005a82:	2180      	movs	r1, #128	; 0x80
 8005a84:	0049      	lsls	r1, r1, #1
 8005a86:	430a      	orrs	r2, r1
 8005a88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a8a:	f7fe fe31 	bl	80046f0 <HAL_GetTick>
 8005a8e:	0003      	movs	r3, r0
 8005a90:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005a92:	e017      	b.n	8005ac4 <HAL_RCC_OscConfig+0x354>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005a94:	f7fe fe2c 	bl	80046f0 <HAL_GetTick>
 8005a98:	0002      	movs	r2, r0
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	1ad3      	subs	r3, r2, r3
 8005a9e:	2b02      	cmp	r3, #2
 8005aa0:	d910      	bls.n	8005ac4 <HAL_RCC_OscConfig+0x354>
          {
            return HAL_TIMEOUT;
 8005aa2:	2303      	movs	r3, #3
 8005aa4:	e22a      	b.n	8005efc <HAL_RCC_OscConfig+0x78c>
 8005aa6:	46c0      	nop			; (mov r8, r8)
 8005aa8:	40021000 	.word	0x40021000
 8005aac:	fffeffff 	.word	0xfffeffff
 8005ab0:	fffbffff 	.word	0xfffbffff
 8005ab4:	ffffe0ff 	.word	0xffffe0ff
 8005ab8:	080097d4 	.word	0x080097d4
 8005abc:	20000064 	.word	0x20000064
 8005ac0:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005ac4:	4bc6      	ldr	r3, [pc, #792]	; (8005de0 <HAL_RCC_OscConfig+0x670>)
 8005ac6:	681a      	ldr	r2, [r3, #0]
 8005ac8:	2380      	movs	r3, #128	; 0x80
 8005aca:	009b      	lsls	r3, r3, #2
 8005acc:	4013      	ands	r3, r2
 8005ace:	d0e1      	beq.n	8005a94 <HAL_RCC_OscConfig+0x324>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005ad0:	4bc3      	ldr	r3, [pc, #780]	; (8005de0 <HAL_RCC_OscConfig+0x670>)
 8005ad2:	685b      	ldr	r3, [r3, #4]
 8005ad4:	4ac3      	ldr	r2, [pc, #780]	; (8005de4 <HAL_RCC_OscConfig+0x674>)
 8005ad6:	4013      	ands	r3, r2
 8005ad8:	0019      	movs	r1, r3
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005ade:	4bc0      	ldr	r3, [pc, #768]	; (8005de0 <HAL_RCC_OscConfig+0x670>)
 8005ae0:	430a      	orrs	r2, r1
 8005ae2:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005ae4:	4bbe      	ldr	r3, [pc, #760]	; (8005de0 <HAL_RCC_OscConfig+0x670>)
 8005ae6:	685b      	ldr	r3, [r3, #4]
 8005ae8:	021b      	lsls	r3, r3, #8
 8005aea:	0a19      	lsrs	r1, r3, #8
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6a1b      	ldr	r3, [r3, #32]
 8005af0:	061a      	lsls	r2, r3, #24
 8005af2:	4bbb      	ldr	r3, [pc, #748]	; (8005de0 <HAL_RCC_OscConfig+0x670>)
 8005af4:	430a      	orrs	r2, r1
 8005af6:	605a      	str	r2, [r3, #4]
 8005af8:	e019      	b.n	8005b2e <HAL_RCC_OscConfig+0x3be>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005afa:	4bb9      	ldr	r3, [pc, #740]	; (8005de0 <HAL_RCC_OscConfig+0x670>)
 8005afc:	681a      	ldr	r2, [r3, #0]
 8005afe:	4bb8      	ldr	r3, [pc, #736]	; (8005de0 <HAL_RCC_OscConfig+0x670>)
 8005b00:	49b9      	ldr	r1, [pc, #740]	; (8005de8 <HAL_RCC_OscConfig+0x678>)
 8005b02:	400a      	ands	r2, r1
 8005b04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b06:	f7fe fdf3 	bl	80046f0 <HAL_GetTick>
 8005b0a:	0003      	movs	r3, r0
 8005b0c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8005b0e:	e008      	b.n	8005b22 <HAL_RCC_OscConfig+0x3b2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005b10:	f7fe fdee 	bl	80046f0 <HAL_GetTick>
 8005b14:	0002      	movs	r2, r0
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	1ad3      	subs	r3, r2, r3
 8005b1a:	2b02      	cmp	r3, #2
 8005b1c:	d901      	bls.n	8005b22 <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 8005b1e:	2303      	movs	r3, #3
 8005b20:	e1ec      	b.n	8005efc <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8005b22:	4baf      	ldr	r3, [pc, #700]	; (8005de0 <HAL_RCC_OscConfig+0x670>)
 8005b24:	681a      	ldr	r2, [r3, #0]
 8005b26:	2380      	movs	r3, #128	; 0x80
 8005b28:	009b      	lsls	r3, r3, #2
 8005b2a:	4013      	ands	r3, r2
 8005b2c:	d1f0      	bne.n	8005b10 <HAL_RCC_OscConfig+0x3a0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	2208      	movs	r2, #8
 8005b34:	4013      	ands	r3, r2
 8005b36:	d036      	beq.n	8005ba6 <HAL_RCC_OscConfig+0x436>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	695b      	ldr	r3, [r3, #20]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d019      	beq.n	8005b74 <HAL_RCC_OscConfig+0x404>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005b40:	4ba7      	ldr	r3, [pc, #668]	; (8005de0 <HAL_RCC_OscConfig+0x670>)
 8005b42:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005b44:	4ba6      	ldr	r3, [pc, #664]	; (8005de0 <HAL_RCC_OscConfig+0x670>)
 8005b46:	2101      	movs	r1, #1
 8005b48:	430a      	orrs	r2, r1
 8005b4a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b4c:	f7fe fdd0 	bl	80046f0 <HAL_GetTick>
 8005b50:	0003      	movs	r3, r0
 8005b52:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005b54:	e008      	b.n	8005b68 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005b56:	f7fe fdcb 	bl	80046f0 <HAL_GetTick>
 8005b5a:	0002      	movs	r2, r0
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	1ad3      	subs	r3, r2, r3
 8005b60:	2b02      	cmp	r3, #2
 8005b62:	d901      	bls.n	8005b68 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8005b64:	2303      	movs	r3, #3
 8005b66:	e1c9      	b.n	8005efc <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005b68:	4b9d      	ldr	r3, [pc, #628]	; (8005de0 <HAL_RCC_OscConfig+0x670>)
 8005b6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b6c:	2202      	movs	r2, #2
 8005b6e:	4013      	ands	r3, r2
 8005b70:	d0f1      	beq.n	8005b56 <HAL_RCC_OscConfig+0x3e6>
 8005b72:	e018      	b.n	8005ba6 <HAL_RCC_OscConfig+0x436>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005b74:	4b9a      	ldr	r3, [pc, #616]	; (8005de0 <HAL_RCC_OscConfig+0x670>)
 8005b76:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005b78:	4b99      	ldr	r3, [pc, #612]	; (8005de0 <HAL_RCC_OscConfig+0x670>)
 8005b7a:	2101      	movs	r1, #1
 8005b7c:	438a      	bics	r2, r1
 8005b7e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b80:	f7fe fdb6 	bl	80046f0 <HAL_GetTick>
 8005b84:	0003      	movs	r3, r0
 8005b86:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005b88:	e008      	b.n	8005b9c <HAL_RCC_OscConfig+0x42c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005b8a:	f7fe fdb1 	bl	80046f0 <HAL_GetTick>
 8005b8e:	0002      	movs	r2, r0
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	1ad3      	subs	r3, r2, r3
 8005b94:	2b02      	cmp	r3, #2
 8005b96:	d901      	bls.n	8005b9c <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8005b98:	2303      	movs	r3, #3
 8005b9a:	e1af      	b.n	8005efc <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005b9c:	4b90      	ldr	r3, [pc, #576]	; (8005de0 <HAL_RCC_OscConfig+0x670>)
 8005b9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ba0:	2202      	movs	r2, #2
 8005ba2:	4013      	ands	r3, r2
 8005ba4:	d1f1      	bne.n	8005b8a <HAL_RCC_OscConfig+0x41a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	2204      	movs	r2, #4
 8005bac:	4013      	ands	r3, r2
 8005bae:	d100      	bne.n	8005bb2 <HAL_RCC_OscConfig+0x442>
 8005bb0:	e0af      	b.n	8005d12 <HAL_RCC_OscConfig+0x5a2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005bb2:	2323      	movs	r3, #35	; 0x23
 8005bb4:	18fb      	adds	r3, r7, r3
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005bba:	4b89      	ldr	r3, [pc, #548]	; (8005de0 <HAL_RCC_OscConfig+0x670>)
 8005bbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005bbe:	2380      	movs	r3, #128	; 0x80
 8005bc0:	055b      	lsls	r3, r3, #21
 8005bc2:	4013      	ands	r3, r2
 8005bc4:	d10a      	bne.n	8005bdc <HAL_RCC_OscConfig+0x46c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005bc6:	4b86      	ldr	r3, [pc, #536]	; (8005de0 <HAL_RCC_OscConfig+0x670>)
 8005bc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005bca:	4b85      	ldr	r3, [pc, #532]	; (8005de0 <HAL_RCC_OscConfig+0x670>)
 8005bcc:	2180      	movs	r1, #128	; 0x80
 8005bce:	0549      	lsls	r1, r1, #21
 8005bd0:	430a      	orrs	r2, r1
 8005bd2:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8005bd4:	2323      	movs	r3, #35	; 0x23
 8005bd6:	18fb      	adds	r3, r7, r3
 8005bd8:	2201      	movs	r2, #1
 8005bda:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bdc:	4b83      	ldr	r3, [pc, #524]	; (8005dec <HAL_RCC_OscConfig+0x67c>)
 8005bde:	681a      	ldr	r2, [r3, #0]
 8005be0:	2380      	movs	r3, #128	; 0x80
 8005be2:	005b      	lsls	r3, r3, #1
 8005be4:	4013      	ands	r3, r2
 8005be6:	d11a      	bne.n	8005c1e <HAL_RCC_OscConfig+0x4ae>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005be8:	4b80      	ldr	r3, [pc, #512]	; (8005dec <HAL_RCC_OscConfig+0x67c>)
 8005bea:	681a      	ldr	r2, [r3, #0]
 8005bec:	4b7f      	ldr	r3, [pc, #508]	; (8005dec <HAL_RCC_OscConfig+0x67c>)
 8005bee:	2180      	movs	r1, #128	; 0x80
 8005bf0:	0049      	lsls	r1, r1, #1
 8005bf2:	430a      	orrs	r2, r1
 8005bf4:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005bf6:	f7fe fd7b 	bl	80046f0 <HAL_GetTick>
 8005bfa:	0003      	movs	r3, r0
 8005bfc:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bfe:	e008      	b.n	8005c12 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c00:	f7fe fd76 	bl	80046f0 <HAL_GetTick>
 8005c04:	0002      	movs	r2, r0
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	1ad3      	subs	r3, r2, r3
 8005c0a:	2b64      	cmp	r3, #100	; 0x64
 8005c0c:	d901      	bls.n	8005c12 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8005c0e:	2303      	movs	r3, #3
 8005c10:	e174      	b.n	8005efc <HAL_RCC_OscConfig+0x78c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c12:	4b76      	ldr	r3, [pc, #472]	; (8005dec <HAL_RCC_OscConfig+0x67c>)
 8005c14:	681a      	ldr	r2, [r3, #0]
 8005c16:	2380      	movs	r3, #128	; 0x80
 8005c18:	005b      	lsls	r3, r3, #1
 8005c1a:	4013      	ands	r3, r2
 8005c1c:	d0f0      	beq.n	8005c00 <HAL_RCC_OscConfig+0x490>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	689a      	ldr	r2, [r3, #8]
 8005c22:	2380      	movs	r3, #128	; 0x80
 8005c24:	005b      	lsls	r3, r3, #1
 8005c26:	429a      	cmp	r2, r3
 8005c28:	d107      	bne.n	8005c3a <HAL_RCC_OscConfig+0x4ca>
 8005c2a:	4b6d      	ldr	r3, [pc, #436]	; (8005de0 <HAL_RCC_OscConfig+0x670>)
 8005c2c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005c2e:	4b6c      	ldr	r3, [pc, #432]	; (8005de0 <HAL_RCC_OscConfig+0x670>)
 8005c30:	2180      	movs	r1, #128	; 0x80
 8005c32:	0049      	lsls	r1, r1, #1
 8005c34:	430a      	orrs	r2, r1
 8005c36:	651a      	str	r2, [r3, #80]	; 0x50
 8005c38:	e031      	b.n	8005c9e <HAL_RCC_OscConfig+0x52e>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	689b      	ldr	r3, [r3, #8]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d10c      	bne.n	8005c5c <HAL_RCC_OscConfig+0x4ec>
 8005c42:	4b67      	ldr	r3, [pc, #412]	; (8005de0 <HAL_RCC_OscConfig+0x670>)
 8005c44:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005c46:	4b66      	ldr	r3, [pc, #408]	; (8005de0 <HAL_RCC_OscConfig+0x670>)
 8005c48:	4967      	ldr	r1, [pc, #412]	; (8005de8 <HAL_RCC_OscConfig+0x678>)
 8005c4a:	400a      	ands	r2, r1
 8005c4c:	651a      	str	r2, [r3, #80]	; 0x50
 8005c4e:	4b64      	ldr	r3, [pc, #400]	; (8005de0 <HAL_RCC_OscConfig+0x670>)
 8005c50:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005c52:	4b63      	ldr	r3, [pc, #396]	; (8005de0 <HAL_RCC_OscConfig+0x670>)
 8005c54:	4966      	ldr	r1, [pc, #408]	; (8005df0 <HAL_RCC_OscConfig+0x680>)
 8005c56:	400a      	ands	r2, r1
 8005c58:	651a      	str	r2, [r3, #80]	; 0x50
 8005c5a:	e020      	b.n	8005c9e <HAL_RCC_OscConfig+0x52e>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	689a      	ldr	r2, [r3, #8]
 8005c60:	23a0      	movs	r3, #160	; 0xa0
 8005c62:	00db      	lsls	r3, r3, #3
 8005c64:	429a      	cmp	r2, r3
 8005c66:	d10e      	bne.n	8005c86 <HAL_RCC_OscConfig+0x516>
 8005c68:	4b5d      	ldr	r3, [pc, #372]	; (8005de0 <HAL_RCC_OscConfig+0x670>)
 8005c6a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005c6c:	4b5c      	ldr	r3, [pc, #368]	; (8005de0 <HAL_RCC_OscConfig+0x670>)
 8005c6e:	2180      	movs	r1, #128	; 0x80
 8005c70:	00c9      	lsls	r1, r1, #3
 8005c72:	430a      	orrs	r2, r1
 8005c74:	651a      	str	r2, [r3, #80]	; 0x50
 8005c76:	4b5a      	ldr	r3, [pc, #360]	; (8005de0 <HAL_RCC_OscConfig+0x670>)
 8005c78:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005c7a:	4b59      	ldr	r3, [pc, #356]	; (8005de0 <HAL_RCC_OscConfig+0x670>)
 8005c7c:	2180      	movs	r1, #128	; 0x80
 8005c7e:	0049      	lsls	r1, r1, #1
 8005c80:	430a      	orrs	r2, r1
 8005c82:	651a      	str	r2, [r3, #80]	; 0x50
 8005c84:	e00b      	b.n	8005c9e <HAL_RCC_OscConfig+0x52e>
 8005c86:	4b56      	ldr	r3, [pc, #344]	; (8005de0 <HAL_RCC_OscConfig+0x670>)
 8005c88:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005c8a:	4b55      	ldr	r3, [pc, #340]	; (8005de0 <HAL_RCC_OscConfig+0x670>)
 8005c8c:	4956      	ldr	r1, [pc, #344]	; (8005de8 <HAL_RCC_OscConfig+0x678>)
 8005c8e:	400a      	ands	r2, r1
 8005c90:	651a      	str	r2, [r3, #80]	; 0x50
 8005c92:	4b53      	ldr	r3, [pc, #332]	; (8005de0 <HAL_RCC_OscConfig+0x670>)
 8005c94:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005c96:	4b52      	ldr	r3, [pc, #328]	; (8005de0 <HAL_RCC_OscConfig+0x670>)
 8005c98:	4955      	ldr	r1, [pc, #340]	; (8005df0 <HAL_RCC_OscConfig+0x680>)
 8005c9a:	400a      	ands	r2, r1
 8005c9c:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	689b      	ldr	r3, [r3, #8]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d015      	beq.n	8005cd2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ca6:	f7fe fd23 	bl	80046f0 <HAL_GetTick>
 8005caa:	0003      	movs	r3, r0
 8005cac:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005cae:	e009      	b.n	8005cc4 <HAL_RCC_OscConfig+0x554>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005cb0:	f7fe fd1e 	bl	80046f0 <HAL_GetTick>
 8005cb4:	0002      	movs	r2, r0
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	1ad3      	subs	r3, r2, r3
 8005cba:	4a4e      	ldr	r2, [pc, #312]	; (8005df4 <HAL_RCC_OscConfig+0x684>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d901      	bls.n	8005cc4 <HAL_RCC_OscConfig+0x554>
        {
          return HAL_TIMEOUT;
 8005cc0:	2303      	movs	r3, #3
 8005cc2:	e11b      	b.n	8005efc <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005cc4:	4b46      	ldr	r3, [pc, #280]	; (8005de0 <HAL_RCC_OscConfig+0x670>)
 8005cc6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005cc8:	2380      	movs	r3, #128	; 0x80
 8005cca:	009b      	lsls	r3, r3, #2
 8005ccc:	4013      	ands	r3, r2
 8005cce:	d0ef      	beq.n	8005cb0 <HAL_RCC_OscConfig+0x540>
 8005cd0:	e014      	b.n	8005cfc <HAL_RCC_OscConfig+0x58c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005cd2:	f7fe fd0d 	bl	80046f0 <HAL_GetTick>
 8005cd6:	0003      	movs	r3, r0
 8005cd8:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005cda:	e009      	b.n	8005cf0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005cdc:	f7fe fd08 	bl	80046f0 <HAL_GetTick>
 8005ce0:	0002      	movs	r2, r0
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	1ad3      	subs	r3, r2, r3
 8005ce6:	4a43      	ldr	r2, [pc, #268]	; (8005df4 <HAL_RCC_OscConfig+0x684>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d901      	bls.n	8005cf0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005cec:	2303      	movs	r3, #3
 8005cee:	e105      	b.n	8005efc <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005cf0:	4b3b      	ldr	r3, [pc, #236]	; (8005de0 <HAL_RCC_OscConfig+0x670>)
 8005cf2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005cf4:	2380      	movs	r3, #128	; 0x80
 8005cf6:	009b      	lsls	r3, r3, #2
 8005cf8:	4013      	ands	r3, r2
 8005cfa:	d1ef      	bne.n	8005cdc <HAL_RCC_OscConfig+0x56c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005cfc:	2323      	movs	r3, #35	; 0x23
 8005cfe:	18fb      	adds	r3, r7, r3
 8005d00:	781b      	ldrb	r3, [r3, #0]
 8005d02:	2b01      	cmp	r3, #1
 8005d04:	d105      	bne.n	8005d12 <HAL_RCC_OscConfig+0x5a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d06:	4b36      	ldr	r3, [pc, #216]	; (8005de0 <HAL_RCC_OscConfig+0x670>)
 8005d08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d0a:	4b35      	ldr	r3, [pc, #212]	; (8005de0 <HAL_RCC_OscConfig+0x670>)
 8005d0c:	493a      	ldr	r1, [pc, #232]	; (8005df8 <HAL_RCC_OscConfig+0x688>)
 8005d0e:	400a      	ands	r2, r1
 8005d10:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	2220      	movs	r2, #32
 8005d18:	4013      	ands	r3, r2
 8005d1a:	d049      	beq.n	8005db0 <HAL_RCC_OscConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	699b      	ldr	r3, [r3, #24]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d026      	beq.n	8005d72 <HAL_RCC_OscConfig+0x602>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8005d24:	4b2e      	ldr	r3, [pc, #184]	; (8005de0 <HAL_RCC_OscConfig+0x670>)
 8005d26:	689a      	ldr	r2, [r3, #8]
 8005d28:	4b2d      	ldr	r3, [pc, #180]	; (8005de0 <HAL_RCC_OscConfig+0x670>)
 8005d2a:	2101      	movs	r1, #1
 8005d2c:	430a      	orrs	r2, r1
 8005d2e:	609a      	str	r2, [r3, #8]
 8005d30:	4b2b      	ldr	r3, [pc, #172]	; (8005de0 <HAL_RCC_OscConfig+0x670>)
 8005d32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d34:	4b2a      	ldr	r3, [pc, #168]	; (8005de0 <HAL_RCC_OscConfig+0x670>)
 8005d36:	2101      	movs	r1, #1
 8005d38:	430a      	orrs	r2, r1
 8005d3a:	635a      	str	r2, [r3, #52]	; 0x34
 8005d3c:	4b2f      	ldr	r3, [pc, #188]	; (8005dfc <HAL_RCC_OscConfig+0x68c>)
 8005d3e:	6a1a      	ldr	r2, [r3, #32]
 8005d40:	4b2e      	ldr	r3, [pc, #184]	; (8005dfc <HAL_RCC_OscConfig+0x68c>)
 8005d42:	2180      	movs	r1, #128	; 0x80
 8005d44:	0189      	lsls	r1, r1, #6
 8005d46:	430a      	orrs	r2, r1
 8005d48:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d4a:	f7fe fcd1 	bl	80046f0 <HAL_GetTick>
 8005d4e:	0003      	movs	r3, r0
 8005d50:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005d52:	e008      	b.n	8005d66 <HAL_RCC_OscConfig+0x5f6>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005d54:	f7fe fccc 	bl	80046f0 <HAL_GetTick>
 8005d58:	0002      	movs	r2, r0
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	1ad3      	subs	r3, r2, r3
 8005d5e:	2b02      	cmp	r3, #2
 8005d60:	d901      	bls.n	8005d66 <HAL_RCC_OscConfig+0x5f6>
          {
            return HAL_TIMEOUT;
 8005d62:	2303      	movs	r3, #3
 8005d64:	e0ca      	b.n	8005efc <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005d66:	4b1e      	ldr	r3, [pc, #120]	; (8005de0 <HAL_RCC_OscConfig+0x670>)
 8005d68:	689b      	ldr	r3, [r3, #8]
 8005d6a:	2202      	movs	r2, #2
 8005d6c:	4013      	ands	r3, r2
 8005d6e:	d0f1      	beq.n	8005d54 <HAL_RCC_OscConfig+0x5e4>
 8005d70:	e01e      	b.n	8005db0 <HAL_RCC_OscConfig+0x640>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8005d72:	4b1b      	ldr	r3, [pc, #108]	; (8005de0 <HAL_RCC_OscConfig+0x670>)
 8005d74:	689a      	ldr	r2, [r3, #8]
 8005d76:	4b1a      	ldr	r3, [pc, #104]	; (8005de0 <HAL_RCC_OscConfig+0x670>)
 8005d78:	2101      	movs	r1, #1
 8005d7a:	438a      	bics	r2, r1
 8005d7c:	609a      	str	r2, [r3, #8]
 8005d7e:	4b1f      	ldr	r3, [pc, #124]	; (8005dfc <HAL_RCC_OscConfig+0x68c>)
 8005d80:	6a1a      	ldr	r2, [r3, #32]
 8005d82:	4b1e      	ldr	r3, [pc, #120]	; (8005dfc <HAL_RCC_OscConfig+0x68c>)
 8005d84:	491e      	ldr	r1, [pc, #120]	; (8005e00 <HAL_RCC_OscConfig+0x690>)
 8005d86:	400a      	ands	r2, r1
 8005d88:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d8a:	f7fe fcb1 	bl	80046f0 <HAL_GetTick>
 8005d8e:	0003      	movs	r3, r0
 8005d90:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005d92:	e008      	b.n	8005da6 <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005d94:	f7fe fcac 	bl	80046f0 <HAL_GetTick>
 8005d98:	0002      	movs	r2, r0
 8005d9a:	697b      	ldr	r3, [r7, #20]
 8005d9c:	1ad3      	subs	r3, r2, r3
 8005d9e:	2b02      	cmp	r3, #2
 8005da0:	d901      	bls.n	8005da6 <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 8005da2:	2303      	movs	r3, #3
 8005da4:	e0aa      	b.n	8005efc <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005da6:	4b0e      	ldr	r3, [pc, #56]	; (8005de0 <HAL_RCC_OscConfig+0x670>)
 8005da8:	689b      	ldr	r3, [r3, #8]
 8005daa:	2202      	movs	r2, #2
 8005dac:	4013      	ands	r3, r2
 8005dae:	d1f1      	bne.n	8005d94 <HAL_RCC_OscConfig+0x624>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d100      	bne.n	8005dba <HAL_RCC_OscConfig+0x64a>
 8005db8:	e09f      	b.n	8005efa <HAL_RCC_OscConfig+0x78a>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005dba:	69fb      	ldr	r3, [r7, #28]
 8005dbc:	2b0c      	cmp	r3, #12
 8005dbe:	d100      	bne.n	8005dc2 <HAL_RCC_OscConfig+0x652>
 8005dc0:	e078      	b.n	8005eb4 <HAL_RCC_OscConfig+0x744>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dc6:	2b02      	cmp	r3, #2
 8005dc8:	d159      	bne.n	8005e7e <HAL_RCC_OscConfig+0x70e>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005dca:	4b05      	ldr	r3, [pc, #20]	; (8005de0 <HAL_RCC_OscConfig+0x670>)
 8005dcc:	681a      	ldr	r2, [r3, #0]
 8005dce:	4b04      	ldr	r3, [pc, #16]	; (8005de0 <HAL_RCC_OscConfig+0x670>)
 8005dd0:	490c      	ldr	r1, [pc, #48]	; (8005e04 <HAL_RCC_OscConfig+0x694>)
 8005dd2:	400a      	ands	r2, r1
 8005dd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dd6:	f7fe fc8b 	bl	80046f0 <HAL_GetTick>
 8005dda:	0003      	movs	r3, r0
 8005ddc:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005dde:	e01c      	b.n	8005e1a <HAL_RCC_OscConfig+0x6aa>
 8005de0:	40021000 	.word	0x40021000
 8005de4:	ffff1fff 	.word	0xffff1fff
 8005de8:	fffffeff 	.word	0xfffffeff
 8005dec:	40007000 	.word	0x40007000
 8005df0:	fffffbff 	.word	0xfffffbff
 8005df4:	00001388 	.word	0x00001388
 8005df8:	efffffff 	.word	0xefffffff
 8005dfc:	40010000 	.word	0x40010000
 8005e00:	ffffdfff 	.word	0xffffdfff
 8005e04:	feffffff 	.word	0xfeffffff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e08:	f7fe fc72 	bl	80046f0 <HAL_GetTick>
 8005e0c:	0002      	movs	r2, r0
 8005e0e:	697b      	ldr	r3, [r7, #20]
 8005e10:	1ad3      	subs	r3, r2, r3
 8005e12:	2b02      	cmp	r3, #2
 8005e14:	d901      	bls.n	8005e1a <HAL_RCC_OscConfig+0x6aa>
          {
            return HAL_TIMEOUT;
 8005e16:	2303      	movs	r3, #3
 8005e18:	e070      	b.n	8005efc <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005e1a:	4b3a      	ldr	r3, [pc, #232]	; (8005f04 <HAL_RCC_OscConfig+0x794>)
 8005e1c:	681a      	ldr	r2, [r3, #0]
 8005e1e:	2380      	movs	r3, #128	; 0x80
 8005e20:	049b      	lsls	r3, r3, #18
 8005e22:	4013      	ands	r3, r2
 8005e24:	d1f0      	bne.n	8005e08 <HAL_RCC_OscConfig+0x698>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005e26:	4b37      	ldr	r3, [pc, #220]	; (8005f04 <HAL_RCC_OscConfig+0x794>)
 8005e28:	68db      	ldr	r3, [r3, #12]
 8005e2a:	4a37      	ldr	r2, [pc, #220]	; (8005f08 <HAL_RCC_OscConfig+0x798>)
 8005e2c:	4013      	ands	r3, r2
 8005e2e:	0019      	movs	r1, r3
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e38:	431a      	orrs	r2, r3
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e3e:	431a      	orrs	r2, r3
 8005e40:	4b30      	ldr	r3, [pc, #192]	; (8005f04 <HAL_RCC_OscConfig+0x794>)
 8005e42:	430a      	orrs	r2, r1
 8005e44:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005e46:	4b2f      	ldr	r3, [pc, #188]	; (8005f04 <HAL_RCC_OscConfig+0x794>)
 8005e48:	681a      	ldr	r2, [r3, #0]
 8005e4a:	4b2e      	ldr	r3, [pc, #184]	; (8005f04 <HAL_RCC_OscConfig+0x794>)
 8005e4c:	2180      	movs	r1, #128	; 0x80
 8005e4e:	0449      	lsls	r1, r1, #17
 8005e50:	430a      	orrs	r2, r1
 8005e52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e54:	f7fe fc4c 	bl	80046f0 <HAL_GetTick>
 8005e58:	0003      	movs	r3, r0
 8005e5a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8005e5c:	e008      	b.n	8005e70 <HAL_RCC_OscConfig+0x700>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e5e:	f7fe fc47 	bl	80046f0 <HAL_GetTick>
 8005e62:	0002      	movs	r2, r0
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	1ad3      	subs	r3, r2, r3
 8005e68:	2b02      	cmp	r3, #2
 8005e6a:	d901      	bls.n	8005e70 <HAL_RCC_OscConfig+0x700>
          {
            return HAL_TIMEOUT;
 8005e6c:	2303      	movs	r3, #3
 8005e6e:	e045      	b.n	8005efc <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8005e70:	4b24      	ldr	r3, [pc, #144]	; (8005f04 <HAL_RCC_OscConfig+0x794>)
 8005e72:	681a      	ldr	r2, [r3, #0]
 8005e74:	2380      	movs	r3, #128	; 0x80
 8005e76:	049b      	lsls	r3, r3, #18
 8005e78:	4013      	ands	r3, r2
 8005e7a:	d0f0      	beq.n	8005e5e <HAL_RCC_OscConfig+0x6ee>
 8005e7c:	e03d      	b.n	8005efa <HAL_RCC_OscConfig+0x78a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e7e:	4b21      	ldr	r3, [pc, #132]	; (8005f04 <HAL_RCC_OscConfig+0x794>)
 8005e80:	681a      	ldr	r2, [r3, #0]
 8005e82:	4b20      	ldr	r3, [pc, #128]	; (8005f04 <HAL_RCC_OscConfig+0x794>)
 8005e84:	4921      	ldr	r1, [pc, #132]	; (8005f0c <HAL_RCC_OscConfig+0x79c>)
 8005e86:	400a      	ands	r2, r1
 8005e88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e8a:	f7fe fc31 	bl	80046f0 <HAL_GetTick>
 8005e8e:	0003      	movs	r3, r0
 8005e90:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005e92:	e008      	b.n	8005ea6 <HAL_RCC_OscConfig+0x736>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e94:	f7fe fc2c 	bl	80046f0 <HAL_GetTick>
 8005e98:	0002      	movs	r2, r0
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	1ad3      	subs	r3, r2, r3
 8005e9e:	2b02      	cmp	r3, #2
 8005ea0:	d901      	bls.n	8005ea6 <HAL_RCC_OscConfig+0x736>
          {
            return HAL_TIMEOUT;
 8005ea2:	2303      	movs	r3, #3
 8005ea4:	e02a      	b.n	8005efc <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005ea6:	4b17      	ldr	r3, [pc, #92]	; (8005f04 <HAL_RCC_OscConfig+0x794>)
 8005ea8:	681a      	ldr	r2, [r3, #0]
 8005eaa:	2380      	movs	r3, #128	; 0x80
 8005eac:	049b      	lsls	r3, r3, #18
 8005eae:	4013      	ands	r3, r2
 8005eb0:	d1f0      	bne.n	8005e94 <HAL_RCC_OscConfig+0x724>
 8005eb2:	e022      	b.n	8005efa <HAL_RCC_OscConfig+0x78a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eb8:	2b01      	cmp	r3, #1
 8005eba:	d101      	bne.n	8005ec0 <HAL_RCC_OscConfig+0x750>
      {
        return HAL_ERROR;
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	e01d      	b.n	8005efc <HAL_RCC_OscConfig+0x78c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005ec0:	4b10      	ldr	r3, [pc, #64]	; (8005f04 <HAL_RCC_OscConfig+0x794>)
 8005ec2:	68db      	ldr	r3, [r3, #12]
 8005ec4:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ec6:	69ba      	ldr	r2, [r7, #24]
 8005ec8:	2380      	movs	r3, #128	; 0x80
 8005eca:	025b      	lsls	r3, r3, #9
 8005ecc:	401a      	ands	r2, r3
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ed2:	429a      	cmp	r2, r3
 8005ed4:	d10f      	bne.n	8005ef6 <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8005ed6:	69ba      	ldr	r2, [r7, #24]
 8005ed8:	23f0      	movs	r3, #240	; 0xf0
 8005eda:	039b      	lsls	r3, r3, #14
 8005edc:	401a      	ands	r2, r3
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ee2:	429a      	cmp	r2, r3
 8005ee4:	d107      	bne.n	8005ef6 <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8005ee6:	69ba      	ldr	r2, [r7, #24]
 8005ee8:	23c0      	movs	r3, #192	; 0xc0
 8005eea:	041b      	lsls	r3, r3, #16
 8005eec:	401a      	ands	r2, r3
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8005ef2:	429a      	cmp	r2, r3
 8005ef4:	d001      	beq.n	8005efa <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_ERROR;
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	e000      	b.n	8005efc <HAL_RCC_OscConfig+0x78c>
        }
      }
    }
  }

  return HAL_OK;
 8005efa:	2300      	movs	r3, #0
}
 8005efc:	0018      	movs	r0, r3
 8005efe:	46bd      	mov	sp, r7
 8005f00:	b00a      	add	sp, #40	; 0x28
 8005f02:	bdb0      	pop	{r4, r5, r7, pc}
 8005f04:	40021000 	.word	0x40021000
 8005f08:	ff02ffff 	.word	0xff02ffff
 8005f0c:	feffffff 	.word	0xfeffffff

08005f10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005f10:	b5b0      	push	{r4, r5, r7, lr}
 8005f12:	b084      	sub	sp, #16
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
 8005f18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d101      	bne.n	8005f24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005f20:	2301      	movs	r3, #1
 8005f22:	e10d      	b.n	8006140 <HAL_RCC_ClockConfig+0x230>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005f24:	4b88      	ldr	r3, [pc, #544]	; (8006148 <HAL_RCC_ClockConfig+0x238>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	2201      	movs	r2, #1
 8005f2a:	4013      	ands	r3, r2
 8005f2c:	683a      	ldr	r2, [r7, #0]
 8005f2e:	429a      	cmp	r2, r3
 8005f30:	d911      	bls.n	8005f56 <HAL_RCC_ClockConfig+0x46>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f32:	4b85      	ldr	r3, [pc, #532]	; (8006148 <HAL_RCC_ClockConfig+0x238>)
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	2201      	movs	r2, #1
 8005f38:	4393      	bics	r3, r2
 8005f3a:	0019      	movs	r1, r3
 8005f3c:	4b82      	ldr	r3, [pc, #520]	; (8006148 <HAL_RCC_ClockConfig+0x238>)
 8005f3e:	683a      	ldr	r2, [r7, #0]
 8005f40:	430a      	orrs	r2, r1
 8005f42:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f44:	4b80      	ldr	r3, [pc, #512]	; (8006148 <HAL_RCC_ClockConfig+0x238>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	2201      	movs	r2, #1
 8005f4a:	4013      	ands	r3, r2
 8005f4c:	683a      	ldr	r2, [r7, #0]
 8005f4e:	429a      	cmp	r2, r3
 8005f50:	d001      	beq.n	8005f56 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8005f52:	2301      	movs	r3, #1
 8005f54:	e0f4      	b.n	8006140 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	2202      	movs	r2, #2
 8005f5c:	4013      	ands	r3, r2
 8005f5e:	d009      	beq.n	8005f74 <HAL_RCC_ClockConfig+0x64>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f60:	4b7a      	ldr	r3, [pc, #488]	; (800614c <HAL_RCC_ClockConfig+0x23c>)
 8005f62:	68db      	ldr	r3, [r3, #12]
 8005f64:	22f0      	movs	r2, #240	; 0xf0
 8005f66:	4393      	bics	r3, r2
 8005f68:	0019      	movs	r1, r3
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	689a      	ldr	r2, [r3, #8]
 8005f6e:	4b77      	ldr	r3, [pc, #476]	; (800614c <HAL_RCC_ClockConfig+0x23c>)
 8005f70:	430a      	orrs	r2, r1
 8005f72:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	2201      	movs	r2, #1
 8005f7a:	4013      	ands	r3, r2
 8005f7c:	d100      	bne.n	8005f80 <HAL_RCC_ClockConfig+0x70>
 8005f7e:	e089      	b.n	8006094 <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	685b      	ldr	r3, [r3, #4]
 8005f84:	2b02      	cmp	r3, #2
 8005f86:	d107      	bne.n	8005f98 <HAL_RCC_ClockConfig+0x88>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005f88:	4b70      	ldr	r3, [pc, #448]	; (800614c <HAL_RCC_ClockConfig+0x23c>)
 8005f8a:	681a      	ldr	r2, [r3, #0]
 8005f8c:	2380      	movs	r3, #128	; 0x80
 8005f8e:	029b      	lsls	r3, r3, #10
 8005f90:	4013      	ands	r3, r2
 8005f92:	d120      	bne.n	8005fd6 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8005f94:	2301      	movs	r3, #1
 8005f96:	e0d3      	b.n	8006140 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	685b      	ldr	r3, [r3, #4]
 8005f9c:	2b03      	cmp	r3, #3
 8005f9e:	d107      	bne.n	8005fb0 <HAL_RCC_ClockConfig+0xa0>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005fa0:	4b6a      	ldr	r3, [pc, #424]	; (800614c <HAL_RCC_ClockConfig+0x23c>)
 8005fa2:	681a      	ldr	r2, [r3, #0]
 8005fa4:	2380      	movs	r3, #128	; 0x80
 8005fa6:	049b      	lsls	r3, r3, #18
 8005fa8:	4013      	ands	r3, r2
 8005faa:	d114      	bne.n	8005fd6 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8005fac:	2301      	movs	r3, #1
 8005fae:	e0c7      	b.n	8006140 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	685b      	ldr	r3, [r3, #4]
 8005fb4:	2b01      	cmp	r3, #1
 8005fb6:	d106      	bne.n	8005fc6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005fb8:	4b64      	ldr	r3, [pc, #400]	; (800614c <HAL_RCC_ClockConfig+0x23c>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	2204      	movs	r2, #4
 8005fbe:	4013      	ands	r3, r2
 8005fc0:	d109      	bne.n	8005fd6 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	e0bc      	b.n	8006140 <HAL_RCC_ClockConfig+0x230>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005fc6:	4b61      	ldr	r3, [pc, #388]	; (800614c <HAL_RCC_ClockConfig+0x23c>)
 8005fc8:	681a      	ldr	r2, [r3, #0]
 8005fca:	2380      	movs	r3, #128	; 0x80
 8005fcc:	009b      	lsls	r3, r3, #2
 8005fce:	4013      	ands	r3, r2
 8005fd0:	d101      	bne.n	8005fd6 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	e0b4      	b.n	8006140 <HAL_RCC_ClockConfig+0x230>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005fd6:	4b5d      	ldr	r3, [pc, #372]	; (800614c <HAL_RCC_ClockConfig+0x23c>)
 8005fd8:	68db      	ldr	r3, [r3, #12]
 8005fda:	2203      	movs	r2, #3
 8005fdc:	4393      	bics	r3, r2
 8005fde:	0019      	movs	r1, r3
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	685a      	ldr	r2, [r3, #4]
 8005fe4:	4b59      	ldr	r3, [pc, #356]	; (800614c <HAL_RCC_ClockConfig+0x23c>)
 8005fe6:	430a      	orrs	r2, r1
 8005fe8:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005fea:	f7fe fb81 	bl	80046f0 <HAL_GetTick>
 8005fee:	0003      	movs	r3, r0
 8005ff0:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	685b      	ldr	r3, [r3, #4]
 8005ff6:	2b02      	cmp	r3, #2
 8005ff8:	d111      	bne.n	800601e <HAL_RCC_ClockConfig+0x10e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005ffa:	e009      	b.n	8006010 <HAL_RCC_ClockConfig+0x100>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ffc:	f7fe fb78 	bl	80046f0 <HAL_GetTick>
 8006000:	0002      	movs	r2, r0
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	1ad3      	subs	r3, r2, r3
 8006006:	4a52      	ldr	r2, [pc, #328]	; (8006150 <HAL_RCC_ClockConfig+0x240>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d901      	bls.n	8006010 <HAL_RCC_ClockConfig+0x100>
        {
          return HAL_TIMEOUT;
 800600c:	2303      	movs	r3, #3
 800600e:	e097      	b.n	8006140 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8006010:	4b4e      	ldr	r3, [pc, #312]	; (800614c <HAL_RCC_ClockConfig+0x23c>)
 8006012:	68db      	ldr	r3, [r3, #12]
 8006014:	220c      	movs	r2, #12
 8006016:	4013      	ands	r3, r2
 8006018:	2b08      	cmp	r3, #8
 800601a:	d1ef      	bne.n	8005ffc <HAL_RCC_ClockConfig+0xec>
 800601c:	e03a      	b.n	8006094 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	685b      	ldr	r3, [r3, #4]
 8006022:	2b03      	cmp	r3, #3
 8006024:	d111      	bne.n	800604a <HAL_RCC_ClockConfig+0x13a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006026:	e009      	b.n	800603c <HAL_RCC_ClockConfig+0x12c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006028:	f7fe fb62 	bl	80046f0 <HAL_GetTick>
 800602c:	0002      	movs	r2, r0
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	1ad3      	subs	r3, r2, r3
 8006032:	4a47      	ldr	r2, [pc, #284]	; (8006150 <HAL_RCC_ClockConfig+0x240>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d901      	bls.n	800603c <HAL_RCC_ClockConfig+0x12c>
        {
          return HAL_TIMEOUT;
 8006038:	2303      	movs	r3, #3
 800603a:	e081      	b.n	8006140 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800603c:	4b43      	ldr	r3, [pc, #268]	; (800614c <HAL_RCC_ClockConfig+0x23c>)
 800603e:	68db      	ldr	r3, [r3, #12]
 8006040:	220c      	movs	r2, #12
 8006042:	4013      	ands	r3, r2
 8006044:	2b0c      	cmp	r3, #12
 8006046:	d1ef      	bne.n	8006028 <HAL_RCC_ClockConfig+0x118>
 8006048:	e024      	b.n	8006094 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	685b      	ldr	r3, [r3, #4]
 800604e:	2b01      	cmp	r3, #1
 8006050:	d11b      	bne.n	800608a <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8006052:	e009      	b.n	8006068 <HAL_RCC_ClockConfig+0x158>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006054:	f7fe fb4c 	bl	80046f0 <HAL_GetTick>
 8006058:	0002      	movs	r2, r0
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	1ad3      	subs	r3, r2, r3
 800605e:	4a3c      	ldr	r2, [pc, #240]	; (8006150 <HAL_RCC_ClockConfig+0x240>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d901      	bls.n	8006068 <HAL_RCC_ClockConfig+0x158>
        {
          return HAL_TIMEOUT;
 8006064:	2303      	movs	r3, #3
 8006066:	e06b      	b.n	8006140 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8006068:	4b38      	ldr	r3, [pc, #224]	; (800614c <HAL_RCC_ClockConfig+0x23c>)
 800606a:	68db      	ldr	r3, [r3, #12]
 800606c:	220c      	movs	r2, #12
 800606e:	4013      	ands	r3, r2
 8006070:	2b04      	cmp	r3, #4
 8006072:	d1ef      	bne.n	8006054 <HAL_RCC_ClockConfig+0x144>
 8006074:	e00e      	b.n	8006094 <HAL_RCC_ClockConfig+0x184>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006076:	f7fe fb3b 	bl	80046f0 <HAL_GetTick>
 800607a:	0002      	movs	r2, r0
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	1ad3      	subs	r3, r2, r3
 8006080:	4a33      	ldr	r2, [pc, #204]	; (8006150 <HAL_RCC_ClockConfig+0x240>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d901      	bls.n	800608a <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 8006086:	2303      	movs	r3, #3
 8006088:	e05a      	b.n	8006140 <HAL_RCC_ClockConfig+0x230>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800608a:	4b30      	ldr	r3, [pc, #192]	; (800614c <HAL_RCC_ClockConfig+0x23c>)
 800608c:	68db      	ldr	r3, [r3, #12]
 800608e:	220c      	movs	r2, #12
 8006090:	4013      	ands	r3, r2
 8006092:	d1f0      	bne.n	8006076 <HAL_RCC_ClockConfig+0x166>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006094:	4b2c      	ldr	r3, [pc, #176]	; (8006148 <HAL_RCC_ClockConfig+0x238>)
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	2201      	movs	r2, #1
 800609a:	4013      	ands	r3, r2
 800609c:	683a      	ldr	r2, [r7, #0]
 800609e:	429a      	cmp	r2, r3
 80060a0:	d211      	bcs.n	80060c6 <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060a2:	4b29      	ldr	r3, [pc, #164]	; (8006148 <HAL_RCC_ClockConfig+0x238>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	2201      	movs	r2, #1
 80060a8:	4393      	bics	r3, r2
 80060aa:	0019      	movs	r1, r3
 80060ac:	4b26      	ldr	r3, [pc, #152]	; (8006148 <HAL_RCC_ClockConfig+0x238>)
 80060ae:	683a      	ldr	r2, [r7, #0]
 80060b0:	430a      	orrs	r2, r1
 80060b2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80060b4:	4b24      	ldr	r3, [pc, #144]	; (8006148 <HAL_RCC_ClockConfig+0x238>)
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	2201      	movs	r2, #1
 80060ba:	4013      	ands	r3, r2
 80060bc:	683a      	ldr	r2, [r7, #0]
 80060be:	429a      	cmp	r2, r3
 80060c0:	d001      	beq.n	80060c6 <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 80060c2:	2301      	movs	r3, #1
 80060c4:	e03c      	b.n	8006140 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	2204      	movs	r2, #4
 80060cc:	4013      	ands	r3, r2
 80060ce:	d009      	beq.n	80060e4 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80060d0:	4b1e      	ldr	r3, [pc, #120]	; (800614c <HAL_RCC_ClockConfig+0x23c>)
 80060d2:	68db      	ldr	r3, [r3, #12]
 80060d4:	4a1f      	ldr	r2, [pc, #124]	; (8006154 <HAL_RCC_ClockConfig+0x244>)
 80060d6:	4013      	ands	r3, r2
 80060d8:	0019      	movs	r1, r3
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	68da      	ldr	r2, [r3, #12]
 80060de:	4b1b      	ldr	r3, [pc, #108]	; (800614c <HAL_RCC_ClockConfig+0x23c>)
 80060e0:	430a      	orrs	r2, r1
 80060e2:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	2208      	movs	r2, #8
 80060ea:	4013      	ands	r3, r2
 80060ec:	d00a      	beq.n	8006104 <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80060ee:	4b17      	ldr	r3, [pc, #92]	; (800614c <HAL_RCC_ClockConfig+0x23c>)
 80060f0:	68db      	ldr	r3, [r3, #12]
 80060f2:	4a19      	ldr	r2, [pc, #100]	; (8006158 <HAL_RCC_ClockConfig+0x248>)
 80060f4:	4013      	ands	r3, r2
 80060f6:	0019      	movs	r1, r3
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	691b      	ldr	r3, [r3, #16]
 80060fc:	00da      	lsls	r2, r3, #3
 80060fe:	4b13      	ldr	r3, [pc, #76]	; (800614c <HAL_RCC_ClockConfig+0x23c>)
 8006100:	430a      	orrs	r2, r1
 8006102:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006104:	f000 f82e 	bl	8006164 <HAL_RCC_GetSysClockFreq>
 8006108:	0001      	movs	r1, r0
 800610a:	4b10      	ldr	r3, [pc, #64]	; (800614c <HAL_RCC_ClockConfig+0x23c>)
 800610c:	68db      	ldr	r3, [r3, #12]
 800610e:	091b      	lsrs	r3, r3, #4
 8006110:	220f      	movs	r2, #15
 8006112:	4013      	ands	r3, r2
 8006114:	4a11      	ldr	r2, [pc, #68]	; (800615c <HAL_RCC_ClockConfig+0x24c>)
 8006116:	5cd3      	ldrb	r3, [r2, r3]
 8006118:	000a      	movs	r2, r1
 800611a:	40da      	lsrs	r2, r3
 800611c:	4b10      	ldr	r3, [pc, #64]	; (8006160 <HAL_RCC_ClockConfig+0x250>)
 800611e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 8006120:	250b      	movs	r5, #11
 8006122:	197c      	adds	r4, r7, r5
 8006124:	2000      	movs	r0, #0
 8006126:	f7fe faad 	bl	8004684 <HAL_InitTick>
 800612a:	0003      	movs	r3, r0
 800612c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800612e:	197b      	adds	r3, r7, r5
 8006130:	781b      	ldrb	r3, [r3, #0]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d003      	beq.n	800613e <HAL_RCC_ClockConfig+0x22e>
  {
    return status;
 8006136:	230b      	movs	r3, #11
 8006138:	18fb      	adds	r3, r7, r3
 800613a:	781b      	ldrb	r3, [r3, #0]
 800613c:	e000      	b.n	8006140 <HAL_RCC_ClockConfig+0x230>
  }

  return HAL_OK;
 800613e:	2300      	movs	r3, #0
}
 8006140:	0018      	movs	r0, r3
 8006142:	46bd      	mov	sp, r7
 8006144:	b004      	add	sp, #16
 8006146:	bdb0      	pop	{r4, r5, r7, pc}
 8006148:	40022000 	.word	0x40022000
 800614c:	40021000 	.word	0x40021000
 8006150:	00001388 	.word	0x00001388
 8006154:	fffff8ff 	.word	0xfffff8ff
 8006158:	ffffc7ff 	.word	0xffffc7ff
 800615c:	080097d4 	.word	0x080097d4
 8006160:	20000064 	.word	0x20000064

08006164 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b086      	sub	sp, #24
 8006168:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800616a:	4b3b      	ldr	r3, [pc, #236]	; (8006258 <HAL_RCC_GetSysClockFreq+0xf4>)
 800616c:	68db      	ldr	r3, [r3, #12]
 800616e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	220c      	movs	r2, #12
 8006174:	4013      	ands	r3, r2
 8006176:	2b08      	cmp	r3, #8
 8006178:	d00e      	beq.n	8006198 <HAL_RCC_GetSysClockFreq+0x34>
 800617a:	2b0c      	cmp	r3, #12
 800617c:	d00f      	beq.n	800619e <HAL_RCC_GetSysClockFreq+0x3a>
 800617e:	2b04      	cmp	r3, #4
 8006180:	d157      	bne.n	8006232 <HAL_RCC_GetSysClockFreq+0xce>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8006182:	4b35      	ldr	r3, [pc, #212]	; (8006258 <HAL_RCC_GetSysClockFreq+0xf4>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	2210      	movs	r2, #16
 8006188:	4013      	ands	r3, r2
 800618a:	d002      	beq.n	8006192 <HAL_RCC_GetSysClockFreq+0x2e>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800618c:	4b33      	ldr	r3, [pc, #204]	; (800625c <HAL_RCC_GetSysClockFreq+0xf8>)
 800618e:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8006190:	e05d      	b.n	800624e <HAL_RCC_GetSysClockFreq+0xea>
        sysclockfreq =  HSI_VALUE;
 8006192:	4b33      	ldr	r3, [pc, #204]	; (8006260 <HAL_RCC_GetSysClockFreq+0xfc>)
 8006194:	613b      	str	r3, [r7, #16]
      break;
 8006196:	e05a      	b.n	800624e <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006198:	4b32      	ldr	r3, [pc, #200]	; (8006264 <HAL_RCC_GetSysClockFreq+0x100>)
 800619a:	613b      	str	r3, [r7, #16]
      break;
 800619c:	e057      	b.n	800624e <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	0c9b      	lsrs	r3, r3, #18
 80061a2:	220f      	movs	r2, #15
 80061a4:	4013      	ands	r3, r2
 80061a6:	4a30      	ldr	r2, [pc, #192]	; (8006268 <HAL_RCC_GetSysClockFreq+0x104>)
 80061a8:	5cd3      	ldrb	r3, [r2, r3]
 80061aa:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	0d9b      	lsrs	r3, r3, #22
 80061b0:	2203      	movs	r2, #3
 80061b2:	4013      	ands	r3, r2
 80061b4:	3301      	adds	r3, #1
 80061b6:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80061b8:	4b27      	ldr	r3, [pc, #156]	; (8006258 <HAL_RCC_GetSysClockFreq+0xf4>)
 80061ba:	68da      	ldr	r2, [r3, #12]
 80061bc:	2380      	movs	r3, #128	; 0x80
 80061be:	025b      	lsls	r3, r3, #9
 80061c0:	4013      	ands	r3, r2
 80061c2:	d00f      	beq.n	80061e4 <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 80061c4:	68b9      	ldr	r1, [r7, #8]
 80061c6:	000a      	movs	r2, r1
 80061c8:	0152      	lsls	r2, r2, #5
 80061ca:	1a52      	subs	r2, r2, r1
 80061cc:	0193      	lsls	r3, r2, #6
 80061ce:	1a9b      	subs	r3, r3, r2
 80061d0:	00db      	lsls	r3, r3, #3
 80061d2:	185b      	adds	r3, r3, r1
 80061d4:	025b      	lsls	r3, r3, #9
 80061d6:	6879      	ldr	r1, [r7, #4]
 80061d8:	0018      	movs	r0, r3
 80061da:	f7f9 ff9d 	bl	8000118 <__udivsi3>
 80061de:	0003      	movs	r3, r0
 80061e0:	617b      	str	r3, [r7, #20]
 80061e2:	e023      	b.n	800622c <HAL_RCC_GetSysClockFreq+0xc8>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80061e4:	4b1c      	ldr	r3, [pc, #112]	; (8006258 <HAL_RCC_GetSysClockFreq+0xf4>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	2210      	movs	r2, #16
 80061ea:	4013      	ands	r3, r2
 80061ec:	d00f      	beq.n	800620e <HAL_RCC_GetSysClockFreq+0xaa>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 80061ee:	68b9      	ldr	r1, [r7, #8]
 80061f0:	000a      	movs	r2, r1
 80061f2:	0152      	lsls	r2, r2, #5
 80061f4:	1a52      	subs	r2, r2, r1
 80061f6:	0193      	lsls	r3, r2, #6
 80061f8:	1a9b      	subs	r3, r3, r2
 80061fa:	00db      	lsls	r3, r3, #3
 80061fc:	185b      	adds	r3, r3, r1
 80061fe:	021b      	lsls	r3, r3, #8
 8006200:	6879      	ldr	r1, [r7, #4]
 8006202:	0018      	movs	r0, r3
 8006204:	f7f9 ff88 	bl	8000118 <__udivsi3>
 8006208:	0003      	movs	r3, r0
 800620a:	617b      	str	r3, [r7, #20]
 800620c:	e00e      	b.n	800622c <HAL_RCC_GetSysClockFreq+0xc8>
        }
        else
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 800620e:	68b9      	ldr	r1, [r7, #8]
 8006210:	000a      	movs	r2, r1
 8006212:	0152      	lsls	r2, r2, #5
 8006214:	1a52      	subs	r2, r2, r1
 8006216:	0193      	lsls	r3, r2, #6
 8006218:	1a9b      	subs	r3, r3, r2
 800621a:	00db      	lsls	r3, r3, #3
 800621c:	185b      	adds	r3, r3, r1
 800621e:	029b      	lsls	r3, r3, #10
 8006220:	6879      	ldr	r1, [r7, #4]
 8006222:	0018      	movs	r0, r3
 8006224:	f7f9 ff78 	bl	8000118 <__udivsi3>
 8006228:	0003      	movs	r3, r0
 800622a:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 800622c:	697b      	ldr	r3, [r7, #20]
 800622e:	613b      	str	r3, [r7, #16]
      break;
 8006230:	e00d      	b.n	800624e <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8006232:	4b09      	ldr	r3, [pc, #36]	; (8006258 <HAL_RCC_GetSysClockFreq+0xf4>)
 8006234:	685b      	ldr	r3, [r3, #4]
 8006236:	0b5b      	lsrs	r3, r3, #13
 8006238:	2207      	movs	r2, #7
 800623a:	4013      	ands	r3, r2
 800623c:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	3301      	adds	r3, #1
 8006242:	2280      	movs	r2, #128	; 0x80
 8006244:	0212      	lsls	r2, r2, #8
 8006246:	409a      	lsls	r2, r3
 8006248:	0013      	movs	r3, r2
 800624a:	613b      	str	r3, [r7, #16]
      break;
 800624c:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800624e:	693b      	ldr	r3, [r7, #16]
}
 8006250:	0018      	movs	r0, r3
 8006252:	46bd      	mov	sp, r7
 8006254:	b006      	add	sp, #24
 8006256:	bd80      	pop	{r7, pc}
 8006258:	40021000 	.word	0x40021000
 800625c:	003d0900 	.word	0x003d0900
 8006260:	00f42400 	.word	0x00f42400
 8006264:	007a1200 	.word	0x007a1200
 8006268:	080097e4 	.word	0x080097e4

0800626c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b086      	sub	sp, #24
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	2220      	movs	r2, #32
 800627a:	4013      	ands	r3, r2
 800627c:	d106      	bne.n	800628c <HAL_RCCEx_PeriphCLKConfig+0x20>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681a      	ldr	r2, [r3, #0]
 8006282:	2380      	movs	r3, #128	; 0x80
 8006284:	011b      	lsls	r3, r3, #4
 8006286:	4013      	ands	r3, r2
 8006288:	d100      	bne.n	800628c <HAL_RCCEx_PeriphCLKConfig+0x20>
 800628a:	e0dd      	b.n	8006448 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 800628c:	2317      	movs	r3, #23
 800628e:	18fb      	adds	r3, r7, r3
 8006290:	2200      	movs	r2, #0
 8006292:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006294:	4ba4      	ldr	r3, [pc, #656]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006296:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006298:	2380      	movs	r3, #128	; 0x80
 800629a:	055b      	lsls	r3, r3, #21
 800629c:	4013      	ands	r3, r2
 800629e:	d10a      	bne.n	80062b6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80062a0:	4ba1      	ldr	r3, [pc, #644]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80062a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80062a4:	4ba0      	ldr	r3, [pc, #640]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80062a6:	2180      	movs	r1, #128	; 0x80
 80062a8:	0549      	lsls	r1, r1, #21
 80062aa:	430a      	orrs	r2, r1
 80062ac:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80062ae:	2317      	movs	r3, #23
 80062b0:	18fb      	adds	r3, r7, r3
 80062b2:	2201      	movs	r2, #1
 80062b4:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062b6:	4b9d      	ldr	r3, [pc, #628]	; (800652c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80062b8:	681a      	ldr	r2, [r3, #0]
 80062ba:	2380      	movs	r3, #128	; 0x80
 80062bc:	005b      	lsls	r3, r3, #1
 80062be:	4013      	ands	r3, r2
 80062c0:	d11a      	bne.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80062c2:	4b9a      	ldr	r3, [pc, #616]	; (800652c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80062c4:	681a      	ldr	r2, [r3, #0]
 80062c6:	4b99      	ldr	r3, [pc, #612]	; (800652c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80062c8:	2180      	movs	r1, #128	; 0x80
 80062ca:	0049      	lsls	r1, r1, #1
 80062cc:	430a      	orrs	r2, r1
 80062ce:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80062d0:	f7fe fa0e 	bl	80046f0 <HAL_GetTick>
 80062d4:	0003      	movs	r3, r0
 80062d6:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062d8:	e008      	b.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80062da:	f7fe fa09 	bl	80046f0 <HAL_GetTick>
 80062de:	0002      	movs	r2, r0
 80062e0:	693b      	ldr	r3, [r7, #16]
 80062e2:	1ad3      	subs	r3, r2, r3
 80062e4:	2b64      	cmp	r3, #100	; 0x64
 80062e6:	d901      	bls.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80062e8:	2303      	movs	r3, #3
 80062ea:	e118      	b.n	800651e <HAL_RCCEx_PeriphCLKConfig+0x2b2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062ec:	4b8f      	ldr	r3, [pc, #572]	; (800652c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80062ee:	681a      	ldr	r2, [r3, #0]
 80062f0:	2380      	movs	r3, #128	; 0x80
 80062f2:	005b      	lsls	r3, r3, #1
 80062f4:	4013      	ands	r3, r2
 80062f6:	d0f0      	beq.n	80062da <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80062f8:	4b8b      	ldr	r3, [pc, #556]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80062fa:	681a      	ldr	r2, [r3, #0]
 80062fc:	23c0      	movs	r3, #192	; 0xc0
 80062fe:	039b      	lsls	r3, r3, #14
 8006300:	4013      	ands	r3, r2
 8006302:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	685a      	ldr	r2, [r3, #4]
 8006308:	23c0      	movs	r3, #192	; 0xc0
 800630a:	039b      	lsls	r3, r3, #14
 800630c:	4013      	ands	r3, r2
 800630e:	68fa      	ldr	r2, [r7, #12]
 8006310:	429a      	cmp	r2, r3
 8006312:	d107      	bne.n	8006324 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	689a      	ldr	r2, [r3, #8]
 8006318:	23c0      	movs	r3, #192	; 0xc0
 800631a:	039b      	lsls	r3, r3, #14
 800631c:	4013      	ands	r3, r2
 800631e:	68fa      	ldr	r2, [r7, #12]
 8006320:	429a      	cmp	r2, r3
 8006322:	d013      	beq.n	800634c <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	685a      	ldr	r2, [r3, #4]
 8006328:	23c0      	movs	r3, #192	; 0xc0
 800632a:	029b      	lsls	r3, r3, #10
 800632c:	401a      	ands	r2, r3
 800632e:	23c0      	movs	r3, #192	; 0xc0
 8006330:	029b      	lsls	r3, r3, #10
 8006332:	429a      	cmp	r2, r3
 8006334:	d10a      	bne.n	800634c <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006336:	4b7c      	ldr	r3, [pc, #496]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006338:	681a      	ldr	r2, [r3, #0]
 800633a:	2380      	movs	r3, #128	; 0x80
 800633c:	029b      	lsls	r3, r3, #10
 800633e:	401a      	ands	r2, r3
 8006340:	2380      	movs	r3, #128	; 0x80
 8006342:	029b      	lsls	r3, r3, #10
 8006344:	429a      	cmp	r2, r3
 8006346:	d101      	bne.n	800634c <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8006348:	2301      	movs	r3, #1
 800634a:	e0e8      	b.n	800651e <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800634c:	4b76      	ldr	r3, [pc, #472]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800634e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006350:	23c0      	movs	r3, #192	; 0xc0
 8006352:	029b      	lsls	r3, r3, #10
 8006354:	4013      	ands	r3, r2
 8006356:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d049      	beq.n	80063f2 <HAL_RCCEx_PeriphCLKConfig+0x186>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	685a      	ldr	r2, [r3, #4]
 8006362:	23c0      	movs	r3, #192	; 0xc0
 8006364:	029b      	lsls	r3, r3, #10
 8006366:	4013      	ands	r3, r2
 8006368:	68fa      	ldr	r2, [r7, #12]
 800636a:	429a      	cmp	r2, r3
 800636c:	d004      	beq.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	2220      	movs	r2, #32
 8006374:	4013      	ands	r3, r2
 8006376:	d10d      	bne.n	8006394 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	689a      	ldr	r2, [r3, #8]
 800637c:	23c0      	movs	r3, #192	; 0xc0
 800637e:	029b      	lsls	r3, r3, #10
 8006380:	4013      	ands	r3, r2
 8006382:	68fa      	ldr	r2, [r7, #12]
 8006384:	429a      	cmp	r2, r3
 8006386:	d034      	beq.n	80063f2 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681a      	ldr	r2, [r3, #0]
 800638c:	2380      	movs	r3, #128	; 0x80
 800638e:	011b      	lsls	r3, r3, #4
 8006390:	4013      	ands	r3, r2
 8006392:	d02e      	beq.n	80063f2 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8006394:	4b64      	ldr	r3, [pc, #400]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006396:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006398:	4a65      	ldr	r2, [pc, #404]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800639a:	4013      	ands	r3, r2
 800639c:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800639e:	4b62      	ldr	r3, [pc, #392]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80063a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80063a2:	4b61      	ldr	r3, [pc, #388]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80063a4:	2180      	movs	r1, #128	; 0x80
 80063a6:	0309      	lsls	r1, r1, #12
 80063a8:	430a      	orrs	r2, r1
 80063aa:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80063ac:	4b5e      	ldr	r3, [pc, #376]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80063ae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80063b0:	4b5d      	ldr	r3, [pc, #372]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80063b2:	4960      	ldr	r1, [pc, #384]	; (8006534 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80063b4:	400a      	ands	r2, r1
 80063b6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80063b8:	4b5b      	ldr	r3, [pc, #364]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80063ba:	68fa      	ldr	r2, [r7, #12]
 80063bc:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80063be:	68fa      	ldr	r2, [r7, #12]
 80063c0:	2380      	movs	r3, #128	; 0x80
 80063c2:	005b      	lsls	r3, r3, #1
 80063c4:	4013      	ands	r3, r2
 80063c6:	d014      	beq.n	80063f2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063c8:	f7fe f992 	bl	80046f0 <HAL_GetTick>
 80063cc:	0003      	movs	r3, r0
 80063ce:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80063d0:	e009      	b.n	80063e6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80063d2:	f7fe f98d 	bl	80046f0 <HAL_GetTick>
 80063d6:	0002      	movs	r2, r0
 80063d8:	693b      	ldr	r3, [r7, #16]
 80063da:	1ad3      	subs	r3, r2, r3
 80063dc:	4a56      	ldr	r2, [pc, #344]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d901      	bls.n	80063e6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 80063e2:	2303      	movs	r3, #3
 80063e4:	e09b      	b.n	800651e <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80063e6:	4b50      	ldr	r3, [pc, #320]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80063e8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80063ea:	2380      	movs	r3, #128	; 0x80
 80063ec:	009b      	lsls	r3, r3, #2
 80063ee:	4013      	ands	r3, r2
 80063f0:	d0ef      	beq.n	80063d2 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	685a      	ldr	r2, [r3, #4]
 80063f6:	23c0      	movs	r3, #192	; 0xc0
 80063f8:	029b      	lsls	r3, r3, #10
 80063fa:	401a      	ands	r2, r3
 80063fc:	23c0      	movs	r3, #192	; 0xc0
 80063fe:	029b      	lsls	r3, r3, #10
 8006400:	429a      	cmp	r2, r3
 8006402:	d10c      	bne.n	800641e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8006404:	4b48      	ldr	r3, [pc, #288]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4a4c      	ldr	r2, [pc, #304]	; (800653c <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800640a:	4013      	ands	r3, r2
 800640c:	0019      	movs	r1, r3
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	685a      	ldr	r2, [r3, #4]
 8006412:	23c0      	movs	r3, #192	; 0xc0
 8006414:	039b      	lsls	r3, r3, #14
 8006416:	401a      	ands	r2, r3
 8006418:	4b43      	ldr	r3, [pc, #268]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800641a:	430a      	orrs	r2, r1
 800641c:	601a      	str	r2, [r3, #0]
 800641e:	4b42      	ldr	r3, [pc, #264]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006420:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	685a      	ldr	r2, [r3, #4]
 8006426:	23c0      	movs	r3, #192	; 0xc0
 8006428:	029b      	lsls	r3, r3, #10
 800642a:	401a      	ands	r2, r3
 800642c:	4b3e      	ldr	r3, [pc, #248]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800642e:	430a      	orrs	r2, r1
 8006430:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006432:	2317      	movs	r3, #23
 8006434:	18fb      	adds	r3, r7, r3
 8006436:	781b      	ldrb	r3, [r3, #0]
 8006438:	2b01      	cmp	r3, #1
 800643a:	d105      	bne.n	8006448 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800643c:	4b3a      	ldr	r3, [pc, #232]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800643e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006440:	4b39      	ldr	r3, [pc, #228]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006442:	493f      	ldr	r1, [pc, #252]	; (8006540 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006444:	400a      	ands	r2, r1
 8006446:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	2201      	movs	r2, #1
 800644e:	4013      	ands	r3, r2
 8006450:	d009      	beq.n	8006466 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006452:	4b35      	ldr	r3, [pc, #212]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006456:	2203      	movs	r2, #3
 8006458:	4393      	bics	r3, r2
 800645a:	0019      	movs	r1, r3
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	68da      	ldr	r2, [r3, #12]
 8006460:	4b31      	ldr	r3, [pc, #196]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006462:	430a      	orrs	r2, r1
 8006464:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	2202      	movs	r2, #2
 800646c:	4013      	ands	r3, r2
 800646e:	d009      	beq.n	8006484 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006470:	4b2d      	ldr	r3, [pc, #180]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006472:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006474:	220c      	movs	r2, #12
 8006476:	4393      	bics	r3, r2
 8006478:	0019      	movs	r1, r3
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	691a      	ldr	r2, [r3, #16]
 800647e:	4b2a      	ldr	r3, [pc, #168]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006480:	430a      	orrs	r2, r1
 8006482:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	2204      	movs	r2, #4
 800648a:	4013      	ands	r3, r2
 800648c:	d009      	beq.n	80064a2 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800648e:	4b26      	ldr	r3, [pc, #152]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006490:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006492:	4a2c      	ldr	r2, [pc, #176]	; (8006544 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8006494:	4013      	ands	r3, r2
 8006496:	0019      	movs	r1, r3
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	695a      	ldr	r2, [r3, #20]
 800649c:	4b22      	ldr	r3, [pc, #136]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800649e:	430a      	orrs	r2, r1
 80064a0:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	2208      	movs	r2, #8
 80064a8:	4013      	ands	r3, r2
 80064aa:	d009      	beq.n	80064c0 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80064ac:	4b1e      	ldr	r3, [pc, #120]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80064ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064b0:	4a25      	ldr	r2, [pc, #148]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80064b2:	4013      	ands	r3, r2
 80064b4:	0019      	movs	r1, r3
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	699a      	ldr	r2, [r3, #24]
 80064ba:	4b1b      	ldr	r3, [pc, #108]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80064bc:	430a      	orrs	r2, r1
 80064be:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681a      	ldr	r2, [r3, #0]
 80064c4:	2380      	movs	r3, #128	; 0x80
 80064c6:	005b      	lsls	r3, r3, #1
 80064c8:	4013      	ands	r3, r2
 80064ca:	d009      	beq.n	80064e0 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80064cc:	4b16      	ldr	r3, [pc, #88]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80064ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064d0:	4a17      	ldr	r2, [pc, #92]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80064d2:	4013      	ands	r3, r2
 80064d4:	0019      	movs	r1, r3
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	69da      	ldr	r2, [r3, #28]
 80064da:	4b13      	ldr	r3, [pc, #76]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80064dc:	430a      	orrs	r2, r1
 80064de:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	2240      	movs	r2, #64	; 0x40
 80064e6:	4013      	ands	r3, r2
 80064e8:	d009      	beq.n	80064fe <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80064ea:	4b0f      	ldr	r3, [pc, #60]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80064ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064ee:	4a17      	ldr	r2, [pc, #92]	; (800654c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80064f0:	4013      	ands	r3, r2
 80064f2:	0019      	movs	r1, r3
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80064f8:	4b0b      	ldr	r3, [pc, #44]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80064fa:	430a      	orrs	r2, r1
 80064fc:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	2280      	movs	r2, #128	; 0x80
 8006504:	4013      	ands	r3, r2
 8006506:	d009      	beq.n	800651c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8006508:	4b07      	ldr	r3, [pc, #28]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800650a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800650c:	4a10      	ldr	r2, [pc, #64]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800650e:	4013      	ands	r3, r2
 8006510:	0019      	movs	r1, r3
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6a1a      	ldr	r2, [r3, #32]
 8006516:	4b04      	ldr	r3, [pc, #16]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006518:	430a      	orrs	r2, r1
 800651a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800651c:	2300      	movs	r3, #0
}
 800651e:	0018      	movs	r0, r3
 8006520:	46bd      	mov	sp, r7
 8006522:	b006      	add	sp, #24
 8006524:	bd80      	pop	{r7, pc}
 8006526:	46c0      	nop			; (mov r8, r8)
 8006528:	40021000 	.word	0x40021000
 800652c:	40007000 	.word	0x40007000
 8006530:	fffcffff 	.word	0xfffcffff
 8006534:	fff7ffff 	.word	0xfff7ffff
 8006538:	00001388 	.word	0x00001388
 800653c:	ffcfffff 	.word	0xffcfffff
 8006540:	efffffff 	.word	0xefffffff
 8006544:	fffff3ff 	.word	0xfffff3ff
 8006548:	ffffcfff 	.word	0xffffcfff
 800654c:	fbffffff 	.word	0xfbffffff
 8006550:	fff3ffff 	.word	0xfff3ffff

08006554 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b082      	sub	sp, #8
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d101      	bne.n	8006566 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8006562:	2301      	movs	r3, #1
 8006564:	e08e      	b.n	8006684 <HAL_RTC_Init+0x130>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2221      	movs	r2, #33	; 0x21
 800656a:	5c9b      	ldrb	r3, [r3, r2]
 800656c:	b2db      	uxtb	r3, r3
 800656e:	2b00      	cmp	r3, #0
 8006570:	d107      	bne.n	8006582 <HAL_RTC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2220      	movs	r2, #32
 8006576:	2100      	movs	r1, #0
 8006578:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	0018      	movs	r0, r3
 800657e:	f7fd fc0b 	bl	8003d98 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2221      	movs	r2, #33	; 0x21
 8006586:	2102      	movs	r1, #2
 8006588:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	22ca      	movs	r2, #202	; 0xca
 8006590:	625a      	str	r2, [r3, #36]	; 0x24
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	2253      	movs	r2, #83	; 0x53
 8006598:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	0018      	movs	r0, r3
 800659e:	f000 fcf4 	bl	8006f8a <RTC_EnterInitMode>
 80065a2:	1e03      	subs	r3, r0, #0
 80065a4:	d009      	beq.n	80065ba <HAL_RTC_Init+0x66>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	22ff      	movs	r2, #255	; 0xff
 80065ac:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2221      	movs	r2, #33	; 0x21
 80065b2:	2104      	movs	r1, #4
 80065b4:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80065b6:	2301      	movs	r3, #1
 80065b8:	e064      	b.n	8006684 <HAL_RTC_Init+0x130>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	689a      	ldr	r2, [r3, #8]
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4931      	ldr	r1, [pc, #196]	; (800668c <HAL_RTC_Init+0x138>)
 80065c6:	400a      	ands	r2, r1
 80065c8:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	6899      	ldr	r1, [r3, #8]
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	685a      	ldr	r2, [r3, #4]
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	691b      	ldr	r3, [r3, #16]
 80065d8:	431a      	orrs	r2, r3
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	699b      	ldr	r3, [r3, #24]
 80065de:	431a      	orrs	r2, r3
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	430a      	orrs	r2, r1
 80065e6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	687a      	ldr	r2, [r7, #4]
 80065ee:	68d2      	ldr	r2, [r2, #12]
 80065f0:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	6919      	ldr	r1, [r3, #16]
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	689b      	ldr	r3, [r3, #8]
 80065fc:	041a      	lsls	r2, r3, #16
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	430a      	orrs	r2, r1
 8006604:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	68da      	ldr	r2, [r3, #12]
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	2180      	movs	r1, #128	; 0x80
 8006612:	438a      	bics	r2, r1
 8006614:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	2103      	movs	r1, #3
 8006622:	438a      	bics	r2, r1
 8006624:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	69da      	ldr	r2, [r3, #28]
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	695b      	ldr	r3, [r3, #20]
 8006634:	431a      	orrs	r2, r3
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	430a      	orrs	r2, r1
 800663c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	689b      	ldr	r3, [r3, #8]
 8006644:	2220      	movs	r2, #32
 8006646:	4013      	ands	r3, r2
 8006648:	d113      	bne.n	8006672 <HAL_RTC_Init+0x11e>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	0018      	movs	r0, r3
 800664e:	f000 fc75 	bl	8006f3c <HAL_RTC_WaitForSynchro>
 8006652:	1e03      	subs	r3, r0, #0
 8006654:	d00d      	beq.n	8006672 <HAL_RTC_Init+0x11e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	22ff      	movs	r2, #255	; 0xff
 800665c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2221      	movs	r2, #33	; 0x21
 8006662:	2104      	movs	r1, #4
 8006664:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2220      	movs	r2, #32
 800666a:	2100      	movs	r1, #0
 800666c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800666e:	2301      	movs	r3, #1
 8006670:	e008      	b.n	8006684 <HAL_RTC_Init+0x130>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	22ff      	movs	r2, #255	; 0xff
 8006678:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2221      	movs	r2, #33	; 0x21
 800667e:	2101      	movs	r1, #1
 8006680:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006682:	2300      	movs	r3, #0
  }
}
 8006684:	0018      	movs	r0, r3
 8006686:	46bd      	mov	sp, r7
 8006688:	b002      	add	sp, #8
 800668a:	bd80      	pop	{r7, pc}
 800668c:	ff8fffbf 	.word	0xff8fffbf

08006690 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006690:	b590      	push	{r4, r7, lr}
 8006692:	b087      	sub	sp, #28
 8006694:	af00      	add	r7, sp, #0
 8006696:	60f8      	str	r0, [r7, #12]
 8006698:	60b9      	str	r1, [r7, #8]
 800669a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	2220      	movs	r2, #32
 80066a0:	5c9b      	ldrb	r3, [r3, r2]
 80066a2:	2b01      	cmp	r3, #1
 80066a4:	d101      	bne.n	80066aa <HAL_RTC_SetTime+0x1a>
 80066a6:	2302      	movs	r3, #2
 80066a8:	e0ad      	b.n	8006806 <HAL_RTC_SetTime+0x176>
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	2220      	movs	r2, #32
 80066ae:	2101      	movs	r1, #1
 80066b0:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	2221      	movs	r2, #33	; 0x21
 80066b6:	2102      	movs	r1, #2
 80066b8:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d125      	bne.n	800670c <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	689b      	ldr	r3, [r3, #8]
 80066c6:	2240      	movs	r2, #64	; 0x40
 80066c8:	4013      	ands	r3, r2
 80066ca:	d102      	bne.n	80066d2 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	2200      	movs	r2, #0
 80066d0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	781b      	ldrb	r3, [r3, #0]
 80066d6:	0018      	movs	r0, r3
 80066d8:	f000 fc81 	bl	8006fde <RTC_ByteToBcd2>
 80066dc:	0003      	movs	r3, r0
 80066de:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	785b      	ldrb	r3, [r3, #1]
 80066e4:	0018      	movs	r0, r3
 80066e6:	f000 fc7a 	bl	8006fde <RTC_ByteToBcd2>
 80066ea:	0003      	movs	r3, r0
 80066ec:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80066ee:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	789b      	ldrb	r3, [r3, #2]
 80066f4:	0018      	movs	r0, r3
 80066f6:	f000 fc72 	bl	8006fde <RTC_ByteToBcd2>
 80066fa:	0003      	movs	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80066fc:	0022      	movs	r2, r4
 80066fe:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	78db      	ldrb	r3, [r3, #3]
 8006704:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8006706:	4313      	orrs	r3, r2
 8006708:	617b      	str	r3, [r7, #20]
 800670a:	e017      	b.n	800673c <HAL_RTC_SetTime+0xac>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	689b      	ldr	r3, [r3, #8]
 8006712:	2240      	movs	r2, #64	; 0x40
 8006714:	4013      	ands	r3, r2
 8006716:	d102      	bne.n	800671e <HAL_RTC_SetTime+0x8e>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	2200      	movs	r2, #0
 800671c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	781b      	ldrb	r3, [r3, #0]
 8006722:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	785b      	ldrb	r3, [r3, #1]
 8006728:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800672a:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800672c:	68ba      	ldr	r2, [r7, #8]
 800672e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8006730:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8006732:	68bb      	ldr	r3, [r7, #8]
 8006734:	78db      	ldrb	r3, [r3, #3]
 8006736:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8006738:	4313      	orrs	r3, r2
 800673a:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	22ca      	movs	r2, #202	; 0xca
 8006742:	625a      	str	r2, [r3, #36]	; 0x24
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	2253      	movs	r2, #83	; 0x53
 800674a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	0018      	movs	r0, r3
 8006750:	f000 fc1b 	bl	8006f8a <RTC_EnterInitMode>
 8006754:	1e03      	subs	r3, r0, #0
 8006756:	d00d      	beq.n	8006774 <HAL_RTC_SetTime+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	22ff      	movs	r2, #255	; 0xff
 800675e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	2221      	movs	r2, #33	; 0x21
 8006764:	2104      	movs	r1, #4
 8006766:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	2220      	movs	r2, #32
 800676c:	2100      	movs	r1, #0
 800676e:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8006770:	2301      	movs	r3, #1
 8006772:	e048      	b.n	8006806 <HAL_RTC_SetTime+0x176>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	697a      	ldr	r2, [r7, #20]
 800677a:	4925      	ldr	r1, [pc, #148]	; (8006810 <HAL_RTC_SetTime+0x180>)
 800677c:	400a      	ands	r2, r1
 800677e:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	689a      	ldr	r2, [r3, #8]
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	4922      	ldr	r1, [pc, #136]	; (8006814 <HAL_RTC_SetTime+0x184>)
 800678c:	400a      	ands	r2, r1
 800678e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	6899      	ldr	r1, [r3, #8]
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	68da      	ldr	r2, [r3, #12]
 800679a:	68bb      	ldr	r3, [r7, #8]
 800679c:	691b      	ldr	r3, [r3, #16]
 800679e:	431a      	orrs	r2, r3
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	430a      	orrs	r2, r1
 80067a6:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	68da      	ldr	r2, [r3, #12]
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	2180      	movs	r1, #128	; 0x80
 80067b4:	438a      	bics	r2, r1
 80067b6:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	689b      	ldr	r3, [r3, #8]
 80067be:	2220      	movs	r2, #32
 80067c0:	4013      	ands	r3, r2
 80067c2:	d113      	bne.n	80067ec <HAL_RTC_SetTime+0x15c>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	0018      	movs	r0, r3
 80067c8:	f000 fbb8 	bl	8006f3c <HAL_RTC_WaitForSynchro>
 80067cc:	1e03      	subs	r3, r0, #0
 80067ce:	d00d      	beq.n	80067ec <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	22ff      	movs	r2, #255	; 0xff
 80067d6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	2221      	movs	r2, #33	; 0x21
 80067dc:	2104      	movs	r1, #4
 80067de:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	2220      	movs	r2, #32
 80067e4:	2100      	movs	r1, #0
 80067e6:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80067e8:	2301      	movs	r3, #1
 80067ea:	e00c      	b.n	8006806 <HAL_RTC_SetTime+0x176>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	22ff      	movs	r2, #255	; 0xff
 80067f2:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	2221      	movs	r2, #33	; 0x21
 80067f8:	2101      	movs	r1, #1
 80067fa:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hrtc);
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	2220      	movs	r2, #32
 8006800:	2100      	movs	r1, #0
 8006802:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006804:	2300      	movs	r3, #0
  }
}
 8006806:	0018      	movs	r0, r3
 8006808:	46bd      	mov	sp, r7
 800680a:	b007      	add	sp, #28
 800680c:	bd90      	pop	{r4, r7, pc}
 800680e:	46c0      	nop			; (mov r8, r8)
 8006810:	007f7f7f 	.word	0x007f7f7f
 8006814:	fffbffff 	.word	0xfffbffff

08006818 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b086      	sub	sp, #24
 800681c:	af00      	add	r7, sp, #0
 800681e:	60f8      	str	r0, [r7, #12]
 8006820:	60b9      	str	r1, [r7, #8]
 8006822:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	691b      	ldr	r3, [r3, #16]
 8006834:	045b      	lsls	r3, r3, #17
 8006836:	0c5a      	lsrs	r2, r3, #17
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4a22      	ldr	r2, [pc, #136]	; (80068cc <HAL_RTC_GetTime+0xb4>)
 8006844:	4013      	ands	r3, r2
 8006846:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8006848:	697b      	ldr	r3, [r7, #20]
 800684a:	0c1b      	lsrs	r3, r3, #16
 800684c:	b2db      	uxtb	r3, r3
 800684e:	223f      	movs	r2, #63	; 0x3f
 8006850:	4013      	ands	r3, r2
 8006852:	b2da      	uxtb	r2, r3
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8006858:	697b      	ldr	r3, [r7, #20]
 800685a:	0a1b      	lsrs	r3, r3, #8
 800685c:	b2db      	uxtb	r3, r3
 800685e:	227f      	movs	r2, #127	; 0x7f
 8006860:	4013      	ands	r3, r2
 8006862:	b2da      	uxtb	r2, r3
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8006868:	697b      	ldr	r3, [r7, #20]
 800686a:	b2db      	uxtb	r3, r3
 800686c:	227f      	movs	r2, #127	; 0x7f
 800686e:	4013      	ands	r3, r2
 8006870:	b2da      	uxtb	r2, r3
 8006872:	68bb      	ldr	r3, [r7, #8]
 8006874:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8006876:	697b      	ldr	r3, [r7, #20]
 8006878:	0c1b      	lsrs	r3, r3, #16
 800687a:	b2db      	uxtb	r3, r3
 800687c:	2240      	movs	r2, #64	; 0x40
 800687e:	4013      	ands	r3, r2
 8006880:	b2da      	uxtb	r2, r3
 8006882:	68bb      	ldr	r3, [r7, #8]
 8006884:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d11a      	bne.n	80068c2 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	781b      	ldrb	r3, [r3, #0]
 8006890:	0018      	movs	r0, r3
 8006892:	f000 fbcd 	bl	8007030 <RTC_Bcd2ToByte>
 8006896:	0003      	movs	r3, r0
 8006898:	001a      	movs	r2, r3
 800689a:	68bb      	ldr	r3, [r7, #8]
 800689c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	785b      	ldrb	r3, [r3, #1]
 80068a2:	0018      	movs	r0, r3
 80068a4:	f000 fbc4 	bl	8007030 <RTC_Bcd2ToByte>
 80068a8:	0003      	movs	r3, r0
 80068aa:	001a      	movs	r2, r3
 80068ac:	68bb      	ldr	r3, [r7, #8]
 80068ae:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80068b0:	68bb      	ldr	r3, [r7, #8]
 80068b2:	789b      	ldrb	r3, [r3, #2]
 80068b4:	0018      	movs	r0, r3
 80068b6:	f000 fbbb 	bl	8007030 <RTC_Bcd2ToByte>
 80068ba:	0003      	movs	r3, r0
 80068bc:	001a      	movs	r2, r3
 80068be:	68bb      	ldr	r3, [r7, #8]
 80068c0:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80068c2:	2300      	movs	r3, #0
}
 80068c4:	0018      	movs	r0, r3
 80068c6:	46bd      	mov	sp, r7
 80068c8:	b006      	add	sp, #24
 80068ca:	bd80      	pop	{r7, pc}
 80068cc:	007f7f7f 	.word	0x007f7f7f

080068d0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80068d0:	b590      	push	{r4, r7, lr}
 80068d2:	b087      	sub	sp, #28
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	60f8      	str	r0, [r7, #12]
 80068d8:	60b9      	str	r1, [r7, #8]
 80068da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	2220      	movs	r2, #32
 80068e0:	5c9b      	ldrb	r3, [r3, r2]
 80068e2:	2b01      	cmp	r3, #1
 80068e4:	d101      	bne.n	80068ea <HAL_RTC_SetDate+0x1a>
 80068e6:	2302      	movs	r3, #2
 80068e8:	e099      	b.n	8006a1e <HAL_RTC_SetDate+0x14e>
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	2220      	movs	r2, #32
 80068ee:	2101      	movs	r1, #1
 80068f0:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	2221      	movs	r2, #33	; 0x21
 80068f6:	2102      	movs	r1, #2
 80068f8:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d10e      	bne.n	800691e <HAL_RTC_SetDate+0x4e>
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	785b      	ldrb	r3, [r3, #1]
 8006904:	001a      	movs	r2, r3
 8006906:	2310      	movs	r3, #16
 8006908:	4013      	ands	r3, r2
 800690a:	d008      	beq.n	800691e <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	785b      	ldrb	r3, [r3, #1]
 8006910:	2210      	movs	r2, #16
 8006912:	4393      	bics	r3, r2
 8006914:	b2db      	uxtb	r3, r3
 8006916:	330a      	adds	r3, #10
 8006918:	b2da      	uxtb	r2, r3
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d11c      	bne.n	800695e <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	78db      	ldrb	r3, [r3, #3]
 8006928:	0018      	movs	r0, r3
 800692a:	f000 fb58 	bl	8006fde <RTC_ByteToBcd2>
 800692e:	0003      	movs	r3, r0
 8006930:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	785b      	ldrb	r3, [r3, #1]
 8006936:	0018      	movs	r0, r3
 8006938:	f000 fb51 	bl	8006fde <RTC_ByteToBcd2>
 800693c:	0003      	movs	r3, r0
 800693e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8006940:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	789b      	ldrb	r3, [r3, #2]
 8006946:	0018      	movs	r0, r3
 8006948:	f000 fb49 	bl	8006fde <RTC_ByteToBcd2>
 800694c:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800694e:	0022      	movs	r2, r4
 8006950:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8006952:	68bb      	ldr	r3, [r7, #8]
 8006954:	781b      	ldrb	r3, [r3, #0]
 8006956:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8006958:	4313      	orrs	r3, r2
 800695a:	617b      	str	r3, [r7, #20]
 800695c:	e00e      	b.n	800697c <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	78db      	ldrb	r3, [r3, #3]
 8006962:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	785b      	ldrb	r3, [r3, #1]
 8006968:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800696a:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800696c:	68ba      	ldr	r2, [r7, #8]
 800696e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8006970:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8006972:	68bb      	ldr	r3, [r7, #8]
 8006974:	781b      	ldrb	r3, [r3, #0]
 8006976:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8006978:	4313      	orrs	r3, r2
 800697a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	22ca      	movs	r2, #202	; 0xca
 8006982:	625a      	str	r2, [r3, #36]	; 0x24
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	2253      	movs	r2, #83	; 0x53
 800698a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	0018      	movs	r0, r3
 8006990:	f000 fafb 	bl	8006f8a <RTC_EnterInitMode>
 8006994:	1e03      	subs	r3, r0, #0
 8006996:	d00d      	beq.n	80069b4 <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	22ff      	movs	r2, #255	; 0xff
 800699e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	2221      	movs	r2, #33	; 0x21
 80069a4:	2104      	movs	r1, #4
 80069a6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	2220      	movs	r2, #32
 80069ac:	2100      	movs	r1, #0
 80069ae:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80069b0:	2301      	movs	r3, #1
 80069b2:	e034      	b.n	8006a1e <HAL_RTC_SetDate+0x14e>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	697a      	ldr	r2, [r7, #20]
 80069ba:	491b      	ldr	r1, [pc, #108]	; (8006a28 <HAL_RTC_SetDate+0x158>)
 80069bc:	400a      	ands	r2, r1
 80069be:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	68da      	ldr	r2, [r3, #12]
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	2180      	movs	r1, #128	; 0x80
 80069cc:	438a      	bics	r2, r1
 80069ce:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	689b      	ldr	r3, [r3, #8]
 80069d6:	2220      	movs	r2, #32
 80069d8:	4013      	ands	r3, r2
 80069da:	d113      	bne.n	8006a04 <HAL_RTC_SetDate+0x134>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	0018      	movs	r0, r3
 80069e0:	f000 faac 	bl	8006f3c <HAL_RTC_WaitForSynchro>
 80069e4:	1e03      	subs	r3, r0, #0
 80069e6:	d00d      	beq.n	8006a04 <HAL_RTC_SetDate+0x134>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	22ff      	movs	r2, #255	; 0xff
 80069ee:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	2221      	movs	r2, #33	; 0x21
 80069f4:	2104      	movs	r1, #4
 80069f6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	2220      	movs	r2, #32
 80069fc:	2100      	movs	r1, #0
 80069fe:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8006a00:	2301      	movs	r3, #1
 8006a02:	e00c      	b.n	8006a1e <HAL_RTC_SetDate+0x14e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	22ff      	movs	r2, #255	; 0xff
 8006a0a:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	2221      	movs	r2, #33	; 0x21
 8006a10:	2101      	movs	r1, #1
 8006a12:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	2220      	movs	r2, #32
 8006a18:	2100      	movs	r1, #0
 8006a1a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006a1c:	2300      	movs	r3, #0
  }
}
 8006a1e:	0018      	movs	r0, r3
 8006a20:	46bd      	mov	sp, r7
 8006a22:	b007      	add	sp, #28
 8006a24:	bd90      	pop	{r4, r7, pc}
 8006a26:	46c0      	nop			; (mov r8, r8)
 8006a28:	00ffff3f 	.word	0x00ffff3f

08006a2c <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b086      	sub	sp, #24
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	60f8      	str	r0, [r7, #12]
 8006a34:	60b9      	str	r1, [r7, #8]
 8006a36:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	685b      	ldr	r3, [r3, #4]
 8006a3e:	4a21      	ldr	r2, [pc, #132]	; (8006ac4 <HAL_RTC_GetDate+0x98>)
 8006a40:	4013      	ands	r3, r2
 8006a42:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8006a44:	697b      	ldr	r3, [r7, #20]
 8006a46:	0c1b      	lsrs	r3, r3, #16
 8006a48:	b2da      	uxtb	r2, r3
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8006a4e:	697b      	ldr	r3, [r7, #20]
 8006a50:	0a1b      	lsrs	r3, r3, #8
 8006a52:	b2db      	uxtb	r3, r3
 8006a54:	221f      	movs	r2, #31
 8006a56:	4013      	ands	r3, r2
 8006a58:	b2da      	uxtb	r2, r3
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8006a5e:	697b      	ldr	r3, [r7, #20]
 8006a60:	b2db      	uxtb	r3, r3
 8006a62:	223f      	movs	r2, #63	; 0x3f
 8006a64:	4013      	ands	r3, r2
 8006a66:	b2da      	uxtb	r2, r3
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8006a6c:	697b      	ldr	r3, [r7, #20]
 8006a6e:	0b5b      	lsrs	r3, r3, #13
 8006a70:	b2db      	uxtb	r3, r3
 8006a72:	2207      	movs	r2, #7
 8006a74:	4013      	ands	r3, r2
 8006a76:	b2da      	uxtb	r2, r3
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d11a      	bne.n	8006ab8 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	78db      	ldrb	r3, [r3, #3]
 8006a86:	0018      	movs	r0, r3
 8006a88:	f000 fad2 	bl	8007030 <RTC_Bcd2ToByte>
 8006a8c:	0003      	movs	r3, r0
 8006a8e:	001a      	movs	r2, r3
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	785b      	ldrb	r3, [r3, #1]
 8006a98:	0018      	movs	r0, r3
 8006a9a:	f000 fac9 	bl	8007030 <RTC_Bcd2ToByte>
 8006a9e:	0003      	movs	r3, r0
 8006aa0:	001a      	movs	r2, r3
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8006aa6:	68bb      	ldr	r3, [r7, #8]
 8006aa8:	789b      	ldrb	r3, [r3, #2]
 8006aaa:	0018      	movs	r0, r3
 8006aac:	f000 fac0 	bl	8007030 <RTC_Bcd2ToByte>
 8006ab0:	0003      	movs	r3, r0
 8006ab2:	001a      	movs	r2, r3
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8006ab8:	2300      	movs	r3, #0
}
 8006aba:	0018      	movs	r0, r3
 8006abc:	46bd      	mov	sp, r7
 8006abe:	b006      	add	sp, #24
 8006ac0:	bd80      	pop	{r7, pc}
 8006ac2:	46c0      	nop			; (mov r8, r8)
 8006ac4:	00ffff3f 	.word	0x00ffff3f

08006ac8 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8006ac8:	b590      	push	{r4, r7, lr}
 8006aca:	b089      	sub	sp, #36	; 0x24
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	60f8      	str	r0, [r7, #12]
 8006ad0:	60b9      	str	r1, [r7, #8]
 8006ad2:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	2220      	movs	r2, #32
 8006ad8:	5c9b      	ldrb	r3, [r3, r2]
 8006ada:	2b01      	cmp	r3, #1
 8006adc:	d101      	bne.n	8006ae2 <HAL_RTC_SetAlarm_IT+0x1a>
 8006ade:	2302      	movs	r3, #2
 8006ae0:	e130      	b.n	8006d44 <HAL_RTC_SetAlarm_IT+0x27c>
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	2220      	movs	r2, #32
 8006ae6:	2101      	movs	r1, #1
 8006ae8:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	2221      	movs	r2, #33	; 0x21
 8006aee:	2102      	movs	r1, #2
 8006af0:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d136      	bne.n	8006b66 <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	689b      	ldr	r3, [r3, #8]
 8006afe:	2240      	movs	r2, #64	; 0x40
 8006b00:	4013      	ands	r3, r2
 8006b02:	d102      	bne.n	8006b0a <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006b04:	68bb      	ldr	r3, [r7, #8]
 8006b06:	2200      	movs	r2, #0
 8006b08:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	781b      	ldrb	r3, [r3, #0]
 8006b0e:	0018      	movs	r0, r3
 8006b10:	f000 fa65 	bl	8006fde <RTC_ByteToBcd2>
 8006b14:	0003      	movs	r3, r0
 8006b16:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8006b18:	68bb      	ldr	r3, [r7, #8]
 8006b1a:	785b      	ldrb	r3, [r3, #1]
 8006b1c:	0018      	movs	r0, r3
 8006b1e:	f000 fa5e 	bl	8006fde <RTC_ByteToBcd2>
 8006b22:	0003      	movs	r3, r0
 8006b24:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8006b26:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	789b      	ldrb	r3, [r3, #2]
 8006b2c:	0018      	movs	r0, r3
 8006b2e:	f000 fa56 	bl	8006fde <RTC_ByteToBcd2>
 8006b32:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8006b34:	0022      	movs	r2, r4
 8006b36:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	78db      	ldrb	r3, [r3, #3]
 8006b3c:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8006b3e:	431a      	orrs	r2, r3
 8006b40:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8006b42:	68bb      	ldr	r3, [r7, #8]
 8006b44:	2220      	movs	r2, #32
 8006b46:	5c9b      	ldrb	r3, [r3, r2]
 8006b48:	0018      	movs	r0, r3
 8006b4a:	f000 fa48 	bl	8006fde <RTC_ByteToBcd2>
 8006b4e:	0003      	movs	r3, r0
 8006b50:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8006b52:	0022      	movs	r2, r4
 8006b54:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006b56:	68bb      	ldr	r3, [r7, #8]
 8006b58:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8006b5a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8006b60:	4313      	orrs	r3, r2
 8006b62:	61fb      	str	r3, [r7, #28]
 8006b64:	e022      	b.n	8006bac <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	689b      	ldr	r3, [r3, #8]
 8006b6c:	2240      	movs	r2, #64	; 0x40
 8006b6e:	4013      	ands	r3, r2
 8006b70:	d102      	bne.n	8006b78 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006b72:	68bb      	ldr	r3, [r7, #8]
 8006b74:	2200      	movs	r2, #0
 8006b76:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	781b      	ldrb	r3, [r3, #0]
 8006b7c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	785b      	ldrb	r3, [r3, #1]
 8006b82:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8006b84:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8006b86:	68ba      	ldr	r2, [r7, #8]
 8006b88:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8006b8a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8006b8c:	68bb      	ldr	r3, [r7, #8]
 8006b8e:	78db      	ldrb	r3, [r3, #3]
 8006b90:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8006b92:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	2120      	movs	r1, #32
 8006b98:	5c5b      	ldrb	r3, [r3, r1]
 8006b9a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8006b9c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8006ba2:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8006ba4:	68bb      	ldr	r3, [r7, #8]
 8006ba6:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8006ba8:	4313      	orrs	r3, r2
 8006baa:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	685a      	ldr	r2, [r3, #4]
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	699b      	ldr	r3, [r3, #24]
 8006bb4:	4313      	orrs	r3, r2
 8006bb6:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	22ca      	movs	r2, #202	; 0xca
 8006bbe:	625a      	str	r2, [r3, #36]	; 0x24
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	2253      	movs	r2, #83	; 0x53
 8006bc6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006bcc:	2380      	movs	r3, #128	; 0x80
 8006bce:	005b      	lsls	r3, r3, #1
 8006bd0:	429a      	cmp	r2, r3
 8006bd2:	d14e      	bne.n	8006c72 <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	689a      	ldr	r2, [r3, #8]
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	495b      	ldr	r1, [pc, #364]	; (8006d4c <HAL_RTC_SetAlarm_IT+0x284>)
 8006be0:	400a      	ands	r2, r1
 8006be2:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	68db      	ldr	r3, [r3, #12]
 8006bea:	22ff      	movs	r2, #255	; 0xff
 8006bec:	401a      	ands	r2, r3
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	4957      	ldr	r1, [pc, #348]	; (8006d50 <HAL_RTC_SetAlarm_IT+0x288>)
 8006bf4:	430a      	orrs	r2, r1
 8006bf6:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006bf8:	f7fd fd7a 	bl	80046f0 <HAL_GetTick>
 8006bfc:	0003      	movs	r3, r0
 8006bfe:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8006c00:	e016      	b.n	8006c30 <HAL_RTC_SetAlarm_IT+0x168>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006c02:	f7fd fd75 	bl	80046f0 <HAL_GetTick>
 8006c06:	0002      	movs	r2, r0
 8006c08:	697b      	ldr	r3, [r7, #20]
 8006c0a:	1ad2      	subs	r2, r2, r3
 8006c0c:	23fa      	movs	r3, #250	; 0xfa
 8006c0e:	009b      	lsls	r3, r3, #2
 8006c10:	429a      	cmp	r2, r3
 8006c12:	d90d      	bls.n	8006c30 <HAL_RTC_SetAlarm_IT+0x168>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	22ff      	movs	r2, #255	; 0xff
 8006c1a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	2221      	movs	r2, #33	; 0x21
 8006c20:	2103      	movs	r1, #3
 8006c22:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	2220      	movs	r2, #32
 8006c28:	2100      	movs	r1, #0
 8006c2a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006c2c:	2303      	movs	r3, #3
 8006c2e:	e089      	b.n	8006d44 <HAL_RTC_SetAlarm_IT+0x27c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	68db      	ldr	r3, [r3, #12]
 8006c36:	2201      	movs	r2, #1
 8006c38:	4013      	ands	r3, r2
 8006c3a:	d0e2      	beq.n	8006c02 <HAL_RTC_SetAlarm_IT+0x13a>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	69fa      	ldr	r2, [r7, #28]
 8006c42:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	69ba      	ldr	r2, [r7, #24]
 8006c4a:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	689a      	ldr	r2, [r3, #8]
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	2180      	movs	r1, #128	; 0x80
 8006c58:	0049      	lsls	r1, r1, #1
 8006c5a:	430a      	orrs	r2, r1
 8006c5c:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	689a      	ldr	r2, [r3, #8]
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	2180      	movs	r1, #128	; 0x80
 8006c6a:	0149      	lsls	r1, r1, #5
 8006c6c:	430a      	orrs	r2, r1
 8006c6e:	609a      	str	r2, [r3, #8]
 8006c70:	e04d      	b.n	8006d0e <HAL_RTC_SetAlarm_IT+0x246>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	689a      	ldr	r2, [r3, #8]
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	4935      	ldr	r1, [pc, #212]	; (8006d54 <HAL_RTC_SetAlarm_IT+0x28c>)
 8006c7e:	400a      	ands	r2, r1
 8006c80:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	68db      	ldr	r3, [r3, #12]
 8006c88:	22ff      	movs	r2, #255	; 0xff
 8006c8a:	401a      	ands	r2, r3
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	4931      	ldr	r1, [pc, #196]	; (8006d58 <HAL_RTC_SetAlarm_IT+0x290>)
 8006c92:	430a      	orrs	r2, r1
 8006c94:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006c96:	f7fd fd2b 	bl	80046f0 <HAL_GetTick>
 8006c9a:	0003      	movs	r3, r0
 8006c9c:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8006c9e:	e016      	b.n	8006cce <HAL_RTC_SetAlarm_IT+0x206>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006ca0:	f7fd fd26 	bl	80046f0 <HAL_GetTick>
 8006ca4:	0002      	movs	r2, r0
 8006ca6:	697b      	ldr	r3, [r7, #20]
 8006ca8:	1ad2      	subs	r2, r2, r3
 8006caa:	23fa      	movs	r3, #250	; 0xfa
 8006cac:	009b      	lsls	r3, r3, #2
 8006cae:	429a      	cmp	r2, r3
 8006cb0:	d90d      	bls.n	8006cce <HAL_RTC_SetAlarm_IT+0x206>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	22ff      	movs	r2, #255	; 0xff
 8006cb8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	2221      	movs	r2, #33	; 0x21
 8006cbe:	2103      	movs	r1, #3
 8006cc0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	2220      	movs	r2, #32
 8006cc6:	2100      	movs	r1, #0
 8006cc8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006cca:	2303      	movs	r3, #3
 8006ccc:	e03a      	b.n	8006d44 <HAL_RTC_SetAlarm_IT+0x27c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	68db      	ldr	r3, [r3, #12]
 8006cd4:	2202      	movs	r2, #2
 8006cd6:	4013      	ands	r3, r2
 8006cd8:	d0e2      	beq.n	8006ca0 <HAL_RTC_SetAlarm_IT+0x1d8>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	69fa      	ldr	r2, [r7, #28]
 8006ce0:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	69ba      	ldr	r2, [r7, #24]
 8006ce8:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	689a      	ldr	r2, [r3, #8]
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	2180      	movs	r1, #128	; 0x80
 8006cf6:	0089      	lsls	r1, r1, #2
 8006cf8:	430a      	orrs	r2, r1
 8006cfa:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	689a      	ldr	r2, [r3, #8]
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	2180      	movs	r1, #128	; 0x80
 8006d08:	0189      	lsls	r1, r1, #6
 8006d0a:	430a      	orrs	r2, r1
 8006d0c:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8006d0e:	4b13      	ldr	r3, [pc, #76]	; (8006d5c <HAL_RTC_SetAlarm_IT+0x294>)
 8006d10:	681a      	ldr	r2, [r3, #0]
 8006d12:	4b12      	ldr	r3, [pc, #72]	; (8006d5c <HAL_RTC_SetAlarm_IT+0x294>)
 8006d14:	2180      	movs	r1, #128	; 0x80
 8006d16:	0289      	lsls	r1, r1, #10
 8006d18:	430a      	orrs	r2, r1
 8006d1a:	601a      	str	r2, [r3, #0]

  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8006d1c:	4b0f      	ldr	r3, [pc, #60]	; (8006d5c <HAL_RTC_SetAlarm_IT+0x294>)
 8006d1e:	689a      	ldr	r2, [r3, #8]
 8006d20:	4b0e      	ldr	r3, [pc, #56]	; (8006d5c <HAL_RTC_SetAlarm_IT+0x294>)
 8006d22:	2180      	movs	r1, #128	; 0x80
 8006d24:	0289      	lsls	r1, r1, #10
 8006d26:	430a      	orrs	r2, r1
 8006d28:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	22ff      	movs	r2, #255	; 0xff
 8006d30:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	2221      	movs	r2, #33	; 0x21
 8006d36:	2101      	movs	r1, #1
 8006d38:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	2220      	movs	r2, #32
 8006d3e:	2100      	movs	r1, #0
 8006d40:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006d42:	2300      	movs	r3, #0
}
 8006d44:	0018      	movs	r0, r3
 8006d46:	46bd      	mov	sp, r7
 8006d48:	b009      	add	sp, #36	; 0x24
 8006d4a:	bd90      	pop	{r4, r7, pc}
 8006d4c:	fffffeff 	.word	0xfffffeff
 8006d50:	fffffe7f 	.word	0xfffffe7f
 8006d54:	fffffdff 	.word	0xfffffdff
 8006d58:	fffffd7f 	.word	0xfffffd7f
 8006d5c:	40010400 	.word	0x40010400

08006d60 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b084      	sub	sp, #16
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
 8006d68:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2220      	movs	r2, #32
 8006d6e:	5c9b      	ldrb	r3, [r3, r2]
 8006d70:	2b01      	cmp	r3, #1
 8006d72:	d101      	bne.n	8006d78 <HAL_RTC_DeactivateAlarm+0x18>
 8006d74:	2302      	movs	r3, #2
 8006d76:	e086      	b.n	8006e86 <HAL_RTC_DeactivateAlarm+0x126>
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2220      	movs	r2, #32
 8006d7c:	2101      	movs	r1, #1
 8006d7e:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2221      	movs	r2, #33	; 0x21
 8006d84:	2102      	movs	r1, #2
 8006d86:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	22ca      	movs	r2, #202	; 0xca
 8006d8e:	625a      	str	r2, [r3, #36]	; 0x24
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	2253      	movs	r2, #83	; 0x53
 8006d96:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 8006d98:	683a      	ldr	r2, [r7, #0]
 8006d9a:	2380      	movs	r3, #128	; 0x80
 8006d9c:	005b      	lsls	r3, r3, #1
 8006d9e:	429a      	cmp	r2, r3
 8006da0:	d132      	bne.n	8006e08 <HAL_RTC_DeactivateAlarm+0xa8>
  {
    /* AlarmA */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	689a      	ldr	r2, [r3, #8]
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	4938      	ldr	r1, [pc, #224]	; (8006e90 <HAL_RTC_DeactivateAlarm+0x130>)
 8006dae:	400a      	ands	r2, r1
 8006db0:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	689a      	ldr	r2, [r3, #8]
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	4935      	ldr	r1, [pc, #212]	; (8006e94 <HAL_RTC_DeactivateAlarm+0x134>)
 8006dbe:	400a      	ands	r2, r1
 8006dc0:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 8006dc2:	f7fd fc95 	bl	80046f0 <HAL_GetTick>
 8006dc6:	0003      	movs	r3, r0
 8006dc8:	60fb      	str	r3, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8006dca:	e016      	b.n	8006dfa <HAL_RTC_DeactivateAlarm+0x9a>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006dcc:	f7fd fc90 	bl	80046f0 <HAL_GetTick>
 8006dd0:	0002      	movs	r2, r0
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	1ad2      	subs	r2, r2, r3
 8006dd6:	23fa      	movs	r3, #250	; 0xfa
 8006dd8:	009b      	lsls	r3, r3, #2
 8006dda:	429a      	cmp	r2, r3
 8006ddc:	d90d      	bls.n	8006dfa <HAL_RTC_DeactivateAlarm+0x9a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	22ff      	movs	r2, #255	; 0xff
 8006de4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2221      	movs	r2, #33	; 0x21
 8006dea:	2103      	movs	r1, #3
 8006dec:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2220      	movs	r2, #32
 8006df2:	2100      	movs	r1, #0
 8006df4:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006df6:	2303      	movs	r3, #3
 8006df8:	e045      	b.n	8006e86 <HAL_RTC_DeactivateAlarm+0x126>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	68db      	ldr	r3, [r3, #12]
 8006e00:	2201      	movs	r2, #1
 8006e02:	4013      	ands	r3, r2
 8006e04:	d0e2      	beq.n	8006dcc <HAL_RTC_DeactivateAlarm+0x6c>
 8006e06:	e031      	b.n	8006e6c <HAL_RTC_DeactivateAlarm+0x10c>
    }
  }
  else
  {
    /* AlarmB */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	689a      	ldr	r2, [r3, #8]
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	4921      	ldr	r1, [pc, #132]	; (8006e98 <HAL_RTC_DeactivateAlarm+0x138>)
 8006e14:	400a      	ands	r2, r1
 8006e16:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	689a      	ldr	r2, [r3, #8]
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	491e      	ldr	r1, [pc, #120]	; (8006e9c <HAL_RTC_DeactivateAlarm+0x13c>)
 8006e24:	400a      	ands	r2, r1
 8006e26:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 8006e28:	f7fd fc62 	bl	80046f0 <HAL_GetTick>
 8006e2c:	0003      	movs	r3, r0
 8006e2e:	60fb      	str	r3, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8006e30:	e016      	b.n	8006e60 <HAL_RTC_DeactivateAlarm+0x100>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006e32:	f7fd fc5d 	bl	80046f0 <HAL_GetTick>
 8006e36:	0002      	movs	r2, r0
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	1ad2      	subs	r2, r2, r3
 8006e3c:	23fa      	movs	r3, #250	; 0xfa
 8006e3e:	009b      	lsls	r3, r3, #2
 8006e40:	429a      	cmp	r2, r3
 8006e42:	d90d      	bls.n	8006e60 <HAL_RTC_DeactivateAlarm+0x100>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	22ff      	movs	r2, #255	; 0xff
 8006e4a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2221      	movs	r2, #33	; 0x21
 8006e50:	2103      	movs	r1, #3
 8006e52:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2220      	movs	r2, #32
 8006e58:	2100      	movs	r1, #0
 8006e5a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006e5c:	2303      	movs	r3, #3
 8006e5e:	e012      	b.n	8006e86 <HAL_RTC_DeactivateAlarm+0x126>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	68db      	ldr	r3, [r3, #12]
 8006e66:	2202      	movs	r2, #2
 8006e68:	4013      	ands	r3, r2
 8006e6a:	d0e2      	beq.n	8006e32 <HAL_RTC_DeactivateAlarm+0xd2>
      }
    }
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	22ff      	movs	r2, #255	; 0xff
 8006e72:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2221      	movs	r2, #33	; 0x21
 8006e78:	2101      	movs	r1, #1
 8006e7a:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2220      	movs	r2, #32
 8006e80:	2100      	movs	r1, #0
 8006e82:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006e84:	2300      	movs	r3, #0
}
 8006e86:	0018      	movs	r0, r3
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	b004      	add	sp, #16
 8006e8c:	bd80      	pop	{r7, pc}
 8006e8e:	46c0      	nop			; (mov r8, r8)
 8006e90:	fffffeff 	.word	0xfffffeff
 8006e94:	ffffefff 	.word	0xffffefff
 8006e98:	fffffdff 	.word	0xfffffdff
 8006e9c:	ffffdfff 	.word	0xffffdfff

08006ea0 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b082      	sub	sp, #8
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	689a      	ldr	r2, [r3, #8]
 8006eae:	2380      	movs	r3, #128	; 0x80
 8006eb0:	015b      	lsls	r3, r3, #5
 8006eb2:	4013      	ands	r3, r2
 8006eb4:	d014      	beq.n	8006ee0 <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	68da      	ldr	r2, [r3, #12]
 8006ebc:	2380      	movs	r3, #128	; 0x80
 8006ebe:	005b      	lsls	r3, r3, #1
 8006ec0:	4013      	ands	r3, r2
 8006ec2:	d00d      	beq.n	8006ee0 <HAL_RTC_AlarmIRQHandler+0x40>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	0018      	movs	r0, r3
 8006ec8:	f7fa fe16 	bl	8001af8 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	68db      	ldr	r3, [r3, #12]
 8006ed2:	22ff      	movs	r2, #255	; 0xff
 8006ed4:	401a      	ands	r2, r3
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	4915      	ldr	r1, [pc, #84]	; (8006f30 <HAL_RTC_AlarmIRQHandler+0x90>)
 8006edc:	430a      	orrs	r2, r1
 8006ede:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	689a      	ldr	r2, [r3, #8]
 8006ee6:	2380      	movs	r3, #128	; 0x80
 8006ee8:	019b      	lsls	r3, r3, #6
 8006eea:	4013      	ands	r3, r2
 8006eec:	d014      	beq.n	8006f18 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	68da      	ldr	r2, [r3, #12]
 8006ef4:	2380      	movs	r3, #128	; 0x80
 8006ef6:	009b      	lsls	r3, r3, #2
 8006ef8:	4013      	ands	r3, r2
 8006efa:	d00d      	beq.n	8006f18 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* AlarmB callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	0018      	movs	r0, r3
 8006f00:	f7fa fe1a 	bl	8001b38 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	68db      	ldr	r3, [r3, #12]
 8006f0a:	22ff      	movs	r2, #255	; 0xff
 8006f0c:	401a      	ands	r2, r3
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	4908      	ldr	r1, [pc, #32]	; (8006f34 <HAL_RTC_AlarmIRQHandler+0x94>)
 8006f14:	430a      	orrs	r2, r1
 8006f16:	60da      	str	r2, [r3, #12]
    }
  }
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8006f18:	4b07      	ldr	r3, [pc, #28]	; (8006f38 <HAL_RTC_AlarmIRQHandler+0x98>)
 8006f1a:	2280      	movs	r2, #128	; 0x80
 8006f1c:	0292      	lsls	r2, r2, #10
 8006f1e:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2221      	movs	r2, #33	; 0x21
 8006f24:	2101      	movs	r1, #1
 8006f26:	5499      	strb	r1, [r3, r2]
}
 8006f28:	46c0      	nop			; (mov r8, r8)
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	b002      	add	sp, #8
 8006f2e:	bd80      	pop	{r7, pc}
 8006f30:	fffffe7f 	.word	0xfffffe7f
 8006f34:	fffffd7f 	.word	0xfffffd7f
 8006f38:	40010400 	.word	0x40010400

08006f3c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b084      	sub	sp, #16
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	68da      	ldr	r2, [r3, #12]
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	21a0      	movs	r1, #160	; 0xa0
 8006f50:	438a      	bics	r2, r1
 8006f52:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8006f54:	f7fd fbcc 	bl	80046f0 <HAL_GetTick>
 8006f58:	0003      	movs	r3, r0
 8006f5a:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006f5c:	e00a      	b.n	8006f74 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006f5e:	f7fd fbc7 	bl	80046f0 <HAL_GetTick>
 8006f62:	0002      	movs	r2, r0
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	1ad2      	subs	r2, r2, r3
 8006f68:	23fa      	movs	r3, #250	; 0xfa
 8006f6a:	009b      	lsls	r3, r3, #2
 8006f6c:	429a      	cmp	r2, r3
 8006f6e:	d901      	bls.n	8006f74 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8006f70:	2303      	movs	r3, #3
 8006f72:	e006      	b.n	8006f82 <HAL_RTC_WaitForSynchro+0x46>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	68db      	ldr	r3, [r3, #12]
 8006f7a:	2220      	movs	r2, #32
 8006f7c:	4013      	ands	r3, r2
 8006f7e:	d0ee      	beq.n	8006f5e <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 8006f80:	2300      	movs	r3, #0
}
 8006f82:	0018      	movs	r0, r3
 8006f84:	46bd      	mov	sp, r7
 8006f86:	b004      	add	sp, #16
 8006f88:	bd80      	pop	{r7, pc}

08006f8a <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006f8a:	b580      	push	{r7, lr}
 8006f8c:	b084      	sub	sp, #16
 8006f8e:	af00      	add	r7, sp, #0
 8006f90:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	68db      	ldr	r3, [r3, #12]
 8006f98:	2240      	movs	r2, #64	; 0x40
 8006f9a:	4013      	ands	r3, r2
 8006f9c:	d11a      	bne.n	8006fd4 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	2201      	movs	r2, #1
 8006fa4:	4252      	negs	r2, r2
 8006fa6:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006fa8:	f7fd fba2 	bl	80046f0 <HAL_GetTick>
 8006fac:	0003      	movs	r3, r0
 8006fae:	60fb      	str	r3, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006fb0:	e00a      	b.n	8006fc8 <RTC_EnterInitMode+0x3e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006fb2:	f7fd fb9d 	bl	80046f0 <HAL_GetTick>
 8006fb6:	0002      	movs	r2, r0
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	1ad2      	subs	r2, r2, r3
 8006fbc:	23fa      	movs	r3, #250	; 0xfa
 8006fbe:	009b      	lsls	r3, r3, #2
 8006fc0:	429a      	cmp	r2, r3
 8006fc2:	d901      	bls.n	8006fc8 <RTC_EnterInitMode+0x3e>
      {
        return HAL_TIMEOUT;
 8006fc4:	2303      	movs	r3, #3
 8006fc6:	e006      	b.n	8006fd6 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	68db      	ldr	r3, [r3, #12]
 8006fce:	2240      	movs	r2, #64	; 0x40
 8006fd0:	4013      	ands	r3, r2
 8006fd2:	d0ee      	beq.n	8006fb2 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8006fd4:	2300      	movs	r3, #0
}
 8006fd6:	0018      	movs	r0, r3
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	b004      	add	sp, #16
 8006fdc:	bd80      	pop	{r7, pc}

08006fde <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8006fde:	b580      	push	{r7, lr}
 8006fe0:	b084      	sub	sp, #16
 8006fe2:	af00      	add	r7, sp, #0
 8006fe4:	0002      	movs	r2, r0
 8006fe6:	1dfb      	adds	r3, r7, #7
 8006fe8:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8006fea:	2300      	movs	r3, #0
 8006fec:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8006fee:	230b      	movs	r3, #11
 8006ff0:	18fb      	adds	r3, r7, r3
 8006ff2:	1dfa      	adds	r2, r7, #7
 8006ff4:	7812      	ldrb	r2, [r2, #0]
 8006ff6:	701a      	strb	r2, [r3, #0]

  while (Param >= 10U)
 8006ff8:	e008      	b.n	800700c <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	3301      	adds	r3, #1
 8006ffe:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8007000:	220b      	movs	r2, #11
 8007002:	18bb      	adds	r3, r7, r2
 8007004:	18ba      	adds	r2, r7, r2
 8007006:	7812      	ldrb	r2, [r2, #0]
 8007008:	3a0a      	subs	r2, #10
 800700a:	701a      	strb	r2, [r3, #0]
  while (Param >= 10U)
 800700c:	230b      	movs	r3, #11
 800700e:	18fb      	adds	r3, r7, r3
 8007010:	781b      	ldrb	r3, [r3, #0]
 8007012:	2b09      	cmp	r3, #9
 8007014:	d8f1      	bhi.n	8006ffa <RTC_ByteToBcd2+0x1c>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	b2db      	uxtb	r3, r3
 800701a:	011b      	lsls	r3, r3, #4
 800701c:	b2da      	uxtb	r2, r3
 800701e:	230b      	movs	r3, #11
 8007020:	18fb      	adds	r3, r7, r3
 8007022:	781b      	ldrb	r3, [r3, #0]
 8007024:	4313      	orrs	r3, r2
 8007026:	b2db      	uxtb	r3, r3
}
 8007028:	0018      	movs	r0, r3
 800702a:	46bd      	mov	sp, r7
 800702c:	b004      	add	sp, #16
 800702e:	bd80      	pop	{r7, pc}

08007030 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b084      	sub	sp, #16
 8007034:	af00      	add	r7, sp, #0
 8007036:	0002      	movs	r2, r0
 8007038:	1dfb      	adds	r3, r7, #7
 800703a:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 800703c:	1dfb      	adds	r3, r7, #7
 800703e:	781b      	ldrb	r3, [r3, #0]
 8007040:	091b      	lsrs	r3, r3, #4
 8007042:	b2db      	uxtb	r3, r3
 8007044:	001a      	movs	r2, r3
 8007046:	0013      	movs	r3, r2
 8007048:	009b      	lsls	r3, r3, #2
 800704a:	189b      	adds	r3, r3, r2
 800704c:	005b      	lsls	r3, r3, #1
 800704e:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	b2da      	uxtb	r2, r3
 8007054:	1dfb      	adds	r3, r7, #7
 8007056:	781b      	ldrb	r3, [r3, #0]
 8007058:	210f      	movs	r1, #15
 800705a:	400b      	ands	r3, r1
 800705c:	b2db      	uxtb	r3, r3
 800705e:	18d3      	adds	r3, r2, r3
 8007060:	b2db      	uxtb	r3, r3
}
 8007062:	0018      	movs	r0, r3
 8007064:	46bd      	mov	sp, r7
 8007066:	b004      	add	sp, #16
 8007068:	bd80      	pop	{r7, pc}
	...

0800706c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b082      	sub	sp, #8
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d101      	bne.n	800707e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800707a:	2301      	movs	r3, #1
 800707c:	e059      	b.n	8007132 <HAL_SPI_Init+0xc6>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2200      	movs	r2, #0
 8007082:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2251      	movs	r2, #81	; 0x51
 8007088:	5c9b      	ldrb	r3, [r3, r2]
 800708a:	b2db      	uxtb	r3, r3
 800708c:	2b00      	cmp	r3, #0
 800708e:	d107      	bne.n	80070a0 <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2250      	movs	r2, #80	; 0x50
 8007094:	2100      	movs	r1, #0
 8007096:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	0018      	movs	r0, r3
 800709c:	f7fc fe9c 	bl	8003dd8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2251      	movs	r2, #81	; 0x51
 80070a4:	2102      	movs	r1, #2
 80070a6:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	681a      	ldr	r2, [r3, #0]
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	2140      	movs	r1, #64	; 0x40
 80070b4:	438a      	bics	r2, r1
 80070b6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	685a      	ldr	r2, [r3, #4]
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	689b      	ldr	r3, [r3, #8]
 80070c0:	431a      	orrs	r2, r3
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	68db      	ldr	r3, [r3, #12]
 80070c6:	431a      	orrs	r2, r3
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	691b      	ldr	r3, [r3, #16]
 80070cc:	431a      	orrs	r2, r3
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	695b      	ldr	r3, [r3, #20]
 80070d2:	431a      	orrs	r2, r3
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6999      	ldr	r1, [r3, #24]
 80070d8:	2380      	movs	r3, #128	; 0x80
 80070da:	009b      	lsls	r3, r3, #2
 80070dc:	400b      	ands	r3, r1
 80070de:	431a      	orrs	r2, r3
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	69db      	ldr	r3, [r3, #28]
 80070e4:	431a      	orrs	r2, r3
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6a1b      	ldr	r3, [r3, #32]
 80070ea:	431a      	orrs	r2, r3
 80070ec:	0011      	movs	r1, r2
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	430a      	orrs	r2, r1
 80070f8:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	699b      	ldr	r3, [r3, #24]
 80070fe:	0c1b      	lsrs	r3, r3, #16
 8007100:	2204      	movs	r2, #4
 8007102:	4013      	ands	r3, r2
 8007104:	0019      	movs	r1, r3
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	430a      	orrs	r2, r1
 8007110:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	69da      	ldr	r2, [r3, #28]
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	4907      	ldr	r1, [pc, #28]	; (800713c <HAL_SPI_Init+0xd0>)
 800711e:	400a      	ands	r2, r1
 8007120:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2200      	movs	r2, #0
 8007126:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2251      	movs	r2, #81	; 0x51
 800712c:	2101      	movs	r1, #1
 800712e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007130:	2300      	movs	r3, #0
}
 8007132:	0018      	movs	r0, r3
 8007134:	46bd      	mov	sp, r7
 8007136:	b002      	add	sp, #8
 8007138:	bd80      	pop	{r7, pc}
 800713a:	46c0      	nop			; (mov r8, r8)
 800713c:	fffff7ff 	.word	0xfffff7ff

08007140 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b088      	sub	sp, #32
 8007144:	af00      	add	r7, sp, #0
 8007146:	60f8      	str	r0, [r7, #12]
 8007148:	60b9      	str	r1, [r7, #8]
 800714a:	603b      	str	r3, [r7, #0]
 800714c:	1dbb      	adds	r3, r7, #6
 800714e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007150:	231f      	movs	r3, #31
 8007152:	18fb      	adds	r3, r7, r3
 8007154:	2200      	movs	r2, #0
 8007156:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	2250      	movs	r2, #80	; 0x50
 800715c:	5c9b      	ldrb	r3, [r3, r2]
 800715e:	2b01      	cmp	r3, #1
 8007160:	d101      	bne.n	8007166 <HAL_SPI_Transmit+0x26>
 8007162:	2302      	movs	r3, #2
 8007164:	e136      	b.n	80073d4 <HAL_SPI_Transmit+0x294>
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	2250      	movs	r2, #80	; 0x50
 800716a:	2101      	movs	r1, #1
 800716c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800716e:	f7fd fabf 	bl	80046f0 <HAL_GetTick>
 8007172:	0003      	movs	r3, r0
 8007174:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8007176:	2316      	movs	r3, #22
 8007178:	18fb      	adds	r3, r7, r3
 800717a:	1dba      	adds	r2, r7, #6
 800717c:	8812      	ldrh	r2, [r2, #0]
 800717e:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	2251      	movs	r2, #81	; 0x51
 8007184:	5c9b      	ldrb	r3, [r3, r2]
 8007186:	b2db      	uxtb	r3, r3
 8007188:	2b01      	cmp	r3, #1
 800718a:	d004      	beq.n	8007196 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 800718c:	231f      	movs	r3, #31
 800718e:	18fb      	adds	r3, r7, r3
 8007190:	2202      	movs	r2, #2
 8007192:	701a      	strb	r2, [r3, #0]
    goto error;
 8007194:	e113      	b.n	80073be <HAL_SPI_Transmit+0x27e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007196:	68bb      	ldr	r3, [r7, #8]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d003      	beq.n	80071a4 <HAL_SPI_Transmit+0x64>
 800719c:	1dbb      	adds	r3, r7, #6
 800719e:	881b      	ldrh	r3, [r3, #0]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d104      	bne.n	80071ae <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 80071a4:	231f      	movs	r3, #31
 80071a6:	18fb      	adds	r3, r7, r3
 80071a8:	2201      	movs	r2, #1
 80071aa:	701a      	strb	r2, [r3, #0]
    goto error;
 80071ac:	e107      	b.n	80073be <HAL_SPI_Transmit+0x27e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	2251      	movs	r2, #81	; 0x51
 80071b2:	2103      	movs	r1, #3
 80071b4:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	2200      	movs	r2, #0
 80071ba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	68ba      	ldr	r2, [r7, #8]
 80071c0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	1dba      	adds	r2, r7, #6
 80071c6:	8812      	ldrh	r2, [r2, #0]
 80071c8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	1dba      	adds	r2, r7, #6
 80071ce:	8812      	ldrh	r2, [r2, #0]
 80071d0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	2200      	movs	r2, #0
 80071d6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	2200      	movs	r2, #0
 80071dc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	2200      	movs	r2, #0
 80071e2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	2200      	movs	r2, #0
 80071e8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	2200      	movs	r2, #0
 80071ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	689a      	ldr	r2, [r3, #8]
 80071f4:	2380      	movs	r3, #128	; 0x80
 80071f6:	021b      	lsls	r3, r3, #8
 80071f8:	429a      	cmp	r2, r3
 80071fa:	d108      	bne.n	800720e <HAL_SPI_Transmit+0xce>
  {
    SPI_1LINE_TX(hspi);
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	681a      	ldr	r2, [r3, #0]
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	2180      	movs	r1, #128	; 0x80
 8007208:	01c9      	lsls	r1, r1, #7
 800720a:	430a      	orrs	r2, r1
 800720c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	2240      	movs	r2, #64	; 0x40
 8007216:	4013      	ands	r3, r2
 8007218:	2b40      	cmp	r3, #64	; 0x40
 800721a:	d007      	beq.n	800722c <HAL_SPI_Transmit+0xec>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	681a      	ldr	r2, [r3, #0]
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	2140      	movs	r1, #64	; 0x40
 8007228:	430a      	orrs	r2, r1
 800722a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	68da      	ldr	r2, [r3, #12]
 8007230:	2380      	movs	r3, #128	; 0x80
 8007232:	011b      	lsls	r3, r3, #4
 8007234:	429a      	cmp	r2, r3
 8007236:	d14e      	bne.n	80072d6 <HAL_SPI_Transmit+0x196>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	685b      	ldr	r3, [r3, #4]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d004      	beq.n	800724a <HAL_SPI_Transmit+0x10a>
 8007240:	2316      	movs	r3, #22
 8007242:	18fb      	adds	r3, r7, r3
 8007244:	881b      	ldrh	r3, [r3, #0]
 8007246:	2b01      	cmp	r3, #1
 8007248:	d13f      	bne.n	80072ca <HAL_SPI_Transmit+0x18a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800724e:	881a      	ldrh	r2, [r3, #0]
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800725a:	1c9a      	adds	r2, r3, #2
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007264:	b29b      	uxth	r3, r3
 8007266:	3b01      	subs	r3, #1
 8007268:	b29a      	uxth	r2, r3
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800726e:	e02c      	b.n	80072ca <HAL_SPI_Transmit+0x18a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	689b      	ldr	r3, [r3, #8]
 8007276:	2202      	movs	r2, #2
 8007278:	4013      	ands	r3, r2
 800727a:	2b02      	cmp	r3, #2
 800727c:	d112      	bne.n	80072a4 <HAL_SPI_Transmit+0x164>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007282:	881a      	ldrh	r2, [r3, #0]
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800728e:	1c9a      	adds	r2, r3, #2
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007298:	b29b      	uxth	r3, r3
 800729a:	3b01      	subs	r3, #1
 800729c:	b29a      	uxth	r2, r3
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	86da      	strh	r2, [r3, #54]	; 0x36
 80072a2:	e012      	b.n	80072ca <HAL_SPI_Transmit+0x18a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80072a4:	f7fd fa24 	bl	80046f0 <HAL_GetTick>
 80072a8:	0002      	movs	r2, r0
 80072aa:	69bb      	ldr	r3, [r7, #24]
 80072ac:	1ad3      	subs	r3, r2, r3
 80072ae:	683a      	ldr	r2, [r7, #0]
 80072b0:	429a      	cmp	r2, r3
 80072b2:	d802      	bhi.n	80072ba <HAL_SPI_Transmit+0x17a>
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	3301      	adds	r3, #1
 80072b8:	d102      	bne.n	80072c0 <HAL_SPI_Transmit+0x180>
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d104      	bne.n	80072ca <HAL_SPI_Transmit+0x18a>
        {
          errorcode = HAL_TIMEOUT;
 80072c0:	231f      	movs	r3, #31
 80072c2:	18fb      	adds	r3, r7, r3
 80072c4:	2203      	movs	r2, #3
 80072c6:	701a      	strb	r2, [r3, #0]
          goto error;
 80072c8:	e079      	b.n	80073be <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80072ce:	b29b      	uxth	r3, r3
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d1cd      	bne.n	8007270 <HAL_SPI_Transmit+0x130>
 80072d4:	e04f      	b.n	8007376 <HAL_SPI_Transmit+0x236>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	685b      	ldr	r3, [r3, #4]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d004      	beq.n	80072e8 <HAL_SPI_Transmit+0x1a8>
 80072de:	2316      	movs	r3, #22
 80072e0:	18fb      	adds	r3, r7, r3
 80072e2:	881b      	ldrh	r3, [r3, #0]
 80072e4:	2b01      	cmp	r3, #1
 80072e6:	d141      	bne.n	800736c <HAL_SPI_Transmit+0x22c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	330c      	adds	r3, #12
 80072f2:	7812      	ldrb	r2, [r2, #0]
 80072f4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072fa:	1c5a      	adds	r2, r3, #1
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007304:	b29b      	uxth	r3, r3
 8007306:	3b01      	subs	r3, #1
 8007308:	b29a      	uxth	r2, r3
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800730e:	e02d      	b.n	800736c <HAL_SPI_Transmit+0x22c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	689b      	ldr	r3, [r3, #8]
 8007316:	2202      	movs	r2, #2
 8007318:	4013      	ands	r3, r2
 800731a:	2b02      	cmp	r3, #2
 800731c:	d113      	bne.n	8007346 <HAL_SPI_Transmit+0x206>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	330c      	adds	r3, #12
 8007328:	7812      	ldrb	r2, [r2, #0]
 800732a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007330:	1c5a      	adds	r2, r3, #1
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800733a:	b29b      	uxth	r3, r3
 800733c:	3b01      	subs	r3, #1
 800733e:	b29a      	uxth	r2, r3
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	86da      	strh	r2, [r3, #54]	; 0x36
 8007344:	e012      	b.n	800736c <HAL_SPI_Transmit+0x22c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007346:	f7fd f9d3 	bl	80046f0 <HAL_GetTick>
 800734a:	0002      	movs	r2, r0
 800734c:	69bb      	ldr	r3, [r7, #24]
 800734e:	1ad3      	subs	r3, r2, r3
 8007350:	683a      	ldr	r2, [r7, #0]
 8007352:	429a      	cmp	r2, r3
 8007354:	d802      	bhi.n	800735c <HAL_SPI_Transmit+0x21c>
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	3301      	adds	r3, #1
 800735a:	d102      	bne.n	8007362 <HAL_SPI_Transmit+0x222>
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d104      	bne.n	800736c <HAL_SPI_Transmit+0x22c>
        {
          errorcode = HAL_TIMEOUT;
 8007362:	231f      	movs	r3, #31
 8007364:	18fb      	adds	r3, r7, r3
 8007366:	2203      	movs	r2, #3
 8007368:	701a      	strb	r2, [r3, #0]
          goto error;
 800736a:	e028      	b.n	80073be <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007370:	b29b      	uxth	r3, r3
 8007372:	2b00      	cmp	r3, #0
 8007374:	d1cc      	bne.n	8007310 <HAL_SPI_Transmit+0x1d0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007376:	69ba      	ldr	r2, [r7, #24]
 8007378:	6839      	ldr	r1, [r7, #0]
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	0018      	movs	r0, r3
 800737e:	f000 fa99 	bl	80078b4 <SPI_EndRxTxTransaction>
 8007382:	1e03      	subs	r3, r0, #0
 8007384:	d002      	beq.n	800738c <HAL_SPI_Transmit+0x24c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	2220      	movs	r2, #32
 800738a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	689b      	ldr	r3, [r3, #8]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d10a      	bne.n	80073aa <HAL_SPI_Transmit+0x26a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007394:	2300      	movs	r3, #0
 8007396:	613b      	str	r3, [r7, #16]
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	68db      	ldr	r3, [r3, #12]
 800739e:	613b      	str	r3, [r7, #16]
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	689b      	ldr	r3, [r3, #8]
 80073a6:	613b      	str	r3, [r7, #16]
 80073a8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d004      	beq.n	80073bc <HAL_SPI_Transmit+0x27c>
  {
    errorcode = HAL_ERROR;
 80073b2:	231f      	movs	r3, #31
 80073b4:	18fb      	adds	r3, r7, r3
 80073b6:	2201      	movs	r2, #1
 80073b8:	701a      	strb	r2, [r3, #0]
 80073ba:	e000      	b.n	80073be <HAL_SPI_Transmit+0x27e>
  }

error:
 80073bc:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	2251      	movs	r2, #81	; 0x51
 80073c2:	2101      	movs	r1, #1
 80073c4:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	2250      	movs	r2, #80	; 0x50
 80073ca:	2100      	movs	r1, #0
 80073cc:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80073ce:	231f      	movs	r3, #31
 80073d0:	18fb      	adds	r3, r7, r3
 80073d2:	781b      	ldrb	r3, [r3, #0]
}
 80073d4:	0018      	movs	r0, r3
 80073d6:	46bd      	mov	sp, r7
 80073d8:	b008      	add	sp, #32
 80073da:	bd80      	pop	{r7, pc}

080073dc <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b086      	sub	sp, #24
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	60f8      	str	r0, [r7, #12]
 80073e4:	60b9      	str	r1, [r7, #8]
 80073e6:	1dbb      	adds	r3, r7, #6
 80073e8:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80073ea:	2317      	movs	r3, #23
 80073ec:	18fb      	adds	r3, r7, r3
 80073ee:	2200      	movs	r2, #0
 80073f0:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	2250      	movs	r2, #80	; 0x50
 80073f6:	5c9b      	ldrb	r3, [r3, r2]
 80073f8:	2b01      	cmp	r3, #1
 80073fa:	d101      	bne.n	8007400 <HAL_SPI_Transmit_IT+0x24>
 80073fc:	2302      	movs	r3, #2
 80073fe:	e072      	b.n	80074e6 <HAL_SPI_Transmit_IT+0x10a>
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	2250      	movs	r2, #80	; 0x50
 8007404:	2101      	movs	r1, #1
 8007406:	5499      	strb	r1, [r3, r2]

  if ((pData == NULL) || (Size == 0U))
 8007408:	68bb      	ldr	r3, [r7, #8]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d003      	beq.n	8007416 <HAL_SPI_Transmit_IT+0x3a>
 800740e:	1dbb      	adds	r3, r7, #6
 8007410:	881b      	ldrh	r3, [r3, #0]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d104      	bne.n	8007420 <HAL_SPI_Transmit_IT+0x44>
  {
    errorcode = HAL_ERROR;
 8007416:	2317      	movs	r3, #23
 8007418:	18fb      	adds	r3, r7, r3
 800741a:	2201      	movs	r2, #1
 800741c:	701a      	strb	r2, [r3, #0]
    goto error;
 800741e:	e05b      	b.n	80074d8 <HAL_SPI_Transmit_IT+0xfc>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	2251      	movs	r2, #81	; 0x51
 8007424:	5c9b      	ldrb	r3, [r3, r2]
 8007426:	b2db      	uxtb	r3, r3
 8007428:	2b01      	cmp	r3, #1
 800742a:	d004      	beq.n	8007436 <HAL_SPI_Transmit_IT+0x5a>
  {
    errorcode = HAL_BUSY;
 800742c:	2317      	movs	r3, #23
 800742e:	18fb      	adds	r3, r7, r3
 8007430:	2202      	movs	r2, #2
 8007432:	701a      	strb	r2, [r3, #0]
    goto error;
 8007434:	e050      	b.n	80074d8 <HAL_SPI_Transmit_IT+0xfc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	2251      	movs	r2, #81	; 0x51
 800743a:	2103      	movs	r1, #3
 800743c:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	2200      	movs	r2, #0
 8007442:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	68ba      	ldr	r2, [r7, #8]
 8007448:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	1dba      	adds	r2, r7, #6
 800744e:	8812      	ldrh	r2, [r2, #0]
 8007450:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	1dba      	adds	r2, r7, #6
 8007456:	8812      	ldrh	r2, [r2, #0]
 8007458:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	2200      	movs	r2, #0
 800745e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	2200      	movs	r2, #0
 8007464:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	2200      	movs	r2, #0
 800746a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	2200      	movs	r2, #0
 8007470:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	68db      	ldr	r3, [r3, #12]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d003      	beq.n	8007482 <HAL_SPI_Transmit_IT+0xa6>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	4a1c      	ldr	r2, [pc, #112]	; (80074f0 <HAL_SPI_Transmit_IT+0x114>)
 800747e:	645a      	str	r2, [r3, #68]	; 0x44
 8007480:	e002      	b.n	8007488 <HAL_SPI_Transmit_IT+0xac>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	4a1b      	ldr	r2, [pc, #108]	; (80074f4 <HAL_SPI_Transmit_IT+0x118>)
 8007486:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	689a      	ldr	r2, [r3, #8]
 800748c:	2380      	movs	r3, #128	; 0x80
 800748e:	021b      	lsls	r3, r3, #8
 8007490:	429a      	cmp	r2, r3
 8007492:	d108      	bne.n	80074a6 <HAL_SPI_Transmit_IT+0xca>
  {
    SPI_1LINE_TX(hspi);
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	681a      	ldr	r2, [r3, #0]
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	2180      	movs	r1, #128	; 0x80
 80074a0:	01c9      	lsls	r1, r1, #7
 80074a2:	430a      	orrs	r2, r1
 80074a4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	685a      	ldr	r2, [r3, #4]
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	21a0      	movs	r1, #160	; 0xa0
 80074b2:	430a      	orrs	r2, r1
 80074b4:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	2240      	movs	r2, #64	; 0x40
 80074be:	4013      	ands	r3, r2
 80074c0:	2b40      	cmp	r3, #64	; 0x40
 80074c2:	d008      	beq.n	80074d6 <HAL_SPI_Transmit_IT+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	681a      	ldr	r2, [r3, #0]
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	2140      	movs	r1, #64	; 0x40
 80074d0:	430a      	orrs	r2, r1
 80074d2:	601a      	str	r2, [r3, #0]
 80074d4:	e000      	b.n	80074d8 <HAL_SPI_Transmit_IT+0xfc>
  }

error :
 80074d6:	46c0      	nop			; (mov r8, r8)
  __HAL_UNLOCK(hspi);
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	2250      	movs	r2, #80	; 0x50
 80074dc:	2100      	movs	r1, #0
 80074de:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80074e0:	2317      	movs	r3, #23
 80074e2:	18fb      	adds	r3, r7, r3
 80074e4:	781b      	ldrb	r3, [r3, #0]
}
 80074e6:	0018      	movs	r0, r3
 80074e8:	46bd      	mov	sp, r7
 80074ea:	b006      	add	sp, #24
 80074ec:	bd80      	pop	{r7, pc}
 80074ee:	46c0      	nop			; (mov r8, r8)
 80074f0:	0800778f 	.word	0x0800778f
 80074f4:	08007747 	.word	0x08007747

080074f8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b088      	sub	sp, #32
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	685b      	ldr	r3, [r3, #4]
 8007506:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	689b      	ldr	r3, [r3, #8]
 800750e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007510:	69bb      	ldr	r3, [r7, #24]
 8007512:	099b      	lsrs	r3, r3, #6
 8007514:	001a      	movs	r2, r3
 8007516:	2301      	movs	r3, #1
 8007518:	4013      	ands	r3, r2
 800751a:	d10f      	bne.n	800753c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800751c:	69bb      	ldr	r3, [r7, #24]
 800751e:	2201      	movs	r2, #1
 8007520:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007522:	d00b      	beq.n	800753c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007524:	69fb      	ldr	r3, [r7, #28]
 8007526:	099b      	lsrs	r3, r3, #6
 8007528:	001a      	movs	r2, r3
 800752a:	2301      	movs	r3, #1
 800752c:	4013      	ands	r3, r2
 800752e:	d005      	beq.n	800753c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007534:	687a      	ldr	r2, [r7, #4]
 8007536:	0010      	movs	r0, r2
 8007538:	4798      	blx	r3
    return;
 800753a:	e0d6      	b.n	80076ea <HAL_SPI_IRQHandler+0x1f2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800753c:	69bb      	ldr	r3, [r7, #24]
 800753e:	085b      	lsrs	r3, r3, #1
 8007540:	001a      	movs	r2, r3
 8007542:	2301      	movs	r3, #1
 8007544:	4013      	ands	r3, r2
 8007546:	d00b      	beq.n	8007560 <HAL_SPI_IRQHandler+0x68>
 8007548:	69fb      	ldr	r3, [r7, #28]
 800754a:	09db      	lsrs	r3, r3, #7
 800754c:	001a      	movs	r2, r3
 800754e:	2301      	movs	r3, #1
 8007550:	4013      	ands	r3, r2
 8007552:	d005      	beq.n	8007560 <HAL_SPI_IRQHandler+0x68>
  {
    hspi->TxISR(hspi);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007558:	687a      	ldr	r2, [r7, #4]
 800755a:	0010      	movs	r0, r2
 800755c:	4798      	blx	r3
    return;
 800755e:	e0c4      	b.n	80076ea <HAL_SPI_IRQHandler+0x1f2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8007560:	69bb      	ldr	r3, [r7, #24]
 8007562:	095b      	lsrs	r3, r3, #5
 8007564:	001a      	movs	r2, r3
 8007566:	2301      	movs	r3, #1
 8007568:	4013      	ands	r3, r2
 800756a:	d10c      	bne.n	8007586 <HAL_SPI_IRQHandler+0x8e>
 800756c:	69bb      	ldr	r3, [r7, #24]
 800756e:	099b      	lsrs	r3, r3, #6
 8007570:	001a      	movs	r2, r3
 8007572:	2301      	movs	r3, #1
 8007574:	4013      	ands	r3, r2
 8007576:	d106      	bne.n	8007586 <HAL_SPI_IRQHandler+0x8e>
 8007578:	69bb      	ldr	r3, [r7, #24]
 800757a:	0a1b      	lsrs	r3, r3, #8
 800757c:	001a      	movs	r2, r3
 800757e:	2301      	movs	r3, #1
 8007580:	4013      	ands	r3, r2
 8007582:	d100      	bne.n	8007586 <HAL_SPI_IRQHandler+0x8e>
 8007584:	e0b1      	b.n	80076ea <HAL_SPI_IRQHandler+0x1f2>
 8007586:	69fb      	ldr	r3, [r7, #28]
 8007588:	095b      	lsrs	r3, r3, #5
 800758a:	001a      	movs	r2, r3
 800758c:	2301      	movs	r3, #1
 800758e:	4013      	ands	r3, r2
 8007590:	d100      	bne.n	8007594 <HAL_SPI_IRQHandler+0x9c>
 8007592:	e0aa      	b.n	80076ea <HAL_SPI_IRQHandler+0x1f2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007594:	69bb      	ldr	r3, [r7, #24]
 8007596:	099b      	lsrs	r3, r3, #6
 8007598:	001a      	movs	r2, r3
 800759a:	2301      	movs	r3, #1
 800759c:	4013      	ands	r3, r2
 800759e:	d023      	beq.n	80075e8 <HAL_SPI_IRQHandler+0xf0>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2251      	movs	r2, #81	; 0x51
 80075a4:	5c9b      	ldrb	r3, [r3, r2]
 80075a6:	b2db      	uxtb	r3, r3
 80075a8:	2b03      	cmp	r3, #3
 80075aa:	d011      	beq.n	80075d0 <HAL_SPI_IRQHandler+0xd8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075b0:	2204      	movs	r2, #4
 80075b2:	431a      	orrs	r2, r3
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80075b8:	2300      	movs	r3, #0
 80075ba:	617b      	str	r3, [r7, #20]
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	68db      	ldr	r3, [r3, #12]
 80075c2:	617b      	str	r3, [r7, #20]
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	689b      	ldr	r3, [r3, #8]
 80075ca:	617b      	str	r3, [r7, #20]
 80075cc:	697b      	ldr	r3, [r7, #20]
 80075ce:	e00b      	b.n	80075e8 <HAL_SPI_IRQHandler+0xf0>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80075d0:	2300      	movs	r3, #0
 80075d2:	613b      	str	r3, [r7, #16]
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	68db      	ldr	r3, [r3, #12]
 80075da:	613b      	str	r3, [r7, #16]
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	689b      	ldr	r3, [r3, #8]
 80075e2:	613b      	str	r3, [r7, #16]
 80075e4:	693b      	ldr	r3, [r7, #16]
        return;
 80075e6:	e080      	b.n	80076ea <HAL_SPI_IRQHandler+0x1f2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80075e8:	69bb      	ldr	r3, [r7, #24]
 80075ea:	095b      	lsrs	r3, r3, #5
 80075ec:	001a      	movs	r2, r3
 80075ee:	2301      	movs	r3, #1
 80075f0:	4013      	ands	r3, r2
 80075f2:	d014      	beq.n	800761e <HAL_SPI_IRQHandler+0x126>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075f8:	2201      	movs	r2, #1
 80075fa:	431a      	orrs	r2, r3
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007600:	2300      	movs	r3, #0
 8007602:	60fb      	str	r3, [r7, #12]
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	689b      	ldr	r3, [r3, #8]
 800760a:	60fb      	str	r3, [r7, #12]
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	681a      	ldr	r2, [r3, #0]
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	2140      	movs	r1, #64	; 0x40
 8007618:	438a      	bics	r2, r1
 800761a:	601a      	str	r2, [r3, #0]
 800761c:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800761e:	69bb      	ldr	r3, [r7, #24]
 8007620:	0a1b      	lsrs	r3, r3, #8
 8007622:	001a      	movs	r2, r3
 8007624:	2301      	movs	r3, #1
 8007626:	4013      	ands	r3, r2
 8007628:	d00c      	beq.n	8007644 <HAL_SPI_IRQHandler+0x14c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800762e:	2208      	movs	r2, #8
 8007630:	431a      	orrs	r2, r3
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007636:	2300      	movs	r3, #0
 8007638:	60bb      	str	r3, [r7, #8]
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	689b      	ldr	r3, [r3, #8]
 8007640:	60bb      	str	r3, [r7, #8]
 8007642:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007648:	2b00      	cmp	r3, #0
 800764a:	d04d      	beq.n	80076e8 <HAL_SPI_IRQHandler+0x1f0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	685a      	ldr	r2, [r3, #4]
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	21e0      	movs	r1, #224	; 0xe0
 8007658:	438a      	bics	r2, r1
 800765a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2251      	movs	r2, #81	; 0x51
 8007660:	2101      	movs	r1, #1
 8007662:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8007664:	69fb      	ldr	r3, [r7, #28]
 8007666:	2202      	movs	r2, #2
 8007668:	4013      	ands	r3, r2
 800766a:	d103      	bne.n	8007674 <HAL_SPI_IRQHandler+0x17c>
 800766c:	69fb      	ldr	r3, [r7, #28]
 800766e:	2201      	movs	r2, #1
 8007670:	4013      	ands	r3, r2
 8007672:	d032      	beq.n	80076da <HAL_SPI_IRQHandler+0x1e2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	685a      	ldr	r2, [r3, #4]
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	2103      	movs	r1, #3
 8007680:	438a      	bics	r2, r1
 8007682:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007688:	2b00      	cmp	r3, #0
 800768a:	d010      	beq.n	80076ae <HAL_SPI_IRQHandler+0x1b6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007690:	4a17      	ldr	r2, [pc, #92]	; (80076f0 <HAL_SPI_IRQHandler+0x1f8>)
 8007692:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007698:	0018      	movs	r0, r3
 800769a:	f7fd fc25 	bl	8004ee8 <HAL_DMA_Abort_IT>
 800769e:	1e03      	subs	r3, r0, #0
 80076a0:	d005      	beq.n	80076ae <HAL_SPI_IRQHandler+0x1b6>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076a6:	2240      	movs	r2, #64	; 0x40
 80076a8:	431a      	orrs	r2, r3
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d016      	beq.n	80076e4 <HAL_SPI_IRQHandler+0x1ec>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076ba:	4a0d      	ldr	r2, [pc, #52]	; (80076f0 <HAL_SPI_IRQHandler+0x1f8>)
 80076bc:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076c2:	0018      	movs	r0, r3
 80076c4:	f7fd fc10 	bl	8004ee8 <HAL_DMA_Abort_IT>
 80076c8:	1e03      	subs	r3, r0, #0
 80076ca:	d00b      	beq.n	80076e4 <HAL_SPI_IRQHandler+0x1ec>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076d0:	2240      	movs	r2, #64	; 0x40
 80076d2:	431a      	orrs	r2, r3
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80076d8:	e004      	b.n	80076e4 <HAL_SPI_IRQHandler+0x1ec>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	0018      	movs	r0, r3
 80076de:	f000 f809 	bl	80076f4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80076e2:	e000      	b.n	80076e6 <HAL_SPI_IRQHandler+0x1ee>
        if (hspi->hdmatx != NULL)
 80076e4:	46c0      	nop			; (mov r8, r8)
    return;
 80076e6:	46c0      	nop			; (mov r8, r8)
 80076e8:	46c0      	nop			; (mov r8, r8)
  }
}
 80076ea:	46bd      	mov	sp, r7
 80076ec:	b008      	add	sp, #32
 80076ee:	bd80      	pop	{r7, pc}
 80076f0:	0800771d 	.word	0x0800771d

080076f4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b082      	sub	sp, #8
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80076fc:	46c0      	nop			; (mov r8, r8)
 80076fe:	46bd      	mov	sp, r7
 8007700:	b002      	add	sp, #8
 8007702:	bd80      	pop	{r7, pc}

08007704 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b082      	sub	sp, #8
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2251      	movs	r2, #81	; 0x51
 8007710:	5c9b      	ldrb	r3, [r3, r2]
 8007712:	b2db      	uxtb	r3, r3
}
 8007714:	0018      	movs	r0, r3
 8007716:	46bd      	mov	sp, r7
 8007718:	b002      	add	sp, #8
 800771a:	bd80      	pop	{r7, pc}

0800771c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b084      	sub	sp, #16
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007728:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	2200      	movs	r2, #0
 800772e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	2200      	movs	r2, #0
 8007734:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	0018      	movs	r0, r3
 800773a:	f7ff ffdb 	bl	80076f4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800773e:	46c0      	nop			; (mov r8, r8)
 8007740:	46bd      	mov	sp, r7
 8007742:	b004      	add	sp, #16
 8007744:	bd80      	pop	{r7, pc}

08007746 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007746:	b580      	push	{r7, lr}
 8007748:	b082      	sub	sp, #8
 800774a:	af00      	add	r7, sp, #0
 800774c:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	330c      	adds	r3, #12
 8007758:	7812      	ldrb	r2, [r2, #0]
 800775a:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007760:	1c5a      	adds	r2, r3, #1
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800776a:	b29b      	uxth	r3, r3
 800776c:	3b01      	subs	r3, #1
 800776e:	b29a      	uxth	r2, r3
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007778:	b29b      	uxth	r3, r3
 800777a:	2b00      	cmp	r3, #0
 800777c:	d103      	bne.n	8007786 <SPI_TxISR_8BIT+0x40>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	0018      	movs	r0, r3
 8007782:	f000 f8d5 	bl	8007930 <SPI_CloseTx_ISR>
  }
}
 8007786:	46c0      	nop			; (mov r8, r8)
 8007788:	46bd      	mov	sp, r7
 800778a:	b002      	add	sp, #8
 800778c:	bd80      	pop	{r7, pc}

0800778e <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800778e:	b580      	push	{r7, lr}
 8007790:	b082      	sub	sp, #8
 8007792:	af00      	add	r7, sp, #0
 8007794:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800779a:	881a      	ldrh	r2, [r3, #0]
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077a6:	1c9a      	adds	r2, r3, #2
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80077b0:	b29b      	uxth	r3, r3
 80077b2:	3b01      	subs	r3, #1
 80077b4:	b29a      	uxth	r2, r3
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80077be:	b29b      	uxth	r3, r3
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d103      	bne.n	80077cc <SPI_TxISR_16BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	0018      	movs	r0, r3
 80077c8:	f000 f8b2 	bl	8007930 <SPI_CloseTx_ISR>
  }
}
 80077cc:	46c0      	nop			; (mov r8, r8)
 80077ce:	46bd      	mov	sp, r7
 80077d0:	b002      	add	sp, #8
 80077d2:	bd80      	pop	{r7, pc}

080077d4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b084      	sub	sp, #16
 80077d8:	af00      	add	r7, sp, #0
 80077da:	60f8      	str	r0, [r7, #12]
 80077dc:	60b9      	str	r1, [r7, #8]
 80077de:	603b      	str	r3, [r7, #0]
 80077e0:	1dfb      	adds	r3, r7, #7
 80077e2:	701a      	strb	r2, [r3, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80077e4:	e050      	b.n	8007888 <SPI_WaitFlagStateUntilTimeout+0xb4>
  {
    if (Timeout != HAL_MAX_DELAY)
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	3301      	adds	r3, #1
 80077ea:	d04d      	beq.n	8007888 <SPI_WaitFlagStateUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80077ec:	f7fc ff80 	bl	80046f0 <HAL_GetTick>
 80077f0:	0002      	movs	r2, r0
 80077f2:	69bb      	ldr	r3, [r7, #24]
 80077f4:	1ad3      	subs	r3, r2, r3
 80077f6:	683a      	ldr	r2, [r7, #0]
 80077f8:	429a      	cmp	r2, r3
 80077fa:	d902      	bls.n	8007802 <SPI_WaitFlagStateUntilTimeout+0x2e>
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d142      	bne.n	8007888 <SPI_WaitFlagStateUntilTimeout+0xb4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	685a      	ldr	r2, [r3, #4]
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	21e0      	movs	r1, #224	; 0xe0
 800780e:	438a      	bics	r2, r1
 8007810:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	685a      	ldr	r2, [r3, #4]
 8007816:	2382      	movs	r3, #130	; 0x82
 8007818:	005b      	lsls	r3, r3, #1
 800781a:	429a      	cmp	r2, r3
 800781c:	d113      	bne.n	8007846 <SPI_WaitFlagStateUntilTimeout+0x72>
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	689a      	ldr	r2, [r3, #8]
 8007822:	2380      	movs	r3, #128	; 0x80
 8007824:	021b      	lsls	r3, r3, #8
 8007826:	429a      	cmp	r2, r3
 8007828:	d005      	beq.n	8007836 <SPI_WaitFlagStateUntilTimeout+0x62>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	689a      	ldr	r2, [r3, #8]
 800782e:	2380      	movs	r3, #128	; 0x80
 8007830:	00db      	lsls	r3, r3, #3
 8007832:	429a      	cmp	r2, r3
 8007834:	d107      	bne.n	8007846 <SPI_WaitFlagStateUntilTimeout+0x72>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	681a      	ldr	r2, [r3, #0]
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	2140      	movs	r1, #64	; 0x40
 8007842:	438a      	bics	r2, r1
 8007844:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800784a:	2380      	movs	r3, #128	; 0x80
 800784c:	019b      	lsls	r3, r3, #6
 800784e:	429a      	cmp	r2, r3
 8007850:	d110      	bne.n	8007874 <SPI_WaitFlagStateUntilTimeout+0xa0>
        {
          SPI_RESET_CRC(hspi);
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	681a      	ldr	r2, [r3, #0]
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	4914      	ldr	r1, [pc, #80]	; (80078b0 <SPI_WaitFlagStateUntilTimeout+0xdc>)
 800785e:	400a      	ands	r2, r1
 8007860:	601a      	str	r2, [r3, #0]
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	681a      	ldr	r2, [r3, #0]
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	2180      	movs	r1, #128	; 0x80
 800786e:	0189      	lsls	r1, r1, #6
 8007870:	430a      	orrs	r2, r1
 8007872:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	2251      	movs	r2, #81	; 0x51
 8007878:	2101      	movs	r1, #1
 800787a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	2250      	movs	r2, #80	; 0x50
 8007880:	2100      	movs	r1, #0
 8007882:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007884:	2303      	movs	r3, #3
 8007886:	e00f      	b.n	80078a8 <SPI_WaitFlagStateUntilTimeout+0xd4>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	689b      	ldr	r3, [r3, #8]
 800788e:	68ba      	ldr	r2, [r7, #8]
 8007890:	4013      	ands	r3, r2
 8007892:	68ba      	ldr	r2, [r7, #8]
 8007894:	1ad3      	subs	r3, r2, r3
 8007896:	425a      	negs	r2, r3
 8007898:	4153      	adcs	r3, r2
 800789a:	b2db      	uxtb	r3, r3
 800789c:	001a      	movs	r2, r3
 800789e:	1dfb      	adds	r3, r7, #7
 80078a0:	781b      	ldrb	r3, [r3, #0]
 80078a2:	429a      	cmp	r2, r3
 80078a4:	d19f      	bne.n	80077e6 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80078a6:	2300      	movs	r3, #0
}
 80078a8:	0018      	movs	r0, r3
 80078aa:	46bd      	mov	sp, r7
 80078ac:	b004      	add	sp, #16
 80078ae:	bd80      	pop	{r7, pc}
 80078b0:	ffffdfff 	.word	0xffffdfff

080078b4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b086      	sub	sp, #24
 80078b8:	af02      	add	r7, sp, #8
 80078ba:	60f8      	str	r0, [r7, #12]
 80078bc:	60b9      	str	r1, [r7, #8]
 80078be:	607a      	str	r2, [r7, #4]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	685a      	ldr	r2, [r3, #4]
 80078c4:	2382      	movs	r3, #130	; 0x82
 80078c6:	005b      	lsls	r3, r3, #1
 80078c8:	429a      	cmp	r2, r3
 80078ca:	d112      	bne.n	80078f2 <SPI_EndRxTxTransaction+0x3e>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80078cc:	68ba      	ldr	r2, [r7, #8]
 80078ce:	68f8      	ldr	r0, [r7, #12]
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	9300      	str	r3, [sp, #0]
 80078d4:	0013      	movs	r3, r2
 80078d6:	2200      	movs	r2, #0
 80078d8:	2180      	movs	r1, #128	; 0x80
 80078da:	f7ff ff7b 	bl	80077d4 <SPI_WaitFlagStateUntilTimeout>
 80078de:	1e03      	subs	r3, r0, #0
 80078e0:	d020      	beq.n	8007924 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078e6:	2220      	movs	r2, #32
 80078e8:	431a      	orrs	r2, r3
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80078ee:	2303      	movs	r3, #3
 80078f0:	e019      	b.n	8007926 <SPI_EndRxTxTransaction+0x72>
    }
  }
  else
  {
    /* Control RXNE flag in case of Full-Duplex transfer */
    if (hspi->State == HAL_SPI_STATE_BUSY_TX_RX)
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	2251      	movs	r2, #81	; 0x51
 80078f6:	5c9b      	ldrb	r3, [r3, r2]
 80078f8:	b2db      	uxtb	r3, r3
 80078fa:	2b05      	cmp	r3, #5
 80078fc:	d112      	bne.n	8007924 <SPI_EndRxTxTransaction+0x70>
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80078fe:	68ba      	ldr	r2, [r7, #8]
 8007900:	68f8      	ldr	r0, [r7, #12]
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	9300      	str	r3, [sp, #0]
 8007906:	0013      	movs	r3, r2
 8007908:	2200      	movs	r2, #0
 800790a:	2101      	movs	r1, #1
 800790c:	f7ff ff62 	bl	80077d4 <SPI_WaitFlagStateUntilTimeout>
 8007910:	1e03      	subs	r3, r0, #0
 8007912:	d007      	beq.n	8007924 <SPI_EndRxTxTransaction+0x70>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007918:	2220      	movs	r2, #32
 800791a:	431a      	orrs	r2, r3
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007920:	2303      	movs	r3, #3
 8007922:	e000      	b.n	8007926 <SPI_EndRxTxTransaction+0x72>
      }
    }
  }
  return HAL_OK;
 8007924:	2300      	movs	r3, #0
}
 8007926:	0018      	movs	r0, r3
 8007928:	46bd      	mov	sp, r7
 800792a:	b004      	add	sp, #16
 800792c:	bd80      	pop	{r7, pc}
	...

08007930 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b086      	sub	sp, #24
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8007938:	4b2d      	ldr	r3, [pc, #180]	; (80079f0 <SPI_CloseTx_ISR+0xc0>)
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	492d      	ldr	r1, [pc, #180]	; (80079f4 <SPI_CloseTx_ISR+0xc4>)
 800793e:	0018      	movs	r0, r3
 8007940:	f7f8 fbea 	bl	8000118 <__udivsi3>
 8007944:	0003      	movs	r3, r0
 8007946:	001a      	movs	r2, r3
 8007948:	2364      	movs	r3, #100	; 0x64
 800794a:	4353      	muls	r3, r2
 800794c:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800794e:	f7fc fecf 	bl	80046f0 <HAL_GetTick>
 8007952:	0003      	movs	r3, r0
 8007954:	617b      	str	r3, [r7, #20]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8007956:	693b      	ldr	r3, [r7, #16]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d106      	bne.n	800796a <SPI_CloseTx_ISR+0x3a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007960:	2220      	movs	r2, #32
 8007962:	431a      	orrs	r2, r3
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007968:	e008      	b.n	800797c <SPI_CloseTx_ISR+0x4c>
    }
    count--;
 800796a:	693b      	ldr	r3, [r7, #16]
 800796c:	3b01      	subs	r3, #1
 800796e:	613b      	str	r3, [r7, #16]
  }
  while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	689b      	ldr	r3, [r3, #8]
 8007976:	2202      	movs	r2, #2
 8007978:	4013      	ands	r3, r2
 800797a:	d0ec      	beq.n	8007956 <SPI_CloseTx_ISR+0x26>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	685a      	ldr	r2, [r3, #4]
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	21a0      	movs	r1, #160	; 0xa0
 8007988:	438a      	bics	r2, r1
 800798a:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800798c:	697a      	ldr	r2, [r7, #20]
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2164      	movs	r1, #100	; 0x64
 8007992:	0018      	movs	r0, r3
 8007994:	f7ff ff8e 	bl	80078b4 <SPI_EndRxTxTransaction>
 8007998:	1e03      	subs	r3, r0, #0
 800799a:	d005      	beq.n	80079a8 <SPI_CloseTx_ISR+0x78>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079a0:	2220      	movs	r2, #32
 80079a2:	431a      	orrs	r2, r3
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	689b      	ldr	r3, [r3, #8]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d10a      	bne.n	80079c6 <SPI_CloseTx_ISR+0x96>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80079b0:	2300      	movs	r3, #0
 80079b2:	60fb      	str	r3, [r7, #12]
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	68db      	ldr	r3, [r3, #12]
 80079ba:	60fb      	str	r3, [r7, #12]
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	689b      	ldr	r3, [r3, #8]
 80079c2:	60fb      	str	r3, [r7, #12]
 80079c4:	68fb      	ldr	r3, [r7, #12]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	2251      	movs	r2, #81	; 0x51
 80079ca:	2101      	movs	r1, #1
 80079cc:	5499      	strb	r1, [r3, r2]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d004      	beq.n	80079e0 <SPI_CloseTx_ISR+0xb0>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	0018      	movs	r0, r3
 80079da:	f7ff fe8b 	bl	80076f4 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 80079de:	e003      	b.n	80079e8 <SPI_CloseTx_ISR+0xb8>
    HAL_SPI_TxCpltCallback(hspi);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	0018      	movs	r0, r3
 80079e4:	f7f8 fd7c 	bl	80004e0 <HAL_SPI_TxCpltCallback>
}
 80079e8:	46c0      	nop			; (mov r8, r8)
 80079ea:	46bd      	mov	sp, r7
 80079ec:	b006      	add	sp, #24
 80079ee:	bd80      	pop	{r7, pc}
 80079f0:	20000064 	.word	0x20000064
 80079f4:	00005dc0 	.word	0x00005dc0

080079f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b082      	sub	sp, #8
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d101      	bne.n	8007a0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007a06:	2301      	movs	r3, #1
 8007a08:	e01e      	b.n	8007a48 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2239      	movs	r2, #57	; 0x39
 8007a0e:	5c9b      	ldrb	r3, [r3, r2]
 8007a10:	b2db      	uxtb	r3, r3
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d107      	bne.n	8007a26 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2238      	movs	r2, #56	; 0x38
 8007a1a:	2100      	movs	r1, #0
 8007a1c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	0018      	movs	r0, r3
 8007a22:	f7fc fa51 	bl	8003ec8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2239      	movs	r2, #57	; 0x39
 8007a2a:	2102      	movs	r1, #2
 8007a2c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681a      	ldr	r2, [r3, #0]
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	3304      	adds	r3, #4
 8007a36:	0019      	movs	r1, r3
 8007a38:	0010      	movs	r0, r2
 8007a3a:	f000 fc1d 	bl	8008278 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2239      	movs	r2, #57	; 0x39
 8007a42:	2101      	movs	r1, #1
 8007a44:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007a46:	2300      	movs	r3, #0
}
 8007a48:	0018      	movs	r0, r3
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	b002      	add	sp, #8
 8007a4e:	bd80      	pop	{r7, pc}

08007a50 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b084      	sub	sp, #16
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	68da      	ldr	r2, [r3, #12]
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	2101      	movs	r1, #1
 8007a64:	430a      	orrs	r2, r1
 8007a66:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	689b      	ldr	r3, [r3, #8]
 8007a6e:	2207      	movs	r2, #7
 8007a70:	4013      	ands	r3, r2
 8007a72:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	2b06      	cmp	r3, #6
 8007a78:	d007      	beq.n	8007a8a <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	681a      	ldr	r2, [r3, #0]
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	2101      	movs	r1, #1
 8007a86:	430a      	orrs	r2, r1
 8007a88:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007a8a:	2300      	movs	r3, #0
}
 8007a8c:	0018      	movs	r0, r3
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	b004      	add	sp, #16
 8007a92:	bd80      	pop	{r7, pc}

08007a94 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b082      	sub	sp, #8
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	68da      	ldr	r2, [r3, #12]
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	2101      	movs	r1, #1
 8007aa8:	438a      	bics	r2, r1
 8007aaa:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	6a1b      	ldr	r3, [r3, #32]
 8007ab2:	4a08      	ldr	r2, [pc, #32]	; (8007ad4 <HAL_TIM_Base_Stop_IT+0x40>)
 8007ab4:	4013      	ands	r3, r2
 8007ab6:	d107      	bne.n	8007ac8 <HAL_TIM_Base_Stop_IT+0x34>
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	681a      	ldr	r2, [r3, #0]
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	2101      	movs	r1, #1
 8007ac4:	438a      	bics	r2, r1
 8007ac6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007ac8:	2300      	movs	r3, #0
}
 8007aca:	0018      	movs	r0, r3
 8007acc:	46bd      	mov	sp, r7
 8007ace:	b002      	add	sp, #8
 8007ad0:	bd80      	pop	{r7, pc}
 8007ad2:	46c0      	nop			; (mov r8, r8)
 8007ad4:	00001111 	.word	0x00001111

08007ad8 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b082      	sub	sp, #8
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d101      	bne.n	8007aea <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8007ae6:	2301      	movs	r3, #1
 8007ae8:	e01e      	b.n	8007b28 <HAL_TIM_OC_Init+0x50>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2239      	movs	r2, #57	; 0x39
 8007aee:	5c9b      	ldrb	r3, [r3, r2]
 8007af0:	b2db      	uxtb	r3, r3
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d107      	bne.n	8007b06 <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2238      	movs	r2, #56	; 0x38
 8007afa:	2100      	movs	r1, #0
 8007afc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	0018      	movs	r0, r3
 8007b02:	f000 f815 	bl	8007b30 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2239      	movs	r2, #57	; 0x39
 8007b0a:	2102      	movs	r1, #2
 8007b0c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681a      	ldr	r2, [r3, #0]
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	3304      	adds	r3, #4
 8007b16:	0019      	movs	r1, r3
 8007b18:	0010      	movs	r0, r2
 8007b1a:	f000 fbad 	bl	8008278 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2239      	movs	r2, #57	; 0x39
 8007b22:	2101      	movs	r1, #1
 8007b24:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007b26:	2300      	movs	r3, #0
}
 8007b28:	0018      	movs	r0, r3
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	b002      	add	sp, #8
 8007b2e:	bd80      	pop	{r7, pc}

08007b30 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b082      	sub	sp, #8
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8007b38:	46c0      	nop			; (mov r8, r8)
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	b002      	add	sp, #8
 8007b3e:	bd80      	pop	{r7, pc}

08007b40 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b084      	sub	sp, #16
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
 8007b48:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8007b4a:	683b      	ldr	r3, [r7, #0]
 8007b4c:	2b04      	cmp	r3, #4
 8007b4e:	d011      	beq.n	8007b74 <HAL_TIM_OC_Start_IT+0x34>
 8007b50:	d802      	bhi.n	8007b58 <HAL_TIM_OC_Start_IT+0x18>
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d005      	beq.n	8007b62 <HAL_TIM_OC_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
      break;
    }

    default:
      break;
 8007b56:	e028      	b.n	8007baa <HAL_TIM_OC_Start_IT+0x6a>
  switch (Channel)
 8007b58:	2b08      	cmp	r3, #8
 8007b5a:	d014      	beq.n	8007b86 <HAL_TIM_OC_Start_IT+0x46>
 8007b5c:	2b0c      	cmp	r3, #12
 8007b5e:	d01b      	beq.n	8007b98 <HAL_TIM_OC_Start_IT+0x58>
      break;
 8007b60:	e023      	b.n	8007baa <HAL_TIM_OC_Start_IT+0x6a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	68da      	ldr	r2, [r3, #12]
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	2102      	movs	r1, #2
 8007b6e:	430a      	orrs	r2, r1
 8007b70:	60da      	str	r2, [r3, #12]
      break;
 8007b72:	e01a      	b.n	8007baa <HAL_TIM_OC_Start_IT+0x6a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	68da      	ldr	r2, [r3, #12]
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	2104      	movs	r1, #4
 8007b80:	430a      	orrs	r2, r1
 8007b82:	60da      	str	r2, [r3, #12]
      break;
 8007b84:	e011      	b.n	8007baa <HAL_TIM_OC_Start_IT+0x6a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	68da      	ldr	r2, [r3, #12]
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	2108      	movs	r1, #8
 8007b92:	430a      	orrs	r2, r1
 8007b94:	60da      	str	r2, [r3, #12]
      break;
 8007b96:	e008      	b.n	8007baa <HAL_TIM_OC_Start_IT+0x6a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	68da      	ldr	r2, [r3, #12]
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	2110      	movs	r1, #16
 8007ba4:	430a      	orrs	r2, r1
 8007ba6:	60da      	str	r2, [r3, #12]
      break;
 8007ba8:	46c0      	nop			; (mov r8, r8)
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	6839      	ldr	r1, [r7, #0]
 8007bb0:	2201      	movs	r2, #1
 8007bb2:	0018      	movs	r0, r3
 8007bb4:	f000 fd5c 	bl	8008670 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	689b      	ldr	r3, [r3, #8]
 8007bbe:	2207      	movs	r2, #7
 8007bc0:	4013      	ands	r3, r2
 8007bc2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	2b06      	cmp	r3, #6
 8007bc8:	d007      	beq.n	8007bda <HAL_TIM_OC_Start_IT+0x9a>
  {
    __HAL_TIM_ENABLE(htim);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	681a      	ldr	r2, [r3, #0]
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	2101      	movs	r1, #1
 8007bd6:	430a      	orrs	r2, r1
 8007bd8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007bda:	2300      	movs	r3, #0
}
 8007bdc:	0018      	movs	r0, r3
 8007bde:	46bd      	mov	sp, r7
 8007be0:	b004      	add	sp, #16
 8007be2:	bd80      	pop	{r7, pc}

08007be4 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b082      	sub	sp, #8
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
 8007bec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	2b04      	cmp	r3, #4
 8007bf2:	d011      	beq.n	8007c18 <HAL_TIM_OC_Stop_IT+0x34>
 8007bf4:	d802      	bhi.n	8007bfc <HAL_TIM_OC_Stop_IT+0x18>
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d005      	beq.n	8007c06 <HAL_TIM_OC_Stop_IT+0x22>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
      break;
    }

    default:
      break;
 8007bfa:	e028      	b.n	8007c4e <HAL_TIM_OC_Stop_IT+0x6a>
  switch (Channel)
 8007bfc:	2b08      	cmp	r3, #8
 8007bfe:	d014      	beq.n	8007c2a <HAL_TIM_OC_Stop_IT+0x46>
 8007c00:	2b0c      	cmp	r3, #12
 8007c02:	d01b      	beq.n	8007c3c <HAL_TIM_OC_Stop_IT+0x58>
      break;
 8007c04:	e023      	b.n	8007c4e <HAL_TIM_OC_Stop_IT+0x6a>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	68da      	ldr	r2, [r3, #12]
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	2102      	movs	r1, #2
 8007c12:	438a      	bics	r2, r1
 8007c14:	60da      	str	r2, [r3, #12]
      break;
 8007c16:	e01a      	b.n	8007c4e <HAL_TIM_OC_Stop_IT+0x6a>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	68da      	ldr	r2, [r3, #12]
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	2104      	movs	r1, #4
 8007c24:	438a      	bics	r2, r1
 8007c26:	60da      	str	r2, [r3, #12]
      break;
 8007c28:	e011      	b.n	8007c4e <HAL_TIM_OC_Stop_IT+0x6a>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	68da      	ldr	r2, [r3, #12]
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	2108      	movs	r1, #8
 8007c36:	438a      	bics	r2, r1
 8007c38:	60da      	str	r2, [r3, #12]
      break;
 8007c3a:	e008      	b.n	8007c4e <HAL_TIM_OC_Stop_IT+0x6a>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	68da      	ldr	r2, [r3, #12]
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	2110      	movs	r1, #16
 8007c48:	438a      	bics	r2, r1
 8007c4a:	60da      	str	r2, [r3, #12]
      break;
 8007c4c:	46c0      	nop			; (mov r8, r8)
  }

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	6839      	ldr	r1, [r7, #0]
 8007c54:	2200      	movs	r2, #0
 8007c56:	0018      	movs	r0, r3
 8007c58:	f000 fd0a 	bl	8008670 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	6a1b      	ldr	r3, [r3, #32]
 8007c62:	4a08      	ldr	r2, [pc, #32]	; (8007c84 <HAL_TIM_OC_Stop_IT+0xa0>)
 8007c64:	4013      	ands	r3, r2
 8007c66:	d107      	bne.n	8007c78 <HAL_TIM_OC_Stop_IT+0x94>
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	681a      	ldr	r2, [r3, #0]
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	2101      	movs	r1, #1
 8007c74:	438a      	bics	r2, r1
 8007c76:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007c78:	2300      	movs	r3, #0
}
 8007c7a:	0018      	movs	r0, r3
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	b002      	add	sp, #8
 8007c80:	bd80      	pop	{r7, pc}
 8007c82:	46c0      	nop			; (mov r8, r8)
 8007c84:	00001111 	.word	0x00001111

08007c88 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b082      	sub	sp, #8
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d101      	bne.n	8007c9a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007c96:	2301      	movs	r3, #1
 8007c98:	e01e      	b.n	8007cd8 <HAL_TIM_PWM_Init+0x50>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2239      	movs	r2, #57	; 0x39
 8007c9e:	5c9b      	ldrb	r3, [r3, r2]
 8007ca0:	b2db      	uxtb	r3, r3
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d107      	bne.n	8007cb6 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	2238      	movs	r2, #56	; 0x38
 8007caa:	2100      	movs	r1, #0
 8007cac:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	0018      	movs	r0, r3
 8007cb2:	f000 f815 	bl	8007ce0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	2239      	movs	r2, #57	; 0x39
 8007cba:	2102      	movs	r1, #2
 8007cbc:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681a      	ldr	r2, [r3, #0]
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	3304      	adds	r3, #4
 8007cc6:	0019      	movs	r1, r3
 8007cc8:	0010      	movs	r0, r2
 8007cca:	f000 fad5 	bl	8008278 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2239      	movs	r2, #57	; 0x39
 8007cd2:	2101      	movs	r1, #1
 8007cd4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007cd6:	2300      	movs	r3, #0
}
 8007cd8:	0018      	movs	r0, r3
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	b002      	add	sp, #8
 8007cde:	bd80      	pop	{r7, pc}

08007ce0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b082      	sub	sp, #8
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007ce8:	46c0      	nop			; (mov r8, r8)
 8007cea:	46bd      	mov	sp, r7
 8007cec:	b002      	add	sp, #8
 8007cee:	bd80      	pop	{r7, pc}

08007cf0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b082      	sub	sp, #8
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	691b      	ldr	r3, [r3, #16]
 8007cfe:	2202      	movs	r2, #2
 8007d00:	4013      	ands	r3, r2
 8007d02:	2b02      	cmp	r3, #2
 8007d04:	d124      	bne.n	8007d50 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	68db      	ldr	r3, [r3, #12]
 8007d0c:	2202      	movs	r2, #2
 8007d0e:	4013      	ands	r3, r2
 8007d10:	2b02      	cmp	r3, #2
 8007d12:	d11d      	bne.n	8007d50 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	2203      	movs	r2, #3
 8007d1a:	4252      	negs	r2, r2
 8007d1c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	2201      	movs	r2, #1
 8007d22:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	699b      	ldr	r3, [r3, #24]
 8007d2a:	2203      	movs	r2, #3
 8007d2c:	4013      	ands	r3, r2
 8007d2e:	d004      	beq.n	8007d3a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	0018      	movs	r0, r3
 8007d34:	f000 fa88 	bl	8008248 <HAL_TIM_IC_CaptureCallback>
 8007d38:	e007      	b.n	8007d4a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	0018      	movs	r0, r3
 8007d3e:	f7fc fae5 	bl	800430c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	0018      	movs	r0, r3
 8007d46:	f000 fa87 	bl	8008258 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	691b      	ldr	r3, [r3, #16]
 8007d56:	2204      	movs	r2, #4
 8007d58:	4013      	ands	r3, r2
 8007d5a:	2b04      	cmp	r3, #4
 8007d5c:	d125      	bne.n	8007daa <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	68db      	ldr	r3, [r3, #12]
 8007d64:	2204      	movs	r2, #4
 8007d66:	4013      	ands	r3, r2
 8007d68:	2b04      	cmp	r3, #4
 8007d6a:	d11e      	bne.n	8007daa <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	2205      	movs	r2, #5
 8007d72:	4252      	negs	r2, r2
 8007d74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2202      	movs	r2, #2
 8007d7a:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	699a      	ldr	r2, [r3, #24]
 8007d82:	23c0      	movs	r3, #192	; 0xc0
 8007d84:	009b      	lsls	r3, r3, #2
 8007d86:	4013      	ands	r3, r2
 8007d88:	d004      	beq.n	8007d94 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	0018      	movs	r0, r3
 8007d8e:	f000 fa5b 	bl	8008248 <HAL_TIM_IC_CaptureCallback>
 8007d92:	e007      	b.n	8007da4 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	0018      	movs	r0, r3
 8007d98:	f7fc fab8 	bl	800430c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	0018      	movs	r0, r3
 8007da0:	f000 fa5a 	bl	8008258 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2200      	movs	r2, #0
 8007da8:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	691b      	ldr	r3, [r3, #16]
 8007db0:	2208      	movs	r2, #8
 8007db2:	4013      	ands	r3, r2
 8007db4:	2b08      	cmp	r3, #8
 8007db6:	d124      	bne.n	8007e02 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	68db      	ldr	r3, [r3, #12]
 8007dbe:	2208      	movs	r2, #8
 8007dc0:	4013      	ands	r3, r2
 8007dc2:	2b08      	cmp	r3, #8
 8007dc4:	d11d      	bne.n	8007e02 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	2209      	movs	r2, #9
 8007dcc:	4252      	negs	r2, r2
 8007dce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2204      	movs	r2, #4
 8007dd4:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	69db      	ldr	r3, [r3, #28]
 8007ddc:	2203      	movs	r2, #3
 8007dde:	4013      	ands	r3, r2
 8007de0:	d004      	beq.n	8007dec <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	0018      	movs	r0, r3
 8007de6:	f000 fa2f 	bl	8008248 <HAL_TIM_IC_CaptureCallback>
 8007dea:	e007      	b.n	8007dfc <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	0018      	movs	r0, r3
 8007df0:	f7fc fa8c 	bl	800430c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	0018      	movs	r0, r3
 8007df8:	f000 fa2e 	bl	8008258 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2200      	movs	r2, #0
 8007e00:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	691b      	ldr	r3, [r3, #16]
 8007e08:	2210      	movs	r2, #16
 8007e0a:	4013      	ands	r3, r2
 8007e0c:	2b10      	cmp	r3, #16
 8007e0e:	d125      	bne.n	8007e5c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	68db      	ldr	r3, [r3, #12]
 8007e16:	2210      	movs	r2, #16
 8007e18:	4013      	ands	r3, r2
 8007e1a:	2b10      	cmp	r3, #16
 8007e1c:	d11e      	bne.n	8007e5c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	2211      	movs	r2, #17
 8007e24:	4252      	negs	r2, r2
 8007e26:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2208      	movs	r2, #8
 8007e2c:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	69da      	ldr	r2, [r3, #28]
 8007e34:	23c0      	movs	r3, #192	; 0xc0
 8007e36:	009b      	lsls	r3, r3, #2
 8007e38:	4013      	ands	r3, r2
 8007e3a:	d004      	beq.n	8007e46 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	0018      	movs	r0, r3
 8007e40:	f000 fa02 	bl	8008248 <HAL_TIM_IC_CaptureCallback>
 8007e44:	e007      	b.n	8007e56 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	0018      	movs	r0, r3
 8007e4a:	f7fc fa5f 	bl	800430c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	0018      	movs	r0, r3
 8007e52:	f000 fa01 	bl	8008258 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	2200      	movs	r2, #0
 8007e5a:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	691b      	ldr	r3, [r3, #16]
 8007e62:	2201      	movs	r2, #1
 8007e64:	4013      	ands	r3, r2
 8007e66:	2b01      	cmp	r3, #1
 8007e68:	d10f      	bne.n	8007e8a <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	68db      	ldr	r3, [r3, #12]
 8007e70:	2201      	movs	r2, #1
 8007e72:	4013      	ands	r3, r2
 8007e74:	2b01      	cmp	r3, #1
 8007e76:	d108      	bne.n	8007e8a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	2202      	movs	r2, #2
 8007e7e:	4252      	negs	r2, r2
 8007e80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	0018      	movs	r0, r3
 8007e86:	f7fc f9bb 	bl	8004200 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	691b      	ldr	r3, [r3, #16]
 8007e90:	2240      	movs	r2, #64	; 0x40
 8007e92:	4013      	ands	r3, r2
 8007e94:	2b40      	cmp	r3, #64	; 0x40
 8007e96:	d10f      	bne.n	8007eb8 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	68db      	ldr	r3, [r3, #12]
 8007e9e:	2240      	movs	r2, #64	; 0x40
 8007ea0:	4013      	ands	r3, r2
 8007ea2:	2b40      	cmp	r3, #64	; 0x40
 8007ea4:	d108      	bne.n	8007eb8 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	2241      	movs	r2, #65	; 0x41
 8007eac:	4252      	negs	r2, r2
 8007eae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	0018      	movs	r0, r3
 8007eb4:	f000 f9d8 	bl	8008268 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007eb8:	46c0      	nop			; (mov r8, r8)
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	b002      	add	sp, #8
 8007ebe:	bd80      	pop	{r7, pc}

08007ec0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b084      	sub	sp, #16
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	60f8      	str	r0, [r7, #12]
 8007ec8:	60b9      	str	r1, [r7, #8]
 8007eca:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	2238      	movs	r2, #56	; 0x38
 8007ed0:	5c9b      	ldrb	r3, [r3, r2]
 8007ed2:	2b01      	cmp	r3, #1
 8007ed4:	d101      	bne.n	8007eda <HAL_TIM_OC_ConfigChannel+0x1a>
 8007ed6:	2302      	movs	r3, #2
 8007ed8:	e03c      	b.n	8007f54 <HAL_TIM_OC_ConfigChannel+0x94>
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	2238      	movs	r2, #56	; 0x38
 8007ede:	2101      	movs	r1, #1
 8007ee0:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	2239      	movs	r2, #57	; 0x39
 8007ee6:	2102      	movs	r1, #2
 8007ee8:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2b04      	cmp	r3, #4
 8007eee:	d010      	beq.n	8007f12 <HAL_TIM_OC_ConfigChannel+0x52>
 8007ef0:	d802      	bhi.n	8007ef8 <HAL_TIM_OC_ConfigChannel+0x38>
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d005      	beq.n	8007f02 <HAL_TIM_OC_ConfigChannel+0x42>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
      break;
    }

    default:
      break;
 8007ef6:	e024      	b.n	8007f42 <HAL_TIM_OC_ConfigChannel+0x82>
  switch (Channel)
 8007ef8:	2b08      	cmp	r3, #8
 8007efa:	d012      	beq.n	8007f22 <HAL_TIM_OC_ConfigChannel+0x62>
 8007efc:	2b0c      	cmp	r3, #12
 8007efe:	d018      	beq.n	8007f32 <HAL_TIM_OC_ConfigChannel+0x72>
      break;
 8007f00:	e01f      	b.n	8007f42 <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	68ba      	ldr	r2, [r7, #8]
 8007f08:	0011      	movs	r1, r2
 8007f0a:	0018      	movs	r0, r3
 8007f0c:	f000 fa12 	bl	8008334 <TIM_OC1_SetConfig>
      break;
 8007f10:	e017      	b.n	8007f42 <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	68ba      	ldr	r2, [r7, #8]
 8007f18:	0011      	movs	r1, r2
 8007f1a:	0018      	movs	r0, r3
 8007f1c:	f000 fa46 	bl	80083ac <TIM_OC2_SetConfig>
      break;
 8007f20:	e00f      	b.n	8007f42 <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	68ba      	ldr	r2, [r7, #8]
 8007f28:	0011      	movs	r1, r2
 8007f2a:	0018      	movs	r0, r3
 8007f2c:	f000 fa80 	bl	8008430 <TIM_OC3_SetConfig>
      break;
 8007f30:	e007      	b.n	8007f42 <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	68ba      	ldr	r2, [r7, #8]
 8007f38:	0011      	movs	r1, r2
 8007f3a:	0018      	movs	r0, r3
 8007f3c:	f000 fab8 	bl	80084b0 <TIM_OC4_SetConfig>
      break;
 8007f40:	46c0      	nop			; (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	2239      	movs	r2, #57	; 0x39
 8007f46:	2101      	movs	r1, #1
 8007f48:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	2238      	movs	r2, #56	; 0x38
 8007f4e:	2100      	movs	r1, #0
 8007f50:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007f52:	2300      	movs	r3, #0
}
 8007f54:	0018      	movs	r0, r3
 8007f56:	46bd      	mov	sp, r7
 8007f58:	b004      	add	sp, #16
 8007f5a:	bd80      	pop	{r7, pc}

08007f5c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b084      	sub	sp, #16
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	60f8      	str	r0, [r7, #12]
 8007f64:	60b9      	str	r1, [r7, #8]
 8007f66:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	2238      	movs	r2, #56	; 0x38
 8007f6c:	5c9b      	ldrb	r3, [r3, r2]
 8007f6e:	2b01      	cmp	r3, #1
 8007f70:	d101      	bne.n	8007f76 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8007f72:	2302      	movs	r3, #2
 8007f74:	e0a4      	b.n	80080c0 <HAL_TIM_PWM_ConfigChannel+0x164>
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	2238      	movs	r2, #56	; 0x38
 8007f7a:	2101      	movs	r1, #1
 8007f7c:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	2239      	movs	r2, #57	; 0x39
 8007f82:	2102      	movs	r1, #2
 8007f84:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2b04      	cmp	r3, #4
 8007f8a:	d029      	beq.n	8007fe0 <HAL_TIM_PWM_ConfigChannel+0x84>
 8007f8c:	d802      	bhi.n	8007f94 <HAL_TIM_PWM_ConfigChannel+0x38>
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d005      	beq.n	8007f9e <HAL_TIM_PWM_ConfigChannel+0x42>
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
      break;
    }

    default:
      break;
 8007f92:	e08c      	b.n	80080ae <HAL_TIM_PWM_ConfigChannel+0x152>
  switch (Channel)
 8007f94:	2b08      	cmp	r3, #8
 8007f96:	d046      	beq.n	8008026 <HAL_TIM_PWM_ConfigChannel+0xca>
 8007f98:	2b0c      	cmp	r3, #12
 8007f9a:	d065      	beq.n	8008068 <HAL_TIM_PWM_ConfigChannel+0x10c>
      break;
 8007f9c:	e087      	b.n	80080ae <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	68ba      	ldr	r2, [r7, #8]
 8007fa4:	0011      	movs	r1, r2
 8007fa6:	0018      	movs	r0, r3
 8007fa8:	f000 f9c4 	bl	8008334 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	699a      	ldr	r2, [r3, #24]
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	2108      	movs	r1, #8
 8007fb8:	430a      	orrs	r2, r1
 8007fba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	699a      	ldr	r2, [r3, #24]
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	2104      	movs	r1, #4
 8007fc8:	438a      	bics	r2, r1
 8007fca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	6999      	ldr	r1, [r3, #24]
 8007fd2:	68bb      	ldr	r3, [r7, #8]
 8007fd4:	68da      	ldr	r2, [r3, #12]
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	430a      	orrs	r2, r1
 8007fdc:	619a      	str	r2, [r3, #24]
      break;
 8007fde:	e066      	b.n	80080ae <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	68ba      	ldr	r2, [r7, #8]
 8007fe6:	0011      	movs	r1, r2
 8007fe8:	0018      	movs	r0, r3
 8007fea:	f000 f9df 	bl	80083ac <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	699a      	ldr	r2, [r3, #24]
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	2180      	movs	r1, #128	; 0x80
 8007ffa:	0109      	lsls	r1, r1, #4
 8007ffc:	430a      	orrs	r2, r1
 8007ffe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	699a      	ldr	r2, [r3, #24]
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	492f      	ldr	r1, [pc, #188]	; (80080c8 <HAL_TIM_PWM_ConfigChannel+0x16c>)
 800800c:	400a      	ands	r2, r1
 800800e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	6999      	ldr	r1, [r3, #24]
 8008016:	68bb      	ldr	r3, [r7, #8]
 8008018:	68db      	ldr	r3, [r3, #12]
 800801a:	021a      	lsls	r2, r3, #8
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	430a      	orrs	r2, r1
 8008022:	619a      	str	r2, [r3, #24]
      break;
 8008024:	e043      	b.n	80080ae <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	68ba      	ldr	r2, [r7, #8]
 800802c:	0011      	movs	r1, r2
 800802e:	0018      	movs	r0, r3
 8008030:	f000 f9fe 	bl	8008430 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	69da      	ldr	r2, [r3, #28]
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	2108      	movs	r1, #8
 8008040:	430a      	orrs	r2, r1
 8008042:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	69da      	ldr	r2, [r3, #28]
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	2104      	movs	r1, #4
 8008050:	438a      	bics	r2, r1
 8008052:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	69d9      	ldr	r1, [r3, #28]
 800805a:	68bb      	ldr	r3, [r7, #8]
 800805c:	68da      	ldr	r2, [r3, #12]
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	430a      	orrs	r2, r1
 8008064:	61da      	str	r2, [r3, #28]
      break;
 8008066:	e022      	b.n	80080ae <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	68ba      	ldr	r2, [r7, #8]
 800806e:	0011      	movs	r1, r2
 8008070:	0018      	movs	r0, r3
 8008072:	f000 fa1d 	bl	80084b0 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	69da      	ldr	r2, [r3, #28]
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	2180      	movs	r1, #128	; 0x80
 8008082:	0109      	lsls	r1, r1, #4
 8008084:	430a      	orrs	r2, r1
 8008086:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	69da      	ldr	r2, [r3, #28]
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	490d      	ldr	r1, [pc, #52]	; (80080c8 <HAL_TIM_PWM_ConfigChannel+0x16c>)
 8008094:	400a      	ands	r2, r1
 8008096:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	69d9      	ldr	r1, [r3, #28]
 800809e:	68bb      	ldr	r3, [r7, #8]
 80080a0:	68db      	ldr	r3, [r3, #12]
 80080a2:	021a      	lsls	r2, r3, #8
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	430a      	orrs	r2, r1
 80080aa:	61da      	str	r2, [r3, #28]
      break;
 80080ac:	46c0      	nop			; (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	2239      	movs	r2, #57	; 0x39
 80080b2:	2101      	movs	r1, #1
 80080b4:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	2238      	movs	r2, #56	; 0x38
 80080ba:	2100      	movs	r1, #0
 80080bc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80080be:	2300      	movs	r3, #0
}
 80080c0:	0018      	movs	r0, r3
 80080c2:	46bd      	mov	sp, r7
 80080c4:	b004      	add	sp, #16
 80080c6:	bd80      	pop	{r7, pc}
 80080c8:	fffffbff 	.word	0xfffffbff

080080cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80080cc:	b580      	push	{r7, lr}
 80080ce:	b084      	sub	sp, #16
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
 80080d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	2238      	movs	r2, #56	; 0x38
 80080da:	5c9b      	ldrb	r3, [r3, r2]
 80080dc:	2b01      	cmp	r3, #1
 80080de:	d101      	bne.n	80080e4 <HAL_TIM_ConfigClockSource+0x18>
 80080e0:	2302      	movs	r3, #2
 80080e2:	e0ab      	b.n	800823c <HAL_TIM_ConfigClockSource+0x170>
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2238      	movs	r2, #56	; 0x38
 80080e8:	2101      	movs	r1, #1
 80080ea:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2239      	movs	r2, #57	; 0x39
 80080f0:	2102      	movs	r1, #2
 80080f2:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	689b      	ldr	r3, [r3, #8]
 80080fa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	2277      	movs	r2, #119	; 0x77
 8008100:	4393      	bics	r3, r2
 8008102:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	4a4f      	ldr	r2, [pc, #316]	; (8008244 <HAL_TIM_ConfigClockSource+0x178>)
 8008108:	4013      	ands	r3, r2
 800810a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	68fa      	ldr	r2, [r7, #12]
 8008112:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	2b40      	cmp	r3, #64	; 0x40
 800811a:	d100      	bne.n	800811e <HAL_TIM_ConfigClockSource+0x52>
 800811c:	e06b      	b.n	80081f6 <HAL_TIM_ConfigClockSource+0x12a>
 800811e:	d80e      	bhi.n	800813e <HAL_TIM_ConfigClockSource+0x72>
 8008120:	2b10      	cmp	r3, #16
 8008122:	d100      	bne.n	8008126 <HAL_TIM_ConfigClockSource+0x5a>
 8008124:	e077      	b.n	8008216 <HAL_TIM_ConfigClockSource+0x14a>
 8008126:	d803      	bhi.n	8008130 <HAL_TIM_ConfigClockSource+0x64>
 8008128:	2b00      	cmp	r3, #0
 800812a:	d100      	bne.n	800812e <HAL_TIM_ConfigClockSource+0x62>
 800812c:	e073      	b.n	8008216 <HAL_TIM_ConfigClockSource+0x14a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800812e:	e07c      	b.n	800822a <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8008130:	2b20      	cmp	r3, #32
 8008132:	d100      	bne.n	8008136 <HAL_TIM_ConfigClockSource+0x6a>
 8008134:	e06f      	b.n	8008216 <HAL_TIM_ConfigClockSource+0x14a>
 8008136:	2b30      	cmp	r3, #48	; 0x30
 8008138:	d100      	bne.n	800813c <HAL_TIM_ConfigClockSource+0x70>
 800813a:	e06c      	b.n	8008216 <HAL_TIM_ConfigClockSource+0x14a>
      break;
 800813c:	e075      	b.n	800822a <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 800813e:	2b70      	cmp	r3, #112	; 0x70
 8008140:	d00e      	beq.n	8008160 <HAL_TIM_ConfigClockSource+0x94>
 8008142:	d804      	bhi.n	800814e <HAL_TIM_ConfigClockSource+0x82>
 8008144:	2b50      	cmp	r3, #80	; 0x50
 8008146:	d036      	beq.n	80081b6 <HAL_TIM_ConfigClockSource+0xea>
 8008148:	2b60      	cmp	r3, #96	; 0x60
 800814a:	d044      	beq.n	80081d6 <HAL_TIM_ConfigClockSource+0x10a>
      break;
 800814c:	e06d      	b.n	800822a <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 800814e:	2280      	movs	r2, #128	; 0x80
 8008150:	0152      	lsls	r2, r2, #5
 8008152:	4293      	cmp	r3, r2
 8008154:	d068      	beq.n	8008228 <HAL_TIM_ConfigClockSource+0x15c>
 8008156:	2280      	movs	r2, #128	; 0x80
 8008158:	0192      	lsls	r2, r2, #6
 800815a:	4293      	cmp	r3, r2
 800815c:	d017      	beq.n	800818e <HAL_TIM_ConfigClockSource+0xc2>
      break;
 800815e:	e064      	b.n	800822a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	6818      	ldr	r0, [r3, #0]
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	6899      	ldr	r1, [r3, #8]
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	685a      	ldr	r2, [r3, #4]
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	68db      	ldr	r3, [r3, #12]
 8008170:	f000 fa5e 	bl	8008630 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	689b      	ldr	r3, [r3, #8]
 800817a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	2277      	movs	r2, #119	; 0x77
 8008180:	4313      	orrs	r3, r2
 8008182:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	68fa      	ldr	r2, [r7, #12]
 800818a:	609a      	str	r2, [r3, #8]
      break;
 800818c:	e04d      	b.n	800822a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	6818      	ldr	r0, [r3, #0]
 8008192:	683b      	ldr	r3, [r7, #0]
 8008194:	6899      	ldr	r1, [r3, #8]
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	685a      	ldr	r2, [r3, #4]
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	68db      	ldr	r3, [r3, #12]
 800819e:	f000 fa47 	bl	8008630 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	689a      	ldr	r2, [r3, #8]
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	2180      	movs	r1, #128	; 0x80
 80081ae:	01c9      	lsls	r1, r1, #7
 80081b0:	430a      	orrs	r2, r1
 80081b2:	609a      	str	r2, [r3, #8]
      break;
 80081b4:	e039      	b.n	800822a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	6818      	ldr	r0, [r3, #0]
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	6859      	ldr	r1, [r3, #4]
 80081be:	683b      	ldr	r3, [r7, #0]
 80081c0:	68db      	ldr	r3, [r3, #12]
 80081c2:	001a      	movs	r2, r3
 80081c4:	f000 f9ba 	bl	800853c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	2150      	movs	r1, #80	; 0x50
 80081ce:	0018      	movs	r0, r3
 80081d0:	f000 fa14 	bl	80085fc <TIM_ITRx_SetConfig>
      break;
 80081d4:	e029      	b.n	800822a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	6818      	ldr	r0, [r3, #0]
 80081da:	683b      	ldr	r3, [r7, #0]
 80081dc:	6859      	ldr	r1, [r3, #4]
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	68db      	ldr	r3, [r3, #12]
 80081e2:	001a      	movs	r2, r3
 80081e4:	f000 f9d8 	bl	8008598 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	2160      	movs	r1, #96	; 0x60
 80081ee:	0018      	movs	r0, r3
 80081f0:	f000 fa04 	bl	80085fc <TIM_ITRx_SetConfig>
      break;
 80081f4:	e019      	b.n	800822a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	6818      	ldr	r0, [r3, #0]
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	6859      	ldr	r1, [r3, #4]
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	68db      	ldr	r3, [r3, #12]
 8008202:	001a      	movs	r2, r3
 8008204:	f000 f99a 	bl	800853c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	2140      	movs	r1, #64	; 0x40
 800820e:	0018      	movs	r0, r3
 8008210:	f000 f9f4 	bl	80085fc <TIM_ITRx_SetConfig>
      break;
 8008214:	e009      	b.n	800822a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681a      	ldr	r2, [r3, #0]
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	0019      	movs	r1, r3
 8008220:	0010      	movs	r0, r2
 8008222:	f000 f9eb 	bl	80085fc <TIM_ITRx_SetConfig>
      break;
 8008226:	e000      	b.n	800822a <HAL_TIM_ConfigClockSource+0x15e>
      break;
 8008228:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	2239      	movs	r2, #57	; 0x39
 800822e:	2101      	movs	r1, #1
 8008230:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	2238      	movs	r2, #56	; 0x38
 8008236:	2100      	movs	r1, #0
 8008238:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800823a:	2300      	movs	r3, #0
}
 800823c:	0018      	movs	r0, r3
 800823e:	46bd      	mov	sp, r7
 8008240:	b004      	add	sp, #16
 8008242:	bd80      	pop	{r7, pc}
 8008244:	ffff00ff 	.word	0xffff00ff

08008248 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b082      	sub	sp, #8
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008250:	46c0      	nop			; (mov r8, r8)
 8008252:	46bd      	mov	sp, r7
 8008254:	b002      	add	sp, #8
 8008256:	bd80      	pop	{r7, pc}

08008258 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008258:	b580      	push	{r7, lr}
 800825a:	b082      	sub	sp, #8
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008260:	46c0      	nop			; (mov r8, r8)
 8008262:	46bd      	mov	sp, r7
 8008264:	b002      	add	sp, #8
 8008266:	bd80      	pop	{r7, pc}

08008268 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008268:	b580      	push	{r7, lr}
 800826a:	b082      	sub	sp, #8
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008270:	46c0      	nop			; (mov r8, r8)
 8008272:	46bd      	mov	sp, r7
 8008274:	b002      	add	sp, #8
 8008276:	bd80      	pop	{r7, pc}

08008278 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b084      	sub	sp, #16
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
 8008280:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008288:	687a      	ldr	r2, [r7, #4]
 800828a:	2380      	movs	r3, #128	; 0x80
 800828c:	05db      	lsls	r3, r3, #23
 800828e:	429a      	cmp	r2, r3
 8008290:	d00b      	beq.n	80082aa <TIM_Base_SetConfig+0x32>
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	4a23      	ldr	r2, [pc, #140]	; (8008324 <TIM_Base_SetConfig+0xac>)
 8008296:	4293      	cmp	r3, r2
 8008298:	d007      	beq.n	80082aa <TIM_Base_SetConfig+0x32>
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	4a22      	ldr	r2, [pc, #136]	; (8008328 <TIM_Base_SetConfig+0xb0>)
 800829e:	4293      	cmp	r3, r2
 80082a0:	d003      	beq.n	80082aa <TIM_Base_SetConfig+0x32>
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	4a21      	ldr	r2, [pc, #132]	; (800832c <TIM_Base_SetConfig+0xb4>)
 80082a6:	4293      	cmp	r3, r2
 80082a8:	d108      	bne.n	80082bc <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	2270      	movs	r2, #112	; 0x70
 80082ae:	4393      	bics	r3, r2
 80082b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	685b      	ldr	r3, [r3, #4]
 80082b6:	68fa      	ldr	r2, [r7, #12]
 80082b8:	4313      	orrs	r3, r2
 80082ba:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80082bc:	687a      	ldr	r2, [r7, #4]
 80082be:	2380      	movs	r3, #128	; 0x80
 80082c0:	05db      	lsls	r3, r3, #23
 80082c2:	429a      	cmp	r2, r3
 80082c4:	d00b      	beq.n	80082de <TIM_Base_SetConfig+0x66>
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	4a16      	ldr	r2, [pc, #88]	; (8008324 <TIM_Base_SetConfig+0xac>)
 80082ca:	4293      	cmp	r3, r2
 80082cc:	d007      	beq.n	80082de <TIM_Base_SetConfig+0x66>
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	4a15      	ldr	r2, [pc, #84]	; (8008328 <TIM_Base_SetConfig+0xb0>)
 80082d2:	4293      	cmp	r3, r2
 80082d4:	d003      	beq.n	80082de <TIM_Base_SetConfig+0x66>
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	4a14      	ldr	r2, [pc, #80]	; (800832c <TIM_Base_SetConfig+0xb4>)
 80082da:	4293      	cmp	r3, r2
 80082dc:	d108      	bne.n	80082f0 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	4a13      	ldr	r2, [pc, #76]	; (8008330 <TIM_Base_SetConfig+0xb8>)
 80082e2:	4013      	ands	r3, r2
 80082e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	68db      	ldr	r3, [r3, #12]
 80082ea:	68fa      	ldr	r2, [r7, #12]
 80082ec:	4313      	orrs	r3, r2
 80082ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	2280      	movs	r2, #128	; 0x80
 80082f4:	4393      	bics	r3, r2
 80082f6:	001a      	movs	r2, r3
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	691b      	ldr	r3, [r3, #16]
 80082fc:	4313      	orrs	r3, r2
 80082fe:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	68fa      	ldr	r2, [r7, #12]
 8008304:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	689a      	ldr	r2, [r3, #8]
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800830e:	683b      	ldr	r3, [r7, #0]
 8008310:	681a      	ldr	r2, [r3, #0]
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	2201      	movs	r2, #1
 800831a:	615a      	str	r2, [r3, #20]
}
 800831c:	46c0      	nop			; (mov r8, r8)
 800831e:	46bd      	mov	sp, r7
 8008320:	b004      	add	sp, #16
 8008322:	bd80      	pop	{r7, pc}
 8008324:	40000400 	.word	0x40000400
 8008328:	40010800 	.word	0x40010800
 800832c:	40011400 	.word	0x40011400
 8008330:	fffffcff 	.word	0xfffffcff

08008334 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008334:	b580      	push	{r7, lr}
 8008336:	b086      	sub	sp, #24
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
 800833c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6a1b      	ldr	r3, [r3, #32]
 8008342:	2201      	movs	r2, #1
 8008344:	4393      	bics	r3, r2
 8008346:	001a      	movs	r2, r3
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	6a1b      	ldr	r3, [r3, #32]
 8008350:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	685b      	ldr	r3, [r3, #4]
 8008356:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	699b      	ldr	r3, [r3, #24]
 800835c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	2270      	movs	r2, #112	; 0x70
 8008362:	4393      	bics	r3, r2
 8008364:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	2203      	movs	r2, #3
 800836a:	4393      	bics	r3, r2
 800836c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800836e:	683b      	ldr	r3, [r7, #0]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	68fa      	ldr	r2, [r7, #12]
 8008374:	4313      	orrs	r3, r2
 8008376:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008378:	697b      	ldr	r3, [r7, #20]
 800837a:	2202      	movs	r2, #2
 800837c:	4393      	bics	r3, r2
 800837e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	689b      	ldr	r3, [r3, #8]
 8008384:	697a      	ldr	r2, [r7, #20]
 8008386:	4313      	orrs	r3, r2
 8008388:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	693a      	ldr	r2, [r7, #16]
 800838e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	68fa      	ldr	r2, [r7, #12]
 8008394:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	685a      	ldr	r2, [r3, #4]
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	697a      	ldr	r2, [r7, #20]
 80083a2:	621a      	str	r2, [r3, #32]
}
 80083a4:	46c0      	nop			; (mov r8, r8)
 80083a6:	46bd      	mov	sp, r7
 80083a8:	b006      	add	sp, #24
 80083aa:	bd80      	pop	{r7, pc}

080083ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b086      	sub	sp, #24
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
 80083b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6a1b      	ldr	r3, [r3, #32]
 80083ba:	2210      	movs	r2, #16
 80083bc:	4393      	bics	r3, r2
 80083be:	001a      	movs	r2, r3
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	6a1b      	ldr	r3, [r3, #32]
 80083c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	685b      	ldr	r3, [r3, #4]
 80083ce:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	699b      	ldr	r3, [r3, #24]
 80083d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	4a13      	ldr	r2, [pc, #76]	; (8008428 <TIM_OC2_SetConfig+0x7c>)
 80083da:	4013      	ands	r3, r2
 80083dc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	4a12      	ldr	r2, [pc, #72]	; (800842c <TIM_OC2_SetConfig+0x80>)
 80083e2:	4013      	ands	r3, r2
 80083e4:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	021b      	lsls	r3, r3, #8
 80083ec:	68fa      	ldr	r2, [r7, #12]
 80083ee:	4313      	orrs	r3, r2
 80083f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80083f2:	697b      	ldr	r3, [r7, #20]
 80083f4:	2220      	movs	r2, #32
 80083f6:	4393      	bics	r3, r2
 80083f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	689b      	ldr	r3, [r3, #8]
 80083fe:	011b      	lsls	r3, r3, #4
 8008400:	697a      	ldr	r2, [r7, #20]
 8008402:	4313      	orrs	r3, r2
 8008404:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	693a      	ldr	r2, [r7, #16]
 800840a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	68fa      	ldr	r2, [r7, #12]
 8008410:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	685a      	ldr	r2, [r3, #4]
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	697a      	ldr	r2, [r7, #20]
 800841e:	621a      	str	r2, [r3, #32]
}
 8008420:	46c0      	nop			; (mov r8, r8)
 8008422:	46bd      	mov	sp, r7
 8008424:	b006      	add	sp, #24
 8008426:	bd80      	pop	{r7, pc}
 8008428:	ffff8fff 	.word	0xffff8fff
 800842c:	fffffcff 	.word	0xfffffcff

08008430 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008430:	b580      	push	{r7, lr}
 8008432:	b086      	sub	sp, #24
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
 8008438:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	6a1b      	ldr	r3, [r3, #32]
 800843e:	4a1a      	ldr	r2, [pc, #104]	; (80084a8 <TIM_OC3_SetConfig+0x78>)
 8008440:	401a      	ands	r2, r3
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	6a1b      	ldr	r3, [r3, #32]
 800844a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	685b      	ldr	r3, [r3, #4]
 8008450:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	69db      	ldr	r3, [r3, #28]
 8008456:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	2270      	movs	r2, #112	; 0x70
 800845c:	4393      	bics	r3, r2
 800845e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	2203      	movs	r2, #3
 8008464:	4393      	bics	r3, r2
 8008466:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008468:	683b      	ldr	r3, [r7, #0]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	68fa      	ldr	r2, [r7, #12]
 800846e:	4313      	orrs	r3, r2
 8008470:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008472:	697b      	ldr	r3, [r7, #20]
 8008474:	4a0d      	ldr	r2, [pc, #52]	; (80084ac <TIM_OC3_SetConfig+0x7c>)
 8008476:	4013      	ands	r3, r2
 8008478:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	689b      	ldr	r3, [r3, #8]
 800847e:	021b      	lsls	r3, r3, #8
 8008480:	697a      	ldr	r2, [r7, #20]
 8008482:	4313      	orrs	r3, r2
 8008484:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	693a      	ldr	r2, [r7, #16]
 800848a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	68fa      	ldr	r2, [r7, #12]
 8008490:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008492:	683b      	ldr	r3, [r7, #0]
 8008494:	685a      	ldr	r2, [r3, #4]
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	697a      	ldr	r2, [r7, #20]
 800849e:	621a      	str	r2, [r3, #32]
}
 80084a0:	46c0      	nop			; (mov r8, r8)
 80084a2:	46bd      	mov	sp, r7
 80084a4:	b006      	add	sp, #24
 80084a6:	bd80      	pop	{r7, pc}
 80084a8:	fffffeff 	.word	0xfffffeff
 80084ac:	fffffdff 	.word	0xfffffdff

080084b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b086      	sub	sp, #24
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
 80084b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	6a1b      	ldr	r3, [r3, #32]
 80084be:	4a1b      	ldr	r2, [pc, #108]	; (800852c <TIM_OC4_SetConfig+0x7c>)
 80084c0:	401a      	ands	r2, r3
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	6a1b      	ldr	r3, [r3, #32]
 80084ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	685b      	ldr	r3, [r3, #4]
 80084d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	69db      	ldr	r3, [r3, #28]
 80084d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	4a15      	ldr	r2, [pc, #84]	; (8008530 <TIM_OC4_SetConfig+0x80>)
 80084dc:	4013      	ands	r3, r2
 80084de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	4a14      	ldr	r2, [pc, #80]	; (8008534 <TIM_OC4_SetConfig+0x84>)
 80084e4:	4013      	ands	r3, r2
 80084e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80084e8:	683b      	ldr	r3, [r7, #0]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	021b      	lsls	r3, r3, #8
 80084ee:	68fa      	ldr	r2, [r7, #12]
 80084f0:	4313      	orrs	r3, r2
 80084f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80084f4:	697b      	ldr	r3, [r7, #20]
 80084f6:	4a10      	ldr	r2, [pc, #64]	; (8008538 <TIM_OC4_SetConfig+0x88>)
 80084f8:	4013      	ands	r3, r2
 80084fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	689b      	ldr	r3, [r3, #8]
 8008500:	031b      	lsls	r3, r3, #12
 8008502:	697a      	ldr	r2, [r7, #20]
 8008504:	4313      	orrs	r3, r2
 8008506:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	693a      	ldr	r2, [r7, #16]
 800850c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	68fa      	ldr	r2, [r7, #12]
 8008512:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	685a      	ldr	r2, [r3, #4]
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	697a      	ldr	r2, [r7, #20]
 8008520:	621a      	str	r2, [r3, #32]
}
 8008522:	46c0      	nop			; (mov r8, r8)
 8008524:	46bd      	mov	sp, r7
 8008526:	b006      	add	sp, #24
 8008528:	bd80      	pop	{r7, pc}
 800852a:	46c0      	nop			; (mov r8, r8)
 800852c:	ffffefff 	.word	0xffffefff
 8008530:	ffff8fff 	.word	0xffff8fff
 8008534:	fffffcff 	.word	0xfffffcff
 8008538:	ffffdfff 	.word	0xffffdfff

0800853c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800853c:	b580      	push	{r7, lr}
 800853e:	b086      	sub	sp, #24
 8008540:	af00      	add	r7, sp, #0
 8008542:	60f8      	str	r0, [r7, #12]
 8008544:	60b9      	str	r1, [r7, #8]
 8008546:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	6a1b      	ldr	r3, [r3, #32]
 800854c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	6a1b      	ldr	r3, [r3, #32]
 8008552:	2201      	movs	r2, #1
 8008554:	4393      	bics	r3, r2
 8008556:	001a      	movs	r2, r3
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	699b      	ldr	r3, [r3, #24]
 8008560:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008562:	693b      	ldr	r3, [r7, #16]
 8008564:	22f0      	movs	r2, #240	; 0xf0
 8008566:	4393      	bics	r3, r2
 8008568:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	011b      	lsls	r3, r3, #4
 800856e:	693a      	ldr	r2, [r7, #16]
 8008570:	4313      	orrs	r3, r2
 8008572:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008574:	697b      	ldr	r3, [r7, #20]
 8008576:	220a      	movs	r2, #10
 8008578:	4393      	bics	r3, r2
 800857a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800857c:	697a      	ldr	r2, [r7, #20]
 800857e:	68bb      	ldr	r3, [r7, #8]
 8008580:	4313      	orrs	r3, r2
 8008582:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	693a      	ldr	r2, [r7, #16]
 8008588:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	697a      	ldr	r2, [r7, #20]
 800858e:	621a      	str	r2, [r3, #32]
}
 8008590:	46c0      	nop			; (mov r8, r8)
 8008592:	46bd      	mov	sp, r7
 8008594:	b006      	add	sp, #24
 8008596:	bd80      	pop	{r7, pc}

08008598 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b086      	sub	sp, #24
 800859c:	af00      	add	r7, sp, #0
 800859e:	60f8      	str	r0, [r7, #12]
 80085a0:	60b9      	str	r1, [r7, #8]
 80085a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	6a1b      	ldr	r3, [r3, #32]
 80085a8:	2210      	movs	r2, #16
 80085aa:	4393      	bics	r3, r2
 80085ac:	001a      	movs	r2, r3
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	699b      	ldr	r3, [r3, #24]
 80085b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	6a1b      	ldr	r3, [r3, #32]
 80085bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80085be:	697b      	ldr	r3, [r7, #20]
 80085c0:	4a0d      	ldr	r2, [pc, #52]	; (80085f8 <TIM_TI2_ConfigInputStage+0x60>)
 80085c2:	4013      	ands	r3, r2
 80085c4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	031b      	lsls	r3, r3, #12
 80085ca:	697a      	ldr	r2, [r7, #20]
 80085cc:	4313      	orrs	r3, r2
 80085ce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80085d0:	693b      	ldr	r3, [r7, #16]
 80085d2:	22a0      	movs	r2, #160	; 0xa0
 80085d4:	4393      	bics	r3, r2
 80085d6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80085d8:	68bb      	ldr	r3, [r7, #8]
 80085da:	011b      	lsls	r3, r3, #4
 80085dc:	693a      	ldr	r2, [r7, #16]
 80085de:	4313      	orrs	r3, r2
 80085e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	697a      	ldr	r2, [r7, #20]
 80085e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	693a      	ldr	r2, [r7, #16]
 80085ec:	621a      	str	r2, [r3, #32]
}
 80085ee:	46c0      	nop			; (mov r8, r8)
 80085f0:	46bd      	mov	sp, r7
 80085f2:	b006      	add	sp, #24
 80085f4:	bd80      	pop	{r7, pc}
 80085f6:	46c0      	nop			; (mov r8, r8)
 80085f8:	ffff0fff 	.word	0xffff0fff

080085fc <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b084      	sub	sp, #16
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
 8008604:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	689b      	ldr	r3, [r3, #8]
 800860a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	2270      	movs	r2, #112	; 0x70
 8008610:	4393      	bics	r3, r2
 8008612:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008614:	683a      	ldr	r2, [r7, #0]
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	4313      	orrs	r3, r2
 800861a:	2207      	movs	r2, #7
 800861c:	4313      	orrs	r3, r2
 800861e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	68fa      	ldr	r2, [r7, #12]
 8008624:	609a      	str	r2, [r3, #8]
}
 8008626:	46c0      	nop			; (mov r8, r8)
 8008628:	46bd      	mov	sp, r7
 800862a:	b004      	add	sp, #16
 800862c:	bd80      	pop	{r7, pc}
	...

08008630 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b086      	sub	sp, #24
 8008634:	af00      	add	r7, sp, #0
 8008636:	60f8      	str	r0, [r7, #12]
 8008638:	60b9      	str	r1, [r7, #8]
 800863a:	607a      	str	r2, [r7, #4]
 800863c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	689b      	ldr	r3, [r3, #8]
 8008642:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008644:	697b      	ldr	r3, [r7, #20]
 8008646:	4a09      	ldr	r2, [pc, #36]	; (800866c <TIM_ETR_SetConfig+0x3c>)
 8008648:	4013      	ands	r3, r2
 800864a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800864c:	683b      	ldr	r3, [r7, #0]
 800864e:	021a      	lsls	r2, r3, #8
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	431a      	orrs	r2, r3
 8008654:	68bb      	ldr	r3, [r7, #8]
 8008656:	4313      	orrs	r3, r2
 8008658:	697a      	ldr	r2, [r7, #20]
 800865a:	4313      	orrs	r3, r2
 800865c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	697a      	ldr	r2, [r7, #20]
 8008662:	609a      	str	r2, [r3, #8]
}
 8008664:	46c0      	nop			; (mov r8, r8)
 8008666:	46bd      	mov	sp, r7
 8008668:	b006      	add	sp, #24
 800866a:	bd80      	pop	{r7, pc}
 800866c:	ffff00ff 	.word	0xffff00ff

08008670 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008670:	b580      	push	{r7, lr}
 8008672:	b086      	sub	sp, #24
 8008674:	af00      	add	r7, sp, #0
 8008676:	60f8      	str	r0, [r7, #12]
 8008678:	60b9      	str	r1, [r7, #8]
 800867a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800867c:	68bb      	ldr	r3, [r7, #8]
 800867e:	221f      	movs	r2, #31
 8008680:	4013      	ands	r3, r2
 8008682:	2201      	movs	r2, #1
 8008684:	409a      	lsls	r2, r3
 8008686:	0013      	movs	r3, r2
 8008688:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	6a1b      	ldr	r3, [r3, #32]
 800868e:	697a      	ldr	r2, [r7, #20]
 8008690:	43d2      	mvns	r2, r2
 8008692:	401a      	ands	r2, r3
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	6a1a      	ldr	r2, [r3, #32]
 800869c:	68bb      	ldr	r3, [r7, #8]
 800869e:	211f      	movs	r1, #31
 80086a0:	400b      	ands	r3, r1
 80086a2:	6879      	ldr	r1, [r7, #4]
 80086a4:	4099      	lsls	r1, r3
 80086a6:	000b      	movs	r3, r1
 80086a8:	431a      	orrs	r2, r3
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	621a      	str	r2, [r3, #32]
}
 80086ae:	46c0      	nop			; (mov r8, r8)
 80086b0:	46bd      	mov	sp, r7
 80086b2:	b006      	add	sp, #24
 80086b4:	bd80      	pop	{r7, pc}

080086b6 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80086b6:	b580      	push	{r7, lr}
 80086b8:	b084      	sub	sp, #16
 80086ba:	af00      	add	r7, sp, #0
 80086bc:	6078      	str	r0, [r7, #4]
 80086be:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2238      	movs	r2, #56	; 0x38
 80086c4:	5c9b      	ldrb	r3, [r3, r2]
 80086c6:	2b01      	cmp	r3, #1
 80086c8:	d101      	bne.n	80086ce <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80086ca:	2302      	movs	r3, #2
 80086cc:	e032      	b.n	8008734 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	2238      	movs	r2, #56	; 0x38
 80086d2:	2101      	movs	r1, #1
 80086d4:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	2239      	movs	r2, #57	; 0x39
 80086da:	2102      	movs	r1, #2
 80086dc:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	685b      	ldr	r3, [r3, #4]
 80086e4:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	689b      	ldr	r3, [r3, #8]
 80086ec:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	2270      	movs	r2, #112	; 0x70
 80086f2:	4393      	bics	r3, r2
 80086f4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80086f6:	683b      	ldr	r3, [r7, #0]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	68fa      	ldr	r2, [r7, #12]
 80086fc:	4313      	orrs	r3, r2
 80086fe:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8008700:	68bb      	ldr	r3, [r7, #8]
 8008702:	2280      	movs	r2, #128	; 0x80
 8008704:	4393      	bics	r3, r2
 8008706:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	685b      	ldr	r3, [r3, #4]
 800870c:	68ba      	ldr	r2, [r7, #8]
 800870e:	4313      	orrs	r3, r2
 8008710:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	68fa      	ldr	r2, [r7, #12]
 8008718:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	68ba      	ldr	r2, [r7, #8]
 8008720:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	2239      	movs	r2, #57	; 0x39
 8008726:	2101      	movs	r1, #1
 8008728:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	2238      	movs	r2, #56	; 0x38
 800872e:	2100      	movs	r1, #0
 8008730:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008732:	2300      	movs	r3, #0
}
 8008734:	0018      	movs	r0, r3
 8008736:	46bd      	mov	sp, r7
 8008738:	b004      	add	sp, #16
 800873a:	bd80      	pop	{r7, pc}

0800873c <HAL_TIMEx_RemapConfig>:
  @endif
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 800873c:	b580      	push	{r7, lr}
 800873e:	b082      	sub	sp, #8
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
 8008744:	6039      	str	r1, [r7, #0]
  __HAL_LOCK(htim);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	2238      	movs	r2, #56	; 0x38
 800874a:	5c9b      	ldrb	r3, [r3, r2]
 800874c:	2b01      	cmp	r3, #1
 800874e:	d101      	bne.n	8008754 <HAL_TIMEx_RemapConfig+0x18>
 8008750:	2302      	movs	r3, #2
 8008752:	e00c      	b.n	800876e <HAL_TIMEx_RemapConfig+0x32>
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2238      	movs	r2, #56	; 0x38
 8008758:	2101      	movs	r1, #1
 800875a:	5499      	strb	r1, [r3, r2]

  /* Check parameters */
  assert_param(IS_TIM_REMAP(htim->Instance, Remap));

  /* Set the Timer remapping configuration */
  WRITE_REG(htim->Instance->OR, Remap);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	683a      	ldr	r2, [r7, #0]
 8008762:	651a      	str	r2, [r3, #80]	; 0x50

  __HAL_UNLOCK(htim);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	2238      	movs	r2, #56	; 0x38
 8008768:	2100      	movs	r1, #0
 800876a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800876c:	2300      	movs	r3, #0
}
 800876e:	0018      	movs	r0, r3
 8008770:	46bd      	mov	sp, r7
 8008772:	b002      	add	sp, #8
 8008774:	bd80      	pop	{r7, pc}
	...

08008778 <calloc>:
 8008778:	b510      	push	{r4, lr}
 800877a:	4b03      	ldr	r3, [pc, #12]	; (8008788 <calloc+0x10>)
 800877c:	000a      	movs	r2, r1
 800877e:	0001      	movs	r1, r0
 8008780:	6818      	ldr	r0, [r3, #0]
 8008782:	f000 f83e 	bl	8008802 <_calloc_r>
 8008786:	bd10      	pop	{r4, pc}
 8008788:	20000068 	.word	0x20000068

0800878c <__errno>:
 800878c:	4b01      	ldr	r3, [pc, #4]	; (8008794 <__errno+0x8>)
 800878e:	6818      	ldr	r0, [r3, #0]
 8008790:	4770      	bx	lr
 8008792:	46c0      	nop			; (mov r8, r8)
 8008794:	20000068 	.word	0x20000068

08008798 <__libc_init_array>:
 8008798:	b570      	push	{r4, r5, r6, lr}
 800879a:	2600      	movs	r6, #0
 800879c:	4d0c      	ldr	r5, [pc, #48]	; (80087d0 <__libc_init_array+0x38>)
 800879e:	4c0d      	ldr	r4, [pc, #52]	; (80087d4 <__libc_init_array+0x3c>)
 80087a0:	1b64      	subs	r4, r4, r5
 80087a2:	10a4      	asrs	r4, r4, #2
 80087a4:	42a6      	cmp	r6, r4
 80087a6:	d109      	bne.n	80087bc <__libc_init_array+0x24>
 80087a8:	2600      	movs	r6, #0
 80087aa:	f000 fc37 	bl	800901c <_init>
 80087ae:	4d0a      	ldr	r5, [pc, #40]	; (80087d8 <__libc_init_array+0x40>)
 80087b0:	4c0a      	ldr	r4, [pc, #40]	; (80087dc <__libc_init_array+0x44>)
 80087b2:	1b64      	subs	r4, r4, r5
 80087b4:	10a4      	asrs	r4, r4, #2
 80087b6:	42a6      	cmp	r6, r4
 80087b8:	d105      	bne.n	80087c6 <__libc_init_array+0x2e>
 80087ba:	bd70      	pop	{r4, r5, r6, pc}
 80087bc:	00b3      	lsls	r3, r6, #2
 80087be:	58eb      	ldr	r3, [r5, r3]
 80087c0:	4798      	blx	r3
 80087c2:	3601      	adds	r6, #1
 80087c4:	e7ee      	b.n	80087a4 <__libc_init_array+0xc>
 80087c6:	00b3      	lsls	r3, r6, #2
 80087c8:	58eb      	ldr	r3, [r5, r3]
 80087ca:	4798      	blx	r3
 80087cc:	3601      	adds	r6, #1
 80087ce:	e7f2      	b.n	80087b6 <__libc_init_array+0x1e>
 80087d0:	08009838 	.word	0x08009838
 80087d4:	08009838 	.word	0x08009838
 80087d8:	08009838 	.word	0x08009838
 80087dc:	0800983c 	.word	0x0800983c

080087e0 <memcpy>:
 80087e0:	2300      	movs	r3, #0
 80087e2:	b510      	push	{r4, lr}
 80087e4:	429a      	cmp	r2, r3
 80087e6:	d100      	bne.n	80087ea <memcpy+0xa>
 80087e8:	bd10      	pop	{r4, pc}
 80087ea:	5ccc      	ldrb	r4, [r1, r3]
 80087ec:	54c4      	strb	r4, [r0, r3]
 80087ee:	3301      	adds	r3, #1
 80087f0:	e7f8      	b.n	80087e4 <memcpy+0x4>

080087f2 <memset>:
 80087f2:	0003      	movs	r3, r0
 80087f4:	1812      	adds	r2, r2, r0
 80087f6:	4293      	cmp	r3, r2
 80087f8:	d100      	bne.n	80087fc <memset+0xa>
 80087fa:	4770      	bx	lr
 80087fc:	7019      	strb	r1, [r3, #0]
 80087fe:	3301      	adds	r3, #1
 8008800:	e7f9      	b.n	80087f6 <memset+0x4>

08008802 <_calloc_r>:
 8008802:	434a      	muls	r2, r1
 8008804:	b570      	push	{r4, r5, r6, lr}
 8008806:	0011      	movs	r1, r2
 8008808:	0014      	movs	r4, r2
 800880a:	f000 f809 	bl	8008820 <_malloc_r>
 800880e:	1e05      	subs	r5, r0, #0
 8008810:	d003      	beq.n	800881a <_calloc_r+0x18>
 8008812:	0022      	movs	r2, r4
 8008814:	2100      	movs	r1, #0
 8008816:	f7ff ffec 	bl	80087f2 <memset>
 800881a:	0028      	movs	r0, r5
 800881c:	bd70      	pop	{r4, r5, r6, pc}
	...

08008820 <_malloc_r>:
 8008820:	2303      	movs	r3, #3
 8008822:	b570      	push	{r4, r5, r6, lr}
 8008824:	1ccd      	adds	r5, r1, #3
 8008826:	439d      	bics	r5, r3
 8008828:	3508      	adds	r5, #8
 800882a:	0006      	movs	r6, r0
 800882c:	2d0c      	cmp	r5, #12
 800882e:	d21e      	bcs.n	800886e <_malloc_r+0x4e>
 8008830:	250c      	movs	r5, #12
 8008832:	42a9      	cmp	r1, r5
 8008834:	d81d      	bhi.n	8008872 <_malloc_r+0x52>
 8008836:	0030      	movs	r0, r6
 8008838:	f000 f882 	bl	8008940 <__malloc_lock>
 800883c:	4a25      	ldr	r2, [pc, #148]	; (80088d4 <_malloc_r+0xb4>)
 800883e:	6814      	ldr	r4, [r2, #0]
 8008840:	0021      	movs	r1, r4
 8008842:	2900      	cmp	r1, #0
 8008844:	d119      	bne.n	800887a <_malloc_r+0x5a>
 8008846:	4c24      	ldr	r4, [pc, #144]	; (80088d8 <_malloc_r+0xb8>)
 8008848:	6823      	ldr	r3, [r4, #0]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d103      	bne.n	8008856 <_malloc_r+0x36>
 800884e:	0030      	movs	r0, r6
 8008850:	f000 f844 	bl	80088dc <_sbrk_r>
 8008854:	6020      	str	r0, [r4, #0]
 8008856:	0029      	movs	r1, r5
 8008858:	0030      	movs	r0, r6
 800885a:	f000 f83f 	bl	80088dc <_sbrk_r>
 800885e:	1c43      	adds	r3, r0, #1
 8008860:	d12b      	bne.n	80088ba <_malloc_r+0x9a>
 8008862:	230c      	movs	r3, #12
 8008864:	0030      	movs	r0, r6
 8008866:	6033      	str	r3, [r6, #0]
 8008868:	f000 f86b 	bl	8008942 <__malloc_unlock>
 800886c:	e003      	b.n	8008876 <_malloc_r+0x56>
 800886e:	2d00      	cmp	r5, #0
 8008870:	dadf      	bge.n	8008832 <_malloc_r+0x12>
 8008872:	230c      	movs	r3, #12
 8008874:	6033      	str	r3, [r6, #0]
 8008876:	2000      	movs	r0, #0
 8008878:	bd70      	pop	{r4, r5, r6, pc}
 800887a:	680b      	ldr	r3, [r1, #0]
 800887c:	1b5b      	subs	r3, r3, r5
 800887e:	d419      	bmi.n	80088b4 <_malloc_r+0x94>
 8008880:	2b0b      	cmp	r3, #11
 8008882:	d903      	bls.n	800888c <_malloc_r+0x6c>
 8008884:	600b      	str	r3, [r1, #0]
 8008886:	18cc      	adds	r4, r1, r3
 8008888:	6025      	str	r5, [r4, #0]
 800888a:	e003      	b.n	8008894 <_malloc_r+0x74>
 800888c:	684b      	ldr	r3, [r1, #4]
 800888e:	428c      	cmp	r4, r1
 8008890:	d10d      	bne.n	80088ae <_malloc_r+0x8e>
 8008892:	6013      	str	r3, [r2, #0]
 8008894:	0030      	movs	r0, r6
 8008896:	f000 f854 	bl	8008942 <__malloc_unlock>
 800889a:	0020      	movs	r0, r4
 800889c:	2207      	movs	r2, #7
 800889e:	300b      	adds	r0, #11
 80088a0:	1d23      	adds	r3, r4, #4
 80088a2:	4390      	bics	r0, r2
 80088a4:	1ac3      	subs	r3, r0, r3
 80088a6:	d0e7      	beq.n	8008878 <_malloc_r+0x58>
 80088a8:	425a      	negs	r2, r3
 80088aa:	50e2      	str	r2, [r4, r3]
 80088ac:	e7e4      	b.n	8008878 <_malloc_r+0x58>
 80088ae:	6063      	str	r3, [r4, #4]
 80088b0:	000c      	movs	r4, r1
 80088b2:	e7ef      	b.n	8008894 <_malloc_r+0x74>
 80088b4:	000c      	movs	r4, r1
 80088b6:	6849      	ldr	r1, [r1, #4]
 80088b8:	e7c3      	b.n	8008842 <_malloc_r+0x22>
 80088ba:	2303      	movs	r3, #3
 80088bc:	1cc4      	adds	r4, r0, #3
 80088be:	439c      	bics	r4, r3
 80088c0:	42a0      	cmp	r0, r4
 80088c2:	d0e1      	beq.n	8008888 <_malloc_r+0x68>
 80088c4:	1a21      	subs	r1, r4, r0
 80088c6:	0030      	movs	r0, r6
 80088c8:	f000 f808 	bl	80088dc <_sbrk_r>
 80088cc:	1c43      	adds	r3, r0, #1
 80088ce:	d1db      	bne.n	8008888 <_malloc_r+0x68>
 80088d0:	e7c7      	b.n	8008862 <_malloc_r+0x42>
 80088d2:	46c0      	nop			; (mov r8, r8)
 80088d4:	20000130 	.word	0x20000130
 80088d8:	20000134 	.word	0x20000134

080088dc <_sbrk_r>:
 80088dc:	2300      	movs	r3, #0
 80088de:	b570      	push	{r4, r5, r6, lr}
 80088e0:	4c06      	ldr	r4, [pc, #24]	; (80088fc <_sbrk_r+0x20>)
 80088e2:	0005      	movs	r5, r0
 80088e4:	0008      	movs	r0, r1
 80088e6:	6023      	str	r3, [r4, #0]
 80088e8:	f7fb fc20 	bl	800412c <_sbrk>
 80088ec:	1c43      	adds	r3, r0, #1
 80088ee:	d103      	bne.n	80088f8 <_sbrk_r+0x1c>
 80088f0:	6823      	ldr	r3, [r4, #0]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d000      	beq.n	80088f8 <_sbrk_r+0x1c>
 80088f6:	602b      	str	r3, [r5, #0]
 80088f8:	bd70      	pop	{r4, r5, r6, pc}
 80088fa:	46c0      	nop			; (mov r8, r8)
 80088fc:	200003a8 	.word	0x200003a8

08008900 <siprintf>:
 8008900:	b40e      	push	{r1, r2, r3}
 8008902:	b500      	push	{lr}
 8008904:	490b      	ldr	r1, [pc, #44]	; (8008934 <siprintf+0x34>)
 8008906:	b09c      	sub	sp, #112	; 0x70
 8008908:	ab1d      	add	r3, sp, #116	; 0x74
 800890a:	9002      	str	r0, [sp, #8]
 800890c:	9006      	str	r0, [sp, #24]
 800890e:	9107      	str	r1, [sp, #28]
 8008910:	9104      	str	r1, [sp, #16]
 8008912:	4809      	ldr	r0, [pc, #36]	; (8008938 <siprintf+0x38>)
 8008914:	4909      	ldr	r1, [pc, #36]	; (800893c <siprintf+0x3c>)
 8008916:	cb04      	ldmia	r3!, {r2}
 8008918:	9105      	str	r1, [sp, #20]
 800891a:	6800      	ldr	r0, [r0, #0]
 800891c:	a902      	add	r1, sp, #8
 800891e:	9301      	str	r3, [sp, #4]
 8008920:	f000 f872 	bl	8008a08 <_svfiprintf_r>
 8008924:	2300      	movs	r3, #0
 8008926:	9a02      	ldr	r2, [sp, #8]
 8008928:	7013      	strb	r3, [r2, #0]
 800892a:	b01c      	add	sp, #112	; 0x70
 800892c:	bc08      	pop	{r3}
 800892e:	b003      	add	sp, #12
 8008930:	4718      	bx	r3
 8008932:	46c0      	nop			; (mov r8, r8)
 8008934:	7fffffff 	.word	0x7fffffff
 8008938:	20000068 	.word	0x20000068
 800893c:	ffff0208 	.word	0xffff0208

08008940 <__malloc_lock>:
 8008940:	4770      	bx	lr

08008942 <__malloc_unlock>:
 8008942:	4770      	bx	lr

08008944 <__ssputs_r>:
 8008944:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008946:	688e      	ldr	r6, [r1, #8]
 8008948:	b085      	sub	sp, #20
 800894a:	0007      	movs	r7, r0
 800894c:	000c      	movs	r4, r1
 800894e:	9203      	str	r2, [sp, #12]
 8008950:	9301      	str	r3, [sp, #4]
 8008952:	429e      	cmp	r6, r3
 8008954:	d83c      	bhi.n	80089d0 <__ssputs_r+0x8c>
 8008956:	2390      	movs	r3, #144	; 0x90
 8008958:	898a      	ldrh	r2, [r1, #12]
 800895a:	00db      	lsls	r3, r3, #3
 800895c:	421a      	tst	r2, r3
 800895e:	d034      	beq.n	80089ca <__ssputs_r+0x86>
 8008960:	2503      	movs	r5, #3
 8008962:	6909      	ldr	r1, [r1, #16]
 8008964:	6823      	ldr	r3, [r4, #0]
 8008966:	1a5b      	subs	r3, r3, r1
 8008968:	9302      	str	r3, [sp, #8]
 800896a:	6963      	ldr	r3, [r4, #20]
 800896c:	9802      	ldr	r0, [sp, #8]
 800896e:	435d      	muls	r5, r3
 8008970:	0feb      	lsrs	r3, r5, #31
 8008972:	195d      	adds	r5, r3, r5
 8008974:	9b01      	ldr	r3, [sp, #4]
 8008976:	106d      	asrs	r5, r5, #1
 8008978:	3301      	adds	r3, #1
 800897a:	181b      	adds	r3, r3, r0
 800897c:	42ab      	cmp	r3, r5
 800897e:	d900      	bls.n	8008982 <__ssputs_r+0x3e>
 8008980:	001d      	movs	r5, r3
 8008982:	0553      	lsls	r3, r2, #21
 8008984:	d532      	bpl.n	80089ec <__ssputs_r+0xa8>
 8008986:	0029      	movs	r1, r5
 8008988:	0038      	movs	r0, r7
 800898a:	f7ff ff49 	bl	8008820 <_malloc_r>
 800898e:	1e06      	subs	r6, r0, #0
 8008990:	d109      	bne.n	80089a6 <__ssputs_r+0x62>
 8008992:	230c      	movs	r3, #12
 8008994:	603b      	str	r3, [r7, #0]
 8008996:	2340      	movs	r3, #64	; 0x40
 8008998:	2001      	movs	r0, #1
 800899a:	89a2      	ldrh	r2, [r4, #12]
 800899c:	4240      	negs	r0, r0
 800899e:	4313      	orrs	r3, r2
 80089a0:	81a3      	strh	r3, [r4, #12]
 80089a2:	b005      	add	sp, #20
 80089a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80089a6:	9a02      	ldr	r2, [sp, #8]
 80089a8:	6921      	ldr	r1, [r4, #16]
 80089aa:	f7ff ff19 	bl	80087e0 <memcpy>
 80089ae:	89a3      	ldrh	r3, [r4, #12]
 80089b0:	4a14      	ldr	r2, [pc, #80]	; (8008a04 <__ssputs_r+0xc0>)
 80089b2:	401a      	ands	r2, r3
 80089b4:	2380      	movs	r3, #128	; 0x80
 80089b6:	4313      	orrs	r3, r2
 80089b8:	81a3      	strh	r3, [r4, #12]
 80089ba:	9b02      	ldr	r3, [sp, #8]
 80089bc:	6126      	str	r6, [r4, #16]
 80089be:	18f6      	adds	r6, r6, r3
 80089c0:	6026      	str	r6, [r4, #0]
 80089c2:	6165      	str	r5, [r4, #20]
 80089c4:	9e01      	ldr	r6, [sp, #4]
 80089c6:	1aed      	subs	r5, r5, r3
 80089c8:	60a5      	str	r5, [r4, #8]
 80089ca:	9b01      	ldr	r3, [sp, #4]
 80089cc:	429e      	cmp	r6, r3
 80089ce:	d900      	bls.n	80089d2 <__ssputs_r+0x8e>
 80089d0:	9e01      	ldr	r6, [sp, #4]
 80089d2:	0032      	movs	r2, r6
 80089d4:	9903      	ldr	r1, [sp, #12]
 80089d6:	6820      	ldr	r0, [r4, #0]
 80089d8:	f000 fa95 	bl	8008f06 <memmove>
 80089dc:	68a3      	ldr	r3, [r4, #8]
 80089de:	2000      	movs	r0, #0
 80089e0:	1b9b      	subs	r3, r3, r6
 80089e2:	60a3      	str	r3, [r4, #8]
 80089e4:	6823      	ldr	r3, [r4, #0]
 80089e6:	199e      	adds	r6, r3, r6
 80089e8:	6026      	str	r6, [r4, #0]
 80089ea:	e7da      	b.n	80089a2 <__ssputs_r+0x5e>
 80089ec:	002a      	movs	r2, r5
 80089ee:	0038      	movs	r0, r7
 80089f0:	f000 fae6 	bl	8008fc0 <_realloc_r>
 80089f4:	1e06      	subs	r6, r0, #0
 80089f6:	d1e0      	bne.n	80089ba <__ssputs_r+0x76>
 80089f8:	6921      	ldr	r1, [r4, #16]
 80089fa:	0038      	movs	r0, r7
 80089fc:	f000 fa96 	bl	8008f2c <_free_r>
 8008a00:	e7c7      	b.n	8008992 <__ssputs_r+0x4e>
 8008a02:	46c0      	nop			; (mov r8, r8)
 8008a04:	fffffb7f 	.word	0xfffffb7f

08008a08 <_svfiprintf_r>:
 8008a08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a0a:	b0a1      	sub	sp, #132	; 0x84
 8008a0c:	9003      	str	r0, [sp, #12]
 8008a0e:	001d      	movs	r5, r3
 8008a10:	898b      	ldrh	r3, [r1, #12]
 8008a12:	000f      	movs	r7, r1
 8008a14:	0016      	movs	r6, r2
 8008a16:	061b      	lsls	r3, r3, #24
 8008a18:	d511      	bpl.n	8008a3e <_svfiprintf_r+0x36>
 8008a1a:	690b      	ldr	r3, [r1, #16]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d10e      	bne.n	8008a3e <_svfiprintf_r+0x36>
 8008a20:	2140      	movs	r1, #64	; 0x40
 8008a22:	f7ff fefd 	bl	8008820 <_malloc_r>
 8008a26:	6038      	str	r0, [r7, #0]
 8008a28:	6138      	str	r0, [r7, #16]
 8008a2a:	2800      	cmp	r0, #0
 8008a2c:	d105      	bne.n	8008a3a <_svfiprintf_r+0x32>
 8008a2e:	230c      	movs	r3, #12
 8008a30:	9a03      	ldr	r2, [sp, #12]
 8008a32:	3801      	subs	r0, #1
 8008a34:	6013      	str	r3, [r2, #0]
 8008a36:	b021      	add	sp, #132	; 0x84
 8008a38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a3a:	2340      	movs	r3, #64	; 0x40
 8008a3c:	617b      	str	r3, [r7, #20]
 8008a3e:	2300      	movs	r3, #0
 8008a40:	ac08      	add	r4, sp, #32
 8008a42:	6163      	str	r3, [r4, #20]
 8008a44:	3320      	adds	r3, #32
 8008a46:	7663      	strb	r3, [r4, #25]
 8008a48:	3310      	adds	r3, #16
 8008a4a:	76a3      	strb	r3, [r4, #26]
 8008a4c:	9507      	str	r5, [sp, #28]
 8008a4e:	0035      	movs	r5, r6
 8008a50:	782b      	ldrb	r3, [r5, #0]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d001      	beq.n	8008a5a <_svfiprintf_r+0x52>
 8008a56:	2b25      	cmp	r3, #37	; 0x25
 8008a58:	d146      	bne.n	8008ae8 <_svfiprintf_r+0xe0>
 8008a5a:	1bab      	subs	r3, r5, r6
 8008a5c:	9305      	str	r3, [sp, #20]
 8008a5e:	d00c      	beq.n	8008a7a <_svfiprintf_r+0x72>
 8008a60:	0032      	movs	r2, r6
 8008a62:	0039      	movs	r1, r7
 8008a64:	9803      	ldr	r0, [sp, #12]
 8008a66:	f7ff ff6d 	bl	8008944 <__ssputs_r>
 8008a6a:	1c43      	adds	r3, r0, #1
 8008a6c:	d100      	bne.n	8008a70 <_svfiprintf_r+0x68>
 8008a6e:	e0ae      	b.n	8008bce <_svfiprintf_r+0x1c6>
 8008a70:	6962      	ldr	r2, [r4, #20]
 8008a72:	9b05      	ldr	r3, [sp, #20]
 8008a74:	4694      	mov	ip, r2
 8008a76:	4463      	add	r3, ip
 8008a78:	6163      	str	r3, [r4, #20]
 8008a7a:	782b      	ldrb	r3, [r5, #0]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d100      	bne.n	8008a82 <_svfiprintf_r+0x7a>
 8008a80:	e0a5      	b.n	8008bce <_svfiprintf_r+0x1c6>
 8008a82:	2201      	movs	r2, #1
 8008a84:	2300      	movs	r3, #0
 8008a86:	4252      	negs	r2, r2
 8008a88:	6062      	str	r2, [r4, #4]
 8008a8a:	a904      	add	r1, sp, #16
 8008a8c:	3254      	adds	r2, #84	; 0x54
 8008a8e:	1852      	adds	r2, r2, r1
 8008a90:	1c6e      	adds	r6, r5, #1
 8008a92:	6023      	str	r3, [r4, #0]
 8008a94:	60e3      	str	r3, [r4, #12]
 8008a96:	60a3      	str	r3, [r4, #8]
 8008a98:	7013      	strb	r3, [r2, #0]
 8008a9a:	65a3      	str	r3, [r4, #88]	; 0x58
 8008a9c:	7831      	ldrb	r1, [r6, #0]
 8008a9e:	2205      	movs	r2, #5
 8008aa0:	4853      	ldr	r0, [pc, #332]	; (8008bf0 <_svfiprintf_r+0x1e8>)
 8008aa2:	f000 fa25 	bl	8008ef0 <memchr>
 8008aa6:	1c75      	adds	r5, r6, #1
 8008aa8:	2800      	cmp	r0, #0
 8008aaa:	d11f      	bne.n	8008aec <_svfiprintf_r+0xe4>
 8008aac:	6822      	ldr	r2, [r4, #0]
 8008aae:	06d3      	lsls	r3, r2, #27
 8008ab0:	d504      	bpl.n	8008abc <_svfiprintf_r+0xb4>
 8008ab2:	2353      	movs	r3, #83	; 0x53
 8008ab4:	a904      	add	r1, sp, #16
 8008ab6:	185b      	adds	r3, r3, r1
 8008ab8:	2120      	movs	r1, #32
 8008aba:	7019      	strb	r1, [r3, #0]
 8008abc:	0713      	lsls	r3, r2, #28
 8008abe:	d504      	bpl.n	8008aca <_svfiprintf_r+0xc2>
 8008ac0:	2353      	movs	r3, #83	; 0x53
 8008ac2:	a904      	add	r1, sp, #16
 8008ac4:	185b      	adds	r3, r3, r1
 8008ac6:	212b      	movs	r1, #43	; 0x2b
 8008ac8:	7019      	strb	r1, [r3, #0]
 8008aca:	7833      	ldrb	r3, [r6, #0]
 8008acc:	2b2a      	cmp	r3, #42	; 0x2a
 8008ace:	d016      	beq.n	8008afe <_svfiprintf_r+0xf6>
 8008ad0:	0035      	movs	r5, r6
 8008ad2:	2100      	movs	r1, #0
 8008ad4:	200a      	movs	r0, #10
 8008ad6:	68e3      	ldr	r3, [r4, #12]
 8008ad8:	782a      	ldrb	r2, [r5, #0]
 8008ada:	1c6e      	adds	r6, r5, #1
 8008adc:	3a30      	subs	r2, #48	; 0x30
 8008ade:	2a09      	cmp	r2, #9
 8008ae0:	d94e      	bls.n	8008b80 <_svfiprintf_r+0x178>
 8008ae2:	2900      	cmp	r1, #0
 8008ae4:	d018      	beq.n	8008b18 <_svfiprintf_r+0x110>
 8008ae6:	e010      	b.n	8008b0a <_svfiprintf_r+0x102>
 8008ae8:	3501      	adds	r5, #1
 8008aea:	e7b1      	b.n	8008a50 <_svfiprintf_r+0x48>
 8008aec:	4b40      	ldr	r3, [pc, #256]	; (8008bf0 <_svfiprintf_r+0x1e8>)
 8008aee:	6822      	ldr	r2, [r4, #0]
 8008af0:	1ac0      	subs	r0, r0, r3
 8008af2:	2301      	movs	r3, #1
 8008af4:	4083      	lsls	r3, r0
 8008af6:	4313      	orrs	r3, r2
 8008af8:	6023      	str	r3, [r4, #0]
 8008afa:	002e      	movs	r6, r5
 8008afc:	e7ce      	b.n	8008a9c <_svfiprintf_r+0x94>
 8008afe:	9b07      	ldr	r3, [sp, #28]
 8008b00:	1d19      	adds	r1, r3, #4
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	9107      	str	r1, [sp, #28]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	db01      	blt.n	8008b0e <_svfiprintf_r+0x106>
 8008b0a:	930b      	str	r3, [sp, #44]	; 0x2c
 8008b0c:	e004      	b.n	8008b18 <_svfiprintf_r+0x110>
 8008b0e:	425b      	negs	r3, r3
 8008b10:	60e3      	str	r3, [r4, #12]
 8008b12:	2302      	movs	r3, #2
 8008b14:	4313      	orrs	r3, r2
 8008b16:	6023      	str	r3, [r4, #0]
 8008b18:	782b      	ldrb	r3, [r5, #0]
 8008b1a:	2b2e      	cmp	r3, #46	; 0x2e
 8008b1c:	d10a      	bne.n	8008b34 <_svfiprintf_r+0x12c>
 8008b1e:	786b      	ldrb	r3, [r5, #1]
 8008b20:	2b2a      	cmp	r3, #42	; 0x2a
 8008b22:	d135      	bne.n	8008b90 <_svfiprintf_r+0x188>
 8008b24:	9b07      	ldr	r3, [sp, #28]
 8008b26:	3502      	adds	r5, #2
 8008b28:	1d1a      	adds	r2, r3, #4
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	9207      	str	r2, [sp, #28]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	db2b      	blt.n	8008b8a <_svfiprintf_r+0x182>
 8008b32:	9309      	str	r3, [sp, #36]	; 0x24
 8008b34:	4e2f      	ldr	r6, [pc, #188]	; (8008bf4 <_svfiprintf_r+0x1ec>)
 8008b36:	7829      	ldrb	r1, [r5, #0]
 8008b38:	2203      	movs	r2, #3
 8008b3a:	0030      	movs	r0, r6
 8008b3c:	f000 f9d8 	bl	8008ef0 <memchr>
 8008b40:	2800      	cmp	r0, #0
 8008b42:	d006      	beq.n	8008b52 <_svfiprintf_r+0x14a>
 8008b44:	2340      	movs	r3, #64	; 0x40
 8008b46:	1b80      	subs	r0, r0, r6
 8008b48:	4083      	lsls	r3, r0
 8008b4a:	6822      	ldr	r2, [r4, #0]
 8008b4c:	3501      	adds	r5, #1
 8008b4e:	4313      	orrs	r3, r2
 8008b50:	6023      	str	r3, [r4, #0]
 8008b52:	7829      	ldrb	r1, [r5, #0]
 8008b54:	2206      	movs	r2, #6
 8008b56:	4828      	ldr	r0, [pc, #160]	; (8008bf8 <_svfiprintf_r+0x1f0>)
 8008b58:	1c6e      	adds	r6, r5, #1
 8008b5a:	7621      	strb	r1, [r4, #24]
 8008b5c:	f000 f9c8 	bl	8008ef0 <memchr>
 8008b60:	2800      	cmp	r0, #0
 8008b62:	d03c      	beq.n	8008bde <_svfiprintf_r+0x1d6>
 8008b64:	4b25      	ldr	r3, [pc, #148]	; (8008bfc <_svfiprintf_r+0x1f4>)
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d125      	bne.n	8008bb6 <_svfiprintf_r+0x1ae>
 8008b6a:	2207      	movs	r2, #7
 8008b6c:	9b07      	ldr	r3, [sp, #28]
 8008b6e:	3307      	adds	r3, #7
 8008b70:	4393      	bics	r3, r2
 8008b72:	3308      	adds	r3, #8
 8008b74:	9307      	str	r3, [sp, #28]
 8008b76:	6963      	ldr	r3, [r4, #20]
 8008b78:	9a04      	ldr	r2, [sp, #16]
 8008b7a:	189b      	adds	r3, r3, r2
 8008b7c:	6163      	str	r3, [r4, #20]
 8008b7e:	e766      	b.n	8008a4e <_svfiprintf_r+0x46>
 8008b80:	4343      	muls	r3, r0
 8008b82:	2101      	movs	r1, #1
 8008b84:	189b      	adds	r3, r3, r2
 8008b86:	0035      	movs	r5, r6
 8008b88:	e7a6      	b.n	8008ad8 <_svfiprintf_r+0xd0>
 8008b8a:	2301      	movs	r3, #1
 8008b8c:	425b      	negs	r3, r3
 8008b8e:	e7d0      	b.n	8008b32 <_svfiprintf_r+0x12a>
 8008b90:	2300      	movs	r3, #0
 8008b92:	200a      	movs	r0, #10
 8008b94:	001a      	movs	r2, r3
 8008b96:	3501      	adds	r5, #1
 8008b98:	6063      	str	r3, [r4, #4]
 8008b9a:	7829      	ldrb	r1, [r5, #0]
 8008b9c:	1c6e      	adds	r6, r5, #1
 8008b9e:	3930      	subs	r1, #48	; 0x30
 8008ba0:	2909      	cmp	r1, #9
 8008ba2:	d903      	bls.n	8008bac <_svfiprintf_r+0x1a4>
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d0c5      	beq.n	8008b34 <_svfiprintf_r+0x12c>
 8008ba8:	9209      	str	r2, [sp, #36]	; 0x24
 8008baa:	e7c3      	b.n	8008b34 <_svfiprintf_r+0x12c>
 8008bac:	4342      	muls	r2, r0
 8008bae:	2301      	movs	r3, #1
 8008bb0:	1852      	adds	r2, r2, r1
 8008bb2:	0035      	movs	r5, r6
 8008bb4:	e7f1      	b.n	8008b9a <_svfiprintf_r+0x192>
 8008bb6:	ab07      	add	r3, sp, #28
 8008bb8:	9300      	str	r3, [sp, #0]
 8008bba:	003a      	movs	r2, r7
 8008bbc:	4b10      	ldr	r3, [pc, #64]	; (8008c00 <_svfiprintf_r+0x1f8>)
 8008bbe:	0021      	movs	r1, r4
 8008bc0:	9803      	ldr	r0, [sp, #12]
 8008bc2:	e000      	b.n	8008bc6 <_svfiprintf_r+0x1be>
 8008bc4:	bf00      	nop
 8008bc6:	9004      	str	r0, [sp, #16]
 8008bc8:	9b04      	ldr	r3, [sp, #16]
 8008bca:	3301      	adds	r3, #1
 8008bcc:	d1d3      	bne.n	8008b76 <_svfiprintf_r+0x16e>
 8008bce:	89bb      	ldrh	r3, [r7, #12]
 8008bd0:	980d      	ldr	r0, [sp, #52]	; 0x34
 8008bd2:	065b      	lsls	r3, r3, #25
 8008bd4:	d400      	bmi.n	8008bd8 <_svfiprintf_r+0x1d0>
 8008bd6:	e72e      	b.n	8008a36 <_svfiprintf_r+0x2e>
 8008bd8:	2001      	movs	r0, #1
 8008bda:	4240      	negs	r0, r0
 8008bdc:	e72b      	b.n	8008a36 <_svfiprintf_r+0x2e>
 8008bde:	ab07      	add	r3, sp, #28
 8008be0:	9300      	str	r3, [sp, #0]
 8008be2:	003a      	movs	r2, r7
 8008be4:	4b06      	ldr	r3, [pc, #24]	; (8008c00 <_svfiprintf_r+0x1f8>)
 8008be6:	0021      	movs	r1, r4
 8008be8:	9803      	ldr	r0, [sp, #12]
 8008bea:	f000 f879 	bl	8008ce0 <_printf_i>
 8008bee:	e7ea      	b.n	8008bc6 <_svfiprintf_r+0x1be>
 8008bf0:	08009804 	.word	0x08009804
 8008bf4:	0800980a 	.word	0x0800980a
 8008bf8:	0800980e 	.word	0x0800980e
 8008bfc:	00000000 	.word	0x00000000
 8008c00:	08008945 	.word	0x08008945

08008c04 <_printf_common>:
 8008c04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008c06:	0015      	movs	r5, r2
 8008c08:	9301      	str	r3, [sp, #4]
 8008c0a:	688a      	ldr	r2, [r1, #8]
 8008c0c:	690b      	ldr	r3, [r1, #16]
 8008c0e:	9000      	str	r0, [sp, #0]
 8008c10:	000c      	movs	r4, r1
 8008c12:	4293      	cmp	r3, r2
 8008c14:	da00      	bge.n	8008c18 <_printf_common+0x14>
 8008c16:	0013      	movs	r3, r2
 8008c18:	0022      	movs	r2, r4
 8008c1a:	602b      	str	r3, [r5, #0]
 8008c1c:	3243      	adds	r2, #67	; 0x43
 8008c1e:	7812      	ldrb	r2, [r2, #0]
 8008c20:	2a00      	cmp	r2, #0
 8008c22:	d001      	beq.n	8008c28 <_printf_common+0x24>
 8008c24:	3301      	adds	r3, #1
 8008c26:	602b      	str	r3, [r5, #0]
 8008c28:	6823      	ldr	r3, [r4, #0]
 8008c2a:	069b      	lsls	r3, r3, #26
 8008c2c:	d502      	bpl.n	8008c34 <_printf_common+0x30>
 8008c2e:	682b      	ldr	r3, [r5, #0]
 8008c30:	3302      	adds	r3, #2
 8008c32:	602b      	str	r3, [r5, #0]
 8008c34:	2706      	movs	r7, #6
 8008c36:	6823      	ldr	r3, [r4, #0]
 8008c38:	401f      	ands	r7, r3
 8008c3a:	d027      	beq.n	8008c8c <_printf_common+0x88>
 8008c3c:	0023      	movs	r3, r4
 8008c3e:	3343      	adds	r3, #67	; 0x43
 8008c40:	781b      	ldrb	r3, [r3, #0]
 8008c42:	1e5a      	subs	r2, r3, #1
 8008c44:	4193      	sbcs	r3, r2
 8008c46:	6822      	ldr	r2, [r4, #0]
 8008c48:	0692      	lsls	r2, r2, #26
 8008c4a:	d430      	bmi.n	8008cae <_printf_common+0xaa>
 8008c4c:	0022      	movs	r2, r4
 8008c4e:	9901      	ldr	r1, [sp, #4]
 8008c50:	3243      	adds	r2, #67	; 0x43
 8008c52:	9800      	ldr	r0, [sp, #0]
 8008c54:	9e08      	ldr	r6, [sp, #32]
 8008c56:	47b0      	blx	r6
 8008c58:	1c43      	adds	r3, r0, #1
 8008c5a:	d025      	beq.n	8008ca8 <_printf_common+0xa4>
 8008c5c:	2306      	movs	r3, #6
 8008c5e:	6820      	ldr	r0, [r4, #0]
 8008c60:	682a      	ldr	r2, [r5, #0]
 8008c62:	68e1      	ldr	r1, [r4, #12]
 8008c64:	4003      	ands	r3, r0
 8008c66:	2500      	movs	r5, #0
 8008c68:	2b04      	cmp	r3, #4
 8008c6a:	d103      	bne.n	8008c74 <_printf_common+0x70>
 8008c6c:	1a8d      	subs	r5, r1, r2
 8008c6e:	43eb      	mvns	r3, r5
 8008c70:	17db      	asrs	r3, r3, #31
 8008c72:	401d      	ands	r5, r3
 8008c74:	68a3      	ldr	r3, [r4, #8]
 8008c76:	6922      	ldr	r2, [r4, #16]
 8008c78:	4293      	cmp	r3, r2
 8008c7a:	dd01      	ble.n	8008c80 <_printf_common+0x7c>
 8008c7c:	1a9b      	subs	r3, r3, r2
 8008c7e:	18ed      	adds	r5, r5, r3
 8008c80:	2700      	movs	r7, #0
 8008c82:	42bd      	cmp	r5, r7
 8008c84:	d120      	bne.n	8008cc8 <_printf_common+0xc4>
 8008c86:	2000      	movs	r0, #0
 8008c88:	e010      	b.n	8008cac <_printf_common+0xa8>
 8008c8a:	3701      	adds	r7, #1
 8008c8c:	68e3      	ldr	r3, [r4, #12]
 8008c8e:	682a      	ldr	r2, [r5, #0]
 8008c90:	1a9b      	subs	r3, r3, r2
 8008c92:	42bb      	cmp	r3, r7
 8008c94:	ddd2      	ble.n	8008c3c <_printf_common+0x38>
 8008c96:	0022      	movs	r2, r4
 8008c98:	2301      	movs	r3, #1
 8008c9a:	3219      	adds	r2, #25
 8008c9c:	9901      	ldr	r1, [sp, #4]
 8008c9e:	9800      	ldr	r0, [sp, #0]
 8008ca0:	9e08      	ldr	r6, [sp, #32]
 8008ca2:	47b0      	blx	r6
 8008ca4:	1c43      	adds	r3, r0, #1
 8008ca6:	d1f0      	bne.n	8008c8a <_printf_common+0x86>
 8008ca8:	2001      	movs	r0, #1
 8008caa:	4240      	negs	r0, r0
 8008cac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008cae:	2030      	movs	r0, #48	; 0x30
 8008cb0:	18e1      	adds	r1, r4, r3
 8008cb2:	3143      	adds	r1, #67	; 0x43
 8008cb4:	7008      	strb	r0, [r1, #0]
 8008cb6:	0021      	movs	r1, r4
 8008cb8:	1c5a      	adds	r2, r3, #1
 8008cba:	3145      	adds	r1, #69	; 0x45
 8008cbc:	7809      	ldrb	r1, [r1, #0]
 8008cbe:	18a2      	adds	r2, r4, r2
 8008cc0:	3243      	adds	r2, #67	; 0x43
 8008cc2:	3302      	adds	r3, #2
 8008cc4:	7011      	strb	r1, [r2, #0]
 8008cc6:	e7c1      	b.n	8008c4c <_printf_common+0x48>
 8008cc8:	0022      	movs	r2, r4
 8008cca:	2301      	movs	r3, #1
 8008ccc:	321a      	adds	r2, #26
 8008cce:	9901      	ldr	r1, [sp, #4]
 8008cd0:	9800      	ldr	r0, [sp, #0]
 8008cd2:	9e08      	ldr	r6, [sp, #32]
 8008cd4:	47b0      	blx	r6
 8008cd6:	1c43      	adds	r3, r0, #1
 8008cd8:	d0e6      	beq.n	8008ca8 <_printf_common+0xa4>
 8008cda:	3701      	adds	r7, #1
 8008cdc:	e7d1      	b.n	8008c82 <_printf_common+0x7e>
	...

08008ce0 <_printf_i>:
 8008ce0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008ce2:	b089      	sub	sp, #36	; 0x24
 8008ce4:	9204      	str	r2, [sp, #16]
 8008ce6:	000a      	movs	r2, r1
 8008ce8:	3243      	adds	r2, #67	; 0x43
 8008cea:	9305      	str	r3, [sp, #20]
 8008cec:	9003      	str	r0, [sp, #12]
 8008cee:	9202      	str	r2, [sp, #8]
 8008cf0:	7e0a      	ldrb	r2, [r1, #24]
 8008cf2:	000c      	movs	r4, r1
 8008cf4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008cf6:	2a6e      	cmp	r2, #110	; 0x6e
 8008cf8:	d100      	bne.n	8008cfc <_printf_i+0x1c>
 8008cfa:	e086      	b.n	8008e0a <_printf_i+0x12a>
 8008cfc:	d81f      	bhi.n	8008d3e <_printf_i+0x5e>
 8008cfe:	2a63      	cmp	r2, #99	; 0x63
 8008d00:	d033      	beq.n	8008d6a <_printf_i+0x8a>
 8008d02:	d808      	bhi.n	8008d16 <_printf_i+0x36>
 8008d04:	2a00      	cmp	r2, #0
 8008d06:	d100      	bne.n	8008d0a <_printf_i+0x2a>
 8008d08:	e08c      	b.n	8008e24 <_printf_i+0x144>
 8008d0a:	2a58      	cmp	r2, #88	; 0x58
 8008d0c:	d04d      	beq.n	8008daa <_printf_i+0xca>
 8008d0e:	0025      	movs	r5, r4
 8008d10:	3542      	adds	r5, #66	; 0x42
 8008d12:	702a      	strb	r2, [r5, #0]
 8008d14:	e030      	b.n	8008d78 <_printf_i+0x98>
 8008d16:	2a64      	cmp	r2, #100	; 0x64
 8008d18:	d001      	beq.n	8008d1e <_printf_i+0x3e>
 8008d1a:	2a69      	cmp	r2, #105	; 0x69
 8008d1c:	d1f7      	bne.n	8008d0e <_printf_i+0x2e>
 8008d1e:	6819      	ldr	r1, [r3, #0]
 8008d20:	6825      	ldr	r5, [r4, #0]
 8008d22:	1d0a      	adds	r2, r1, #4
 8008d24:	0628      	lsls	r0, r5, #24
 8008d26:	d529      	bpl.n	8008d7c <_printf_i+0x9c>
 8008d28:	6808      	ldr	r0, [r1, #0]
 8008d2a:	601a      	str	r2, [r3, #0]
 8008d2c:	2800      	cmp	r0, #0
 8008d2e:	da03      	bge.n	8008d38 <_printf_i+0x58>
 8008d30:	232d      	movs	r3, #45	; 0x2d
 8008d32:	9a02      	ldr	r2, [sp, #8]
 8008d34:	4240      	negs	r0, r0
 8008d36:	7013      	strb	r3, [r2, #0]
 8008d38:	4e6b      	ldr	r6, [pc, #428]	; (8008ee8 <_printf_i+0x208>)
 8008d3a:	270a      	movs	r7, #10
 8008d3c:	e04f      	b.n	8008dde <_printf_i+0xfe>
 8008d3e:	2a73      	cmp	r2, #115	; 0x73
 8008d40:	d074      	beq.n	8008e2c <_printf_i+0x14c>
 8008d42:	d808      	bhi.n	8008d56 <_printf_i+0x76>
 8008d44:	2a6f      	cmp	r2, #111	; 0x6f
 8008d46:	d01f      	beq.n	8008d88 <_printf_i+0xa8>
 8008d48:	2a70      	cmp	r2, #112	; 0x70
 8008d4a:	d1e0      	bne.n	8008d0e <_printf_i+0x2e>
 8008d4c:	2220      	movs	r2, #32
 8008d4e:	6809      	ldr	r1, [r1, #0]
 8008d50:	430a      	orrs	r2, r1
 8008d52:	6022      	str	r2, [r4, #0]
 8008d54:	e003      	b.n	8008d5e <_printf_i+0x7e>
 8008d56:	2a75      	cmp	r2, #117	; 0x75
 8008d58:	d016      	beq.n	8008d88 <_printf_i+0xa8>
 8008d5a:	2a78      	cmp	r2, #120	; 0x78
 8008d5c:	d1d7      	bne.n	8008d0e <_printf_i+0x2e>
 8008d5e:	0022      	movs	r2, r4
 8008d60:	2178      	movs	r1, #120	; 0x78
 8008d62:	3245      	adds	r2, #69	; 0x45
 8008d64:	7011      	strb	r1, [r2, #0]
 8008d66:	4e61      	ldr	r6, [pc, #388]	; (8008eec <_printf_i+0x20c>)
 8008d68:	e022      	b.n	8008db0 <_printf_i+0xd0>
 8008d6a:	0025      	movs	r5, r4
 8008d6c:	681a      	ldr	r2, [r3, #0]
 8008d6e:	3542      	adds	r5, #66	; 0x42
 8008d70:	1d11      	adds	r1, r2, #4
 8008d72:	6019      	str	r1, [r3, #0]
 8008d74:	6813      	ldr	r3, [r2, #0]
 8008d76:	702b      	strb	r3, [r5, #0]
 8008d78:	2301      	movs	r3, #1
 8008d7a:	e065      	b.n	8008e48 <_printf_i+0x168>
 8008d7c:	6808      	ldr	r0, [r1, #0]
 8008d7e:	601a      	str	r2, [r3, #0]
 8008d80:	0669      	lsls	r1, r5, #25
 8008d82:	d5d3      	bpl.n	8008d2c <_printf_i+0x4c>
 8008d84:	b200      	sxth	r0, r0
 8008d86:	e7d1      	b.n	8008d2c <_printf_i+0x4c>
 8008d88:	6819      	ldr	r1, [r3, #0]
 8008d8a:	6825      	ldr	r5, [r4, #0]
 8008d8c:	1d08      	adds	r0, r1, #4
 8008d8e:	6018      	str	r0, [r3, #0]
 8008d90:	6808      	ldr	r0, [r1, #0]
 8008d92:	062e      	lsls	r6, r5, #24
 8008d94:	d505      	bpl.n	8008da2 <_printf_i+0xc2>
 8008d96:	4e54      	ldr	r6, [pc, #336]	; (8008ee8 <_printf_i+0x208>)
 8008d98:	2708      	movs	r7, #8
 8008d9a:	2a6f      	cmp	r2, #111	; 0x6f
 8008d9c:	d01b      	beq.n	8008dd6 <_printf_i+0xf6>
 8008d9e:	270a      	movs	r7, #10
 8008da0:	e019      	b.n	8008dd6 <_printf_i+0xf6>
 8008da2:	066d      	lsls	r5, r5, #25
 8008da4:	d5f7      	bpl.n	8008d96 <_printf_i+0xb6>
 8008da6:	b280      	uxth	r0, r0
 8008da8:	e7f5      	b.n	8008d96 <_printf_i+0xb6>
 8008daa:	3145      	adds	r1, #69	; 0x45
 8008dac:	4e4e      	ldr	r6, [pc, #312]	; (8008ee8 <_printf_i+0x208>)
 8008dae:	700a      	strb	r2, [r1, #0]
 8008db0:	6818      	ldr	r0, [r3, #0]
 8008db2:	6822      	ldr	r2, [r4, #0]
 8008db4:	1d01      	adds	r1, r0, #4
 8008db6:	6800      	ldr	r0, [r0, #0]
 8008db8:	6019      	str	r1, [r3, #0]
 8008dba:	0615      	lsls	r5, r2, #24
 8008dbc:	d521      	bpl.n	8008e02 <_printf_i+0x122>
 8008dbe:	07d3      	lsls	r3, r2, #31
 8008dc0:	d502      	bpl.n	8008dc8 <_printf_i+0xe8>
 8008dc2:	2320      	movs	r3, #32
 8008dc4:	431a      	orrs	r2, r3
 8008dc6:	6022      	str	r2, [r4, #0]
 8008dc8:	2710      	movs	r7, #16
 8008dca:	2800      	cmp	r0, #0
 8008dcc:	d103      	bne.n	8008dd6 <_printf_i+0xf6>
 8008dce:	2320      	movs	r3, #32
 8008dd0:	6822      	ldr	r2, [r4, #0]
 8008dd2:	439a      	bics	r2, r3
 8008dd4:	6022      	str	r2, [r4, #0]
 8008dd6:	0023      	movs	r3, r4
 8008dd8:	2200      	movs	r2, #0
 8008dda:	3343      	adds	r3, #67	; 0x43
 8008ddc:	701a      	strb	r2, [r3, #0]
 8008dde:	6863      	ldr	r3, [r4, #4]
 8008de0:	60a3      	str	r3, [r4, #8]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	db58      	blt.n	8008e98 <_printf_i+0x1b8>
 8008de6:	2204      	movs	r2, #4
 8008de8:	6821      	ldr	r1, [r4, #0]
 8008dea:	4391      	bics	r1, r2
 8008dec:	6021      	str	r1, [r4, #0]
 8008dee:	2800      	cmp	r0, #0
 8008df0:	d154      	bne.n	8008e9c <_printf_i+0x1bc>
 8008df2:	9d02      	ldr	r5, [sp, #8]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d05a      	beq.n	8008eae <_printf_i+0x1ce>
 8008df8:	0025      	movs	r5, r4
 8008dfa:	7833      	ldrb	r3, [r6, #0]
 8008dfc:	3542      	adds	r5, #66	; 0x42
 8008dfe:	702b      	strb	r3, [r5, #0]
 8008e00:	e055      	b.n	8008eae <_printf_i+0x1ce>
 8008e02:	0655      	lsls	r5, r2, #25
 8008e04:	d5db      	bpl.n	8008dbe <_printf_i+0xde>
 8008e06:	b280      	uxth	r0, r0
 8008e08:	e7d9      	b.n	8008dbe <_printf_i+0xde>
 8008e0a:	681a      	ldr	r2, [r3, #0]
 8008e0c:	680d      	ldr	r5, [r1, #0]
 8008e0e:	1d10      	adds	r0, r2, #4
 8008e10:	6949      	ldr	r1, [r1, #20]
 8008e12:	6018      	str	r0, [r3, #0]
 8008e14:	6813      	ldr	r3, [r2, #0]
 8008e16:	062e      	lsls	r6, r5, #24
 8008e18:	d501      	bpl.n	8008e1e <_printf_i+0x13e>
 8008e1a:	6019      	str	r1, [r3, #0]
 8008e1c:	e002      	b.n	8008e24 <_printf_i+0x144>
 8008e1e:	066d      	lsls	r5, r5, #25
 8008e20:	d5fb      	bpl.n	8008e1a <_printf_i+0x13a>
 8008e22:	8019      	strh	r1, [r3, #0]
 8008e24:	2300      	movs	r3, #0
 8008e26:	9d02      	ldr	r5, [sp, #8]
 8008e28:	6123      	str	r3, [r4, #16]
 8008e2a:	e04f      	b.n	8008ecc <_printf_i+0x1ec>
 8008e2c:	681a      	ldr	r2, [r3, #0]
 8008e2e:	1d11      	adds	r1, r2, #4
 8008e30:	6019      	str	r1, [r3, #0]
 8008e32:	6815      	ldr	r5, [r2, #0]
 8008e34:	2100      	movs	r1, #0
 8008e36:	6862      	ldr	r2, [r4, #4]
 8008e38:	0028      	movs	r0, r5
 8008e3a:	f000 f859 	bl	8008ef0 <memchr>
 8008e3e:	2800      	cmp	r0, #0
 8008e40:	d001      	beq.n	8008e46 <_printf_i+0x166>
 8008e42:	1b40      	subs	r0, r0, r5
 8008e44:	6060      	str	r0, [r4, #4]
 8008e46:	6863      	ldr	r3, [r4, #4]
 8008e48:	6123      	str	r3, [r4, #16]
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	9a02      	ldr	r2, [sp, #8]
 8008e4e:	7013      	strb	r3, [r2, #0]
 8008e50:	e03c      	b.n	8008ecc <_printf_i+0x1ec>
 8008e52:	6923      	ldr	r3, [r4, #16]
 8008e54:	002a      	movs	r2, r5
 8008e56:	9904      	ldr	r1, [sp, #16]
 8008e58:	9803      	ldr	r0, [sp, #12]
 8008e5a:	9d05      	ldr	r5, [sp, #20]
 8008e5c:	47a8      	blx	r5
 8008e5e:	1c43      	adds	r3, r0, #1
 8008e60:	d03e      	beq.n	8008ee0 <_printf_i+0x200>
 8008e62:	6823      	ldr	r3, [r4, #0]
 8008e64:	079b      	lsls	r3, r3, #30
 8008e66:	d415      	bmi.n	8008e94 <_printf_i+0x1b4>
 8008e68:	9b07      	ldr	r3, [sp, #28]
 8008e6a:	68e0      	ldr	r0, [r4, #12]
 8008e6c:	4298      	cmp	r0, r3
 8008e6e:	da39      	bge.n	8008ee4 <_printf_i+0x204>
 8008e70:	0018      	movs	r0, r3
 8008e72:	e037      	b.n	8008ee4 <_printf_i+0x204>
 8008e74:	0022      	movs	r2, r4
 8008e76:	2301      	movs	r3, #1
 8008e78:	3219      	adds	r2, #25
 8008e7a:	9904      	ldr	r1, [sp, #16]
 8008e7c:	9803      	ldr	r0, [sp, #12]
 8008e7e:	9e05      	ldr	r6, [sp, #20]
 8008e80:	47b0      	blx	r6
 8008e82:	1c43      	adds	r3, r0, #1
 8008e84:	d02c      	beq.n	8008ee0 <_printf_i+0x200>
 8008e86:	3501      	adds	r5, #1
 8008e88:	68e3      	ldr	r3, [r4, #12]
 8008e8a:	9a07      	ldr	r2, [sp, #28]
 8008e8c:	1a9b      	subs	r3, r3, r2
 8008e8e:	42ab      	cmp	r3, r5
 8008e90:	dcf0      	bgt.n	8008e74 <_printf_i+0x194>
 8008e92:	e7e9      	b.n	8008e68 <_printf_i+0x188>
 8008e94:	2500      	movs	r5, #0
 8008e96:	e7f7      	b.n	8008e88 <_printf_i+0x1a8>
 8008e98:	2800      	cmp	r0, #0
 8008e9a:	d0ad      	beq.n	8008df8 <_printf_i+0x118>
 8008e9c:	9d02      	ldr	r5, [sp, #8]
 8008e9e:	0039      	movs	r1, r7
 8008ea0:	f7f7 f9c0 	bl	8000224 <__aeabi_uidivmod>
 8008ea4:	5c73      	ldrb	r3, [r6, r1]
 8008ea6:	3d01      	subs	r5, #1
 8008ea8:	702b      	strb	r3, [r5, #0]
 8008eaa:	2800      	cmp	r0, #0
 8008eac:	d1f7      	bne.n	8008e9e <_printf_i+0x1be>
 8008eae:	2f08      	cmp	r7, #8
 8008eb0:	d109      	bne.n	8008ec6 <_printf_i+0x1e6>
 8008eb2:	6823      	ldr	r3, [r4, #0]
 8008eb4:	07db      	lsls	r3, r3, #31
 8008eb6:	d506      	bpl.n	8008ec6 <_printf_i+0x1e6>
 8008eb8:	6863      	ldr	r3, [r4, #4]
 8008eba:	6922      	ldr	r2, [r4, #16]
 8008ebc:	4293      	cmp	r3, r2
 8008ebe:	dc02      	bgt.n	8008ec6 <_printf_i+0x1e6>
 8008ec0:	2330      	movs	r3, #48	; 0x30
 8008ec2:	3d01      	subs	r5, #1
 8008ec4:	702b      	strb	r3, [r5, #0]
 8008ec6:	9b02      	ldr	r3, [sp, #8]
 8008ec8:	1b5b      	subs	r3, r3, r5
 8008eca:	6123      	str	r3, [r4, #16]
 8008ecc:	9b05      	ldr	r3, [sp, #20]
 8008ece:	aa07      	add	r2, sp, #28
 8008ed0:	9300      	str	r3, [sp, #0]
 8008ed2:	0021      	movs	r1, r4
 8008ed4:	9b04      	ldr	r3, [sp, #16]
 8008ed6:	9803      	ldr	r0, [sp, #12]
 8008ed8:	f7ff fe94 	bl	8008c04 <_printf_common>
 8008edc:	1c43      	adds	r3, r0, #1
 8008ede:	d1b8      	bne.n	8008e52 <_printf_i+0x172>
 8008ee0:	2001      	movs	r0, #1
 8008ee2:	4240      	negs	r0, r0
 8008ee4:	b009      	add	sp, #36	; 0x24
 8008ee6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ee8:	08009815 	.word	0x08009815
 8008eec:	08009826 	.word	0x08009826

08008ef0 <memchr>:
 8008ef0:	b2c9      	uxtb	r1, r1
 8008ef2:	1882      	adds	r2, r0, r2
 8008ef4:	4290      	cmp	r0, r2
 8008ef6:	d101      	bne.n	8008efc <memchr+0xc>
 8008ef8:	2000      	movs	r0, #0
 8008efa:	4770      	bx	lr
 8008efc:	7803      	ldrb	r3, [r0, #0]
 8008efe:	428b      	cmp	r3, r1
 8008f00:	d0fb      	beq.n	8008efa <memchr+0xa>
 8008f02:	3001      	adds	r0, #1
 8008f04:	e7f6      	b.n	8008ef4 <memchr+0x4>

08008f06 <memmove>:
 8008f06:	b510      	push	{r4, lr}
 8008f08:	4288      	cmp	r0, r1
 8008f0a:	d902      	bls.n	8008f12 <memmove+0xc>
 8008f0c:	188b      	adds	r3, r1, r2
 8008f0e:	4298      	cmp	r0, r3
 8008f10:	d303      	bcc.n	8008f1a <memmove+0x14>
 8008f12:	2300      	movs	r3, #0
 8008f14:	e007      	b.n	8008f26 <memmove+0x20>
 8008f16:	5c8b      	ldrb	r3, [r1, r2]
 8008f18:	5483      	strb	r3, [r0, r2]
 8008f1a:	3a01      	subs	r2, #1
 8008f1c:	d2fb      	bcs.n	8008f16 <memmove+0x10>
 8008f1e:	bd10      	pop	{r4, pc}
 8008f20:	5ccc      	ldrb	r4, [r1, r3]
 8008f22:	54c4      	strb	r4, [r0, r3]
 8008f24:	3301      	adds	r3, #1
 8008f26:	429a      	cmp	r2, r3
 8008f28:	d1fa      	bne.n	8008f20 <memmove+0x1a>
 8008f2a:	e7f8      	b.n	8008f1e <memmove+0x18>

08008f2c <_free_r>:
 8008f2c:	b570      	push	{r4, r5, r6, lr}
 8008f2e:	0005      	movs	r5, r0
 8008f30:	2900      	cmp	r1, #0
 8008f32:	d010      	beq.n	8008f56 <_free_r+0x2a>
 8008f34:	1f0c      	subs	r4, r1, #4
 8008f36:	6823      	ldr	r3, [r4, #0]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	da00      	bge.n	8008f3e <_free_r+0x12>
 8008f3c:	18e4      	adds	r4, r4, r3
 8008f3e:	0028      	movs	r0, r5
 8008f40:	f7ff fcfe 	bl	8008940 <__malloc_lock>
 8008f44:	4a1d      	ldr	r2, [pc, #116]	; (8008fbc <_free_r+0x90>)
 8008f46:	6813      	ldr	r3, [r2, #0]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d105      	bne.n	8008f58 <_free_r+0x2c>
 8008f4c:	6063      	str	r3, [r4, #4]
 8008f4e:	6014      	str	r4, [r2, #0]
 8008f50:	0028      	movs	r0, r5
 8008f52:	f7ff fcf6 	bl	8008942 <__malloc_unlock>
 8008f56:	bd70      	pop	{r4, r5, r6, pc}
 8008f58:	42a3      	cmp	r3, r4
 8008f5a:	d909      	bls.n	8008f70 <_free_r+0x44>
 8008f5c:	6821      	ldr	r1, [r4, #0]
 8008f5e:	1860      	adds	r0, r4, r1
 8008f60:	4283      	cmp	r3, r0
 8008f62:	d1f3      	bne.n	8008f4c <_free_r+0x20>
 8008f64:	6818      	ldr	r0, [r3, #0]
 8008f66:	685b      	ldr	r3, [r3, #4]
 8008f68:	1841      	adds	r1, r0, r1
 8008f6a:	6021      	str	r1, [r4, #0]
 8008f6c:	e7ee      	b.n	8008f4c <_free_r+0x20>
 8008f6e:	0013      	movs	r3, r2
 8008f70:	685a      	ldr	r2, [r3, #4]
 8008f72:	2a00      	cmp	r2, #0
 8008f74:	d001      	beq.n	8008f7a <_free_r+0x4e>
 8008f76:	42a2      	cmp	r2, r4
 8008f78:	d9f9      	bls.n	8008f6e <_free_r+0x42>
 8008f7a:	6819      	ldr	r1, [r3, #0]
 8008f7c:	1858      	adds	r0, r3, r1
 8008f7e:	42a0      	cmp	r0, r4
 8008f80:	d10b      	bne.n	8008f9a <_free_r+0x6e>
 8008f82:	6820      	ldr	r0, [r4, #0]
 8008f84:	1809      	adds	r1, r1, r0
 8008f86:	1858      	adds	r0, r3, r1
 8008f88:	6019      	str	r1, [r3, #0]
 8008f8a:	4282      	cmp	r2, r0
 8008f8c:	d1e0      	bne.n	8008f50 <_free_r+0x24>
 8008f8e:	6810      	ldr	r0, [r2, #0]
 8008f90:	6852      	ldr	r2, [r2, #4]
 8008f92:	1841      	adds	r1, r0, r1
 8008f94:	6019      	str	r1, [r3, #0]
 8008f96:	605a      	str	r2, [r3, #4]
 8008f98:	e7da      	b.n	8008f50 <_free_r+0x24>
 8008f9a:	42a0      	cmp	r0, r4
 8008f9c:	d902      	bls.n	8008fa4 <_free_r+0x78>
 8008f9e:	230c      	movs	r3, #12
 8008fa0:	602b      	str	r3, [r5, #0]
 8008fa2:	e7d5      	b.n	8008f50 <_free_r+0x24>
 8008fa4:	6821      	ldr	r1, [r4, #0]
 8008fa6:	1860      	adds	r0, r4, r1
 8008fa8:	4282      	cmp	r2, r0
 8008faa:	d103      	bne.n	8008fb4 <_free_r+0x88>
 8008fac:	6810      	ldr	r0, [r2, #0]
 8008fae:	6852      	ldr	r2, [r2, #4]
 8008fb0:	1841      	adds	r1, r0, r1
 8008fb2:	6021      	str	r1, [r4, #0]
 8008fb4:	6062      	str	r2, [r4, #4]
 8008fb6:	605c      	str	r4, [r3, #4]
 8008fb8:	e7ca      	b.n	8008f50 <_free_r+0x24>
 8008fba:	46c0      	nop			; (mov r8, r8)
 8008fbc:	20000130 	.word	0x20000130

08008fc0 <_realloc_r>:
 8008fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fc2:	0007      	movs	r7, r0
 8008fc4:	000d      	movs	r5, r1
 8008fc6:	0016      	movs	r6, r2
 8008fc8:	2900      	cmp	r1, #0
 8008fca:	d105      	bne.n	8008fd8 <_realloc_r+0x18>
 8008fcc:	0011      	movs	r1, r2
 8008fce:	f7ff fc27 	bl	8008820 <_malloc_r>
 8008fd2:	0004      	movs	r4, r0
 8008fd4:	0020      	movs	r0, r4
 8008fd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008fd8:	2a00      	cmp	r2, #0
 8008fda:	d103      	bne.n	8008fe4 <_realloc_r+0x24>
 8008fdc:	f7ff ffa6 	bl	8008f2c <_free_r>
 8008fe0:	0034      	movs	r4, r6
 8008fe2:	e7f7      	b.n	8008fd4 <_realloc_r+0x14>
 8008fe4:	f000 f812 	bl	800900c <_malloc_usable_size_r>
 8008fe8:	002c      	movs	r4, r5
 8008fea:	42b0      	cmp	r0, r6
 8008fec:	d2f2      	bcs.n	8008fd4 <_realloc_r+0x14>
 8008fee:	0031      	movs	r1, r6
 8008ff0:	0038      	movs	r0, r7
 8008ff2:	f7ff fc15 	bl	8008820 <_malloc_r>
 8008ff6:	1e04      	subs	r4, r0, #0
 8008ff8:	d0ec      	beq.n	8008fd4 <_realloc_r+0x14>
 8008ffa:	0029      	movs	r1, r5
 8008ffc:	0032      	movs	r2, r6
 8008ffe:	f7ff fbef 	bl	80087e0 <memcpy>
 8009002:	0029      	movs	r1, r5
 8009004:	0038      	movs	r0, r7
 8009006:	f7ff ff91 	bl	8008f2c <_free_r>
 800900a:	e7e3      	b.n	8008fd4 <_realloc_r+0x14>

0800900c <_malloc_usable_size_r>:
 800900c:	1f0b      	subs	r3, r1, #4
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	1f18      	subs	r0, r3, #4
 8009012:	2b00      	cmp	r3, #0
 8009014:	da01      	bge.n	800901a <_malloc_usable_size_r+0xe>
 8009016:	580b      	ldr	r3, [r1, r0]
 8009018:	18c0      	adds	r0, r0, r3
 800901a:	4770      	bx	lr

0800901c <_init>:
 800901c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800901e:	46c0      	nop			; (mov r8, r8)
 8009020:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009022:	bc08      	pop	{r3}
 8009024:	469e      	mov	lr, r3
 8009026:	4770      	bx	lr

08009028 <_fini>:
 8009028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800902a:	46c0      	nop			; (mov r8, r8)
 800902c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800902e:	bc08      	pop	{r3}
 8009030:	469e      	mov	lr, r3
 8009032:	4770      	bx	lr
