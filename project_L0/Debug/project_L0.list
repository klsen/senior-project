
project_L0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006358  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000608  08006418  08006418  00016418  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a20  08006a20  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08006a20  08006a20  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006a20  08006a20  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a20  08006a20  00016a20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006a24  08006a24  00016a24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08006a28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000244  20000068  08006a90  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002ac  08006a90  000202ac  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   000151c3  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002d56  00000000  00000000  00035253  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001218  00000000  00000000  00037fb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001088  00000000  00000000  000391c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017516  00000000  00000000  0003a250  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f581  00000000  00000000  00051766  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008d3c7  00000000  00000000  00060ce7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ee0ae  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042d0  00000000  00000000  000ee12c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006400 	.word	0x08006400

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	08006400 	.word	0x08006400

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <SPI_CS_LOW>:
 */

#include "TFT_display.h"

// ---- lower level functions ----
void SPI_CS_LOW() {HAL_GPIO_WritePin(CS_GPIO, CS_PIN, GPIO_PIN_RESET);}
 80003f4:	b580      	push	{r7, lr}
 80003f6:	af00      	add	r7, sp, #0
 80003f8:	4b04      	ldr	r3, [pc, #16]	; (800040c <SPI_CS_LOW+0x18>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	2180      	movs	r1, #128	; 0x80
 80003fe:	0018      	movs	r0, r3
 8000400:	f002 fcf3 	bl	8002dea <HAL_GPIO_WritePin>
 8000404:	46c0      	nop			; (mov r8, r8)
 8000406:	46bd      	mov	sp, r7
 8000408:	bd80      	pop	{r7, pc}
 800040a:	46c0      	nop			; (mov r8, r8)
 800040c:	50000800 	.word	0x50000800

08000410 <SPI_CS_HIGH>:

void SPI_CS_HIGH() {HAL_GPIO_WritePin(CS_GPIO, CS_PIN, GPIO_PIN_SET);}
 8000410:	b580      	push	{r7, lr}
 8000412:	af00      	add	r7, sp, #0
 8000414:	4b04      	ldr	r3, [pc, #16]	; (8000428 <SPI_CS_HIGH+0x18>)
 8000416:	2201      	movs	r2, #1
 8000418:	2180      	movs	r1, #128	; 0x80
 800041a:	0018      	movs	r0, r3
 800041c:	f002 fce5 	bl	8002dea <HAL_GPIO_WritePin>
 8000420:	46c0      	nop			; (mov r8, r8)
 8000422:	46bd      	mov	sp, r7
 8000424:	bd80      	pop	{r7, pc}
 8000426:	46c0      	nop			; (mov r8, r8)
 8000428:	50000800 	.word	0x50000800

0800042c <SPI_DC_LOW>:

void SPI_DC_LOW() {HAL_GPIO_WritePin(DC_GPIO, DC_PIN, GPIO_PIN_RESET);}
 800042c:	b580      	push	{r7, lr}
 800042e:	af00      	add	r7, sp, #0
 8000430:	4b04      	ldr	r3, [pc, #16]	; (8000444 <SPI_DC_LOW+0x18>)
 8000432:	2200      	movs	r2, #0
 8000434:	2140      	movs	r1, #64	; 0x40
 8000436:	0018      	movs	r0, r3
 8000438:	f002 fcd7 	bl	8002dea <HAL_GPIO_WritePin>
 800043c:	46c0      	nop			; (mov r8, r8)
 800043e:	46bd      	mov	sp, r7
 8000440:	bd80      	pop	{r7, pc}
 8000442:	46c0      	nop			; (mov r8, r8)
 8000444:	50000400 	.word	0x50000400

08000448 <SPI_DC_HIGH>:

void SPI_DC_HIGH() {HAL_GPIO_WritePin(DC_GPIO, DC_PIN, GPIO_PIN_SET);}
 8000448:	b580      	push	{r7, lr}
 800044a:	af00      	add	r7, sp, #0
 800044c:	4b04      	ldr	r3, [pc, #16]	; (8000460 <SPI_DC_HIGH+0x18>)
 800044e:	2201      	movs	r2, #1
 8000450:	2140      	movs	r1, #64	; 0x40
 8000452:	0018      	movs	r0, r3
 8000454:	f002 fcc9 	bl	8002dea <HAL_GPIO_WritePin>
 8000458:	46c0      	nop			; (mov r8, r8)
 800045a:	46bd      	mov	sp, r7
 800045c:	bd80      	pop	{r7, pc}
 800045e:	46c0      	nop			; (mov r8, r8)
 8000460:	50000400 	.word	0x50000400

08000464 <sendCommand>:

// still ripped but now im changing it
void sendCommand(uint8_t cmd, uint8_t *args, uint16_t numArgs, SPI_HandleTypeDef *hspi) {
 8000464:	b580      	push	{r7, lr}
 8000466:	b084      	sub	sp, #16
 8000468:	af00      	add	r7, sp, #0
 800046a:	60b9      	str	r1, [r7, #8]
 800046c:	0011      	movs	r1, r2
 800046e:	607b      	str	r3, [r7, #4]
 8000470:	230f      	movs	r3, #15
 8000472:	18fb      	adds	r3, r7, r3
 8000474:	1c02      	adds	r2, r0, #0
 8000476:	701a      	strb	r2, [r3, #0]
 8000478:	230c      	movs	r3, #12
 800047a:	18fb      	adds	r3, r7, r3
 800047c:	1c0a      	adds	r2, r1, #0
 800047e:	801a      	strh	r2, [r3, #0]
	while (HAL_SPI_GetState(hspi) == HAL_SPI_STATE_BUSY_TX);		// block next transfer request while DMA transfer is ongoing
 8000480:	46c0      	nop			; (mov r8, r8)
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	0018      	movs	r0, r3
 8000486:	f004 fe63 	bl	8005150 <HAL_SPI_GetState>
 800048a:	0003      	movs	r3, r0
 800048c:	2b03      	cmp	r3, #3
 800048e:	d0f8      	beq.n	8000482 <sendCommand+0x1e>
	SPI_CS_LOW();	// chip select
 8000490:	f7ff ffb0 	bl	80003f4 <SPI_CS_LOW>

	SPI_DC_LOW();	// command mode
 8000494:	f7ff ffca 	bl	800042c <SPI_DC_LOW>
	HAL_SPI_Transmit(hspi, &cmd, 1, 1000);	// not using DMA bc it's only 1 byte
 8000498:	23fa      	movs	r3, #250	; 0xfa
 800049a:	009b      	lsls	r3, r3, #2
 800049c:	220f      	movs	r2, #15
 800049e:	18b9      	adds	r1, r7, r2
 80004a0:	6878      	ldr	r0, [r7, #4]
 80004a2:	2201      	movs	r2, #1
 80004a4:	f004 fb3c 	bl	8004b20 <HAL_SPI_Transmit>

	SPI_DC_HIGH();	// data mode
 80004a8:	f7ff ffce 	bl	8000448 <SPI_DC_HIGH>
	if (numArgs) {
 80004ac:	230c      	movs	r3, #12
 80004ae:	18fb      	adds	r3, r7, r3
 80004b0:	881b      	ldrh	r3, [r3, #0]
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d007      	beq.n	80004c6 <sendCommand+0x62>
		HAL_SPI_Transmit_DMA(hspi, args, numArgs);
 80004b6:	230c      	movs	r3, #12
 80004b8:	18fb      	adds	r3, r7, r3
 80004ba:	881a      	ldrh	r2, [r3, #0]
 80004bc:	68b9      	ldr	r1, [r7, #8]
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	0018      	movs	r0, r3
 80004c2:	f004 fc7b 	bl	8004dbc <HAL_SPI_Transmit_DMA>
	}

//	SPI_CS_HIGH();	// chip select disable
}
 80004c6:	46c0      	nop			; (mov r8, r8)
 80004c8:	46bd      	mov	sp, r7
 80004ca:	b004      	add	sp, #16
 80004cc:	bd80      	pop	{r7, pc}
	...

080004d0 <HAL_SPI_TxCpltCallback>:

// DMA callback on transfer compelete
// using only for sending data, but not commands
// dont send request when transfer is ongoing
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
	if (HAL_GPIO_ReadPin(CS_GPIO, CS_PIN) == GPIO_PIN_RESET) SPI_CS_HIGH();	// chip select disable
 80004d8:	4b06      	ldr	r3, [pc, #24]	; (80004f4 <HAL_SPI_TxCpltCallback+0x24>)
 80004da:	2180      	movs	r1, #128	; 0x80
 80004dc:	0018      	movs	r0, r3
 80004de:	f002 fc67 	bl	8002db0 <HAL_GPIO_ReadPin>
 80004e2:	1e03      	subs	r3, r0, #0
 80004e4:	d101      	bne.n	80004ea <HAL_SPI_TxCpltCallback+0x1a>
 80004e6:	f7ff ff93 	bl	8000410 <SPI_CS_HIGH>
}
 80004ea:	46c0      	nop			; (mov r8, r8)
 80004ec:	46bd      	mov	sp, r7
 80004ee:	b002      	add	sp, #8
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	46c0      	nop			; (mov r8, r8)
 80004f4:	50000800 	.word	0x50000800

080004f8 <displayInit>:

// array parser heavily based on Adafruit library code
void displayInit(uint8_t *args, SPI_HandleTypeDef *hspi) {
 80004f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004fa:	b085      	sub	sp, #20
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
 8000500:	6039      	str	r1, [r7, #0]
	uint8_t  numCommands, cmd, numArgs;
	uint16_t ms;
	uint8_t index = 0;
 8000502:	220b      	movs	r2, #11
 8000504:	0011      	movs	r1, r2
 8000506:	18bb      	adds	r3, r7, r2
 8000508:	2200      	movs	r2, #0
 800050a:	701a      	strb	r2, [r3, #0]
	uint8_t data;

	numCommands = args[index++];   // Number of commands to follow
 800050c:	000a      	movs	r2, r1
 800050e:	18bb      	adds	r3, r7, r2
 8000510:	781b      	ldrb	r3, [r3, #0]
 8000512:	18ba      	adds	r2, r7, r2
 8000514:	1c59      	adds	r1, r3, #1
 8000516:	7011      	strb	r1, [r2, #0]
 8000518:	001a      	movs	r2, r3
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	189a      	adds	r2, r3, r2
 800051e:	230f      	movs	r3, #15
 8000520:	18fb      	adds	r3, r7, r3
 8000522:	7812      	ldrb	r2, [r2, #0]
 8000524:	701a      	strb	r2, [r3, #0]
	while(numCommands--) {                 // For each command...
 8000526:	e05e      	b.n	80005e6 <displayInit+0xee>
		cmd = args[index++];         // Read command
 8000528:	200b      	movs	r0, #11
 800052a:	183b      	adds	r3, r7, r0
 800052c:	781b      	ldrb	r3, [r3, #0]
 800052e:	183a      	adds	r2, r7, r0
 8000530:	1c59      	adds	r1, r3, #1
 8000532:	7011      	strb	r1, [r2, #0]
 8000534:	001a      	movs	r2, r3
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	189a      	adds	r2, r3, r2
 800053a:	230a      	movs	r3, #10
 800053c:	18fb      	adds	r3, r7, r3
 800053e:	7812      	ldrb	r2, [r2, #0]
 8000540:	701a      	strb	r2, [r3, #0]
		numArgs  = args[index++];    // Number of args to follow
 8000542:	183b      	adds	r3, r7, r0
 8000544:	781b      	ldrb	r3, [r3, #0]
 8000546:	183a      	adds	r2, r7, r0
 8000548:	1c59      	adds	r1, r3, #1
 800054a:	7011      	strb	r1, [r2, #0]
 800054c:	001a      	movs	r2, r3
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	189a      	adds	r2, r3, r2
 8000552:	2609      	movs	r6, #9
 8000554:	19bb      	adds	r3, r7, r6
 8000556:	7812      	ldrb	r2, [r2, #0]
 8000558:	701a      	strb	r2, [r3, #0]
		ms       = numArgs & ST_CMD_DELAY;   // If hibit set, delay follows args
 800055a:	19bb      	adds	r3, r7, r6
 800055c:	781b      	ldrb	r3, [r3, #0]
 800055e:	b29a      	uxth	r2, r3
 8000560:	210c      	movs	r1, #12
 8000562:	187b      	adds	r3, r7, r1
 8000564:	2180      	movs	r1, #128	; 0x80
 8000566:	400a      	ands	r2, r1
 8000568:	801a      	strh	r2, [r3, #0]
		numArgs &= ~ST_CMD_DELAY;            // Mask out delay bit
 800056a:	19bb      	adds	r3, r7, r6
 800056c:	19ba      	adds	r2, r7, r6
 800056e:	7812      	ldrb	r2, [r2, #0]
 8000570:	217f      	movs	r1, #127	; 0x7f
 8000572:	400a      	ands	r2, r1
 8000574:	701a      	strb	r2, [r3, #0]
		sendCommand(cmd, &args[index], numArgs, hspi);
 8000576:	0005      	movs	r5, r0
 8000578:	183b      	adds	r3, r7, r0
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	687a      	ldr	r2, [r7, #4]
 800057e:	18d1      	adds	r1, r2, r3
 8000580:	19bb      	adds	r3, r7, r6
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	b29a      	uxth	r2, r3
 8000586:	683c      	ldr	r4, [r7, #0]
 8000588:	230a      	movs	r3, #10
 800058a:	18fb      	adds	r3, r7, r3
 800058c:	7818      	ldrb	r0, [r3, #0]
 800058e:	0023      	movs	r3, r4
 8000590:	f7ff ff68 	bl	8000464 <sendCommand>
		index += numArgs;
 8000594:	0028      	movs	r0, r5
 8000596:	183b      	adds	r3, r7, r0
 8000598:	1839      	adds	r1, r7, r0
 800059a:	19ba      	adds	r2, r7, r6
 800059c:	7809      	ldrb	r1, [r1, #0]
 800059e:	7812      	ldrb	r2, [r2, #0]
 80005a0:	188a      	adds	r2, r1, r2
 80005a2:	701a      	strb	r2, [r3, #0]

		if(ms) {
 80005a4:	210c      	movs	r1, #12
 80005a6:	187b      	adds	r3, r7, r1
 80005a8:	881b      	ldrh	r3, [r3, #0]
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d01b      	beq.n	80005e6 <displayInit+0xee>
			ms = args[index++]; // Read post-command delay time (ms)
 80005ae:	220b      	movs	r2, #11
 80005b0:	18bb      	adds	r3, r7, r2
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	18ba      	adds	r2, r7, r2
 80005b6:	1c59      	adds	r1, r3, #1
 80005b8:	7011      	strb	r1, [r2, #0]
 80005ba:	001a      	movs	r2, r3
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	189b      	adds	r3, r3, r2
 80005c0:	781a      	ldrb	r2, [r3, #0]
 80005c2:	210c      	movs	r1, #12
 80005c4:	187b      	adds	r3, r7, r1
 80005c6:	801a      	strh	r2, [r3, #0]
			if(ms == 255) ms = 500;     // If 255, delay for 500 ms
 80005c8:	187b      	adds	r3, r7, r1
 80005ca:	881b      	ldrh	r3, [r3, #0]
 80005cc:	2bff      	cmp	r3, #255	; 0xff
 80005ce:	d104      	bne.n	80005da <displayInit+0xe2>
 80005d0:	230c      	movs	r3, #12
 80005d2:	18fb      	adds	r3, r7, r3
 80005d4:	22fa      	movs	r2, #250	; 0xfa
 80005d6:	0052      	lsls	r2, r2, #1
 80005d8:	801a      	strh	r2, [r3, #0]
			HAL_Delay(ms);
 80005da:	230c      	movs	r3, #12
 80005dc:	18fb      	adds	r3, r7, r3
 80005de:	881b      	ldrh	r3, [r3, #0]
 80005e0:	0018      	movs	r0, r3
 80005e2:	f001 fd3b 	bl	800205c <HAL_Delay>
	while(numCommands--) {                 // For each command...
 80005e6:	220f      	movs	r2, #15
 80005e8:	18bb      	adds	r3, r7, r2
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	18ba      	adds	r2, r7, r2
 80005ee:	1e59      	subs	r1, r3, #1
 80005f0:	7011      	strb	r1, [r2, #0]
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d198      	bne.n	8000528 <displayInit+0x30>
		}
	}

	// note: this line may be doing more work than I think
	// (hard to read in datasheet)
	data = 0xC0;
 80005f6:	2108      	movs	r1, #8
 80005f8:	187b      	adds	r3, r7, r1
 80005fa:	22c0      	movs	r2, #192	; 0xc0
 80005fc:	701a      	strb	r2, [r3, #0]
	sendCommand(ST77XX_MADCTL, &data, 1, hspi);
 80005fe:	683b      	ldr	r3, [r7, #0]
 8000600:	1879      	adds	r1, r7, r1
 8000602:	2201      	movs	r2, #1
 8000604:	2036      	movs	r0, #54	; 0x36
 8000606:	f7ff ff2d 	bl	8000464 <sendCommand>
}
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	46bd      	mov	sp, r7
 800060e:	b005      	add	sp, #20
 8000610:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08000614 <TFT_startup>:

void TFT_startup(SPI_HandleTypeDef *hspi) {
 8000614:	b590      	push	{r4, r7, lr}
 8000616:	b0a3      	sub	sp, #140	; 0x8c
 8000618:	af02      	add	r7, sp, #8
 800061a:	6078      	str	r0, [r7, #4]
	// startup sequence: rcmd1->rcmd2red->rcmd3
	uint8_t initCommands[] = {
 800061c:	240c      	movs	r4, #12
 800061e:	193a      	adds	r2, r7, r4
 8000620:	4b14      	ldr	r3, [pc, #80]	; (8000674 <TFT_startup+0x60>)
 8000622:	0010      	movs	r0, r2
 8000624:	0019      	movs	r1, r3
 8000626:	2371      	movs	r3, #113	; 0x71
 8000628:	001a      	movs	r2, r3
 800062a:	f005 fad9 	bl	8005be0 <memcpy>
			10,                           //     10 ms delay
		ST77XX_DISPON,    ST_CMD_DELAY, //  4: Main screen turn on, no args w/delay
			100	                        //     100 ms delay
	};

	displayInit(initCommands, hspi);
 800062e:	687a      	ldr	r2, [r7, #4]
 8000630:	193b      	adds	r3, r7, r4
 8000632:	0011      	movs	r1, r2
 8000634:	0018      	movs	r0, r3
 8000636:	f7ff ff5f 	bl	80004f8 <displayInit>
	setAddrWindow(0, 0, WIDTH, HEIGHT, hspi);
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	9300      	str	r3, [sp, #0]
 800063e:	23a0      	movs	r3, #160	; 0xa0
 8000640:	2280      	movs	r2, #128	; 0x80
 8000642:	2100      	movs	r1, #0
 8000644:	2000      	movs	r0, #0
 8000646:	f000 f821 	bl	800068c <setAddrWindow>

	// set the global variables
	cursorX = 0;
 800064a:	4b0b      	ldr	r3, [pc, #44]	; (8000678 <TFT_startup+0x64>)
 800064c:	2200      	movs	r2, #0
 800064e:	701a      	strb	r2, [r3, #0]
	cursorY = 0;
 8000650:	4b0a      	ldr	r3, [pc, #40]	; (800067c <TFT_startup+0x68>)
 8000652:	2200      	movs	r2, #0
 8000654:	701a      	strb	r2, [r3, #0]
	textSize = 1;
 8000656:	4b0a      	ldr	r3, [pc, #40]	; (8000680 <TFT_startup+0x6c>)
 8000658:	2201      	movs	r2, #1
 800065a:	701a      	strb	r2, [r3, #0]
	textColor = ST77XX_BLACK;
 800065c:	4b09      	ldr	r3, [pc, #36]	; (8000684 <TFT_startup+0x70>)
 800065e:	2200      	movs	r2, #0
 8000660:	801a      	strh	r2, [r3, #0]
	bg = ST77XX_WHITE;
 8000662:	4b09      	ldr	r3, [pc, #36]	; (8000688 <TFT_startup+0x74>)
 8000664:	2201      	movs	r2, #1
 8000666:	4252      	negs	r2, r2
 8000668:	801a      	strh	r2, [r3, #0]
}
 800066a:	46c0      	nop			; (mov r8, r8)
 800066c:	46bd      	mov	sp, r7
 800066e:	b021      	add	sp, #132	; 0x84
 8000670:	bd90      	pop	{r4, r7, pc}
 8000672:	46c0      	nop			; (mov r8, r8)
 8000674:	08006418 	.word	0x08006418
 8000678:	20000084 	.word	0x20000084
 800067c:	20000085 	.word	0x20000085
 8000680:	20000086 	.word	0x20000086
 8000684:	20000088 	.word	0x20000088
 8000688:	2000008a 	.word	0x2000008a

0800068c <setAddrWindow>:

// draw something: set addr window -> write to ram memory
// sets specific area on display to write pixels to
// x and y for upper left corner, w for width, h for height
void setAddrWindow(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SPI_HandleTypeDef *hspi) {
 800068c:	b5b0      	push	{r4, r5, r7, lr}
 800068e:	b084      	sub	sp, #16
 8000690:	af00      	add	r7, sp, #0
 8000692:	0005      	movs	r5, r0
 8000694:	000c      	movs	r4, r1
 8000696:	0010      	movs	r0, r2
 8000698:	0019      	movs	r1, r3
 800069a:	1dbb      	adds	r3, r7, #6
 800069c:	1c2a      	adds	r2, r5, #0
 800069e:	801a      	strh	r2, [r3, #0]
 80006a0:	1d3b      	adds	r3, r7, #4
 80006a2:	1c22      	adds	r2, r4, #0
 80006a4:	801a      	strh	r2, [r3, #0]
 80006a6:	1cbb      	adds	r3, r7, #2
 80006a8:	1c02      	adds	r2, r0, #0
 80006aa:	801a      	strh	r2, [r3, #0]
 80006ac:	003b      	movs	r3, r7
 80006ae:	1c0a      	adds	r2, r1, #0
 80006b0:	801a      	strh	r2, [r3, #0]
	// not really needed for our display
	x += _xstart;
 80006b2:	1dbb      	adds	r3, r7, #6
 80006b4:	1dba      	adds	r2, r7, #6
 80006b6:	8812      	ldrh	r2, [r2, #0]
 80006b8:	801a      	strh	r2, [r3, #0]
	y += _ystart;
 80006ba:	1d3b      	adds	r3, r7, #4
 80006bc:	1d3a      	adds	r2, r7, #4
 80006be:	8812      	ldrh	r2, [r2, #0]
 80006c0:	801a      	strh	r2, [r3, #0]

	uint8_t temp[4];
	temp[0] = (x & (0xFF00)) >> 8;
 80006c2:	1dbb      	adds	r3, r7, #6
 80006c4:	881b      	ldrh	r3, [r3, #0]
 80006c6:	0a1b      	lsrs	r3, r3, #8
 80006c8:	b29b      	uxth	r3, r3
 80006ca:	b2da      	uxtb	r2, r3
 80006cc:	210c      	movs	r1, #12
 80006ce:	187b      	adds	r3, r7, r1
 80006d0:	701a      	strb	r2, [r3, #0]
	temp[1] = x & (0xFF);
 80006d2:	1dbb      	adds	r3, r7, #6
 80006d4:	881b      	ldrh	r3, [r3, #0]
 80006d6:	b2da      	uxtb	r2, r3
 80006d8:	187b      	adds	r3, r7, r1
 80006da:	705a      	strb	r2, [r3, #1]
	temp[2] = ((x+w-1) & (0xFF00)) >> 8;
 80006dc:	1dbb      	adds	r3, r7, #6
 80006de:	881a      	ldrh	r2, [r3, #0]
 80006e0:	1cbb      	adds	r3, r7, #2
 80006e2:	881b      	ldrh	r3, [r3, #0]
 80006e4:	18d3      	adds	r3, r2, r3
 80006e6:	3b01      	subs	r3, #1
 80006e8:	121b      	asrs	r3, r3, #8
 80006ea:	b2da      	uxtb	r2, r3
 80006ec:	187b      	adds	r3, r7, r1
 80006ee:	709a      	strb	r2, [r3, #2]
	temp[3] = (x+w-1) & (0xFF);
 80006f0:	1dbb      	adds	r3, r7, #6
 80006f2:	881b      	ldrh	r3, [r3, #0]
 80006f4:	b2da      	uxtb	r2, r3
 80006f6:	1cbb      	adds	r3, r7, #2
 80006f8:	881b      	ldrh	r3, [r3, #0]
 80006fa:	b2db      	uxtb	r3, r3
 80006fc:	18d3      	adds	r3, r2, r3
 80006fe:	b2db      	uxtb	r3, r3
 8000700:	3b01      	subs	r3, #1
 8000702:	b2da      	uxtb	r2, r3
 8000704:	187b      	adds	r3, r7, r1
 8000706:	70da      	strb	r2, [r3, #3]
	sendCommand(ST77XX_CASET, temp, 4, hspi);
 8000708:	6a3b      	ldr	r3, [r7, #32]
 800070a:	000c      	movs	r4, r1
 800070c:	1879      	adds	r1, r7, r1
 800070e:	2204      	movs	r2, #4
 8000710:	202a      	movs	r0, #42	; 0x2a
 8000712:	f7ff fea7 	bl	8000464 <sendCommand>

	temp[0] = (y & (0xFF00)) >> 8;
 8000716:	1d3b      	adds	r3, r7, #4
 8000718:	881b      	ldrh	r3, [r3, #0]
 800071a:	0a1b      	lsrs	r3, r3, #8
 800071c:	b29b      	uxth	r3, r3
 800071e:	b2da      	uxtb	r2, r3
 8000720:	0021      	movs	r1, r4
 8000722:	187b      	adds	r3, r7, r1
 8000724:	701a      	strb	r2, [r3, #0]
	temp[1] = y & (0xFF);
 8000726:	1d3b      	adds	r3, r7, #4
 8000728:	881b      	ldrh	r3, [r3, #0]
 800072a:	b2da      	uxtb	r2, r3
 800072c:	187b      	adds	r3, r7, r1
 800072e:	705a      	strb	r2, [r3, #1]
	temp[2] = ((y+h-1) & (0xFF00)) >> 8;
 8000730:	1d3b      	adds	r3, r7, #4
 8000732:	881a      	ldrh	r2, [r3, #0]
 8000734:	003b      	movs	r3, r7
 8000736:	881b      	ldrh	r3, [r3, #0]
 8000738:	18d3      	adds	r3, r2, r3
 800073a:	3b01      	subs	r3, #1
 800073c:	121b      	asrs	r3, r3, #8
 800073e:	b2da      	uxtb	r2, r3
 8000740:	187b      	adds	r3, r7, r1
 8000742:	709a      	strb	r2, [r3, #2]
	temp[3] = (y+h-1) & (0x00FF);
 8000744:	1d3b      	adds	r3, r7, #4
 8000746:	881b      	ldrh	r3, [r3, #0]
 8000748:	b2da      	uxtb	r2, r3
 800074a:	003b      	movs	r3, r7
 800074c:	881b      	ldrh	r3, [r3, #0]
 800074e:	b2db      	uxtb	r3, r3
 8000750:	18d3      	adds	r3, r2, r3
 8000752:	b2db      	uxtb	r3, r3
 8000754:	3b01      	subs	r3, #1
 8000756:	b2da      	uxtb	r2, r3
 8000758:	187b      	adds	r3, r7, r1
 800075a:	70da      	strb	r2, [r3, #3]
	sendCommand(ST77XX_RASET, temp, 4, hspi);
 800075c:	6a3b      	ldr	r3, [r7, #32]
 800075e:	1879      	adds	r1, r7, r1
 8000760:	2204      	movs	r2, #4
 8000762:	202b      	movs	r0, #43	; 0x2b
 8000764:	f7ff fe7e 	bl	8000464 <sendCommand>
}
 8000768:	46c0      	nop			; (mov r8, r8)
 800076a:	46bd      	mov	sp, r7
 800076c:	b004      	add	sp, #16
 800076e:	bdb0      	pop	{r4, r5, r7, pc}

08000770 <colorFixer>:
// 8-bit spi bus wants msb first; in array, lowest index is sent first
// because L4 is little-endian
//   for 16-bit value, it sends lower byte before upper byte
//   resulting in device thinking lower byte is upper byte
// this switches byte order around
uint16_t colorFixer(uint16_t color) {
 8000770:	b580      	push	{r7, lr}
 8000772:	b084      	sub	sp, #16
 8000774:	af00      	add	r7, sp, #0
 8000776:	0002      	movs	r2, r0
 8000778:	1dbb      	adds	r3, r7, #6
 800077a:	801a      	strh	r2, [r3, #0]
	uint8_t a = color & 0xFF;
 800077c:	210f      	movs	r1, #15
 800077e:	187b      	adds	r3, r7, r1
 8000780:	1dba      	adds	r2, r7, #6
 8000782:	8812      	ldrh	r2, [r2, #0]
 8000784:	701a      	strb	r2, [r3, #0]
	uint8_t b = (color & 0xFF00) >> 8;
 8000786:	1dbb      	adds	r3, r7, #6
 8000788:	881b      	ldrh	r3, [r3, #0]
 800078a:	0a1b      	lsrs	r3, r3, #8
 800078c:	b29a      	uxth	r2, r3
 800078e:	200e      	movs	r0, #14
 8000790:	183b      	adds	r3, r7, r0
 8000792:	701a      	strb	r2, [r3, #0]
	uint16_t ret = (a << 8) | b;
 8000794:	187b      	adds	r3, r7, r1
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	021b      	lsls	r3, r3, #8
 800079a:	b21a      	sxth	r2, r3
 800079c:	183b      	adds	r3, r7, r0
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	b21b      	sxth	r3, r3
 80007a2:	4313      	orrs	r3, r2
 80007a4:	b21a      	sxth	r2, r3
 80007a6:	210c      	movs	r1, #12
 80007a8:	187b      	adds	r3, r7, r1
 80007aa:	801a      	strh	r2, [r3, #0]

	return ret;
 80007ac:	187b      	adds	r3, r7, r1
 80007ae:	881b      	ldrh	r3, [r3, #0]
}
 80007b0:	0018      	movs	r0, r3
 80007b2:	46bd      	mov	sp, r7
 80007b4:	b004      	add	sp, #16
 80007b6:	bd80      	pop	{r7, pc}

080007b8 <drawPixel>:

void drawPixel(uint8_t x, uint8_t y, uint16_t color, SPI_HandleTypeDef *hspi) {
 80007b8:	b590      	push	{r4, r7, lr}
 80007ba:	b087      	sub	sp, #28
 80007bc:	af02      	add	r7, sp, #8
 80007be:	0004      	movs	r4, r0
 80007c0:	0008      	movs	r0, r1
 80007c2:	0011      	movs	r1, r2
 80007c4:	603b      	str	r3, [r7, #0]
 80007c6:	1dfb      	adds	r3, r7, #7
 80007c8:	1c22      	adds	r2, r4, #0
 80007ca:	701a      	strb	r2, [r3, #0]
 80007cc:	1dbb      	adds	r3, r7, #6
 80007ce:	1c02      	adds	r2, r0, #0
 80007d0:	701a      	strb	r2, [r3, #0]
 80007d2:	1d3b      	adds	r3, r7, #4
 80007d4:	1c0a      	adds	r2, r1, #0
 80007d6:	801a      	strh	r2, [r3, #0]
	// bounds checking
	// just don't draw if pixel is out of bounds
	if ((x > WIDTH) || (x < 0) || (y > HEIGHT) || (y < 0)) return;
 80007d8:	1dfb      	adds	r3, r7, #7
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	2b80      	cmp	r3, #128	; 0x80
 80007de:	d820      	bhi.n	8000822 <drawPixel+0x6a>
 80007e0:	1dbb      	adds	r3, r7, #6
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	2ba0      	cmp	r3, #160	; 0xa0
 80007e6:	d81c      	bhi.n	8000822 <drawPixel+0x6a>

	setAddrWindow(x, y, 1, 1, hspi);
 80007e8:	1dfb      	adds	r3, r7, #7
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	b298      	uxth	r0, r3
 80007ee:	1dbb      	adds	r3, r7, #6
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	b299      	uxth	r1, r3
 80007f4:	683b      	ldr	r3, [r7, #0]
 80007f6:	9300      	str	r3, [sp, #0]
 80007f8:	2301      	movs	r3, #1
 80007fa:	2201      	movs	r2, #1
 80007fc:	f7ff ff46 	bl	800068c <setAddrWindow>
	uint16_t tempColor = colorFixer(color);		// else we're using address of something passed by value
 8000800:	1d3b      	adds	r3, r7, #4
 8000802:	881b      	ldrh	r3, [r3, #0]
 8000804:	0018      	movs	r0, r3
 8000806:	f7ff ffb3 	bl	8000770 <colorFixer>
 800080a:	0003      	movs	r3, r0
 800080c:	001a      	movs	r2, r3
 800080e:	210e      	movs	r1, #14
 8000810:	187b      	adds	r3, r7, r1
 8000812:	801a      	strh	r2, [r3, #0]
	sendCommand(ST77XX_RAMWR, &tempColor, 2, hspi);
 8000814:	683b      	ldr	r3, [r7, #0]
 8000816:	1879      	adds	r1, r7, r1
 8000818:	2202      	movs	r2, #2
 800081a:	202c      	movs	r0, #44	; 0x2c
 800081c:	f7ff fe22 	bl	8000464 <sendCommand>
 8000820:	e000      	b.n	8000824 <drawPixel+0x6c>
	if ((x > WIDTH) || (x < 0) || (y > HEIGHT) || (y < 0)) return;
 8000822:	46c0      	nop			; (mov r8, r8)
}
 8000824:	46bd      	mov	sp, r7
 8000826:	b005      	add	sp, #20
 8000828:	bd90      	pop	{r4, r7, pc}

0800082a <drawHLine>:

void drawHLine(uint8_t x, uint8_t y, uint8_t size, uint16_t color, SPI_HandleTypeDef *hspi) {
 800082a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800082c:	b091      	sub	sp, #68	; 0x44
 800082e:	af02      	add	r7, sp, #8
 8000830:	000c      	movs	r4, r1
 8000832:	0016      	movs	r6, r2
 8000834:	0019      	movs	r1, r3
 8000836:	2327      	movs	r3, #39	; 0x27
 8000838:	18fa      	adds	r2, r7, r3
 800083a:	1c03      	adds	r3, r0, #0
 800083c:	7013      	strb	r3, [r2, #0]
 800083e:	2326      	movs	r3, #38	; 0x26
 8000840:	18fb      	adds	r3, r7, r3
 8000842:	1c22      	adds	r2, r4, #0
 8000844:	701a      	strb	r2, [r3, #0]
 8000846:	2325      	movs	r3, #37	; 0x25
 8000848:	18fb      	adds	r3, r7, r3
 800084a:	1c32      	adds	r2, r6, #0
 800084c:	701a      	strb	r2, [r3, #0]
 800084e:	2322      	movs	r3, #34	; 0x22
 8000850:	18fb      	adds	r3, r7, r3
 8000852:	1c0a      	adds	r2, r1, #0
 8000854:	801a      	strh	r2, [r3, #0]
 8000856:	466b      	mov	r3, sp
 8000858:	001e      	movs	r6, r3
	// bounds checking
	if (x < 0) x = 0;						// don't set x out of bounds
	if (x > WIDTH) x = WIDTH;
 800085a:	2327      	movs	r3, #39	; 0x27
 800085c:	18fb      	adds	r3, r7, r3
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	2b80      	cmp	r3, #128	; 0x80
 8000862:	d903      	bls.n	800086c <drawHLine+0x42>
 8000864:	2327      	movs	r3, #39	; 0x27
 8000866:	18fb      	adds	r3, r7, r3
 8000868:	2280      	movs	r2, #128	; 0x80
 800086a:	701a      	strb	r2, [r3, #0]
	if (x+size > WIDTH) size = WIDTH-x;		// don't set size so line draws out of bounds
 800086c:	2327      	movs	r3, #39	; 0x27
 800086e:	18fb      	adds	r3, r7, r3
 8000870:	781a      	ldrb	r2, [r3, #0]
 8000872:	2325      	movs	r3, #37	; 0x25
 8000874:	18fb      	adds	r3, r7, r3
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	18d3      	adds	r3, r2, r3
 800087a:	2b80      	cmp	r3, #128	; 0x80
 800087c:	dd08      	ble.n	8000890 <drawHLine+0x66>
 800087e:	2325      	movs	r3, #37	; 0x25
 8000880:	18fb      	adds	r3, r7, r3
 8000882:	2227      	movs	r2, #39	; 0x27
 8000884:	18ba      	adds	r2, r7, r2
 8000886:	7812      	ldrb	r2, [r2, #0]
 8000888:	2180      	movs	r1, #128	; 0x80
 800088a:	4249      	negs	r1, r1
 800088c:	1a8a      	subs	r2, r1, r2
 800088e:	701a      	strb	r2, [r3, #0]
	if (x+size < 0) size = 0-x;
	if ((y > HEIGHT) || (y < 0)) return;	// don't draw if y is out of bounds
 8000890:	2326      	movs	r3, #38	; 0x26
 8000892:	18fb      	adds	r3, r7, r3
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	2ba0      	cmp	r3, #160	; 0xa0
 8000898:	d868      	bhi.n	800096c <drawHLine+0x142>

	setAddrWindow(x, y, size, 1, hspi);
 800089a:	2327      	movs	r3, #39	; 0x27
 800089c:	18fb      	adds	r3, r7, r3
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	b298      	uxth	r0, r3
 80008a2:	2326      	movs	r3, #38	; 0x26
 80008a4:	18fb      	adds	r3, r7, r3
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	b299      	uxth	r1, r3
 80008aa:	2325      	movs	r3, #37	; 0x25
 80008ac:	18fb      	adds	r3, r7, r3
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	b29a      	uxth	r2, r3
 80008b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80008b4:	9300      	str	r3, [sp, #0]
 80008b6:	2301      	movs	r3, #1
 80008b8:	f7ff fee8 	bl	800068c <setAddrWindow>
	uint16_t colors[size];
 80008bc:	2325      	movs	r3, #37	; 0x25
 80008be:	18fb      	adds	r3, r7, r3
 80008c0:	781b      	ldrb	r3, [r3, #0]
 80008c2:	001a      	movs	r2, r3
 80008c4:	3a01      	subs	r2, #1
 80008c6:	633a      	str	r2, [r7, #48]	; 0x30
 80008c8:	60bb      	str	r3, [r7, #8]
 80008ca:	2200      	movs	r2, #0
 80008cc:	60fa      	str	r2, [r7, #12]
 80008ce:	68b8      	ldr	r0, [r7, #8]
 80008d0:	68f9      	ldr	r1, [r7, #12]
 80008d2:	0002      	movs	r2, r0
 80008d4:	0f12      	lsrs	r2, r2, #28
 80008d6:	000c      	movs	r4, r1
 80008d8:	0124      	lsls	r4, r4, #4
 80008da:	61fc      	str	r4, [r7, #28]
 80008dc:	69fc      	ldr	r4, [r7, #28]
 80008de:	4314      	orrs	r4, r2
 80008e0:	61fc      	str	r4, [r7, #28]
 80008e2:	0002      	movs	r2, r0
 80008e4:	0112      	lsls	r2, r2, #4
 80008e6:	61ba      	str	r2, [r7, #24]
 80008e8:	603b      	str	r3, [r7, #0]
 80008ea:	2200      	movs	r2, #0
 80008ec:	607a      	str	r2, [r7, #4]
 80008ee:	6838      	ldr	r0, [r7, #0]
 80008f0:	6879      	ldr	r1, [r7, #4]
 80008f2:	0002      	movs	r2, r0
 80008f4:	0f12      	lsrs	r2, r2, #28
 80008f6:	000c      	movs	r4, r1
 80008f8:	0124      	lsls	r4, r4, #4
 80008fa:	617c      	str	r4, [r7, #20]
 80008fc:	697c      	ldr	r4, [r7, #20]
 80008fe:	4314      	orrs	r4, r2
 8000900:	617c      	str	r4, [r7, #20]
 8000902:	0002      	movs	r2, r0
 8000904:	0112      	lsls	r2, r2, #4
 8000906:	613a      	str	r2, [r7, #16]
 8000908:	005b      	lsls	r3, r3, #1
 800090a:	3301      	adds	r3, #1
 800090c:	3307      	adds	r3, #7
 800090e:	08db      	lsrs	r3, r3, #3
 8000910:	00db      	lsls	r3, r3, #3
 8000912:	466a      	mov	r2, sp
 8000914:	1ad3      	subs	r3, r2, r3
 8000916:	469d      	mov	sp, r3
 8000918:	ab02      	add	r3, sp, #8
 800091a:	3301      	adds	r3, #1
 800091c:	085b      	lsrs	r3, r3, #1
 800091e:	005b      	lsls	r3, r3, #1
 8000920:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (int i = 0; i < size; i++) {		// better way to make array of 1 color; SPI without moving address of sent?
 8000922:	2300      	movs	r3, #0
 8000924:	637b      	str	r3, [r7, #52]	; 0x34
 8000926:	e00e      	b.n	8000946 <drawHLine+0x11c>
		colors[i] = colorFixer(color);
 8000928:	2322      	movs	r3, #34	; 0x22
 800092a:	18fb      	adds	r3, r7, r3
 800092c:	881b      	ldrh	r3, [r3, #0]
 800092e:	0018      	movs	r0, r3
 8000930:	f7ff ff1e 	bl	8000770 <colorFixer>
 8000934:	0003      	movs	r3, r0
 8000936:	0019      	movs	r1, r3
 8000938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800093a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800093c:	0052      	lsls	r2, r2, #1
 800093e:	52d1      	strh	r1, [r2, r3]
	for (int i = 0; i < size; i++) {		// better way to make array of 1 color; SPI without moving address of sent?
 8000940:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000942:	3301      	adds	r3, #1
 8000944:	637b      	str	r3, [r7, #52]	; 0x34
 8000946:	2325      	movs	r3, #37	; 0x25
 8000948:	18fb      	adds	r3, r7, r3
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800094e:	429a      	cmp	r2, r3
 8000950:	dbea      	blt.n	8000928 <drawHLine+0xfe>
//		colors[i] = color;
	}

	sendCommand(ST77XX_RAMWR, colors, size*2, hspi);
 8000952:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000954:	2325      	movs	r3, #37	; 0x25
 8000956:	18fb      	adds	r3, r7, r3
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	b29b      	uxth	r3, r3
 800095c:	18db      	adds	r3, r3, r3
 800095e:	b29a      	uxth	r2, r3
 8000960:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000962:	202c      	movs	r0, #44	; 0x2c
 8000964:	f7ff fd7e 	bl	8000464 <sendCommand>
 8000968:	46b5      	mov	sp, r6
 800096a:	e001      	b.n	8000970 <drawHLine+0x146>
	if ((y > HEIGHT) || (y < 0)) return;	// don't draw if y is out of bounds
 800096c:	46c0      	nop			; (mov r8, r8)
 800096e:	46b5      	mov	sp, r6
}
 8000970:	46bd      	mov	sp, r7
 8000972:	b00f      	add	sp, #60	; 0x3c
 8000974:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000976 <drawVLine>:

void drawVLine(uint8_t x, uint8_t y, uint8_t size, uint16_t color, SPI_HandleTypeDef *hspi) {
 8000976:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000978:	b091      	sub	sp, #68	; 0x44
 800097a:	af02      	add	r7, sp, #8
 800097c:	000c      	movs	r4, r1
 800097e:	0016      	movs	r6, r2
 8000980:	0019      	movs	r1, r3
 8000982:	2327      	movs	r3, #39	; 0x27
 8000984:	18fa      	adds	r2, r7, r3
 8000986:	1c03      	adds	r3, r0, #0
 8000988:	7013      	strb	r3, [r2, #0]
 800098a:	2326      	movs	r3, #38	; 0x26
 800098c:	18fb      	adds	r3, r7, r3
 800098e:	1c22      	adds	r2, r4, #0
 8000990:	701a      	strb	r2, [r3, #0]
 8000992:	2325      	movs	r3, #37	; 0x25
 8000994:	18fb      	adds	r3, r7, r3
 8000996:	1c32      	adds	r2, r6, #0
 8000998:	701a      	strb	r2, [r3, #0]
 800099a:	2322      	movs	r3, #34	; 0x22
 800099c:	18fb      	adds	r3, r7, r3
 800099e:	1c0a      	adds	r2, r1, #0
 80009a0:	801a      	strh	r2, [r3, #0]
 80009a2:	466b      	mov	r3, sp
 80009a4:	001e      	movs	r6, r3
	// bounds checking
	if (y < 0) x = 0;						// don't set x out of bounds
	if (y > HEIGHT) x = HEIGHT;
 80009a6:	2326      	movs	r3, #38	; 0x26
 80009a8:	18fb      	adds	r3, r7, r3
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	2ba0      	cmp	r3, #160	; 0xa0
 80009ae:	d903      	bls.n	80009b8 <drawVLine+0x42>
 80009b0:	2327      	movs	r3, #39	; 0x27
 80009b2:	18fb      	adds	r3, r7, r3
 80009b4:	22a0      	movs	r2, #160	; 0xa0
 80009b6:	701a      	strb	r2, [r3, #0]
	if (y+size > HEIGHT) size = HEIGHT-y;	// don't set size so line draws out of bounds
 80009b8:	2326      	movs	r3, #38	; 0x26
 80009ba:	18fb      	adds	r3, r7, r3
 80009bc:	781a      	ldrb	r2, [r3, #0]
 80009be:	2325      	movs	r3, #37	; 0x25
 80009c0:	18fb      	adds	r3, r7, r3
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	18d3      	adds	r3, r2, r3
 80009c6:	2ba0      	cmp	r3, #160	; 0xa0
 80009c8:	dd08      	ble.n	80009dc <drawVLine+0x66>
 80009ca:	2325      	movs	r3, #37	; 0x25
 80009cc:	18fb      	adds	r3, r7, r3
 80009ce:	2226      	movs	r2, #38	; 0x26
 80009d0:	18ba      	adds	r2, r7, r2
 80009d2:	7812      	ldrb	r2, [r2, #0]
 80009d4:	2160      	movs	r1, #96	; 0x60
 80009d6:	4249      	negs	r1, r1
 80009d8:	1a8a      	subs	r2, r1, r2
 80009da:	701a      	strb	r2, [r3, #0]
	if (y+size < 0) size = 0-y;
	if ((x > WIDTH) || (x < 0)) return;		// don't draw if y is out of bounds
 80009dc:	2327      	movs	r3, #39	; 0x27
 80009de:	18fb      	adds	r3, r7, r3
 80009e0:	781b      	ldrb	r3, [r3, #0]
 80009e2:	2b80      	cmp	r3, #128	; 0x80
 80009e4:	d869      	bhi.n	8000aba <drawVLine+0x144>

	setAddrWindow(x, y, 1, size, hspi);
 80009e6:	2327      	movs	r3, #39	; 0x27
 80009e8:	18fb      	adds	r3, r7, r3
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	b298      	uxth	r0, r3
 80009ee:	2326      	movs	r3, #38	; 0x26
 80009f0:	18fb      	adds	r3, r7, r3
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	b299      	uxth	r1, r3
 80009f6:	2325      	movs	r3, #37	; 0x25
 80009f8:	18fb      	adds	r3, r7, r3
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	b29a      	uxth	r2, r3
 80009fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000a00:	9300      	str	r3, [sp, #0]
 8000a02:	0013      	movs	r3, r2
 8000a04:	2201      	movs	r2, #1
 8000a06:	f7ff fe41 	bl	800068c <setAddrWindow>
	uint16_t colors[size];
 8000a0a:	2325      	movs	r3, #37	; 0x25
 8000a0c:	18fb      	adds	r3, r7, r3
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	001a      	movs	r2, r3
 8000a12:	3a01      	subs	r2, #1
 8000a14:	633a      	str	r2, [r7, #48]	; 0x30
 8000a16:	60bb      	str	r3, [r7, #8]
 8000a18:	2200      	movs	r2, #0
 8000a1a:	60fa      	str	r2, [r7, #12]
 8000a1c:	68b8      	ldr	r0, [r7, #8]
 8000a1e:	68f9      	ldr	r1, [r7, #12]
 8000a20:	0002      	movs	r2, r0
 8000a22:	0f12      	lsrs	r2, r2, #28
 8000a24:	000c      	movs	r4, r1
 8000a26:	0124      	lsls	r4, r4, #4
 8000a28:	61fc      	str	r4, [r7, #28]
 8000a2a:	69fc      	ldr	r4, [r7, #28]
 8000a2c:	4314      	orrs	r4, r2
 8000a2e:	61fc      	str	r4, [r7, #28]
 8000a30:	0002      	movs	r2, r0
 8000a32:	0112      	lsls	r2, r2, #4
 8000a34:	61ba      	str	r2, [r7, #24]
 8000a36:	603b      	str	r3, [r7, #0]
 8000a38:	2200      	movs	r2, #0
 8000a3a:	607a      	str	r2, [r7, #4]
 8000a3c:	6838      	ldr	r0, [r7, #0]
 8000a3e:	6879      	ldr	r1, [r7, #4]
 8000a40:	0002      	movs	r2, r0
 8000a42:	0f12      	lsrs	r2, r2, #28
 8000a44:	000c      	movs	r4, r1
 8000a46:	0124      	lsls	r4, r4, #4
 8000a48:	617c      	str	r4, [r7, #20]
 8000a4a:	697c      	ldr	r4, [r7, #20]
 8000a4c:	4314      	orrs	r4, r2
 8000a4e:	617c      	str	r4, [r7, #20]
 8000a50:	0002      	movs	r2, r0
 8000a52:	0112      	lsls	r2, r2, #4
 8000a54:	613a      	str	r2, [r7, #16]
 8000a56:	005b      	lsls	r3, r3, #1
 8000a58:	3301      	adds	r3, #1
 8000a5a:	3307      	adds	r3, #7
 8000a5c:	08db      	lsrs	r3, r3, #3
 8000a5e:	00db      	lsls	r3, r3, #3
 8000a60:	466a      	mov	r2, sp
 8000a62:	1ad3      	subs	r3, r2, r3
 8000a64:	469d      	mov	sp, r3
 8000a66:	ab02      	add	r3, sp, #8
 8000a68:	3301      	adds	r3, #1
 8000a6a:	085b      	lsrs	r3, r3, #1
 8000a6c:	005b      	lsls	r3, r3, #1
 8000a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (int i = 0; i < size; i++) {		// there has to be a better way to make array of 1 color
 8000a70:	2300      	movs	r3, #0
 8000a72:	637b      	str	r3, [r7, #52]	; 0x34
 8000a74:	e00e      	b.n	8000a94 <drawVLine+0x11e>
											// SPI without moving address of sent buffer?
		colors[i] = colorFixer(color);
 8000a76:	2322      	movs	r3, #34	; 0x22
 8000a78:	18fb      	adds	r3, r7, r3
 8000a7a:	881b      	ldrh	r3, [r3, #0]
 8000a7c:	0018      	movs	r0, r3
 8000a7e:	f7ff fe77 	bl	8000770 <colorFixer>
 8000a82:	0003      	movs	r3, r0
 8000a84:	0019      	movs	r1, r3
 8000a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a88:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000a8a:	0052      	lsls	r2, r2, #1
 8000a8c:	52d1      	strh	r1, [r2, r3]
	for (int i = 0; i < size; i++) {		// there has to be a better way to make array of 1 color
 8000a8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a90:	3301      	adds	r3, #1
 8000a92:	637b      	str	r3, [r7, #52]	; 0x34
 8000a94:	2325      	movs	r3, #37	; 0x25
 8000a96:	18fb      	adds	r3, r7, r3
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000a9c:	429a      	cmp	r2, r3
 8000a9e:	dbea      	blt.n	8000a76 <drawVLine+0x100>
	}

	sendCommand(ST77XX_RAMWR, colors, size*2, hspi);
 8000aa0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000aa2:	2325      	movs	r3, #37	; 0x25
 8000aa4:	18fb      	adds	r3, r7, r3
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	b29b      	uxth	r3, r3
 8000aaa:	18db      	adds	r3, r3, r3
 8000aac:	b29a      	uxth	r2, r3
 8000aae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000ab0:	202c      	movs	r0, #44	; 0x2c
 8000ab2:	f7ff fcd7 	bl	8000464 <sendCommand>
 8000ab6:	46b5      	mov	sp, r6
 8000ab8:	e001      	b.n	8000abe <drawVLine+0x148>
	if ((x > WIDTH) || (x < 0)) return;		// don't draw if y is out of bounds
 8000aba:	46c0      	nop			; (mov r8, r8)
 8000abc:	46b5      	mov	sp, r6
}
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	b00f      	add	sp, #60	; 0x3c
 8000ac2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000ac4 <fillRect>:
	drawHLine(x, y+h-1, w, color, hspi);
	drawVLine(x, y, h, color, hspi);
	drawVLine(x+w-1, y, h, color, hspi);
}

void fillRect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint16_t color, SPI_HandleTypeDef *hspi) {
 8000ac4:	b5b0      	push	{r4, r5, r7, lr}
 8000ac6:	b086      	sub	sp, #24
 8000ac8:	af02      	add	r7, sp, #8
 8000aca:	0005      	movs	r5, r0
 8000acc:	000c      	movs	r4, r1
 8000ace:	0010      	movs	r0, r2
 8000ad0:	0019      	movs	r1, r3
 8000ad2:	1dfb      	adds	r3, r7, #7
 8000ad4:	1c2a      	adds	r2, r5, #0
 8000ad6:	701a      	strb	r2, [r3, #0]
 8000ad8:	1dbb      	adds	r3, r7, #6
 8000ada:	1c22      	adds	r2, r4, #0
 8000adc:	701a      	strb	r2, [r3, #0]
 8000ade:	1d7b      	adds	r3, r7, #5
 8000ae0:	1c02      	adds	r2, r0, #0
 8000ae2:	701a      	strb	r2, [r3, #0]
 8000ae4:	1d3b      	adds	r3, r7, #4
 8000ae6:	1c0a      	adds	r2, r1, #0
 8000ae8:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < h; i++) {
 8000aea:	2300      	movs	r3, #0
 8000aec:	60fb      	str	r3, [r7, #12]
 8000aee:	e014      	b.n	8000b1a <fillRect+0x56>
		drawHLine(x, y+i, w, color, hspi);
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	b2da      	uxtb	r2, r3
 8000af4:	1dbb      	adds	r3, r7, #6
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	18d3      	adds	r3, r2, r3
 8000afa:	b2d9      	uxtb	r1, r3
 8000afc:	2320      	movs	r3, #32
 8000afe:	18fb      	adds	r3, r7, r3
 8000b00:	881c      	ldrh	r4, [r3, #0]
 8000b02:	1d7b      	adds	r3, r7, #5
 8000b04:	781a      	ldrb	r2, [r3, #0]
 8000b06:	1dfb      	adds	r3, r7, #7
 8000b08:	7818      	ldrb	r0, [r3, #0]
 8000b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b0c:	9300      	str	r3, [sp, #0]
 8000b0e:	0023      	movs	r3, r4
 8000b10:	f7ff fe8b 	bl	800082a <drawHLine>
	for (int i = 0; i < h; i++) {
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	3301      	adds	r3, #1
 8000b18:	60fb      	str	r3, [r7, #12]
 8000b1a:	1d3b      	adds	r3, r7, #4
 8000b1c:	781b      	ldrb	r3, [r3, #0]
 8000b1e:	68fa      	ldr	r2, [r7, #12]
 8000b20:	429a      	cmp	r2, r3
 8000b22:	dbe5      	blt.n	8000af0 <fillRect+0x2c>
	}
}
 8000b24:	46c0      	nop			; (mov r8, r8)
 8000b26:	46bd      	mov	sp, r7
 8000b28:	b004      	add	sp, #16
 8000b2a:	bdb0      	pop	{r4, r5, r7, pc}

08000b2c <fillScreen>:

void fillScreen(uint16_t color, SPI_HandleTypeDef *hspi) {
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b084      	sub	sp, #16
 8000b30:	af02      	add	r7, sp, #8
 8000b32:	0002      	movs	r2, r0
 8000b34:	6039      	str	r1, [r7, #0]
 8000b36:	1dbb      	adds	r3, r7, #6
 8000b38:	801a      	strh	r2, [r3, #0]
	fillRect(0, 0, WIDTH, HEIGHT, color, hspi);
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	9301      	str	r3, [sp, #4]
 8000b3e:	1dbb      	adds	r3, r7, #6
 8000b40:	881b      	ldrh	r3, [r3, #0]
 8000b42:	9300      	str	r3, [sp, #0]
 8000b44:	23a0      	movs	r3, #160	; 0xa0
 8000b46:	2280      	movs	r2, #128	; 0x80
 8000b48:	2100      	movs	r1, #0
 8000b4a:	2000      	movs	r0, #0
 8000b4c:	f7ff ffba 	bl	8000ac4 <fillRect>
}
 8000b50:	46c0      	nop			; (mov r8, r8)
 8000b52:	46bd      	mov	sp, r7
 8000b54:	b002      	add	sp, #8
 8000b56:	bd80      	pop	{r7, pc}

08000b58 <drawChar>:
// ---- end of basic shapes and lines ----

// ---- text functions ----
//void drawChar(uint8_t x, uint8_t y, uint8_t ch, uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y, SPI_HandleTypeDef *hspi) {
void drawChar(uint8_t ch, SPI_HandleTypeDef *hspi) {
 8000b58:	b5b0      	push	{r4, r5, r7, lr}
 8000b5a:	b086      	sub	sp, #24
 8000b5c:	af02      	add	r7, sp, #8
 8000b5e:	0002      	movs	r2, r0
 8000b60:	6039      	str	r1, [r7, #0]
 8000b62:	1dfb      	adds	r3, r7, #7
 8000b64:	701a      	strb	r2, [r3, #0]
//	   ((y + 8 * size_y - 1) < 0))   // Clip top
//		return;

//	if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior

	for (int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
 8000b66:	230f      	movs	r3, #15
 8000b68:	18fb      	adds	r3, r7, r3
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	701a      	strb	r2, [r3, #0]
 8000b6e:	e0b5      	b.n	8000cdc <drawChar+0x184>
		uint8_t line = font[ch*5+i];
 8000b70:	1dfb      	adds	r3, r7, #7
 8000b72:	781a      	ldrb	r2, [r3, #0]
 8000b74:	0013      	movs	r3, r2
 8000b76:	009b      	lsls	r3, r3, #2
 8000b78:	189a      	adds	r2, r3, r2
 8000b7a:	230f      	movs	r3, #15
 8000b7c:	18fb      	adds	r3, r7, r3
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	b25b      	sxtb	r3, r3
 8000b82:	18d2      	adds	r2, r2, r3
 8000b84:	230e      	movs	r3, #14
 8000b86:	18fb      	adds	r3, r7, r3
 8000b88:	4974      	ldr	r1, [pc, #464]	; (8000d5c <drawChar+0x204>)
 8000b8a:	5c8a      	ldrb	r2, [r1, r2]
 8000b8c:	701a      	strb	r2, [r3, #0]
		for (int8_t j=0; j<8; j++, line >>= 1) {
 8000b8e:	230d      	movs	r3, #13
 8000b90:	18fb      	adds	r3, r7, r3
 8000b92:	2200      	movs	r2, #0
 8000b94:	701a      	strb	r2, [r3, #0]
 8000b96:	e091      	b.n	8000cbc <drawChar+0x164>
			if (line & 1) {
 8000b98:	230e      	movs	r3, #14
 8000b9a:	18fb      	adds	r3, r7, r3
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	4013      	ands	r3, r2
 8000ba2:	d03b      	beq.n	8000c1c <drawChar+0xc4>
				if (textSize == 1)
 8000ba4:	4b6e      	ldr	r3, [pc, #440]	; (8000d60 <drawChar+0x208>)
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	2b01      	cmp	r3, #1
 8000baa:	d113      	bne.n	8000bd4 <drawChar+0x7c>
					drawPixel(cursorX+i, cursorY+j, textColor, hspi);
 8000bac:	4b6d      	ldr	r3, [pc, #436]	; (8000d64 <drawChar+0x20c>)
 8000bae:	781a      	ldrb	r2, [r3, #0]
 8000bb0:	230f      	movs	r3, #15
 8000bb2:	18fb      	adds	r3, r7, r3
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	18d3      	adds	r3, r2, r3
 8000bb8:	b2d8      	uxtb	r0, r3
 8000bba:	4b6b      	ldr	r3, [pc, #428]	; (8000d68 <drawChar+0x210>)
 8000bbc:	781a      	ldrb	r2, [r3, #0]
 8000bbe:	230d      	movs	r3, #13
 8000bc0:	18fb      	adds	r3, r7, r3
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	18d3      	adds	r3, r2, r3
 8000bc6:	b2d9      	uxtb	r1, r3
 8000bc8:	4b68      	ldr	r3, [pc, #416]	; (8000d6c <drawChar+0x214>)
 8000bca:	881a      	ldrh	r2, [r3, #0]
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	f7ff fdf3 	bl	80007b8 <drawPixel>
 8000bd2:	e064      	b.n	8000c9e <drawChar+0x146>
				else
					fillRect(cursorX+i*textSize, cursorY+j*textSize, textSize, textSize, textColor, hspi);
 8000bd4:	230f      	movs	r3, #15
 8000bd6:	18fb      	adds	r3, r7, r3
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	4a61      	ldr	r2, [pc, #388]	; (8000d60 <drawChar+0x208>)
 8000bdc:	7812      	ldrb	r2, [r2, #0]
 8000bde:	4353      	muls	r3, r2
 8000be0:	b2da      	uxtb	r2, r3
 8000be2:	4b60      	ldr	r3, [pc, #384]	; (8000d64 <drawChar+0x20c>)
 8000be4:	781b      	ldrb	r3, [r3, #0]
 8000be6:	18d3      	adds	r3, r2, r3
 8000be8:	b2d8      	uxtb	r0, r3
 8000bea:	230d      	movs	r3, #13
 8000bec:	18fb      	adds	r3, r7, r3
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	4a5b      	ldr	r2, [pc, #364]	; (8000d60 <drawChar+0x208>)
 8000bf2:	7812      	ldrb	r2, [r2, #0]
 8000bf4:	4353      	muls	r3, r2
 8000bf6:	b2da      	uxtb	r2, r3
 8000bf8:	4b5b      	ldr	r3, [pc, #364]	; (8000d68 <drawChar+0x210>)
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	18d3      	adds	r3, r2, r3
 8000bfe:	b2d9      	uxtb	r1, r3
 8000c00:	4b57      	ldr	r3, [pc, #348]	; (8000d60 <drawChar+0x208>)
 8000c02:	781c      	ldrb	r4, [r3, #0]
 8000c04:	4b56      	ldr	r3, [pc, #344]	; (8000d60 <drawChar+0x208>)
 8000c06:	781d      	ldrb	r5, [r3, #0]
 8000c08:	4b58      	ldr	r3, [pc, #352]	; (8000d6c <drawChar+0x214>)
 8000c0a:	881b      	ldrh	r3, [r3, #0]
 8000c0c:	683a      	ldr	r2, [r7, #0]
 8000c0e:	9201      	str	r2, [sp, #4]
 8000c10:	9300      	str	r3, [sp, #0]
 8000c12:	002b      	movs	r3, r5
 8000c14:	0022      	movs	r2, r4
 8000c16:	f7ff ff55 	bl	8000ac4 <fillRect>
 8000c1a:	e040      	b.n	8000c9e <drawChar+0x146>
			} else if (bg != textColor) {
 8000c1c:	4b54      	ldr	r3, [pc, #336]	; (8000d70 <drawChar+0x218>)
 8000c1e:	881a      	ldrh	r2, [r3, #0]
 8000c20:	4b52      	ldr	r3, [pc, #328]	; (8000d6c <drawChar+0x214>)
 8000c22:	881b      	ldrh	r3, [r3, #0]
 8000c24:	429a      	cmp	r2, r3
 8000c26:	d03a      	beq.n	8000c9e <drawChar+0x146>
				if (textSize == 1)
 8000c28:	4b4d      	ldr	r3, [pc, #308]	; (8000d60 <drawChar+0x208>)
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	2b01      	cmp	r3, #1
 8000c2e:	d113      	bne.n	8000c58 <drawChar+0x100>
					drawPixel(cursorX+i, cursorY+j, bg, hspi);
 8000c30:	4b4c      	ldr	r3, [pc, #304]	; (8000d64 <drawChar+0x20c>)
 8000c32:	781a      	ldrb	r2, [r3, #0]
 8000c34:	230f      	movs	r3, #15
 8000c36:	18fb      	adds	r3, r7, r3
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	18d3      	adds	r3, r2, r3
 8000c3c:	b2d8      	uxtb	r0, r3
 8000c3e:	4b4a      	ldr	r3, [pc, #296]	; (8000d68 <drawChar+0x210>)
 8000c40:	781a      	ldrb	r2, [r3, #0]
 8000c42:	230d      	movs	r3, #13
 8000c44:	18fb      	adds	r3, r7, r3
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	18d3      	adds	r3, r2, r3
 8000c4a:	b2d9      	uxtb	r1, r3
 8000c4c:	4b48      	ldr	r3, [pc, #288]	; (8000d70 <drawChar+0x218>)
 8000c4e:	881a      	ldrh	r2, [r3, #0]
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	f7ff fdb1 	bl	80007b8 <drawPixel>
 8000c56:	e022      	b.n	8000c9e <drawChar+0x146>
				else
					fillRect(cursorX+i*textSize, cursorY+j*textSize, textSize, textSize, bg, hspi);
 8000c58:	230f      	movs	r3, #15
 8000c5a:	18fb      	adds	r3, r7, r3
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	4a40      	ldr	r2, [pc, #256]	; (8000d60 <drawChar+0x208>)
 8000c60:	7812      	ldrb	r2, [r2, #0]
 8000c62:	4353      	muls	r3, r2
 8000c64:	b2da      	uxtb	r2, r3
 8000c66:	4b3f      	ldr	r3, [pc, #252]	; (8000d64 <drawChar+0x20c>)
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	18d3      	adds	r3, r2, r3
 8000c6c:	b2d8      	uxtb	r0, r3
 8000c6e:	230d      	movs	r3, #13
 8000c70:	18fb      	adds	r3, r7, r3
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	4a3a      	ldr	r2, [pc, #232]	; (8000d60 <drawChar+0x208>)
 8000c76:	7812      	ldrb	r2, [r2, #0]
 8000c78:	4353      	muls	r3, r2
 8000c7a:	b2da      	uxtb	r2, r3
 8000c7c:	4b3a      	ldr	r3, [pc, #232]	; (8000d68 <drawChar+0x210>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	18d3      	adds	r3, r2, r3
 8000c82:	b2d9      	uxtb	r1, r3
 8000c84:	4b36      	ldr	r3, [pc, #216]	; (8000d60 <drawChar+0x208>)
 8000c86:	781c      	ldrb	r4, [r3, #0]
 8000c88:	4b35      	ldr	r3, [pc, #212]	; (8000d60 <drawChar+0x208>)
 8000c8a:	781d      	ldrb	r5, [r3, #0]
 8000c8c:	4b38      	ldr	r3, [pc, #224]	; (8000d70 <drawChar+0x218>)
 8000c8e:	881b      	ldrh	r3, [r3, #0]
 8000c90:	683a      	ldr	r2, [r7, #0]
 8000c92:	9201      	str	r2, [sp, #4]
 8000c94:	9300      	str	r3, [sp, #0]
 8000c96:	002b      	movs	r3, r5
 8000c98:	0022      	movs	r2, r4
 8000c9a:	f7ff ff13 	bl	8000ac4 <fillRect>
		for (int8_t j=0; j<8; j++, line >>= 1) {
 8000c9e:	210d      	movs	r1, #13
 8000ca0:	187b      	adds	r3, r7, r1
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	b25b      	sxtb	r3, r3
 8000ca6:	b2db      	uxtb	r3, r3
 8000ca8:	3301      	adds	r3, #1
 8000caa:	b2da      	uxtb	r2, r3
 8000cac:	187b      	adds	r3, r7, r1
 8000cae:	701a      	strb	r2, [r3, #0]
 8000cb0:	220e      	movs	r2, #14
 8000cb2:	18bb      	adds	r3, r7, r2
 8000cb4:	18ba      	adds	r2, r7, r2
 8000cb6:	7812      	ldrb	r2, [r2, #0]
 8000cb8:	0852      	lsrs	r2, r2, #1
 8000cba:	701a      	strb	r2, [r3, #0]
 8000cbc:	230d      	movs	r3, #13
 8000cbe:	18fb      	adds	r3, r7, r3
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	b25b      	sxtb	r3, r3
 8000cc4:	2b07      	cmp	r3, #7
 8000cc6:	dc00      	bgt.n	8000cca <drawChar+0x172>
 8000cc8:	e766      	b.n	8000b98 <drawChar+0x40>
	for (int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
 8000cca:	210f      	movs	r1, #15
 8000ccc:	187b      	adds	r3, r7, r1
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	b25b      	sxtb	r3, r3
 8000cd2:	b2db      	uxtb	r3, r3
 8000cd4:	3301      	adds	r3, #1
 8000cd6:	b2da      	uxtb	r2, r3
 8000cd8:	187b      	adds	r3, r7, r1
 8000cda:	701a      	strb	r2, [r3, #0]
 8000cdc:	230f      	movs	r3, #15
 8000cde:	18fb      	adds	r3, r7, r3
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	b25b      	sxtb	r3, r3
 8000ce4:	2b04      	cmp	r3, #4
 8000ce6:	dc00      	bgt.n	8000cea <drawChar+0x192>
 8000ce8:	e742      	b.n	8000b70 <drawChar+0x18>
			}
		}
	}

	// 6wx8h char. this is 6th column, since it's always blank for kerning
	if (bg != textColor) { // If opaque, draw vertical line for last column
 8000cea:	4b21      	ldr	r3, [pc, #132]	; (8000d70 <drawChar+0x218>)
 8000cec:	881a      	ldrh	r2, [r3, #0]
 8000cee:	4b1f      	ldr	r3, [pc, #124]	; (8000d6c <drawChar+0x214>)
 8000cf0:	881b      	ldrh	r3, [r3, #0]
 8000cf2:	429a      	cmp	r2, r3
 8000cf4:	d02d      	beq.n	8000d52 <drawChar+0x1fa>
		if (textSize == 1) drawVLine(cursorX+5, cursorY, 8, bg, hspi);
 8000cf6:	4b1a      	ldr	r3, [pc, #104]	; (8000d60 <drawChar+0x208>)
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	2b01      	cmp	r3, #1
 8000cfc:	d10e      	bne.n	8000d1c <drawChar+0x1c4>
 8000cfe:	4b19      	ldr	r3, [pc, #100]	; (8000d64 <drawChar+0x20c>)
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	3305      	adds	r3, #5
 8000d04:	b2d8      	uxtb	r0, r3
 8000d06:	4b18      	ldr	r3, [pc, #96]	; (8000d68 <drawChar+0x210>)
 8000d08:	7819      	ldrb	r1, [r3, #0]
 8000d0a:	4b19      	ldr	r3, [pc, #100]	; (8000d70 <drawChar+0x218>)
 8000d0c:	881a      	ldrh	r2, [r3, #0]
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	9300      	str	r3, [sp, #0]
 8000d12:	0013      	movs	r3, r2
 8000d14:	2208      	movs	r2, #8
 8000d16:	f7ff fe2e 	bl	8000976 <drawVLine>
		else fillRect(cursorX+5*textSize, cursorY, textSize, 8*textSize, bg, hspi);
	}
}
 8000d1a:	e01a      	b.n	8000d52 <drawChar+0x1fa>
		else fillRect(cursorX+5*textSize, cursorY, textSize, 8*textSize, bg, hspi);
 8000d1c:	4b10      	ldr	r3, [pc, #64]	; (8000d60 <drawChar+0x208>)
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	1c1a      	adds	r2, r3, #0
 8000d22:	0092      	lsls	r2, r2, #2
 8000d24:	18d3      	adds	r3, r2, r3
 8000d26:	b2da      	uxtb	r2, r3
 8000d28:	4b0e      	ldr	r3, [pc, #56]	; (8000d64 <drawChar+0x20c>)
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	18d3      	adds	r3, r2, r3
 8000d2e:	b2d8      	uxtb	r0, r3
 8000d30:	4b0d      	ldr	r3, [pc, #52]	; (8000d68 <drawChar+0x210>)
 8000d32:	7819      	ldrb	r1, [r3, #0]
 8000d34:	4b0a      	ldr	r3, [pc, #40]	; (8000d60 <drawChar+0x208>)
 8000d36:	781c      	ldrb	r4, [r3, #0]
 8000d38:	4b09      	ldr	r3, [pc, #36]	; (8000d60 <drawChar+0x208>)
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	00db      	lsls	r3, r3, #3
 8000d3e:	b2dd      	uxtb	r5, r3
 8000d40:	4b0b      	ldr	r3, [pc, #44]	; (8000d70 <drawChar+0x218>)
 8000d42:	881b      	ldrh	r3, [r3, #0]
 8000d44:	683a      	ldr	r2, [r7, #0]
 8000d46:	9201      	str	r2, [sp, #4]
 8000d48:	9300      	str	r3, [sp, #0]
 8000d4a:	002b      	movs	r3, r5
 8000d4c:	0022      	movs	r2, r4
 8000d4e:	f7ff feb9 	bl	8000ac4 <fillRect>
}
 8000d52:	46c0      	nop			; (mov r8, r8)
 8000d54:	46bd      	mov	sp, r7
 8000d56:	b004      	add	sp, #16
 8000d58:	bdb0      	pop	{r4, r5, r7, pc}
 8000d5a:	46c0      	nop			; (mov r8, r8)
 8000d5c:	080064d4 	.word	0x080064d4
 8000d60:	20000086 	.word	0x20000086
 8000d64:	20000084 	.word	0x20000084
 8000d68:	20000085 	.word	0x20000085
 8000d6c:	20000088 	.word	0x20000088
 8000d70:	2000008a 	.word	0x2000008a

08000d74 <drawTextAt>:
	for (int i = 0; str[i] != '\0'; i++) {
		drawChar(str[i], hspi);
	}
}

void drawTextAt(uint8_t x, uint8_t y, char *str, SPI_HandleTypeDef *hspi) {
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b086      	sub	sp, #24
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	60ba      	str	r2, [r7, #8]
 8000d7c:	607b      	str	r3, [r7, #4]
 8000d7e:	230f      	movs	r3, #15
 8000d80:	18fb      	adds	r3, r7, r3
 8000d82:	1c02      	adds	r2, r0, #0
 8000d84:	701a      	strb	r2, [r3, #0]
 8000d86:	230e      	movs	r3, #14
 8000d88:	18fb      	adds	r3, r7, r3
 8000d8a:	1c0a      	adds	r2, r1, #0
 8000d8c:	701a      	strb	r2, [r3, #0]
	// add text wrap
	int i = 0;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	617b      	str	r3, [r7, #20]
	for (i = 0; str[i] != '\0'; i++) {
 8000d92:	2300      	movs	r3, #0
 8000d94:	617b      	str	r3, [r7, #20]
 8000d96:	e00b      	b.n	8000db0 <drawTextAt+0x3c>
		drawChar(str[i], hspi);
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	68ba      	ldr	r2, [r7, #8]
 8000d9c:	18d3      	adds	r3, r2, r3
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	687a      	ldr	r2, [r7, #4]
 8000da2:	0011      	movs	r1, r2
 8000da4:	0018      	movs	r0, r3
 8000da6:	f7ff fed7 	bl	8000b58 <drawChar>
	for (i = 0; str[i] != '\0'; i++) {
 8000daa:	697b      	ldr	r3, [r7, #20]
 8000dac:	3301      	adds	r3, #1
 8000dae:	617b      	str	r3, [r7, #20]
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	68ba      	ldr	r2, [r7, #8]
 8000db4:	18d3      	adds	r3, r2, r3
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d1ed      	bne.n	8000d98 <drawTextAt+0x24>
	}
//	setCursor(x+i*textSize*6, y);
}
 8000dbc:	46c0      	nop			; (mov r8, r8)
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	b006      	add	sp, #24
 8000dc2:	bd80      	pop	{r7, pc}

08000dc4 <setTextColor>:
	cursorY = y;
}

void setTextSize(uint8_t size) {textSize = size;}

void setTextColor(uint16_t color) {textColor = color;}
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	0002      	movs	r2, r0
 8000dcc:	1dbb      	adds	r3, r7, #6
 8000dce:	801a      	strh	r2, [r3, #0]
 8000dd0:	4b03      	ldr	r3, [pc, #12]	; (8000de0 <setTextColor+0x1c>)
 8000dd2:	1dba      	adds	r2, r7, #6
 8000dd4:	8812      	ldrh	r2, [r2, #0]
 8000dd6:	801a      	strh	r2, [r3, #0]
 8000dd8:	46c0      	nop			; (mov r8, r8)
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	b002      	add	sp, #8
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	20000088 	.word	0x20000088

08000de4 <setTime>:

#include "clocks.h"
#include "timers.h"

// set rtc time. uses perosnal struct as arg
void setTime(RTC_HandleTypeDef *hrtc, struct times *t) {
 8000de4:	b590      	push	{r4, r7, lr}
 8000de6:	b089      	sub	sp, #36	; 0x24
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
 8000dec:	6039      	str	r1, [r7, #0]
	RTC_TimeTypeDef stime = {0};	// change to malloc call? does that work in embedded?
 8000dee:	210c      	movs	r1, #12
 8000df0:	000c      	movs	r4, r1
 8000df2:	187b      	adds	r3, r7, r1
 8000df4:	0018      	movs	r0, r3
 8000df6:	2314      	movs	r3, #20
 8000df8:	001a      	movs	r2, r3
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	f004 fef9 	bl	8005bf2 <memset>

	// set using args later
	stime.Hours = t->hr;
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	781a      	ldrb	r2, [r3, #0]
 8000e04:	0021      	movs	r1, r4
 8000e06:	187b      	adds	r3, r7, r1
 8000e08:	701a      	strb	r2, [r3, #0]
	stime.Minutes = t->min;
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	785a      	ldrb	r2, [r3, #1]
 8000e0e:	187b      	adds	r3, r7, r1
 8000e10:	705a      	strb	r2, [r3, #1]
	stime.Seconds = t->sec;
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	789a      	ldrb	r2, [r3, #2]
 8000e16:	187b      	adds	r3, r7, r1
 8000e18:	709a      	strb	r2, [r3, #2]

	stime.TimeFormat = RTC_HOURFORMAT_24;
 8000e1a:	187b      	adds	r3, r7, r1
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	70da      	strb	r2, [r3, #3]

	// not sure what these do, but probably fine if set to 0 or ignored
	stime.SubSeconds = 0;
 8000e20:	187b      	adds	r3, r7, r1
 8000e22:	2200      	movs	r2, #0
 8000e24:	605a      	str	r2, [r3, #4]
	stime.SecondFraction = 0;
 8000e26:	187b      	adds	r3, r7, r1
 8000e28:	2200      	movs	r2, #0
 8000e2a:	609a      	str	r2, [r3, #8]

	stime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;		// add daylight savings later?
 8000e2c:	187b      	adds	r3, r7, r1
 8000e2e:	2200      	movs	r2, #0
 8000e30:	60da      	str	r2, [r3, #12]
	stime.StoreOperation = RTC_STOREOPERATION_SET;		// not sure what this does
 8000e32:	187b      	adds	r3, r7, r1
 8000e34:	2280      	movs	r2, #128	; 0x80
 8000e36:	02d2      	lsls	r2, r2, #11
 8000e38:	611a      	str	r2, [r3, #16]

	// do nothing until done
	// not following BCD format (4-bit digit 1, 4-bit digit 2)
	// while makes program hang? ignore instead?
//	while (HAL_RTC_SetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK);
	HAL_RTC_SetTime(hrtc, &stime, RTC_FORMAT_BIN);
 8000e3a:	1879      	adds	r1, r7, r1
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	2200      	movs	r2, #0
 8000e40:	0018      	movs	r0, r3
 8000e42:	f003 f90d 	bl	8004060 <HAL_RTC_SetTime>
}
 8000e46:	46c0      	nop			; (mov r8, r8)
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	b009      	add	sp, #36	; 0x24
 8000e4c:	bd90      	pop	{r4, r7, pc}

08000e4e <setDate>:

// set rtc date. uses personal struct
void setDate(RTC_HandleTypeDef *hrtc, struct dates *d) {
 8000e4e:	b590      	push	{r4, r7, lr}
 8000e50:	b085      	sub	sp, #20
 8000e52:	af00      	add	r7, sp, #0
 8000e54:	6078      	str	r0, [r7, #4]
 8000e56:	6039      	str	r1, [r7, #0]
	// ---- date ----
	RTC_DateTypeDef sdate = {0};
 8000e58:	240c      	movs	r4, #12
 8000e5a:	193b      	adds	r3, r7, r4
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	601a      	str	r2, [r3, #0]

	sdate.Month = d->month;
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	785a      	ldrb	r2, [r3, #1]
 8000e64:	193b      	adds	r3, r7, r4
 8000e66:	705a      	strb	r2, [r3, #1]
	sdate.Date = d->date;
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	789a      	ldrb	r2, [r3, #2]
 8000e6c:	193b      	adds	r3, r7, r4
 8000e6e:	709a      	strb	r2, [r3, #2]
	sdate.WeekDay = d->weekday;
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	78da      	ldrb	r2, [r3, #3]
 8000e74:	193b      	adds	r3, r7, r4
 8000e76:	701a      	strb	r2, [r3, #0]
	sdate.Year = d->yr % 100; 		// set only between 0-99. part of the library (!?)
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	2164      	movs	r1, #100	; 0x64
 8000e7e:	0018      	movs	r0, r3
 8000e80:	f7ff f9c8 	bl	8000214 <__aeabi_uidivmod>
 8000e84:	000b      	movs	r3, r1
 8000e86:	b2da      	uxtb	r2, r3
 8000e88:	193b      	adds	r3, r7, r4
 8000e8a:	70da      	strb	r2, [r3, #3]

	HAL_RTC_SetDate(hrtc, &sdate, RTC_FORMAT_BIN);
 8000e8c:	1939      	adds	r1, r7, r4
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	2200      	movs	r2, #0
 8000e92:	0018      	movs	r0, r3
 8000e94:	f003 fa04 	bl	80042a0 <HAL_RTC_SetDate>
}
 8000e98:	46c0      	nop			; (mov r8, r8)
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	b005      	add	sp, #20
 8000e9e:	bd90      	pop	{r4, r7, pc}

08000ea0 <setDateTime>:

void setDateTime(RTC_HandleTypeDef *hrtc, struct dates *d, struct times *t) {
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b084      	sub	sp, #16
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	60f8      	str	r0, [r7, #12]
 8000ea8:	60b9      	str	r1, [r7, #8]
 8000eaa:	607a      	str	r2, [r7, #4]
	setDate(hrtc, d);
 8000eac:	68ba      	ldr	r2, [r7, #8]
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	0011      	movs	r1, r2
 8000eb2:	0018      	movs	r0, r3
 8000eb4:	f7ff ffcb 	bl	8000e4e <setDate>
	setTime(hrtc, t);
 8000eb8:	687a      	ldr	r2, [r7, #4]
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	0011      	movs	r1, r2
 8000ebe:	0018      	movs	r0, r3
 8000ec0:	f7ff ff90 	bl	8000de4 <setTime>
}
 8000ec4:	46c0      	nop			; (mov r8, r8)
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	b004      	add	sp, #16
 8000eca:	bd80      	pop	{r7, pc}

08000ecc <HAL_RTC_AlarmAEventCallback>:

// ---- callbacks for interrupts ----
// used for alarm function in project
// meant to send signal to use motor
// change to use hw timer so signal is temporary
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
	// change pin to whatever's accessible
	// using PC0
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_0);
 8000ed4:	4b0c      	ldr	r3, [pc, #48]	; (8000f08 <HAL_RTC_AlarmAEventCallback+0x3c>)
 8000ed6:	2101      	movs	r1, #1
 8000ed8:	0018      	movs	r0, r3
 8000eda:	f001 ffa3 	bl	8002e24 <HAL_GPIO_TogglePin>
	HAL_Delay(500);			// does this work in interrupt/callback? might not
 8000ede:	23fa      	movs	r3, #250	; 0xfa
 8000ee0:	005b      	lsls	r3, r3, #1
 8000ee2:	0018      	movs	r0, r3
 8000ee4:	f001 f8ba 	bl	800205c <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_0);
 8000ee8:	4b07      	ldr	r3, [pc, #28]	; (8000f08 <HAL_RTC_AlarmAEventCallback+0x3c>)
 8000eea:	2101      	movs	r1, #1
 8000eec:	0018      	movs	r0, r3
 8000eee:	f001 ff99 	bl	8002e24 <HAL_GPIO_TogglePin>
	HAL_RTC_DeactivateAlarm(hrtc, RTC_ALARM_A);
 8000ef2:	2380      	movs	r3, #128	; 0x80
 8000ef4:	005a      	lsls	r2, r3, #1
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	0011      	movs	r1, r2
 8000efa:	0018      	movs	r0, r3
 8000efc:	f003 fc18 	bl	8004730 <HAL_RTC_DeactivateAlarm>
}
 8000f00:	46c0      	nop			; (mov r8, r8)
 8000f02:	46bd      	mov	sp, r7
 8000f04:	b002      	add	sp, #8
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	50000800 	.word	0x50000800

08000f0c <getTime>:
}
// ---- end of callbacks ----

// ---- clock get functions ----
// maybe needs subseconds?
void getTime(RTC_HandleTypeDef *hrtc, struct times *t) {
 8000f0c:	b590      	push	{r4, r7, lr}
 8000f0e:	b089      	sub	sp, #36	; 0x24
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
 8000f14:	6039      	str	r1, [r7, #0]
	RTC_TimeTypeDef stime;

	// programming manual says to read time after date. something shadow registers.
	// not done automatically in HAL
	HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN);
 8000f16:	210c      	movs	r1, #12
 8000f18:	000c      	movs	r4, r1
 8000f1a:	1879      	adds	r1, r7, r1
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	2200      	movs	r2, #0
 8000f20:	0018      	movs	r0, r3
 8000f22:	f003 f961 	bl	80041e8 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(hrtc, NULL, RTC_FORMAT_BIN);
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	2200      	movs	r2, #0
 8000f2a:	2100      	movs	r1, #0
 8000f2c:	0018      	movs	r0, r3
 8000f2e:	f003 fa65 	bl	80043fc <HAL_RTC_GetDate>

	t->hr = stime.Hours;
 8000f32:	0021      	movs	r1, r4
 8000f34:	187b      	adds	r3, r7, r1
 8000f36:	781a      	ldrb	r2, [r3, #0]
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	701a      	strb	r2, [r3, #0]
	t->min = stime.Minutes;
 8000f3c:	187b      	adds	r3, r7, r1
 8000f3e:	785a      	ldrb	r2, [r3, #1]
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	705a      	strb	r2, [r3, #1]
	t->sec = stime.Seconds;
 8000f44:	187b      	adds	r3, r7, r1
 8000f46:	789a      	ldrb	r2, [r3, #2]
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	709a      	strb	r2, [r3, #2]
}
 8000f4c:	46c0      	nop			; (mov r8, r8)
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	b009      	add	sp, #36	; 0x24
 8000f52:	bd90      	pop	{r4, r7, pc}

08000f54 <getDate>:

void getDate(RTC_HandleTypeDef *hrtc, struct dates *d) {
 8000f54:	b590      	push	{r4, r7, lr}
 8000f56:	b085      	sub	sp, #20
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
 8000f5c:	6039      	str	r1, [r7, #0]
	RTC_DateTypeDef sdate;

	// programming manual says to read time after date. something shadow registers.
	// not done automatically in HAL
	HAL_RTC_GetTime(hrtc, NULL, RTC_FORMAT_BIN);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	2200      	movs	r2, #0
 8000f62:	2100      	movs	r1, #0
 8000f64:	0018      	movs	r0, r3
 8000f66:	f003 f93f 	bl	80041e8 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(hrtc, &sdate, RTC_FORMAT_BIN);
 8000f6a:	240c      	movs	r4, #12
 8000f6c:	1939      	adds	r1, r7, r4
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	2200      	movs	r2, #0
 8000f72:	0018      	movs	r0, r3
 8000f74:	f003 fa42 	bl	80043fc <HAL_RTC_GetDate>

	d->yr = sdate.Year > 50 ? sdate.Year+1900 : sdate.Year+2000;
 8000f78:	193b      	adds	r3, r7, r4
 8000f7a:	78db      	ldrb	r3, [r3, #3]
 8000f7c:	2b32      	cmp	r3, #50	; 0x32
 8000f7e:	d905      	bls.n	8000f8c <getDate+0x38>
 8000f80:	230c      	movs	r3, #12
 8000f82:	18fb      	adds	r3, r7, r3
 8000f84:	78db      	ldrb	r3, [r3, #3]
 8000f86:	336c      	adds	r3, #108	; 0x6c
 8000f88:	b2db      	uxtb	r3, r3
 8000f8a:	e004      	b.n	8000f96 <getDate+0x42>
 8000f8c:	230c      	movs	r3, #12
 8000f8e:	18fb      	adds	r3, r7, r3
 8000f90:	78db      	ldrb	r3, [r3, #3]
 8000f92:	3b30      	subs	r3, #48	; 0x30
 8000f94:	b2db      	uxtb	r3, r3
 8000f96:	683a      	ldr	r2, [r7, #0]
 8000f98:	7013      	strb	r3, [r2, #0]
	d->month = sdate.Month;
 8000f9a:	210c      	movs	r1, #12
 8000f9c:	187b      	adds	r3, r7, r1
 8000f9e:	785a      	ldrb	r2, [r3, #1]
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	705a      	strb	r2, [r3, #1]
	d->date = sdate.Date;
 8000fa4:	187b      	adds	r3, r7, r1
 8000fa6:	789a      	ldrb	r2, [r3, #2]
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	709a      	strb	r2, [r3, #2]
	d->weekday = sdate.WeekDay;
 8000fac:	187b      	adds	r3, r7, r1
 8000fae:	781a      	ldrb	r2, [r3, #0]
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	70da      	strb	r2, [r3, #3]
}
 8000fb4:	46c0      	nop			; (mov r8, r8)
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	b005      	add	sp, #20
 8000fba:	bd90      	pop	{r4, r7, pc}

08000fbc <printTime>:

// ---- clock print functions ----
// print functions for RTC
// assumes we're using SPI display and file TFT_display.c
// pulls date and time structs automatically to only print current time in RTC
void printTime(RTC_HandleTypeDef *hrtc, SPI_HandleTypeDef *hspi) {
 8000fbc:	b5b0      	push	{r4, r5, r7, lr}
 8000fbe:	b08e      	sub	sp, #56	; 0x38
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
 8000fc4:	6039      	str	r1, [r7, #0]
	char str[40];		// problems when using only char*

	struct times t;
	getTime(hrtc, &t);
 8000fc6:	250c      	movs	r5, #12
 8000fc8:	197a      	adds	r2, r7, r5
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	0011      	movs	r1, r2
 8000fce:	0018      	movs	r0, r3
 8000fd0:	f7ff ff9c 	bl	8000f0c <getTime>

	setTextColor(ST77XX_WHITE);
 8000fd4:	4b19      	ldr	r3, [pc, #100]	; (800103c <printTime+0x80>)
 8000fd6:	0018      	movs	r0, r3
 8000fd8:	f7ff fef4 	bl	8000dc4 <setTextColor>
	sprintf(str, "sec: %2d", t.sec);
 8000fdc:	197b      	adds	r3, r7, r5
 8000fde:	789b      	ldrb	r3, [r3, #2]
 8000fe0:	001a      	movs	r2, r3
 8000fe2:	4917      	ldr	r1, [pc, #92]	; (8001040 <printTime+0x84>)
 8000fe4:	2410      	movs	r4, #16
 8000fe6:	193b      	adds	r3, r7, r4
 8000fe8:	0018      	movs	r0, r3
 8000fea:	f004 fe0b 	bl	8005c04 <siprintf>
	drawTextAt(0, 0, str, hspi);
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	193a      	adds	r2, r7, r4
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	2000      	movs	r0, #0
 8000ff6:	f7ff febd 	bl	8000d74 <drawTextAt>
	sprintf(str, "min: %2d", t.min);
 8000ffa:	197b      	adds	r3, r7, r5
 8000ffc:	785b      	ldrb	r3, [r3, #1]
 8000ffe:	001a      	movs	r2, r3
 8001000:	4910      	ldr	r1, [pc, #64]	; (8001044 <printTime+0x88>)
 8001002:	193b      	adds	r3, r7, r4
 8001004:	0018      	movs	r0, r3
 8001006:	f004 fdfd 	bl	8005c04 <siprintf>
	drawTextAt(0, 10, str, hspi);
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	193a      	adds	r2, r7, r4
 800100e:	210a      	movs	r1, #10
 8001010:	2000      	movs	r0, #0
 8001012:	f7ff feaf 	bl	8000d74 <drawTextAt>
	sprintf(str, "hr: %3d", t.hr);
 8001016:	197b      	adds	r3, r7, r5
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	001a      	movs	r2, r3
 800101c:	490a      	ldr	r1, [pc, #40]	; (8001048 <printTime+0x8c>)
 800101e:	193b      	adds	r3, r7, r4
 8001020:	0018      	movs	r0, r3
 8001022:	f004 fdef 	bl	8005c04 <siprintf>
	drawTextAt(0, 20, str, hspi);
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	193a      	adds	r2, r7, r4
 800102a:	2114      	movs	r1, #20
 800102c:	2000      	movs	r0, #0
 800102e:	f7ff fea1 	bl	8000d74 <drawTextAt>
}
 8001032:	46c0      	nop			; (mov r8, r8)
 8001034:	46bd      	mov	sp, r7
 8001036:	b00e      	add	sp, #56	; 0x38
 8001038:	bdb0      	pop	{r4, r5, r7, pc}
 800103a:	46c0      	nop			; (mov r8, r8)
 800103c:	0000ffff 	.word	0x0000ffff
 8001040:	0800648c 	.word	0x0800648c
 8001044:	08006498 	.word	0x08006498
 8001048:	080064a4 	.word	0x080064a4

0800104c <printDate>:

void printDate(RTC_HandleTypeDef *hrtc, SPI_HandleTypeDef *hspi) {
 800104c:	b5b0      	push	{r4, r5, r7, lr}
 800104e:	b08e      	sub	sp, #56	; 0x38
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
 8001054:	6039      	str	r1, [r7, #0]
	char str[40];		// problems when using only char*

	struct dates d;
	getDate(hrtc, &d);
 8001056:	250c      	movs	r5, #12
 8001058:	197a      	adds	r2, r7, r5
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	0011      	movs	r1, r2
 800105e:	0018      	movs	r0, r3
 8001060:	f7ff ff78 	bl	8000f54 <getDate>

	setTextColor(ST77XX_WHITE);
 8001064:	4b20      	ldr	r3, [pc, #128]	; (80010e8 <printDate+0x9c>)
 8001066:	0018      	movs	r0, r3
 8001068:	f7ff feac 	bl	8000dc4 <setTextColor>
	sprintf(str, "year: %3d", d.yr);
 800106c:	197b      	adds	r3, r7, r5
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	001a      	movs	r2, r3
 8001072:	491e      	ldr	r1, [pc, #120]	; (80010ec <printDate+0xa0>)
 8001074:	2410      	movs	r4, #16
 8001076:	193b      	adds	r3, r7, r4
 8001078:	0018      	movs	r0, r3
 800107a:	f004 fdc3 	bl	8005c04 <siprintf>
	drawTextAt(0, 40, str, hspi);
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	193a      	adds	r2, r7, r4
 8001082:	2128      	movs	r1, #40	; 0x28
 8001084:	2000      	movs	r0, #0
 8001086:	f7ff fe75 	bl	8000d74 <drawTextAt>
	sprintf(str, "month: %4d", d.month);
 800108a:	197b      	adds	r3, r7, r5
 800108c:	785b      	ldrb	r3, [r3, #1]
 800108e:	001a      	movs	r2, r3
 8001090:	4917      	ldr	r1, [pc, #92]	; (80010f0 <printDate+0xa4>)
 8001092:	193b      	adds	r3, r7, r4
 8001094:	0018      	movs	r0, r3
 8001096:	f004 fdb5 	bl	8005c04 <siprintf>
	drawTextAt(0, 50, str, hspi);
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	193a      	adds	r2, r7, r4
 800109e:	2132      	movs	r1, #50	; 0x32
 80010a0:	2000      	movs	r0, #0
 80010a2:	f7ff fe67 	bl	8000d74 <drawTextAt>
	sprintf(str, "day: %2d", d.date);
 80010a6:	197b      	adds	r3, r7, r5
 80010a8:	789b      	ldrb	r3, [r3, #2]
 80010aa:	001a      	movs	r2, r3
 80010ac:	4911      	ldr	r1, [pc, #68]	; (80010f4 <printDate+0xa8>)
 80010ae:	193b      	adds	r3, r7, r4
 80010b0:	0018      	movs	r0, r3
 80010b2:	f004 fda7 	bl	8005c04 <siprintf>
	drawTextAt(0, 60, str, hspi);
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	193a      	adds	r2, r7, r4
 80010ba:	213c      	movs	r1, #60	; 0x3c
 80010bc:	2000      	movs	r0, #0
 80010be:	f7ff fe59 	bl	8000d74 <drawTextAt>
	sprintf(str, "day: %2d", d.weekday);	// probably not gonna show nice since its an enum
 80010c2:	197b      	adds	r3, r7, r5
 80010c4:	78db      	ldrb	r3, [r3, #3]
 80010c6:	001a      	movs	r2, r3
 80010c8:	490a      	ldr	r1, [pc, #40]	; (80010f4 <printDate+0xa8>)
 80010ca:	193b      	adds	r3, r7, r4
 80010cc:	0018      	movs	r0, r3
 80010ce:	f004 fd99 	bl	8005c04 <siprintf>
	drawTextAt(0, 70, str, hspi);
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	193a      	adds	r2, r7, r4
 80010d6:	2146      	movs	r1, #70	; 0x46
 80010d8:	2000      	movs	r0, #0
 80010da:	f7ff fe4b 	bl	8000d74 <drawTextAt>
}
 80010de:	46c0      	nop			; (mov r8, r8)
 80010e0:	46bd      	mov	sp, r7
 80010e2:	b00e      	add	sp, #56	; 0x38
 80010e4:	bdb0      	pop	{r4, r5, r7, pc}
 80010e6:	46c0      	nop			; (mov r8, r8)
 80010e8:	0000ffff 	.word	0x0000ffff
 80010ec:	080064ac 	.word	0x080064ac
 80010f0:	080064b8 	.word	0x080064b8
 80010f4:	080064c4 	.word	0x080064c4

080010f8 <printDateTime>:

void printDateTime(RTC_HandleTypeDef *hrtc, SPI_HandleTypeDef *hspi) {
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	6039      	str	r1, [r7, #0]
	printTime(hrtc, hspi);
 8001102:	683a      	ldr	r2, [r7, #0]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	0011      	movs	r1, r2
 8001108:	0018      	movs	r0, r3
 800110a:	f7ff ff57 	bl	8000fbc <printTime>
	printDate(hrtc, hspi);
 800110e:	683a      	ldr	r2, [r7, #0]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	0011      	movs	r1, r2
 8001114:	0018      	movs	r0, r3
 8001116:	f7ff ff99 	bl	800104c <printDate>
}
 800111a:	46c0      	nop			; (mov r8, r8)
 800111c:	46bd      	mov	sp, r7
 800111e:	b002      	add	sp, #8
 8001120:	bd80      	pop	{r7, pc}
	...

08001124 <clockTest>:
// ---- end of clock print functions ----

// tests clock functions. assumes SPI display using TFT_display.c is available
void clockTest(RTC_HandleTypeDef *hrtc, SPI_HandleTypeDef *hspi) {
 8001124:	b5b0      	push	{r4, r5, r7, lr}
 8001126:	b084      	sub	sp, #16
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
 800112c:	6039      	str	r1, [r7, #0]
	struct times t = {1, 1, 1};
 800112e:	250c      	movs	r5, #12
 8001130:	197b      	adds	r3, r7, r5
 8001132:	4a32      	ldr	r2, [pc, #200]	; (80011fc <clockTest+0xd8>)
 8001134:	8811      	ldrh	r1, [r2, #0]
 8001136:	8019      	strh	r1, [r3, #0]
 8001138:	7892      	ldrb	r2, [r2, #2]
 800113a:	709a      	strb	r2, [r3, #2]
	struct dates d = {19, 11, 13};
 800113c:	2408      	movs	r4, #8
 800113e:	193b      	adds	r3, r7, r4
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	193b      	adds	r3, r7, r4
 8001146:	2213      	movs	r2, #19
 8001148:	701a      	strb	r2, [r3, #0]
 800114a:	193b      	adds	r3, r7, r4
 800114c:	220b      	movs	r2, #11
 800114e:	705a      	strb	r2, [r3, #1]
 8001150:	193b      	adds	r3, r7, r4
 8001152:	220d      	movs	r2, #13
 8001154:	709a      	strb	r2, [r3, #2]

	HAL_Delay(1000);
 8001156:	23fa      	movs	r3, #250	; 0xfa
 8001158:	009b      	lsls	r3, r3, #2
 800115a:	0018      	movs	r0, r3
 800115c:	f000 ff7e 	bl	800205c <HAL_Delay>
	printDateTime(hrtc, hspi);
 8001160:	683a      	ldr	r2, [r7, #0]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	0011      	movs	r1, r2
 8001166:	0018      	movs	r0, r3
 8001168:	f7ff ffc6 	bl	80010f8 <printDateTime>
	HAL_Delay(2000);
 800116c:	23fa      	movs	r3, #250	; 0xfa
 800116e:	00db      	lsls	r3, r3, #3
 8001170:	0018      	movs	r0, r3
 8001172:	f000 ff73 	bl	800205c <HAL_Delay>
	printDateTime(hrtc, hspi);
 8001176:	683a      	ldr	r2, [r7, #0]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	0011      	movs	r1, r2
 800117c:	0018      	movs	r0, r3
 800117e:	f7ff ffbb 	bl	80010f8 <printDateTime>

	HAL_Delay(1000);
 8001182:	23fa      	movs	r3, #250	; 0xfa
 8001184:	009b      	lsls	r3, r3, #2
 8001186:	0018      	movs	r0, r3
 8001188:	f000 ff68 	bl	800205c <HAL_Delay>
	setTime(hrtc, &t);
 800118c:	197a      	adds	r2, r7, r5
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	0011      	movs	r1, r2
 8001192:	0018      	movs	r0, r3
 8001194:	f7ff fe26 	bl	8000de4 <setTime>
	printDateTime(hrtc, hspi);
 8001198:	683a      	ldr	r2, [r7, #0]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	0011      	movs	r1, r2
 800119e:	0018      	movs	r0, r3
 80011a0:	f7ff ffaa 	bl	80010f8 <printDateTime>
	HAL_Delay(1000);
 80011a4:	23fa      	movs	r3, #250	; 0xfa
 80011a6:	009b      	lsls	r3, r3, #2
 80011a8:	0018      	movs	r0, r3
 80011aa:	f000 ff57 	bl	800205c <HAL_Delay>
	printDateTime(hrtc, hspi);
 80011ae:	683a      	ldr	r2, [r7, #0]
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	0011      	movs	r1, r2
 80011b4:	0018      	movs	r0, r3
 80011b6:	f7ff ff9f 	bl	80010f8 <printDateTime>

	HAL_Delay(1000);
 80011ba:	23fa      	movs	r3, #250	; 0xfa
 80011bc:	009b      	lsls	r3, r3, #2
 80011be:	0018      	movs	r0, r3
 80011c0:	f000 ff4c 	bl	800205c <HAL_Delay>
	setDateTime(hrtc, &d, &t);
 80011c4:	197a      	adds	r2, r7, r5
 80011c6:	1939      	adds	r1, r7, r4
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	0018      	movs	r0, r3
 80011cc:	f7ff fe68 	bl	8000ea0 <setDateTime>
	printDateTime(hrtc, hspi);
 80011d0:	683a      	ldr	r2, [r7, #0]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	0011      	movs	r1, r2
 80011d6:	0018      	movs	r0, r3
 80011d8:	f7ff ff8e 	bl	80010f8 <printDateTime>
	HAL_Delay(1000);
 80011dc:	23fa      	movs	r3, #250	; 0xfa
 80011de:	009b      	lsls	r3, r3, #2
 80011e0:	0018      	movs	r0, r3
 80011e2:	f000 ff3b 	bl	800205c <HAL_Delay>
	printDateTime(hrtc, hspi);
 80011e6:	683a      	ldr	r2, [r7, #0]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	0011      	movs	r1, r2
 80011ec:	0018      	movs	r0, r3
 80011ee:	f7ff ff83 	bl	80010f8 <printDateTime>
}
 80011f2:	46c0      	nop			; (mov r8, r8)
 80011f4:	46bd      	mov	sp, r7
 80011f6:	b004      	add	sp, #16
 80011f8:	bdb0      	pop	{r4, r5, r7, pc}
 80011fa:	46c0      	nop			; (mov r8, r8)
 80011fc:	080064d0 	.word	0x080064d0

08001200 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001204:	f000 feca 	bl	8001f9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001208:	f000 f83a 	bl	8001280 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800120c:	f000 fada 	bl	80017c4 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001210:	f000 f9f4 	bl	80015fc <MX_SPI1_Init>
  MX_ADC_Init();
 8001214:	f000 f8b8 	bl	8001388 <MX_ADC_Init>
  MX_RTC_Init();
 8001218:	f000 f942 	bl	80014a0 <MX_RTC_Init>
  MX_TIM21_Init();
 800121c:	f000 fa26 	bl	800166c <MX_TIM21_Init>
  MX_LPTIM1_Init();
 8001220:	f000 f916 	bl	8001450 <MX_LPTIM1_Init>
  MX_DMA_Init();
 8001224:	f000 fab0 	bl	8001788 <MX_DMA_Init>
  /* USER CODE BEGIN 2 */
//	uint16_t bg = ST77XX_BLACK;
  	bg = ST77XX_BLACK;
 8001228:	4b11      	ldr	r3, [pc, #68]	; (8001270 <main+0x70>)
 800122a:	2200      	movs	r2, #0
 800122c:	801a      	strh	r2, [r3, #0]
	HAL_Delay(2000);
 800122e:	23fa      	movs	r3, #250	; 0xfa
 8001230:	00db      	lsls	r3, r3, #3
 8001232:	0018      	movs	r0, r3
 8001234:	f000 ff12 	bl	800205c <HAL_Delay>
	TFT_startup(&hspi1);
 8001238:	4b0e      	ldr	r3, [pc, #56]	; (8001274 <main+0x74>)
 800123a:	0018      	movs	r0, r3
 800123c:	f7ff f9ea 	bl	8000614 <TFT_startup>
	fillScreen(bg, &hspi1);
 8001240:	4b0b      	ldr	r3, [pc, #44]	; (8001270 <main+0x70>)
 8001242:	881b      	ldrh	r3, [r3, #0]
 8001244:	4a0b      	ldr	r2, [pc, #44]	; (8001274 <main+0x74>)
 8001246:	0011      	movs	r1, r2
 8001248:	0018      	movs	r0, r3
 800124a:	f7ff fc6f 	bl	8000b2c <fillScreen>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  // default
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
 800124e:	4b0a      	ldr	r3, [pc, #40]	; (8001278 <main+0x78>)
 8001250:	2102      	movs	r1, #2
 8001252:	0018      	movs	r0, r3
 8001254:	f001 fde6 	bl	8002e24 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 8001258:	23fa      	movs	r3, #250	; 0xfa
 800125a:	009b      	lsls	r3, r3, #2
 800125c:	0018      	movs	r0, r3
 800125e:	f000 fefd 	bl	800205c <HAL_Delay>

	  // clocks tests
	  // not a loopable test yet
	  clockTest(&hrtc, &hspi1);
 8001262:	4a04      	ldr	r2, [pc, #16]	; (8001274 <main+0x74>)
 8001264:	4b05      	ldr	r3, [pc, #20]	; (800127c <main+0x7c>)
 8001266:	0011      	movs	r1, r2
 8001268:	0018      	movs	r0, r3
 800126a:	f7ff ff5b 	bl	8001124 <clockTest>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
 800126e:	e7ee      	b.n	800124e <main+0x4e>
 8001270:	2000008c 	.word	0x2000008c
 8001274:	20000158 	.word	0x20000158
 8001278:	50000400 	.word	0x50000400
 800127c:	20000134 	.word	0x20000134

08001280 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001280:	b590      	push	{r4, r7, lr}
 8001282:	b09f      	sub	sp, #124	; 0x7c
 8001284:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001286:	2440      	movs	r4, #64	; 0x40
 8001288:	193b      	adds	r3, r7, r4
 800128a:	0018      	movs	r0, r3
 800128c:	2338      	movs	r3, #56	; 0x38
 800128e:	001a      	movs	r2, r3
 8001290:	2100      	movs	r1, #0
 8001292:	f004 fcae 	bl	8005bf2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001296:	232c      	movs	r3, #44	; 0x2c
 8001298:	18fb      	adds	r3, r7, r3
 800129a:	0018      	movs	r0, r3
 800129c:	2314      	movs	r3, #20
 800129e:	001a      	movs	r2, r3
 80012a0:	2100      	movs	r1, #0
 80012a2:	f004 fca6 	bl	8005bf2 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012a6:	1d3b      	adds	r3, r7, #4
 80012a8:	0018      	movs	r0, r3
 80012aa:	2328      	movs	r3, #40	; 0x28
 80012ac:	001a      	movs	r2, r3
 80012ae:	2100      	movs	r1, #0
 80012b0:	f004 fc9f 	bl	8005bf2 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012b4:	4b31      	ldr	r3, [pc, #196]	; (800137c <SystemClock_Config+0xfc>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a31      	ldr	r2, [pc, #196]	; (8001380 <SystemClock_Config+0x100>)
 80012ba:	401a      	ands	r2, r3
 80012bc:	4b2f      	ldr	r3, [pc, #188]	; (800137c <SystemClock_Config+0xfc>)
 80012be:	2180      	movs	r1, #128	; 0x80
 80012c0:	0109      	lsls	r1, r1, #4
 80012c2:	430a      	orrs	r2, r1
 80012c4:	601a      	str	r2, [r3, #0]
  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 80012c6:	f001 ff2d 	bl	8003124 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80012ca:	4b2e      	ldr	r3, [pc, #184]	; (8001384 <SystemClock_Config+0x104>)
 80012cc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80012ce:	4b2d      	ldr	r3, [pc, #180]	; (8001384 <SystemClock_Config+0x104>)
 80012d0:	492b      	ldr	r1, [pc, #172]	; (8001380 <SystemClock_Config+0x100>)
 80012d2:	400a      	ands	r2, r1
 80012d4:	651a      	str	r2, [r3, #80]	; 0x50
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
 80012d6:	193b      	adds	r3, r7, r4
 80012d8:	223c      	movs	r2, #60	; 0x3c
 80012da:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80012dc:	193b      	adds	r3, r7, r4
 80012de:	2280      	movs	r2, #128	; 0x80
 80012e0:	0052      	lsls	r2, r2, #1
 80012e2:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80012e4:	0021      	movs	r1, r4
 80012e6:	187b      	adds	r3, r7, r1
 80012e8:	2201      	movs	r2, #1
 80012ea:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80012ec:	187b      	adds	r3, r7, r1
 80012ee:	2201      	movs	r2, #1
 80012f0:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80012f2:	187b      	adds	r3, r7, r1
 80012f4:	2201      	movs	r2, #1
 80012f6:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80012f8:	187b      	adds	r3, r7, r1
 80012fa:	2200      	movs	r2, #0
 80012fc:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 80012fe:	187b      	adds	r3, r7, r1
 8001300:	22a0      	movs	r2, #160	; 0xa0
 8001302:	0212      	lsls	r2, r2, #8
 8001304:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001306:	187b      	adds	r3, r7, r1
 8001308:	2200      	movs	r2, #0
 800130a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800130c:	187b      	adds	r3, r7, r1
 800130e:	0018      	movs	r0, r3
 8001310:	f001 ff16 	bl	8003140 <HAL_RCC_OscConfig>
 8001314:	1e03      	subs	r3, r0, #0
 8001316:	d001      	beq.n	800131c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001318:	f000 fb02 	bl	8001920 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800131c:	212c      	movs	r1, #44	; 0x2c
 800131e:	187b      	adds	r3, r7, r1
 8001320:	220f      	movs	r2, #15
 8001322:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001324:	187b      	adds	r3, r7, r1
 8001326:	2200      	movs	r2, #0
 8001328:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800132a:	187b      	adds	r3, r7, r1
 800132c:	2200      	movs	r2, #0
 800132e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001330:	187b      	adds	r3, r7, r1
 8001332:	2200      	movs	r2, #0
 8001334:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001336:	187b      	adds	r3, r7, r1
 8001338:	2200      	movs	r2, #0
 800133a:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800133c:	187b      	adds	r3, r7, r1
 800133e:	2100      	movs	r1, #0
 8001340:	0018      	movs	r0, r3
 8001342:	f002 facd 	bl	80038e0 <HAL_RCC_ClockConfig>
 8001346:	1e03      	subs	r3, r0, #0
 8001348:	d001      	beq.n	800134e <SystemClock_Config+0xce>
  {
    Error_Handler();
 800134a:	f000 fae9 	bl	8001920 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_LPTIM1;
 800134e:	1d3b      	adds	r3, r7, #4
 8001350:	22a0      	movs	r2, #160	; 0xa0
 8001352:	601a      	str	r2, [r3, #0]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001354:	1d3b      	adds	r3, r7, #4
 8001356:	2280      	movs	r2, #128	; 0x80
 8001358:	0292      	lsls	r2, r2, #10
 800135a:	605a      	str	r2, [r3, #4]
  PeriphClkInit.LptimClockSelection = RCC_LPTIM1CLKSOURCE_PCLK;
 800135c:	1d3b      	adds	r3, r7, #4
 800135e:	2200      	movs	r2, #0
 8001360:	621a      	str	r2, [r3, #32]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001362:	1d3b      	adds	r3, r7, #4
 8001364:	0018      	movs	r0, r3
 8001366:	f002 fc69 	bl	8003c3c <HAL_RCCEx_PeriphCLKConfig>
 800136a:	1e03      	subs	r3, r0, #0
 800136c:	d001      	beq.n	8001372 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 800136e:	f000 fad7 	bl	8001920 <Error_Handler>
  }
}
 8001372:	46c0      	nop			; (mov r8, r8)
 8001374:	46bd      	mov	sp, r7
 8001376:	b01f      	add	sp, #124	; 0x7c
 8001378:	bd90      	pop	{r4, r7, pc}
 800137a:	46c0      	nop			; (mov r8, r8)
 800137c:	40007000 	.word	0x40007000
 8001380:	ffffe7ff 	.word	0xffffe7ff
 8001384:	40021000 	.word	0x40021000

08001388 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800138e:	003b      	movs	r3, r7
 8001390:	0018      	movs	r0, r3
 8001392:	2308      	movs	r3, #8
 8001394:	001a      	movs	r2, r3
 8001396:	2100      	movs	r1, #0
 8001398:	f004 fc2b 	bl	8005bf2 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc.Instance = ADC1;
 800139c:	4b2a      	ldr	r3, [pc, #168]	; (8001448 <MX_ADC_Init+0xc0>)
 800139e:	4a2b      	ldr	r2, [pc, #172]	; (800144c <MX_ADC_Init+0xc4>)
 80013a0:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 80013a2:	4b29      	ldr	r3, [pc, #164]	; (8001448 <MX_ADC_Init+0xc0>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 80013a8:	4b27      	ldr	r3, [pc, #156]	; (8001448 <MX_ADC_Init+0xc0>)
 80013aa:	22c0      	movs	r2, #192	; 0xc0
 80013ac:	0612      	lsls	r2, r2, #24
 80013ae:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80013b0:	4b25      	ldr	r3, [pc, #148]	; (8001448 <MX_ADC_Init+0xc0>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80013b6:	4b24      	ldr	r3, [pc, #144]	; (8001448 <MX_ADC_Init+0xc0>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80013bc:	4b22      	ldr	r3, [pc, #136]	; (8001448 <MX_ADC_Init+0xc0>)
 80013be:	2201      	movs	r2, #1
 80013c0:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013c2:	4b21      	ldr	r3, [pc, #132]	; (8001448 <MX_ADC_Init+0xc0>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 80013c8:	4b1f      	ldr	r3, [pc, #124]	; (8001448 <MX_ADC_Init+0xc0>)
 80013ca:	2220      	movs	r2, #32
 80013cc:	2100      	movs	r1, #0
 80013ce:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80013d0:	4b1d      	ldr	r3, [pc, #116]	; (8001448 <MX_ADC_Init+0xc0>)
 80013d2:	2221      	movs	r2, #33	; 0x21
 80013d4:	2100      	movs	r1, #0
 80013d6:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013d8:	4b1b      	ldr	r3, [pc, #108]	; (8001448 <MX_ADC_Init+0xc0>)
 80013da:	2200      	movs	r2, #0
 80013dc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013de:	4b1a      	ldr	r3, [pc, #104]	; (8001448 <MX_ADC_Init+0xc0>)
 80013e0:	22c2      	movs	r2, #194	; 0xc2
 80013e2:	32ff      	adds	r2, #255	; 0xff
 80013e4:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 80013e6:	4b18      	ldr	r3, [pc, #96]	; (8001448 <MX_ADC_Init+0xc0>)
 80013e8:	222c      	movs	r2, #44	; 0x2c
 80013ea:	2100      	movs	r1, #0
 80013ec:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013ee:	4b16      	ldr	r3, [pc, #88]	; (8001448 <MX_ADC_Init+0xc0>)
 80013f0:	2204      	movs	r2, #4
 80013f2:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80013f4:	4b14      	ldr	r3, [pc, #80]	; (8001448 <MX_ADC_Init+0xc0>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 80013fa:	4b13      	ldr	r3, [pc, #76]	; (8001448 <MX_ADC_Init+0xc0>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8001400:	4b11      	ldr	r3, [pc, #68]	; (8001448 <MX_ADC_Init+0xc0>)
 8001402:	2200      	movs	r2, #0
 8001404:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8001406:	4b10      	ldr	r3, [pc, #64]	; (8001448 <MX_ADC_Init+0xc0>)
 8001408:	2200      	movs	r2, #0
 800140a:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800140c:	4b0e      	ldr	r3, [pc, #56]	; (8001448 <MX_ADC_Init+0xc0>)
 800140e:	0018      	movs	r0, r3
 8001410:	f000 fe42 	bl	8002098 <HAL_ADC_Init>
 8001414:	1e03      	subs	r3, r0, #0
 8001416:	d001      	beq.n	800141c <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8001418:	f000 fa82 	bl	8001920 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800141c:	003b      	movs	r3, r7
 800141e:	2201      	movs	r2, #1
 8001420:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8001422:	003b      	movs	r3, r7
 8001424:	2280      	movs	r2, #128	; 0x80
 8001426:	0152      	lsls	r2, r2, #5
 8001428:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800142a:	003a      	movs	r2, r7
 800142c:	4b06      	ldr	r3, [pc, #24]	; (8001448 <MX_ADC_Init+0xc0>)
 800142e:	0011      	movs	r1, r2
 8001430:	0018      	movs	r0, r3
 8001432:	f000 ffa5 	bl	8002380 <HAL_ADC_ConfigChannel>
 8001436:	1e03      	subs	r3, r0, #0
 8001438:	d001      	beq.n	800143e <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 800143a:	f000 fa71 	bl	8001920 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800143e:	46c0      	nop			; (mov r8, r8)
 8001440:	46bd      	mov	sp, r7
 8001442:	b002      	add	sp, #8
 8001444:	bd80      	pop	{r7, pc}
 8001446:	46c0      	nop			; (mov r8, r8)
 8001448:	200001b0 	.word	0x200001b0
 800144c:	40012400 	.word	0x40012400

08001450 <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8001454:	4b0f      	ldr	r3, [pc, #60]	; (8001494 <MX_LPTIM1_Init+0x44>)
 8001456:	4a10      	ldr	r2, [pc, #64]	; (8001498 <MX_LPTIM1_Init+0x48>)
 8001458:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 800145a:	4b0e      	ldr	r3, [pc, #56]	; (8001494 <MX_LPTIM1_Init+0x44>)
 800145c:	2200      	movs	r2, #0
 800145e:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8001460:	4b0c      	ldr	r3, [pc, #48]	; (8001494 <MX_LPTIM1_Init+0x44>)
 8001462:	2200      	movs	r2, #0
 8001464:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8001466:	4b0b      	ldr	r3, [pc, #44]	; (8001494 <MX_LPTIM1_Init+0x44>)
 8001468:	4a0c      	ldr	r2, [pc, #48]	; (800149c <MX_LPTIM1_Init+0x4c>)
 800146a:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 800146c:	4b09      	ldr	r3, [pc, #36]	; (8001494 <MX_LPTIM1_Init+0x44>)
 800146e:	2200      	movs	r2, #0
 8001470:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8001472:	4b08      	ldr	r3, [pc, #32]	; (8001494 <MX_LPTIM1_Init+0x44>)
 8001474:	2200      	movs	r2, #0
 8001476:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8001478:	4b06      	ldr	r3, [pc, #24]	; (8001494 <MX_LPTIM1_Init+0x44>)
 800147a:	2200      	movs	r2, #0
 800147c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 800147e:	4b05      	ldr	r3, [pc, #20]	; (8001494 <MX_LPTIM1_Init+0x44>)
 8001480:	0018      	movs	r0, r3
 8001482:	f001 fcfd 	bl	8002e80 <HAL_LPTIM_Init>
 8001486:	1e03      	subs	r3, r0, #0
 8001488:	d001      	beq.n	800148e <MX_LPTIM1_Init+0x3e>
  {
    Error_Handler();
 800148a:	f000 fa49 	bl	8001920 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 800148e:	46c0      	nop			; (mov r8, r8)
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	20000104 	.word	0x20000104
 8001498:	40007c00 	.word	0x40007c00
 800149c:	0000ffff 	.word	0x0000ffff

080014a0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b090      	sub	sp, #64	; 0x40
 80014a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80014a6:	232c      	movs	r3, #44	; 0x2c
 80014a8:	18fb      	adds	r3, r7, r3
 80014aa:	0018      	movs	r0, r3
 80014ac:	2314      	movs	r3, #20
 80014ae:	001a      	movs	r2, r3
 80014b0:	2100      	movs	r1, #0
 80014b2:	f004 fb9e 	bl	8005bf2 <memset>
  RTC_DateTypeDef sDate = {0};
 80014b6:	2328      	movs	r3, #40	; 0x28
 80014b8:	18fb      	adds	r3, r7, r3
 80014ba:	2200      	movs	r2, #0
 80014bc:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 80014be:	003b      	movs	r3, r7
 80014c0:	0018      	movs	r0, r3
 80014c2:	2328      	movs	r3, #40	; 0x28
 80014c4:	001a      	movs	r2, r3
 80014c6:	2100      	movs	r1, #0
 80014c8:	f004 fb93 	bl	8005bf2 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 80014cc:	4b49      	ldr	r3, [pc, #292]	; (80015f4 <MX_RTC_Init+0x154>)
 80014ce:	4a4a      	ldr	r2, [pc, #296]	; (80015f8 <MX_RTC_Init+0x158>)
 80014d0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80014d2:	4b48      	ldr	r3, [pc, #288]	; (80015f4 <MX_RTC_Init+0x154>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80014d8:	4b46      	ldr	r3, [pc, #280]	; (80015f4 <MX_RTC_Init+0x154>)
 80014da:	227f      	movs	r2, #127	; 0x7f
 80014dc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80014de:	4b45      	ldr	r3, [pc, #276]	; (80015f4 <MX_RTC_Init+0x154>)
 80014e0:	22ff      	movs	r2, #255	; 0xff
 80014e2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80014e4:	4b43      	ldr	r3, [pc, #268]	; (80015f4 <MX_RTC_Init+0x154>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80014ea:	4b42      	ldr	r3, [pc, #264]	; (80015f4 <MX_RTC_Init+0x154>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80014f0:	4b40      	ldr	r3, [pc, #256]	; (80015f4 <MX_RTC_Init+0x154>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80014f6:	4b3f      	ldr	r3, [pc, #252]	; (80015f4 <MX_RTC_Init+0x154>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80014fc:	4b3d      	ldr	r3, [pc, #244]	; (80015f4 <MX_RTC_Init+0x154>)
 80014fe:	0018      	movs	r0, r3
 8001500:	f002 fd10 	bl	8003f24 <HAL_RTC_Init>
 8001504:	1e03      	subs	r3, r0, #0
 8001506:	d001      	beq.n	800150c <MX_RTC_Init+0x6c>
  {
    Error_Handler();
 8001508:	f000 fa0a 	bl	8001920 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0;
 800150c:	212c      	movs	r1, #44	; 0x2c
 800150e:	187b      	adds	r3, r7, r1
 8001510:	2200      	movs	r2, #0
 8001512:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0;
 8001514:	187b      	adds	r3, r7, r1
 8001516:	2200      	movs	r2, #0
 8001518:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 800151a:	187b      	adds	r3, r7, r1
 800151c:	2200      	movs	r2, #0
 800151e:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001520:	187b      	adds	r3, r7, r1
 8001522:	2200      	movs	r2, #0
 8001524:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001526:	187b      	adds	r3, r7, r1
 8001528:	2200      	movs	r2, #0
 800152a:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800152c:	1879      	adds	r1, r7, r1
 800152e:	4b31      	ldr	r3, [pc, #196]	; (80015f4 <MX_RTC_Init+0x154>)
 8001530:	2200      	movs	r2, #0
 8001532:	0018      	movs	r0, r3
 8001534:	f002 fd94 	bl	8004060 <HAL_RTC_SetTime>
 8001538:	1e03      	subs	r3, r0, #0
 800153a:	d001      	beq.n	8001540 <MX_RTC_Init+0xa0>
  {
    Error_Handler();
 800153c:	f000 f9f0 	bl	8001920 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001540:	2128      	movs	r1, #40	; 0x28
 8001542:	187b      	adds	r3, r7, r1
 8001544:	2201      	movs	r2, #1
 8001546:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001548:	187b      	adds	r3, r7, r1
 800154a:	2201      	movs	r2, #1
 800154c:	705a      	strb	r2, [r3, #1]
  sDate.Date = 1;
 800154e:	187b      	adds	r3, r7, r1
 8001550:	2201      	movs	r2, #1
 8001552:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0;
 8001554:	187b      	adds	r3, r7, r1
 8001556:	2200      	movs	r2, #0
 8001558:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800155a:	1879      	adds	r1, r7, r1
 800155c:	4b25      	ldr	r3, [pc, #148]	; (80015f4 <MX_RTC_Init+0x154>)
 800155e:	2200      	movs	r2, #0
 8001560:	0018      	movs	r0, r3
 8001562:	f002 fe9d 	bl	80042a0 <HAL_RTC_SetDate>
 8001566:	1e03      	subs	r3, r0, #0
 8001568:	d001      	beq.n	800156e <MX_RTC_Init+0xce>
  {
    Error_Handler();
 800156a:	f000 f9d9 	bl	8001920 <Error_Handler>
  }
  /** Enable the Alarm A 
  */
  sAlarm.AlarmTime.Hours = 0;
 800156e:	003b      	movs	r3, r7
 8001570:	2200      	movs	r2, #0
 8001572:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0;
 8001574:	003b      	movs	r3, r7
 8001576:	2200      	movs	r2, #0
 8001578:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0;
 800157a:	003b      	movs	r3, r7
 800157c:	2200      	movs	r2, #0
 800157e:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 8001580:	003b      	movs	r3, r7
 8001582:	2200      	movs	r2, #0
 8001584:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001586:	003b      	movs	r3, r7
 8001588:	2200      	movs	r2, #0
 800158a:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800158c:	003b      	movs	r3, r7
 800158e:	2200      	movs	r2, #0
 8001590:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001592:	003b      	movs	r3, r7
 8001594:	2200      	movs	r2, #0
 8001596:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001598:	003b      	movs	r3, r7
 800159a:	2200      	movs	r2, #0
 800159c:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800159e:	003b      	movs	r3, r7
 80015a0:	2200      	movs	r2, #0
 80015a2:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 1;
 80015a4:	003b      	movs	r3, r7
 80015a6:	2220      	movs	r2, #32
 80015a8:	2101      	movs	r1, #1
 80015aa:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 80015ac:	003b      	movs	r3, r7
 80015ae:	2280      	movs	r2, #128	; 0x80
 80015b0:	0052      	lsls	r2, r2, #1
 80015b2:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 80015b4:	0039      	movs	r1, r7
 80015b6:	4b0f      	ldr	r3, [pc, #60]	; (80015f4 <MX_RTC_Init+0x154>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	0018      	movs	r0, r3
 80015bc:	f002 ff6c 	bl	8004498 <HAL_RTC_SetAlarm_IT>
 80015c0:	1e03      	subs	r3, r0, #0
 80015c2:	d001      	beq.n	80015c8 <MX_RTC_Init+0x128>
  {
    Error_Handler();
 80015c4:	f000 f9ac 	bl	8001920 <Error_Handler>
  }
  /** Enable the Alarm B 
  */
  sAlarm.AlarmDateWeekDay = 1;
 80015c8:	003b      	movs	r3, r7
 80015ca:	2220      	movs	r2, #32
 80015cc:	2101      	movs	r1, #1
 80015ce:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_B;
 80015d0:	003b      	movs	r3, r7
 80015d2:	2280      	movs	r2, #128	; 0x80
 80015d4:	0092      	lsls	r2, r2, #2
 80015d6:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 80015d8:	0039      	movs	r1, r7
 80015da:	4b06      	ldr	r3, [pc, #24]	; (80015f4 <MX_RTC_Init+0x154>)
 80015dc:	2200      	movs	r2, #0
 80015de:	0018      	movs	r0, r3
 80015e0:	f002 ff5a 	bl	8004498 <HAL_RTC_SetAlarm_IT>
 80015e4:	1e03      	subs	r3, r0, #0
 80015e6:	d001      	beq.n	80015ec <MX_RTC_Init+0x14c>
  {
    Error_Handler();
 80015e8:	f000 f99a 	bl	8001920 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80015ec:	46c0      	nop			; (mov r8, r8)
 80015ee:	46bd      	mov	sp, r7
 80015f0:	b010      	add	sp, #64	; 0x40
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	20000134 	.word	0x20000134
 80015f8:	40002800 	.word	0x40002800

080015fc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001600:	4b18      	ldr	r3, [pc, #96]	; (8001664 <MX_SPI1_Init+0x68>)
 8001602:	4a19      	ldr	r2, [pc, #100]	; (8001668 <MX_SPI1_Init+0x6c>)
 8001604:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001606:	4b17      	ldr	r3, [pc, #92]	; (8001664 <MX_SPI1_Init+0x68>)
 8001608:	2282      	movs	r2, #130	; 0x82
 800160a:	0052      	lsls	r2, r2, #1
 800160c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800160e:	4b15      	ldr	r3, [pc, #84]	; (8001664 <MX_SPI1_Init+0x68>)
 8001610:	2200      	movs	r2, #0
 8001612:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001614:	4b13      	ldr	r3, [pc, #76]	; (8001664 <MX_SPI1_Init+0x68>)
 8001616:	2200      	movs	r2, #0
 8001618:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800161a:	4b12      	ldr	r3, [pc, #72]	; (8001664 <MX_SPI1_Init+0x68>)
 800161c:	2200      	movs	r2, #0
 800161e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001620:	4b10      	ldr	r3, [pc, #64]	; (8001664 <MX_SPI1_Init+0x68>)
 8001622:	2200      	movs	r2, #0
 8001624:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001626:	4b0f      	ldr	r3, [pc, #60]	; (8001664 <MX_SPI1_Init+0x68>)
 8001628:	2280      	movs	r2, #128	; 0x80
 800162a:	0092      	lsls	r2, r2, #2
 800162c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800162e:	4b0d      	ldr	r3, [pc, #52]	; (8001664 <MX_SPI1_Init+0x68>)
 8001630:	2200      	movs	r2, #0
 8001632:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001634:	4b0b      	ldr	r3, [pc, #44]	; (8001664 <MX_SPI1_Init+0x68>)
 8001636:	2200      	movs	r2, #0
 8001638:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800163a:	4b0a      	ldr	r3, [pc, #40]	; (8001664 <MX_SPI1_Init+0x68>)
 800163c:	2200      	movs	r2, #0
 800163e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001640:	4b08      	ldr	r3, [pc, #32]	; (8001664 <MX_SPI1_Init+0x68>)
 8001642:	2200      	movs	r2, #0
 8001644:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001646:	4b07      	ldr	r3, [pc, #28]	; (8001664 <MX_SPI1_Init+0x68>)
 8001648:	2207      	movs	r2, #7
 800164a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800164c:	4b05      	ldr	r3, [pc, #20]	; (8001664 <MX_SPI1_Init+0x68>)
 800164e:	0018      	movs	r0, r3
 8001650:	f003 f9fc 	bl	8004a4c <HAL_SPI_Init>
 8001654:	1e03      	subs	r3, r0, #0
 8001656:	d001      	beq.n	800165c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001658:	f000 f962 	bl	8001920 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800165c:	46c0      	nop			; (mov r8, r8)
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	46c0      	nop			; (mov r8, r8)
 8001664:	20000158 	.word	0x20000158
 8001668:	40013000 	.word	0x40013000

0800166c <MX_TIM21_Init>:
  * @brief TIM21 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM21_Init(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b08a      	sub	sp, #40	; 0x28
 8001670:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM21_Init 0 */

  /* USER CODE END TIM21_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001672:	2318      	movs	r3, #24
 8001674:	18fb      	adds	r3, r7, r3
 8001676:	0018      	movs	r0, r3
 8001678:	2310      	movs	r3, #16
 800167a:	001a      	movs	r2, r3
 800167c:	2100      	movs	r1, #0
 800167e:	f004 fab8 	bl	8005bf2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001682:	2310      	movs	r3, #16
 8001684:	18fb      	adds	r3, r7, r3
 8001686:	0018      	movs	r0, r3
 8001688:	2308      	movs	r3, #8
 800168a:	001a      	movs	r2, r3
 800168c:	2100      	movs	r1, #0
 800168e:	f004 fab0 	bl	8005bf2 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001692:	003b      	movs	r3, r7
 8001694:	0018      	movs	r0, r3
 8001696:	2310      	movs	r3, #16
 8001698:	001a      	movs	r2, r3
 800169a:	2100      	movs	r1, #0
 800169c:	f004 faa9 	bl	8005bf2 <memset>

  /* USER CODE BEGIN TIM21_Init 1 */

  /* USER CODE END TIM21_Init 1 */
  htim21.Instance = TIM21;
 80016a0:	4b37      	ldr	r3, [pc, #220]	; (8001780 <MX_TIM21_Init+0x114>)
 80016a2:	4a38      	ldr	r2, [pc, #224]	; (8001784 <MX_TIM21_Init+0x118>)
 80016a4:	601a      	str	r2, [r3, #0]
  htim21.Init.Prescaler = 0;
 80016a6:	4b36      	ldr	r3, [pc, #216]	; (8001780 <MX_TIM21_Init+0x114>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	605a      	str	r2, [r3, #4]
  htim21.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 80016ac:	4b34      	ldr	r3, [pc, #208]	; (8001780 <MX_TIM21_Init+0x114>)
 80016ae:	2210      	movs	r2, #16
 80016b0:	609a      	str	r2, [r3, #8]
  htim21.Init.Period = 0x8000;
 80016b2:	4b33      	ldr	r3, [pc, #204]	; (8001780 <MX_TIM21_Init+0x114>)
 80016b4:	2280      	movs	r2, #128	; 0x80
 80016b6:	0212      	lsls	r2, r2, #8
 80016b8:	60da      	str	r2, [r3, #12]
  htim21.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016ba:	4b31      	ldr	r3, [pc, #196]	; (8001780 <MX_TIM21_Init+0x114>)
 80016bc:	2200      	movs	r2, #0
 80016be:	611a      	str	r2, [r3, #16]
  htim21.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016c0:	4b2f      	ldr	r3, [pc, #188]	; (8001780 <MX_TIM21_Init+0x114>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim21) != HAL_OK)
 80016c6:	4b2e      	ldr	r3, [pc, #184]	; (8001780 <MX_TIM21_Init+0x114>)
 80016c8:	0018      	movs	r0, r3
 80016ca:	f003 fe96 	bl	80053fa <HAL_TIM_Base_Init>
 80016ce:	1e03      	subs	r3, r0, #0
 80016d0:	d001      	beq.n	80016d6 <MX_TIM21_Init+0x6a>
  {
    Error_Handler();
 80016d2:	f000 f925 	bl	8001920 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 80016d6:	2118      	movs	r1, #24
 80016d8:	187b      	adds	r3, r7, r1
 80016da:	2280      	movs	r2, #128	; 0x80
 80016dc:	0192      	lsls	r2, r2, #6
 80016de:	601a      	str	r2, [r3, #0]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 80016e0:	187b      	adds	r3, r7, r1
 80016e2:	2200      	movs	r2, #0
 80016e4:	605a      	str	r2, [r3, #4]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 80016e6:	187b      	adds	r3, r7, r1
 80016e8:	2200      	movs	r2, #0
 80016ea:	609a      	str	r2, [r3, #8]
  sClockSourceConfig.ClockFilter = 0;
 80016ec:	187b      	adds	r3, r7, r1
 80016ee:	2200      	movs	r2, #0
 80016f0:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_ConfigClockSource(&htim21, &sClockSourceConfig) != HAL_OK)
 80016f2:	187a      	adds	r2, r7, r1
 80016f4:	4b22      	ldr	r3, [pc, #136]	; (8001780 <MX_TIM21_Init+0x114>)
 80016f6:	0011      	movs	r1, r2
 80016f8:	0018      	movs	r0, r3
 80016fa:	f003 ff2d 	bl	8005558 <HAL_TIM_ConfigClockSource>
 80016fe:	1e03      	subs	r3, r0, #0
 8001700:	d001      	beq.n	8001706 <MX_TIM21_Init+0x9a>
  {
    Error_Handler();
 8001702:	f000 f90d 	bl	8001920 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim21) != HAL_OK)
 8001706:	4b1e      	ldr	r3, [pc, #120]	; (8001780 <MX_TIM21_Init+0x114>)
 8001708:	0018      	movs	r0, r3
 800170a:	f003 fea2 	bl	8005452 <HAL_TIM_OC_Init>
 800170e:	1e03      	subs	r3, r0, #0
 8001710:	d001      	beq.n	8001716 <MX_TIM21_Init+0xaa>
  {
    Error_Handler();
 8001712:	f000 f905 	bl	8001920 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001716:	2110      	movs	r1, #16
 8001718:	187b      	adds	r3, r7, r1
 800171a:	2200      	movs	r2, #0
 800171c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800171e:	187b      	adds	r3, r7, r1
 8001720:	2200      	movs	r2, #0
 8001722:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim21, &sMasterConfig) != HAL_OK)
 8001724:	187a      	adds	r2, r7, r1
 8001726:	4b16      	ldr	r3, [pc, #88]	; (8001780 <MX_TIM21_Init+0x114>)
 8001728:	0011      	movs	r1, r2
 800172a:	0018      	movs	r0, r3
 800172c:	f004 f9ce 	bl	8005acc <HAL_TIMEx_MasterConfigSynchronization>
 8001730:	1e03      	subs	r3, r0, #0
 8001732:	d001      	beq.n	8001738 <MX_TIM21_Init+0xcc>
  {
    Error_Handler();
 8001734:	f000 f8f4 	bl	8001920 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim21, TIM21_ETR_LSE) != HAL_OK)
 8001738:	4b11      	ldr	r3, [pc, #68]	; (8001780 <MX_TIM21_Init+0x114>)
 800173a:	2103      	movs	r1, #3
 800173c:	0018      	movs	r0, r3
 800173e:	f004 fa08 	bl	8005b52 <HAL_TIMEx_RemapConfig>
 8001742:	1e03      	subs	r3, r0, #0
 8001744:	d001      	beq.n	800174a <MX_TIM21_Init+0xde>
  {
    Error_Handler();
 8001746:	f000 f8eb 	bl	8001920 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800174a:	003b      	movs	r3, r7
 800174c:	2200      	movs	r2, #0
 800174e:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001750:	003b      	movs	r3, r7
 8001752:	2200      	movs	r2, #0
 8001754:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001756:	003b      	movs	r3, r7
 8001758:	2200      	movs	r2, #0
 800175a:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800175c:	003b      	movs	r3, r7
 800175e:	2200      	movs	r2, #0
 8001760:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_OC_ConfigChannel(&htim21, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001762:	0039      	movs	r1, r7
 8001764:	4b06      	ldr	r3, [pc, #24]	; (8001780 <MX_TIM21_Init+0x114>)
 8001766:	2200      	movs	r2, #0
 8001768:	0018      	movs	r0, r3
 800176a:	f003 fea6 	bl	80054ba <HAL_TIM_OC_ConfigChannel>
 800176e:	1e03      	subs	r3, r0, #0
 8001770:	d001      	beq.n	8001776 <MX_TIM21_Init+0x10a>
  {
    Error_Handler();
 8001772:	f000 f8d5 	bl	8001920 <Error_Handler>
  }
  /* USER CODE BEGIN TIM21_Init 2 */

  /* USER CODE END TIM21_Init 2 */

}
 8001776:	46c0      	nop			; (mov r8, r8)
 8001778:	46bd      	mov	sp, r7
 800177a:	b00a      	add	sp, #40	; 0x28
 800177c:	bd80      	pop	{r7, pc}
 800177e:	46c0      	nop			; (mov r8, r8)
 8001780:	20000268 	.word	0x20000268
 8001784:	40010800 	.word	0x40010800

08001788 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800178e:	4b0c      	ldr	r3, [pc, #48]	; (80017c0 <MX_DMA_Init+0x38>)
 8001790:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001792:	4b0b      	ldr	r3, [pc, #44]	; (80017c0 <MX_DMA_Init+0x38>)
 8001794:	2101      	movs	r1, #1
 8001796:	430a      	orrs	r2, r1
 8001798:	631a      	str	r2, [r3, #48]	; 0x30
 800179a:	4b09      	ldr	r3, [pc, #36]	; (80017c0 <MX_DMA_Init+0x38>)
 800179c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179e:	2201      	movs	r2, #1
 80017a0:	4013      	ands	r3, r2
 80017a2:	607b      	str	r3, [r7, #4]
 80017a4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80017a6:	2200      	movs	r2, #0
 80017a8:	2100      	movs	r1, #0
 80017aa:	200a      	movs	r0, #10
 80017ac:	f000 ff4e 	bl	800264c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80017b0:	200a      	movs	r0, #10
 80017b2:	f000 ff60 	bl	8002676 <HAL_NVIC_EnableIRQ>

}
 80017b6:	46c0      	nop			; (mov r8, r8)
 80017b8:	46bd      	mov	sp, r7
 80017ba:	b002      	add	sp, #8
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	46c0      	nop			; (mov r8, r8)
 80017c0:	40021000 	.word	0x40021000

080017c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017c4:	b590      	push	{r4, r7, lr}
 80017c6:	b089      	sub	sp, #36	; 0x24
 80017c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ca:	240c      	movs	r4, #12
 80017cc:	193b      	adds	r3, r7, r4
 80017ce:	0018      	movs	r0, r3
 80017d0:	2314      	movs	r3, #20
 80017d2:	001a      	movs	r2, r3
 80017d4:	2100      	movs	r1, #0
 80017d6:	f004 fa0c 	bl	8005bf2 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017da:	4b4c      	ldr	r3, [pc, #304]	; (800190c <MX_GPIO_Init+0x148>)
 80017dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017de:	4b4b      	ldr	r3, [pc, #300]	; (800190c <MX_GPIO_Init+0x148>)
 80017e0:	2104      	movs	r1, #4
 80017e2:	430a      	orrs	r2, r1
 80017e4:	62da      	str	r2, [r3, #44]	; 0x2c
 80017e6:	4b49      	ldr	r3, [pc, #292]	; (800190c <MX_GPIO_Init+0x148>)
 80017e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ea:	2204      	movs	r2, #4
 80017ec:	4013      	ands	r3, r2
 80017ee:	60bb      	str	r3, [r7, #8]
 80017f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017f2:	4b46      	ldr	r3, [pc, #280]	; (800190c <MX_GPIO_Init+0x148>)
 80017f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017f6:	4b45      	ldr	r3, [pc, #276]	; (800190c <MX_GPIO_Init+0x148>)
 80017f8:	2101      	movs	r1, #1
 80017fa:	430a      	orrs	r2, r1
 80017fc:	62da      	str	r2, [r3, #44]	; 0x2c
 80017fe:	4b43      	ldr	r3, [pc, #268]	; (800190c <MX_GPIO_Init+0x148>)
 8001800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001802:	2201      	movs	r2, #1
 8001804:	4013      	ands	r3, r2
 8001806:	607b      	str	r3, [r7, #4]
 8001808:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800180a:	4b40      	ldr	r3, [pc, #256]	; (800190c <MX_GPIO_Init+0x148>)
 800180c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800180e:	4b3f      	ldr	r3, [pc, #252]	; (800190c <MX_GPIO_Init+0x148>)
 8001810:	2102      	movs	r1, #2
 8001812:	430a      	orrs	r2, r1
 8001814:	62da      	str	r2, [r3, #44]	; 0x2c
 8001816:	4b3d      	ldr	r3, [pc, #244]	; (800190c <MX_GPIO_Init+0x148>)
 8001818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800181a:	2202      	movs	r2, #2
 800181c:	4013      	ands	r3, r2
 800181e:	603b      	str	r3, [r7, #0]
 8001820:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_7, GPIO_PIN_RESET);
 8001822:	4b3b      	ldr	r3, [pc, #236]	; (8001910 <MX_GPIO_Init+0x14c>)
 8001824:	2200      	movs	r2, #0
 8001826:	2183      	movs	r1, #131	; 0x83
 8001828:	0018      	movs	r0, r3
 800182a:	f001 fade 	bl	8002dea <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_6, GPIO_PIN_RESET);
 800182e:	4b39      	ldr	r3, [pc, #228]	; (8001914 <MX_GPIO_Init+0x150>)
 8001830:	2200      	movs	r2, #0
 8001832:	2142      	movs	r1, #66	; 0x42
 8001834:	0018      	movs	r0, r3
 8001836:	f001 fad8 	bl	8002dea <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_7;
 800183a:	0021      	movs	r1, r4
 800183c:	187b      	adds	r3, r7, r1
 800183e:	2283      	movs	r2, #131	; 0x83
 8001840:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001842:	187b      	adds	r3, r7, r1
 8001844:	2201      	movs	r2, #1
 8001846:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001848:	187b      	adds	r3, r7, r1
 800184a:	2200      	movs	r2, #0
 800184c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800184e:	187b      	adds	r3, r7, r1
 8001850:	2200      	movs	r2, #0
 8001852:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001854:	000c      	movs	r4, r1
 8001856:	187b      	adds	r3, r7, r1
 8001858:	4a2d      	ldr	r2, [pc, #180]	; (8001910 <MX_GPIO_Init+0x14c>)
 800185a:	0019      	movs	r1, r3
 800185c:	0010      	movs	r0, r2
 800185e:	f001 f929 	bl	8002ab4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6;
 8001862:	0021      	movs	r1, r4
 8001864:	187b      	adds	r3, r7, r1
 8001866:	2242      	movs	r2, #66	; 0x42
 8001868:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800186a:	187b      	adds	r3, r7, r1
 800186c:	2201      	movs	r2, #1
 800186e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001870:	187b      	adds	r3, r7, r1
 8001872:	2200      	movs	r2, #0
 8001874:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001876:	187b      	adds	r3, r7, r1
 8001878:	2200      	movs	r2, #0
 800187a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800187c:	000c      	movs	r4, r1
 800187e:	187b      	adds	r3, r7, r1
 8001880:	4a24      	ldr	r2, [pc, #144]	; (8001914 <MX_GPIO_Init+0x150>)
 8001882:	0019      	movs	r1, r3
 8001884:	0010      	movs	r0, r2
 8001886:	f001 f915 	bl	8002ab4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800188a:	0021      	movs	r1, r4
 800188c:	187b      	adds	r3, r7, r1
 800188e:	2204      	movs	r2, #4
 8001890:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001892:	187b      	adds	r3, r7, r1
 8001894:	4a20      	ldr	r2, [pc, #128]	; (8001918 <MX_GPIO_Init+0x154>)
 8001896:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001898:	187b      	adds	r3, r7, r1
 800189a:	2200      	movs	r2, #0
 800189c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800189e:	000c      	movs	r4, r1
 80018a0:	187b      	adds	r3, r7, r1
 80018a2:	4a1c      	ldr	r2, [pc, #112]	; (8001914 <MX_GPIO_Init+0x150>)
 80018a4:	0019      	movs	r1, r3
 80018a6:	0010      	movs	r0, r2
 80018a8:	f001 f904 	bl	8002ab4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80018ac:	0021      	movs	r1, r4
 80018ae:	187b      	adds	r3, r7, r1
 80018b0:	22c0      	movs	r2, #192	; 0xc0
 80018b2:	01d2      	lsls	r2, r2, #7
 80018b4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018b6:	187b      	adds	r3, r7, r1
 80018b8:	4a17      	ldr	r2, [pc, #92]	; (8001918 <MX_GPIO_Init+0x154>)
 80018ba:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80018bc:	187b      	adds	r3, r7, r1
 80018be:	2202      	movs	r2, #2
 80018c0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018c2:	000c      	movs	r4, r1
 80018c4:	187b      	adds	r3, r7, r1
 80018c6:	4a13      	ldr	r2, [pc, #76]	; (8001914 <MX_GPIO_Init+0x150>)
 80018c8:	0019      	movs	r1, r3
 80018ca:	0010      	movs	r0, r2
 80018cc:	f001 f8f2 	bl	8002ab4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80018d0:	0021      	movs	r1, r4
 80018d2:	187b      	adds	r3, r7, r1
 80018d4:	2280      	movs	r2, #128	; 0x80
 80018d6:	0212      	lsls	r2, r2, #8
 80018d8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80018da:	187b      	adds	r3, r7, r1
 80018dc:	4a0f      	ldr	r2, [pc, #60]	; (800191c <MX_GPIO_Init+0x158>)
 80018de:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018e0:	187b      	adds	r3, r7, r1
 80018e2:	2201      	movs	r2, #1
 80018e4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018e6:	187b      	adds	r3, r7, r1
 80018e8:	4a0a      	ldr	r2, [pc, #40]	; (8001914 <MX_GPIO_Init+0x150>)
 80018ea:	0019      	movs	r1, r3
 80018ec:	0010      	movs	r0, r2
 80018ee:	f001 f8e1 	bl	8002ab4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80018f2:	2200      	movs	r2, #0
 80018f4:	2100      	movs	r1, #0
 80018f6:	2007      	movs	r0, #7
 80018f8:	f000 fea8 	bl	800264c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80018fc:	2007      	movs	r0, #7
 80018fe:	f000 feba 	bl	8002676 <HAL_NVIC_EnableIRQ>

}
 8001902:	46c0      	nop			; (mov r8, r8)
 8001904:	46bd      	mov	sp, r7
 8001906:	b009      	add	sp, #36	; 0x24
 8001908:	bd90      	pop	{r4, r7, pc}
 800190a:	46c0      	nop			; (mov r8, r8)
 800190c:	40021000 	.word	0x40021000
 8001910:	50000800 	.word	0x50000800
 8001914:	50000400 	.word	0x50000400
 8001918:	10110000 	.word	0x10110000
 800191c:	10210000 	.word	0x10210000

08001920 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001924:	46c0      	nop			; (mov r8, r8)
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
	...

0800192c <HAL_GPIO_EXTI_Callback>:
	}
}

// this sure is a big callback
// need to complete
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
 8001932:	0002      	movs	r2, r0
 8001934:	1dbb      	adds	r3, r7, #6
 8001936:	801a      	strh	r2, [r3, #0]
	/* program flow:
	 *   check current face used
	 *   check current variables and check button pressed
	 */
//	HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_8);	// should run for any button
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
 8001938:	4b76      	ldr	r3, [pc, #472]	; (8001b14 <HAL_GPIO_EXTI_Callback+0x1e8>)
 800193a:	2102      	movs	r1, #2
 800193c:	0018      	movs	r0, r3
 800193e:	f001 fa71 	bl	8002e24 <HAL_GPIO_TogglePin>
	if (GPIO_Pin == BUTTON0) {
 8001942:	1dbb      	adds	r3, r7, #6
 8001944:	881b      	ldrh	r3, [r3, #0]
 8001946:	2b04      	cmp	r3, #4
 8001948:	d110      	bne.n	800196c <HAL_GPIO_EXTI_Callback+0x40>
		face = (face + 1) % NUM_FACES;
 800194a:	4b73      	ldr	r3, [pc, #460]	; (8001b18 <HAL_GPIO_EXTI_Callback+0x1ec>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	3301      	adds	r3, #1
 8001950:	4a72      	ldr	r2, [pc, #456]	; (8001b1c <HAL_GPIO_EXTI_Callback+0x1f0>)
 8001952:	4013      	ands	r3, r2
 8001954:	d504      	bpl.n	8001960 <HAL_GPIO_EXTI_Callback+0x34>
 8001956:	3b01      	subs	r3, #1
 8001958:	2204      	movs	r2, #4
 800195a:	4252      	negs	r2, r2
 800195c:	4313      	orrs	r3, r2
 800195e:	3301      	adds	r3, #1
 8001960:	001a      	movs	r2, r3
 8001962:	4b6d      	ldr	r3, [pc, #436]	; (8001b18 <HAL_GPIO_EXTI_Callback+0x1ec>)
 8001964:	601a      	str	r2, [r3, #0]
		faceChange = 1;
 8001966:	4b6e      	ldr	r3, [pc, #440]	; (8001b20 <HAL_GPIO_EXTI_Callback+0x1f4>)
 8001968:	2201      	movs	r2, #1
 800196a:	601a      	str	r2, [r3, #0]
	}
	// use RTC
	if (face == faceMain) {
 800196c:	4b6a      	ldr	r3, [pc, #424]	; (8001b18 <HAL_GPIO_EXTI_Callback+0x1ec>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d11d      	bne.n	80019b0 <HAL_GPIO_EXTI_Callback+0x84>
			// change fields up, do nothing if not setting clock
		}
		if (GPIO_Pin == BUTTON2 && clockSet) {
			// change fields down, do nothing if not setting clock
		}
		if (GPIO_Pin == BUTTON3) {
 8001974:	1dbb      	adds	r3, r7, #6
 8001976:	881a      	ldrh	r2, [r3, #0]
 8001978:	2380      	movs	r3, #128	; 0x80
 800197a:	021b      	lsls	r3, r3, #8
 800197c:	429a      	cmp	r2, r3
 800197e:	d000      	beq.n	8001982 <HAL_GPIO_EXTI_Callback+0x56>
 8001980:	e0c4      	b.n	8001b0c <HAL_GPIO_EXTI_Callback+0x1e0>
			clockField = (clockField + 1) % (NUM_CLOCKFIELDS + 1);
 8001982:	4b68      	ldr	r3, [pc, #416]	; (8001b24 <HAL_GPIO_EXTI_Callback+0x1f8>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	3301      	adds	r3, #1
 8001988:	2106      	movs	r1, #6
 800198a:	0018      	movs	r0, r3
 800198c:	f7fe fd2c 	bl	80003e8 <__aeabi_idivmod>
 8001990:	000b      	movs	r3, r1
 8001992:	001a      	movs	r2, r3
 8001994:	4b63      	ldr	r3, [pc, #396]	; (8001b24 <HAL_GPIO_EXTI_Callback+0x1f8>)
 8001996:	601a      	str	r2, [r3, #0]
			if (clockField != 0) clockSet = 1;
 8001998:	4b62      	ldr	r3, [pc, #392]	; (8001b24 <HAL_GPIO_EXTI_Callback+0x1f8>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d003      	beq.n	80019a8 <HAL_GPIO_EXTI_Callback+0x7c>
 80019a0:	4b61      	ldr	r3, [pc, #388]	; (8001b28 <HAL_GPIO_EXTI_Callback+0x1fc>)
 80019a2:	2201      	movs	r2, #1
 80019a4:	601a      	str	r2, [r3, #0]
		if (GPIO_Pin == BUTTON3) {
			// clear stopwatch hw
			stopwatchRunning = 0;
		}
	}
}
 80019a6:	e0b1      	b.n	8001b0c <HAL_GPIO_EXTI_Callback+0x1e0>
			else clockSet = 0;
 80019a8:	4b5f      	ldr	r3, [pc, #380]	; (8001b28 <HAL_GPIO_EXTI_Callback+0x1fc>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	601a      	str	r2, [r3, #0]
}
 80019ae:	e0ad      	b.n	8001b0c <HAL_GPIO_EXTI_Callback+0x1e0>
	else if (face == faceTimer) {
 80019b0:	4b59      	ldr	r3, [pc, #356]	; (8001b18 <HAL_GPIO_EXTI_Callback+0x1ec>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	d155      	bne.n	8001a64 <HAL_GPIO_EXTI_Callback+0x138>
		if (timerRunning == 0) {
 80019b8:	4b5c      	ldr	r3, [pc, #368]	; (8001b2c <HAL_GPIO_EXTI_Callback+0x200>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d130      	bne.n	8001a22 <HAL_GPIO_EXTI_Callback+0xf6>
			if (GPIO_Pin == BUTTON1) {
 80019c0:	1dbb      	adds	r3, r7, #6
 80019c2:	881a      	ldrh	r2, [r3, #0]
 80019c4:	2380      	movs	r3, #128	; 0x80
 80019c6:	019b      	lsls	r3, r3, #6
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d106      	bne.n	80019da <HAL_GPIO_EXTI_Callback+0xae>
				if (timerSet == 0) timerRunning = 1;
 80019cc:	4b58      	ldr	r3, [pc, #352]	; (8001b30 <HAL_GPIO_EXTI_Callback+0x204>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d102      	bne.n	80019da <HAL_GPIO_EXTI_Callback+0xae>
 80019d4:	4b55      	ldr	r3, [pc, #340]	; (8001b2c <HAL_GPIO_EXTI_Callback+0x200>)
 80019d6:	2201      	movs	r2, #1
 80019d8:	601a      	str	r2, [r3, #0]
			if (GPIO_Pin == BUTTON3) {
 80019da:	1dbb      	adds	r3, r7, #6
 80019dc:	881a      	ldrh	r2, [r3, #0]
 80019de:	2380      	movs	r3, #128	; 0x80
 80019e0:	021b      	lsls	r3, r3, #8
 80019e2:	429a      	cmp	r2, r3
 80019e4:	d000      	beq.n	80019e8 <HAL_GPIO_EXTI_Callback+0xbc>
 80019e6:	e091      	b.n	8001b0c <HAL_GPIO_EXTI_Callback+0x1e0>
				timerField = (timerField + 1) % (NUM_TIMERFIELDS + 1);
 80019e8:	4b52      	ldr	r3, [pc, #328]	; (8001b34 <HAL_GPIO_EXTI_Callback+0x208>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	3301      	adds	r3, #1
 80019ee:	4a4b      	ldr	r2, [pc, #300]	; (8001b1c <HAL_GPIO_EXTI_Callback+0x1f0>)
 80019f0:	4013      	ands	r3, r2
 80019f2:	d504      	bpl.n	80019fe <HAL_GPIO_EXTI_Callback+0xd2>
 80019f4:	3b01      	subs	r3, #1
 80019f6:	2204      	movs	r2, #4
 80019f8:	4252      	negs	r2, r2
 80019fa:	4313      	orrs	r3, r2
 80019fc:	3301      	adds	r3, #1
 80019fe:	001a      	movs	r2, r3
 8001a00:	4b4c      	ldr	r3, [pc, #304]	; (8001b34 <HAL_GPIO_EXTI_Callback+0x208>)
 8001a02:	601a      	str	r2, [r3, #0]
				if (timerField != 0) timerSet = 1;
 8001a04:	4b4b      	ldr	r3, [pc, #300]	; (8001b34 <HAL_GPIO_EXTI_Callback+0x208>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d003      	beq.n	8001a14 <HAL_GPIO_EXTI_Callback+0xe8>
 8001a0c:	4b48      	ldr	r3, [pc, #288]	; (8001b30 <HAL_GPIO_EXTI_Callback+0x204>)
 8001a0e:	2201      	movs	r2, #1
 8001a10:	601a      	str	r2, [r3, #0]
}
 8001a12:	e07b      	b.n	8001b0c <HAL_GPIO_EXTI_Callback+0x1e0>
					timerSet = 0;
 8001a14:	4b46      	ldr	r3, [pc, #280]	; (8001b30 <HAL_GPIO_EXTI_Callback+0x204>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	601a      	str	r2, [r3, #0]
					timerRunning = 1;	// careful where this gets set/unset
 8001a1a:	4b44      	ldr	r3, [pc, #272]	; (8001b2c <HAL_GPIO_EXTI_Callback+0x200>)
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	601a      	str	r2, [r3, #0]
}
 8001a20:	e074      	b.n	8001b0c <HAL_GPIO_EXTI_Callback+0x1e0>
		else if (timerRunning == 1) {
 8001a22:	4b42      	ldr	r3, [pc, #264]	; (8001b2c <HAL_GPIO_EXTI_Callback+0x200>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	2b01      	cmp	r3, #1
 8001a28:	d000      	beq.n	8001a2c <HAL_GPIO_EXTI_Callback+0x100>
 8001a2a:	e06f      	b.n	8001b0c <HAL_GPIO_EXTI_Callback+0x1e0>
			if (GPIO_Pin == BUTTON1) {
 8001a2c:	1dbb      	adds	r3, r7, #6
 8001a2e:	881a      	ldrh	r2, [r3, #0]
 8001a30:	2380      	movs	r3, #128	; 0x80
 8001a32:	019b      	lsls	r3, r3, #6
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d102      	bne.n	8001a3e <HAL_GPIO_EXTI_Callback+0x112>
				timerRunning = 1;
 8001a38:	4b3c      	ldr	r3, [pc, #240]	; (8001b2c <HAL_GPIO_EXTI_Callback+0x200>)
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	601a      	str	r2, [r3, #0]
			if (GPIO_Pin == BUTTON2) {
 8001a3e:	1dbb      	adds	r3, r7, #6
 8001a40:	881a      	ldrh	r2, [r3, #0]
 8001a42:	2380      	movs	r3, #128	; 0x80
 8001a44:	01db      	lsls	r3, r3, #7
 8001a46:	429a      	cmp	r2, r3
 8001a48:	d102      	bne.n	8001a50 <HAL_GPIO_EXTI_Callback+0x124>
				timerRunning = 0;
 8001a4a:	4b38      	ldr	r3, [pc, #224]	; (8001b2c <HAL_GPIO_EXTI_Callback+0x200>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	601a      	str	r2, [r3, #0]
			if (GPIO_Pin == BUTTON3) {
 8001a50:	1dbb      	adds	r3, r7, #6
 8001a52:	881a      	ldrh	r2, [r3, #0]
 8001a54:	2380      	movs	r3, #128	; 0x80
 8001a56:	021b      	lsls	r3, r3, #8
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d157      	bne.n	8001b0c <HAL_GPIO_EXTI_Callback+0x1e0>
				timerRunning = 0;
 8001a5c:	4b33      	ldr	r3, [pc, #204]	; (8001b2c <HAL_GPIO_EXTI_Callback+0x200>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	601a      	str	r2, [r3, #0]
}
 8001a62:	e053      	b.n	8001b0c <HAL_GPIO_EXTI_Callback+0x1e0>
	else if (face == faceAlarm) {
 8001a64:	4b2c      	ldr	r3, [pc, #176]	; (8001b18 <HAL_GPIO_EXTI_Callback+0x1ec>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	2b02      	cmp	r3, #2
 8001a6a:	d131      	bne.n	8001ad0 <HAL_GPIO_EXTI_Callback+0x1a4>
		if (alarmRunning == 0) {
 8001a6c:	4b32      	ldr	r3, [pc, #200]	; (8001b38 <HAL_GPIO_EXTI_Callback+0x20c>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d11f      	bne.n	8001ab4 <HAL_GPIO_EXTI_Callback+0x188>
			if (GPIO_Pin == BUTTON3) {
 8001a74:	1dbb      	adds	r3, r7, #6
 8001a76:	881a      	ldrh	r2, [r3, #0]
 8001a78:	2380      	movs	r3, #128	; 0x80
 8001a7a:	021b      	lsls	r3, r3, #8
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	d145      	bne.n	8001b0c <HAL_GPIO_EXTI_Callback+0x1e0>
				alarmField = (alarmField + 1) % (NUM_ALARMFIELDS + 1);
 8001a80:	4b2e      	ldr	r3, [pc, #184]	; (8001b3c <HAL_GPIO_EXTI_Callback+0x210>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	3301      	adds	r3, #1
 8001a86:	2105      	movs	r1, #5
 8001a88:	0018      	movs	r0, r3
 8001a8a:	f7fe fcad 	bl	80003e8 <__aeabi_idivmod>
 8001a8e:	000b      	movs	r3, r1
 8001a90:	001a      	movs	r2, r3
 8001a92:	4b2a      	ldr	r3, [pc, #168]	; (8001b3c <HAL_GPIO_EXTI_Callback+0x210>)
 8001a94:	601a      	str	r2, [r3, #0]
				if (alarmField != 0) {
 8001a96:	4b29      	ldr	r3, [pc, #164]	; (8001b3c <HAL_GPIO_EXTI_Callback+0x210>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d003      	beq.n	8001aa6 <HAL_GPIO_EXTI_Callback+0x17a>
					alarmSet = 1;
 8001a9e:	4b28      	ldr	r3, [pc, #160]	; (8001b40 <HAL_GPIO_EXTI_Callback+0x214>)
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	601a      	str	r2, [r3, #0]
}
 8001aa4:	e032      	b.n	8001b0c <HAL_GPIO_EXTI_Callback+0x1e0>
					alarmSet = 0;
 8001aa6:	4b26      	ldr	r3, [pc, #152]	; (8001b40 <HAL_GPIO_EXTI_Callback+0x214>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	601a      	str	r2, [r3, #0]
					alarmRunning = 1;
 8001aac:	4b22      	ldr	r3, [pc, #136]	; (8001b38 <HAL_GPIO_EXTI_Callback+0x20c>)
 8001aae:	2201      	movs	r2, #1
 8001ab0:	601a      	str	r2, [r3, #0]
}
 8001ab2:	e02b      	b.n	8001b0c <HAL_GPIO_EXTI_Callback+0x1e0>
		else if (alarmRunning == 1) {
 8001ab4:	4b20      	ldr	r3, [pc, #128]	; (8001b38 <HAL_GPIO_EXTI_Callback+0x20c>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	d127      	bne.n	8001b0c <HAL_GPIO_EXTI_Callback+0x1e0>
			if (GPIO_Pin == BUTTON3) {
 8001abc:	1dbb      	adds	r3, r7, #6
 8001abe:	881a      	ldrh	r2, [r3, #0]
 8001ac0:	2380      	movs	r3, #128	; 0x80
 8001ac2:	021b      	lsls	r3, r3, #8
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d121      	bne.n	8001b0c <HAL_GPIO_EXTI_Callback+0x1e0>
				alarmRunning = 0;
 8001ac8:	4b1b      	ldr	r3, [pc, #108]	; (8001b38 <HAL_GPIO_EXTI_Callback+0x20c>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	601a      	str	r2, [r3, #0]
}
 8001ace:	e01d      	b.n	8001b0c <HAL_GPIO_EXTI_Callback+0x1e0>
	else if (face == faceStopwatch) {
 8001ad0:	4b11      	ldr	r3, [pc, #68]	; (8001b18 <HAL_GPIO_EXTI_Callback+0x1ec>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	2b03      	cmp	r3, #3
 8001ad6:	d119      	bne.n	8001b0c <HAL_GPIO_EXTI_Callback+0x1e0>
		if (GPIO_Pin == BUTTON1) {	// start/stop
 8001ad8:	1dbb      	adds	r3, r7, #6
 8001ada:	881a      	ldrh	r2, [r3, #0]
 8001adc:	2380      	movs	r3, #128	; 0x80
 8001ade:	019b      	lsls	r3, r3, #6
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d10a      	bne.n	8001afa <HAL_GPIO_EXTI_Callback+0x1ce>
			if (stopwatchRunning == 0) stopwatchRunning = 1;
 8001ae4:	4b17      	ldr	r3, [pc, #92]	; (8001b44 <HAL_GPIO_EXTI_Callback+0x218>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d103      	bne.n	8001af4 <HAL_GPIO_EXTI_Callback+0x1c8>
 8001aec:	4b15      	ldr	r3, [pc, #84]	; (8001b44 <HAL_GPIO_EXTI_Callback+0x218>)
 8001aee:	2201      	movs	r2, #1
 8001af0:	601a      	str	r2, [r3, #0]
 8001af2:	e002      	b.n	8001afa <HAL_GPIO_EXTI_Callback+0x1ce>
			else stopwatchRunning = 0;
 8001af4:	4b13      	ldr	r3, [pc, #76]	; (8001b44 <HAL_GPIO_EXTI_Callback+0x218>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	601a      	str	r2, [r3, #0]
		if (GPIO_Pin == BUTTON3) {
 8001afa:	1dbb      	adds	r3, r7, #6
 8001afc:	881a      	ldrh	r2, [r3, #0]
 8001afe:	2380      	movs	r3, #128	; 0x80
 8001b00:	021b      	lsls	r3, r3, #8
 8001b02:	429a      	cmp	r2, r3
 8001b04:	d102      	bne.n	8001b0c <HAL_GPIO_EXTI_Callback+0x1e0>
			stopwatchRunning = 0;
 8001b06:	4b0f      	ldr	r3, [pc, #60]	; (8001b44 <HAL_GPIO_EXTI_Callback+0x218>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	601a      	str	r2, [r3, #0]
}
 8001b0c:	46c0      	nop			; (mov r8, r8)
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	b002      	add	sp, #8
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	50000400 	.word	0x50000400
 8001b18:	20000090 	.word	0x20000090
 8001b1c:	80000003 	.word	0x80000003
 8001b20:	20000094 	.word	0x20000094
 8001b24:	2000009c 	.word	0x2000009c
 8001b28:	20000098 	.word	0x20000098
 8001b2c:	200000a8 	.word	0x200000a8
 8001b30:	200000a0 	.word	0x200000a0
 8001b34:	200000a4 	.word	0x200000a4
 8001b38:	200000b4 	.word	0x200000b4
 8001b3c:	200000b0 	.word	0x200000b0
 8001b40:	200000ac 	.word	0x200000ac
 8001b44:	200000b8 	.word	0x200000b8

08001b48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b4c:	4b07      	ldr	r3, [pc, #28]	; (8001b6c <HAL_MspInit+0x24>)
 8001b4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b50:	4b06      	ldr	r3, [pc, #24]	; (8001b6c <HAL_MspInit+0x24>)
 8001b52:	2101      	movs	r1, #1
 8001b54:	430a      	orrs	r2, r1
 8001b56:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b58:	4b04      	ldr	r3, [pc, #16]	; (8001b6c <HAL_MspInit+0x24>)
 8001b5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001b5c:	4b03      	ldr	r3, [pc, #12]	; (8001b6c <HAL_MspInit+0x24>)
 8001b5e:	2180      	movs	r1, #128	; 0x80
 8001b60:	0549      	lsls	r1, r1, #21
 8001b62:	430a      	orrs	r2, r1
 8001b64:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b66:	46c0      	nop			; (mov r8, r8)
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	40021000 	.word	0x40021000

08001b70 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b088      	sub	sp, #32
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b78:	230c      	movs	r3, #12
 8001b7a:	18fb      	adds	r3, r7, r3
 8001b7c:	0018      	movs	r0, r3
 8001b7e:	2314      	movs	r3, #20
 8001b80:	001a      	movs	r2, r3
 8001b82:	2100      	movs	r1, #0
 8001b84:	f004 f835 	bl	8005bf2 <memset>
  if(hadc->Instance==ADC1)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a15      	ldr	r2, [pc, #84]	; (8001be4 <HAL_ADC_MspInit+0x74>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d123      	bne.n	8001bda <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001b92:	4b15      	ldr	r3, [pc, #84]	; (8001be8 <HAL_ADC_MspInit+0x78>)
 8001b94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b96:	4b14      	ldr	r3, [pc, #80]	; (8001be8 <HAL_ADC_MspInit+0x78>)
 8001b98:	2180      	movs	r1, #128	; 0x80
 8001b9a:	0089      	lsls	r1, r1, #2
 8001b9c:	430a      	orrs	r2, r1
 8001b9e:	635a      	str	r2, [r3, #52]	; 0x34
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ba0:	4b11      	ldr	r3, [pc, #68]	; (8001be8 <HAL_ADC_MspInit+0x78>)
 8001ba2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ba4:	4b10      	ldr	r3, [pc, #64]	; (8001be8 <HAL_ADC_MspInit+0x78>)
 8001ba6:	2101      	movs	r1, #1
 8001ba8:	430a      	orrs	r2, r1
 8001baa:	62da      	str	r2, [r3, #44]	; 0x2c
 8001bac:	4b0e      	ldr	r3, [pc, #56]	; (8001be8 <HAL_ADC_MspInit+0x78>)
 8001bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	60bb      	str	r3, [r7, #8]
 8001bb6:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration    
    PA0     ------> ADC_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001bb8:	210c      	movs	r1, #12
 8001bba:	187b      	adds	r3, r7, r1
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bc0:	187b      	adds	r3, r7, r1
 8001bc2:	2203      	movs	r2, #3
 8001bc4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc6:	187b      	adds	r3, r7, r1
 8001bc8:	2200      	movs	r2, #0
 8001bca:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bcc:	187a      	adds	r2, r7, r1
 8001bce:	23a0      	movs	r3, #160	; 0xa0
 8001bd0:	05db      	lsls	r3, r3, #23
 8001bd2:	0011      	movs	r1, r2
 8001bd4:	0018      	movs	r0, r3
 8001bd6:	f000 ff6d 	bl	8002ab4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001bda:	46c0      	nop			; (mov r8, r8)
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	b008      	add	sp, #32
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	46c0      	nop			; (mov r8, r8)
 8001be4:	40012400 	.word	0x40012400
 8001be8:	40021000 	.word	0x40021000

08001bec <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  if(hlptim->Instance==LPTIM1)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a0a      	ldr	r2, [pc, #40]	; (8001c24 <HAL_LPTIM_MspInit+0x38>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d10e      	bne.n	8001c1c <HAL_LPTIM_MspInit+0x30>
  {
  /* USER CODE BEGIN LPTIM1_MspInit 0 */

  /* USER CODE END LPTIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8001bfe:	4b0a      	ldr	r3, [pc, #40]	; (8001c28 <HAL_LPTIM_MspInit+0x3c>)
 8001c00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001c02:	4b09      	ldr	r3, [pc, #36]	; (8001c28 <HAL_LPTIM_MspInit+0x3c>)
 8001c04:	2180      	movs	r1, #128	; 0x80
 8001c06:	0609      	lsls	r1, r1, #24
 8001c08:	430a      	orrs	r2, r1
 8001c0a:	639a      	str	r2, [r3, #56]	; 0x38
    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	2100      	movs	r1, #0
 8001c10:	200d      	movs	r0, #13
 8001c12:	f000 fd1b 	bl	800264c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 8001c16:	200d      	movs	r0, #13
 8001c18:	f000 fd2d 	bl	8002676 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }

}
 8001c1c:	46c0      	nop			; (mov r8, r8)
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	b002      	add	sp, #8
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	40007c00 	.word	0x40007c00
 8001c28:	40021000 	.word	0x40021000

08001c2c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a0a      	ldr	r2, [pc, #40]	; (8001c64 <HAL_RTC_MspInit+0x38>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d10e      	bne.n	8001c5c <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001c3e:	4b0a      	ldr	r3, [pc, #40]	; (8001c68 <HAL_RTC_MspInit+0x3c>)
 8001c40:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001c42:	4b09      	ldr	r3, [pc, #36]	; (8001c68 <HAL_RTC_MspInit+0x3c>)
 8001c44:	2180      	movs	r1, #128	; 0x80
 8001c46:	02c9      	lsls	r1, r1, #11
 8001c48:	430a      	orrs	r2, r1
 8001c4a:	651a      	str	r2, [r3, #80]	; 0x50
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	2100      	movs	r1, #0
 8001c50:	2002      	movs	r0, #2
 8001c52:	f000 fcfb 	bl	800264c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8001c56:	2002      	movs	r0, #2
 8001c58:	f000 fd0d 	bl	8002676 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001c5c:	46c0      	nop			; (mov r8, r8)
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	b002      	add	sp, #8
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	40002800 	.word	0x40002800
 8001c68:	40021000 	.word	0x40021000

08001c6c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b088      	sub	sp, #32
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c74:	230c      	movs	r3, #12
 8001c76:	18fb      	adds	r3, r7, r3
 8001c78:	0018      	movs	r0, r3
 8001c7a:	2314      	movs	r3, #20
 8001c7c:	001a      	movs	r2, r3
 8001c7e:	2100      	movs	r1, #0
 8001c80:	f003 ffb7 	bl	8005bf2 <memset>
  if(hspi->Instance==SPI1)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a30      	ldr	r2, [pc, #192]	; (8001d4c <HAL_SPI_MspInit+0xe0>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d15a      	bne.n	8001d44 <HAL_SPI_MspInit+0xd8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c8e:	4b30      	ldr	r3, [pc, #192]	; (8001d50 <HAL_SPI_MspInit+0xe4>)
 8001c90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c92:	4b2f      	ldr	r3, [pc, #188]	; (8001d50 <HAL_SPI_MspInit+0xe4>)
 8001c94:	2180      	movs	r1, #128	; 0x80
 8001c96:	0149      	lsls	r1, r1, #5
 8001c98:	430a      	orrs	r2, r1
 8001c9a:	635a      	str	r2, [r3, #52]	; 0x34
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c9c:	4b2c      	ldr	r3, [pc, #176]	; (8001d50 <HAL_SPI_MspInit+0xe4>)
 8001c9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ca0:	4b2b      	ldr	r3, [pc, #172]	; (8001d50 <HAL_SPI_MspInit+0xe4>)
 8001ca2:	2101      	movs	r1, #1
 8001ca4:	430a      	orrs	r2, r1
 8001ca6:	62da      	str	r2, [r3, #44]	; 0x2c
 8001ca8:	4b29      	ldr	r3, [pc, #164]	; (8001d50 <HAL_SPI_MspInit+0xe4>)
 8001caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cac:	2201      	movs	r2, #1
 8001cae:	4013      	ands	r3, r2
 8001cb0:	60bb      	str	r3, [r7, #8]
 8001cb2:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001cb4:	210c      	movs	r1, #12
 8001cb6:	187b      	adds	r3, r7, r1
 8001cb8:	22a0      	movs	r2, #160	; 0xa0
 8001cba:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cbc:	187b      	adds	r3, r7, r1
 8001cbe:	2202      	movs	r2, #2
 8001cc0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc2:	187b      	adds	r3, r7, r1
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cc8:	187b      	adds	r3, r7, r1
 8001cca:	2203      	movs	r2, #3
 8001ccc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001cce:	187b      	adds	r3, r7, r1
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cd4:	187a      	adds	r2, r7, r1
 8001cd6:	23a0      	movs	r3, #160	; 0xa0
 8001cd8:	05db      	lsls	r3, r3, #23
 8001cda:	0011      	movs	r1, r2
 8001cdc:	0018      	movs	r0, r3
 8001cde:	f000 fee9 	bl	8002ab4 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8001ce2:	4b1c      	ldr	r3, [pc, #112]	; (8001d54 <HAL_SPI_MspInit+0xe8>)
 8001ce4:	4a1c      	ldr	r2, [pc, #112]	; (8001d58 <HAL_SPI_MspInit+0xec>)
 8001ce6:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
 8001ce8:	4b1a      	ldr	r3, [pc, #104]	; (8001d54 <HAL_SPI_MspInit+0xe8>)
 8001cea:	2201      	movs	r2, #1
 8001cec:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001cee:	4b19      	ldr	r3, [pc, #100]	; (8001d54 <HAL_SPI_MspInit+0xe8>)
 8001cf0:	2210      	movs	r2, #16
 8001cf2:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cf4:	4b17      	ldr	r3, [pc, #92]	; (8001d54 <HAL_SPI_MspInit+0xe8>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001cfa:	4b16      	ldr	r3, [pc, #88]	; (8001d54 <HAL_SPI_MspInit+0xe8>)
 8001cfc:	2280      	movs	r2, #128	; 0x80
 8001cfe:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d00:	4b14      	ldr	r3, [pc, #80]	; (8001d54 <HAL_SPI_MspInit+0xe8>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d06:	4b13      	ldr	r3, [pc, #76]	; (8001d54 <HAL_SPI_MspInit+0xe8>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001d0c:	4b11      	ldr	r3, [pc, #68]	; (8001d54 <HAL_SPI_MspInit+0xe8>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001d12:	4b10      	ldr	r3, [pc, #64]	; (8001d54 <HAL_SPI_MspInit+0xe8>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001d18:	4b0e      	ldr	r3, [pc, #56]	; (8001d54 <HAL_SPI_MspInit+0xe8>)
 8001d1a:	0018      	movs	r0, r3
 8001d1c:	f000 fcc8 	bl	80026b0 <HAL_DMA_Init>
 8001d20:	1e03      	subs	r3, r0, #0
 8001d22:	d001      	beq.n	8001d28 <HAL_SPI_MspInit+0xbc>
    {
      Error_Handler();
 8001d24:	f7ff fdfc 	bl	8001920 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	4a0a      	ldr	r2, [pc, #40]	; (8001d54 <HAL_SPI_MspInit+0xe8>)
 8001d2c:	649a      	str	r2, [r3, #72]	; 0x48
 8001d2e:	4b09      	ldr	r3, [pc, #36]	; (8001d54 <HAL_SPI_MspInit+0xe8>)
 8001d30:	687a      	ldr	r2, [r7, #4]
 8001d32:	629a      	str	r2, [r3, #40]	; 0x28

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001d34:	2200      	movs	r2, #0
 8001d36:	2100      	movs	r1, #0
 8001d38:	2019      	movs	r0, #25
 8001d3a:	f000 fc87 	bl	800264c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001d3e:	2019      	movs	r0, #25
 8001d40:	f000 fc99 	bl	8002676 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001d44:	46c0      	nop			; (mov r8, r8)
 8001d46:	46bd      	mov	sp, r7
 8001d48:	b008      	add	sp, #32
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	40013000 	.word	0x40013000
 8001d50:	40021000 	.word	0x40021000
 8001d54:	2000020c 	.word	0x2000020c
 8001d58:	40020030 	.word	0x40020030

08001d5c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM21)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a06      	ldr	r2, [pc, #24]	; (8001d84 <HAL_TIM_Base_MspInit+0x28>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d105      	bne.n	8001d7a <HAL_TIM_Base_MspInit+0x1e>
  {
  /* USER CODE BEGIN TIM21_MspInit 0 */

  /* USER CODE END TIM21_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM21_CLK_ENABLE();
 8001d6e:	4b06      	ldr	r3, [pc, #24]	; (8001d88 <HAL_TIM_Base_MspInit+0x2c>)
 8001d70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d72:	4b05      	ldr	r3, [pc, #20]	; (8001d88 <HAL_TIM_Base_MspInit+0x2c>)
 8001d74:	2104      	movs	r1, #4
 8001d76:	430a      	orrs	r2, r1
 8001d78:	635a      	str	r2, [r3, #52]	; 0x34
  /* USER CODE BEGIN TIM21_MspInit 1 */

  /* USER CODE END TIM21_MspInit 1 */
  }

}
 8001d7a:	46c0      	nop			; (mov r8, r8)
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	b002      	add	sp, #8
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	46c0      	nop			; (mov r8, r8)
 8001d84:	40010800 	.word	0x40010800
 8001d88:	40021000 	.word	0x40021000

08001d8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001d90:	46c0      	nop			; (mov r8, r8)
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}

08001d96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d96:	b580      	push	{r7, lr}
 8001d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d9a:	e7fe      	b.n	8001d9a <HardFault_Handler+0x4>

08001d9c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001da0:	46c0      	nop			; (mov r8, r8)
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}

08001da6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001da6:	b580      	push	{r7, lr}
 8001da8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001daa:	46c0      	nop			; (mov r8, r8)
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}

08001db0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001db4:	f000 f93c 	bl	8002030 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001db8:	46c0      	nop			; (mov r8, r8)
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
	...

08001dc0 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001dc4:	4b03      	ldr	r3, [pc, #12]	; (8001dd4 <RTC_IRQHandler+0x14>)
 8001dc6:	0018      	movs	r0, r3
 8001dc8:	f002 fd52 	bl	8004870 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8001dcc:	46c0      	nop			; (mov r8, r8)
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	46c0      	nop			; (mov r8, r8)
 8001dd4:	20000134 	.word	0x20000134

08001dd8 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001ddc:	2380      	movs	r3, #128	; 0x80
 8001dde:	019b      	lsls	r3, r3, #6
 8001de0:	0018      	movs	r0, r3
 8001de2:	f001 f831 	bl	8002e48 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8001de6:	2380      	movs	r3, #128	; 0x80
 8001de8:	01db      	lsls	r3, r3, #7
 8001dea:	0018      	movs	r0, r3
 8001dec:	f001 f82c 	bl	8002e48 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8001df0:	2380      	movs	r3, #128	; 0x80
 8001df2:	021b      	lsls	r3, r3, #8
 8001df4:	0018      	movs	r0, r3
 8001df6:	f001 f827 	bl	8002e48 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8001dfa:	46c0      	nop			; (mov r8, r8)
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}

08001e00 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001e04:	4b03      	ldr	r3, [pc, #12]	; (8001e14 <DMA1_Channel2_3_IRQHandler+0x14>)
 8001e06:	0018      	movs	r0, r3
 8001e08:	f000 fd78 	bl	80028fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8001e0c:	46c0      	nop			; (mov r8, r8)
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	46c0      	nop			; (mov r8, r8)
 8001e14:	2000020c 	.word	0x2000020c

08001e18 <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt / LPTIM1 wake-up interrupt through EXTI line 29.
  */
void LPTIM1_IRQHandler(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 8001e1c:	4b03      	ldr	r3, [pc, #12]	; (8001e2c <LPTIM1_IRQHandler+0x14>)
 8001e1e:	0018      	movs	r0, r3
 8001e20:	f001 f8ae 	bl	8002f80 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 8001e24:	46c0      	nop			; (mov r8, r8)
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	46c0      	nop			; (mov r8, r8)
 8001e2c:	20000104 	.word	0x20000104

08001e30 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001e34:	4b03      	ldr	r3, [pc, #12]	; (8001e44 <SPI1_IRQHandler+0x14>)
 8001e36:	0018      	movs	r0, r3
 8001e38:	f003 f87c 	bl	8004f34 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001e3c:	46c0      	nop			; (mov r8, r8)
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	46c0      	nop			; (mov r8, r8)
 8001e44:	20000158 	.word	0x20000158

08001e48 <_sbrk>:
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b084      	sub	sp, #16
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	4b11      	ldr	r3, [pc, #68]	; (8001e98 <_sbrk+0x50>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d102      	bne.n	8001e5e <_sbrk+0x16>
 8001e58:	4b0f      	ldr	r3, [pc, #60]	; (8001e98 <_sbrk+0x50>)
 8001e5a:	4a10      	ldr	r2, [pc, #64]	; (8001e9c <_sbrk+0x54>)
 8001e5c:	601a      	str	r2, [r3, #0]
 8001e5e:	4b0e      	ldr	r3, [pc, #56]	; (8001e98 <_sbrk+0x50>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	60fb      	str	r3, [r7, #12]
 8001e64:	4b0c      	ldr	r3, [pc, #48]	; (8001e98 <_sbrk+0x50>)
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	18d3      	adds	r3, r2, r3
 8001e6c:	466a      	mov	r2, sp
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d907      	bls.n	8001e82 <_sbrk+0x3a>
 8001e72:	f003 fe8b 	bl	8005b8c <__errno>
 8001e76:	0003      	movs	r3, r0
 8001e78:	220c      	movs	r2, #12
 8001e7a:	601a      	str	r2, [r3, #0]
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	425b      	negs	r3, r3
 8001e80:	e006      	b.n	8001e90 <_sbrk+0x48>
 8001e82:	4b05      	ldr	r3, [pc, #20]	; (8001e98 <_sbrk+0x50>)
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	18d2      	adds	r2, r2, r3
 8001e8a:	4b03      	ldr	r3, [pc, #12]	; (8001e98 <_sbrk+0x50>)
 8001e8c:	601a      	str	r2, [r3, #0]
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	0018      	movs	r0, r3
 8001e92:	46bd      	mov	sp, r7
 8001e94:	b004      	add	sp, #16
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	200000bc 	.word	0x200000bc
 8001e9c:	200002b0 	.word	0x200002b0

08001ea0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8001ea4:	4b17      	ldr	r3, [pc, #92]	; (8001f04 <SystemInit+0x64>)
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	4b16      	ldr	r3, [pc, #88]	; (8001f04 <SystemInit+0x64>)
 8001eaa:	2180      	movs	r1, #128	; 0x80
 8001eac:	0049      	lsls	r1, r1, #1
 8001eae:	430a      	orrs	r2, r1
 8001eb0:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8001eb2:	4b14      	ldr	r3, [pc, #80]	; (8001f04 <SystemInit+0x64>)
 8001eb4:	68da      	ldr	r2, [r3, #12]
 8001eb6:	4b13      	ldr	r3, [pc, #76]	; (8001f04 <SystemInit+0x64>)
 8001eb8:	4913      	ldr	r1, [pc, #76]	; (8001f08 <SystemInit+0x68>)
 8001eba:	400a      	ands	r2, r1
 8001ebc:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8001ebe:	4b11      	ldr	r3, [pc, #68]	; (8001f04 <SystemInit+0x64>)
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	4b10      	ldr	r3, [pc, #64]	; (8001f04 <SystemInit+0x64>)
 8001ec4:	4911      	ldr	r1, [pc, #68]	; (8001f0c <SystemInit+0x6c>)
 8001ec6:	400a      	ands	r2, r1
 8001ec8:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001eca:	4b0e      	ldr	r3, [pc, #56]	; (8001f04 <SystemInit+0x64>)
 8001ecc:	689a      	ldr	r2, [r3, #8]
 8001ece:	4b0d      	ldr	r3, [pc, #52]	; (8001f04 <SystemInit+0x64>)
 8001ed0:	2101      	movs	r1, #1
 8001ed2:	438a      	bics	r2, r1
 8001ed4:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8001ed6:	4b0b      	ldr	r3, [pc, #44]	; (8001f04 <SystemInit+0x64>)
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	4b0a      	ldr	r3, [pc, #40]	; (8001f04 <SystemInit+0x64>)
 8001edc:	490c      	ldr	r1, [pc, #48]	; (8001f10 <SystemInit+0x70>)
 8001ede:	400a      	ands	r2, r1
 8001ee0:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8001ee2:	4b08      	ldr	r3, [pc, #32]	; (8001f04 <SystemInit+0x64>)
 8001ee4:	68da      	ldr	r2, [r3, #12]
 8001ee6:	4b07      	ldr	r3, [pc, #28]	; (8001f04 <SystemInit+0x64>)
 8001ee8:	490a      	ldr	r1, [pc, #40]	; (8001f14 <SystemInit+0x74>)
 8001eea:	400a      	ands	r2, r1
 8001eec:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001eee:	4b05      	ldr	r3, [pc, #20]	; (8001f04 <SystemInit+0x64>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001ef4:	4b08      	ldr	r3, [pc, #32]	; (8001f18 <SystemInit+0x78>)
 8001ef6:	2280      	movs	r2, #128	; 0x80
 8001ef8:	0512      	lsls	r2, r2, #20
 8001efa:	609a      	str	r2, [r3, #8]
#endif
}
 8001efc:	46c0      	nop			; (mov r8, r8)
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	46c0      	nop			; (mov r8, r8)
 8001f04:	40021000 	.word	0x40021000
 8001f08:	88ff400c 	.word	0x88ff400c
 8001f0c:	fef6fff6 	.word	0xfef6fff6
 8001f10:	fffbffff 	.word	0xfffbffff
 8001f14:	ff02ffff 	.word	0xff02ffff
 8001f18:	e000ed00 	.word	0xe000ed00

08001f1c <HAL_LPTIM_AutoReloadMatchCallback>:
// increment variable for stopwatch counting.
// update screen if on
// how to set lptim internal clock to LSE???
//   I FOUND IT: RCC->CCIPR LPTIMSEL (2-bits, 11=LSE clock for LPTIM)
//   now...does hal do this automatically?
void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim) {
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
	// toggle pin, should toggle every 1s. change this pin
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 8001f24:	23a0      	movs	r3, #160	; 0xa0
 8001f26:	05db      	lsls	r3, r3, #23
 8001f28:	2101      	movs	r1, #1
 8001f2a:	0018      	movs	r0, r3
 8001f2c:	f000 ff7a 	bl	8002e24 <HAL_GPIO_TogglePin>
	stopwatchCNT++;
 8001f30:	4b04      	ldr	r3, [pc, #16]	; (8001f44 <HAL_LPTIM_AutoReloadMatchCallback+0x28>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	1c5a      	adds	r2, r3, #1
 8001f36:	4b03      	ldr	r3, [pc, #12]	; (8001f44 <HAL_LPTIM_AutoReloadMatchCallback+0x28>)
 8001f38:	601a      	str	r2, [r3, #0]
}
 8001f3a:	46c0      	nop			; (mov r8, r8)
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	b002      	add	sp, #8
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	46c0      	nop			; (mov r8, r8)
 8001f44:	200000c8 	.word	0x200000c8

08001f48 <Reset_Handler>:
 8001f48:	480d      	ldr	r0, [pc, #52]	; (8001f80 <LoopForever+0x2>)
 8001f4a:	4685      	mov	sp, r0
 8001f4c:	2100      	movs	r1, #0
 8001f4e:	e003      	b.n	8001f58 <LoopCopyDataInit>

08001f50 <CopyDataInit>:
 8001f50:	4b0c      	ldr	r3, [pc, #48]	; (8001f84 <LoopForever+0x6>)
 8001f52:	585b      	ldr	r3, [r3, r1]
 8001f54:	5043      	str	r3, [r0, r1]
 8001f56:	3104      	adds	r1, #4

08001f58 <LoopCopyDataInit>:
 8001f58:	480b      	ldr	r0, [pc, #44]	; (8001f88 <LoopForever+0xa>)
 8001f5a:	4b0c      	ldr	r3, [pc, #48]	; (8001f8c <LoopForever+0xe>)
 8001f5c:	1842      	adds	r2, r0, r1
 8001f5e:	429a      	cmp	r2, r3
 8001f60:	d3f6      	bcc.n	8001f50 <CopyDataInit>
 8001f62:	4a0b      	ldr	r2, [pc, #44]	; (8001f90 <LoopForever+0x12>)
 8001f64:	e002      	b.n	8001f6c <LoopFillZerobss>

08001f66 <FillZerobss>:
 8001f66:	2300      	movs	r3, #0
 8001f68:	6013      	str	r3, [r2, #0]
 8001f6a:	3204      	adds	r2, #4

08001f6c <LoopFillZerobss>:
 8001f6c:	4b09      	ldr	r3, [pc, #36]	; (8001f94 <LoopForever+0x16>)
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	d3f9      	bcc.n	8001f66 <FillZerobss>
 8001f72:	f7ff ff95 	bl	8001ea0 <SystemInit>
 8001f76:	f003 fe0f 	bl	8005b98 <__libc_init_array>
 8001f7a:	f7ff f941 	bl	8001200 <main>

08001f7e <LoopForever>:
 8001f7e:	e7fe      	b.n	8001f7e <LoopForever>
 8001f80:	20005000 	.word	0x20005000
 8001f84:	08006a28 	.word	0x08006a28
 8001f88:	20000000 	.word	0x20000000
 8001f8c:	20000068 	.word	0x20000068
 8001f90:	20000068 	.word	0x20000068
 8001f94:	200002ac 	.word	0x200002ac

08001f98 <ADC1_COMP_IRQHandler>:
 8001f98:	e7fe      	b.n	8001f98 <ADC1_COMP_IRQHandler>
	...

08001f9c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001fa2:	1dfb      	adds	r3, r7, #7
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001fa8:	4b0b      	ldr	r3, [pc, #44]	; (8001fd8 <HAL_Init+0x3c>)
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	4b0a      	ldr	r3, [pc, #40]	; (8001fd8 <HAL_Init+0x3c>)
 8001fae:	2140      	movs	r1, #64	; 0x40
 8001fb0:	430a      	orrs	r2, r1
 8001fb2:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001fb4:	2000      	movs	r0, #0
 8001fb6:	f000 f811 	bl	8001fdc <HAL_InitTick>
 8001fba:	1e03      	subs	r3, r0, #0
 8001fbc:	d003      	beq.n	8001fc6 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8001fbe:	1dfb      	adds	r3, r7, #7
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	701a      	strb	r2, [r3, #0]
 8001fc4:	e001      	b.n	8001fca <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001fc6:	f7ff fdbf 	bl	8001b48 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001fca:	1dfb      	adds	r3, r7, #7
 8001fcc:	781b      	ldrb	r3, [r3, #0]
}
 8001fce:	0018      	movs	r0, r3
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	b002      	add	sp, #8
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	46c0      	nop			; (mov r8, r8)
 8001fd8:	40022000 	.word	0x40022000

08001fdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b084      	sub	sp, #16
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001fe4:	230f      	movs	r3, #15
 8001fe6:	18fb      	adds	r3, r7, r3
 8001fe8:	2200      	movs	r2, #0
 8001fea:	701a      	strb	r2, [r3, #0]

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8001fec:	4b0f      	ldr	r3, [pc, #60]	; (800202c <HAL_InitTick+0x50>)
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	23fa      	movs	r3, #250	; 0xfa
 8001ff2:	0099      	lsls	r1, r3, #2
 8001ff4:	0010      	movs	r0, r2
 8001ff6:	f7fe f887 	bl	8000108 <__udivsi3>
 8001ffa:	0003      	movs	r3, r0
 8001ffc:	0018      	movs	r0, r3
 8001ffe:	f000 fb4a 	bl	8002696 <HAL_SYSTICK_Config>
 8002002:	1e03      	subs	r3, r0, #0
 8002004:	d004      	beq.n	8002010 <HAL_InitTick+0x34>
  {
    status = HAL_ERROR;
 8002006:	230f      	movs	r3, #15
 8002008:	18fb      	adds	r3, r7, r3
 800200a:	2201      	movs	r2, #1
 800200c:	701a      	strb	r2, [r3, #0]
 800200e:	e006      	b.n	800201e <HAL_InitTick+0x42>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 8002010:	6879      	ldr	r1, [r7, #4]
 8002012:	2301      	movs	r3, #1
 8002014:	425b      	negs	r3, r3
 8002016:	2200      	movs	r2, #0
 8002018:	0018      	movs	r0, r3
 800201a:	f000 fb17 	bl	800264c <HAL_NVIC_SetPriority>
  }

  /* Return function status */
  return status;
 800201e:	230f      	movs	r3, #15
 8002020:	18fb      	adds	r3, r7, r3
 8002022:	781b      	ldrb	r3, [r3, #0]
}
 8002024:	0018      	movs	r0, r3
 8002026:	46bd      	mov	sp, r7
 8002028:	b004      	add	sp, #16
 800202a:	bd80      	pop	{r7, pc}
 800202c:	20000000 	.word	0x20000000

08002030 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	af00      	add	r7, sp, #0
  uwTick++;
 8002034:	4b03      	ldr	r3, [pc, #12]	; (8002044 <HAL_IncTick+0x14>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	1c5a      	adds	r2, r3, #1
 800203a:	4b02      	ldr	r3, [pc, #8]	; (8002044 <HAL_IncTick+0x14>)
 800203c:	601a      	str	r2, [r3, #0]
}
 800203e:	46c0      	nop			; (mov r8, r8)
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}
 8002044:	200002a4 	.word	0x200002a4

08002048 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	af00      	add	r7, sp, #0
  return uwTick;
 800204c:	4b02      	ldr	r3, [pc, #8]	; (8002058 <HAL_GetTick+0x10>)
 800204e:	681b      	ldr	r3, [r3, #0]
}
 8002050:	0018      	movs	r0, r3
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	46c0      	nop			; (mov r8, r8)
 8002058:	200002a4 	.word	0x200002a4

0800205c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b084      	sub	sp, #16
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002064:	f7ff fff0 	bl	8002048 <HAL_GetTick>
 8002068:	0003      	movs	r3, r0
 800206a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	3301      	adds	r3, #1
 8002074:	d002      	beq.n	800207c <HAL_Delay+0x20>
  {
    wait++;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	3301      	adds	r3, #1
 800207a:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800207c:	46c0      	nop			; (mov r8, r8)
 800207e:	f7ff ffe3 	bl	8002048 <HAL_GetTick>
 8002082:	0002      	movs	r2, r0
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	1ad3      	subs	r3, r2, r3
 8002088:	68fa      	ldr	r2, [r7, #12]
 800208a:	429a      	cmp	r2, r3
 800208c:	d8f7      	bhi.n	800207e <HAL_Delay+0x22>
  {
  }
}
 800208e:	46c0      	nop			; (mov r8, r8)
 8002090:	46bd      	mov	sp, r7
 8002092:	b004      	add	sp, #16
 8002094:	bd80      	pop	{r7, pc}
	...

08002098 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d101      	bne.n	80020aa <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e159      	b.n	800235e <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d10a      	bne.n	80020c8 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2200      	movs	r2, #0
 80020b6:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2250      	movs	r2, #80	; 0x50
 80020bc:	2100      	movs	r1, #0
 80020be:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	0018      	movs	r0, r3
 80020c4:	f7ff fd54 	bl	8001b70 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020cc:	2210      	movs	r2, #16
 80020ce:	4013      	ands	r3, r2
 80020d0:	2b10      	cmp	r3, #16
 80020d2:	d005      	beq.n	80020e0 <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	2204      	movs	r2, #4
 80020dc:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80020de:	d00b      	beq.n	80020f8 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020e4:	2210      	movs	r2, #16
 80020e6:	431a      	orrs	r2, r3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2250      	movs	r2, #80	; 0x50
 80020f0:	2100      	movs	r1, #0
 80020f2:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
 80020f6:	e132      	b.n	800235e <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020fc:	4a9a      	ldr	r2, [pc, #616]	; (8002368 <HAL_ADC_Init+0x2d0>)
 80020fe:	4013      	ands	r3, r2
 8002100:	2202      	movs	r2, #2
 8002102:	431a      	orrs	r2, r3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	2203      	movs	r2, #3
 8002110:	4013      	ands	r3, r2
 8002112:	2b01      	cmp	r3, #1
 8002114:	d108      	bne.n	8002128 <HAL_ADC_Init+0x90>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	2201      	movs	r2, #1
 800211e:	4013      	ands	r3, r2
 8002120:	2b01      	cmp	r3, #1
 8002122:	d101      	bne.n	8002128 <HAL_ADC_Init+0x90>
 8002124:	2301      	movs	r3, #1
 8002126:	e000      	b.n	800212a <HAL_ADC_Init+0x92>
 8002128:	2300      	movs	r3, #0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d149      	bne.n	80021c2 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	685a      	ldr	r2, [r3, #4]
 8002132:	23c0      	movs	r3, #192	; 0xc0
 8002134:	061b      	lsls	r3, r3, #24
 8002136:	429a      	cmp	r2, r3
 8002138:	d00b      	beq.n	8002152 <HAL_ADC_Init+0xba>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	685a      	ldr	r2, [r3, #4]
 800213e:	2380      	movs	r3, #128	; 0x80
 8002140:	05db      	lsls	r3, r3, #23
 8002142:	429a      	cmp	r2, r3
 8002144:	d005      	beq.n	8002152 <HAL_ADC_Init+0xba>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	685a      	ldr	r2, [r3, #4]
 800214a:	2380      	movs	r3, #128	; 0x80
 800214c:	061b      	lsls	r3, r3, #24
 800214e:	429a      	cmp	r2, r3
 8002150:	d111      	bne.n	8002176 <HAL_ADC_Init+0xde>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	691a      	ldr	r2, [r3, #16]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	0092      	lsls	r2, r2, #2
 800215e:	0892      	lsrs	r2, r2, #2
 8002160:	611a      	str	r2, [r3, #16]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	6919      	ldr	r1, [r3, #16]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	685a      	ldr	r2, [r3, #4]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	430a      	orrs	r2, r1
 8002172:	611a      	str	r2, [r3, #16]
 8002174:	e014      	b.n	80021a0 <HAL_ADC_Init+0x108>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	691a      	ldr	r2, [r3, #16]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	0092      	lsls	r2, r2, #2
 8002182:	0892      	lsrs	r2, r2, #2
 8002184:	611a      	str	r2, [r3, #16]
 8002186:	4b79      	ldr	r3, [pc, #484]	; (800236c <HAL_ADC_Init+0x2d4>)
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	4b78      	ldr	r3, [pc, #480]	; (800236c <HAL_ADC_Init+0x2d4>)
 800218c:	4978      	ldr	r1, [pc, #480]	; (8002370 <HAL_ADC_Init+0x2d8>)
 800218e:	400a      	ands	r2, r1
 8002190:	601a      	str	r2, [r3, #0]
 8002192:	4b76      	ldr	r3, [pc, #472]	; (800236c <HAL_ADC_Init+0x2d4>)
 8002194:	6819      	ldr	r1, [r3, #0]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	685a      	ldr	r2, [r3, #4]
 800219a:	4b74      	ldr	r3, [pc, #464]	; (800236c <HAL_ADC_Init+0x2d4>)
 800219c:	430a      	orrs	r2, r1
 800219e:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	68da      	ldr	r2, [r3, #12]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	2118      	movs	r1, #24
 80021ac:	438a      	bics	r2, r1
 80021ae:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	68d9      	ldr	r1, [r3, #12]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	689a      	ldr	r2, [r3, #8]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	430a      	orrs	r2, r1
 80021c0:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 80021c2:	4b6a      	ldr	r3, [pc, #424]	; (800236c <HAL_ADC_Init+0x2d4>)
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	4b69      	ldr	r3, [pc, #420]	; (800236c <HAL_ADC_Init+0x2d4>)
 80021c8:	496a      	ldr	r1, [pc, #424]	; (8002374 <HAL_ADC_Init+0x2dc>)
 80021ca:	400a      	ands	r2, r1
 80021cc:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 80021ce:	4b67      	ldr	r3, [pc, #412]	; (800236c <HAL_ADC_Init+0x2d4>)
 80021d0:	6819      	ldr	r1, [r3, #0]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021d6:	065a      	lsls	r2, r3, #25
 80021d8:	4b64      	ldr	r3, [pc, #400]	; (800236c <HAL_ADC_Init+0x2d4>)
 80021da:	430a      	orrs	r2, r1
 80021dc:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	689a      	ldr	r2, [r3, #8]
 80021e4:	2380      	movs	r3, #128	; 0x80
 80021e6:	055b      	lsls	r3, r3, #21
 80021e8:	4013      	ands	r3, r2
 80021ea:	d108      	bne.n	80021fe <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	689a      	ldr	r2, [r3, #8]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	2180      	movs	r1, #128	; 0x80
 80021f8:	0549      	lsls	r1, r1, #21
 80021fa:	430a      	orrs	r2, r1
 80021fc:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	68da      	ldr	r2, [r3, #12]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	495b      	ldr	r1, [pc, #364]	; (8002378 <HAL_ADC_Init+0x2e0>)
 800220a:	400a      	ands	r2, r1
 800220c:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	68d9      	ldr	r1, [r3, #12]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	691b      	ldr	r3, [r3, #16]
 800221c:	2b02      	cmp	r3, #2
 800221e:	d101      	bne.n	8002224 <HAL_ADC_Init+0x18c>
 8002220:	2304      	movs	r3, #4
 8002222:	e000      	b.n	8002226 <HAL_ADC_Init+0x18e>
 8002224:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8002226:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2020      	movs	r0, #32
 800222c:	5c1b      	ldrb	r3, [r3, r0]
 800222e:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8002230:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	202c      	movs	r0, #44	; 0x2c
 8002236:	5c1b      	ldrb	r3, [r3, r0]
 8002238:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800223a:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8002240:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	699b      	ldr	r3, [r3, #24]
 8002246:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8002248:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	69db      	ldr	r3, [r3, #28]
 800224e:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8002250:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	430a      	orrs	r2, r1
 8002258:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800225e:	23c2      	movs	r3, #194	; 0xc2
 8002260:	33ff      	adds	r3, #255	; 0xff
 8002262:	429a      	cmp	r2, r3
 8002264:	d00b      	beq.n	800227e <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	68d9      	ldr	r1, [r3, #12]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8002274:	431a      	orrs	r2, r3
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	430a      	orrs	r2, r1
 800227c:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2221      	movs	r2, #33	; 0x21
 8002282:	5c9b      	ldrb	r3, [r3, r2]
 8002284:	2b01      	cmp	r3, #1
 8002286:	d11a      	bne.n	80022be <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2220      	movs	r2, #32
 800228c:	5c9b      	ldrb	r3, [r3, r2]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d109      	bne.n	80022a6 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	68da      	ldr	r2, [r3, #12]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	2180      	movs	r1, #128	; 0x80
 800229e:	0249      	lsls	r1, r1, #9
 80022a0:	430a      	orrs	r2, r1
 80022a2:	60da      	str	r2, [r3, #12]
 80022a4:	e00b      	b.n	80022be <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022aa:	2220      	movs	r2, #32
 80022ac:	431a      	orrs	r2, r3
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022b6:	2201      	movs	r2, #1
 80022b8:	431a      	orrs	r2, r3
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d11f      	bne.n	8002306 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	691a      	ldr	r2, [r3, #16]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	492a      	ldr	r1, [pc, #168]	; (800237c <HAL_ADC_Init+0x2e4>)
 80022d2:	400a      	ands	r2, r1
 80022d4:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	6919      	ldr	r1, [r3, #16]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80022e4:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 80022ea:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	430a      	orrs	r2, r1
 80022f2:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	691a      	ldr	r2, [r3, #16]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	2101      	movs	r1, #1
 8002300:	430a      	orrs	r2, r1
 8002302:	611a      	str	r2, [r3, #16]
 8002304:	e00e      	b.n	8002324 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	691b      	ldr	r3, [r3, #16]
 800230c:	2201      	movs	r2, #1
 800230e:	4013      	ands	r3, r2
 8002310:	2b01      	cmp	r3, #1
 8002312:	d107      	bne.n	8002324 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	691a      	ldr	r2, [r3, #16]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	2101      	movs	r1, #1
 8002320:	438a      	bics	r2, r1
 8002322:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	695a      	ldr	r2, [r3, #20]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	2107      	movs	r1, #7
 8002330:	438a      	bics	r2, r1
 8002332:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	6959      	ldr	r1, [r3, #20]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	430a      	orrs	r2, r1
 8002344:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2200      	movs	r2, #0
 800234a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002350:	2203      	movs	r2, #3
 8002352:	4393      	bics	r3, r2
 8002354:	2201      	movs	r2, #1
 8002356:	431a      	orrs	r2, r3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 800235c:	2300      	movs	r3, #0
}
 800235e:	0018      	movs	r0, r3
 8002360:	46bd      	mov	sp, r7
 8002362:	b002      	add	sp, #8
 8002364:	bd80      	pop	{r7, pc}
 8002366:	46c0      	nop			; (mov r8, r8)
 8002368:	fffffefd 	.word	0xfffffefd
 800236c:	40012708 	.word	0x40012708
 8002370:	ffc3ffff 	.word	0xffc3ffff
 8002374:	fdffffff 	.word	0xfdffffff
 8002378:	fffe0219 	.word	0xfffe0219
 800237c:	fffffc03 	.word	0xfffffc03

08002380 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b082      	sub	sp, #8
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
 8002388:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2250      	movs	r2, #80	; 0x50
 800238e:	5c9b      	ldrb	r3, [r3, r2]
 8002390:	2b01      	cmp	r3, #1
 8002392:	d101      	bne.n	8002398 <HAL_ADC_ConfigChannel+0x18>
 8002394:	2302      	movs	r3, #2
 8002396:	e085      	b.n	80024a4 <HAL_ADC_ConfigChannel+0x124>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2250      	movs	r2, #80	; 0x50
 800239c:	2101      	movs	r1, #1
 800239e:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	2204      	movs	r2, #4
 80023a8:	4013      	ands	r3, r2
 80023aa:	d00b      	beq.n	80023c4 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023b0:	2220      	movs	r2, #32
 80023b2:	431a      	orrs	r2, r3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2250      	movs	r2, #80	; 0x50
 80023bc:	2100      	movs	r1, #0
 80023be:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e06f      	b.n	80024a4 <HAL_ADC_ConfigChannel+0x124>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	4a38      	ldr	r2, [pc, #224]	; (80024ac <HAL_ADC_ConfigChannel+0x12c>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d035      	beq.n	800243a <HAL_ADC_ConfigChannel+0xba>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	035b      	lsls	r3, r3, #13
 80023da:	0b5a      	lsrs	r2, r3, #13
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	430a      	orrs	r2, r1
 80023e2:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	2380      	movs	r3, #128	; 0x80
 80023ea:	02db      	lsls	r3, r3, #11
 80023ec:	4013      	ands	r3, r2
 80023ee:	d009      	beq.n	8002404 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 80023f0:	4b2f      	ldr	r3, [pc, #188]	; (80024b0 <HAL_ADC_ConfigChannel+0x130>)
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	4b2e      	ldr	r3, [pc, #184]	; (80024b0 <HAL_ADC_ConfigChannel+0x130>)
 80023f6:	2180      	movs	r1, #128	; 0x80
 80023f8:	0409      	lsls	r1, r1, #16
 80023fa:	430a      	orrs	r2, r1
 80023fc:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 80023fe:	200a      	movs	r0, #10
 8002400:	f000 f85e 	bl	80024c0 <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	2380      	movs	r3, #128	; 0x80
 800240a:	029b      	lsls	r3, r3, #10
 800240c:	4013      	ands	r3, r2
 800240e:	d006      	beq.n	800241e <HAL_ADC_ConfigChannel+0x9e>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 8002410:	4b27      	ldr	r3, [pc, #156]	; (80024b0 <HAL_ADC_ConfigChannel+0x130>)
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	4b26      	ldr	r3, [pc, #152]	; (80024b0 <HAL_ADC_ConfigChannel+0x130>)
 8002416:	2180      	movs	r1, #128	; 0x80
 8002418:	03c9      	lsls	r1, r1, #15
 800241a:	430a      	orrs	r2, r1
 800241c:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	2380      	movs	r3, #128	; 0x80
 8002424:	025b      	lsls	r3, r3, #9
 8002426:	4013      	ands	r3, r2
 8002428:	d037      	beq.n	800249a <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR |= ADC_CCR_VLCDEN;   
 800242a:	4b21      	ldr	r3, [pc, #132]	; (80024b0 <HAL_ADC_ConfigChannel+0x130>)
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	4b20      	ldr	r3, [pc, #128]	; (80024b0 <HAL_ADC_ConfigChannel+0x130>)
 8002430:	2180      	movs	r1, #128	; 0x80
 8002432:	0449      	lsls	r1, r1, #17
 8002434:	430a      	orrs	r2, r1
 8002436:	601a      	str	r2, [r3, #0]
 8002438:	e02f      	b.n	800249a <HAL_ADC_ConfigChannel+0x11a>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	035b      	lsls	r3, r3, #13
 8002446:	0b5b      	lsrs	r3, r3, #13
 8002448:	43d9      	mvns	r1, r3
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	400a      	ands	r2, r1
 8002450:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	2380      	movs	r3, #128	; 0x80
 8002458:	02db      	lsls	r3, r3, #11
 800245a:	4013      	ands	r3, r2
 800245c:	d005      	beq.n	800246a <HAL_ADC_ConfigChannel+0xea>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 800245e:	4b14      	ldr	r3, [pc, #80]	; (80024b0 <HAL_ADC_ConfigChannel+0x130>)
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	4b13      	ldr	r3, [pc, #76]	; (80024b0 <HAL_ADC_ConfigChannel+0x130>)
 8002464:	4913      	ldr	r1, [pc, #76]	; (80024b4 <HAL_ADC_ConfigChannel+0x134>)
 8002466:	400a      	ands	r2, r1
 8002468:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	2380      	movs	r3, #128	; 0x80
 8002470:	029b      	lsls	r3, r3, #10
 8002472:	4013      	ands	r3, r2
 8002474:	d005      	beq.n	8002482 <HAL_ADC_ConfigChannel+0x102>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8002476:	4b0e      	ldr	r3, [pc, #56]	; (80024b0 <HAL_ADC_ConfigChannel+0x130>)
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	4b0d      	ldr	r3, [pc, #52]	; (80024b0 <HAL_ADC_ConfigChannel+0x130>)
 800247c:	490e      	ldr	r1, [pc, #56]	; (80024b8 <HAL_ADC_ConfigChannel+0x138>)
 800247e:	400a      	ands	r2, r1
 8002480:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	2380      	movs	r3, #128	; 0x80
 8002488:	025b      	lsls	r3, r3, #9
 800248a:	4013      	ands	r3, r2
 800248c:	d005      	beq.n	800249a <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR &= ~ADC_CCR_VLCDEN;   
 800248e:	4b08      	ldr	r3, [pc, #32]	; (80024b0 <HAL_ADC_ConfigChannel+0x130>)
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	4b07      	ldr	r3, [pc, #28]	; (80024b0 <HAL_ADC_ConfigChannel+0x130>)
 8002494:	4909      	ldr	r1, [pc, #36]	; (80024bc <HAL_ADC_ConfigChannel+0x13c>)
 8002496:	400a      	ands	r2, r1
 8002498:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2250      	movs	r2, #80	; 0x50
 800249e:	2100      	movs	r1, #0
 80024a0:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 80024a2:	2300      	movs	r3, #0
}
 80024a4:	0018      	movs	r0, r3
 80024a6:	46bd      	mov	sp, r7
 80024a8:	b002      	add	sp, #8
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	00001001 	.word	0x00001001
 80024b0:	40012708 	.word	0x40012708
 80024b4:	ff7fffff 	.word	0xff7fffff
 80024b8:	ffbfffff 	.word	0xffbfffff
 80024bc:	feffffff 	.word	0xfeffffff

080024c0 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b084      	sub	sp, #16
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 80024c8:	4b0a      	ldr	r3, [pc, #40]	; (80024f4 <ADC_DelayMicroSecond+0x34>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	490a      	ldr	r1, [pc, #40]	; (80024f8 <ADC_DelayMicroSecond+0x38>)
 80024ce:	0018      	movs	r0, r3
 80024d0:	f7fd fe1a 	bl	8000108 <__udivsi3>
 80024d4:	0003      	movs	r3, r0
 80024d6:	001a      	movs	r2, r3
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	4353      	muls	r3, r2
 80024dc:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 80024de:	e002      	b.n	80024e6 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	3b01      	subs	r3, #1
 80024e4:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d1f9      	bne.n	80024e0 <ADC_DelayMicroSecond+0x20>
  } 
}
 80024ec:	46c0      	nop			; (mov r8, r8)
 80024ee:	46bd      	mov	sp, r7
 80024f0:	b004      	add	sp, #16
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	20000000 	.word	0x20000000
 80024f8:	000f4240 	.word	0x000f4240

080024fc <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b082      	sub	sp, #8
 8002500:	af00      	add	r7, sp, #0
 8002502:	0002      	movs	r2, r0
 8002504:	1dfb      	adds	r3, r7, #7
 8002506:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002508:	1dfb      	adds	r3, r7, #7
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	001a      	movs	r2, r3
 800250e:	231f      	movs	r3, #31
 8002510:	401a      	ands	r2, r3
 8002512:	4b04      	ldr	r3, [pc, #16]	; (8002524 <NVIC_EnableIRQ+0x28>)
 8002514:	2101      	movs	r1, #1
 8002516:	4091      	lsls	r1, r2
 8002518:	000a      	movs	r2, r1
 800251a:	601a      	str	r2, [r3, #0]
}
 800251c:	46c0      	nop			; (mov r8, r8)
 800251e:	46bd      	mov	sp, r7
 8002520:	b002      	add	sp, #8
 8002522:	bd80      	pop	{r7, pc}
 8002524:	e000e100 	.word	0xe000e100

08002528 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002528:	b590      	push	{r4, r7, lr}
 800252a:	b083      	sub	sp, #12
 800252c:	af00      	add	r7, sp, #0
 800252e:	0002      	movs	r2, r0
 8002530:	6039      	str	r1, [r7, #0]
 8002532:	1dfb      	adds	r3, r7, #7
 8002534:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 8002536:	1dfb      	adds	r3, r7, #7
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	2b7f      	cmp	r3, #127	; 0x7f
 800253c:	d932      	bls.n	80025a4 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800253e:	4a2f      	ldr	r2, [pc, #188]	; (80025fc <NVIC_SetPriority+0xd4>)
 8002540:	1dfb      	adds	r3, r7, #7
 8002542:	781b      	ldrb	r3, [r3, #0]
 8002544:	0019      	movs	r1, r3
 8002546:	230f      	movs	r3, #15
 8002548:	400b      	ands	r3, r1
 800254a:	3b08      	subs	r3, #8
 800254c:	089b      	lsrs	r3, r3, #2
 800254e:	3306      	adds	r3, #6
 8002550:	009b      	lsls	r3, r3, #2
 8002552:	18d3      	adds	r3, r2, r3
 8002554:	3304      	adds	r3, #4
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	1dfa      	adds	r2, r7, #7
 800255a:	7812      	ldrb	r2, [r2, #0]
 800255c:	0011      	movs	r1, r2
 800255e:	2203      	movs	r2, #3
 8002560:	400a      	ands	r2, r1
 8002562:	00d2      	lsls	r2, r2, #3
 8002564:	21ff      	movs	r1, #255	; 0xff
 8002566:	4091      	lsls	r1, r2
 8002568:	000a      	movs	r2, r1
 800256a:	43d2      	mvns	r2, r2
 800256c:	401a      	ands	r2, r3
 800256e:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	019b      	lsls	r3, r3, #6
 8002574:	22ff      	movs	r2, #255	; 0xff
 8002576:	401a      	ands	r2, r3
 8002578:	1dfb      	adds	r3, r7, #7
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	0018      	movs	r0, r3
 800257e:	2303      	movs	r3, #3
 8002580:	4003      	ands	r3, r0
 8002582:	00db      	lsls	r3, r3, #3
 8002584:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002586:	481d      	ldr	r0, [pc, #116]	; (80025fc <NVIC_SetPriority+0xd4>)
 8002588:	1dfb      	adds	r3, r7, #7
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	001c      	movs	r4, r3
 800258e:	230f      	movs	r3, #15
 8002590:	4023      	ands	r3, r4
 8002592:	3b08      	subs	r3, #8
 8002594:	089b      	lsrs	r3, r3, #2
 8002596:	430a      	orrs	r2, r1
 8002598:	3306      	adds	r3, #6
 800259a:	009b      	lsls	r3, r3, #2
 800259c:	18c3      	adds	r3, r0, r3
 800259e:	3304      	adds	r3, #4
 80025a0:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80025a2:	e027      	b.n	80025f4 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80025a4:	4a16      	ldr	r2, [pc, #88]	; (8002600 <NVIC_SetPriority+0xd8>)
 80025a6:	1dfb      	adds	r3, r7, #7
 80025a8:	781b      	ldrb	r3, [r3, #0]
 80025aa:	b25b      	sxtb	r3, r3
 80025ac:	089b      	lsrs	r3, r3, #2
 80025ae:	33c0      	adds	r3, #192	; 0xc0
 80025b0:	009b      	lsls	r3, r3, #2
 80025b2:	589b      	ldr	r3, [r3, r2]
 80025b4:	1dfa      	adds	r2, r7, #7
 80025b6:	7812      	ldrb	r2, [r2, #0]
 80025b8:	0011      	movs	r1, r2
 80025ba:	2203      	movs	r2, #3
 80025bc:	400a      	ands	r2, r1
 80025be:	00d2      	lsls	r2, r2, #3
 80025c0:	21ff      	movs	r1, #255	; 0xff
 80025c2:	4091      	lsls	r1, r2
 80025c4:	000a      	movs	r2, r1
 80025c6:	43d2      	mvns	r2, r2
 80025c8:	401a      	ands	r2, r3
 80025ca:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	019b      	lsls	r3, r3, #6
 80025d0:	22ff      	movs	r2, #255	; 0xff
 80025d2:	401a      	ands	r2, r3
 80025d4:	1dfb      	adds	r3, r7, #7
 80025d6:	781b      	ldrb	r3, [r3, #0]
 80025d8:	0018      	movs	r0, r3
 80025da:	2303      	movs	r3, #3
 80025dc:	4003      	ands	r3, r0
 80025de:	00db      	lsls	r3, r3, #3
 80025e0:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80025e2:	4807      	ldr	r0, [pc, #28]	; (8002600 <NVIC_SetPriority+0xd8>)
 80025e4:	1dfb      	adds	r3, r7, #7
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	b25b      	sxtb	r3, r3
 80025ea:	089b      	lsrs	r3, r3, #2
 80025ec:	430a      	orrs	r2, r1
 80025ee:	33c0      	adds	r3, #192	; 0xc0
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	501a      	str	r2, [r3, r0]
}
 80025f4:	46c0      	nop			; (mov r8, r8)
 80025f6:	46bd      	mov	sp, r7
 80025f8:	b003      	add	sp, #12
 80025fa:	bd90      	pop	{r4, r7, pc}
 80025fc:	e000ed00 	.word	0xe000ed00
 8002600:	e000e100 	.word	0xe000e100

08002604 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b082      	sub	sp, #8
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	3b01      	subs	r3, #1
 8002610:	4a0c      	ldr	r2, [pc, #48]	; (8002644 <SysTick_Config+0x40>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d901      	bls.n	800261a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002616:	2301      	movs	r3, #1
 8002618:	e010      	b.n	800263c <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800261a:	4b0b      	ldr	r3, [pc, #44]	; (8002648 <SysTick_Config+0x44>)
 800261c:	687a      	ldr	r2, [r7, #4]
 800261e:	3a01      	subs	r2, #1
 8002620:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002622:	2301      	movs	r3, #1
 8002624:	425b      	negs	r3, r3
 8002626:	2103      	movs	r1, #3
 8002628:	0018      	movs	r0, r3
 800262a:	f7ff ff7d 	bl	8002528 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800262e:	4b06      	ldr	r3, [pc, #24]	; (8002648 <SysTick_Config+0x44>)
 8002630:	2200      	movs	r2, #0
 8002632:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002634:	4b04      	ldr	r3, [pc, #16]	; (8002648 <SysTick_Config+0x44>)
 8002636:	2207      	movs	r2, #7
 8002638:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800263a:	2300      	movs	r3, #0
}
 800263c:	0018      	movs	r0, r3
 800263e:	46bd      	mov	sp, r7
 8002640:	b002      	add	sp, #8
 8002642:	bd80      	pop	{r7, pc}
 8002644:	00ffffff 	.word	0x00ffffff
 8002648:	e000e010 	.word	0xe000e010

0800264c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800264c:	b580      	push	{r7, lr}
 800264e:	b084      	sub	sp, #16
 8002650:	af00      	add	r7, sp, #0
 8002652:	60b9      	str	r1, [r7, #8]
 8002654:	607a      	str	r2, [r7, #4]
 8002656:	210f      	movs	r1, #15
 8002658:	187b      	adds	r3, r7, r1
 800265a:	1c02      	adds	r2, r0, #0
 800265c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800265e:	68ba      	ldr	r2, [r7, #8]
 8002660:	187b      	adds	r3, r7, r1
 8002662:	781b      	ldrb	r3, [r3, #0]
 8002664:	b25b      	sxtb	r3, r3
 8002666:	0011      	movs	r1, r2
 8002668:	0018      	movs	r0, r3
 800266a:	f7ff ff5d 	bl	8002528 <NVIC_SetPriority>
}
 800266e:	46c0      	nop			; (mov r8, r8)
 8002670:	46bd      	mov	sp, r7
 8002672:	b004      	add	sp, #16
 8002674:	bd80      	pop	{r7, pc}

08002676 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002676:	b580      	push	{r7, lr}
 8002678:	b082      	sub	sp, #8
 800267a:	af00      	add	r7, sp, #0
 800267c:	0002      	movs	r2, r0
 800267e:	1dfb      	adds	r3, r7, #7
 8002680:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002682:	1dfb      	adds	r3, r7, #7
 8002684:	781b      	ldrb	r3, [r3, #0]
 8002686:	b25b      	sxtb	r3, r3
 8002688:	0018      	movs	r0, r3
 800268a:	f7ff ff37 	bl	80024fc <NVIC_EnableIRQ>
}
 800268e:	46c0      	nop			; (mov r8, r8)
 8002690:	46bd      	mov	sp, r7
 8002692:	b002      	add	sp, #8
 8002694:	bd80      	pop	{r7, pc}

08002696 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002696:	b580      	push	{r7, lr}
 8002698:	b082      	sub	sp, #8
 800269a:	af00      	add	r7, sp, #0
 800269c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	0018      	movs	r0, r3
 80026a2:	f7ff ffaf 	bl	8002604 <SysTick_Config>
 80026a6:	0003      	movs	r3, r0
}
 80026a8:	0018      	movs	r0, r3
 80026aa:	46bd      	mov	sp, r7
 80026ac:	b002      	add	sp, #8
 80026ae:	bd80      	pop	{r7, pc}

080026b0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b084      	sub	sp, #16
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d101      	bne.n	80026c2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e061      	b.n	8002786 <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a32      	ldr	r2, [pc, #200]	; (8002790 <HAL_DMA_Init+0xe0>)
 80026c8:	4694      	mov	ip, r2
 80026ca:	4463      	add	r3, ip
 80026cc:	2114      	movs	r1, #20
 80026ce:	0018      	movs	r0, r3
 80026d0:	f7fd fd1a 	bl	8000108 <__udivsi3>
 80026d4:	0003      	movs	r3, r0
 80026d6:	009a      	lsls	r2, r3, #2
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	4a2d      	ldr	r2, [pc, #180]	; (8002794 <HAL_DMA_Init+0xe4>)
 80026e0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2225      	movs	r2, #37	; 0x25
 80026e6:	2102      	movs	r1, #2
 80026e8:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	4a28      	ldr	r2, [pc, #160]	; (8002798 <HAL_DMA_Init+0xe8>)
 80026f6:	4013      	ands	r3, r2
 80026f8:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002702:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	691b      	ldr	r3, [r3, #16]
 8002708:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800270e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	699b      	ldr	r3, [r3, #24]
 8002714:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800271a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6a1b      	ldr	r3, [r3, #32]
 8002720:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002722:	68fa      	ldr	r2, [r7, #12]
 8002724:	4313      	orrs	r3, r2
 8002726:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	68fa      	ldr	r2, [r7, #12]
 800272e:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	689a      	ldr	r2, [r3, #8]
 8002734:	2380      	movs	r3, #128	; 0x80
 8002736:	01db      	lsls	r3, r3, #7
 8002738:	429a      	cmp	r2, r3
 800273a:	d018      	beq.n	800276e <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800273c:	4b17      	ldr	r3, [pc, #92]	; (800279c <HAL_DMA_Init+0xec>)
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002744:	211c      	movs	r1, #28
 8002746:	400b      	ands	r3, r1
 8002748:	210f      	movs	r1, #15
 800274a:	4099      	lsls	r1, r3
 800274c:	000b      	movs	r3, r1
 800274e:	43d9      	mvns	r1, r3
 8002750:	4b12      	ldr	r3, [pc, #72]	; (800279c <HAL_DMA_Init+0xec>)
 8002752:	400a      	ands	r2, r1
 8002754:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002756:	4b11      	ldr	r3, [pc, #68]	; (800279c <HAL_DMA_Init+0xec>)
 8002758:	6819      	ldr	r1, [r3, #0]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	685a      	ldr	r2, [r3, #4]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002762:	201c      	movs	r0, #28
 8002764:	4003      	ands	r3, r0
 8002766:	409a      	lsls	r2, r3
 8002768:	4b0c      	ldr	r3, [pc, #48]	; (800279c <HAL_DMA_Init+0xec>)
 800276a:	430a      	orrs	r2, r1
 800276c:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2200      	movs	r2, #0
 8002772:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2225      	movs	r2, #37	; 0x25
 8002778:	2101      	movs	r1, #1
 800277a:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2224      	movs	r2, #36	; 0x24
 8002780:	2100      	movs	r1, #0
 8002782:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002784:	2300      	movs	r3, #0
}
 8002786:	0018      	movs	r0, r3
 8002788:	46bd      	mov	sp, r7
 800278a:	b004      	add	sp, #16
 800278c:	bd80      	pop	{r7, pc}
 800278e:	46c0      	nop			; (mov r8, r8)
 8002790:	bffdfff8 	.word	0xbffdfff8
 8002794:	40020000 	.word	0x40020000
 8002798:	ffff800f 	.word	0xffff800f
 800279c:	400200a8 	.word	0x400200a8

080027a0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b086      	sub	sp, #24
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	60f8      	str	r0, [r7, #12]
 80027a8:	60b9      	str	r1, [r7, #8]
 80027aa:	607a      	str	r2, [r7, #4]
 80027ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027ae:	2317      	movs	r3, #23
 80027b0:	18fb      	adds	r3, r7, r3
 80027b2:	2200      	movs	r2, #0
 80027b4:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	2224      	movs	r2, #36	; 0x24
 80027ba:	5c9b      	ldrb	r3, [r3, r2]
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d101      	bne.n	80027c4 <HAL_DMA_Start_IT+0x24>
 80027c0:	2302      	movs	r3, #2
 80027c2:	e04f      	b.n	8002864 <HAL_DMA_Start_IT+0xc4>
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2224      	movs	r2, #36	; 0x24
 80027c8:	2101      	movs	r1, #1
 80027ca:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2225      	movs	r2, #37	; 0x25
 80027d0:	5c9b      	ldrb	r3, [r3, r2]
 80027d2:	b2db      	uxtb	r3, r3
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d13a      	bne.n	800284e <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2225      	movs	r2, #37	; 0x25
 80027dc:	2102      	movs	r1, #2
 80027de:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2200      	movs	r2, #0
 80027e4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	2101      	movs	r1, #1
 80027f2:	438a      	bics	r2, r1
 80027f4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	687a      	ldr	r2, [r7, #4]
 80027fa:	68b9      	ldr	r1, [r7, #8]
 80027fc:	68f8      	ldr	r0, [r7, #12]
 80027fe:	f000 f92b 	bl	8002a58 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002806:	2b00      	cmp	r3, #0
 8002808:	d008      	beq.n	800281c <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	210e      	movs	r1, #14
 8002816:	430a      	orrs	r2, r1
 8002818:	601a      	str	r2, [r3, #0]
 800281a:	e00f      	b.n	800283c <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	2104      	movs	r1, #4
 8002828:	438a      	bics	r2, r1
 800282a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	210a      	movs	r1, #10
 8002838:	430a      	orrs	r2, r1
 800283a:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	2101      	movs	r1, #1
 8002848:	430a      	orrs	r2, r1
 800284a:	601a      	str	r2, [r3, #0]
 800284c:	e007      	b.n	800285e <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2224      	movs	r2, #36	; 0x24
 8002852:	2100      	movs	r1, #0
 8002854:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002856:	2317      	movs	r3, #23
 8002858:	18fb      	adds	r3, r7, r3
 800285a:	2202      	movs	r2, #2
 800285c:	701a      	strb	r2, [r3, #0]
  }
  return status;
 800285e:	2317      	movs	r3, #23
 8002860:	18fb      	adds	r3, r7, r3
 8002862:	781b      	ldrb	r3, [r3, #0]
}
 8002864:	0018      	movs	r0, r3
 8002866:	46bd      	mov	sp, r7
 8002868:	b006      	add	sp, #24
 800286a:	bd80      	pop	{r7, pc}

0800286c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b084      	sub	sp, #16
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002874:	230f      	movs	r3, #15
 8002876:	18fb      	adds	r3, r7, r3
 8002878:	2200      	movs	r2, #0
 800287a:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2225      	movs	r2, #37	; 0x25
 8002880:	5c9b      	ldrb	r3, [r3, r2]
 8002882:	b2db      	uxtb	r3, r3
 8002884:	2b02      	cmp	r3, #2
 8002886:	d007      	beq.n	8002898 <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2204      	movs	r2, #4
 800288c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800288e:	230f      	movs	r3, #15
 8002890:	18fb      	adds	r3, r7, r3
 8002892:	2201      	movs	r2, #1
 8002894:	701a      	strb	r2, [r3, #0]
 8002896:	e02a      	b.n	80028ee <HAL_DMA_Abort_IT+0x82>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	210e      	movs	r1, #14
 80028a4:	438a      	bics	r2, r1
 80028a6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	2101      	movs	r1, #1
 80028b4:	438a      	bics	r2, r1
 80028b6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028bc:	221c      	movs	r2, #28
 80028be:	401a      	ands	r2, r3
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c4:	2101      	movs	r1, #1
 80028c6:	4091      	lsls	r1, r2
 80028c8:	000a      	movs	r2, r1
 80028ca:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2225      	movs	r2, #37	; 0x25
 80028d0:	2101      	movs	r1, #1
 80028d2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2224      	movs	r2, #36	; 0x24
 80028d8:	2100      	movs	r1, #0
 80028da:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d004      	beq.n	80028ee <HAL_DMA_Abort_IT+0x82>
    {
      hdma->XferAbortCallback(hdma);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028e8:	687a      	ldr	r2, [r7, #4]
 80028ea:	0010      	movs	r0, r2
 80028ec:	4798      	blx	r3
    }
  }
  return status;
 80028ee:	230f      	movs	r3, #15
 80028f0:	18fb      	adds	r3, r7, r3
 80028f2:	781b      	ldrb	r3, [r3, #0]
}
 80028f4:	0018      	movs	r0, r3
 80028f6:	46bd      	mov	sp, r7
 80028f8:	b004      	add	sp, #16
 80028fa:	bd80      	pop	{r7, pc}

080028fc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b084      	sub	sp, #16
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002918:	221c      	movs	r2, #28
 800291a:	4013      	ands	r3, r2
 800291c:	2204      	movs	r2, #4
 800291e:	409a      	lsls	r2, r3
 8002920:	0013      	movs	r3, r2
 8002922:	68fa      	ldr	r2, [r7, #12]
 8002924:	4013      	ands	r3, r2
 8002926:	d026      	beq.n	8002976 <HAL_DMA_IRQHandler+0x7a>
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	2204      	movs	r2, #4
 800292c:	4013      	ands	r3, r2
 800292e:	d022      	beq.n	8002976 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	2220      	movs	r2, #32
 8002938:	4013      	ands	r3, r2
 800293a:	d107      	bne.n	800294c <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	2104      	movs	r1, #4
 8002948:	438a      	bics	r2, r1
 800294a:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002950:	221c      	movs	r2, #28
 8002952:	401a      	ands	r2, r3
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002958:	2104      	movs	r1, #4
 800295a:	4091      	lsls	r1, r2
 800295c:	000a      	movs	r2, r1
 800295e:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002964:	2b00      	cmp	r3, #0
 8002966:	d100      	bne.n	800296a <HAL_DMA_IRQHandler+0x6e>
 8002968:	e071      	b.n	8002a4e <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296e:	687a      	ldr	r2, [r7, #4]
 8002970:	0010      	movs	r0, r2
 8002972:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8002974:	e06b      	b.n	8002a4e <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800297a:	221c      	movs	r2, #28
 800297c:	4013      	ands	r3, r2
 800297e:	2202      	movs	r2, #2
 8002980:	409a      	lsls	r2, r3
 8002982:	0013      	movs	r3, r2
 8002984:	68fa      	ldr	r2, [r7, #12]
 8002986:	4013      	ands	r3, r2
 8002988:	d02d      	beq.n	80029e6 <HAL_DMA_IRQHandler+0xea>
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	2202      	movs	r2, #2
 800298e:	4013      	ands	r3, r2
 8002990:	d029      	beq.n	80029e6 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	2220      	movs	r2, #32
 800299a:	4013      	ands	r3, r2
 800299c:	d10b      	bne.n	80029b6 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	210a      	movs	r1, #10
 80029aa:	438a      	bics	r2, r1
 80029ac:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2225      	movs	r2, #37	; 0x25
 80029b2:	2101      	movs	r1, #1
 80029b4:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ba:	221c      	movs	r2, #28
 80029bc:	401a      	ands	r2, r3
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c2:	2102      	movs	r1, #2
 80029c4:	4091      	lsls	r1, r2
 80029c6:	000a      	movs	r2, r1
 80029c8:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2224      	movs	r2, #36	; 0x24
 80029ce:	2100      	movs	r1, #0
 80029d0:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d039      	beq.n	8002a4e <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	0010      	movs	r0, r2
 80029e2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80029e4:	e033      	b.n	8002a4e <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ea:	221c      	movs	r2, #28
 80029ec:	4013      	ands	r3, r2
 80029ee:	2208      	movs	r2, #8
 80029f0:	409a      	lsls	r2, r3
 80029f2:	0013      	movs	r3, r2
 80029f4:	68fa      	ldr	r2, [r7, #12]
 80029f6:	4013      	ands	r3, r2
 80029f8:	d02a      	beq.n	8002a50 <HAL_DMA_IRQHandler+0x154>
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	2208      	movs	r2, #8
 80029fe:	4013      	ands	r3, r2
 8002a00:	d026      	beq.n	8002a50 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	210e      	movs	r1, #14
 8002a0e:	438a      	bics	r2, r1
 8002a10:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a16:	221c      	movs	r2, #28
 8002a18:	401a      	ands	r2, r3
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1e:	2101      	movs	r1, #1
 8002a20:	4091      	lsls	r1, r2
 8002a22:	000a      	movs	r2, r1
 8002a24:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2201      	movs	r2, #1
 8002a2a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2225      	movs	r2, #37	; 0x25
 8002a30:	2101      	movs	r1, #1
 8002a32:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2224      	movs	r2, #36	; 0x24
 8002a38:	2100      	movs	r1, #0
 8002a3a:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d005      	beq.n	8002a50 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a48:	687a      	ldr	r2, [r7, #4]
 8002a4a:	0010      	movs	r0, r2
 8002a4c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002a4e:	46c0      	nop			; (mov r8, r8)
 8002a50:	46c0      	nop			; (mov r8, r8)
}
 8002a52:	46bd      	mov	sp, r7
 8002a54:	b004      	add	sp, #16
 8002a56:	bd80      	pop	{r7, pc}

08002a58 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b084      	sub	sp, #16
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	60f8      	str	r0, [r7, #12]
 8002a60:	60b9      	str	r1, [r7, #8]
 8002a62:	607a      	str	r2, [r7, #4]
 8002a64:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a6a:	221c      	movs	r2, #28
 8002a6c:	401a      	ands	r2, r3
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a72:	2101      	movs	r1, #1
 8002a74:	4091      	lsls	r1, r2
 8002a76:	000a      	movs	r2, r1
 8002a78:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	683a      	ldr	r2, [r7, #0]
 8002a80:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	2b10      	cmp	r3, #16
 8002a88:	d108      	bne.n	8002a9c <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	687a      	ldr	r2, [r7, #4]
 8002a90:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	68ba      	ldr	r2, [r7, #8]
 8002a98:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002a9a:	e007      	b.n	8002aac <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	68ba      	ldr	r2, [r7, #8]
 8002aa2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	687a      	ldr	r2, [r7, #4]
 8002aaa:	60da      	str	r2, [r3, #12]
}
 8002aac:	46c0      	nop			; (mov r8, r8)
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	b004      	add	sp, #16
 8002ab2:	bd80      	pop	{r7, pc}

08002ab4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b086      	sub	sp, #24
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
 8002abc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,(GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8002aca:	e155      	b.n	8002d78 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	2101      	movs	r1, #1
 8002ad2:	697a      	ldr	r2, [r7, #20]
 8002ad4:	4091      	lsls	r1, r2
 8002ad6:	000a      	movs	r2, r1
 8002ad8:	4013      	ands	r3, r2
 8002ada:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d100      	bne.n	8002ae4 <HAL_GPIO_Init+0x30>
 8002ae2:	e146      	b.n	8002d72 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	2b02      	cmp	r3, #2
 8002aea:	d003      	beq.n	8002af4 <HAL_GPIO_Init+0x40>
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	2b12      	cmp	r3, #18
 8002af2:	d123      	bne.n	8002b3c <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3U];
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	08da      	lsrs	r2, r3, #3
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	3208      	adds	r2, #8
 8002afc:	0092      	lsls	r2, r2, #2
 8002afe:	58d3      	ldr	r3, [r2, r3]
 8002b00:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	2207      	movs	r2, #7
 8002b06:	4013      	ands	r3, r2
 8002b08:	009b      	lsls	r3, r3, #2
 8002b0a:	220f      	movs	r2, #15
 8002b0c:	409a      	lsls	r2, r3
 8002b0e:	0013      	movs	r3, r2
 8002b10:	43da      	mvns	r2, r3
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	4013      	ands	r3, r2
 8002b16:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	691a      	ldr	r2, [r3, #16]
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	2107      	movs	r1, #7
 8002b20:	400b      	ands	r3, r1
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	409a      	lsls	r2, r3
 8002b26:	0013      	movs	r3, r2
 8002b28:	693a      	ldr	r2, [r7, #16]
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	08da      	lsrs	r2, r3, #3
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	3208      	adds	r2, #8
 8002b36:	0092      	lsls	r2, r2, #2
 8002b38:	6939      	ldr	r1, [r7, #16]
 8002b3a:	50d1      	str	r1, [r2, r3]
      } 

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d00b      	beq.n	8002b5c <HAL_GPIO_Init+0xa8>
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	2b02      	cmp	r3, #2
 8002b4a:	d007      	beq.n	8002b5c <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002b50:	2b11      	cmp	r3, #17
 8002b52:	d003      	beq.n	8002b5c <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	2b12      	cmp	r3, #18
 8002b5a:	d130      	bne.n	8002bbe <HAL_GPIO_Init+0x10a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	005b      	lsls	r3, r3, #1
 8002b66:	2203      	movs	r2, #3
 8002b68:	409a      	lsls	r2, r3
 8002b6a:	0013      	movs	r3, r2
 8002b6c:	43da      	mvns	r2, r3
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	4013      	ands	r3, r2
 8002b72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	68da      	ldr	r2, [r3, #12]
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	005b      	lsls	r3, r3, #1
 8002b7c:	409a      	lsls	r2, r3
 8002b7e:	0013      	movs	r3, r2
 8002b80:	693a      	ldr	r2, [r7, #16]
 8002b82:	4313      	orrs	r3, r2
 8002b84:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	693a      	ldr	r2, [r7, #16]
 8002b8a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp= GPIOx->OTYPER;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b92:	2201      	movs	r2, #1
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	409a      	lsls	r2, r3
 8002b98:	0013      	movs	r3, r2
 8002b9a:	43da      	mvns	r2, r3
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	091b      	lsrs	r3, r3, #4
 8002ba8:	2201      	movs	r2, #1
 8002baa:	401a      	ands	r2, r3
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	409a      	lsls	r2, r3
 8002bb0:	0013      	movs	r3, r2
 8002bb2:	693a      	ldr	r2, [r7, #16]
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	693a      	ldr	r2, [r7, #16]
 8002bbc:	605a      	str	r2, [r3, #4]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	005b      	lsls	r3, r3, #1
 8002bc8:	2203      	movs	r2, #3
 8002bca:	409a      	lsls	r2, r3
 8002bcc:	0013      	movs	r3, r2
 8002bce:	43da      	mvns	r2, r3
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	2203      	movs	r2, #3
 8002bdc:	401a      	ands	r2, r3
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	005b      	lsls	r3, r3, #1
 8002be2:	409a      	lsls	r2, r3
 8002be4:	0013      	movs	r3, r2
 8002be6:	693a      	ldr	r2, [r7, #16]
 8002be8:	4313      	orrs	r3, r2
 8002bea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	693a      	ldr	r2, [r7, #16]
 8002bf0:	601a      	str	r2, [r3, #0]

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	68db      	ldr	r3, [r3, #12]
 8002bf6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	005b      	lsls	r3, r3, #1
 8002bfc:	2203      	movs	r2, #3
 8002bfe:	409a      	lsls	r2, r3
 8002c00:	0013      	movs	r3, r2
 8002c02:	43da      	mvns	r2, r3
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	4013      	ands	r3, r2
 8002c08:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	689a      	ldr	r2, [r3, #8]
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	005b      	lsls	r3, r3, #1
 8002c12:	409a      	lsls	r2, r3
 8002c14:	0013      	movs	r3, r2
 8002c16:	693a      	ldr	r2, [r7, #16]
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	693a      	ldr	r2, [r7, #16]
 8002c20:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	685a      	ldr	r2, [r3, #4]
 8002c26:	2380      	movs	r3, #128	; 0x80
 8002c28:	055b      	lsls	r3, r3, #21
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	d100      	bne.n	8002c30 <HAL_GPIO_Init+0x17c>
 8002c2e:	e0a0      	b.n	8002d72 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c30:	4b57      	ldr	r3, [pc, #348]	; (8002d90 <HAL_GPIO_Init+0x2dc>)
 8002c32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c34:	4b56      	ldr	r3, [pc, #344]	; (8002d90 <HAL_GPIO_Init+0x2dc>)
 8002c36:	2101      	movs	r1, #1
 8002c38:	430a      	orrs	r2, r1
 8002c3a:	635a      	str	r2, [r3, #52]	; 0x34
        
        temp = SYSCFG->EXTICR[position >> 2U];
 8002c3c:	4a55      	ldr	r2, [pc, #340]	; (8002d94 <HAL_GPIO_Init+0x2e0>)
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	089b      	lsrs	r3, r3, #2
 8002c42:	3302      	adds	r3, #2
 8002c44:	009b      	lsls	r3, r3, #2
 8002c46:	589b      	ldr	r3, [r3, r2]
 8002c48:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	2203      	movs	r2, #3
 8002c4e:	4013      	ands	r3, r2
 8002c50:	009b      	lsls	r3, r3, #2
 8002c52:	220f      	movs	r2, #15
 8002c54:	409a      	lsls	r2, r3
 8002c56:	0013      	movs	r3, r2
 8002c58:	43da      	mvns	r2, r3
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8002c60:	687a      	ldr	r2, [r7, #4]
 8002c62:	23a0      	movs	r3, #160	; 0xa0
 8002c64:	05db      	lsls	r3, r3, #23
 8002c66:	429a      	cmp	r2, r3
 8002c68:	d01f      	beq.n	8002caa <HAL_GPIO_Init+0x1f6>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	4a4a      	ldr	r2, [pc, #296]	; (8002d98 <HAL_GPIO_Init+0x2e4>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d019      	beq.n	8002ca6 <HAL_GPIO_Init+0x1f2>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	4a49      	ldr	r2, [pc, #292]	; (8002d9c <HAL_GPIO_Init+0x2e8>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d013      	beq.n	8002ca2 <HAL_GPIO_Init+0x1ee>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	4a48      	ldr	r2, [pc, #288]	; (8002da0 <HAL_GPIO_Init+0x2ec>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d00d      	beq.n	8002c9e <HAL_GPIO_Init+0x1ea>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	4a47      	ldr	r2, [pc, #284]	; (8002da4 <HAL_GPIO_Init+0x2f0>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d007      	beq.n	8002c9a <HAL_GPIO_Init+0x1e6>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	4a46      	ldr	r2, [pc, #280]	; (8002da8 <HAL_GPIO_Init+0x2f4>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d101      	bne.n	8002c96 <HAL_GPIO_Init+0x1e2>
 8002c92:	2305      	movs	r3, #5
 8002c94:	e00a      	b.n	8002cac <HAL_GPIO_Init+0x1f8>
 8002c96:	2306      	movs	r3, #6
 8002c98:	e008      	b.n	8002cac <HAL_GPIO_Init+0x1f8>
 8002c9a:	2304      	movs	r3, #4
 8002c9c:	e006      	b.n	8002cac <HAL_GPIO_Init+0x1f8>
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	e004      	b.n	8002cac <HAL_GPIO_Init+0x1f8>
 8002ca2:	2302      	movs	r3, #2
 8002ca4:	e002      	b.n	8002cac <HAL_GPIO_Init+0x1f8>
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e000      	b.n	8002cac <HAL_GPIO_Init+0x1f8>
 8002caa:	2300      	movs	r3, #0
 8002cac:	697a      	ldr	r2, [r7, #20]
 8002cae:	2103      	movs	r1, #3
 8002cb0:	400a      	ands	r2, r1
 8002cb2:	0092      	lsls	r2, r2, #2
 8002cb4:	4093      	lsls	r3, r2
 8002cb6:	693a      	ldr	r2, [r7, #16]
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002cbc:	4935      	ldr	r1, [pc, #212]	; (8002d94 <HAL_GPIO_Init+0x2e0>)
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	089b      	lsrs	r3, r3, #2
 8002cc2:	3302      	adds	r3, #2
 8002cc4:	009b      	lsls	r3, r3, #2
 8002cc6:	693a      	ldr	r2, [r7, #16]
 8002cc8:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002cca:	4b38      	ldr	r3, [pc, #224]	; (8002dac <HAL_GPIO_Init+0x2f8>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	43da      	mvns	r2, r3
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	685a      	ldr	r2, [r3, #4]
 8002cde:	2380      	movs	r3, #128	; 0x80
 8002ce0:	025b      	lsls	r3, r3, #9
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	d003      	beq.n	8002cee <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8002ce6:	693a      	ldr	r2, [r7, #16]
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	4313      	orrs	r3, r2
 8002cec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002cee:	4b2f      	ldr	r3, [pc, #188]	; (8002dac <HAL_GPIO_Init+0x2f8>)
 8002cf0:	693a      	ldr	r2, [r7, #16]
 8002cf2:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8002cf4:	4b2d      	ldr	r3, [pc, #180]	; (8002dac <HAL_GPIO_Init+0x2f8>)
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	43da      	mvns	r2, r3
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	4013      	ands	r3, r2
 8002d02:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	685a      	ldr	r2, [r3, #4]
 8002d08:	2380      	movs	r3, #128	; 0x80
 8002d0a:	029b      	lsls	r3, r3, #10
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	d003      	beq.n	8002d18 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002d10:	693a      	ldr	r2, [r7, #16]
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	4313      	orrs	r3, r2
 8002d16:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002d18:	4b24      	ldr	r3, [pc, #144]	; (8002dac <HAL_GPIO_Init+0x2f8>)
 8002d1a:	693a      	ldr	r2, [r7, #16]
 8002d1c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d1e:	4b23      	ldr	r3, [pc, #140]	; (8002dac <HAL_GPIO_Init+0x2f8>)
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	43da      	mvns	r2, r3
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	685a      	ldr	r2, [r3, #4]
 8002d32:	2380      	movs	r3, #128	; 0x80
 8002d34:	035b      	lsls	r3, r3, #13
 8002d36:	4013      	ands	r3, r2
 8002d38:	d003      	beq.n	8002d42 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8002d3a:	693a      	ldr	r2, [r7, #16]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002d42:	4b1a      	ldr	r3, [pc, #104]	; (8002dac <HAL_GPIO_Init+0x2f8>)
 8002d44:	693a      	ldr	r2, [r7, #16]
 8002d46:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002d48:	4b18      	ldr	r3, [pc, #96]	; (8002dac <HAL_GPIO_Init+0x2f8>)
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	43da      	mvns	r2, r3
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	4013      	ands	r3, r2
 8002d56:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	685a      	ldr	r2, [r3, #4]
 8002d5c:	2380      	movs	r3, #128	; 0x80
 8002d5e:	039b      	lsls	r3, r3, #14
 8002d60:	4013      	ands	r3, r2
 8002d62:	d003      	beq.n	8002d6c <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8002d64:	693a      	ldr	r2, [r7, #16]
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002d6c:	4b0f      	ldr	r3, [pc, #60]	; (8002dac <HAL_GPIO_Init+0x2f8>)
 8002d6e:	693a      	ldr	r2, [r7, #16]
 8002d70:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	3301      	adds	r3, #1
 8002d76:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	40da      	lsrs	r2, r3
 8002d80:	1e13      	subs	r3, r2, #0
 8002d82:	d000      	beq.n	8002d86 <HAL_GPIO_Init+0x2d2>
 8002d84:	e6a2      	b.n	8002acc <HAL_GPIO_Init+0x18>
  }
}
 8002d86:	46c0      	nop			; (mov r8, r8)
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	b006      	add	sp, #24
 8002d8c:	bd80      	pop	{r7, pc}
 8002d8e:	46c0      	nop			; (mov r8, r8)
 8002d90:	40021000 	.word	0x40021000
 8002d94:	40010000 	.word	0x40010000
 8002d98:	50000400 	.word	0x50000400
 8002d9c:	50000800 	.word	0x50000800
 8002da0:	50000c00 	.word	0x50000c00
 8002da4:	50001000 	.word	0x50001000
 8002da8:	50001c00 	.word	0x50001c00
 8002dac:	40010400 	.word	0x40010400

08002db0 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b084      	sub	sp, #16
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
 8002db8:	000a      	movs	r2, r1
 8002dba:	1cbb      	adds	r3, r7, #2
 8002dbc:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;
  
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  
  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	691b      	ldr	r3, [r3, #16]
 8002dc2:	1cba      	adds	r2, r7, #2
 8002dc4:	8812      	ldrh	r2, [r2, #0]
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	d004      	beq.n	8002dd4 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002dca:	230f      	movs	r3, #15
 8002dcc:	18fb      	adds	r3, r7, r3
 8002dce:	2201      	movs	r2, #1
 8002dd0:	701a      	strb	r2, [r3, #0]
 8002dd2:	e003      	b.n	8002ddc <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002dd4:	230f      	movs	r3, #15
 8002dd6:	18fb      	adds	r3, r7, r3
 8002dd8:	2200      	movs	r2, #0
 8002dda:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002ddc:	230f      	movs	r3, #15
 8002dde:	18fb      	adds	r3, r7, r3
 8002de0:	781b      	ldrb	r3, [r3, #0]
}
 8002de2:	0018      	movs	r0, r3
 8002de4:	46bd      	mov	sp, r7
 8002de6:	b004      	add	sp, #16
 8002de8:	bd80      	pop	{r7, pc}

08002dea <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002dea:	b580      	push	{r7, lr}
 8002dec:	b082      	sub	sp, #8
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	6078      	str	r0, [r7, #4]
 8002df2:	0008      	movs	r0, r1
 8002df4:	0011      	movs	r1, r2
 8002df6:	1cbb      	adds	r3, r7, #2
 8002df8:	1c02      	adds	r2, r0, #0
 8002dfa:	801a      	strh	r2, [r3, #0]
 8002dfc:	1c7b      	adds	r3, r7, #1
 8002dfe:	1c0a      	adds	r2, r1, #0
 8002e00:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 8002e02:	1c7b      	adds	r3, r7, #1
 8002e04:	781b      	ldrb	r3, [r3, #0]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d004      	beq.n	8002e14 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e0a:	1cbb      	adds	r3, r7, #2
 8002e0c:	881a      	ldrh	r2, [r3, #0]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8002e12:	e003      	b.n	8002e1c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8002e14:	1cbb      	adds	r3, r7, #2
 8002e16:	881a      	ldrh	r2, [r3, #0]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002e1c:	46c0      	nop			; (mov r8, r8)
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	b002      	add	sp, #8
 8002e22:	bd80      	pop	{r7, pc}

08002e24 <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b082      	sub	sp, #8
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
 8002e2c:	000a      	movs	r2, r1
 8002e2e:	1cbb      	adds	r3, r7, #2
 8002e30:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	695a      	ldr	r2, [r3, #20]
 8002e36:	1cbb      	adds	r3, r7, #2
 8002e38:	881b      	ldrh	r3, [r3, #0]
 8002e3a:	405a      	eors	r2, r3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	615a      	str	r2, [r3, #20]
}
 8002e40:	46c0      	nop			; (mov r8, r8)
 8002e42:	46bd      	mov	sp, r7
 8002e44:	b002      	add	sp, #8
 8002e46:	bd80      	pop	{r7, pc}

08002e48 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b082      	sub	sp, #8
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	0002      	movs	r2, r0
 8002e50:	1dbb      	adds	r3, r7, #6
 8002e52:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 8002e54:	4b09      	ldr	r3, [pc, #36]	; (8002e7c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8002e56:	695b      	ldr	r3, [r3, #20]
 8002e58:	1dba      	adds	r2, r7, #6
 8002e5a:	8812      	ldrh	r2, [r2, #0]
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	d008      	beq.n	8002e72 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002e60:	4b06      	ldr	r3, [pc, #24]	; (8002e7c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8002e62:	1dba      	adds	r2, r7, #6
 8002e64:	8812      	ldrh	r2, [r2, #0]
 8002e66:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002e68:	1dbb      	adds	r3, r7, #6
 8002e6a:	881b      	ldrh	r3, [r3, #0]
 8002e6c:	0018      	movs	r0, r3
 8002e6e:	f7fe fd5d 	bl	800192c <HAL_GPIO_EXTI_Callback>
  }
}
 8002e72:	46c0      	nop			; (mov r8, r8)
 8002e74:	46bd      	mov	sp, r7
 8002e76:	b002      	add	sp, #8
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	46c0      	nop			; (mov r8, r8)
 8002e7c:	40010400 	.word	0x40010400

08002e80 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b084      	sub	sp, #16
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d101      	bne.n	8002e92 <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e06c      	b.n	8002f6c <HAL_LPTIM_Init+0xec>
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	222e      	movs	r2, #46	; 0x2e
 8002e96:	5c9b      	ldrb	r3, [r3, r2]
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d107      	bne.n	8002eae <HAL_LPTIM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	222d      	movs	r2, #45	; 0x2d
 8002ea2:	2100      	movs	r1, #0
 8002ea4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	0018      	movs	r0, r3
 8002eaa:	f7fe fe9f 	bl	8001bec <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	222e      	movs	r2, #46	; 0x2e
 8002eb2:	2102      	movs	r1, #2
 8002eb4:	5499      	strb	r1, [r3, r2]

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	68db      	ldr	r3, [r3, #12]
 8002ebc:	60fb      	str	r3, [r7, #12]

  if (((hlptim->Init.Clock.Source) == LPTIM_CLOCKSOURCE_ULPTIM) || ((hlptim->Init.CounterSource) == LPTIM_COUNTERSOURCE_EXTERNAL))
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d005      	beq.n	8002ed2 <HAL_LPTIM_Init+0x52>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002eca:	2380      	movs	r3, #128	; 0x80
 8002ecc:	041b      	lsls	r3, r3, #16
 8002ece:	429a      	cmp	r2, r3
 8002ed0:	d103      	bne.n	8002eda <HAL_LPTIM_Init+0x5a>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	221e      	movs	r2, #30
 8002ed6:	4393      	bics	r3, r2
 8002ed8:	60fb      	str	r3, [r7, #12]
  }
  if ((hlptim->Init.Trigger.Source) != LPTIM_TRIGSOURCE_SOFTWARE)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	695b      	ldr	r3, [r3, #20]
 8002ede:	4a25      	ldr	r2, [pc, #148]	; (8002f74 <HAL_LPTIM_Init+0xf4>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d003      	beq.n	8002eec <HAL_LPTIM_Init+0x6c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	4a24      	ldr	r2, [pc, #144]	; (8002f78 <HAL_LPTIM_Init+0xf8>)
 8002ee8:	4013      	ands	r3, r2
 8002eea:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, CKPOL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_CKPOL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	4a23      	ldr	r2, [pc, #140]	; (8002f7c <HAL_LPTIM_Init+0xfc>)
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8002efc:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 8002f02:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 8002f08:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 8002f0e:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8002f10:	68fa      	ldr	r2, [r7, #12]
 8002f12:	4313      	orrs	r3, r2
 8002f14:	60fb      	str	r3, [r7, #12]

  if (((hlptim->Init.Clock.Source) == LPTIM_CLOCKSOURCE_ULPTIM) || ((hlptim->Init.CounterSource) == LPTIM_COUNTERSOURCE_EXTERNAL))
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d005      	beq.n	8002f2a <HAL_LPTIM_Init+0xaa>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f22:	2380      	movs	r3, #128	; 0x80
 8002f24:	041b      	lsls	r3, r3, #16
 8002f26:	429a      	cmp	r2, r3
 8002f28:	d107      	bne.n	8002f3a <HAL_LPTIM_Init+0xba>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8002f32:	4313      	orrs	r3, r2
 8002f34:	68fa      	ldr	r2, [r7, #12]
 8002f36:	4313      	orrs	r3, r2
 8002f38:	60fb      	str	r3, [r7, #12]
  }

  if ((hlptim->Init.Trigger.Source) != LPTIM_TRIGSOURCE_SOFTWARE)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	695b      	ldr	r3, [r3, #20]
 8002f3e:	4a0d      	ldr	r2, [pc, #52]	; (8002f74 <HAL_LPTIM_Init+0xf4>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d00a      	beq.n	8002f5a <HAL_LPTIM_Init+0xda>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8002f4c:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8002f52:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8002f54:	68fa      	ldr	r2, [r7, #12]
 8002f56:	4313      	orrs	r3, r2
 8002f58:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	68fa      	ldr	r2, [r7, #12]
 8002f60:	60da      	str	r2, [r3, #12]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	222e      	movs	r2, #46	; 0x2e
 8002f66:	2101      	movs	r1, #1
 8002f68:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8002f6a:	2300      	movs	r3, #0
}
 8002f6c:	0018      	movs	r0, r3
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	b004      	add	sp, #16
 8002f72:	bd80      	pop	{r7, pc}
 8002f74:	0000ffff 	.word	0x0000ffff
 8002f78:	ffff1f3f 	.word	0xffff1f3f
 8002f7c:	ff19f1f8 	.word	0xff19f1f8

08002f80 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b082      	sub	sp, #8
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	2201      	movs	r2, #1
 8002f90:	4013      	ands	r3, r2
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d10e      	bne.n	8002fb4 <HAL_LPTIM_IRQHandler+0x34>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	d107      	bne.n	8002fb4 <HAL_LPTIM_IRQHandler+0x34>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	2201      	movs	r2, #1
 8002faa:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	0018      	movs	r0, r3
 8002fb0:	f000 f888 	bl	80030c4 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	2202      	movs	r2, #2
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	2b02      	cmp	r3, #2
 8002fc0:	d10e      	bne.n	8002fe0 <HAL_LPTIM_IRQHandler+0x60>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	2202      	movs	r2, #2
 8002fca:	4013      	ands	r3, r2
 8002fcc:	2b02      	cmp	r3, #2
 8002fce:	d107      	bne.n	8002fe0 <HAL_LPTIM_IRQHandler+0x60>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	2202      	movs	r2, #2
 8002fd6:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	0018      	movs	r0, r3
 8002fdc:	f7fe ff9e 	bl	8001f1c <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	2204      	movs	r2, #4
 8002fe8:	4013      	ands	r3, r2
 8002fea:	2b04      	cmp	r3, #4
 8002fec:	d10e      	bne.n	800300c <HAL_LPTIM_IRQHandler+0x8c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	2204      	movs	r2, #4
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	2b04      	cmp	r3, #4
 8002ffa:	d107      	bne.n	800300c <HAL_LPTIM_IRQHandler+0x8c>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	2204      	movs	r2, #4
 8003002:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	0018      	movs	r0, r3
 8003008:	f000 f864 	bl	80030d4 <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	2208      	movs	r2, #8
 8003014:	4013      	ands	r3, r2
 8003016:	2b08      	cmp	r3, #8
 8003018:	d10e      	bne.n	8003038 <HAL_LPTIM_IRQHandler+0xb8>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	2208      	movs	r2, #8
 8003022:	4013      	ands	r3, r2
 8003024:	2b08      	cmp	r3, #8
 8003026:	d107      	bne.n	8003038 <HAL_LPTIM_IRQHandler+0xb8>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	2208      	movs	r2, #8
 800302e:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	0018      	movs	r0, r3
 8003034:	f000 f856 	bl	80030e4 <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	2210      	movs	r2, #16
 8003040:	4013      	ands	r3, r2
 8003042:	2b10      	cmp	r3, #16
 8003044:	d10e      	bne.n	8003064 <HAL_LPTIM_IRQHandler+0xe4>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	2210      	movs	r2, #16
 800304e:	4013      	ands	r3, r2
 8003050:	2b10      	cmp	r3, #16
 8003052:	d107      	bne.n	8003064 <HAL_LPTIM_IRQHandler+0xe4>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	2210      	movs	r2, #16
 800305a:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	0018      	movs	r0, r3
 8003060:	f000 f848 	bl	80030f4 <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	2220      	movs	r2, #32
 800306c:	4013      	ands	r3, r2
 800306e:	2b20      	cmp	r3, #32
 8003070:	d10e      	bne.n	8003090 <HAL_LPTIM_IRQHandler+0x110>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	2220      	movs	r2, #32
 800307a:	4013      	ands	r3, r2
 800307c:	2b20      	cmp	r3, #32
 800307e:	d107      	bne.n	8003090 <HAL_LPTIM_IRQHandler+0x110>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	2220      	movs	r2, #32
 8003086:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	0018      	movs	r0, r3
 800308c:	f000 f83a 	bl	8003104 <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	2240      	movs	r2, #64	; 0x40
 8003098:	4013      	ands	r3, r2
 800309a:	2b40      	cmp	r3, #64	; 0x40
 800309c:	d10e      	bne.n	80030bc <HAL_LPTIM_IRQHandler+0x13c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	2240      	movs	r2, #64	; 0x40
 80030a6:	4013      	ands	r3, r2
 80030a8:	2b40      	cmp	r3, #64	; 0x40
 80030aa:	d107      	bne.n	80030bc <HAL_LPTIM_IRQHandler+0x13c>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	2240      	movs	r2, #64	; 0x40
 80030b2:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	0018      	movs	r0, r3
 80030b8:	f000 f82c 	bl	8003114 <HAL_LPTIM_DirectionDownCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 80030bc:	46c0      	nop			; (mov r8, r8)
 80030be:	46bd      	mov	sp, r7
 80030c0:	b002      	add	sp, #8
 80030c2:	bd80      	pop	{r7, pc}

080030c4 <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b082      	sub	sp, #8
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 80030cc:	46c0      	nop			; (mov r8, r8)
 80030ce:	46bd      	mov	sp, r7
 80030d0:	b002      	add	sp, #8
 80030d2:	bd80      	pop	{r7, pc}

080030d4 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b082      	sub	sp, #8
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 80030dc:	46c0      	nop			; (mov r8, r8)
 80030de:	46bd      	mov	sp, r7
 80030e0:	b002      	add	sp, #8
 80030e2:	bd80      	pop	{r7, pc}

080030e4 <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b082      	sub	sp, #8
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 80030ec:	46c0      	nop			; (mov r8, r8)
 80030ee:	46bd      	mov	sp, r7
 80030f0:	b002      	add	sp, #8
 80030f2:	bd80      	pop	{r7, pc}

080030f4 <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b082      	sub	sp, #8
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 80030fc:	46c0      	nop			; (mov r8, r8)
 80030fe:	46bd      	mov	sp, r7
 8003100:	b002      	add	sp, #8
 8003102:	bd80      	pop	{r7, pc}

08003104 <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b082      	sub	sp, #8
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 800310c:	46c0      	nop			; (mov r8, r8)
 800310e:	46bd      	mov	sp, r7
 8003110:	b002      	add	sp, #8
 8003112:	bd80      	pop	{r7, pc}

08003114 <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b082      	sub	sp, #8
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 800311c:	46c0      	nop			; (mov r8, r8)
 800311e:	46bd      	mov	sp, r7
 8003120:	b002      	add	sp, #8
 8003122:	bd80      	pop	{r7, pc}

08003124 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 8003128:	4b04      	ldr	r3, [pc, #16]	; (800313c <HAL_PWR_EnableBkUpAccess+0x18>)
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	4b03      	ldr	r3, [pc, #12]	; (800313c <HAL_PWR_EnableBkUpAccess+0x18>)
 800312e:	2180      	movs	r1, #128	; 0x80
 8003130:	0049      	lsls	r1, r1, #1
 8003132:	430a      	orrs	r2, r1
 8003134:	601a      	str	r2, [r3, #0]
}
 8003136:	46c0      	nop			; (mov r8, r8)
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}
 800313c:	40007000 	.word	0x40007000

08003140 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003140:	b5b0      	push	{r4, r5, r7, lr}
 8003142:	b08a      	sub	sp, #40	; 0x28
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d102      	bne.n	8003154 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	f000 fbbc 	bl	80038cc <HAL_RCC_OscConfig+0x78c>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003154:	4bc8      	ldr	r3, [pc, #800]	; (8003478 <HAL_RCC_OscConfig+0x338>)
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	220c      	movs	r2, #12
 800315a:	4013      	ands	r3, r2
 800315c:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800315e:	4bc6      	ldr	r3, [pc, #792]	; (8003478 <HAL_RCC_OscConfig+0x338>)
 8003160:	68da      	ldr	r2, [r3, #12]
 8003162:	2380      	movs	r3, #128	; 0x80
 8003164:	025b      	lsls	r3, r3, #9
 8003166:	4013      	ands	r3, r2
 8003168:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	2201      	movs	r2, #1
 8003170:	4013      	ands	r3, r2
 8003172:	d100      	bne.n	8003176 <HAL_RCC_OscConfig+0x36>
 8003174:	e07e      	b.n	8003274 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003176:	69fb      	ldr	r3, [r7, #28]
 8003178:	2b08      	cmp	r3, #8
 800317a:	d007      	beq.n	800318c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800317c:	69fb      	ldr	r3, [r7, #28]
 800317e:	2b0c      	cmp	r3, #12
 8003180:	d112      	bne.n	80031a8 <HAL_RCC_OscConfig+0x68>
 8003182:	69ba      	ldr	r2, [r7, #24]
 8003184:	2380      	movs	r3, #128	; 0x80
 8003186:	025b      	lsls	r3, r3, #9
 8003188:	429a      	cmp	r2, r3
 800318a:	d10d      	bne.n	80031a8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800318c:	4bba      	ldr	r3, [pc, #744]	; (8003478 <HAL_RCC_OscConfig+0x338>)
 800318e:	681a      	ldr	r2, [r3, #0]
 8003190:	2380      	movs	r3, #128	; 0x80
 8003192:	029b      	lsls	r3, r3, #10
 8003194:	4013      	ands	r3, r2
 8003196:	d100      	bne.n	800319a <HAL_RCC_OscConfig+0x5a>
 8003198:	e06b      	b.n	8003272 <HAL_RCC_OscConfig+0x132>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d167      	bne.n	8003272 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	f000 fb92 	bl	80038cc <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	685a      	ldr	r2, [r3, #4]
 80031ac:	2380      	movs	r3, #128	; 0x80
 80031ae:	025b      	lsls	r3, r3, #9
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d107      	bne.n	80031c4 <HAL_RCC_OscConfig+0x84>
 80031b4:	4bb0      	ldr	r3, [pc, #704]	; (8003478 <HAL_RCC_OscConfig+0x338>)
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	4baf      	ldr	r3, [pc, #700]	; (8003478 <HAL_RCC_OscConfig+0x338>)
 80031ba:	2180      	movs	r1, #128	; 0x80
 80031bc:	0249      	lsls	r1, r1, #9
 80031be:	430a      	orrs	r2, r1
 80031c0:	601a      	str	r2, [r3, #0]
 80031c2:	e027      	b.n	8003214 <HAL_RCC_OscConfig+0xd4>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	685a      	ldr	r2, [r3, #4]
 80031c8:	23a0      	movs	r3, #160	; 0xa0
 80031ca:	02db      	lsls	r3, r3, #11
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d10e      	bne.n	80031ee <HAL_RCC_OscConfig+0xae>
 80031d0:	4ba9      	ldr	r3, [pc, #676]	; (8003478 <HAL_RCC_OscConfig+0x338>)
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	4ba8      	ldr	r3, [pc, #672]	; (8003478 <HAL_RCC_OscConfig+0x338>)
 80031d6:	2180      	movs	r1, #128	; 0x80
 80031d8:	02c9      	lsls	r1, r1, #11
 80031da:	430a      	orrs	r2, r1
 80031dc:	601a      	str	r2, [r3, #0]
 80031de:	4ba6      	ldr	r3, [pc, #664]	; (8003478 <HAL_RCC_OscConfig+0x338>)
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	4ba5      	ldr	r3, [pc, #660]	; (8003478 <HAL_RCC_OscConfig+0x338>)
 80031e4:	2180      	movs	r1, #128	; 0x80
 80031e6:	0249      	lsls	r1, r1, #9
 80031e8:	430a      	orrs	r2, r1
 80031ea:	601a      	str	r2, [r3, #0]
 80031ec:	e012      	b.n	8003214 <HAL_RCC_OscConfig+0xd4>
 80031ee:	4ba2      	ldr	r3, [pc, #648]	; (8003478 <HAL_RCC_OscConfig+0x338>)
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	4ba1      	ldr	r3, [pc, #644]	; (8003478 <HAL_RCC_OscConfig+0x338>)
 80031f4:	49a1      	ldr	r1, [pc, #644]	; (800347c <HAL_RCC_OscConfig+0x33c>)
 80031f6:	400a      	ands	r2, r1
 80031f8:	601a      	str	r2, [r3, #0]
 80031fa:	4b9f      	ldr	r3, [pc, #636]	; (8003478 <HAL_RCC_OscConfig+0x338>)
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	2380      	movs	r3, #128	; 0x80
 8003200:	025b      	lsls	r3, r3, #9
 8003202:	4013      	ands	r3, r2
 8003204:	60fb      	str	r3, [r7, #12]
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	4b9b      	ldr	r3, [pc, #620]	; (8003478 <HAL_RCC_OscConfig+0x338>)
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	4b9a      	ldr	r3, [pc, #616]	; (8003478 <HAL_RCC_OscConfig+0x338>)
 800320e:	499c      	ldr	r1, [pc, #624]	; (8003480 <HAL_RCC_OscConfig+0x340>)
 8003210:	400a      	ands	r2, r1
 8003212:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d015      	beq.n	8003248 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800321c:	f7fe ff14 	bl	8002048 <HAL_GetTick>
 8003220:	0003      	movs	r3, r0
 8003222:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003224:	e009      	b.n	800323a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003226:	f7fe ff0f 	bl	8002048 <HAL_GetTick>
 800322a:	0002      	movs	r2, r0
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	1ad3      	subs	r3, r2, r3
 8003230:	2b64      	cmp	r3, #100	; 0x64
 8003232:	d902      	bls.n	800323a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003234:	2303      	movs	r3, #3
 8003236:	f000 fb49 	bl	80038cc <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800323a:	4b8f      	ldr	r3, [pc, #572]	; (8003478 <HAL_RCC_OscConfig+0x338>)
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	2380      	movs	r3, #128	; 0x80
 8003240:	029b      	lsls	r3, r3, #10
 8003242:	4013      	ands	r3, r2
 8003244:	d0ef      	beq.n	8003226 <HAL_RCC_OscConfig+0xe6>
 8003246:	e015      	b.n	8003274 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003248:	f7fe fefe 	bl	8002048 <HAL_GetTick>
 800324c:	0003      	movs	r3, r0
 800324e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003250:	e008      	b.n	8003264 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003252:	f7fe fef9 	bl	8002048 <HAL_GetTick>
 8003256:	0002      	movs	r2, r0
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	1ad3      	subs	r3, r2, r3
 800325c:	2b64      	cmp	r3, #100	; 0x64
 800325e:	d901      	bls.n	8003264 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8003260:	2303      	movs	r3, #3
 8003262:	e333      	b.n	80038cc <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003264:	4b84      	ldr	r3, [pc, #528]	; (8003478 <HAL_RCC_OscConfig+0x338>)
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	2380      	movs	r3, #128	; 0x80
 800326a:	029b      	lsls	r3, r3, #10
 800326c:	4013      	ands	r3, r2
 800326e:	d1f0      	bne.n	8003252 <HAL_RCC_OscConfig+0x112>
 8003270:	e000      	b.n	8003274 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003272:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	2202      	movs	r2, #2
 800327a:	4013      	ands	r3, r2
 800327c:	d100      	bne.n	8003280 <HAL_RCC_OscConfig+0x140>
 800327e:	e098      	b.n	80033b2 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	68db      	ldr	r3, [r3, #12]
 8003284:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8003286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003288:	2220      	movs	r2, #32
 800328a:	4013      	ands	r3, r2
 800328c:	d009      	beq.n	80032a2 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 800328e:	4b7a      	ldr	r3, [pc, #488]	; (8003478 <HAL_RCC_OscConfig+0x338>)
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	4b79      	ldr	r3, [pc, #484]	; (8003478 <HAL_RCC_OscConfig+0x338>)
 8003294:	2120      	movs	r1, #32
 8003296:	430a      	orrs	r2, r1
 8003298:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 800329a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800329c:	2220      	movs	r2, #32
 800329e:	4393      	bics	r3, r2
 80032a0:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80032a2:	69fb      	ldr	r3, [r7, #28]
 80032a4:	2b04      	cmp	r3, #4
 80032a6:	d005      	beq.n	80032b4 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80032a8:	69fb      	ldr	r3, [r7, #28]
 80032aa:	2b0c      	cmp	r3, #12
 80032ac:	d13d      	bne.n	800332a <HAL_RCC_OscConfig+0x1ea>
 80032ae:	69bb      	ldr	r3, [r7, #24]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d13a      	bne.n	800332a <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80032b4:	4b70      	ldr	r3, [pc, #448]	; (8003478 <HAL_RCC_OscConfig+0x338>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	2204      	movs	r2, #4
 80032ba:	4013      	ands	r3, r2
 80032bc:	d004      	beq.n	80032c8 <HAL_RCC_OscConfig+0x188>
 80032be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d101      	bne.n	80032c8 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	e301      	b.n	80038cc <HAL_RCC_OscConfig+0x78c>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032c8:	4b6b      	ldr	r3, [pc, #428]	; (8003478 <HAL_RCC_OscConfig+0x338>)
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	4a6d      	ldr	r2, [pc, #436]	; (8003484 <HAL_RCC_OscConfig+0x344>)
 80032ce:	4013      	ands	r3, r2
 80032d0:	0019      	movs	r1, r3
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	691b      	ldr	r3, [r3, #16]
 80032d6:	021a      	lsls	r2, r3, #8
 80032d8:	4b67      	ldr	r3, [pc, #412]	; (8003478 <HAL_RCC_OscConfig+0x338>)
 80032da:	430a      	orrs	r2, r1
 80032dc:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80032de:	4b66      	ldr	r3, [pc, #408]	; (8003478 <HAL_RCC_OscConfig+0x338>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	2209      	movs	r2, #9
 80032e4:	4393      	bics	r3, r2
 80032e6:	0019      	movs	r1, r3
 80032e8:	4b63      	ldr	r3, [pc, #396]	; (8003478 <HAL_RCC_OscConfig+0x338>)
 80032ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032ec:	430a      	orrs	r2, r1
 80032ee:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80032f0:	f000 fc20 	bl	8003b34 <HAL_RCC_GetSysClockFreq>
 80032f4:	0001      	movs	r1, r0
 80032f6:	4b60      	ldr	r3, [pc, #384]	; (8003478 <HAL_RCC_OscConfig+0x338>)
 80032f8:	68db      	ldr	r3, [r3, #12]
 80032fa:	091b      	lsrs	r3, r3, #4
 80032fc:	220f      	movs	r2, #15
 80032fe:	4013      	ands	r3, r2
 8003300:	4a61      	ldr	r2, [pc, #388]	; (8003488 <HAL_RCC_OscConfig+0x348>)
 8003302:	5cd3      	ldrb	r3, [r2, r3]
 8003304:	000a      	movs	r2, r1
 8003306:	40da      	lsrs	r2, r3
 8003308:	4b60      	ldr	r3, [pc, #384]	; (800348c <HAL_RCC_OscConfig+0x34c>)
 800330a:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (TICK_INT_PRIORITY);
 800330c:	2513      	movs	r5, #19
 800330e:	197c      	adds	r4, r7, r5
 8003310:	2000      	movs	r0, #0
 8003312:	f7fe fe63 	bl	8001fdc <HAL_InitTick>
 8003316:	0003      	movs	r3, r0
 8003318:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800331a:	197b      	adds	r3, r7, r5
 800331c:	781b      	ldrb	r3, [r3, #0]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d047      	beq.n	80033b2 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8003322:	2313      	movs	r3, #19
 8003324:	18fb      	adds	r3, r7, r3
 8003326:	781b      	ldrb	r3, [r3, #0]
 8003328:	e2d0      	b.n	80038cc <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800332a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800332c:	2b00      	cmp	r3, #0
 800332e:	d027      	beq.n	8003380 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003330:	4b51      	ldr	r3, [pc, #324]	; (8003478 <HAL_RCC_OscConfig+0x338>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	2209      	movs	r2, #9
 8003336:	4393      	bics	r3, r2
 8003338:	0019      	movs	r1, r3
 800333a:	4b4f      	ldr	r3, [pc, #316]	; (8003478 <HAL_RCC_OscConfig+0x338>)
 800333c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800333e:	430a      	orrs	r2, r1
 8003340:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003342:	f7fe fe81 	bl	8002048 <HAL_GetTick>
 8003346:	0003      	movs	r3, r0
 8003348:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800334a:	e008      	b.n	800335e <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800334c:	f7fe fe7c 	bl	8002048 <HAL_GetTick>
 8003350:	0002      	movs	r2, r0
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	2b02      	cmp	r3, #2
 8003358:	d901      	bls.n	800335e <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 800335a:	2303      	movs	r3, #3
 800335c:	e2b6      	b.n	80038cc <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800335e:	4b46      	ldr	r3, [pc, #280]	; (8003478 <HAL_RCC_OscConfig+0x338>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	2204      	movs	r2, #4
 8003364:	4013      	ands	r3, r2
 8003366:	d0f1      	beq.n	800334c <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003368:	4b43      	ldr	r3, [pc, #268]	; (8003478 <HAL_RCC_OscConfig+0x338>)
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	4a45      	ldr	r2, [pc, #276]	; (8003484 <HAL_RCC_OscConfig+0x344>)
 800336e:	4013      	ands	r3, r2
 8003370:	0019      	movs	r1, r3
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	691b      	ldr	r3, [r3, #16]
 8003376:	021a      	lsls	r2, r3, #8
 8003378:	4b3f      	ldr	r3, [pc, #252]	; (8003478 <HAL_RCC_OscConfig+0x338>)
 800337a:	430a      	orrs	r2, r1
 800337c:	605a      	str	r2, [r3, #4]
 800337e:	e018      	b.n	80033b2 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003380:	4b3d      	ldr	r3, [pc, #244]	; (8003478 <HAL_RCC_OscConfig+0x338>)
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	4b3c      	ldr	r3, [pc, #240]	; (8003478 <HAL_RCC_OscConfig+0x338>)
 8003386:	2101      	movs	r1, #1
 8003388:	438a      	bics	r2, r1
 800338a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800338c:	f7fe fe5c 	bl	8002048 <HAL_GetTick>
 8003390:	0003      	movs	r3, r0
 8003392:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003394:	e008      	b.n	80033a8 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003396:	f7fe fe57 	bl	8002048 <HAL_GetTick>
 800339a:	0002      	movs	r2, r0
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	1ad3      	subs	r3, r2, r3
 80033a0:	2b02      	cmp	r3, #2
 80033a2:	d901      	bls.n	80033a8 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 80033a4:	2303      	movs	r3, #3
 80033a6:	e291      	b.n	80038cc <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80033a8:	4b33      	ldr	r3, [pc, #204]	; (8003478 <HAL_RCC_OscConfig+0x338>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	2204      	movs	r2, #4
 80033ae:	4013      	ands	r3, r2
 80033b0:	d1f1      	bne.n	8003396 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	2210      	movs	r2, #16
 80033b8:	4013      	ands	r3, r2
 80033ba:	d100      	bne.n	80033be <HAL_RCC_OscConfig+0x27e>
 80033bc:	e09f      	b.n	80034fe <HAL_RCC_OscConfig+0x3be>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 80033be:	69fb      	ldr	r3, [r7, #28]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d13f      	bne.n	8003444 <HAL_RCC_OscConfig+0x304>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80033c4:	4b2c      	ldr	r3, [pc, #176]	; (8003478 <HAL_RCC_OscConfig+0x338>)
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	2380      	movs	r3, #128	; 0x80
 80033ca:	009b      	lsls	r3, r3, #2
 80033cc:	4013      	ands	r3, r2
 80033ce:	d005      	beq.n	80033dc <HAL_RCC_OscConfig+0x29c>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	69db      	ldr	r3, [r3, #28]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d101      	bne.n	80033dc <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	e277      	b.n	80038cc <HAL_RCC_OscConfig+0x78c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80033dc:	4b26      	ldr	r3, [pc, #152]	; (8003478 <HAL_RCC_OscConfig+0x338>)
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	4a2b      	ldr	r2, [pc, #172]	; (8003490 <HAL_RCC_OscConfig+0x350>)
 80033e2:	4013      	ands	r3, r2
 80033e4:	0019      	movs	r1, r3
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80033ea:	4b23      	ldr	r3, [pc, #140]	; (8003478 <HAL_RCC_OscConfig+0x338>)
 80033ec:	430a      	orrs	r2, r1
 80033ee:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80033f0:	4b21      	ldr	r3, [pc, #132]	; (8003478 <HAL_RCC_OscConfig+0x338>)
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	021b      	lsls	r3, r3, #8
 80033f6:	0a19      	lsrs	r1, r3, #8
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6a1b      	ldr	r3, [r3, #32]
 80033fc:	061a      	lsls	r2, r3, #24
 80033fe:	4b1e      	ldr	r3, [pc, #120]	; (8003478 <HAL_RCC_OscConfig+0x338>)
 8003400:	430a      	orrs	r2, r1
 8003402:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003408:	0b5b      	lsrs	r3, r3, #13
 800340a:	3301      	adds	r3, #1
 800340c:	2280      	movs	r2, #128	; 0x80
 800340e:	0212      	lsls	r2, r2, #8
 8003410:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003412:	4b19      	ldr	r3, [pc, #100]	; (8003478 <HAL_RCC_OscConfig+0x338>)
 8003414:	68db      	ldr	r3, [r3, #12]
 8003416:	091b      	lsrs	r3, r3, #4
 8003418:	210f      	movs	r1, #15
 800341a:	400b      	ands	r3, r1
 800341c:	491a      	ldr	r1, [pc, #104]	; (8003488 <HAL_RCC_OscConfig+0x348>)
 800341e:	5ccb      	ldrb	r3, [r1, r3]
 8003420:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003422:	4b1a      	ldr	r3, [pc, #104]	; (800348c <HAL_RCC_OscConfig+0x34c>)
 8003424:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8003426:	2513      	movs	r5, #19
 8003428:	197c      	adds	r4, r7, r5
 800342a:	2000      	movs	r0, #0
 800342c:	f7fe fdd6 	bl	8001fdc <HAL_InitTick>
 8003430:	0003      	movs	r3, r0
 8003432:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8003434:	197b      	adds	r3, r7, r5
 8003436:	781b      	ldrb	r3, [r3, #0]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d060      	beq.n	80034fe <HAL_RCC_OscConfig+0x3be>
        {
          return status;
 800343c:	2313      	movs	r3, #19
 800343e:	18fb      	adds	r3, r7, r3
 8003440:	781b      	ldrb	r3, [r3, #0]
 8003442:	e243      	b.n	80038cc <HAL_RCC_OscConfig+0x78c>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	69db      	ldr	r3, [r3, #28]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d03e      	beq.n	80034ca <HAL_RCC_OscConfig+0x38a>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800344c:	4b0a      	ldr	r3, [pc, #40]	; (8003478 <HAL_RCC_OscConfig+0x338>)
 800344e:	681a      	ldr	r2, [r3, #0]
 8003450:	4b09      	ldr	r3, [pc, #36]	; (8003478 <HAL_RCC_OscConfig+0x338>)
 8003452:	2180      	movs	r1, #128	; 0x80
 8003454:	0049      	lsls	r1, r1, #1
 8003456:	430a      	orrs	r2, r1
 8003458:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800345a:	f7fe fdf5 	bl	8002048 <HAL_GetTick>
 800345e:	0003      	movs	r3, r0
 8003460:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003462:	e017      	b.n	8003494 <HAL_RCC_OscConfig+0x354>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003464:	f7fe fdf0 	bl	8002048 <HAL_GetTick>
 8003468:	0002      	movs	r2, r0
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	2b02      	cmp	r3, #2
 8003470:	d910      	bls.n	8003494 <HAL_RCC_OscConfig+0x354>
          {
            return HAL_TIMEOUT;
 8003472:	2303      	movs	r3, #3
 8003474:	e22a      	b.n	80038cc <HAL_RCC_OscConfig+0x78c>
 8003476:	46c0      	nop			; (mov r8, r8)
 8003478:	40021000 	.word	0x40021000
 800347c:	fffeffff 	.word	0xfffeffff
 8003480:	fffbffff 	.word	0xfffbffff
 8003484:	ffffe0ff 	.word	0xffffe0ff
 8003488:	080069d4 	.word	0x080069d4
 800348c:	20000000 	.word	0x20000000
 8003490:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003494:	4bc6      	ldr	r3, [pc, #792]	; (80037b0 <HAL_RCC_OscConfig+0x670>)
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	2380      	movs	r3, #128	; 0x80
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	4013      	ands	r3, r2
 800349e:	d0e1      	beq.n	8003464 <HAL_RCC_OscConfig+0x324>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80034a0:	4bc3      	ldr	r3, [pc, #780]	; (80037b0 <HAL_RCC_OscConfig+0x670>)
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	4ac3      	ldr	r2, [pc, #780]	; (80037b4 <HAL_RCC_OscConfig+0x674>)
 80034a6:	4013      	ands	r3, r2
 80034a8:	0019      	movs	r1, r3
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80034ae:	4bc0      	ldr	r3, [pc, #768]	; (80037b0 <HAL_RCC_OscConfig+0x670>)
 80034b0:	430a      	orrs	r2, r1
 80034b2:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80034b4:	4bbe      	ldr	r3, [pc, #760]	; (80037b0 <HAL_RCC_OscConfig+0x670>)
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	021b      	lsls	r3, r3, #8
 80034ba:	0a19      	lsrs	r1, r3, #8
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6a1b      	ldr	r3, [r3, #32]
 80034c0:	061a      	lsls	r2, r3, #24
 80034c2:	4bbb      	ldr	r3, [pc, #748]	; (80037b0 <HAL_RCC_OscConfig+0x670>)
 80034c4:	430a      	orrs	r2, r1
 80034c6:	605a      	str	r2, [r3, #4]
 80034c8:	e019      	b.n	80034fe <HAL_RCC_OscConfig+0x3be>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80034ca:	4bb9      	ldr	r3, [pc, #740]	; (80037b0 <HAL_RCC_OscConfig+0x670>)
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	4bb8      	ldr	r3, [pc, #736]	; (80037b0 <HAL_RCC_OscConfig+0x670>)
 80034d0:	49b9      	ldr	r1, [pc, #740]	; (80037b8 <HAL_RCC_OscConfig+0x678>)
 80034d2:	400a      	ands	r2, r1
 80034d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034d6:	f7fe fdb7 	bl	8002048 <HAL_GetTick>
 80034da:	0003      	movs	r3, r0
 80034dc:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80034de:	e008      	b.n	80034f2 <HAL_RCC_OscConfig+0x3b2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80034e0:	f7fe fdb2 	bl	8002048 <HAL_GetTick>
 80034e4:	0002      	movs	r2, r0
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	1ad3      	subs	r3, r2, r3
 80034ea:	2b02      	cmp	r3, #2
 80034ec:	d901      	bls.n	80034f2 <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 80034ee:	2303      	movs	r3, #3
 80034f0:	e1ec      	b.n	80038cc <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80034f2:	4baf      	ldr	r3, [pc, #700]	; (80037b0 <HAL_RCC_OscConfig+0x670>)
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	2380      	movs	r3, #128	; 0x80
 80034f8:	009b      	lsls	r3, r3, #2
 80034fa:	4013      	ands	r3, r2
 80034fc:	d1f0      	bne.n	80034e0 <HAL_RCC_OscConfig+0x3a0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	2208      	movs	r2, #8
 8003504:	4013      	ands	r3, r2
 8003506:	d036      	beq.n	8003576 <HAL_RCC_OscConfig+0x436>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	695b      	ldr	r3, [r3, #20]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d019      	beq.n	8003544 <HAL_RCC_OscConfig+0x404>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003510:	4ba7      	ldr	r3, [pc, #668]	; (80037b0 <HAL_RCC_OscConfig+0x670>)
 8003512:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003514:	4ba6      	ldr	r3, [pc, #664]	; (80037b0 <HAL_RCC_OscConfig+0x670>)
 8003516:	2101      	movs	r1, #1
 8003518:	430a      	orrs	r2, r1
 800351a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800351c:	f7fe fd94 	bl	8002048 <HAL_GetTick>
 8003520:	0003      	movs	r3, r0
 8003522:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003524:	e008      	b.n	8003538 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003526:	f7fe fd8f 	bl	8002048 <HAL_GetTick>
 800352a:	0002      	movs	r2, r0
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	1ad3      	subs	r3, r2, r3
 8003530:	2b02      	cmp	r3, #2
 8003532:	d901      	bls.n	8003538 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8003534:	2303      	movs	r3, #3
 8003536:	e1c9      	b.n	80038cc <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003538:	4b9d      	ldr	r3, [pc, #628]	; (80037b0 <HAL_RCC_OscConfig+0x670>)
 800353a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800353c:	2202      	movs	r2, #2
 800353e:	4013      	ands	r3, r2
 8003540:	d0f1      	beq.n	8003526 <HAL_RCC_OscConfig+0x3e6>
 8003542:	e018      	b.n	8003576 <HAL_RCC_OscConfig+0x436>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003544:	4b9a      	ldr	r3, [pc, #616]	; (80037b0 <HAL_RCC_OscConfig+0x670>)
 8003546:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003548:	4b99      	ldr	r3, [pc, #612]	; (80037b0 <HAL_RCC_OscConfig+0x670>)
 800354a:	2101      	movs	r1, #1
 800354c:	438a      	bics	r2, r1
 800354e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003550:	f7fe fd7a 	bl	8002048 <HAL_GetTick>
 8003554:	0003      	movs	r3, r0
 8003556:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003558:	e008      	b.n	800356c <HAL_RCC_OscConfig+0x42c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800355a:	f7fe fd75 	bl	8002048 <HAL_GetTick>
 800355e:	0002      	movs	r2, r0
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	1ad3      	subs	r3, r2, r3
 8003564:	2b02      	cmp	r3, #2
 8003566:	d901      	bls.n	800356c <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8003568:	2303      	movs	r3, #3
 800356a:	e1af      	b.n	80038cc <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800356c:	4b90      	ldr	r3, [pc, #576]	; (80037b0 <HAL_RCC_OscConfig+0x670>)
 800356e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003570:	2202      	movs	r2, #2
 8003572:	4013      	ands	r3, r2
 8003574:	d1f1      	bne.n	800355a <HAL_RCC_OscConfig+0x41a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	2204      	movs	r2, #4
 800357c:	4013      	ands	r3, r2
 800357e:	d100      	bne.n	8003582 <HAL_RCC_OscConfig+0x442>
 8003580:	e0af      	b.n	80036e2 <HAL_RCC_OscConfig+0x5a2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003582:	2323      	movs	r3, #35	; 0x23
 8003584:	18fb      	adds	r3, r7, r3
 8003586:	2200      	movs	r2, #0
 8003588:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800358a:	4b89      	ldr	r3, [pc, #548]	; (80037b0 <HAL_RCC_OscConfig+0x670>)
 800358c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800358e:	2380      	movs	r3, #128	; 0x80
 8003590:	055b      	lsls	r3, r3, #21
 8003592:	4013      	ands	r3, r2
 8003594:	d10a      	bne.n	80035ac <HAL_RCC_OscConfig+0x46c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003596:	4b86      	ldr	r3, [pc, #536]	; (80037b0 <HAL_RCC_OscConfig+0x670>)
 8003598:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800359a:	4b85      	ldr	r3, [pc, #532]	; (80037b0 <HAL_RCC_OscConfig+0x670>)
 800359c:	2180      	movs	r1, #128	; 0x80
 800359e:	0549      	lsls	r1, r1, #21
 80035a0:	430a      	orrs	r2, r1
 80035a2:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80035a4:	2323      	movs	r3, #35	; 0x23
 80035a6:	18fb      	adds	r3, r7, r3
 80035a8:	2201      	movs	r2, #1
 80035aa:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035ac:	4b83      	ldr	r3, [pc, #524]	; (80037bc <HAL_RCC_OscConfig+0x67c>)
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	2380      	movs	r3, #128	; 0x80
 80035b2:	005b      	lsls	r3, r3, #1
 80035b4:	4013      	ands	r3, r2
 80035b6:	d11a      	bne.n	80035ee <HAL_RCC_OscConfig+0x4ae>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035b8:	4b80      	ldr	r3, [pc, #512]	; (80037bc <HAL_RCC_OscConfig+0x67c>)
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	4b7f      	ldr	r3, [pc, #508]	; (80037bc <HAL_RCC_OscConfig+0x67c>)
 80035be:	2180      	movs	r1, #128	; 0x80
 80035c0:	0049      	lsls	r1, r1, #1
 80035c2:	430a      	orrs	r2, r1
 80035c4:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035c6:	f7fe fd3f 	bl	8002048 <HAL_GetTick>
 80035ca:	0003      	movs	r3, r0
 80035cc:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035ce:	e008      	b.n	80035e2 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035d0:	f7fe fd3a 	bl	8002048 <HAL_GetTick>
 80035d4:	0002      	movs	r2, r0
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	2b64      	cmp	r3, #100	; 0x64
 80035dc:	d901      	bls.n	80035e2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80035de:	2303      	movs	r3, #3
 80035e0:	e174      	b.n	80038cc <HAL_RCC_OscConfig+0x78c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035e2:	4b76      	ldr	r3, [pc, #472]	; (80037bc <HAL_RCC_OscConfig+0x67c>)
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	2380      	movs	r3, #128	; 0x80
 80035e8:	005b      	lsls	r3, r3, #1
 80035ea:	4013      	ands	r3, r2
 80035ec:	d0f0      	beq.n	80035d0 <HAL_RCC_OscConfig+0x490>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	689a      	ldr	r2, [r3, #8]
 80035f2:	2380      	movs	r3, #128	; 0x80
 80035f4:	005b      	lsls	r3, r3, #1
 80035f6:	429a      	cmp	r2, r3
 80035f8:	d107      	bne.n	800360a <HAL_RCC_OscConfig+0x4ca>
 80035fa:	4b6d      	ldr	r3, [pc, #436]	; (80037b0 <HAL_RCC_OscConfig+0x670>)
 80035fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80035fe:	4b6c      	ldr	r3, [pc, #432]	; (80037b0 <HAL_RCC_OscConfig+0x670>)
 8003600:	2180      	movs	r1, #128	; 0x80
 8003602:	0049      	lsls	r1, r1, #1
 8003604:	430a      	orrs	r2, r1
 8003606:	651a      	str	r2, [r3, #80]	; 0x50
 8003608:	e031      	b.n	800366e <HAL_RCC_OscConfig+0x52e>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d10c      	bne.n	800362c <HAL_RCC_OscConfig+0x4ec>
 8003612:	4b67      	ldr	r3, [pc, #412]	; (80037b0 <HAL_RCC_OscConfig+0x670>)
 8003614:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003616:	4b66      	ldr	r3, [pc, #408]	; (80037b0 <HAL_RCC_OscConfig+0x670>)
 8003618:	4967      	ldr	r1, [pc, #412]	; (80037b8 <HAL_RCC_OscConfig+0x678>)
 800361a:	400a      	ands	r2, r1
 800361c:	651a      	str	r2, [r3, #80]	; 0x50
 800361e:	4b64      	ldr	r3, [pc, #400]	; (80037b0 <HAL_RCC_OscConfig+0x670>)
 8003620:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003622:	4b63      	ldr	r3, [pc, #396]	; (80037b0 <HAL_RCC_OscConfig+0x670>)
 8003624:	4966      	ldr	r1, [pc, #408]	; (80037c0 <HAL_RCC_OscConfig+0x680>)
 8003626:	400a      	ands	r2, r1
 8003628:	651a      	str	r2, [r3, #80]	; 0x50
 800362a:	e020      	b.n	800366e <HAL_RCC_OscConfig+0x52e>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	689a      	ldr	r2, [r3, #8]
 8003630:	23a0      	movs	r3, #160	; 0xa0
 8003632:	00db      	lsls	r3, r3, #3
 8003634:	429a      	cmp	r2, r3
 8003636:	d10e      	bne.n	8003656 <HAL_RCC_OscConfig+0x516>
 8003638:	4b5d      	ldr	r3, [pc, #372]	; (80037b0 <HAL_RCC_OscConfig+0x670>)
 800363a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800363c:	4b5c      	ldr	r3, [pc, #368]	; (80037b0 <HAL_RCC_OscConfig+0x670>)
 800363e:	2180      	movs	r1, #128	; 0x80
 8003640:	00c9      	lsls	r1, r1, #3
 8003642:	430a      	orrs	r2, r1
 8003644:	651a      	str	r2, [r3, #80]	; 0x50
 8003646:	4b5a      	ldr	r3, [pc, #360]	; (80037b0 <HAL_RCC_OscConfig+0x670>)
 8003648:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800364a:	4b59      	ldr	r3, [pc, #356]	; (80037b0 <HAL_RCC_OscConfig+0x670>)
 800364c:	2180      	movs	r1, #128	; 0x80
 800364e:	0049      	lsls	r1, r1, #1
 8003650:	430a      	orrs	r2, r1
 8003652:	651a      	str	r2, [r3, #80]	; 0x50
 8003654:	e00b      	b.n	800366e <HAL_RCC_OscConfig+0x52e>
 8003656:	4b56      	ldr	r3, [pc, #344]	; (80037b0 <HAL_RCC_OscConfig+0x670>)
 8003658:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800365a:	4b55      	ldr	r3, [pc, #340]	; (80037b0 <HAL_RCC_OscConfig+0x670>)
 800365c:	4956      	ldr	r1, [pc, #344]	; (80037b8 <HAL_RCC_OscConfig+0x678>)
 800365e:	400a      	ands	r2, r1
 8003660:	651a      	str	r2, [r3, #80]	; 0x50
 8003662:	4b53      	ldr	r3, [pc, #332]	; (80037b0 <HAL_RCC_OscConfig+0x670>)
 8003664:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003666:	4b52      	ldr	r3, [pc, #328]	; (80037b0 <HAL_RCC_OscConfig+0x670>)
 8003668:	4955      	ldr	r1, [pc, #340]	; (80037c0 <HAL_RCC_OscConfig+0x680>)
 800366a:	400a      	ands	r2, r1
 800366c:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d015      	beq.n	80036a2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003676:	f7fe fce7 	bl	8002048 <HAL_GetTick>
 800367a:	0003      	movs	r3, r0
 800367c:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800367e:	e009      	b.n	8003694 <HAL_RCC_OscConfig+0x554>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003680:	f7fe fce2 	bl	8002048 <HAL_GetTick>
 8003684:	0002      	movs	r2, r0
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	1ad3      	subs	r3, r2, r3
 800368a:	4a4e      	ldr	r2, [pc, #312]	; (80037c4 <HAL_RCC_OscConfig+0x684>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d901      	bls.n	8003694 <HAL_RCC_OscConfig+0x554>
        {
          return HAL_TIMEOUT;
 8003690:	2303      	movs	r3, #3
 8003692:	e11b      	b.n	80038cc <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003694:	4b46      	ldr	r3, [pc, #280]	; (80037b0 <HAL_RCC_OscConfig+0x670>)
 8003696:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003698:	2380      	movs	r3, #128	; 0x80
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	4013      	ands	r3, r2
 800369e:	d0ef      	beq.n	8003680 <HAL_RCC_OscConfig+0x540>
 80036a0:	e014      	b.n	80036cc <HAL_RCC_OscConfig+0x58c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036a2:	f7fe fcd1 	bl	8002048 <HAL_GetTick>
 80036a6:	0003      	movs	r3, r0
 80036a8:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80036aa:	e009      	b.n	80036c0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036ac:	f7fe fccc 	bl	8002048 <HAL_GetTick>
 80036b0:	0002      	movs	r2, r0
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	1ad3      	subs	r3, r2, r3
 80036b6:	4a43      	ldr	r2, [pc, #268]	; (80037c4 <HAL_RCC_OscConfig+0x684>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d901      	bls.n	80036c0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80036bc:	2303      	movs	r3, #3
 80036be:	e105      	b.n	80038cc <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80036c0:	4b3b      	ldr	r3, [pc, #236]	; (80037b0 <HAL_RCC_OscConfig+0x670>)
 80036c2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80036c4:	2380      	movs	r3, #128	; 0x80
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	4013      	ands	r3, r2
 80036ca:	d1ef      	bne.n	80036ac <HAL_RCC_OscConfig+0x56c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80036cc:	2323      	movs	r3, #35	; 0x23
 80036ce:	18fb      	adds	r3, r7, r3
 80036d0:	781b      	ldrb	r3, [r3, #0]
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d105      	bne.n	80036e2 <HAL_RCC_OscConfig+0x5a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036d6:	4b36      	ldr	r3, [pc, #216]	; (80037b0 <HAL_RCC_OscConfig+0x670>)
 80036d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036da:	4b35      	ldr	r3, [pc, #212]	; (80037b0 <HAL_RCC_OscConfig+0x670>)
 80036dc:	493a      	ldr	r1, [pc, #232]	; (80037c8 <HAL_RCC_OscConfig+0x688>)
 80036de:	400a      	ands	r2, r1
 80036e0:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	2220      	movs	r2, #32
 80036e8:	4013      	ands	r3, r2
 80036ea:	d049      	beq.n	8003780 <HAL_RCC_OscConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	699b      	ldr	r3, [r3, #24]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d026      	beq.n	8003742 <HAL_RCC_OscConfig+0x602>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80036f4:	4b2e      	ldr	r3, [pc, #184]	; (80037b0 <HAL_RCC_OscConfig+0x670>)
 80036f6:	689a      	ldr	r2, [r3, #8]
 80036f8:	4b2d      	ldr	r3, [pc, #180]	; (80037b0 <HAL_RCC_OscConfig+0x670>)
 80036fa:	2101      	movs	r1, #1
 80036fc:	430a      	orrs	r2, r1
 80036fe:	609a      	str	r2, [r3, #8]
 8003700:	4b2b      	ldr	r3, [pc, #172]	; (80037b0 <HAL_RCC_OscConfig+0x670>)
 8003702:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003704:	4b2a      	ldr	r3, [pc, #168]	; (80037b0 <HAL_RCC_OscConfig+0x670>)
 8003706:	2101      	movs	r1, #1
 8003708:	430a      	orrs	r2, r1
 800370a:	635a      	str	r2, [r3, #52]	; 0x34
 800370c:	4b2f      	ldr	r3, [pc, #188]	; (80037cc <HAL_RCC_OscConfig+0x68c>)
 800370e:	6a1a      	ldr	r2, [r3, #32]
 8003710:	4b2e      	ldr	r3, [pc, #184]	; (80037cc <HAL_RCC_OscConfig+0x68c>)
 8003712:	2180      	movs	r1, #128	; 0x80
 8003714:	0189      	lsls	r1, r1, #6
 8003716:	430a      	orrs	r2, r1
 8003718:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800371a:	f7fe fc95 	bl	8002048 <HAL_GetTick>
 800371e:	0003      	movs	r3, r0
 8003720:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003722:	e008      	b.n	8003736 <HAL_RCC_OscConfig+0x5f6>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003724:	f7fe fc90 	bl	8002048 <HAL_GetTick>
 8003728:	0002      	movs	r2, r0
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	2b02      	cmp	r3, #2
 8003730:	d901      	bls.n	8003736 <HAL_RCC_OscConfig+0x5f6>
          {
            return HAL_TIMEOUT;
 8003732:	2303      	movs	r3, #3
 8003734:	e0ca      	b.n	80038cc <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003736:	4b1e      	ldr	r3, [pc, #120]	; (80037b0 <HAL_RCC_OscConfig+0x670>)
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	2202      	movs	r2, #2
 800373c:	4013      	ands	r3, r2
 800373e:	d0f1      	beq.n	8003724 <HAL_RCC_OscConfig+0x5e4>
 8003740:	e01e      	b.n	8003780 <HAL_RCC_OscConfig+0x640>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8003742:	4b1b      	ldr	r3, [pc, #108]	; (80037b0 <HAL_RCC_OscConfig+0x670>)
 8003744:	689a      	ldr	r2, [r3, #8]
 8003746:	4b1a      	ldr	r3, [pc, #104]	; (80037b0 <HAL_RCC_OscConfig+0x670>)
 8003748:	2101      	movs	r1, #1
 800374a:	438a      	bics	r2, r1
 800374c:	609a      	str	r2, [r3, #8]
 800374e:	4b1f      	ldr	r3, [pc, #124]	; (80037cc <HAL_RCC_OscConfig+0x68c>)
 8003750:	6a1a      	ldr	r2, [r3, #32]
 8003752:	4b1e      	ldr	r3, [pc, #120]	; (80037cc <HAL_RCC_OscConfig+0x68c>)
 8003754:	491e      	ldr	r1, [pc, #120]	; (80037d0 <HAL_RCC_OscConfig+0x690>)
 8003756:	400a      	ands	r2, r1
 8003758:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800375a:	f7fe fc75 	bl	8002048 <HAL_GetTick>
 800375e:	0003      	movs	r3, r0
 8003760:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003762:	e008      	b.n	8003776 <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003764:	f7fe fc70 	bl	8002048 <HAL_GetTick>
 8003768:	0002      	movs	r2, r0
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	1ad3      	subs	r3, r2, r3
 800376e:	2b02      	cmp	r3, #2
 8003770:	d901      	bls.n	8003776 <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 8003772:	2303      	movs	r3, #3
 8003774:	e0aa      	b.n	80038cc <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003776:	4b0e      	ldr	r3, [pc, #56]	; (80037b0 <HAL_RCC_OscConfig+0x670>)
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	2202      	movs	r2, #2
 800377c:	4013      	ands	r3, r2
 800377e:	d1f1      	bne.n	8003764 <HAL_RCC_OscConfig+0x624>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003784:	2b00      	cmp	r3, #0
 8003786:	d100      	bne.n	800378a <HAL_RCC_OscConfig+0x64a>
 8003788:	e09f      	b.n	80038ca <HAL_RCC_OscConfig+0x78a>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800378a:	69fb      	ldr	r3, [r7, #28]
 800378c:	2b0c      	cmp	r3, #12
 800378e:	d100      	bne.n	8003792 <HAL_RCC_OscConfig+0x652>
 8003790:	e078      	b.n	8003884 <HAL_RCC_OscConfig+0x744>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003796:	2b02      	cmp	r3, #2
 8003798:	d159      	bne.n	800384e <HAL_RCC_OscConfig+0x70e>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800379a:	4b05      	ldr	r3, [pc, #20]	; (80037b0 <HAL_RCC_OscConfig+0x670>)
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	4b04      	ldr	r3, [pc, #16]	; (80037b0 <HAL_RCC_OscConfig+0x670>)
 80037a0:	490c      	ldr	r1, [pc, #48]	; (80037d4 <HAL_RCC_OscConfig+0x694>)
 80037a2:	400a      	ands	r2, r1
 80037a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037a6:	f7fe fc4f 	bl	8002048 <HAL_GetTick>
 80037aa:	0003      	movs	r3, r0
 80037ac:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80037ae:	e01c      	b.n	80037ea <HAL_RCC_OscConfig+0x6aa>
 80037b0:	40021000 	.word	0x40021000
 80037b4:	ffff1fff 	.word	0xffff1fff
 80037b8:	fffffeff 	.word	0xfffffeff
 80037bc:	40007000 	.word	0x40007000
 80037c0:	fffffbff 	.word	0xfffffbff
 80037c4:	00001388 	.word	0x00001388
 80037c8:	efffffff 	.word	0xefffffff
 80037cc:	40010000 	.word	0x40010000
 80037d0:	ffffdfff 	.word	0xffffdfff
 80037d4:	feffffff 	.word	0xfeffffff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037d8:	f7fe fc36 	bl	8002048 <HAL_GetTick>
 80037dc:	0002      	movs	r2, r0
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	1ad3      	subs	r3, r2, r3
 80037e2:	2b02      	cmp	r3, #2
 80037e4:	d901      	bls.n	80037ea <HAL_RCC_OscConfig+0x6aa>
          {
            return HAL_TIMEOUT;
 80037e6:	2303      	movs	r3, #3
 80037e8:	e070      	b.n	80038cc <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80037ea:	4b3a      	ldr	r3, [pc, #232]	; (80038d4 <HAL_RCC_OscConfig+0x794>)
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	2380      	movs	r3, #128	; 0x80
 80037f0:	049b      	lsls	r3, r3, #18
 80037f2:	4013      	ands	r3, r2
 80037f4:	d1f0      	bne.n	80037d8 <HAL_RCC_OscConfig+0x698>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037f6:	4b37      	ldr	r3, [pc, #220]	; (80038d4 <HAL_RCC_OscConfig+0x794>)
 80037f8:	68db      	ldr	r3, [r3, #12]
 80037fa:	4a37      	ldr	r2, [pc, #220]	; (80038d8 <HAL_RCC_OscConfig+0x798>)
 80037fc:	4013      	ands	r3, r2
 80037fe:	0019      	movs	r1, r3
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003808:	431a      	orrs	r2, r3
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800380e:	431a      	orrs	r2, r3
 8003810:	4b30      	ldr	r3, [pc, #192]	; (80038d4 <HAL_RCC_OscConfig+0x794>)
 8003812:	430a      	orrs	r2, r1
 8003814:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003816:	4b2f      	ldr	r3, [pc, #188]	; (80038d4 <HAL_RCC_OscConfig+0x794>)
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	4b2e      	ldr	r3, [pc, #184]	; (80038d4 <HAL_RCC_OscConfig+0x794>)
 800381c:	2180      	movs	r1, #128	; 0x80
 800381e:	0449      	lsls	r1, r1, #17
 8003820:	430a      	orrs	r2, r1
 8003822:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003824:	f7fe fc10 	bl	8002048 <HAL_GetTick>
 8003828:	0003      	movs	r3, r0
 800382a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800382c:	e008      	b.n	8003840 <HAL_RCC_OscConfig+0x700>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800382e:	f7fe fc0b 	bl	8002048 <HAL_GetTick>
 8003832:	0002      	movs	r2, r0
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	1ad3      	subs	r3, r2, r3
 8003838:	2b02      	cmp	r3, #2
 800383a:	d901      	bls.n	8003840 <HAL_RCC_OscConfig+0x700>
          {
            return HAL_TIMEOUT;
 800383c:	2303      	movs	r3, #3
 800383e:	e045      	b.n	80038cc <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003840:	4b24      	ldr	r3, [pc, #144]	; (80038d4 <HAL_RCC_OscConfig+0x794>)
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	2380      	movs	r3, #128	; 0x80
 8003846:	049b      	lsls	r3, r3, #18
 8003848:	4013      	ands	r3, r2
 800384a:	d0f0      	beq.n	800382e <HAL_RCC_OscConfig+0x6ee>
 800384c:	e03d      	b.n	80038ca <HAL_RCC_OscConfig+0x78a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800384e:	4b21      	ldr	r3, [pc, #132]	; (80038d4 <HAL_RCC_OscConfig+0x794>)
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	4b20      	ldr	r3, [pc, #128]	; (80038d4 <HAL_RCC_OscConfig+0x794>)
 8003854:	4921      	ldr	r1, [pc, #132]	; (80038dc <HAL_RCC_OscConfig+0x79c>)
 8003856:	400a      	ands	r2, r1
 8003858:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800385a:	f7fe fbf5 	bl	8002048 <HAL_GetTick>
 800385e:	0003      	movs	r3, r0
 8003860:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003862:	e008      	b.n	8003876 <HAL_RCC_OscConfig+0x736>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003864:	f7fe fbf0 	bl	8002048 <HAL_GetTick>
 8003868:	0002      	movs	r2, r0
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	1ad3      	subs	r3, r2, r3
 800386e:	2b02      	cmp	r3, #2
 8003870:	d901      	bls.n	8003876 <HAL_RCC_OscConfig+0x736>
          {
            return HAL_TIMEOUT;
 8003872:	2303      	movs	r3, #3
 8003874:	e02a      	b.n	80038cc <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003876:	4b17      	ldr	r3, [pc, #92]	; (80038d4 <HAL_RCC_OscConfig+0x794>)
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	2380      	movs	r3, #128	; 0x80
 800387c:	049b      	lsls	r3, r3, #18
 800387e:	4013      	ands	r3, r2
 8003880:	d1f0      	bne.n	8003864 <HAL_RCC_OscConfig+0x724>
 8003882:	e022      	b.n	80038ca <HAL_RCC_OscConfig+0x78a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003888:	2b01      	cmp	r3, #1
 800388a:	d101      	bne.n	8003890 <HAL_RCC_OscConfig+0x750>
      {
        return HAL_ERROR;
 800388c:	2301      	movs	r3, #1
 800388e:	e01d      	b.n	80038cc <HAL_RCC_OscConfig+0x78c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003890:	4b10      	ldr	r3, [pc, #64]	; (80038d4 <HAL_RCC_OscConfig+0x794>)
 8003892:	68db      	ldr	r3, [r3, #12]
 8003894:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003896:	69ba      	ldr	r2, [r7, #24]
 8003898:	2380      	movs	r3, #128	; 0x80
 800389a:	025b      	lsls	r3, r3, #9
 800389c:	401a      	ands	r2, r3
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a2:	429a      	cmp	r2, r3
 80038a4:	d10f      	bne.n	80038c6 <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80038a6:	69ba      	ldr	r2, [r7, #24]
 80038a8:	23f0      	movs	r3, #240	; 0xf0
 80038aa:	039b      	lsls	r3, r3, #14
 80038ac:	401a      	ands	r2, r3
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038b2:	429a      	cmp	r2, r3
 80038b4:	d107      	bne.n	80038c6 <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80038b6:	69ba      	ldr	r2, [r7, #24]
 80038b8:	23c0      	movs	r3, #192	; 0xc0
 80038ba:	041b      	lsls	r3, r3, #16
 80038bc:	401a      	ands	r2, r3
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80038c2:	429a      	cmp	r2, r3
 80038c4:	d001      	beq.n	80038ca <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e000      	b.n	80038cc <HAL_RCC_OscConfig+0x78c>
        }
      }
    }
  }

  return HAL_OK;
 80038ca:	2300      	movs	r3, #0
}
 80038cc:	0018      	movs	r0, r3
 80038ce:	46bd      	mov	sp, r7
 80038d0:	b00a      	add	sp, #40	; 0x28
 80038d2:	bdb0      	pop	{r4, r5, r7, pc}
 80038d4:	40021000 	.word	0x40021000
 80038d8:	ff02ffff 	.word	0xff02ffff
 80038dc:	feffffff 	.word	0xfeffffff

080038e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038e0:	b5b0      	push	{r4, r5, r7, lr}
 80038e2:	b084      	sub	sp, #16
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
 80038e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d101      	bne.n	80038f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	e10d      	b.n	8003b10 <HAL_RCC_ClockConfig+0x230>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80038f4:	4b88      	ldr	r3, [pc, #544]	; (8003b18 <HAL_RCC_ClockConfig+0x238>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	2201      	movs	r2, #1
 80038fa:	4013      	ands	r3, r2
 80038fc:	683a      	ldr	r2, [r7, #0]
 80038fe:	429a      	cmp	r2, r3
 8003900:	d911      	bls.n	8003926 <HAL_RCC_ClockConfig+0x46>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003902:	4b85      	ldr	r3, [pc, #532]	; (8003b18 <HAL_RCC_ClockConfig+0x238>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	2201      	movs	r2, #1
 8003908:	4393      	bics	r3, r2
 800390a:	0019      	movs	r1, r3
 800390c:	4b82      	ldr	r3, [pc, #520]	; (8003b18 <HAL_RCC_ClockConfig+0x238>)
 800390e:	683a      	ldr	r2, [r7, #0]
 8003910:	430a      	orrs	r2, r1
 8003912:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003914:	4b80      	ldr	r3, [pc, #512]	; (8003b18 <HAL_RCC_ClockConfig+0x238>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	2201      	movs	r2, #1
 800391a:	4013      	ands	r3, r2
 800391c:	683a      	ldr	r2, [r7, #0]
 800391e:	429a      	cmp	r2, r3
 8003920:	d001      	beq.n	8003926 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e0f4      	b.n	8003b10 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	2202      	movs	r2, #2
 800392c:	4013      	ands	r3, r2
 800392e:	d009      	beq.n	8003944 <HAL_RCC_ClockConfig+0x64>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003930:	4b7a      	ldr	r3, [pc, #488]	; (8003b1c <HAL_RCC_ClockConfig+0x23c>)
 8003932:	68db      	ldr	r3, [r3, #12]
 8003934:	22f0      	movs	r2, #240	; 0xf0
 8003936:	4393      	bics	r3, r2
 8003938:	0019      	movs	r1, r3
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	689a      	ldr	r2, [r3, #8]
 800393e:	4b77      	ldr	r3, [pc, #476]	; (8003b1c <HAL_RCC_ClockConfig+0x23c>)
 8003940:	430a      	orrs	r2, r1
 8003942:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	2201      	movs	r2, #1
 800394a:	4013      	ands	r3, r2
 800394c:	d100      	bne.n	8003950 <HAL_RCC_ClockConfig+0x70>
 800394e:	e089      	b.n	8003a64 <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	2b02      	cmp	r3, #2
 8003956:	d107      	bne.n	8003968 <HAL_RCC_ClockConfig+0x88>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003958:	4b70      	ldr	r3, [pc, #448]	; (8003b1c <HAL_RCC_ClockConfig+0x23c>)
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	2380      	movs	r3, #128	; 0x80
 800395e:	029b      	lsls	r3, r3, #10
 8003960:	4013      	ands	r3, r2
 8003962:	d120      	bne.n	80039a6 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	e0d3      	b.n	8003b10 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	2b03      	cmp	r3, #3
 800396e:	d107      	bne.n	8003980 <HAL_RCC_ClockConfig+0xa0>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003970:	4b6a      	ldr	r3, [pc, #424]	; (8003b1c <HAL_RCC_ClockConfig+0x23c>)
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	2380      	movs	r3, #128	; 0x80
 8003976:	049b      	lsls	r3, r3, #18
 8003978:	4013      	ands	r3, r2
 800397a:	d114      	bne.n	80039a6 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	e0c7      	b.n	8003b10 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	2b01      	cmp	r3, #1
 8003986:	d106      	bne.n	8003996 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003988:	4b64      	ldr	r3, [pc, #400]	; (8003b1c <HAL_RCC_ClockConfig+0x23c>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	2204      	movs	r2, #4
 800398e:	4013      	ands	r3, r2
 8003990:	d109      	bne.n	80039a6 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	e0bc      	b.n	8003b10 <HAL_RCC_ClockConfig+0x230>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003996:	4b61      	ldr	r3, [pc, #388]	; (8003b1c <HAL_RCC_ClockConfig+0x23c>)
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	2380      	movs	r3, #128	; 0x80
 800399c:	009b      	lsls	r3, r3, #2
 800399e:	4013      	ands	r3, r2
 80039a0:	d101      	bne.n	80039a6 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	e0b4      	b.n	8003b10 <HAL_RCC_ClockConfig+0x230>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039a6:	4b5d      	ldr	r3, [pc, #372]	; (8003b1c <HAL_RCC_ClockConfig+0x23c>)
 80039a8:	68db      	ldr	r3, [r3, #12]
 80039aa:	2203      	movs	r2, #3
 80039ac:	4393      	bics	r3, r2
 80039ae:	0019      	movs	r1, r3
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	685a      	ldr	r2, [r3, #4]
 80039b4:	4b59      	ldr	r3, [pc, #356]	; (8003b1c <HAL_RCC_ClockConfig+0x23c>)
 80039b6:	430a      	orrs	r2, r1
 80039b8:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039ba:	f7fe fb45 	bl	8002048 <HAL_GetTick>
 80039be:	0003      	movs	r3, r0
 80039c0:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	2b02      	cmp	r3, #2
 80039c8:	d111      	bne.n	80039ee <HAL_RCC_ClockConfig+0x10e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80039ca:	e009      	b.n	80039e0 <HAL_RCC_ClockConfig+0x100>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039cc:	f7fe fb3c 	bl	8002048 <HAL_GetTick>
 80039d0:	0002      	movs	r2, r0
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	1ad3      	subs	r3, r2, r3
 80039d6:	4a52      	ldr	r2, [pc, #328]	; (8003b20 <HAL_RCC_ClockConfig+0x240>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d901      	bls.n	80039e0 <HAL_RCC_ClockConfig+0x100>
        {
          return HAL_TIMEOUT;
 80039dc:	2303      	movs	r3, #3
 80039de:	e097      	b.n	8003b10 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80039e0:	4b4e      	ldr	r3, [pc, #312]	; (8003b1c <HAL_RCC_ClockConfig+0x23c>)
 80039e2:	68db      	ldr	r3, [r3, #12]
 80039e4:	220c      	movs	r2, #12
 80039e6:	4013      	ands	r3, r2
 80039e8:	2b08      	cmp	r3, #8
 80039ea:	d1ef      	bne.n	80039cc <HAL_RCC_ClockConfig+0xec>
 80039ec:	e03a      	b.n	8003a64 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	2b03      	cmp	r3, #3
 80039f4:	d111      	bne.n	8003a1a <HAL_RCC_ClockConfig+0x13a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80039f6:	e009      	b.n	8003a0c <HAL_RCC_ClockConfig+0x12c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039f8:	f7fe fb26 	bl	8002048 <HAL_GetTick>
 80039fc:	0002      	movs	r2, r0
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	1ad3      	subs	r3, r2, r3
 8003a02:	4a47      	ldr	r2, [pc, #284]	; (8003b20 <HAL_RCC_ClockConfig+0x240>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d901      	bls.n	8003a0c <HAL_RCC_ClockConfig+0x12c>
        {
          return HAL_TIMEOUT;
 8003a08:	2303      	movs	r3, #3
 8003a0a:	e081      	b.n	8003b10 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a0c:	4b43      	ldr	r3, [pc, #268]	; (8003b1c <HAL_RCC_ClockConfig+0x23c>)
 8003a0e:	68db      	ldr	r3, [r3, #12]
 8003a10:	220c      	movs	r2, #12
 8003a12:	4013      	ands	r3, r2
 8003a14:	2b0c      	cmp	r3, #12
 8003a16:	d1ef      	bne.n	80039f8 <HAL_RCC_ClockConfig+0x118>
 8003a18:	e024      	b.n	8003a64 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	d11b      	bne.n	8003a5a <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003a22:	e009      	b.n	8003a38 <HAL_RCC_ClockConfig+0x158>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a24:	f7fe fb10 	bl	8002048 <HAL_GetTick>
 8003a28:	0002      	movs	r2, r0
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	1ad3      	subs	r3, r2, r3
 8003a2e:	4a3c      	ldr	r2, [pc, #240]	; (8003b20 <HAL_RCC_ClockConfig+0x240>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d901      	bls.n	8003a38 <HAL_RCC_ClockConfig+0x158>
        {
          return HAL_TIMEOUT;
 8003a34:	2303      	movs	r3, #3
 8003a36:	e06b      	b.n	8003b10 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003a38:	4b38      	ldr	r3, [pc, #224]	; (8003b1c <HAL_RCC_ClockConfig+0x23c>)
 8003a3a:	68db      	ldr	r3, [r3, #12]
 8003a3c:	220c      	movs	r2, #12
 8003a3e:	4013      	ands	r3, r2
 8003a40:	2b04      	cmp	r3, #4
 8003a42:	d1ef      	bne.n	8003a24 <HAL_RCC_ClockConfig+0x144>
 8003a44:	e00e      	b.n	8003a64 <HAL_RCC_ClockConfig+0x184>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a46:	f7fe faff 	bl	8002048 <HAL_GetTick>
 8003a4a:	0002      	movs	r2, r0
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	1ad3      	subs	r3, r2, r3
 8003a50:	4a33      	ldr	r2, [pc, #204]	; (8003b20 <HAL_RCC_ClockConfig+0x240>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d901      	bls.n	8003a5a <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 8003a56:	2303      	movs	r3, #3
 8003a58:	e05a      	b.n	8003b10 <HAL_RCC_ClockConfig+0x230>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003a5a:	4b30      	ldr	r3, [pc, #192]	; (8003b1c <HAL_RCC_ClockConfig+0x23c>)
 8003a5c:	68db      	ldr	r3, [r3, #12]
 8003a5e:	220c      	movs	r2, #12
 8003a60:	4013      	ands	r3, r2
 8003a62:	d1f0      	bne.n	8003a46 <HAL_RCC_ClockConfig+0x166>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a64:	4b2c      	ldr	r3, [pc, #176]	; (8003b18 <HAL_RCC_ClockConfig+0x238>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	2201      	movs	r2, #1
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	683a      	ldr	r2, [r7, #0]
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	d211      	bcs.n	8003a96 <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a72:	4b29      	ldr	r3, [pc, #164]	; (8003b18 <HAL_RCC_ClockConfig+0x238>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	2201      	movs	r2, #1
 8003a78:	4393      	bics	r3, r2
 8003a7a:	0019      	movs	r1, r3
 8003a7c:	4b26      	ldr	r3, [pc, #152]	; (8003b18 <HAL_RCC_ClockConfig+0x238>)
 8003a7e:	683a      	ldr	r2, [r7, #0]
 8003a80:	430a      	orrs	r2, r1
 8003a82:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a84:	4b24      	ldr	r3, [pc, #144]	; (8003b18 <HAL_RCC_ClockConfig+0x238>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	2201      	movs	r2, #1
 8003a8a:	4013      	ands	r3, r2
 8003a8c:	683a      	ldr	r2, [r7, #0]
 8003a8e:	429a      	cmp	r2, r3
 8003a90:	d001      	beq.n	8003a96 <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e03c      	b.n	8003b10 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	2204      	movs	r2, #4
 8003a9c:	4013      	ands	r3, r2
 8003a9e:	d009      	beq.n	8003ab4 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003aa0:	4b1e      	ldr	r3, [pc, #120]	; (8003b1c <HAL_RCC_ClockConfig+0x23c>)
 8003aa2:	68db      	ldr	r3, [r3, #12]
 8003aa4:	4a1f      	ldr	r2, [pc, #124]	; (8003b24 <HAL_RCC_ClockConfig+0x244>)
 8003aa6:	4013      	ands	r3, r2
 8003aa8:	0019      	movs	r1, r3
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	68da      	ldr	r2, [r3, #12]
 8003aae:	4b1b      	ldr	r3, [pc, #108]	; (8003b1c <HAL_RCC_ClockConfig+0x23c>)
 8003ab0:	430a      	orrs	r2, r1
 8003ab2:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	2208      	movs	r2, #8
 8003aba:	4013      	ands	r3, r2
 8003abc:	d00a      	beq.n	8003ad4 <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003abe:	4b17      	ldr	r3, [pc, #92]	; (8003b1c <HAL_RCC_ClockConfig+0x23c>)
 8003ac0:	68db      	ldr	r3, [r3, #12]
 8003ac2:	4a19      	ldr	r2, [pc, #100]	; (8003b28 <HAL_RCC_ClockConfig+0x248>)
 8003ac4:	4013      	ands	r3, r2
 8003ac6:	0019      	movs	r1, r3
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	691b      	ldr	r3, [r3, #16]
 8003acc:	00da      	lsls	r2, r3, #3
 8003ace:	4b13      	ldr	r3, [pc, #76]	; (8003b1c <HAL_RCC_ClockConfig+0x23c>)
 8003ad0:	430a      	orrs	r2, r1
 8003ad2:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003ad4:	f000 f82e 	bl	8003b34 <HAL_RCC_GetSysClockFreq>
 8003ad8:	0001      	movs	r1, r0
 8003ada:	4b10      	ldr	r3, [pc, #64]	; (8003b1c <HAL_RCC_ClockConfig+0x23c>)
 8003adc:	68db      	ldr	r3, [r3, #12]
 8003ade:	091b      	lsrs	r3, r3, #4
 8003ae0:	220f      	movs	r2, #15
 8003ae2:	4013      	ands	r3, r2
 8003ae4:	4a11      	ldr	r2, [pc, #68]	; (8003b2c <HAL_RCC_ClockConfig+0x24c>)
 8003ae6:	5cd3      	ldrb	r3, [r2, r3]
 8003ae8:	000a      	movs	r2, r1
 8003aea:	40da      	lsrs	r2, r3
 8003aec:	4b10      	ldr	r3, [pc, #64]	; (8003b30 <HAL_RCC_ClockConfig+0x250>)
 8003aee:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 8003af0:	250b      	movs	r5, #11
 8003af2:	197c      	adds	r4, r7, r5
 8003af4:	2000      	movs	r0, #0
 8003af6:	f7fe fa71 	bl	8001fdc <HAL_InitTick>
 8003afa:	0003      	movs	r3, r0
 8003afc:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8003afe:	197b      	adds	r3, r7, r5
 8003b00:	781b      	ldrb	r3, [r3, #0]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d003      	beq.n	8003b0e <HAL_RCC_ClockConfig+0x22e>
  {
    return status;
 8003b06:	230b      	movs	r3, #11
 8003b08:	18fb      	adds	r3, r7, r3
 8003b0a:	781b      	ldrb	r3, [r3, #0]
 8003b0c:	e000      	b.n	8003b10 <HAL_RCC_ClockConfig+0x230>
  }

  return HAL_OK;
 8003b0e:	2300      	movs	r3, #0
}
 8003b10:	0018      	movs	r0, r3
 8003b12:	46bd      	mov	sp, r7
 8003b14:	b004      	add	sp, #16
 8003b16:	bdb0      	pop	{r4, r5, r7, pc}
 8003b18:	40022000 	.word	0x40022000
 8003b1c:	40021000 	.word	0x40021000
 8003b20:	00001388 	.word	0x00001388
 8003b24:	fffff8ff 	.word	0xfffff8ff
 8003b28:	ffffc7ff 	.word	0xffffc7ff
 8003b2c:	080069d4 	.word	0x080069d4
 8003b30:	20000000 	.word	0x20000000

08003b34 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b086      	sub	sp, #24
 8003b38:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8003b3a:	4b3b      	ldr	r3, [pc, #236]	; (8003c28 <HAL_RCC_GetSysClockFreq+0xf4>)
 8003b3c:	68db      	ldr	r3, [r3, #12]
 8003b3e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	220c      	movs	r2, #12
 8003b44:	4013      	ands	r3, r2
 8003b46:	2b08      	cmp	r3, #8
 8003b48:	d00e      	beq.n	8003b68 <HAL_RCC_GetSysClockFreq+0x34>
 8003b4a:	2b0c      	cmp	r3, #12
 8003b4c:	d00f      	beq.n	8003b6e <HAL_RCC_GetSysClockFreq+0x3a>
 8003b4e:	2b04      	cmp	r3, #4
 8003b50:	d157      	bne.n	8003c02 <HAL_RCC_GetSysClockFreq+0xce>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003b52:	4b35      	ldr	r3, [pc, #212]	; (8003c28 <HAL_RCC_GetSysClockFreq+0xf4>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	2210      	movs	r2, #16
 8003b58:	4013      	ands	r3, r2
 8003b5a:	d002      	beq.n	8003b62 <HAL_RCC_GetSysClockFreq+0x2e>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8003b5c:	4b33      	ldr	r3, [pc, #204]	; (8003c2c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003b5e:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8003b60:	e05d      	b.n	8003c1e <HAL_RCC_GetSysClockFreq+0xea>
        sysclockfreq =  HSI_VALUE;
 8003b62:	4b33      	ldr	r3, [pc, #204]	; (8003c30 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003b64:	613b      	str	r3, [r7, #16]
      break;
 8003b66:	e05a      	b.n	8003c1e <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003b68:	4b32      	ldr	r3, [pc, #200]	; (8003c34 <HAL_RCC_GetSysClockFreq+0x100>)
 8003b6a:	613b      	str	r3, [r7, #16]
      break;
 8003b6c:	e057      	b.n	8003c1e <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	0c9b      	lsrs	r3, r3, #18
 8003b72:	220f      	movs	r2, #15
 8003b74:	4013      	ands	r3, r2
 8003b76:	4a30      	ldr	r2, [pc, #192]	; (8003c38 <HAL_RCC_GetSysClockFreq+0x104>)
 8003b78:	5cd3      	ldrb	r3, [r2, r3]
 8003b7a:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	0d9b      	lsrs	r3, r3, #22
 8003b80:	2203      	movs	r2, #3
 8003b82:	4013      	ands	r3, r2
 8003b84:	3301      	adds	r3, #1
 8003b86:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b88:	4b27      	ldr	r3, [pc, #156]	; (8003c28 <HAL_RCC_GetSysClockFreq+0xf4>)
 8003b8a:	68da      	ldr	r2, [r3, #12]
 8003b8c:	2380      	movs	r3, #128	; 0x80
 8003b8e:	025b      	lsls	r3, r3, #9
 8003b90:	4013      	ands	r3, r2
 8003b92:	d00f      	beq.n	8003bb4 <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 8003b94:	68b9      	ldr	r1, [r7, #8]
 8003b96:	000a      	movs	r2, r1
 8003b98:	0152      	lsls	r2, r2, #5
 8003b9a:	1a52      	subs	r2, r2, r1
 8003b9c:	0193      	lsls	r3, r2, #6
 8003b9e:	1a9b      	subs	r3, r3, r2
 8003ba0:	00db      	lsls	r3, r3, #3
 8003ba2:	185b      	adds	r3, r3, r1
 8003ba4:	025b      	lsls	r3, r3, #9
 8003ba6:	6879      	ldr	r1, [r7, #4]
 8003ba8:	0018      	movs	r0, r3
 8003baa:	f7fc faad 	bl	8000108 <__udivsi3>
 8003bae:	0003      	movs	r3, r0
 8003bb0:	617b      	str	r3, [r7, #20]
 8003bb2:	e023      	b.n	8003bfc <HAL_RCC_GetSysClockFreq+0xc8>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003bb4:	4b1c      	ldr	r3, [pc, #112]	; (8003c28 <HAL_RCC_GetSysClockFreq+0xf4>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	2210      	movs	r2, #16
 8003bba:	4013      	ands	r3, r2
 8003bbc:	d00f      	beq.n	8003bde <HAL_RCC_GetSysClockFreq+0xaa>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8003bbe:	68b9      	ldr	r1, [r7, #8]
 8003bc0:	000a      	movs	r2, r1
 8003bc2:	0152      	lsls	r2, r2, #5
 8003bc4:	1a52      	subs	r2, r2, r1
 8003bc6:	0193      	lsls	r3, r2, #6
 8003bc8:	1a9b      	subs	r3, r3, r2
 8003bca:	00db      	lsls	r3, r3, #3
 8003bcc:	185b      	adds	r3, r3, r1
 8003bce:	021b      	lsls	r3, r3, #8
 8003bd0:	6879      	ldr	r1, [r7, #4]
 8003bd2:	0018      	movs	r0, r3
 8003bd4:	f7fc fa98 	bl	8000108 <__udivsi3>
 8003bd8:	0003      	movs	r3, r0
 8003bda:	617b      	str	r3, [r7, #20]
 8003bdc:	e00e      	b.n	8003bfc <HAL_RCC_GetSysClockFreq+0xc8>
        }
        else
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 8003bde:	68b9      	ldr	r1, [r7, #8]
 8003be0:	000a      	movs	r2, r1
 8003be2:	0152      	lsls	r2, r2, #5
 8003be4:	1a52      	subs	r2, r2, r1
 8003be6:	0193      	lsls	r3, r2, #6
 8003be8:	1a9b      	subs	r3, r3, r2
 8003bea:	00db      	lsls	r3, r3, #3
 8003bec:	185b      	adds	r3, r3, r1
 8003bee:	029b      	lsls	r3, r3, #10
 8003bf0:	6879      	ldr	r1, [r7, #4]
 8003bf2:	0018      	movs	r0, r3
 8003bf4:	f7fc fa88 	bl	8000108 <__udivsi3>
 8003bf8:	0003      	movs	r3, r0
 8003bfa:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	613b      	str	r3, [r7, #16]
      break;
 8003c00:	e00d      	b.n	8003c1e <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003c02:	4b09      	ldr	r3, [pc, #36]	; (8003c28 <HAL_RCC_GetSysClockFreq+0xf4>)
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	0b5b      	lsrs	r3, r3, #13
 8003c08:	2207      	movs	r2, #7
 8003c0a:	4013      	ands	r3, r2
 8003c0c:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	3301      	adds	r3, #1
 8003c12:	2280      	movs	r2, #128	; 0x80
 8003c14:	0212      	lsls	r2, r2, #8
 8003c16:	409a      	lsls	r2, r3
 8003c18:	0013      	movs	r3, r2
 8003c1a:	613b      	str	r3, [r7, #16]
      break;
 8003c1c:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003c1e:	693b      	ldr	r3, [r7, #16]
}
 8003c20:	0018      	movs	r0, r3
 8003c22:	46bd      	mov	sp, r7
 8003c24:	b006      	add	sp, #24
 8003c26:	bd80      	pop	{r7, pc}
 8003c28:	40021000 	.word	0x40021000
 8003c2c:	003d0900 	.word	0x003d0900
 8003c30:	00f42400 	.word	0x00f42400
 8003c34:	007a1200 	.word	0x007a1200
 8003c38:	080069e4 	.word	0x080069e4

08003c3c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b086      	sub	sp, #24
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	2220      	movs	r2, #32
 8003c4a:	4013      	ands	r3, r2
 8003c4c:	d106      	bne.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x20>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	2380      	movs	r3, #128	; 0x80
 8003c54:	011b      	lsls	r3, r3, #4
 8003c56:	4013      	ands	r3, r2
 8003c58:	d100      	bne.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x20>
 8003c5a:	e0dd      	b.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 8003c5c:	2317      	movs	r3, #23
 8003c5e:	18fb      	adds	r3, r7, r3
 8003c60:	2200      	movs	r2, #0
 8003c62:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c64:	4ba4      	ldr	r3, [pc, #656]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003c66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c68:	2380      	movs	r3, #128	; 0x80
 8003c6a:	055b      	lsls	r3, r3, #21
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	d10a      	bne.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c70:	4ba1      	ldr	r3, [pc, #644]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003c72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c74:	4ba0      	ldr	r3, [pc, #640]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003c76:	2180      	movs	r1, #128	; 0x80
 8003c78:	0549      	lsls	r1, r1, #21
 8003c7a:	430a      	orrs	r2, r1
 8003c7c:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8003c7e:	2317      	movs	r3, #23
 8003c80:	18fb      	adds	r3, r7, r3
 8003c82:	2201      	movs	r2, #1
 8003c84:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c86:	4b9d      	ldr	r3, [pc, #628]	; (8003efc <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	2380      	movs	r3, #128	; 0x80
 8003c8c:	005b      	lsls	r3, r3, #1
 8003c8e:	4013      	ands	r3, r2
 8003c90:	d11a      	bne.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c92:	4b9a      	ldr	r3, [pc, #616]	; (8003efc <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	4b99      	ldr	r3, [pc, #612]	; (8003efc <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8003c98:	2180      	movs	r1, #128	; 0x80
 8003c9a:	0049      	lsls	r1, r1, #1
 8003c9c:	430a      	orrs	r2, r1
 8003c9e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ca0:	f7fe f9d2 	bl	8002048 <HAL_GetTick>
 8003ca4:	0003      	movs	r3, r0
 8003ca6:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ca8:	e008      	b.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003caa:	f7fe f9cd 	bl	8002048 <HAL_GetTick>
 8003cae:	0002      	movs	r2, r0
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	1ad3      	subs	r3, r2, r3
 8003cb4:	2b64      	cmp	r3, #100	; 0x64
 8003cb6:	d901      	bls.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003cb8:	2303      	movs	r3, #3
 8003cba:	e118      	b.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x2b2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cbc:	4b8f      	ldr	r3, [pc, #572]	; (8003efc <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	2380      	movs	r3, #128	; 0x80
 8003cc2:	005b      	lsls	r3, r3, #1
 8003cc4:	4013      	ands	r3, r2
 8003cc6:	d0f0      	beq.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8003cc8:	4b8b      	ldr	r3, [pc, #556]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	23c0      	movs	r3, #192	; 0xc0
 8003cce:	039b      	lsls	r3, r3, #14
 8003cd0:	4013      	ands	r3, r2
 8003cd2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	685a      	ldr	r2, [r3, #4]
 8003cd8:	23c0      	movs	r3, #192	; 0xc0
 8003cda:	039b      	lsls	r3, r3, #14
 8003cdc:	4013      	ands	r3, r2
 8003cde:	68fa      	ldr	r2, [r7, #12]
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d107      	bne.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	689a      	ldr	r2, [r3, #8]
 8003ce8:	23c0      	movs	r3, #192	; 0xc0
 8003cea:	039b      	lsls	r3, r3, #14
 8003cec:	4013      	ands	r3, r2
 8003cee:	68fa      	ldr	r2, [r7, #12]
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d013      	beq.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	685a      	ldr	r2, [r3, #4]
 8003cf8:	23c0      	movs	r3, #192	; 0xc0
 8003cfa:	029b      	lsls	r3, r3, #10
 8003cfc:	401a      	ands	r2, r3
 8003cfe:	23c0      	movs	r3, #192	; 0xc0
 8003d00:	029b      	lsls	r3, r3, #10
 8003d02:	429a      	cmp	r2, r3
 8003d04:	d10a      	bne.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003d06:	4b7c      	ldr	r3, [pc, #496]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	2380      	movs	r3, #128	; 0x80
 8003d0c:	029b      	lsls	r3, r3, #10
 8003d0e:	401a      	ands	r2, r3
 8003d10:	2380      	movs	r3, #128	; 0x80
 8003d12:	029b      	lsls	r3, r3, #10
 8003d14:	429a      	cmp	r2, r3
 8003d16:	d101      	bne.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	e0e8      	b.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8003d1c:	4b76      	ldr	r3, [pc, #472]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003d1e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003d20:	23c0      	movs	r3, #192	; 0xc0
 8003d22:	029b      	lsls	r3, r3, #10
 8003d24:	4013      	ands	r3, r2
 8003d26:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d049      	beq.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	685a      	ldr	r2, [r3, #4]
 8003d32:	23c0      	movs	r3, #192	; 0xc0
 8003d34:	029b      	lsls	r3, r3, #10
 8003d36:	4013      	ands	r3, r2
 8003d38:	68fa      	ldr	r2, [r7, #12]
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	d004      	beq.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	2220      	movs	r2, #32
 8003d44:	4013      	ands	r3, r2
 8003d46:	d10d      	bne.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	689a      	ldr	r2, [r3, #8]
 8003d4c:	23c0      	movs	r3, #192	; 0xc0
 8003d4e:	029b      	lsls	r3, r3, #10
 8003d50:	4013      	ands	r3, r2
 8003d52:	68fa      	ldr	r2, [r7, #12]
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d034      	beq.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	2380      	movs	r3, #128	; 0x80
 8003d5e:	011b      	lsls	r3, r3, #4
 8003d60:	4013      	ands	r3, r2
 8003d62:	d02e      	beq.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8003d64:	4b64      	ldr	r3, [pc, #400]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003d66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d68:	4a65      	ldr	r2, [pc, #404]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003d6a:	4013      	ands	r3, r2
 8003d6c:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003d6e:	4b62      	ldr	r3, [pc, #392]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003d70:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003d72:	4b61      	ldr	r3, [pc, #388]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003d74:	2180      	movs	r1, #128	; 0x80
 8003d76:	0309      	lsls	r1, r1, #12
 8003d78:	430a      	orrs	r2, r1
 8003d7a:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003d7c:	4b5e      	ldr	r3, [pc, #376]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003d7e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003d80:	4b5d      	ldr	r3, [pc, #372]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003d82:	4960      	ldr	r1, [pc, #384]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8003d84:	400a      	ands	r2, r1
 8003d86:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8003d88:	4b5b      	ldr	r3, [pc, #364]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003d8a:	68fa      	ldr	r2, [r7, #12]
 8003d8c:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8003d8e:	68fa      	ldr	r2, [r7, #12]
 8003d90:	2380      	movs	r3, #128	; 0x80
 8003d92:	005b      	lsls	r3, r3, #1
 8003d94:	4013      	ands	r3, r2
 8003d96:	d014      	beq.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d98:	f7fe f956 	bl	8002048 <HAL_GetTick>
 8003d9c:	0003      	movs	r3, r0
 8003d9e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003da0:	e009      	b.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003da2:	f7fe f951 	bl	8002048 <HAL_GetTick>
 8003da6:	0002      	movs	r2, r0
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	1ad3      	subs	r3, r2, r3
 8003dac:	4a56      	ldr	r2, [pc, #344]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d901      	bls.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8003db2:	2303      	movs	r3, #3
 8003db4:	e09b      	b.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003db6:	4b50      	ldr	r3, [pc, #320]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003db8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003dba:	2380      	movs	r3, #128	; 0x80
 8003dbc:	009b      	lsls	r3, r3, #2
 8003dbe:	4013      	ands	r3, r2
 8003dc0:	d0ef      	beq.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	685a      	ldr	r2, [r3, #4]
 8003dc6:	23c0      	movs	r3, #192	; 0xc0
 8003dc8:	029b      	lsls	r3, r3, #10
 8003dca:	401a      	ands	r2, r3
 8003dcc:	23c0      	movs	r3, #192	; 0xc0
 8003dce:	029b      	lsls	r3, r3, #10
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d10c      	bne.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8003dd4:	4b48      	ldr	r3, [pc, #288]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a4c      	ldr	r2, [pc, #304]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8003dda:	4013      	ands	r3, r2
 8003ddc:	0019      	movs	r1, r3
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	685a      	ldr	r2, [r3, #4]
 8003de2:	23c0      	movs	r3, #192	; 0xc0
 8003de4:	039b      	lsls	r3, r3, #14
 8003de6:	401a      	ands	r2, r3
 8003de8:	4b43      	ldr	r3, [pc, #268]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003dea:	430a      	orrs	r2, r1
 8003dec:	601a      	str	r2, [r3, #0]
 8003dee:	4b42      	ldr	r3, [pc, #264]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003df0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	685a      	ldr	r2, [r3, #4]
 8003df6:	23c0      	movs	r3, #192	; 0xc0
 8003df8:	029b      	lsls	r3, r3, #10
 8003dfa:	401a      	ands	r2, r3
 8003dfc:	4b3e      	ldr	r3, [pc, #248]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003dfe:	430a      	orrs	r2, r1
 8003e00:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003e02:	2317      	movs	r3, #23
 8003e04:	18fb      	adds	r3, r7, r3
 8003e06:	781b      	ldrb	r3, [r3, #0]
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	d105      	bne.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e0c:	4b3a      	ldr	r3, [pc, #232]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003e0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e10:	4b39      	ldr	r3, [pc, #228]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003e12:	493f      	ldr	r1, [pc, #252]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003e14:	400a      	ands	r2, r1
 8003e16:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	4013      	ands	r3, r2
 8003e20:	d009      	beq.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003e22:	4b35      	ldr	r3, [pc, #212]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003e24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e26:	2203      	movs	r2, #3
 8003e28:	4393      	bics	r3, r2
 8003e2a:	0019      	movs	r1, r3
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	68da      	ldr	r2, [r3, #12]
 8003e30:	4b31      	ldr	r3, [pc, #196]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003e32:	430a      	orrs	r2, r1
 8003e34:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	2202      	movs	r2, #2
 8003e3c:	4013      	ands	r3, r2
 8003e3e:	d009      	beq.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003e40:	4b2d      	ldr	r3, [pc, #180]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003e42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e44:	220c      	movs	r2, #12
 8003e46:	4393      	bics	r3, r2
 8003e48:	0019      	movs	r1, r3
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	691a      	ldr	r2, [r3, #16]
 8003e4e:	4b2a      	ldr	r3, [pc, #168]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003e50:	430a      	orrs	r2, r1
 8003e52:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	2204      	movs	r2, #4
 8003e5a:	4013      	ands	r3, r2
 8003e5c:	d009      	beq.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003e5e:	4b26      	ldr	r3, [pc, #152]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003e60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e62:	4a2c      	ldr	r2, [pc, #176]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8003e64:	4013      	ands	r3, r2
 8003e66:	0019      	movs	r1, r3
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	695a      	ldr	r2, [r3, #20]
 8003e6c:	4b22      	ldr	r3, [pc, #136]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003e6e:	430a      	orrs	r2, r1
 8003e70:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	2208      	movs	r2, #8
 8003e78:	4013      	ands	r3, r2
 8003e7a:	d009      	beq.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003e7c:	4b1e      	ldr	r3, [pc, #120]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003e7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e80:	4a25      	ldr	r2, [pc, #148]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8003e82:	4013      	ands	r3, r2
 8003e84:	0019      	movs	r1, r3
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	699a      	ldr	r2, [r3, #24]
 8003e8a:	4b1b      	ldr	r3, [pc, #108]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003e8c:	430a      	orrs	r2, r1
 8003e8e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	2380      	movs	r3, #128	; 0x80
 8003e96:	005b      	lsls	r3, r3, #1
 8003e98:	4013      	ands	r3, r2
 8003e9a:	d009      	beq.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003e9c:	4b16      	ldr	r3, [pc, #88]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003e9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ea0:	4a17      	ldr	r2, [pc, #92]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003ea2:	4013      	ands	r3, r2
 8003ea4:	0019      	movs	r1, r3
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	69da      	ldr	r2, [r3, #28]
 8003eaa:	4b13      	ldr	r3, [pc, #76]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003eac:	430a      	orrs	r2, r1
 8003eae:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	2240      	movs	r2, #64	; 0x40
 8003eb6:	4013      	ands	r3, r2
 8003eb8:	d009      	beq.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003eba:	4b0f      	ldr	r3, [pc, #60]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003ebc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ebe:	4a17      	ldr	r2, [pc, #92]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003ec0:	4013      	ands	r3, r2
 8003ec2:	0019      	movs	r1, r3
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ec8:	4b0b      	ldr	r3, [pc, #44]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003eca:	430a      	orrs	r2, r1
 8003ecc:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	2280      	movs	r2, #128	; 0x80
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	d009      	beq.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8003ed8:	4b07      	ldr	r3, [pc, #28]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003eda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003edc:	4a10      	ldr	r2, [pc, #64]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003ede:	4013      	ands	r3, r2
 8003ee0:	0019      	movs	r1, r3
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6a1a      	ldr	r2, [r3, #32]
 8003ee6:	4b04      	ldr	r3, [pc, #16]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003ee8:	430a      	orrs	r2, r1
 8003eea:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8003eec:	2300      	movs	r3, #0
}
 8003eee:	0018      	movs	r0, r3
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	b006      	add	sp, #24
 8003ef4:	bd80      	pop	{r7, pc}
 8003ef6:	46c0      	nop			; (mov r8, r8)
 8003ef8:	40021000 	.word	0x40021000
 8003efc:	40007000 	.word	0x40007000
 8003f00:	fffcffff 	.word	0xfffcffff
 8003f04:	fff7ffff 	.word	0xfff7ffff
 8003f08:	00001388 	.word	0x00001388
 8003f0c:	ffcfffff 	.word	0xffcfffff
 8003f10:	efffffff 	.word	0xefffffff
 8003f14:	fffff3ff 	.word	0xfffff3ff
 8003f18:	ffffcfff 	.word	0xffffcfff
 8003f1c:	fbffffff 	.word	0xfbffffff
 8003f20:	fff3ffff 	.word	0xfff3ffff

08003f24 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b082      	sub	sp, #8
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d101      	bne.n	8003f36 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	e08e      	b.n	8004054 <HAL_RTC_Init+0x130>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2221      	movs	r2, #33	; 0x21
 8003f3a:	5c9b      	ldrb	r3, [r3, r2]
 8003f3c:	b2db      	uxtb	r3, r3
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d107      	bne.n	8003f52 <HAL_RTC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2220      	movs	r2, #32
 8003f46:	2100      	movs	r1, #0
 8003f48:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	0018      	movs	r0, r3
 8003f4e:	f7fd fe6d 	bl	8001c2c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2221      	movs	r2, #33	; 0x21
 8003f56:	2102      	movs	r1, #2
 8003f58:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	22ca      	movs	r2, #202	; 0xca
 8003f60:	625a      	str	r2, [r3, #36]	; 0x24
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	2253      	movs	r2, #83	; 0x53
 8003f68:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	0018      	movs	r0, r3
 8003f6e:	f000 fcf4 	bl	800495a <RTC_EnterInitMode>
 8003f72:	1e03      	subs	r3, r0, #0
 8003f74:	d009      	beq.n	8003f8a <HAL_RTC_Init+0x66>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	22ff      	movs	r2, #255	; 0xff
 8003f7c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2221      	movs	r2, #33	; 0x21
 8003f82:	2104      	movs	r1, #4
 8003f84:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	e064      	b.n	8004054 <HAL_RTC_Init+0x130>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	689a      	ldr	r2, [r3, #8]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4931      	ldr	r1, [pc, #196]	; (800405c <HAL_RTC_Init+0x138>)
 8003f96:	400a      	ands	r2, r1
 8003f98:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	6899      	ldr	r1, [r3, #8]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	685a      	ldr	r2, [r3, #4]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	691b      	ldr	r3, [r3, #16]
 8003fa8:	431a      	orrs	r2, r3
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	699b      	ldr	r3, [r3, #24]
 8003fae:	431a      	orrs	r2, r3
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	430a      	orrs	r2, r1
 8003fb6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	687a      	ldr	r2, [r7, #4]
 8003fbe:	68d2      	ldr	r2, [r2, #12]
 8003fc0:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	6919      	ldr	r1, [r3, #16]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	041a      	lsls	r2, r3, #16
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	430a      	orrs	r2, r1
 8003fd4:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	68da      	ldr	r2, [r3, #12]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	2180      	movs	r1, #128	; 0x80
 8003fe2:	438a      	bics	r2, r1
 8003fe4:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	2103      	movs	r1, #3
 8003ff2:	438a      	bics	r2, r1
 8003ff4:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	69da      	ldr	r2, [r3, #28]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	695b      	ldr	r3, [r3, #20]
 8004004:	431a      	orrs	r2, r3
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	430a      	orrs	r2, r1
 800400c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	2220      	movs	r2, #32
 8004016:	4013      	ands	r3, r2
 8004018:	d113      	bne.n	8004042 <HAL_RTC_Init+0x11e>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	0018      	movs	r0, r3
 800401e:	f000 fc75 	bl	800490c <HAL_RTC_WaitForSynchro>
 8004022:	1e03      	subs	r3, r0, #0
 8004024:	d00d      	beq.n	8004042 <HAL_RTC_Init+0x11e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	22ff      	movs	r2, #255	; 0xff
 800402c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2221      	movs	r2, #33	; 0x21
 8004032:	2104      	movs	r1, #4
 8004034:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2220      	movs	r2, #32
 800403a:	2100      	movs	r1, #0
 800403c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	e008      	b.n	8004054 <HAL_RTC_Init+0x130>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	22ff      	movs	r2, #255	; 0xff
 8004048:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2221      	movs	r2, #33	; 0x21
 800404e:	2101      	movs	r1, #1
 8004050:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004052:	2300      	movs	r3, #0
  }
}
 8004054:	0018      	movs	r0, r3
 8004056:	46bd      	mov	sp, r7
 8004058:	b002      	add	sp, #8
 800405a:	bd80      	pop	{r7, pc}
 800405c:	ff8fffbf 	.word	0xff8fffbf

08004060 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004060:	b590      	push	{r4, r7, lr}
 8004062:	b087      	sub	sp, #28
 8004064:	af00      	add	r7, sp, #0
 8004066:	60f8      	str	r0, [r7, #12]
 8004068:	60b9      	str	r1, [r7, #8]
 800406a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2220      	movs	r2, #32
 8004070:	5c9b      	ldrb	r3, [r3, r2]
 8004072:	2b01      	cmp	r3, #1
 8004074:	d101      	bne.n	800407a <HAL_RTC_SetTime+0x1a>
 8004076:	2302      	movs	r3, #2
 8004078:	e0ad      	b.n	80041d6 <HAL_RTC_SetTime+0x176>
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2220      	movs	r2, #32
 800407e:	2101      	movs	r1, #1
 8004080:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2221      	movs	r2, #33	; 0x21
 8004086:	2102      	movs	r1, #2
 8004088:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d125      	bne.n	80040dc <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	2240      	movs	r2, #64	; 0x40
 8004098:	4013      	ands	r3, r2
 800409a:	d102      	bne.n	80040a2 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	2200      	movs	r2, #0
 80040a0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	781b      	ldrb	r3, [r3, #0]
 80040a6:	0018      	movs	r0, r3
 80040a8:	f000 fc81 	bl	80049ae <RTC_ByteToBcd2>
 80040ac:	0003      	movs	r3, r0
 80040ae:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	785b      	ldrb	r3, [r3, #1]
 80040b4:	0018      	movs	r0, r3
 80040b6:	f000 fc7a 	bl	80049ae <RTC_ByteToBcd2>
 80040ba:	0003      	movs	r3, r0
 80040bc:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80040be:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	789b      	ldrb	r3, [r3, #2]
 80040c4:	0018      	movs	r0, r3
 80040c6:	f000 fc72 	bl	80049ae <RTC_ByteToBcd2>
 80040ca:	0003      	movs	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80040cc:	0022      	movs	r2, r4
 80040ce:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	78db      	ldrb	r3, [r3, #3]
 80040d4:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80040d6:	4313      	orrs	r3, r2
 80040d8:	617b      	str	r3, [r7, #20]
 80040da:	e017      	b.n	800410c <HAL_RTC_SetTime+0xac>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	2240      	movs	r2, #64	; 0x40
 80040e4:	4013      	ands	r3, r2
 80040e6:	d102      	bne.n	80040ee <HAL_RTC_SetTime+0x8e>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	2200      	movs	r2, #0
 80040ec:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	781b      	ldrb	r3, [r3, #0]
 80040f2:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	785b      	ldrb	r3, [r3, #1]
 80040f8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80040fa:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80040fc:	68ba      	ldr	r2, [r7, #8]
 80040fe:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8004100:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	78db      	ldrb	r3, [r3, #3]
 8004106:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004108:	4313      	orrs	r3, r2
 800410a:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	22ca      	movs	r2, #202	; 0xca
 8004112:	625a      	str	r2, [r3, #36]	; 0x24
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	2253      	movs	r2, #83	; 0x53
 800411a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	0018      	movs	r0, r3
 8004120:	f000 fc1b 	bl	800495a <RTC_EnterInitMode>
 8004124:	1e03      	subs	r3, r0, #0
 8004126:	d00d      	beq.n	8004144 <HAL_RTC_SetTime+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	22ff      	movs	r2, #255	; 0xff
 800412e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2221      	movs	r2, #33	; 0x21
 8004134:	2104      	movs	r1, #4
 8004136:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2220      	movs	r2, #32
 800413c:	2100      	movs	r1, #0
 800413e:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8004140:	2301      	movs	r3, #1
 8004142:	e048      	b.n	80041d6 <HAL_RTC_SetTime+0x176>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	697a      	ldr	r2, [r7, #20]
 800414a:	4925      	ldr	r1, [pc, #148]	; (80041e0 <HAL_RTC_SetTime+0x180>)
 800414c:	400a      	ands	r2, r1
 800414e:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	689a      	ldr	r2, [r3, #8]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4922      	ldr	r1, [pc, #136]	; (80041e4 <HAL_RTC_SetTime+0x184>)
 800415c:	400a      	ands	r2, r1
 800415e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	6899      	ldr	r1, [r3, #8]
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	68da      	ldr	r2, [r3, #12]
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	691b      	ldr	r3, [r3, #16]
 800416e:	431a      	orrs	r2, r3
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	430a      	orrs	r2, r1
 8004176:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	68da      	ldr	r2, [r3, #12]
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	2180      	movs	r1, #128	; 0x80
 8004184:	438a      	bics	r2, r1
 8004186:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	689b      	ldr	r3, [r3, #8]
 800418e:	2220      	movs	r2, #32
 8004190:	4013      	ands	r3, r2
 8004192:	d113      	bne.n	80041bc <HAL_RTC_SetTime+0x15c>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	0018      	movs	r0, r3
 8004198:	f000 fbb8 	bl	800490c <HAL_RTC_WaitForSynchro>
 800419c:	1e03      	subs	r3, r0, #0
 800419e:	d00d      	beq.n	80041bc <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	22ff      	movs	r2, #255	; 0xff
 80041a6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2221      	movs	r2, #33	; 0x21
 80041ac:	2104      	movs	r1, #4
 80041ae:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2220      	movs	r2, #32
 80041b4:	2100      	movs	r1, #0
 80041b6:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	e00c      	b.n	80041d6 <HAL_RTC_SetTime+0x176>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	22ff      	movs	r2, #255	; 0xff
 80041c2:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2221      	movs	r2, #33	; 0x21
 80041c8:	2101      	movs	r1, #1
 80041ca:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hrtc);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2220      	movs	r2, #32
 80041d0:	2100      	movs	r1, #0
 80041d2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80041d4:	2300      	movs	r3, #0
  }
}
 80041d6:	0018      	movs	r0, r3
 80041d8:	46bd      	mov	sp, r7
 80041da:	b007      	add	sp, #28
 80041dc:	bd90      	pop	{r4, r7, pc}
 80041de:	46c0      	nop			; (mov r8, r8)
 80041e0:	007f7f7f 	.word	0x007f7f7f
 80041e4:	fffbffff 	.word	0xfffbffff

080041e8 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b086      	sub	sp, #24
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	60f8      	str	r0, [r7, #12]
 80041f0:	60b9      	str	r1, [r7, #8]
 80041f2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	691b      	ldr	r3, [r3, #16]
 8004204:	045b      	lsls	r3, r3, #17
 8004206:	0c5a      	lsrs	r2, r3, #17
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a22      	ldr	r2, [pc, #136]	; (800429c <HAL_RTC_GetTime+0xb4>)
 8004214:	4013      	ands	r3, r2
 8004216:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	0c1b      	lsrs	r3, r3, #16
 800421c:	b2db      	uxtb	r3, r3
 800421e:	223f      	movs	r2, #63	; 0x3f
 8004220:	4013      	ands	r3, r2
 8004222:	b2da      	uxtb	r2, r3
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	0a1b      	lsrs	r3, r3, #8
 800422c:	b2db      	uxtb	r3, r3
 800422e:	227f      	movs	r2, #127	; 0x7f
 8004230:	4013      	ands	r3, r2
 8004232:	b2da      	uxtb	r2, r3
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	b2db      	uxtb	r3, r3
 800423c:	227f      	movs	r2, #127	; 0x7f
 800423e:	4013      	ands	r3, r2
 8004240:	b2da      	uxtb	r2, r3
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	0c1b      	lsrs	r3, r3, #16
 800424a:	b2db      	uxtb	r3, r3
 800424c:	2240      	movs	r2, #64	; 0x40
 800424e:	4013      	ands	r3, r2
 8004250:	b2da      	uxtb	r2, r3
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d11a      	bne.n	8004292 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	781b      	ldrb	r3, [r3, #0]
 8004260:	0018      	movs	r0, r3
 8004262:	f000 fbcd 	bl	8004a00 <RTC_Bcd2ToByte>
 8004266:	0003      	movs	r3, r0
 8004268:	001a      	movs	r2, r3
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	785b      	ldrb	r3, [r3, #1]
 8004272:	0018      	movs	r0, r3
 8004274:	f000 fbc4 	bl	8004a00 <RTC_Bcd2ToByte>
 8004278:	0003      	movs	r3, r0
 800427a:	001a      	movs	r2, r3
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	789b      	ldrb	r3, [r3, #2]
 8004284:	0018      	movs	r0, r3
 8004286:	f000 fbbb 	bl	8004a00 <RTC_Bcd2ToByte>
 800428a:	0003      	movs	r3, r0
 800428c:	001a      	movs	r2, r3
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004292:	2300      	movs	r3, #0
}
 8004294:	0018      	movs	r0, r3
 8004296:	46bd      	mov	sp, r7
 8004298:	b006      	add	sp, #24
 800429a:	bd80      	pop	{r7, pc}
 800429c:	007f7f7f 	.word	0x007f7f7f

080042a0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80042a0:	b590      	push	{r4, r7, lr}
 80042a2:	b087      	sub	sp, #28
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	60f8      	str	r0, [r7, #12]
 80042a8:	60b9      	str	r1, [r7, #8]
 80042aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2220      	movs	r2, #32
 80042b0:	5c9b      	ldrb	r3, [r3, r2]
 80042b2:	2b01      	cmp	r3, #1
 80042b4:	d101      	bne.n	80042ba <HAL_RTC_SetDate+0x1a>
 80042b6:	2302      	movs	r3, #2
 80042b8:	e099      	b.n	80043ee <HAL_RTC_SetDate+0x14e>
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	2220      	movs	r2, #32
 80042be:	2101      	movs	r1, #1
 80042c0:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2221      	movs	r2, #33	; 0x21
 80042c6:	2102      	movs	r1, #2
 80042c8:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d10e      	bne.n	80042ee <HAL_RTC_SetDate+0x4e>
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	785b      	ldrb	r3, [r3, #1]
 80042d4:	001a      	movs	r2, r3
 80042d6:	2310      	movs	r3, #16
 80042d8:	4013      	ands	r3, r2
 80042da:	d008      	beq.n	80042ee <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	785b      	ldrb	r3, [r3, #1]
 80042e0:	2210      	movs	r2, #16
 80042e2:	4393      	bics	r3, r2
 80042e4:	b2db      	uxtb	r3, r3
 80042e6:	330a      	adds	r3, #10
 80042e8:	b2da      	uxtb	r2, r3
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d11c      	bne.n	800432e <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	78db      	ldrb	r3, [r3, #3]
 80042f8:	0018      	movs	r0, r3
 80042fa:	f000 fb58 	bl	80049ae <RTC_ByteToBcd2>
 80042fe:	0003      	movs	r3, r0
 8004300:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	785b      	ldrb	r3, [r3, #1]
 8004306:	0018      	movs	r0, r3
 8004308:	f000 fb51 	bl	80049ae <RTC_ByteToBcd2>
 800430c:	0003      	movs	r3, r0
 800430e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004310:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	789b      	ldrb	r3, [r3, #2]
 8004316:	0018      	movs	r0, r3
 8004318:	f000 fb49 	bl	80049ae <RTC_ByteToBcd2>
 800431c:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800431e:	0022      	movs	r2, r4
 8004320:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	781b      	ldrb	r3, [r3, #0]
 8004326:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004328:	4313      	orrs	r3, r2
 800432a:	617b      	str	r3, [r7, #20]
 800432c:	e00e      	b.n	800434c <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	78db      	ldrb	r3, [r3, #3]
 8004332:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	785b      	ldrb	r3, [r3, #1]
 8004338:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800433a:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800433c:	68ba      	ldr	r2, [r7, #8]
 800433e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8004340:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	781b      	ldrb	r3, [r3, #0]
 8004346:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004348:	4313      	orrs	r3, r2
 800434a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	22ca      	movs	r2, #202	; 0xca
 8004352:	625a      	str	r2, [r3, #36]	; 0x24
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	2253      	movs	r2, #83	; 0x53
 800435a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	0018      	movs	r0, r3
 8004360:	f000 fafb 	bl	800495a <RTC_EnterInitMode>
 8004364:	1e03      	subs	r3, r0, #0
 8004366:	d00d      	beq.n	8004384 <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	22ff      	movs	r2, #255	; 0xff
 800436e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	2221      	movs	r2, #33	; 0x21
 8004374:	2104      	movs	r1, #4
 8004376:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2220      	movs	r2, #32
 800437c:	2100      	movs	r1, #0
 800437e:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8004380:	2301      	movs	r3, #1
 8004382:	e034      	b.n	80043ee <HAL_RTC_SetDate+0x14e>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	697a      	ldr	r2, [r7, #20]
 800438a:	491b      	ldr	r1, [pc, #108]	; (80043f8 <HAL_RTC_SetDate+0x158>)
 800438c:	400a      	ands	r2, r1
 800438e:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	68da      	ldr	r2, [r3, #12]
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	2180      	movs	r1, #128	; 0x80
 800439c:	438a      	bics	r2, r1
 800439e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	2220      	movs	r2, #32
 80043a8:	4013      	ands	r3, r2
 80043aa:	d113      	bne.n	80043d4 <HAL_RTC_SetDate+0x134>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	0018      	movs	r0, r3
 80043b0:	f000 faac 	bl	800490c <HAL_RTC_WaitForSynchro>
 80043b4:	1e03      	subs	r3, r0, #0
 80043b6:	d00d      	beq.n	80043d4 <HAL_RTC_SetDate+0x134>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	22ff      	movs	r2, #255	; 0xff
 80043be:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2221      	movs	r2, #33	; 0x21
 80043c4:	2104      	movs	r1, #4
 80043c6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2220      	movs	r2, #32
 80043cc:	2100      	movs	r1, #0
 80043ce:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	e00c      	b.n	80043ee <HAL_RTC_SetDate+0x14e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	22ff      	movs	r2, #255	; 0xff
 80043da:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	2221      	movs	r2, #33	; 0x21
 80043e0:	2101      	movs	r1, #1
 80043e2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2220      	movs	r2, #32
 80043e8:	2100      	movs	r1, #0
 80043ea:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80043ec:	2300      	movs	r3, #0
  }
}
 80043ee:	0018      	movs	r0, r3
 80043f0:	46bd      	mov	sp, r7
 80043f2:	b007      	add	sp, #28
 80043f4:	bd90      	pop	{r4, r7, pc}
 80043f6:	46c0      	nop			; (mov r8, r8)
 80043f8:	00ffff3f 	.word	0x00ffff3f

080043fc <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b086      	sub	sp, #24
 8004400:	af00      	add	r7, sp, #0
 8004402:	60f8      	str	r0, [r7, #12]
 8004404:	60b9      	str	r1, [r7, #8]
 8004406:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	4a21      	ldr	r2, [pc, #132]	; (8004494 <HAL_RTC_GetDate+0x98>)
 8004410:	4013      	ands	r3, r2
 8004412:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	0c1b      	lsrs	r3, r3, #16
 8004418:	b2da      	uxtb	r2, r3
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	0a1b      	lsrs	r3, r3, #8
 8004422:	b2db      	uxtb	r3, r3
 8004424:	221f      	movs	r2, #31
 8004426:	4013      	ands	r3, r2
 8004428:	b2da      	uxtb	r2, r3
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	b2db      	uxtb	r3, r3
 8004432:	223f      	movs	r2, #63	; 0x3f
 8004434:	4013      	ands	r3, r2
 8004436:	b2da      	uxtb	r2, r3
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	0b5b      	lsrs	r3, r3, #13
 8004440:	b2db      	uxtb	r3, r3
 8004442:	2207      	movs	r2, #7
 8004444:	4013      	ands	r3, r2
 8004446:	b2da      	uxtb	r2, r3
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d11a      	bne.n	8004488 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	78db      	ldrb	r3, [r3, #3]
 8004456:	0018      	movs	r0, r3
 8004458:	f000 fad2 	bl	8004a00 <RTC_Bcd2ToByte>
 800445c:	0003      	movs	r3, r0
 800445e:	001a      	movs	r2, r3
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	785b      	ldrb	r3, [r3, #1]
 8004468:	0018      	movs	r0, r3
 800446a:	f000 fac9 	bl	8004a00 <RTC_Bcd2ToByte>
 800446e:	0003      	movs	r3, r0
 8004470:	001a      	movs	r2, r3
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	789b      	ldrb	r3, [r3, #2]
 800447a:	0018      	movs	r0, r3
 800447c:	f000 fac0 	bl	8004a00 <RTC_Bcd2ToByte>
 8004480:	0003      	movs	r3, r0
 8004482:	001a      	movs	r2, r3
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8004488:	2300      	movs	r3, #0
}
 800448a:	0018      	movs	r0, r3
 800448c:	46bd      	mov	sp, r7
 800448e:	b006      	add	sp, #24
 8004490:	bd80      	pop	{r7, pc}
 8004492:	46c0      	nop			; (mov r8, r8)
 8004494:	00ffff3f 	.word	0x00ffff3f

08004498 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8004498:	b590      	push	{r4, r7, lr}
 800449a:	b089      	sub	sp, #36	; 0x24
 800449c:	af00      	add	r7, sp, #0
 800449e:	60f8      	str	r0, [r7, #12]
 80044a0:	60b9      	str	r1, [r7, #8]
 80044a2:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2220      	movs	r2, #32
 80044a8:	5c9b      	ldrb	r3, [r3, r2]
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d101      	bne.n	80044b2 <HAL_RTC_SetAlarm_IT+0x1a>
 80044ae:	2302      	movs	r3, #2
 80044b0:	e130      	b.n	8004714 <HAL_RTC_SetAlarm_IT+0x27c>
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	2220      	movs	r2, #32
 80044b6:	2101      	movs	r1, #1
 80044b8:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2221      	movs	r2, #33	; 0x21
 80044be:	2102      	movs	r1, #2
 80044c0:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d136      	bne.n	8004536 <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	2240      	movs	r2, #64	; 0x40
 80044d0:	4013      	ands	r3, r2
 80044d2:	d102      	bne.n	80044da <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	2200      	movs	r2, #0
 80044d8:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	781b      	ldrb	r3, [r3, #0]
 80044de:	0018      	movs	r0, r3
 80044e0:	f000 fa65 	bl	80049ae <RTC_ByteToBcd2>
 80044e4:	0003      	movs	r3, r0
 80044e6:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	785b      	ldrb	r3, [r3, #1]
 80044ec:	0018      	movs	r0, r3
 80044ee:	f000 fa5e 	bl	80049ae <RTC_ByteToBcd2>
 80044f2:	0003      	movs	r3, r0
 80044f4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80044f6:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	789b      	ldrb	r3, [r3, #2]
 80044fc:	0018      	movs	r0, r3
 80044fe:	f000 fa56 	bl	80049ae <RTC_ByteToBcd2>
 8004502:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8004504:	0022      	movs	r2, r4
 8004506:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	78db      	ldrb	r3, [r3, #3]
 800450c:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800450e:	431a      	orrs	r2, r3
 8004510:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	2220      	movs	r2, #32
 8004516:	5c9b      	ldrb	r3, [r3, r2]
 8004518:	0018      	movs	r0, r3
 800451a:	f000 fa48 	bl	80049ae <RTC_ByteToBcd2>
 800451e:	0003      	movs	r3, r0
 8004520:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8004522:	0022      	movs	r2, r4
 8004524:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800452a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8004530:	4313      	orrs	r3, r2
 8004532:	61fb      	str	r3, [r7, #28]
 8004534:	e022      	b.n	800457c <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	2240      	movs	r2, #64	; 0x40
 800453e:	4013      	ands	r3, r2
 8004540:	d102      	bne.n	8004548 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	2200      	movs	r2, #0
 8004546:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	781b      	ldrb	r3, [r3, #0]
 800454c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	785b      	ldrb	r3, [r3, #1]
 8004552:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8004554:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8004556:	68ba      	ldr	r2, [r7, #8]
 8004558:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800455a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	78db      	ldrb	r3, [r3, #3]
 8004560:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8004562:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	2120      	movs	r1, #32
 8004568:	5c5b      	ldrb	r3, [r3, r1]
 800456a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800456c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8004572:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8004578:	4313      	orrs	r3, r2
 800457a:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	685a      	ldr	r2, [r3, #4]
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	699b      	ldr	r3, [r3, #24]
 8004584:	4313      	orrs	r3, r2
 8004586:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	22ca      	movs	r2, #202	; 0xca
 800458e:	625a      	str	r2, [r3, #36]	; 0x24
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	2253      	movs	r2, #83	; 0x53
 8004596:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800459c:	2380      	movs	r3, #128	; 0x80
 800459e:	005b      	lsls	r3, r3, #1
 80045a0:	429a      	cmp	r2, r3
 80045a2:	d14e      	bne.n	8004642 <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	689a      	ldr	r2, [r3, #8]
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	495b      	ldr	r1, [pc, #364]	; (800471c <HAL_RTC_SetAlarm_IT+0x284>)
 80045b0:	400a      	ands	r2, r1
 80045b2:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	68db      	ldr	r3, [r3, #12]
 80045ba:	22ff      	movs	r2, #255	; 0xff
 80045bc:	401a      	ands	r2, r3
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4957      	ldr	r1, [pc, #348]	; (8004720 <HAL_RTC_SetAlarm_IT+0x288>)
 80045c4:	430a      	orrs	r2, r1
 80045c6:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80045c8:	f7fd fd3e 	bl	8002048 <HAL_GetTick>
 80045cc:	0003      	movs	r3, r0
 80045ce:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80045d0:	e016      	b.n	8004600 <HAL_RTC_SetAlarm_IT+0x168>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80045d2:	f7fd fd39 	bl	8002048 <HAL_GetTick>
 80045d6:	0002      	movs	r2, r0
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	1ad2      	subs	r2, r2, r3
 80045dc:	23fa      	movs	r3, #250	; 0xfa
 80045de:	009b      	lsls	r3, r3, #2
 80045e0:	429a      	cmp	r2, r3
 80045e2:	d90d      	bls.n	8004600 <HAL_RTC_SetAlarm_IT+0x168>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	22ff      	movs	r2, #255	; 0xff
 80045ea:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2221      	movs	r2, #33	; 0x21
 80045f0:	2103      	movs	r1, #3
 80045f2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2220      	movs	r2, #32
 80045f8:	2100      	movs	r1, #0
 80045fa:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80045fc:	2303      	movs	r3, #3
 80045fe:	e089      	b.n	8004714 <HAL_RTC_SetAlarm_IT+0x27c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	68db      	ldr	r3, [r3, #12]
 8004606:	2201      	movs	r2, #1
 8004608:	4013      	ands	r3, r2
 800460a:	d0e2      	beq.n	80045d2 <HAL_RTC_SetAlarm_IT+0x13a>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	69fa      	ldr	r2, [r7, #28]
 8004612:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	69ba      	ldr	r2, [r7, #24]
 800461a:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	689a      	ldr	r2, [r3, #8]
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	2180      	movs	r1, #128	; 0x80
 8004628:	0049      	lsls	r1, r1, #1
 800462a:	430a      	orrs	r2, r1
 800462c:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	689a      	ldr	r2, [r3, #8]
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	2180      	movs	r1, #128	; 0x80
 800463a:	0149      	lsls	r1, r1, #5
 800463c:	430a      	orrs	r2, r1
 800463e:	609a      	str	r2, [r3, #8]
 8004640:	e04d      	b.n	80046de <HAL_RTC_SetAlarm_IT+0x246>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	689a      	ldr	r2, [r3, #8]
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4935      	ldr	r1, [pc, #212]	; (8004724 <HAL_RTC_SetAlarm_IT+0x28c>)
 800464e:	400a      	ands	r2, r1
 8004650:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	68db      	ldr	r3, [r3, #12]
 8004658:	22ff      	movs	r2, #255	; 0xff
 800465a:	401a      	ands	r2, r3
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4931      	ldr	r1, [pc, #196]	; (8004728 <HAL_RTC_SetAlarm_IT+0x290>)
 8004662:	430a      	orrs	r2, r1
 8004664:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004666:	f7fd fcef 	bl	8002048 <HAL_GetTick>
 800466a:	0003      	movs	r3, r0
 800466c:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800466e:	e016      	b.n	800469e <HAL_RTC_SetAlarm_IT+0x206>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004670:	f7fd fcea 	bl	8002048 <HAL_GetTick>
 8004674:	0002      	movs	r2, r0
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	1ad2      	subs	r2, r2, r3
 800467a:	23fa      	movs	r3, #250	; 0xfa
 800467c:	009b      	lsls	r3, r3, #2
 800467e:	429a      	cmp	r2, r3
 8004680:	d90d      	bls.n	800469e <HAL_RTC_SetAlarm_IT+0x206>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	22ff      	movs	r2, #255	; 0xff
 8004688:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	2221      	movs	r2, #33	; 0x21
 800468e:	2103      	movs	r1, #3
 8004690:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	2220      	movs	r2, #32
 8004696:	2100      	movs	r1, #0
 8004698:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800469a:	2303      	movs	r3, #3
 800469c:	e03a      	b.n	8004714 <HAL_RTC_SetAlarm_IT+0x27c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	68db      	ldr	r3, [r3, #12]
 80046a4:	2202      	movs	r2, #2
 80046a6:	4013      	ands	r3, r2
 80046a8:	d0e2      	beq.n	8004670 <HAL_RTC_SetAlarm_IT+0x1d8>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	69fa      	ldr	r2, [r7, #28]
 80046b0:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	69ba      	ldr	r2, [r7, #24]
 80046b8:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	689a      	ldr	r2, [r3, #8]
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	2180      	movs	r1, #128	; 0x80
 80046c6:	0089      	lsls	r1, r1, #2
 80046c8:	430a      	orrs	r2, r1
 80046ca:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	689a      	ldr	r2, [r3, #8]
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	2180      	movs	r1, #128	; 0x80
 80046d8:	0189      	lsls	r1, r1, #6
 80046da:	430a      	orrs	r2, r1
 80046dc:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80046de:	4b13      	ldr	r3, [pc, #76]	; (800472c <HAL_RTC_SetAlarm_IT+0x294>)
 80046e0:	681a      	ldr	r2, [r3, #0]
 80046e2:	4b12      	ldr	r3, [pc, #72]	; (800472c <HAL_RTC_SetAlarm_IT+0x294>)
 80046e4:	2180      	movs	r1, #128	; 0x80
 80046e6:	0289      	lsls	r1, r1, #10
 80046e8:	430a      	orrs	r2, r1
 80046ea:	601a      	str	r2, [r3, #0]

  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 80046ec:	4b0f      	ldr	r3, [pc, #60]	; (800472c <HAL_RTC_SetAlarm_IT+0x294>)
 80046ee:	689a      	ldr	r2, [r3, #8]
 80046f0:	4b0e      	ldr	r3, [pc, #56]	; (800472c <HAL_RTC_SetAlarm_IT+0x294>)
 80046f2:	2180      	movs	r1, #128	; 0x80
 80046f4:	0289      	lsls	r1, r1, #10
 80046f6:	430a      	orrs	r2, r1
 80046f8:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	22ff      	movs	r2, #255	; 0xff
 8004700:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2221      	movs	r2, #33	; 0x21
 8004706:	2101      	movs	r1, #1
 8004708:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2220      	movs	r2, #32
 800470e:	2100      	movs	r1, #0
 8004710:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004712:	2300      	movs	r3, #0
}
 8004714:	0018      	movs	r0, r3
 8004716:	46bd      	mov	sp, r7
 8004718:	b009      	add	sp, #36	; 0x24
 800471a:	bd90      	pop	{r4, r7, pc}
 800471c:	fffffeff 	.word	0xfffffeff
 8004720:	fffffe7f 	.word	0xfffffe7f
 8004724:	fffffdff 	.word	0xfffffdff
 8004728:	fffffd7f 	.word	0xfffffd7f
 800472c:	40010400 	.word	0x40010400

08004730 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b084      	sub	sp, #16
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
 8004738:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2220      	movs	r2, #32
 800473e:	5c9b      	ldrb	r3, [r3, r2]
 8004740:	2b01      	cmp	r3, #1
 8004742:	d101      	bne.n	8004748 <HAL_RTC_DeactivateAlarm+0x18>
 8004744:	2302      	movs	r3, #2
 8004746:	e086      	b.n	8004856 <HAL_RTC_DeactivateAlarm+0x126>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2220      	movs	r2, #32
 800474c:	2101      	movs	r1, #1
 800474e:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2221      	movs	r2, #33	; 0x21
 8004754:	2102      	movs	r1, #2
 8004756:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	22ca      	movs	r2, #202	; 0xca
 800475e:	625a      	str	r2, [r3, #36]	; 0x24
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	2253      	movs	r2, #83	; 0x53
 8004766:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 8004768:	683a      	ldr	r2, [r7, #0]
 800476a:	2380      	movs	r3, #128	; 0x80
 800476c:	005b      	lsls	r3, r3, #1
 800476e:	429a      	cmp	r2, r3
 8004770:	d132      	bne.n	80047d8 <HAL_RTC_DeactivateAlarm+0xa8>
  {
    /* AlarmA */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	689a      	ldr	r2, [r3, #8]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4938      	ldr	r1, [pc, #224]	; (8004860 <HAL_RTC_DeactivateAlarm+0x130>)
 800477e:	400a      	ands	r2, r1
 8004780:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	689a      	ldr	r2, [r3, #8]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4935      	ldr	r1, [pc, #212]	; (8004864 <HAL_RTC_DeactivateAlarm+0x134>)
 800478e:	400a      	ands	r2, r1
 8004790:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 8004792:	f7fd fc59 	bl	8002048 <HAL_GetTick>
 8004796:	0003      	movs	r3, r0
 8004798:	60fb      	str	r3, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800479a:	e016      	b.n	80047ca <HAL_RTC_DeactivateAlarm+0x9a>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800479c:	f7fd fc54 	bl	8002048 <HAL_GetTick>
 80047a0:	0002      	movs	r2, r0
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	1ad2      	subs	r2, r2, r3
 80047a6:	23fa      	movs	r3, #250	; 0xfa
 80047a8:	009b      	lsls	r3, r3, #2
 80047aa:	429a      	cmp	r2, r3
 80047ac:	d90d      	bls.n	80047ca <HAL_RTC_DeactivateAlarm+0x9a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	22ff      	movs	r2, #255	; 0xff
 80047b4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2221      	movs	r2, #33	; 0x21
 80047ba:	2103      	movs	r1, #3
 80047bc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2220      	movs	r2, #32
 80047c2:	2100      	movs	r1, #0
 80047c4:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80047c6:	2303      	movs	r3, #3
 80047c8:	e045      	b.n	8004856 <HAL_RTC_DeactivateAlarm+0x126>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	68db      	ldr	r3, [r3, #12]
 80047d0:	2201      	movs	r2, #1
 80047d2:	4013      	ands	r3, r2
 80047d4:	d0e2      	beq.n	800479c <HAL_RTC_DeactivateAlarm+0x6c>
 80047d6:	e031      	b.n	800483c <HAL_RTC_DeactivateAlarm+0x10c>
    }
  }
  else
  {
    /* AlarmB */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	689a      	ldr	r2, [r3, #8]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4921      	ldr	r1, [pc, #132]	; (8004868 <HAL_RTC_DeactivateAlarm+0x138>)
 80047e4:	400a      	ands	r2, r1
 80047e6:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	689a      	ldr	r2, [r3, #8]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	491e      	ldr	r1, [pc, #120]	; (800486c <HAL_RTC_DeactivateAlarm+0x13c>)
 80047f4:	400a      	ands	r2, r1
 80047f6:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 80047f8:	f7fd fc26 	bl	8002048 <HAL_GetTick>
 80047fc:	0003      	movs	r3, r0
 80047fe:	60fb      	str	r3, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8004800:	e016      	b.n	8004830 <HAL_RTC_DeactivateAlarm+0x100>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004802:	f7fd fc21 	bl	8002048 <HAL_GetTick>
 8004806:	0002      	movs	r2, r0
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	1ad2      	subs	r2, r2, r3
 800480c:	23fa      	movs	r3, #250	; 0xfa
 800480e:	009b      	lsls	r3, r3, #2
 8004810:	429a      	cmp	r2, r3
 8004812:	d90d      	bls.n	8004830 <HAL_RTC_DeactivateAlarm+0x100>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	22ff      	movs	r2, #255	; 0xff
 800481a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2221      	movs	r2, #33	; 0x21
 8004820:	2103      	movs	r1, #3
 8004822:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2220      	movs	r2, #32
 8004828:	2100      	movs	r1, #0
 800482a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800482c:	2303      	movs	r3, #3
 800482e:	e012      	b.n	8004856 <HAL_RTC_DeactivateAlarm+0x126>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	68db      	ldr	r3, [r3, #12]
 8004836:	2202      	movs	r2, #2
 8004838:	4013      	ands	r3, r2
 800483a:	d0e2      	beq.n	8004802 <HAL_RTC_DeactivateAlarm+0xd2>
      }
    }
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	22ff      	movs	r2, #255	; 0xff
 8004842:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2221      	movs	r2, #33	; 0x21
 8004848:	2101      	movs	r1, #1
 800484a:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2220      	movs	r2, #32
 8004850:	2100      	movs	r1, #0
 8004852:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004854:	2300      	movs	r3, #0
}
 8004856:	0018      	movs	r0, r3
 8004858:	46bd      	mov	sp, r7
 800485a:	b004      	add	sp, #16
 800485c:	bd80      	pop	{r7, pc}
 800485e:	46c0      	nop			; (mov r8, r8)
 8004860:	fffffeff 	.word	0xfffffeff
 8004864:	ffffefff 	.word	0xffffefff
 8004868:	fffffdff 	.word	0xfffffdff
 800486c:	ffffdfff 	.word	0xffffdfff

08004870 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b082      	sub	sp, #8
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	689a      	ldr	r2, [r3, #8]
 800487e:	2380      	movs	r3, #128	; 0x80
 8004880:	015b      	lsls	r3, r3, #5
 8004882:	4013      	ands	r3, r2
 8004884:	d014      	beq.n	80048b0 <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	68da      	ldr	r2, [r3, #12]
 800488c:	2380      	movs	r3, #128	; 0x80
 800488e:	005b      	lsls	r3, r3, #1
 8004890:	4013      	ands	r3, r2
 8004892:	d00d      	beq.n	80048b0 <HAL_RTC_AlarmIRQHandler+0x40>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	0018      	movs	r0, r3
 8004898:	f7fc fb18 	bl	8000ecc <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	68db      	ldr	r3, [r3, #12]
 80048a2:	22ff      	movs	r2, #255	; 0xff
 80048a4:	401a      	ands	r2, r3
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4915      	ldr	r1, [pc, #84]	; (8004900 <HAL_RTC_AlarmIRQHandler+0x90>)
 80048ac:	430a      	orrs	r2, r1
 80048ae:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	689a      	ldr	r2, [r3, #8]
 80048b6:	2380      	movs	r3, #128	; 0x80
 80048b8:	019b      	lsls	r3, r3, #6
 80048ba:	4013      	ands	r3, r2
 80048bc:	d014      	beq.n	80048e8 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	68da      	ldr	r2, [r3, #12]
 80048c4:	2380      	movs	r3, #128	; 0x80
 80048c6:	009b      	lsls	r3, r3, #2
 80048c8:	4013      	ands	r3, r2
 80048ca:	d00d      	beq.n	80048e8 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* AlarmB callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	0018      	movs	r0, r3
 80048d0:	f000 f8b3 	bl	8004a3a <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	68db      	ldr	r3, [r3, #12]
 80048da:	22ff      	movs	r2, #255	; 0xff
 80048dc:	401a      	ands	r2, r3
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4908      	ldr	r1, [pc, #32]	; (8004904 <HAL_RTC_AlarmIRQHandler+0x94>)
 80048e4:	430a      	orrs	r2, r1
 80048e6:	60da      	str	r2, [r3, #12]
    }
  }
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80048e8:	4b07      	ldr	r3, [pc, #28]	; (8004908 <HAL_RTC_AlarmIRQHandler+0x98>)
 80048ea:	2280      	movs	r2, #128	; 0x80
 80048ec:	0292      	lsls	r2, r2, #10
 80048ee:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2221      	movs	r2, #33	; 0x21
 80048f4:	2101      	movs	r1, #1
 80048f6:	5499      	strb	r1, [r3, r2]
}
 80048f8:	46c0      	nop			; (mov r8, r8)
 80048fa:	46bd      	mov	sp, r7
 80048fc:	b002      	add	sp, #8
 80048fe:	bd80      	pop	{r7, pc}
 8004900:	fffffe7f 	.word	0xfffffe7f
 8004904:	fffffd7f 	.word	0xfffffd7f
 8004908:	40010400 	.word	0x40010400

0800490c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b084      	sub	sp, #16
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	68da      	ldr	r2, [r3, #12]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	21a0      	movs	r1, #160	; 0xa0
 8004920:	438a      	bics	r2, r1
 8004922:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8004924:	f7fd fb90 	bl	8002048 <HAL_GetTick>
 8004928:	0003      	movs	r3, r0
 800492a:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800492c:	e00a      	b.n	8004944 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800492e:	f7fd fb8b 	bl	8002048 <HAL_GetTick>
 8004932:	0002      	movs	r2, r0
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	1ad2      	subs	r2, r2, r3
 8004938:	23fa      	movs	r3, #250	; 0xfa
 800493a:	009b      	lsls	r3, r3, #2
 800493c:	429a      	cmp	r2, r3
 800493e:	d901      	bls.n	8004944 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8004940:	2303      	movs	r3, #3
 8004942:	e006      	b.n	8004952 <HAL_RTC_WaitForSynchro+0x46>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	68db      	ldr	r3, [r3, #12]
 800494a:	2220      	movs	r2, #32
 800494c:	4013      	ands	r3, r2
 800494e:	d0ee      	beq.n	800492e <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 8004950:	2300      	movs	r3, #0
}
 8004952:	0018      	movs	r0, r3
 8004954:	46bd      	mov	sp, r7
 8004956:	b004      	add	sp, #16
 8004958:	bd80      	pop	{r7, pc}

0800495a <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800495a:	b580      	push	{r7, lr}
 800495c:	b084      	sub	sp, #16
 800495e:	af00      	add	r7, sp, #0
 8004960:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	68db      	ldr	r3, [r3, #12]
 8004968:	2240      	movs	r2, #64	; 0x40
 800496a:	4013      	ands	r3, r2
 800496c:	d11a      	bne.n	80049a4 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	2201      	movs	r2, #1
 8004974:	4252      	negs	r2, r2
 8004976:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004978:	f7fd fb66 	bl	8002048 <HAL_GetTick>
 800497c:	0003      	movs	r3, r0
 800497e:	60fb      	str	r3, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004980:	e00a      	b.n	8004998 <RTC_EnterInitMode+0x3e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004982:	f7fd fb61 	bl	8002048 <HAL_GetTick>
 8004986:	0002      	movs	r2, r0
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	1ad2      	subs	r2, r2, r3
 800498c:	23fa      	movs	r3, #250	; 0xfa
 800498e:	009b      	lsls	r3, r3, #2
 8004990:	429a      	cmp	r2, r3
 8004992:	d901      	bls.n	8004998 <RTC_EnterInitMode+0x3e>
      {
        return HAL_TIMEOUT;
 8004994:	2303      	movs	r3, #3
 8004996:	e006      	b.n	80049a6 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	68db      	ldr	r3, [r3, #12]
 800499e:	2240      	movs	r2, #64	; 0x40
 80049a0:	4013      	ands	r3, r2
 80049a2:	d0ee      	beq.n	8004982 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 80049a4:	2300      	movs	r3, #0
}
 80049a6:	0018      	movs	r0, r3
 80049a8:	46bd      	mov	sp, r7
 80049aa:	b004      	add	sp, #16
 80049ac:	bd80      	pop	{r7, pc}

080049ae <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80049ae:	b580      	push	{r7, lr}
 80049b0:	b084      	sub	sp, #16
 80049b2:	af00      	add	r7, sp, #0
 80049b4:	0002      	movs	r2, r0
 80049b6:	1dfb      	adds	r3, r7, #7
 80049b8:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 80049ba:	2300      	movs	r3, #0
 80049bc:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 80049be:	230b      	movs	r3, #11
 80049c0:	18fb      	adds	r3, r7, r3
 80049c2:	1dfa      	adds	r2, r7, #7
 80049c4:	7812      	ldrb	r2, [r2, #0]
 80049c6:	701a      	strb	r2, [r3, #0]

  while (Param >= 10U)
 80049c8:	e008      	b.n	80049dc <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	3301      	adds	r3, #1
 80049ce:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 80049d0:	220b      	movs	r2, #11
 80049d2:	18bb      	adds	r3, r7, r2
 80049d4:	18ba      	adds	r2, r7, r2
 80049d6:	7812      	ldrb	r2, [r2, #0]
 80049d8:	3a0a      	subs	r2, #10
 80049da:	701a      	strb	r2, [r3, #0]
  while (Param >= 10U)
 80049dc:	230b      	movs	r3, #11
 80049de:	18fb      	adds	r3, r7, r3
 80049e0:	781b      	ldrb	r3, [r3, #0]
 80049e2:	2b09      	cmp	r3, #9
 80049e4:	d8f1      	bhi.n	80049ca <RTC_ByteToBcd2+0x1c>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	b2db      	uxtb	r3, r3
 80049ea:	011b      	lsls	r3, r3, #4
 80049ec:	b2da      	uxtb	r2, r3
 80049ee:	230b      	movs	r3, #11
 80049f0:	18fb      	adds	r3, r7, r3
 80049f2:	781b      	ldrb	r3, [r3, #0]
 80049f4:	4313      	orrs	r3, r2
 80049f6:	b2db      	uxtb	r3, r3
}
 80049f8:	0018      	movs	r0, r3
 80049fa:	46bd      	mov	sp, r7
 80049fc:	b004      	add	sp, #16
 80049fe:	bd80      	pop	{r7, pc}

08004a00 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b084      	sub	sp, #16
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	0002      	movs	r2, r0
 8004a08:	1dfb      	adds	r3, r7, #7
 8004a0a:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8004a0c:	1dfb      	adds	r3, r7, #7
 8004a0e:	781b      	ldrb	r3, [r3, #0]
 8004a10:	091b      	lsrs	r3, r3, #4
 8004a12:	b2db      	uxtb	r3, r3
 8004a14:	001a      	movs	r2, r3
 8004a16:	0013      	movs	r3, r2
 8004a18:	009b      	lsls	r3, r3, #2
 8004a1a:	189b      	adds	r3, r3, r2
 8004a1c:	005b      	lsls	r3, r3, #1
 8004a1e:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	b2da      	uxtb	r2, r3
 8004a24:	1dfb      	adds	r3, r7, #7
 8004a26:	781b      	ldrb	r3, [r3, #0]
 8004a28:	210f      	movs	r1, #15
 8004a2a:	400b      	ands	r3, r1
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	18d3      	adds	r3, r2, r3
 8004a30:	b2db      	uxtb	r3, r3
}
 8004a32:	0018      	movs	r0, r3
 8004a34:	46bd      	mov	sp, r7
 8004a36:	b004      	add	sp, #16
 8004a38:	bd80      	pop	{r7, pc}

08004a3a <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8004a3a:	b580      	push	{r7, lr}
 8004a3c:	b082      	sub	sp, #8
 8004a3e:	af00      	add	r7, sp, #0
 8004a40:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8004a42:	46c0      	nop			; (mov r8, r8)
 8004a44:	46bd      	mov	sp, r7
 8004a46:	b002      	add	sp, #8
 8004a48:	bd80      	pop	{r7, pc}
	...

08004a4c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b082      	sub	sp, #8
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d101      	bne.n	8004a5e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e059      	b.n	8004b12 <HAL_SPI_Init+0xc6>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2200      	movs	r2, #0
 8004a62:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2251      	movs	r2, #81	; 0x51
 8004a68:	5c9b      	ldrb	r3, [r3, r2]
 8004a6a:	b2db      	uxtb	r3, r3
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d107      	bne.n	8004a80 <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2250      	movs	r2, #80	; 0x50
 8004a74:	2100      	movs	r1, #0
 8004a76:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	0018      	movs	r0, r3
 8004a7c:	f7fd f8f6 	bl	8001c6c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2251      	movs	r2, #81	; 0x51
 8004a84:	2102      	movs	r1, #2
 8004a86:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	2140      	movs	r1, #64	; 0x40
 8004a94:	438a      	bics	r2, r1
 8004a96:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	685a      	ldr	r2, [r3, #4]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	689b      	ldr	r3, [r3, #8]
 8004aa0:	431a      	orrs	r2, r3
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	68db      	ldr	r3, [r3, #12]
 8004aa6:	431a      	orrs	r2, r3
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	691b      	ldr	r3, [r3, #16]
 8004aac:	431a      	orrs	r2, r3
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	695b      	ldr	r3, [r3, #20]
 8004ab2:	431a      	orrs	r2, r3
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6999      	ldr	r1, [r3, #24]
 8004ab8:	2380      	movs	r3, #128	; 0x80
 8004aba:	009b      	lsls	r3, r3, #2
 8004abc:	400b      	ands	r3, r1
 8004abe:	431a      	orrs	r2, r3
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	69db      	ldr	r3, [r3, #28]
 8004ac4:	431a      	orrs	r2, r3
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6a1b      	ldr	r3, [r3, #32]
 8004aca:	431a      	orrs	r2, r3
 8004acc:	0011      	movs	r1, r2
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	430a      	orrs	r2, r1
 8004ad8:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	699b      	ldr	r3, [r3, #24]
 8004ade:	0c1b      	lsrs	r3, r3, #16
 8004ae0:	2204      	movs	r2, #4
 8004ae2:	4013      	ands	r3, r2
 8004ae4:	0019      	movs	r1, r3
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	430a      	orrs	r2, r1
 8004af0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	69da      	ldr	r2, [r3, #28]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4907      	ldr	r1, [pc, #28]	; (8004b1c <HAL_SPI_Init+0xd0>)
 8004afe:	400a      	ands	r2, r1
 8004b00:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2200      	movs	r2, #0
 8004b06:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2251      	movs	r2, #81	; 0x51
 8004b0c:	2101      	movs	r1, #1
 8004b0e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004b10:	2300      	movs	r3, #0
}
 8004b12:	0018      	movs	r0, r3
 8004b14:	46bd      	mov	sp, r7
 8004b16:	b002      	add	sp, #8
 8004b18:	bd80      	pop	{r7, pc}
 8004b1a:	46c0      	nop			; (mov r8, r8)
 8004b1c:	fffff7ff 	.word	0xfffff7ff

08004b20 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b088      	sub	sp, #32
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	60f8      	str	r0, [r7, #12]
 8004b28:	60b9      	str	r1, [r7, #8]
 8004b2a:	603b      	str	r3, [r7, #0]
 8004b2c:	1dbb      	adds	r3, r7, #6
 8004b2e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004b30:	231f      	movs	r3, #31
 8004b32:	18fb      	adds	r3, r7, r3
 8004b34:	2200      	movs	r2, #0
 8004b36:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	2250      	movs	r2, #80	; 0x50
 8004b3c:	5c9b      	ldrb	r3, [r3, r2]
 8004b3e:	2b01      	cmp	r3, #1
 8004b40:	d101      	bne.n	8004b46 <HAL_SPI_Transmit+0x26>
 8004b42:	2302      	movs	r3, #2
 8004b44:	e136      	b.n	8004db4 <HAL_SPI_Transmit+0x294>
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2250      	movs	r2, #80	; 0x50
 8004b4a:	2101      	movs	r1, #1
 8004b4c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b4e:	f7fd fa7b 	bl	8002048 <HAL_GetTick>
 8004b52:	0003      	movs	r3, r0
 8004b54:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004b56:	2316      	movs	r3, #22
 8004b58:	18fb      	adds	r3, r7, r3
 8004b5a:	1dba      	adds	r2, r7, #6
 8004b5c:	8812      	ldrh	r2, [r2, #0]
 8004b5e:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	2251      	movs	r2, #81	; 0x51
 8004b64:	5c9b      	ldrb	r3, [r3, r2]
 8004b66:	b2db      	uxtb	r3, r3
 8004b68:	2b01      	cmp	r3, #1
 8004b6a:	d004      	beq.n	8004b76 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8004b6c:	231f      	movs	r3, #31
 8004b6e:	18fb      	adds	r3, r7, r3
 8004b70:	2202      	movs	r2, #2
 8004b72:	701a      	strb	r2, [r3, #0]
    goto error;
 8004b74:	e113      	b.n	8004d9e <HAL_SPI_Transmit+0x27e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d003      	beq.n	8004b84 <HAL_SPI_Transmit+0x64>
 8004b7c:	1dbb      	adds	r3, r7, #6
 8004b7e:	881b      	ldrh	r3, [r3, #0]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d104      	bne.n	8004b8e <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8004b84:	231f      	movs	r3, #31
 8004b86:	18fb      	adds	r3, r7, r3
 8004b88:	2201      	movs	r2, #1
 8004b8a:	701a      	strb	r2, [r3, #0]
    goto error;
 8004b8c:	e107      	b.n	8004d9e <HAL_SPI_Transmit+0x27e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2251      	movs	r2, #81	; 0x51
 8004b92:	2103      	movs	r1, #3
 8004b94:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	68ba      	ldr	r2, [r7, #8]
 8004ba0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	1dba      	adds	r2, r7, #6
 8004ba6:	8812      	ldrh	r2, [r2, #0]
 8004ba8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	1dba      	adds	r2, r7, #6
 8004bae:	8812      	ldrh	r2, [r2, #0]
 8004bb0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	689a      	ldr	r2, [r3, #8]
 8004bd4:	2380      	movs	r3, #128	; 0x80
 8004bd6:	021b      	lsls	r3, r3, #8
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	d108      	bne.n	8004bee <HAL_SPI_Transmit+0xce>
  {
    SPI_1LINE_TX(hspi);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	681a      	ldr	r2, [r3, #0]
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	2180      	movs	r1, #128	; 0x80
 8004be8:	01c9      	lsls	r1, r1, #7
 8004bea:	430a      	orrs	r2, r1
 8004bec:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	2240      	movs	r2, #64	; 0x40
 8004bf6:	4013      	ands	r3, r2
 8004bf8:	2b40      	cmp	r3, #64	; 0x40
 8004bfa:	d007      	beq.n	8004c0c <HAL_SPI_Transmit+0xec>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	681a      	ldr	r2, [r3, #0]
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	2140      	movs	r1, #64	; 0x40
 8004c08:	430a      	orrs	r2, r1
 8004c0a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	68da      	ldr	r2, [r3, #12]
 8004c10:	2380      	movs	r3, #128	; 0x80
 8004c12:	011b      	lsls	r3, r3, #4
 8004c14:	429a      	cmp	r2, r3
 8004c16:	d14e      	bne.n	8004cb6 <HAL_SPI_Transmit+0x196>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d004      	beq.n	8004c2a <HAL_SPI_Transmit+0x10a>
 8004c20:	2316      	movs	r3, #22
 8004c22:	18fb      	adds	r3, r7, r3
 8004c24:	881b      	ldrh	r3, [r3, #0]
 8004c26:	2b01      	cmp	r3, #1
 8004c28:	d13f      	bne.n	8004caa <HAL_SPI_Transmit+0x18a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c2e:	881a      	ldrh	r2, [r3, #0]
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c3a:	1c9a      	adds	r2, r3, #2
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c44:	b29b      	uxth	r3, r3
 8004c46:	3b01      	subs	r3, #1
 8004c48:	b29a      	uxth	r2, r3
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004c4e:	e02c      	b.n	8004caa <HAL_SPI_Transmit+0x18a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	689b      	ldr	r3, [r3, #8]
 8004c56:	2202      	movs	r2, #2
 8004c58:	4013      	ands	r3, r2
 8004c5a:	2b02      	cmp	r3, #2
 8004c5c:	d112      	bne.n	8004c84 <HAL_SPI_Transmit+0x164>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c62:	881a      	ldrh	r2, [r3, #0]
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c6e:	1c9a      	adds	r2, r3, #2
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c78:	b29b      	uxth	r3, r3
 8004c7a:	3b01      	subs	r3, #1
 8004c7c:	b29a      	uxth	r2, r3
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	86da      	strh	r2, [r3, #54]	; 0x36
 8004c82:	e012      	b.n	8004caa <HAL_SPI_Transmit+0x18a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c84:	f7fd f9e0 	bl	8002048 <HAL_GetTick>
 8004c88:	0002      	movs	r2, r0
 8004c8a:	69bb      	ldr	r3, [r7, #24]
 8004c8c:	1ad3      	subs	r3, r2, r3
 8004c8e:	683a      	ldr	r2, [r7, #0]
 8004c90:	429a      	cmp	r2, r3
 8004c92:	d802      	bhi.n	8004c9a <HAL_SPI_Transmit+0x17a>
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	3301      	adds	r3, #1
 8004c98:	d102      	bne.n	8004ca0 <HAL_SPI_Transmit+0x180>
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d104      	bne.n	8004caa <HAL_SPI_Transmit+0x18a>
        {
          errorcode = HAL_TIMEOUT;
 8004ca0:	231f      	movs	r3, #31
 8004ca2:	18fb      	adds	r3, r7, r3
 8004ca4:	2203      	movs	r2, #3
 8004ca6:	701a      	strb	r2, [r3, #0]
          goto error;
 8004ca8:	e079      	b.n	8004d9e <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004cae:	b29b      	uxth	r3, r3
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d1cd      	bne.n	8004c50 <HAL_SPI_Transmit+0x130>
 8004cb4:	e04f      	b.n	8004d56 <HAL_SPI_Transmit+0x236>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d004      	beq.n	8004cc8 <HAL_SPI_Transmit+0x1a8>
 8004cbe:	2316      	movs	r3, #22
 8004cc0:	18fb      	adds	r3, r7, r3
 8004cc2:	881b      	ldrh	r3, [r3, #0]
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	d141      	bne.n	8004d4c <HAL_SPI_Transmit+0x22c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	330c      	adds	r3, #12
 8004cd2:	7812      	ldrb	r2, [r2, #0]
 8004cd4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cda:	1c5a      	adds	r2, r3, #1
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ce4:	b29b      	uxth	r3, r3
 8004ce6:	3b01      	subs	r3, #1
 8004ce8:	b29a      	uxth	r2, r3
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004cee:	e02d      	b.n	8004d4c <HAL_SPI_Transmit+0x22c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	689b      	ldr	r3, [r3, #8]
 8004cf6:	2202      	movs	r2, #2
 8004cf8:	4013      	ands	r3, r2
 8004cfa:	2b02      	cmp	r3, #2
 8004cfc:	d113      	bne.n	8004d26 <HAL_SPI_Transmit+0x206>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	330c      	adds	r3, #12
 8004d08:	7812      	ldrb	r2, [r2, #0]
 8004d0a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d10:	1c5a      	adds	r2, r3, #1
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d1a:	b29b      	uxth	r3, r3
 8004d1c:	3b01      	subs	r3, #1
 8004d1e:	b29a      	uxth	r2, r3
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	86da      	strh	r2, [r3, #54]	; 0x36
 8004d24:	e012      	b.n	8004d4c <HAL_SPI_Transmit+0x22c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d26:	f7fd f98f 	bl	8002048 <HAL_GetTick>
 8004d2a:	0002      	movs	r2, r0
 8004d2c:	69bb      	ldr	r3, [r7, #24]
 8004d2e:	1ad3      	subs	r3, r2, r3
 8004d30:	683a      	ldr	r2, [r7, #0]
 8004d32:	429a      	cmp	r2, r3
 8004d34:	d802      	bhi.n	8004d3c <HAL_SPI_Transmit+0x21c>
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	3301      	adds	r3, #1
 8004d3a:	d102      	bne.n	8004d42 <HAL_SPI_Transmit+0x222>
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d104      	bne.n	8004d4c <HAL_SPI_Transmit+0x22c>
        {
          errorcode = HAL_TIMEOUT;
 8004d42:	231f      	movs	r3, #31
 8004d44:	18fb      	adds	r3, r7, r3
 8004d46:	2203      	movs	r2, #3
 8004d48:	701a      	strb	r2, [r3, #0]
          goto error;
 8004d4a:	e028      	b.n	8004d9e <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d50:	b29b      	uxth	r3, r3
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d1cc      	bne.n	8004cf0 <HAL_SPI_Transmit+0x1d0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004d56:	69ba      	ldr	r2, [r7, #24]
 8004d58:	6839      	ldr	r1, [r7, #0]
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	0018      	movs	r0, r3
 8004d5e:	f000 fb0f 	bl	8005380 <SPI_EndRxTxTransaction>
 8004d62:	1e03      	subs	r3, r0, #0
 8004d64:	d002      	beq.n	8004d6c <HAL_SPI_Transmit+0x24c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	2220      	movs	r2, #32
 8004d6a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d10a      	bne.n	8004d8a <HAL_SPI_Transmit+0x26a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004d74:	2300      	movs	r3, #0
 8004d76:	613b      	str	r3, [r7, #16]
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	68db      	ldr	r3, [r3, #12]
 8004d7e:	613b      	str	r3, [r7, #16]
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	613b      	str	r3, [r7, #16]
 8004d88:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d004      	beq.n	8004d9c <HAL_SPI_Transmit+0x27c>
  {
    errorcode = HAL_ERROR;
 8004d92:	231f      	movs	r3, #31
 8004d94:	18fb      	adds	r3, r7, r3
 8004d96:	2201      	movs	r2, #1
 8004d98:	701a      	strb	r2, [r3, #0]
 8004d9a:	e000      	b.n	8004d9e <HAL_SPI_Transmit+0x27e>
  }

error:
 8004d9c:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	2251      	movs	r2, #81	; 0x51
 8004da2:	2101      	movs	r1, #1
 8004da4:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2250      	movs	r2, #80	; 0x50
 8004daa:	2100      	movs	r1, #0
 8004dac:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8004dae:	231f      	movs	r3, #31
 8004db0:	18fb      	adds	r3, r7, r3
 8004db2:	781b      	ldrb	r3, [r3, #0]
}
 8004db4:	0018      	movs	r0, r3
 8004db6:	46bd      	mov	sp, r7
 8004db8:	b008      	add	sp, #32
 8004dba:	bd80      	pop	{r7, pc}

08004dbc <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b086      	sub	sp, #24
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	60f8      	str	r0, [r7, #12]
 8004dc4:	60b9      	str	r1, [r7, #8]
 8004dc6:	1dbb      	adds	r3, r7, #6
 8004dc8:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004dca:	2317      	movs	r3, #23
 8004dcc:	18fb      	adds	r3, r7, r3
 8004dce:	2200      	movs	r2, #0
 8004dd0:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2250      	movs	r2, #80	; 0x50
 8004dd6:	5c9b      	ldrb	r3, [r3, r2]
 8004dd8:	2b01      	cmp	r3, #1
 8004dda:	d101      	bne.n	8004de0 <HAL_SPI_Transmit_DMA+0x24>
 8004ddc:	2302      	movs	r3, #2
 8004dde:	e09f      	b.n	8004f20 <HAL_SPI_Transmit_DMA+0x164>
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	2250      	movs	r2, #80	; 0x50
 8004de4:	2101      	movs	r1, #1
 8004de6:	5499      	strb	r1, [r3, r2]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	2251      	movs	r2, #81	; 0x51
 8004dec:	5c9b      	ldrb	r3, [r3, r2]
 8004dee:	b2db      	uxtb	r3, r3
 8004df0:	2b01      	cmp	r3, #1
 8004df2:	d004      	beq.n	8004dfe <HAL_SPI_Transmit_DMA+0x42>
  {
    errorcode = HAL_BUSY;
 8004df4:	2317      	movs	r3, #23
 8004df6:	18fb      	adds	r3, r7, r3
 8004df8:	2202      	movs	r2, #2
 8004dfa:	701a      	strb	r2, [r3, #0]
    goto error;
 8004dfc:	e089      	b.n	8004f12 <HAL_SPI_Transmit_DMA+0x156>
  }

  if ((pData == NULL) || (Size == 0U))
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d003      	beq.n	8004e0c <HAL_SPI_Transmit_DMA+0x50>
 8004e04:	1dbb      	adds	r3, r7, #6
 8004e06:	881b      	ldrh	r3, [r3, #0]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d104      	bne.n	8004e16 <HAL_SPI_Transmit_DMA+0x5a>
  {
    errorcode = HAL_ERROR;
 8004e0c:	2317      	movs	r3, #23
 8004e0e:	18fb      	adds	r3, r7, r3
 8004e10:	2201      	movs	r2, #1
 8004e12:	701a      	strb	r2, [r3, #0]
    goto error;
 8004e14:	e07d      	b.n	8004f12 <HAL_SPI_Transmit_DMA+0x156>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2251      	movs	r2, #81	; 0x51
 8004e1a:	2103      	movs	r1, #3
 8004e1c:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2200      	movs	r2, #0
 8004e22:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	68ba      	ldr	r2, [r7, #8]
 8004e28:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	1dba      	adds	r2, r7, #6
 8004e2e:	8812      	ldrh	r2, [r2, #0]
 8004e30:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	1dba      	adds	r2, r7, #6
 8004e36:	8812      	ldrh	r2, [r2, #0]
 8004e38:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	2200      	movs	r2, #0
 8004e44:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	2200      	movs	r2, #0
 8004e56:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	689a      	ldr	r2, [r3, #8]
 8004e5c:	2380      	movs	r3, #128	; 0x80
 8004e5e:	021b      	lsls	r3, r3, #8
 8004e60:	429a      	cmp	r2, r3
 8004e62:	d108      	bne.n	8004e76 <HAL_SPI_Transmit_DMA+0xba>
  {
    SPI_1LINE_TX(hspi);
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	681a      	ldr	r2, [r3, #0]
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	2180      	movs	r1, #128	; 0x80
 8004e70:	01c9      	lsls	r1, r1, #7
 8004e72:	430a      	orrs	r2, r1
 8004e74:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e7a:	4a2b      	ldr	r2, [pc, #172]	; (8004f28 <HAL_SPI_Transmit_DMA+0x16c>)
 8004e7c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e82:	4a2a      	ldr	r2, [pc, #168]	; (8004f2c <HAL_SPI_Transmit_DMA+0x170>)
 8004e84:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e8a:	4a29      	ldr	r2, [pc, #164]	; (8004f30 <HAL_SPI_Transmit_DMA+0x174>)
 8004e8c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e92:	2200      	movs	r2, #0
 8004e94:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount))
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e9e:	0019      	movs	r1, r3
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	330c      	adds	r3, #12
 8004ea6:	001a      	movs	r2, r3
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004eac:	b29b      	uxth	r3, r3
 8004eae:	f7fd fc77 	bl	80027a0 <HAL_DMA_Start_IT>
 8004eb2:	1e03      	subs	r3, r0, #0
 8004eb4:	d00e      	beq.n	8004ed4 <HAL_SPI_Transmit_DMA+0x118>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eba:	2210      	movs	r2, #16
 8004ebc:	431a      	orrs	r2, r3
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8004ec2:	2317      	movs	r3, #23
 8004ec4:	18fb      	adds	r3, r7, r3
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	701a      	strb	r2, [r3, #0]

    hspi->State = HAL_SPI_STATE_READY;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	2251      	movs	r2, #81	; 0x51
 8004ece:	2101      	movs	r1, #1
 8004ed0:	5499      	strb	r1, [r3, r2]
    goto error;
 8004ed2:	e01e      	b.n	8004f12 <HAL_SPI_Transmit_DMA+0x156>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	2240      	movs	r2, #64	; 0x40
 8004edc:	4013      	ands	r3, r2
 8004ede:	2b40      	cmp	r3, #64	; 0x40
 8004ee0:	d007      	beq.n	8004ef2 <HAL_SPI_Transmit_DMA+0x136>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	681a      	ldr	r2, [r3, #0]
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	2140      	movs	r1, #64	; 0x40
 8004eee:	430a      	orrs	r2, r1
 8004ef0:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	685a      	ldr	r2, [r3, #4]
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	2120      	movs	r1, #32
 8004efe:	430a      	orrs	r2, r1
 8004f00:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	685a      	ldr	r2, [r3, #4]
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	2102      	movs	r1, #2
 8004f0e:	430a      	orrs	r2, r1
 8004f10:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2250      	movs	r2, #80	; 0x50
 8004f16:	2100      	movs	r1, #0
 8004f18:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8004f1a:	2317      	movs	r3, #23
 8004f1c:	18fb      	adds	r3, r7, r3
 8004f1e:	781b      	ldrb	r3, [r3, #0]
}
 8004f20:	0018      	movs	r0, r3
 8004f22:	46bd      	mov	sp, r7
 8004f24:	b006      	add	sp, #24
 8004f26:	bd80      	pop	{r7, pc}
 8004f28:	08005215 	.word	0x08005215
 8004f2c:	08005169 	.word	0x08005169
 8004f30:	08005233 	.word	0x08005233

08004f34 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b088      	sub	sp, #32
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004f4c:	69bb      	ldr	r3, [r7, #24]
 8004f4e:	099b      	lsrs	r3, r3, #6
 8004f50:	001a      	movs	r2, r3
 8004f52:	2301      	movs	r3, #1
 8004f54:	4013      	ands	r3, r2
 8004f56:	d10f      	bne.n	8004f78 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004f58:	69bb      	ldr	r3, [r7, #24]
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004f5e:	d00b      	beq.n	8004f78 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004f60:	69fb      	ldr	r3, [r7, #28]
 8004f62:	099b      	lsrs	r3, r3, #6
 8004f64:	001a      	movs	r2, r3
 8004f66:	2301      	movs	r3, #1
 8004f68:	4013      	ands	r3, r2
 8004f6a:	d005      	beq.n	8004f78 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f70:	687a      	ldr	r2, [r7, #4]
 8004f72:	0010      	movs	r0, r2
 8004f74:	4798      	blx	r3
    return;
 8004f76:	e0d6      	b.n	8005126 <HAL_SPI_IRQHandler+0x1f2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004f78:	69bb      	ldr	r3, [r7, #24]
 8004f7a:	085b      	lsrs	r3, r3, #1
 8004f7c:	001a      	movs	r2, r3
 8004f7e:	2301      	movs	r3, #1
 8004f80:	4013      	ands	r3, r2
 8004f82:	d00b      	beq.n	8004f9c <HAL_SPI_IRQHandler+0x68>
 8004f84:	69fb      	ldr	r3, [r7, #28]
 8004f86:	09db      	lsrs	r3, r3, #7
 8004f88:	001a      	movs	r2, r3
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	4013      	ands	r3, r2
 8004f8e:	d005      	beq.n	8004f9c <HAL_SPI_IRQHandler+0x68>
  {
    hspi->TxISR(hspi);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f94:	687a      	ldr	r2, [r7, #4]
 8004f96:	0010      	movs	r0, r2
 8004f98:	4798      	blx	r3
    return;
 8004f9a:	e0c4      	b.n	8005126 <HAL_SPI_IRQHandler+0x1f2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004f9c:	69bb      	ldr	r3, [r7, #24]
 8004f9e:	095b      	lsrs	r3, r3, #5
 8004fa0:	001a      	movs	r2, r3
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	4013      	ands	r3, r2
 8004fa6:	d10c      	bne.n	8004fc2 <HAL_SPI_IRQHandler+0x8e>
 8004fa8:	69bb      	ldr	r3, [r7, #24]
 8004faa:	099b      	lsrs	r3, r3, #6
 8004fac:	001a      	movs	r2, r3
 8004fae:	2301      	movs	r3, #1
 8004fb0:	4013      	ands	r3, r2
 8004fb2:	d106      	bne.n	8004fc2 <HAL_SPI_IRQHandler+0x8e>
 8004fb4:	69bb      	ldr	r3, [r7, #24]
 8004fb6:	0a1b      	lsrs	r3, r3, #8
 8004fb8:	001a      	movs	r2, r3
 8004fba:	2301      	movs	r3, #1
 8004fbc:	4013      	ands	r3, r2
 8004fbe:	d100      	bne.n	8004fc2 <HAL_SPI_IRQHandler+0x8e>
 8004fc0:	e0b1      	b.n	8005126 <HAL_SPI_IRQHandler+0x1f2>
 8004fc2:	69fb      	ldr	r3, [r7, #28]
 8004fc4:	095b      	lsrs	r3, r3, #5
 8004fc6:	001a      	movs	r2, r3
 8004fc8:	2301      	movs	r3, #1
 8004fca:	4013      	ands	r3, r2
 8004fcc:	d100      	bne.n	8004fd0 <HAL_SPI_IRQHandler+0x9c>
 8004fce:	e0aa      	b.n	8005126 <HAL_SPI_IRQHandler+0x1f2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004fd0:	69bb      	ldr	r3, [r7, #24]
 8004fd2:	099b      	lsrs	r3, r3, #6
 8004fd4:	001a      	movs	r2, r3
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	4013      	ands	r3, r2
 8004fda:	d023      	beq.n	8005024 <HAL_SPI_IRQHandler+0xf0>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2251      	movs	r2, #81	; 0x51
 8004fe0:	5c9b      	ldrb	r3, [r3, r2]
 8004fe2:	b2db      	uxtb	r3, r3
 8004fe4:	2b03      	cmp	r3, #3
 8004fe6:	d011      	beq.n	800500c <HAL_SPI_IRQHandler+0xd8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fec:	2204      	movs	r2, #4
 8004fee:	431a      	orrs	r2, r3
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	617b      	str	r3, [r7, #20]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	68db      	ldr	r3, [r3, #12]
 8004ffe:	617b      	str	r3, [r7, #20]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	617b      	str	r3, [r7, #20]
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	e00b      	b.n	8005024 <HAL_SPI_IRQHandler+0xf0>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800500c:	2300      	movs	r3, #0
 800500e:	613b      	str	r3, [r7, #16]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	68db      	ldr	r3, [r3, #12]
 8005016:	613b      	str	r3, [r7, #16]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	689b      	ldr	r3, [r3, #8]
 800501e:	613b      	str	r3, [r7, #16]
 8005020:	693b      	ldr	r3, [r7, #16]
        return;
 8005022:	e080      	b.n	8005126 <HAL_SPI_IRQHandler+0x1f2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005024:	69bb      	ldr	r3, [r7, #24]
 8005026:	095b      	lsrs	r3, r3, #5
 8005028:	001a      	movs	r2, r3
 800502a:	2301      	movs	r3, #1
 800502c:	4013      	ands	r3, r2
 800502e:	d014      	beq.n	800505a <HAL_SPI_IRQHandler+0x126>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005034:	2201      	movs	r2, #1
 8005036:	431a      	orrs	r2, r3
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800503c:	2300      	movs	r3, #0
 800503e:	60fb      	str	r3, [r7, #12]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	60fb      	str	r3, [r7, #12]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	681a      	ldr	r2, [r3, #0]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	2140      	movs	r1, #64	; 0x40
 8005054:	438a      	bics	r2, r1
 8005056:	601a      	str	r2, [r3, #0]
 8005058:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800505a:	69bb      	ldr	r3, [r7, #24]
 800505c:	0a1b      	lsrs	r3, r3, #8
 800505e:	001a      	movs	r2, r3
 8005060:	2301      	movs	r3, #1
 8005062:	4013      	ands	r3, r2
 8005064:	d00c      	beq.n	8005080 <HAL_SPI_IRQHandler+0x14c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800506a:	2208      	movs	r2, #8
 800506c:	431a      	orrs	r2, r3
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005072:	2300      	movs	r3, #0
 8005074:	60bb      	str	r3, [r7, #8]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	689b      	ldr	r3, [r3, #8]
 800507c:	60bb      	str	r3, [r7, #8]
 800507e:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005084:	2b00      	cmp	r3, #0
 8005086:	d04d      	beq.n	8005124 <HAL_SPI_IRQHandler+0x1f0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	685a      	ldr	r2, [r3, #4]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	21e0      	movs	r1, #224	; 0xe0
 8005094:	438a      	bics	r2, r1
 8005096:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2251      	movs	r2, #81	; 0x51
 800509c:	2101      	movs	r1, #1
 800509e:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80050a0:	69fb      	ldr	r3, [r7, #28]
 80050a2:	2202      	movs	r2, #2
 80050a4:	4013      	ands	r3, r2
 80050a6:	d103      	bne.n	80050b0 <HAL_SPI_IRQHandler+0x17c>
 80050a8:	69fb      	ldr	r3, [r7, #28]
 80050aa:	2201      	movs	r2, #1
 80050ac:	4013      	ands	r3, r2
 80050ae:	d032      	beq.n	8005116 <HAL_SPI_IRQHandler+0x1e2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	685a      	ldr	r2, [r3, #4]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	2103      	movs	r1, #3
 80050bc:	438a      	bics	r2, r1
 80050be:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d010      	beq.n	80050ea <HAL_SPI_IRQHandler+0x1b6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050cc:	4a17      	ldr	r2, [pc, #92]	; (800512c <HAL_SPI_IRQHandler+0x1f8>)
 80050ce:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050d4:	0018      	movs	r0, r3
 80050d6:	f7fd fbc9 	bl	800286c <HAL_DMA_Abort_IT>
 80050da:	1e03      	subs	r3, r0, #0
 80050dc:	d005      	beq.n	80050ea <HAL_SPI_IRQHandler+0x1b6>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050e2:	2240      	movs	r2, #64	; 0x40
 80050e4:	431a      	orrs	r2, r3
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d016      	beq.n	8005120 <HAL_SPI_IRQHandler+0x1ec>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050f6:	4a0d      	ldr	r2, [pc, #52]	; (800512c <HAL_SPI_IRQHandler+0x1f8>)
 80050f8:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050fe:	0018      	movs	r0, r3
 8005100:	f7fd fbb4 	bl	800286c <HAL_DMA_Abort_IT>
 8005104:	1e03      	subs	r3, r0, #0
 8005106:	d00b      	beq.n	8005120 <HAL_SPI_IRQHandler+0x1ec>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800510c:	2240      	movs	r2, #64	; 0x40
 800510e:	431a      	orrs	r2, r3
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8005114:	e004      	b.n	8005120 <HAL_SPI_IRQHandler+0x1ec>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	0018      	movs	r0, r3
 800511a:	f000 f811 	bl	8005140 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800511e:	e000      	b.n	8005122 <HAL_SPI_IRQHandler+0x1ee>
        if (hspi->hdmatx != NULL)
 8005120:	46c0      	nop			; (mov r8, r8)
    return;
 8005122:	46c0      	nop			; (mov r8, r8)
 8005124:	46c0      	nop			; (mov r8, r8)
  }
}
 8005126:	46bd      	mov	sp, r7
 8005128:	b008      	add	sp, #32
 800512a:	bd80      	pop	{r7, pc}
 800512c:	08005275 	.word	0x08005275

08005130 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b082      	sub	sp, #8
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8005138:	46c0      	nop			; (mov r8, r8)
 800513a:	46bd      	mov	sp, r7
 800513c:	b002      	add	sp, #8
 800513e:	bd80      	pop	{r7, pc}

08005140 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b082      	sub	sp, #8
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005148:	46c0      	nop			; (mov r8, r8)
 800514a:	46bd      	mov	sp, r7
 800514c:	b002      	add	sp, #8
 800514e:	bd80      	pop	{r7, pc}

08005150 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b082      	sub	sp, #8
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2251      	movs	r2, #81	; 0x51
 800515c:	5c9b      	ldrb	r3, [r3, r2]
 800515e:	b2db      	uxtb	r3, r3
}
 8005160:	0018      	movs	r0, r3
 8005162:	46bd      	mov	sp, r7
 8005164:	b002      	add	sp, #8
 8005166:	bd80      	pop	{r7, pc}

08005168 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b086      	sub	sp, #24
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005174:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005176:	f7fc ff67 	bl	8002048 <HAL_GetTick>
 800517a:	0003      	movs	r3, r0
 800517c:	613b      	str	r3, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	2220      	movs	r2, #32
 8005186:	4013      	ands	r3, r2
 8005188:	2b20      	cmp	r3, #32
 800518a:	d03c      	beq.n	8005206 <SPI_DMATransmitCplt+0x9e>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	685a      	ldr	r2, [r3, #4]
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	2120      	movs	r1, #32
 8005198:	438a      	bics	r2, r1
 800519a:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	685a      	ldr	r2, [r3, #4]
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	2102      	movs	r1, #2
 80051a8:	438a      	bics	r2, r1
 80051aa:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80051ac:	693a      	ldr	r2, [r7, #16]
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	2164      	movs	r1, #100	; 0x64
 80051b2:	0018      	movs	r0, r3
 80051b4:	f000 f8e4 	bl	8005380 <SPI_EndRxTxTransaction>
 80051b8:	1e03      	subs	r3, r0, #0
 80051ba:	d005      	beq.n	80051c8 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051c0:	2220      	movs	r2, #32
 80051c2:	431a      	orrs	r2, r3
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	689b      	ldr	r3, [r3, #8]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d10a      	bne.n	80051e6 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80051d0:	2300      	movs	r3, #0
 80051d2:	60fb      	str	r3, [r7, #12]
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	68db      	ldr	r3, [r3, #12]
 80051da:	60fb      	str	r3, [r7, #12]
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	689b      	ldr	r3, [r3, #8]
 80051e2:	60fb      	str	r3, [r7, #12]
 80051e4:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	2200      	movs	r2, #0
 80051ea:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	2251      	movs	r2, #81	; 0x51
 80051f0:	2101      	movs	r1, #1
 80051f2:	5499      	strb	r1, [r3, r2]

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d004      	beq.n	8005206 <SPI_DMATransmitCplt+0x9e>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	0018      	movs	r0, r3
 8005200:	f7ff ff9e 	bl	8005140 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8005204:	e003      	b.n	800520e <SPI_DMATransmitCplt+0xa6>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	0018      	movs	r0, r3
 800520a:	f7fb f961 	bl	80004d0 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800520e:	46bd      	mov	sp, r7
 8005210:	b006      	add	sp, #24
 8005212:	bd80      	pop	{r7, pc}

08005214 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b084      	sub	sp, #16
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005220:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	0018      	movs	r0, r3
 8005226:	f7ff ff83 	bl	8005130 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800522a:	46c0      	nop			; (mov r8, r8)
 800522c:	46bd      	mov	sp, r7
 800522e:	b004      	add	sp, #16
 8005230:	bd80      	pop	{r7, pc}

08005232 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8005232:	b580      	push	{r7, lr}
 8005234:	b084      	sub	sp, #16
 8005236:	af00      	add	r7, sp, #0
 8005238:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800523e:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	685a      	ldr	r2, [r3, #4]
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	2103      	movs	r1, #3
 800524c:	438a      	bics	r2, r1
 800524e:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005254:	2210      	movs	r2, #16
 8005256:	431a      	orrs	r2, r3
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	2251      	movs	r2, #81	; 0x51
 8005260:	2101      	movs	r1, #1
 8005262:	5499      	strb	r1, [r3, r2]
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	0018      	movs	r0, r3
 8005268:	f7ff ff6a 	bl	8005140 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800526c:	46c0      	nop			; (mov r8, r8)
 800526e:	46bd      	mov	sp, r7
 8005270:	b004      	add	sp, #16
 8005272:	bd80      	pop	{r7, pc}

08005274 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b084      	sub	sp, #16
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005280:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	2200      	movs	r2, #0
 8005286:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	2200      	movs	r2, #0
 800528c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	0018      	movs	r0, r3
 8005292:	f7ff ff55 	bl	8005140 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005296:	46c0      	nop			; (mov r8, r8)
 8005298:	46bd      	mov	sp, r7
 800529a:	b004      	add	sp, #16
 800529c:	bd80      	pop	{r7, pc}
	...

080052a0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b084      	sub	sp, #16
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	60f8      	str	r0, [r7, #12]
 80052a8:	60b9      	str	r1, [r7, #8]
 80052aa:	603b      	str	r3, [r7, #0]
 80052ac:	1dfb      	adds	r3, r7, #7
 80052ae:	701a      	strb	r2, [r3, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80052b0:	e050      	b.n	8005354 <SPI_WaitFlagStateUntilTimeout+0xb4>
  {
    if (Timeout != HAL_MAX_DELAY)
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	3301      	adds	r3, #1
 80052b6:	d04d      	beq.n	8005354 <SPI_WaitFlagStateUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80052b8:	f7fc fec6 	bl	8002048 <HAL_GetTick>
 80052bc:	0002      	movs	r2, r0
 80052be:	69bb      	ldr	r3, [r7, #24]
 80052c0:	1ad3      	subs	r3, r2, r3
 80052c2:	683a      	ldr	r2, [r7, #0]
 80052c4:	429a      	cmp	r2, r3
 80052c6:	d902      	bls.n	80052ce <SPI_WaitFlagStateUntilTimeout+0x2e>
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d142      	bne.n	8005354 <SPI_WaitFlagStateUntilTimeout+0xb4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	685a      	ldr	r2, [r3, #4]
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	21e0      	movs	r1, #224	; 0xe0
 80052da:	438a      	bics	r2, r1
 80052dc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	685a      	ldr	r2, [r3, #4]
 80052e2:	2382      	movs	r3, #130	; 0x82
 80052e4:	005b      	lsls	r3, r3, #1
 80052e6:	429a      	cmp	r2, r3
 80052e8:	d113      	bne.n	8005312 <SPI_WaitFlagStateUntilTimeout+0x72>
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	689a      	ldr	r2, [r3, #8]
 80052ee:	2380      	movs	r3, #128	; 0x80
 80052f0:	021b      	lsls	r3, r3, #8
 80052f2:	429a      	cmp	r2, r3
 80052f4:	d005      	beq.n	8005302 <SPI_WaitFlagStateUntilTimeout+0x62>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	689a      	ldr	r2, [r3, #8]
 80052fa:	2380      	movs	r3, #128	; 0x80
 80052fc:	00db      	lsls	r3, r3, #3
 80052fe:	429a      	cmp	r2, r3
 8005300:	d107      	bne.n	8005312 <SPI_WaitFlagStateUntilTimeout+0x72>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	681a      	ldr	r2, [r3, #0]
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	2140      	movs	r1, #64	; 0x40
 800530e:	438a      	bics	r2, r1
 8005310:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005316:	2380      	movs	r3, #128	; 0x80
 8005318:	019b      	lsls	r3, r3, #6
 800531a:	429a      	cmp	r2, r3
 800531c:	d110      	bne.n	8005340 <SPI_WaitFlagStateUntilTimeout+0xa0>
        {
          SPI_RESET_CRC(hspi);
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	681a      	ldr	r2, [r3, #0]
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4914      	ldr	r1, [pc, #80]	; (800537c <SPI_WaitFlagStateUntilTimeout+0xdc>)
 800532a:	400a      	ands	r2, r1
 800532c:	601a      	str	r2, [r3, #0]
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	681a      	ldr	r2, [r3, #0]
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	2180      	movs	r1, #128	; 0x80
 800533a:	0189      	lsls	r1, r1, #6
 800533c:	430a      	orrs	r2, r1
 800533e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	2251      	movs	r2, #81	; 0x51
 8005344:	2101      	movs	r1, #1
 8005346:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	2250      	movs	r2, #80	; 0x50
 800534c:	2100      	movs	r1, #0
 800534e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005350:	2303      	movs	r3, #3
 8005352:	e00f      	b.n	8005374 <SPI_WaitFlagStateUntilTimeout+0xd4>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	689b      	ldr	r3, [r3, #8]
 800535a:	68ba      	ldr	r2, [r7, #8]
 800535c:	4013      	ands	r3, r2
 800535e:	68ba      	ldr	r2, [r7, #8]
 8005360:	1ad3      	subs	r3, r2, r3
 8005362:	425a      	negs	r2, r3
 8005364:	4153      	adcs	r3, r2
 8005366:	b2db      	uxtb	r3, r3
 8005368:	001a      	movs	r2, r3
 800536a:	1dfb      	adds	r3, r7, #7
 800536c:	781b      	ldrb	r3, [r3, #0]
 800536e:	429a      	cmp	r2, r3
 8005370:	d19f      	bne.n	80052b2 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8005372:	2300      	movs	r3, #0
}
 8005374:	0018      	movs	r0, r3
 8005376:	46bd      	mov	sp, r7
 8005378:	b004      	add	sp, #16
 800537a:	bd80      	pop	{r7, pc}
 800537c:	ffffdfff 	.word	0xffffdfff

08005380 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b086      	sub	sp, #24
 8005384:	af02      	add	r7, sp, #8
 8005386:	60f8      	str	r0, [r7, #12]
 8005388:	60b9      	str	r1, [r7, #8]
 800538a:	607a      	str	r2, [r7, #4]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	685a      	ldr	r2, [r3, #4]
 8005390:	2382      	movs	r3, #130	; 0x82
 8005392:	005b      	lsls	r3, r3, #1
 8005394:	429a      	cmp	r2, r3
 8005396:	d112      	bne.n	80053be <SPI_EndRxTxTransaction+0x3e>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005398:	68ba      	ldr	r2, [r7, #8]
 800539a:	68f8      	ldr	r0, [r7, #12]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	9300      	str	r3, [sp, #0]
 80053a0:	0013      	movs	r3, r2
 80053a2:	2200      	movs	r2, #0
 80053a4:	2180      	movs	r1, #128	; 0x80
 80053a6:	f7ff ff7b 	bl	80052a0 <SPI_WaitFlagStateUntilTimeout>
 80053aa:	1e03      	subs	r3, r0, #0
 80053ac:	d020      	beq.n	80053f0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053b2:	2220      	movs	r2, #32
 80053b4:	431a      	orrs	r2, r3
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80053ba:	2303      	movs	r3, #3
 80053bc:	e019      	b.n	80053f2 <SPI_EndRxTxTransaction+0x72>
    }
  }
  else
  {
    /* Control RXNE flag in case of Full-Duplex transfer */
    if (hspi->State == HAL_SPI_STATE_BUSY_TX_RX)
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2251      	movs	r2, #81	; 0x51
 80053c2:	5c9b      	ldrb	r3, [r3, r2]
 80053c4:	b2db      	uxtb	r3, r3
 80053c6:	2b05      	cmp	r3, #5
 80053c8:	d112      	bne.n	80053f0 <SPI_EndRxTxTransaction+0x70>
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80053ca:	68ba      	ldr	r2, [r7, #8]
 80053cc:	68f8      	ldr	r0, [r7, #12]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	9300      	str	r3, [sp, #0]
 80053d2:	0013      	movs	r3, r2
 80053d4:	2200      	movs	r2, #0
 80053d6:	2101      	movs	r1, #1
 80053d8:	f7ff ff62 	bl	80052a0 <SPI_WaitFlagStateUntilTimeout>
 80053dc:	1e03      	subs	r3, r0, #0
 80053de:	d007      	beq.n	80053f0 <SPI_EndRxTxTransaction+0x70>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053e4:	2220      	movs	r2, #32
 80053e6:	431a      	orrs	r2, r3
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80053ec:	2303      	movs	r3, #3
 80053ee:	e000      	b.n	80053f2 <SPI_EndRxTxTransaction+0x72>
      }
    }
  }
  return HAL_OK;
 80053f0:	2300      	movs	r3, #0
}
 80053f2:	0018      	movs	r0, r3
 80053f4:	46bd      	mov	sp, r7
 80053f6:	b004      	add	sp, #16
 80053f8:	bd80      	pop	{r7, pc}

080053fa <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80053fa:	b580      	push	{r7, lr}
 80053fc:	b082      	sub	sp, #8
 80053fe:	af00      	add	r7, sp, #0
 8005400:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d101      	bne.n	800540c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005408:	2301      	movs	r3, #1
 800540a:	e01e      	b.n	800544a <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2239      	movs	r2, #57	; 0x39
 8005410:	5c9b      	ldrb	r3, [r3, r2]
 8005412:	b2db      	uxtb	r3, r3
 8005414:	2b00      	cmp	r3, #0
 8005416:	d107      	bne.n	8005428 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2238      	movs	r2, #56	; 0x38
 800541c:	2100      	movs	r1, #0
 800541e:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	0018      	movs	r0, r3
 8005424:	f7fc fc9a 	bl	8001d5c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2239      	movs	r2, #57	; 0x39
 800542c:	2102      	movs	r1, #2
 800542e:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681a      	ldr	r2, [r3, #0]
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	3304      	adds	r3, #4
 8005438:	0019      	movs	r1, r3
 800543a:	0010      	movs	r0, r2
 800543c:	f000 f94a 	bl	80056d4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2239      	movs	r2, #57	; 0x39
 8005444:	2101      	movs	r1, #1
 8005446:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005448:	2300      	movs	r3, #0
}
 800544a:	0018      	movs	r0, r3
 800544c:	46bd      	mov	sp, r7
 800544e:	b002      	add	sp, #8
 8005450:	bd80      	pop	{r7, pc}

08005452 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8005452:	b580      	push	{r7, lr}
 8005454:	b082      	sub	sp, #8
 8005456:	af00      	add	r7, sp, #0
 8005458:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d101      	bne.n	8005464 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8005460:	2301      	movs	r3, #1
 8005462:	e01e      	b.n	80054a2 <HAL_TIM_OC_Init+0x50>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2239      	movs	r2, #57	; 0x39
 8005468:	5c9b      	ldrb	r3, [r3, r2]
 800546a:	b2db      	uxtb	r3, r3
 800546c:	2b00      	cmp	r3, #0
 800546e:	d107      	bne.n	8005480 <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2238      	movs	r2, #56	; 0x38
 8005474:	2100      	movs	r1, #0
 8005476:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	0018      	movs	r0, r3
 800547c:	f000 f815 	bl	80054aa <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2239      	movs	r2, #57	; 0x39
 8005484:	2102      	movs	r1, #2
 8005486:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681a      	ldr	r2, [r3, #0]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	3304      	adds	r3, #4
 8005490:	0019      	movs	r1, r3
 8005492:	0010      	movs	r0, r2
 8005494:	f000 f91e 	bl	80056d4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2239      	movs	r2, #57	; 0x39
 800549c:	2101      	movs	r1, #1
 800549e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80054a0:	2300      	movs	r3, #0
}
 80054a2:	0018      	movs	r0, r3
 80054a4:	46bd      	mov	sp, r7
 80054a6:	b002      	add	sp, #8
 80054a8:	bd80      	pop	{r7, pc}

080054aa <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80054aa:	b580      	push	{r7, lr}
 80054ac:	b082      	sub	sp, #8
 80054ae:	af00      	add	r7, sp, #0
 80054b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80054b2:	46c0      	nop			; (mov r8, r8)
 80054b4:	46bd      	mov	sp, r7
 80054b6:	b002      	add	sp, #8
 80054b8:	bd80      	pop	{r7, pc}

080054ba <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80054ba:	b580      	push	{r7, lr}
 80054bc:	b084      	sub	sp, #16
 80054be:	af00      	add	r7, sp, #0
 80054c0:	60f8      	str	r0, [r7, #12]
 80054c2:	60b9      	str	r1, [r7, #8]
 80054c4:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	2238      	movs	r2, #56	; 0x38
 80054ca:	5c9b      	ldrb	r3, [r3, r2]
 80054cc:	2b01      	cmp	r3, #1
 80054ce:	d101      	bne.n	80054d4 <HAL_TIM_OC_ConfigChannel+0x1a>
 80054d0:	2302      	movs	r3, #2
 80054d2:	e03c      	b.n	800554e <HAL_TIM_OC_ConfigChannel+0x94>
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	2238      	movs	r2, #56	; 0x38
 80054d8:	2101      	movs	r1, #1
 80054da:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	2239      	movs	r2, #57	; 0x39
 80054e0:	2102      	movs	r1, #2
 80054e2:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2b04      	cmp	r3, #4
 80054e8:	d010      	beq.n	800550c <HAL_TIM_OC_ConfigChannel+0x52>
 80054ea:	d802      	bhi.n	80054f2 <HAL_TIM_OC_ConfigChannel+0x38>
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d005      	beq.n	80054fc <HAL_TIM_OC_ConfigChannel+0x42>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
      break;
    }

    default:
      break;
 80054f0:	e024      	b.n	800553c <HAL_TIM_OC_ConfigChannel+0x82>
  switch (Channel)
 80054f2:	2b08      	cmp	r3, #8
 80054f4:	d012      	beq.n	800551c <HAL_TIM_OC_ConfigChannel+0x62>
 80054f6:	2b0c      	cmp	r3, #12
 80054f8:	d018      	beq.n	800552c <HAL_TIM_OC_ConfigChannel+0x72>
      break;
 80054fa:	e01f      	b.n	800553c <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	68ba      	ldr	r2, [r7, #8]
 8005502:	0011      	movs	r1, r2
 8005504:	0018      	movs	r0, r3
 8005506:	f000 f943 	bl	8005790 <TIM_OC1_SetConfig>
      break;
 800550a:	e017      	b.n	800553c <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	68ba      	ldr	r2, [r7, #8]
 8005512:	0011      	movs	r1, r2
 8005514:	0018      	movs	r0, r3
 8005516:	f000 f977 	bl	8005808 <TIM_OC2_SetConfig>
      break;
 800551a:	e00f      	b.n	800553c <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	68ba      	ldr	r2, [r7, #8]
 8005522:	0011      	movs	r1, r2
 8005524:	0018      	movs	r0, r3
 8005526:	f000 f9b1 	bl	800588c <TIM_OC3_SetConfig>
      break;
 800552a:	e007      	b.n	800553c <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	68ba      	ldr	r2, [r7, #8]
 8005532:	0011      	movs	r1, r2
 8005534:	0018      	movs	r0, r3
 8005536:	f000 f9e9 	bl	800590c <TIM_OC4_SetConfig>
      break;
 800553a:	46c0      	nop			; (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	2239      	movs	r2, #57	; 0x39
 8005540:	2101      	movs	r1, #1
 8005542:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	2238      	movs	r2, #56	; 0x38
 8005548:	2100      	movs	r1, #0
 800554a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800554c:	2300      	movs	r3, #0
}
 800554e:	0018      	movs	r0, r3
 8005550:	46bd      	mov	sp, r7
 8005552:	b004      	add	sp, #16
 8005554:	bd80      	pop	{r7, pc}
	...

08005558 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b084      	sub	sp, #16
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
 8005560:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2238      	movs	r2, #56	; 0x38
 8005566:	5c9b      	ldrb	r3, [r3, r2]
 8005568:	2b01      	cmp	r3, #1
 800556a:	d101      	bne.n	8005570 <HAL_TIM_ConfigClockSource+0x18>
 800556c:	2302      	movs	r3, #2
 800556e:	e0ab      	b.n	80056c8 <HAL_TIM_ConfigClockSource+0x170>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2238      	movs	r2, #56	; 0x38
 8005574:	2101      	movs	r1, #1
 8005576:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2239      	movs	r2, #57	; 0x39
 800557c:	2102      	movs	r1, #2
 800557e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	689b      	ldr	r3, [r3, #8]
 8005586:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	2277      	movs	r2, #119	; 0x77
 800558c:	4393      	bics	r3, r2
 800558e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	4a4f      	ldr	r2, [pc, #316]	; (80056d0 <HAL_TIM_ConfigClockSource+0x178>)
 8005594:	4013      	ands	r3, r2
 8005596:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	68fa      	ldr	r2, [r7, #12]
 800559e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	2b40      	cmp	r3, #64	; 0x40
 80055a6:	d100      	bne.n	80055aa <HAL_TIM_ConfigClockSource+0x52>
 80055a8:	e06b      	b.n	8005682 <HAL_TIM_ConfigClockSource+0x12a>
 80055aa:	d80e      	bhi.n	80055ca <HAL_TIM_ConfigClockSource+0x72>
 80055ac:	2b10      	cmp	r3, #16
 80055ae:	d100      	bne.n	80055b2 <HAL_TIM_ConfigClockSource+0x5a>
 80055b0:	e077      	b.n	80056a2 <HAL_TIM_ConfigClockSource+0x14a>
 80055b2:	d803      	bhi.n	80055bc <HAL_TIM_ConfigClockSource+0x64>
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d100      	bne.n	80055ba <HAL_TIM_ConfigClockSource+0x62>
 80055b8:	e073      	b.n	80056a2 <HAL_TIM_ConfigClockSource+0x14a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80055ba:	e07c      	b.n	80056b6 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 80055bc:	2b20      	cmp	r3, #32
 80055be:	d100      	bne.n	80055c2 <HAL_TIM_ConfigClockSource+0x6a>
 80055c0:	e06f      	b.n	80056a2 <HAL_TIM_ConfigClockSource+0x14a>
 80055c2:	2b30      	cmp	r3, #48	; 0x30
 80055c4:	d100      	bne.n	80055c8 <HAL_TIM_ConfigClockSource+0x70>
 80055c6:	e06c      	b.n	80056a2 <HAL_TIM_ConfigClockSource+0x14a>
      break;
 80055c8:	e075      	b.n	80056b6 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 80055ca:	2b70      	cmp	r3, #112	; 0x70
 80055cc:	d00e      	beq.n	80055ec <HAL_TIM_ConfigClockSource+0x94>
 80055ce:	d804      	bhi.n	80055da <HAL_TIM_ConfigClockSource+0x82>
 80055d0:	2b50      	cmp	r3, #80	; 0x50
 80055d2:	d036      	beq.n	8005642 <HAL_TIM_ConfigClockSource+0xea>
 80055d4:	2b60      	cmp	r3, #96	; 0x60
 80055d6:	d044      	beq.n	8005662 <HAL_TIM_ConfigClockSource+0x10a>
      break;
 80055d8:	e06d      	b.n	80056b6 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 80055da:	2280      	movs	r2, #128	; 0x80
 80055dc:	0152      	lsls	r2, r2, #5
 80055de:	4293      	cmp	r3, r2
 80055e0:	d068      	beq.n	80056b4 <HAL_TIM_ConfigClockSource+0x15c>
 80055e2:	2280      	movs	r2, #128	; 0x80
 80055e4:	0192      	lsls	r2, r2, #6
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d017      	beq.n	800561a <HAL_TIM_ConfigClockSource+0xc2>
      break;
 80055ea:	e064      	b.n	80056b6 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6818      	ldr	r0, [r3, #0]
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	6899      	ldr	r1, [r3, #8]
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	685a      	ldr	r2, [r3, #4]
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	68db      	ldr	r3, [r3, #12]
 80055fc:	f000 fa46 	bl	8005a8c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	689b      	ldr	r3, [r3, #8]
 8005606:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2277      	movs	r2, #119	; 0x77
 800560c:	4313      	orrs	r3, r2
 800560e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	68fa      	ldr	r2, [r7, #12]
 8005616:	609a      	str	r2, [r3, #8]
      break;
 8005618:	e04d      	b.n	80056b6 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6818      	ldr	r0, [r3, #0]
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	6899      	ldr	r1, [r3, #8]
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	685a      	ldr	r2, [r3, #4]
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	68db      	ldr	r3, [r3, #12]
 800562a:	f000 fa2f 	bl	8005a8c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	689a      	ldr	r2, [r3, #8]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	2180      	movs	r1, #128	; 0x80
 800563a:	01c9      	lsls	r1, r1, #7
 800563c:	430a      	orrs	r2, r1
 800563e:	609a      	str	r2, [r3, #8]
      break;
 8005640:	e039      	b.n	80056b6 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6818      	ldr	r0, [r3, #0]
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	6859      	ldr	r1, [r3, #4]
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	68db      	ldr	r3, [r3, #12]
 800564e:	001a      	movs	r2, r3
 8005650:	f000 f9a2 	bl	8005998 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	2150      	movs	r1, #80	; 0x50
 800565a:	0018      	movs	r0, r3
 800565c:	f000 f9fc 	bl	8005a58 <TIM_ITRx_SetConfig>
      break;
 8005660:	e029      	b.n	80056b6 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6818      	ldr	r0, [r3, #0]
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	6859      	ldr	r1, [r3, #4]
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	68db      	ldr	r3, [r3, #12]
 800566e:	001a      	movs	r2, r3
 8005670:	f000 f9c0 	bl	80059f4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	2160      	movs	r1, #96	; 0x60
 800567a:	0018      	movs	r0, r3
 800567c:	f000 f9ec 	bl	8005a58 <TIM_ITRx_SetConfig>
      break;
 8005680:	e019      	b.n	80056b6 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6818      	ldr	r0, [r3, #0]
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	6859      	ldr	r1, [r3, #4]
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	68db      	ldr	r3, [r3, #12]
 800568e:	001a      	movs	r2, r3
 8005690:	f000 f982 	bl	8005998 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	2140      	movs	r1, #64	; 0x40
 800569a:	0018      	movs	r0, r3
 800569c:	f000 f9dc 	bl	8005a58 <TIM_ITRx_SetConfig>
      break;
 80056a0:	e009      	b.n	80056b6 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681a      	ldr	r2, [r3, #0]
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	0019      	movs	r1, r3
 80056ac:	0010      	movs	r0, r2
 80056ae:	f000 f9d3 	bl	8005a58 <TIM_ITRx_SetConfig>
      break;
 80056b2:	e000      	b.n	80056b6 <HAL_TIM_ConfigClockSource+0x15e>
      break;
 80056b4:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2239      	movs	r2, #57	; 0x39
 80056ba:	2101      	movs	r1, #1
 80056bc:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2238      	movs	r2, #56	; 0x38
 80056c2:	2100      	movs	r1, #0
 80056c4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80056c6:	2300      	movs	r3, #0
}
 80056c8:	0018      	movs	r0, r3
 80056ca:	46bd      	mov	sp, r7
 80056cc:	b004      	add	sp, #16
 80056ce:	bd80      	pop	{r7, pc}
 80056d0:	ffff00ff 	.word	0xffff00ff

080056d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b084      	sub	sp, #16
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
 80056dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80056e4:	687a      	ldr	r2, [r7, #4]
 80056e6:	2380      	movs	r3, #128	; 0x80
 80056e8:	05db      	lsls	r3, r3, #23
 80056ea:	429a      	cmp	r2, r3
 80056ec:	d00b      	beq.n	8005706 <TIM_Base_SetConfig+0x32>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	4a23      	ldr	r2, [pc, #140]	; (8005780 <TIM_Base_SetConfig+0xac>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d007      	beq.n	8005706 <TIM_Base_SetConfig+0x32>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	4a22      	ldr	r2, [pc, #136]	; (8005784 <TIM_Base_SetConfig+0xb0>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d003      	beq.n	8005706 <TIM_Base_SetConfig+0x32>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	4a21      	ldr	r2, [pc, #132]	; (8005788 <TIM_Base_SetConfig+0xb4>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d108      	bne.n	8005718 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	2270      	movs	r2, #112	; 0x70
 800570a:	4393      	bics	r3, r2
 800570c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	68fa      	ldr	r2, [r7, #12]
 8005714:	4313      	orrs	r3, r2
 8005716:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005718:	687a      	ldr	r2, [r7, #4]
 800571a:	2380      	movs	r3, #128	; 0x80
 800571c:	05db      	lsls	r3, r3, #23
 800571e:	429a      	cmp	r2, r3
 8005720:	d00b      	beq.n	800573a <TIM_Base_SetConfig+0x66>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	4a16      	ldr	r2, [pc, #88]	; (8005780 <TIM_Base_SetConfig+0xac>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d007      	beq.n	800573a <TIM_Base_SetConfig+0x66>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	4a15      	ldr	r2, [pc, #84]	; (8005784 <TIM_Base_SetConfig+0xb0>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d003      	beq.n	800573a <TIM_Base_SetConfig+0x66>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	4a14      	ldr	r2, [pc, #80]	; (8005788 <TIM_Base_SetConfig+0xb4>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d108      	bne.n	800574c <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	4a13      	ldr	r2, [pc, #76]	; (800578c <TIM_Base_SetConfig+0xb8>)
 800573e:	4013      	ands	r3, r2
 8005740:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	68db      	ldr	r3, [r3, #12]
 8005746:	68fa      	ldr	r2, [r7, #12]
 8005748:	4313      	orrs	r3, r2
 800574a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	2280      	movs	r2, #128	; 0x80
 8005750:	4393      	bics	r3, r2
 8005752:	001a      	movs	r2, r3
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	691b      	ldr	r3, [r3, #16]
 8005758:	4313      	orrs	r3, r2
 800575a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	68fa      	ldr	r2, [r7, #12]
 8005760:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	689a      	ldr	r2, [r3, #8]
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	681a      	ldr	r2, [r3, #0]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2201      	movs	r2, #1
 8005776:	615a      	str	r2, [r3, #20]
}
 8005778:	46c0      	nop			; (mov r8, r8)
 800577a:	46bd      	mov	sp, r7
 800577c:	b004      	add	sp, #16
 800577e:	bd80      	pop	{r7, pc}
 8005780:	40000400 	.word	0x40000400
 8005784:	40010800 	.word	0x40010800
 8005788:	40011400 	.word	0x40011400
 800578c:	fffffcff 	.word	0xfffffcff

08005790 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b086      	sub	sp, #24
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
 8005798:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6a1b      	ldr	r3, [r3, #32]
 800579e:	2201      	movs	r2, #1
 80057a0:	4393      	bics	r3, r2
 80057a2:	001a      	movs	r2, r3
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6a1b      	ldr	r3, [r3, #32]
 80057ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	699b      	ldr	r3, [r3, #24]
 80057b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	2270      	movs	r2, #112	; 0x70
 80057be:	4393      	bics	r3, r2
 80057c0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	2203      	movs	r2, #3
 80057c6:	4393      	bics	r3, r2
 80057c8:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	68fa      	ldr	r2, [r7, #12]
 80057d0:	4313      	orrs	r3, r2
 80057d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80057d4:	697b      	ldr	r3, [r7, #20]
 80057d6:	2202      	movs	r2, #2
 80057d8:	4393      	bics	r3, r2
 80057da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	697a      	ldr	r2, [r7, #20]
 80057e2:	4313      	orrs	r3, r2
 80057e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	693a      	ldr	r2, [r7, #16]
 80057ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	68fa      	ldr	r2, [r7, #12]
 80057f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	685a      	ldr	r2, [r3, #4]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	697a      	ldr	r2, [r7, #20]
 80057fe:	621a      	str	r2, [r3, #32]
}
 8005800:	46c0      	nop			; (mov r8, r8)
 8005802:	46bd      	mov	sp, r7
 8005804:	b006      	add	sp, #24
 8005806:	bd80      	pop	{r7, pc}

08005808 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b086      	sub	sp, #24
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
 8005810:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6a1b      	ldr	r3, [r3, #32]
 8005816:	2210      	movs	r2, #16
 8005818:	4393      	bics	r3, r2
 800581a:	001a      	movs	r2, r3
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6a1b      	ldr	r3, [r3, #32]
 8005824:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	685b      	ldr	r3, [r3, #4]
 800582a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	699b      	ldr	r3, [r3, #24]
 8005830:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	4a13      	ldr	r2, [pc, #76]	; (8005884 <TIM_OC2_SetConfig+0x7c>)
 8005836:	4013      	ands	r3, r2
 8005838:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	4a12      	ldr	r2, [pc, #72]	; (8005888 <TIM_OC2_SetConfig+0x80>)
 800583e:	4013      	ands	r3, r2
 8005840:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	021b      	lsls	r3, r3, #8
 8005848:	68fa      	ldr	r2, [r7, #12]
 800584a:	4313      	orrs	r3, r2
 800584c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	2220      	movs	r2, #32
 8005852:	4393      	bics	r3, r2
 8005854:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	689b      	ldr	r3, [r3, #8]
 800585a:	011b      	lsls	r3, r3, #4
 800585c:	697a      	ldr	r2, [r7, #20]
 800585e:	4313      	orrs	r3, r2
 8005860:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	693a      	ldr	r2, [r7, #16]
 8005866:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	68fa      	ldr	r2, [r7, #12]
 800586c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	685a      	ldr	r2, [r3, #4]
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	697a      	ldr	r2, [r7, #20]
 800587a:	621a      	str	r2, [r3, #32]
}
 800587c:	46c0      	nop			; (mov r8, r8)
 800587e:	46bd      	mov	sp, r7
 8005880:	b006      	add	sp, #24
 8005882:	bd80      	pop	{r7, pc}
 8005884:	ffff8fff 	.word	0xffff8fff
 8005888:	fffffcff 	.word	0xfffffcff

0800588c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b086      	sub	sp, #24
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
 8005894:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6a1b      	ldr	r3, [r3, #32]
 800589a:	4a1a      	ldr	r2, [pc, #104]	; (8005904 <TIM_OC3_SetConfig+0x78>)
 800589c:	401a      	ands	r2, r3
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6a1b      	ldr	r3, [r3, #32]
 80058a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	69db      	ldr	r3, [r3, #28]
 80058b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2270      	movs	r2, #112	; 0x70
 80058b8:	4393      	bics	r3, r2
 80058ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	2203      	movs	r2, #3
 80058c0:	4393      	bics	r3, r2
 80058c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	68fa      	ldr	r2, [r7, #12]
 80058ca:	4313      	orrs	r3, r2
 80058cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	4a0d      	ldr	r2, [pc, #52]	; (8005908 <TIM_OC3_SetConfig+0x7c>)
 80058d2:	4013      	ands	r3, r2
 80058d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	689b      	ldr	r3, [r3, #8]
 80058da:	021b      	lsls	r3, r3, #8
 80058dc:	697a      	ldr	r2, [r7, #20]
 80058de:	4313      	orrs	r3, r2
 80058e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	693a      	ldr	r2, [r7, #16]
 80058e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	68fa      	ldr	r2, [r7, #12]
 80058ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	685a      	ldr	r2, [r3, #4]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	697a      	ldr	r2, [r7, #20]
 80058fa:	621a      	str	r2, [r3, #32]
}
 80058fc:	46c0      	nop			; (mov r8, r8)
 80058fe:	46bd      	mov	sp, r7
 8005900:	b006      	add	sp, #24
 8005902:	bd80      	pop	{r7, pc}
 8005904:	fffffeff 	.word	0xfffffeff
 8005908:	fffffdff 	.word	0xfffffdff

0800590c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b086      	sub	sp, #24
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
 8005914:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6a1b      	ldr	r3, [r3, #32]
 800591a:	4a1b      	ldr	r2, [pc, #108]	; (8005988 <TIM_OC4_SetConfig+0x7c>)
 800591c:	401a      	ands	r2, r3
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6a1b      	ldr	r3, [r3, #32]
 8005926:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	69db      	ldr	r3, [r3, #28]
 8005932:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	4a15      	ldr	r2, [pc, #84]	; (800598c <TIM_OC4_SetConfig+0x80>)
 8005938:	4013      	ands	r3, r2
 800593a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	4a14      	ldr	r2, [pc, #80]	; (8005990 <TIM_OC4_SetConfig+0x84>)
 8005940:	4013      	ands	r3, r2
 8005942:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	021b      	lsls	r3, r3, #8
 800594a:	68fa      	ldr	r2, [r7, #12]
 800594c:	4313      	orrs	r3, r2
 800594e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	4a10      	ldr	r2, [pc, #64]	; (8005994 <TIM_OC4_SetConfig+0x88>)
 8005954:	4013      	ands	r3, r2
 8005956:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	689b      	ldr	r3, [r3, #8]
 800595c:	031b      	lsls	r3, r3, #12
 800595e:	697a      	ldr	r2, [r7, #20]
 8005960:	4313      	orrs	r3, r2
 8005962:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	693a      	ldr	r2, [r7, #16]
 8005968:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	68fa      	ldr	r2, [r7, #12]
 800596e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	685a      	ldr	r2, [r3, #4]
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	697a      	ldr	r2, [r7, #20]
 800597c:	621a      	str	r2, [r3, #32]
}
 800597e:	46c0      	nop			; (mov r8, r8)
 8005980:	46bd      	mov	sp, r7
 8005982:	b006      	add	sp, #24
 8005984:	bd80      	pop	{r7, pc}
 8005986:	46c0      	nop			; (mov r8, r8)
 8005988:	ffffefff 	.word	0xffffefff
 800598c:	ffff8fff 	.word	0xffff8fff
 8005990:	fffffcff 	.word	0xfffffcff
 8005994:	ffffdfff 	.word	0xffffdfff

08005998 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b086      	sub	sp, #24
 800599c:	af00      	add	r7, sp, #0
 800599e:	60f8      	str	r0, [r7, #12]
 80059a0:	60b9      	str	r1, [r7, #8]
 80059a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	6a1b      	ldr	r3, [r3, #32]
 80059a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	6a1b      	ldr	r3, [r3, #32]
 80059ae:	2201      	movs	r2, #1
 80059b0:	4393      	bics	r3, r2
 80059b2:	001a      	movs	r2, r3
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	699b      	ldr	r3, [r3, #24]
 80059bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	22f0      	movs	r2, #240	; 0xf0
 80059c2:	4393      	bics	r3, r2
 80059c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	011b      	lsls	r3, r3, #4
 80059ca:	693a      	ldr	r2, [r7, #16]
 80059cc:	4313      	orrs	r3, r2
 80059ce:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	220a      	movs	r2, #10
 80059d4:	4393      	bics	r3, r2
 80059d6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80059d8:	697a      	ldr	r2, [r7, #20]
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	4313      	orrs	r3, r2
 80059de:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	693a      	ldr	r2, [r7, #16]
 80059e4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	697a      	ldr	r2, [r7, #20]
 80059ea:	621a      	str	r2, [r3, #32]
}
 80059ec:	46c0      	nop			; (mov r8, r8)
 80059ee:	46bd      	mov	sp, r7
 80059f0:	b006      	add	sp, #24
 80059f2:	bd80      	pop	{r7, pc}

080059f4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b086      	sub	sp, #24
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	60f8      	str	r0, [r7, #12]
 80059fc:	60b9      	str	r1, [r7, #8]
 80059fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	6a1b      	ldr	r3, [r3, #32]
 8005a04:	2210      	movs	r2, #16
 8005a06:	4393      	bics	r3, r2
 8005a08:	001a      	movs	r2, r3
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	699b      	ldr	r3, [r3, #24]
 8005a12:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	6a1b      	ldr	r3, [r3, #32]
 8005a18:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	4a0d      	ldr	r2, [pc, #52]	; (8005a54 <TIM_TI2_ConfigInputStage+0x60>)
 8005a1e:	4013      	ands	r3, r2
 8005a20:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	031b      	lsls	r3, r3, #12
 8005a26:	697a      	ldr	r2, [r7, #20]
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005a2c:	693b      	ldr	r3, [r7, #16]
 8005a2e:	22a0      	movs	r2, #160	; 0xa0
 8005a30:	4393      	bics	r3, r2
 8005a32:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	011b      	lsls	r3, r3, #4
 8005a38:	693a      	ldr	r2, [r7, #16]
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	697a      	ldr	r2, [r7, #20]
 8005a42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	693a      	ldr	r2, [r7, #16]
 8005a48:	621a      	str	r2, [r3, #32]
}
 8005a4a:	46c0      	nop			; (mov r8, r8)
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	b006      	add	sp, #24
 8005a50:	bd80      	pop	{r7, pc}
 8005a52:	46c0      	nop			; (mov r8, r8)
 8005a54:	ffff0fff 	.word	0xffff0fff

08005a58 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b084      	sub	sp, #16
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
 8005a60:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	689b      	ldr	r3, [r3, #8]
 8005a66:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2270      	movs	r2, #112	; 0x70
 8005a6c:	4393      	bics	r3, r2
 8005a6e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005a70:	683a      	ldr	r2, [r7, #0]
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	4313      	orrs	r3, r2
 8005a76:	2207      	movs	r2, #7
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	68fa      	ldr	r2, [r7, #12]
 8005a80:	609a      	str	r2, [r3, #8]
}
 8005a82:	46c0      	nop			; (mov r8, r8)
 8005a84:	46bd      	mov	sp, r7
 8005a86:	b004      	add	sp, #16
 8005a88:	bd80      	pop	{r7, pc}
	...

08005a8c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b086      	sub	sp, #24
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	60f8      	str	r0, [r7, #12]
 8005a94:	60b9      	str	r1, [r7, #8]
 8005a96:	607a      	str	r2, [r7, #4]
 8005a98:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	689b      	ldr	r3, [r3, #8]
 8005a9e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005aa0:	697b      	ldr	r3, [r7, #20]
 8005aa2:	4a09      	ldr	r2, [pc, #36]	; (8005ac8 <TIM_ETR_SetConfig+0x3c>)
 8005aa4:	4013      	ands	r3, r2
 8005aa6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	021a      	lsls	r2, r3, #8
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	431a      	orrs	r2, r3
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	697a      	ldr	r2, [r7, #20]
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	697a      	ldr	r2, [r7, #20]
 8005abe:	609a      	str	r2, [r3, #8]
}
 8005ac0:	46c0      	nop			; (mov r8, r8)
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	b006      	add	sp, #24
 8005ac6:	bd80      	pop	{r7, pc}
 8005ac8:	ffff00ff 	.word	0xffff00ff

08005acc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b084      	sub	sp, #16
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
 8005ad4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2238      	movs	r2, #56	; 0x38
 8005ada:	5c9b      	ldrb	r3, [r3, r2]
 8005adc:	2b01      	cmp	r3, #1
 8005ade:	d101      	bne.n	8005ae4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ae0:	2302      	movs	r3, #2
 8005ae2:	e032      	b.n	8005b4a <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2238      	movs	r2, #56	; 0x38
 8005ae8:	2101      	movs	r1, #1
 8005aea:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2239      	movs	r2, #57	; 0x39
 8005af0:	2102      	movs	r1, #2
 8005af2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	689b      	ldr	r3, [r3, #8]
 8005b02:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2270      	movs	r2, #112	; 0x70
 8005b08:	4393      	bics	r3, r2
 8005b0a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	68fa      	ldr	r2, [r7, #12]
 8005b12:	4313      	orrs	r3, r2
 8005b14:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	2280      	movs	r2, #128	; 0x80
 8005b1a:	4393      	bics	r3, r2
 8005b1c:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	68ba      	ldr	r2, [r7, #8]
 8005b24:	4313      	orrs	r3, r2
 8005b26:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	68fa      	ldr	r2, [r7, #12]
 8005b2e:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	68ba      	ldr	r2, [r7, #8]
 8005b36:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2239      	movs	r2, #57	; 0x39
 8005b3c:	2101      	movs	r1, #1
 8005b3e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2238      	movs	r2, #56	; 0x38
 8005b44:	2100      	movs	r1, #0
 8005b46:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005b48:	2300      	movs	r3, #0
}
 8005b4a:	0018      	movs	r0, r3
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	b004      	add	sp, #16
 8005b50:	bd80      	pop	{r7, pc}

08005b52 <HAL_TIMEx_RemapConfig>:
  @endif
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 8005b52:	b580      	push	{r7, lr}
 8005b54:	b082      	sub	sp, #8
 8005b56:	af00      	add	r7, sp, #0
 8005b58:	6078      	str	r0, [r7, #4]
 8005b5a:	6039      	str	r1, [r7, #0]
  __HAL_LOCK(htim);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2238      	movs	r2, #56	; 0x38
 8005b60:	5c9b      	ldrb	r3, [r3, r2]
 8005b62:	2b01      	cmp	r3, #1
 8005b64:	d101      	bne.n	8005b6a <HAL_TIMEx_RemapConfig+0x18>
 8005b66:	2302      	movs	r3, #2
 8005b68:	e00c      	b.n	8005b84 <HAL_TIMEx_RemapConfig+0x32>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2238      	movs	r2, #56	; 0x38
 8005b6e:	2101      	movs	r1, #1
 8005b70:	5499      	strb	r1, [r3, r2]

  /* Check parameters */
  assert_param(IS_TIM_REMAP(htim->Instance, Remap));

  /* Set the Timer remapping configuration */
  WRITE_REG(htim->Instance->OR, Remap);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	683a      	ldr	r2, [r7, #0]
 8005b78:	651a      	str	r2, [r3, #80]	; 0x50

  __HAL_UNLOCK(htim);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2238      	movs	r2, #56	; 0x38
 8005b7e:	2100      	movs	r1, #0
 8005b80:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005b82:	2300      	movs	r3, #0
}
 8005b84:	0018      	movs	r0, r3
 8005b86:	46bd      	mov	sp, r7
 8005b88:	b002      	add	sp, #8
 8005b8a:	bd80      	pop	{r7, pc}

08005b8c <__errno>:
 8005b8c:	4b01      	ldr	r3, [pc, #4]	; (8005b94 <__errno+0x8>)
 8005b8e:	6818      	ldr	r0, [r3, #0]
 8005b90:	4770      	bx	lr
 8005b92:	46c0      	nop			; (mov r8, r8)
 8005b94:	20000004 	.word	0x20000004

08005b98 <__libc_init_array>:
 8005b98:	b570      	push	{r4, r5, r6, lr}
 8005b9a:	2600      	movs	r6, #0
 8005b9c:	4d0c      	ldr	r5, [pc, #48]	; (8005bd0 <__libc_init_array+0x38>)
 8005b9e:	4c0d      	ldr	r4, [pc, #52]	; (8005bd4 <__libc_init_array+0x3c>)
 8005ba0:	1b64      	subs	r4, r4, r5
 8005ba2:	10a4      	asrs	r4, r4, #2
 8005ba4:	42a6      	cmp	r6, r4
 8005ba6:	d109      	bne.n	8005bbc <__libc_init_array+0x24>
 8005ba8:	2600      	movs	r6, #0
 8005baa:	f000 fc29 	bl	8006400 <_init>
 8005bae:	4d0a      	ldr	r5, [pc, #40]	; (8005bd8 <__libc_init_array+0x40>)
 8005bb0:	4c0a      	ldr	r4, [pc, #40]	; (8005bdc <__libc_init_array+0x44>)
 8005bb2:	1b64      	subs	r4, r4, r5
 8005bb4:	10a4      	asrs	r4, r4, #2
 8005bb6:	42a6      	cmp	r6, r4
 8005bb8:	d105      	bne.n	8005bc6 <__libc_init_array+0x2e>
 8005bba:	bd70      	pop	{r4, r5, r6, pc}
 8005bbc:	00b3      	lsls	r3, r6, #2
 8005bbe:	58eb      	ldr	r3, [r5, r3]
 8005bc0:	4798      	blx	r3
 8005bc2:	3601      	adds	r6, #1
 8005bc4:	e7ee      	b.n	8005ba4 <__libc_init_array+0xc>
 8005bc6:	00b3      	lsls	r3, r6, #2
 8005bc8:	58eb      	ldr	r3, [r5, r3]
 8005bca:	4798      	blx	r3
 8005bcc:	3601      	adds	r6, #1
 8005bce:	e7f2      	b.n	8005bb6 <__libc_init_array+0x1e>
 8005bd0:	08006a20 	.word	0x08006a20
 8005bd4:	08006a20 	.word	0x08006a20
 8005bd8:	08006a20 	.word	0x08006a20
 8005bdc:	08006a24 	.word	0x08006a24

08005be0 <memcpy>:
 8005be0:	2300      	movs	r3, #0
 8005be2:	b510      	push	{r4, lr}
 8005be4:	429a      	cmp	r2, r3
 8005be6:	d100      	bne.n	8005bea <memcpy+0xa>
 8005be8:	bd10      	pop	{r4, pc}
 8005bea:	5ccc      	ldrb	r4, [r1, r3]
 8005bec:	54c4      	strb	r4, [r0, r3]
 8005bee:	3301      	adds	r3, #1
 8005bf0:	e7f8      	b.n	8005be4 <memcpy+0x4>

08005bf2 <memset>:
 8005bf2:	0003      	movs	r3, r0
 8005bf4:	1812      	adds	r2, r2, r0
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d100      	bne.n	8005bfc <memset+0xa>
 8005bfa:	4770      	bx	lr
 8005bfc:	7019      	strb	r1, [r3, #0]
 8005bfe:	3301      	adds	r3, #1
 8005c00:	e7f9      	b.n	8005bf6 <memset+0x4>
	...

08005c04 <siprintf>:
 8005c04:	b40e      	push	{r1, r2, r3}
 8005c06:	b500      	push	{lr}
 8005c08:	490b      	ldr	r1, [pc, #44]	; (8005c38 <siprintf+0x34>)
 8005c0a:	b09c      	sub	sp, #112	; 0x70
 8005c0c:	ab1d      	add	r3, sp, #116	; 0x74
 8005c0e:	9002      	str	r0, [sp, #8]
 8005c10:	9006      	str	r0, [sp, #24]
 8005c12:	9107      	str	r1, [sp, #28]
 8005c14:	9104      	str	r1, [sp, #16]
 8005c16:	4809      	ldr	r0, [pc, #36]	; (8005c3c <siprintf+0x38>)
 8005c18:	4909      	ldr	r1, [pc, #36]	; (8005c40 <siprintf+0x3c>)
 8005c1a:	cb04      	ldmia	r3!, {r2}
 8005c1c:	9105      	str	r1, [sp, #20]
 8005c1e:	6800      	ldr	r0, [r0, #0]
 8005c20:	a902      	add	r1, sp, #8
 8005c22:	9301      	str	r3, [sp, #4]
 8005c24:	f000 f870 	bl	8005d08 <_svfiprintf_r>
 8005c28:	2300      	movs	r3, #0
 8005c2a:	9a02      	ldr	r2, [sp, #8]
 8005c2c:	7013      	strb	r3, [r2, #0]
 8005c2e:	b01c      	add	sp, #112	; 0x70
 8005c30:	bc08      	pop	{r3}
 8005c32:	b003      	add	sp, #12
 8005c34:	4718      	bx	r3
 8005c36:	46c0      	nop			; (mov r8, r8)
 8005c38:	7fffffff 	.word	0x7fffffff
 8005c3c:	20000004 	.word	0x20000004
 8005c40:	ffff0208 	.word	0xffff0208

08005c44 <__ssputs_r>:
 8005c44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c46:	688e      	ldr	r6, [r1, #8]
 8005c48:	b085      	sub	sp, #20
 8005c4a:	0007      	movs	r7, r0
 8005c4c:	000c      	movs	r4, r1
 8005c4e:	9203      	str	r2, [sp, #12]
 8005c50:	9301      	str	r3, [sp, #4]
 8005c52:	429e      	cmp	r6, r3
 8005c54:	d83c      	bhi.n	8005cd0 <__ssputs_r+0x8c>
 8005c56:	2390      	movs	r3, #144	; 0x90
 8005c58:	898a      	ldrh	r2, [r1, #12]
 8005c5a:	00db      	lsls	r3, r3, #3
 8005c5c:	421a      	tst	r2, r3
 8005c5e:	d034      	beq.n	8005cca <__ssputs_r+0x86>
 8005c60:	2503      	movs	r5, #3
 8005c62:	6909      	ldr	r1, [r1, #16]
 8005c64:	6823      	ldr	r3, [r4, #0]
 8005c66:	1a5b      	subs	r3, r3, r1
 8005c68:	9302      	str	r3, [sp, #8]
 8005c6a:	6963      	ldr	r3, [r4, #20]
 8005c6c:	9802      	ldr	r0, [sp, #8]
 8005c6e:	435d      	muls	r5, r3
 8005c70:	0feb      	lsrs	r3, r5, #31
 8005c72:	195d      	adds	r5, r3, r5
 8005c74:	9b01      	ldr	r3, [sp, #4]
 8005c76:	106d      	asrs	r5, r5, #1
 8005c78:	3301      	adds	r3, #1
 8005c7a:	181b      	adds	r3, r3, r0
 8005c7c:	42ab      	cmp	r3, r5
 8005c7e:	d900      	bls.n	8005c82 <__ssputs_r+0x3e>
 8005c80:	001d      	movs	r5, r3
 8005c82:	0553      	lsls	r3, r2, #21
 8005c84:	d532      	bpl.n	8005cec <__ssputs_r+0xa8>
 8005c86:	0029      	movs	r1, r5
 8005c88:	0038      	movs	r0, r7
 8005c8a:	f000 fb19 	bl	80062c0 <_malloc_r>
 8005c8e:	1e06      	subs	r6, r0, #0
 8005c90:	d109      	bne.n	8005ca6 <__ssputs_r+0x62>
 8005c92:	230c      	movs	r3, #12
 8005c94:	603b      	str	r3, [r7, #0]
 8005c96:	2340      	movs	r3, #64	; 0x40
 8005c98:	2001      	movs	r0, #1
 8005c9a:	89a2      	ldrh	r2, [r4, #12]
 8005c9c:	4240      	negs	r0, r0
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	81a3      	strh	r3, [r4, #12]
 8005ca2:	b005      	add	sp, #20
 8005ca4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ca6:	9a02      	ldr	r2, [sp, #8]
 8005ca8:	6921      	ldr	r1, [r4, #16]
 8005caa:	f7ff ff99 	bl	8005be0 <memcpy>
 8005cae:	89a3      	ldrh	r3, [r4, #12]
 8005cb0:	4a14      	ldr	r2, [pc, #80]	; (8005d04 <__ssputs_r+0xc0>)
 8005cb2:	401a      	ands	r2, r3
 8005cb4:	2380      	movs	r3, #128	; 0x80
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	81a3      	strh	r3, [r4, #12]
 8005cba:	9b02      	ldr	r3, [sp, #8]
 8005cbc:	6126      	str	r6, [r4, #16]
 8005cbe:	18f6      	adds	r6, r6, r3
 8005cc0:	6026      	str	r6, [r4, #0]
 8005cc2:	6165      	str	r5, [r4, #20]
 8005cc4:	9e01      	ldr	r6, [sp, #4]
 8005cc6:	1aed      	subs	r5, r5, r3
 8005cc8:	60a5      	str	r5, [r4, #8]
 8005cca:	9b01      	ldr	r3, [sp, #4]
 8005ccc:	429e      	cmp	r6, r3
 8005cce:	d900      	bls.n	8005cd2 <__ssputs_r+0x8e>
 8005cd0:	9e01      	ldr	r6, [sp, #4]
 8005cd2:	0032      	movs	r2, r6
 8005cd4:	9903      	ldr	r1, [sp, #12]
 8005cd6:	6820      	ldr	r0, [r4, #0]
 8005cd8:	f000 fa95 	bl	8006206 <memmove>
 8005cdc:	68a3      	ldr	r3, [r4, #8]
 8005cde:	2000      	movs	r0, #0
 8005ce0:	1b9b      	subs	r3, r3, r6
 8005ce2:	60a3      	str	r3, [r4, #8]
 8005ce4:	6823      	ldr	r3, [r4, #0]
 8005ce6:	199e      	adds	r6, r3, r6
 8005ce8:	6026      	str	r6, [r4, #0]
 8005cea:	e7da      	b.n	8005ca2 <__ssputs_r+0x5e>
 8005cec:	002a      	movs	r2, r5
 8005cee:	0038      	movs	r0, r7
 8005cf0:	f000 fb44 	bl	800637c <_realloc_r>
 8005cf4:	1e06      	subs	r6, r0, #0
 8005cf6:	d1e0      	bne.n	8005cba <__ssputs_r+0x76>
 8005cf8:	6921      	ldr	r1, [r4, #16]
 8005cfa:	0038      	movs	r0, r7
 8005cfc:	f000 fa96 	bl	800622c <_free_r>
 8005d00:	e7c7      	b.n	8005c92 <__ssputs_r+0x4e>
 8005d02:	46c0      	nop			; (mov r8, r8)
 8005d04:	fffffb7f 	.word	0xfffffb7f

08005d08 <_svfiprintf_r>:
 8005d08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d0a:	b0a1      	sub	sp, #132	; 0x84
 8005d0c:	9003      	str	r0, [sp, #12]
 8005d0e:	001d      	movs	r5, r3
 8005d10:	898b      	ldrh	r3, [r1, #12]
 8005d12:	000f      	movs	r7, r1
 8005d14:	0016      	movs	r6, r2
 8005d16:	061b      	lsls	r3, r3, #24
 8005d18:	d511      	bpl.n	8005d3e <_svfiprintf_r+0x36>
 8005d1a:	690b      	ldr	r3, [r1, #16]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d10e      	bne.n	8005d3e <_svfiprintf_r+0x36>
 8005d20:	2140      	movs	r1, #64	; 0x40
 8005d22:	f000 facd 	bl	80062c0 <_malloc_r>
 8005d26:	6038      	str	r0, [r7, #0]
 8005d28:	6138      	str	r0, [r7, #16]
 8005d2a:	2800      	cmp	r0, #0
 8005d2c:	d105      	bne.n	8005d3a <_svfiprintf_r+0x32>
 8005d2e:	230c      	movs	r3, #12
 8005d30:	9a03      	ldr	r2, [sp, #12]
 8005d32:	3801      	subs	r0, #1
 8005d34:	6013      	str	r3, [r2, #0]
 8005d36:	b021      	add	sp, #132	; 0x84
 8005d38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d3a:	2340      	movs	r3, #64	; 0x40
 8005d3c:	617b      	str	r3, [r7, #20]
 8005d3e:	2300      	movs	r3, #0
 8005d40:	ac08      	add	r4, sp, #32
 8005d42:	6163      	str	r3, [r4, #20]
 8005d44:	3320      	adds	r3, #32
 8005d46:	7663      	strb	r3, [r4, #25]
 8005d48:	3310      	adds	r3, #16
 8005d4a:	76a3      	strb	r3, [r4, #26]
 8005d4c:	9507      	str	r5, [sp, #28]
 8005d4e:	0035      	movs	r5, r6
 8005d50:	782b      	ldrb	r3, [r5, #0]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d001      	beq.n	8005d5a <_svfiprintf_r+0x52>
 8005d56:	2b25      	cmp	r3, #37	; 0x25
 8005d58:	d146      	bne.n	8005de8 <_svfiprintf_r+0xe0>
 8005d5a:	1bab      	subs	r3, r5, r6
 8005d5c:	9305      	str	r3, [sp, #20]
 8005d5e:	d00c      	beq.n	8005d7a <_svfiprintf_r+0x72>
 8005d60:	0032      	movs	r2, r6
 8005d62:	0039      	movs	r1, r7
 8005d64:	9803      	ldr	r0, [sp, #12]
 8005d66:	f7ff ff6d 	bl	8005c44 <__ssputs_r>
 8005d6a:	1c43      	adds	r3, r0, #1
 8005d6c:	d100      	bne.n	8005d70 <_svfiprintf_r+0x68>
 8005d6e:	e0ae      	b.n	8005ece <_svfiprintf_r+0x1c6>
 8005d70:	6962      	ldr	r2, [r4, #20]
 8005d72:	9b05      	ldr	r3, [sp, #20]
 8005d74:	4694      	mov	ip, r2
 8005d76:	4463      	add	r3, ip
 8005d78:	6163      	str	r3, [r4, #20]
 8005d7a:	782b      	ldrb	r3, [r5, #0]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d100      	bne.n	8005d82 <_svfiprintf_r+0x7a>
 8005d80:	e0a5      	b.n	8005ece <_svfiprintf_r+0x1c6>
 8005d82:	2201      	movs	r2, #1
 8005d84:	2300      	movs	r3, #0
 8005d86:	4252      	negs	r2, r2
 8005d88:	6062      	str	r2, [r4, #4]
 8005d8a:	a904      	add	r1, sp, #16
 8005d8c:	3254      	adds	r2, #84	; 0x54
 8005d8e:	1852      	adds	r2, r2, r1
 8005d90:	1c6e      	adds	r6, r5, #1
 8005d92:	6023      	str	r3, [r4, #0]
 8005d94:	60e3      	str	r3, [r4, #12]
 8005d96:	60a3      	str	r3, [r4, #8]
 8005d98:	7013      	strb	r3, [r2, #0]
 8005d9a:	65a3      	str	r3, [r4, #88]	; 0x58
 8005d9c:	7831      	ldrb	r1, [r6, #0]
 8005d9e:	2205      	movs	r2, #5
 8005da0:	4853      	ldr	r0, [pc, #332]	; (8005ef0 <_svfiprintf_r+0x1e8>)
 8005da2:	f000 fa25 	bl	80061f0 <memchr>
 8005da6:	1c75      	adds	r5, r6, #1
 8005da8:	2800      	cmp	r0, #0
 8005daa:	d11f      	bne.n	8005dec <_svfiprintf_r+0xe4>
 8005dac:	6822      	ldr	r2, [r4, #0]
 8005dae:	06d3      	lsls	r3, r2, #27
 8005db0:	d504      	bpl.n	8005dbc <_svfiprintf_r+0xb4>
 8005db2:	2353      	movs	r3, #83	; 0x53
 8005db4:	a904      	add	r1, sp, #16
 8005db6:	185b      	adds	r3, r3, r1
 8005db8:	2120      	movs	r1, #32
 8005dba:	7019      	strb	r1, [r3, #0]
 8005dbc:	0713      	lsls	r3, r2, #28
 8005dbe:	d504      	bpl.n	8005dca <_svfiprintf_r+0xc2>
 8005dc0:	2353      	movs	r3, #83	; 0x53
 8005dc2:	a904      	add	r1, sp, #16
 8005dc4:	185b      	adds	r3, r3, r1
 8005dc6:	212b      	movs	r1, #43	; 0x2b
 8005dc8:	7019      	strb	r1, [r3, #0]
 8005dca:	7833      	ldrb	r3, [r6, #0]
 8005dcc:	2b2a      	cmp	r3, #42	; 0x2a
 8005dce:	d016      	beq.n	8005dfe <_svfiprintf_r+0xf6>
 8005dd0:	0035      	movs	r5, r6
 8005dd2:	2100      	movs	r1, #0
 8005dd4:	200a      	movs	r0, #10
 8005dd6:	68e3      	ldr	r3, [r4, #12]
 8005dd8:	782a      	ldrb	r2, [r5, #0]
 8005dda:	1c6e      	adds	r6, r5, #1
 8005ddc:	3a30      	subs	r2, #48	; 0x30
 8005dde:	2a09      	cmp	r2, #9
 8005de0:	d94e      	bls.n	8005e80 <_svfiprintf_r+0x178>
 8005de2:	2900      	cmp	r1, #0
 8005de4:	d018      	beq.n	8005e18 <_svfiprintf_r+0x110>
 8005de6:	e010      	b.n	8005e0a <_svfiprintf_r+0x102>
 8005de8:	3501      	adds	r5, #1
 8005dea:	e7b1      	b.n	8005d50 <_svfiprintf_r+0x48>
 8005dec:	4b40      	ldr	r3, [pc, #256]	; (8005ef0 <_svfiprintf_r+0x1e8>)
 8005dee:	6822      	ldr	r2, [r4, #0]
 8005df0:	1ac0      	subs	r0, r0, r3
 8005df2:	2301      	movs	r3, #1
 8005df4:	4083      	lsls	r3, r0
 8005df6:	4313      	orrs	r3, r2
 8005df8:	6023      	str	r3, [r4, #0]
 8005dfa:	002e      	movs	r6, r5
 8005dfc:	e7ce      	b.n	8005d9c <_svfiprintf_r+0x94>
 8005dfe:	9b07      	ldr	r3, [sp, #28]
 8005e00:	1d19      	adds	r1, r3, #4
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	9107      	str	r1, [sp, #28]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	db01      	blt.n	8005e0e <_svfiprintf_r+0x106>
 8005e0a:	930b      	str	r3, [sp, #44]	; 0x2c
 8005e0c:	e004      	b.n	8005e18 <_svfiprintf_r+0x110>
 8005e0e:	425b      	negs	r3, r3
 8005e10:	60e3      	str	r3, [r4, #12]
 8005e12:	2302      	movs	r3, #2
 8005e14:	4313      	orrs	r3, r2
 8005e16:	6023      	str	r3, [r4, #0]
 8005e18:	782b      	ldrb	r3, [r5, #0]
 8005e1a:	2b2e      	cmp	r3, #46	; 0x2e
 8005e1c:	d10a      	bne.n	8005e34 <_svfiprintf_r+0x12c>
 8005e1e:	786b      	ldrb	r3, [r5, #1]
 8005e20:	2b2a      	cmp	r3, #42	; 0x2a
 8005e22:	d135      	bne.n	8005e90 <_svfiprintf_r+0x188>
 8005e24:	9b07      	ldr	r3, [sp, #28]
 8005e26:	3502      	adds	r5, #2
 8005e28:	1d1a      	adds	r2, r3, #4
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	9207      	str	r2, [sp, #28]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	db2b      	blt.n	8005e8a <_svfiprintf_r+0x182>
 8005e32:	9309      	str	r3, [sp, #36]	; 0x24
 8005e34:	4e2f      	ldr	r6, [pc, #188]	; (8005ef4 <_svfiprintf_r+0x1ec>)
 8005e36:	7829      	ldrb	r1, [r5, #0]
 8005e38:	2203      	movs	r2, #3
 8005e3a:	0030      	movs	r0, r6
 8005e3c:	f000 f9d8 	bl	80061f0 <memchr>
 8005e40:	2800      	cmp	r0, #0
 8005e42:	d006      	beq.n	8005e52 <_svfiprintf_r+0x14a>
 8005e44:	2340      	movs	r3, #64	; 0x40
 8005e46:	1b80      	subs	r0, r0, r6
 8005e48:	4083      	lsls	r3, r0
 8005e4a:	6822      	ldr	r2, [r4, #0]
 8005e4c:	3501      	adds	r5, #1
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	6023      	str	r3, [r4, #0]
 8005e52:	7829      	ldrb	r1, [r5, #0]
 8005e54:	2206      	movs	r2, #6
 8005e56:	4828      	ldr	r0, [pc, #160]	; (8005ef8 <_svfiprintf_r+0x1f0>)
 8005e58:	1c6e      	adds	r6, r5, #1
 8005e5a:	7621      	strb	r1, [r4, #24]
 8005e5c:	f000 f9c8 	bl	80061f0 <memchr>
 8005e60:	2800      	cmp	r0, #0
 8005e62:	d03c      	beq.n	8005ede <_svfiprintf_r+0x1d6>
 8005e64:	4b25      	ldr	r3, [pc, #148]	; (8005efc <_svfiprintf_r+0x1f4>)
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d125      	bne.n	8005eb6 <_svfiprintf_r+0x1ae>
 8005e6a:	2207      	movs	r2, #7
 8005e6c:	9b07      	ldr	r3, [sp, #28]
 8005e6e:	3307      	adds	r3, #7
 8005e70:	4393      	bics	r3, r2
 8005e72:	3308      	adds	r3, #8
 8005e74:	9307      	str	r3, [sp, #28]
 8005e76:	6963      	ldr	r3, [r4, #20]
 8005e78:	9a04      	ldr	r2, [sp, #16]
 8005e7a:	189b      	adds	r3, r3, r2
 8005e7c:	6163      	str	r3, [r4, #20]
 8005e7e:	e766      	b.n	8005d4e <_svfiprintf_r+0x46>
 8005e80:	4343      	muls	r3, r0
 8005e82:	2101      	movs	r1, #1
 8005e84:	189b      	adds	r3, r3, r2
 8005e86:	0035      	movs	r5, r6
 8005e88:	e7a6      	b.n	8005dd8 <_svfiprintf_r+0xd0>
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	425b      	negs	r3, r3
 8005e8e:	e7d0      	b.n	8005e32 <_svfiprintf_r+0x12a>
 8005e90:	2300      	movs	r3, #0
 8005e92:	200a      	movs	r0, #10
 8005e94:	001a      	movs	r2, r3
 8005e96:	3501      	adds	r5, #1
 8005e98:	6063      	str	r3, [r4, #4]
 8005e9a:	7829      	ldrb	r1, [r5, #0]
 8005e9c:	1c6e      	adds	r6, r5, #1
 8005e9e:	3930      	subs	r1, #48	; 0x30
 8005ea0:	2909      	cmp	r1, #9
 8005ea2:	d903      	bls.n	8005eac <_svfiprintf_r+0x1a4>
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d0c5      	beq.n	8005e34 <_svfiprintf_r+0x12c>
 8005ea8:	9209      	str	r2, [sp, #36]	; 0x24
 8005eaa:	e7c3      	b.n	8005e34 <_svfiprintf_r+0x12c>
 8005eac:	4342      	muls	r2, r0
 8005eae:	2301      	movs	r3, #1
 8005eb0:	1852      	adds	r2, r2, r1
 8005eb2:	0035      	movs	r5, r6
 8005eb4:	e7f1      	b.n	8005e9a <_svfiprintf_r+0x192>
 8005eb6:	ab07      	add	r3, sp, #28
 8005eb8:	9300      	str	r3, [sp, #0]
 8005eba:	003a      	movs	r2, r7
 8005ebc:	4b10      	ldr	r3, [pc, #64]	; (8005f00 <_svfiprintf_r+0x1f8>)
 8005ebe:	0021      	movs	r1, r4
 8005ec0:	9803      	ldr	r0, [sp, #12]
 8005ec2:	e000      	b.n	8005ec6 <_svfiprintf_r+0x1be>
 8005ec4:	bf00      	nop
 8005ec6:	9004      	str	r0, [sp, #16]
 8005ec8:	9b04      	ldr	r3, [sp, #16]
 8005eca:	3301      	adds	r3, #1
 8005ecc:	d1d3      	bne.n	8005e76 <_svfiprintf_r+0x16e>
 8005ece:	89bb      	ldrh	r3, [r7, #12]
 8005ed0:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005ed2:	065b      	lsls	r3, r3, #25
 8005ed4:	d400      	bmi.n	8005ed8 <_svfiprintf_r+0x1d0>
 8005ed6:	e72e      	b.n	8005d36 <_svfiprintf_r+0x2e>
 8005ed8:	2001      	movs	r0, #1
 8005eda:	4240      	negs	r0, r0
 8005edc:	e72b      	b.n	8005d36 <_svfiprintf_r+0x2e>
 8005ede:	ab07      	add	r3, sp, #28
 8005ee0:	9300      	str	r3, [sp, #0]
 8005ee2:	003a      	movs	r2, r7
 8005ee4:	4b06      	ldr	r3, [pc, #24]	; (8005f00 <_svfiprintf_r+0x1f8>)
 8005ee6:	0021      	movs	r1, r4
 8005ee8:	9803      	ldr	r0, [sp, #12]
 8005eea:	f000 f879 	bl	8005fe0 <_printf_i>
 8005eee:	e7ea      	b.n	8005ec6 <_svfiprintf_r+0x1be>
 8005ef0:	080069ed 	.word	0x080069ed
 8005ef4:	080069f3 	.word	0x080069f3
 8005ef8:	080069f7 	.word	0x080069f7
 8005efc:	00000000 	.word	0x00000000
 8005f00:	08005c45 	.word	0x08005c45

08005f04 <_printf_common>:
 8005f04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005f06:	0015      	movs	r5, r2
 8005f08:	9301      	str	r3, [sp, #4]
 8005f0a:	688a      	ldr	r2, [r1, #8]
 8005f0c:	690b      	ldr	r3, [r1, #16]
 8005f0e:	9000      	str	r0, [sp, #0]
 8005f10:	000c      	movs	r4, r1
 8005f12:	4293      	cmp	r3, r2
 8005f14:	da00      	bge.n	8005f18 <_printf_common+0x14>
 8005f16:	0013      	movs	r3, r2
 8005f18:	0022      	movs	r2, r4
 8005f1a:	602b      	str	r3, [r5, #0]
 8005f1c:	3243      	adds	r2, #67	; 0x43
 8005f1e:	7812      	ldrb	r2, [r2, #0]
 8005f20:	2a00      	cmp	r2, #0
 8005f22:	d001      	beq.n	8005f28 <_printf_common+0x24>
 8005f24:	3301      	adds	r3, #1
 8005f26:	602b      	str	r3, [r5, #0]
 8005f28:	6823      	ldr	r3, [r4, #0]
 8005f2a:	069b      	lsls	r3, r3, #26
 8005f2c:	d502      	bpl.n	8005f34 <_printf_common+0x30>
 8005f2e:	682b      	ldr	r3, [r5, #0]
 8005f30:	3302      	adds	r3, #2
 8005f32:	602b      	str	r3, [r5, #0]
 8005f34:	2706      	movs	r7, #6
 8005f36:	6823      	ldr	r3, [r4, #0]
 8005f38:	401f      	ands	r7, r3
 8005f3a:	d027      	beq.n	8005f8c <_printf_common+0x88>
 8005f3c:	0023      	movs	r3, r4
 8005f3e:	3343      	adds	r3, #67	; 0x43
 8005f40:	781b      	ldrb	r3, [r3, #0]
 8005f42:	1e5a      	subs	r2, r3, #1
 8005f44:	4193      	sbcs	r3, r2
 8005f46:	6822      	ldr	r2, [r4, #0]
 8005f48:	0692      	lsls	r2, r2, #26
 8005f4a:	d430      	bmi.n	8005fae <_printf_common+0xaa>
 8005f4c:	0022      	movs	r2, r4
 8005f4e:	9901      	ldr	r1, [sp, #4]
 8005f50:	3243      	adds	r2, #67	; 0x43
 8005f52:	9800      	ldr	r0, [sp, #0]
 8005f54:	9e08      	ldr	r6, [sp, #32]
 8005f56:	47b0      	blx	r6
 8005f58:	1c43      	adds	r3, r0, #1
 8005f5a:	d025      	beq.n	8005fa8 <_printf_common+0xa4>
 8005f5c:	2306      	movs	r3, #6
 8005f5e:	6820      	ldr	r0, [r4, #0]
 8005f60:	682a      	ldr	r2, [r5, #0]
 8005f62:	68e1      	ldr	r1, [r4, #12]
 8005f64:	4003      	ands	r3, r0
 8005f66:	2500      	movs	r5, #0
 8005f68:	2b04      	cmp	r3, #4
 8005f6a:	d103      	bne.n	8005f74 <_printf_common+0x70>
 8005f6c:	1a8d      	subs	r5, r1, r2
 8005f6e:	43eb      	mvns	r3, r5
 8005f70:	17db      	asrs	r3, r3, #31
 8005f72:	401d      	ands	r5, r3
 8005f74:	68a3      	ldr	r3, [r4, #8]
 8005f76:	6922      	ldr	r2, [r4, #16]
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	dd01      	ble.n	8005f80 <_printf_common+0x7c>
 8005f7c:	1a9b      	subs	r3, r3, r2
 8005f7e:	18ed      	adds	r5, r5, r3
 8005f80:	2700      	movs	r7, #0
 8005f82:	42bd      	cmp	r5, r7
 8005f84:	d120      	bne.n	8005fc8 <_printf_common+0xc4>
 8005f86:	2000      	movs	r0, #0
 8005f88:	e010      	b.n	8005fac <_printf_common+0xa8>
 8005f8a:	3701      	adds	r7, #1
 8005f8c:	68e3      	ldr	r3, [r4, #12]
 8005f8e:	682a      	ldr	r2, [r5, #0]
 8005f90:	1a9b      	subs	r3, r3, r2
 8005f92:	42bb      	cmp	r3, r7
 8005f94:	ddd2      	ble.n	8005f3c <_printf_common+0x38>
 8005f96:	0022      	movs	r2, r4
 8005f98:	2301      	movs	r3, #1
 8005f9a:	3219      	adds	r2, #25
 8005f9c:	9901      	ldr	r1, [sp, #4]
 8005f9e:	9800      	ldr	r0, [sp, #0]
 8005fa0:	9e08      	ldr	r6, [sp, #32]
 8005fa2:	47b0      	blx	r6
 8005fa4:	1c43      	adds	r3, r0, #1
 8005fa6:	d1f0      	bne.n	8005f8a <_printf_common+0x86>
 8005fa8:	2001      	movs	r0, #1
 8005faa:	4240      	negs	r0, r0
 8005fac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005fae:	2030      	movs	r0, #48	; 0x30
 8005fb0:	18e1      	adds	r1, r4, r3
 8005fb2:	3143      	adds	r1, #67	; 0x43
 8005fb4:	7008      	strb	r0, [r1, #0]
 8005fb6:	0021      	movs	r1, r4
 8005fb8:	1c5a      	adds	r2, r3, #1
 8005fba:	3145      	adds	r1, #69	; 0x45
 8005fbc:	7809      	ldrb	r1, [r1, #0]
 8005fbe:	18a2      	adds	r2, r4, r2
 8005fc0:	3243      	adds	r2, #67	; 0x43
 8005fc2:	3302      	adds	r3, #2
 8005fc4:	7011      	strb	r1, [r2, #0]
 8005fc6:	e7c1      	b.n	8005f4c <_printf_common+0x48>
 8005fc8:	0022      	movs	r2, r4
 8005fca:	2301      	movs	r3, #1
 8005fcc:	321a      	adds	r2, #26
 8005fce:	9901      	ldr	r1, [sp, #4]
 8005fd0:	9800      	ldr	r0, [sp, #0]
 8005fd2:	9e08      	ldr	r6, [sp, #32]
 8005fd4:	47b0      	blx	r6
 8005fd6:	1c43      	adds	r3, r0, #1
 8005fd8:	d0e6      	beq.n	8005fa8 <_printf_common+0xa4>
 8005fda:	3701      	adds	r7, #1
 8005fdc:	e7d1      	b.n	8005f82 <_printf_common+0x7e>
	...

08005fe0 <_printf_i>:
 8005fe0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005fe2:	b089      	sub	sp, #36	; 0x24
 8005fe4:	9204      	str	r2, [sp, #16]
 8005fe6:	000a      	movs	r2, r1
 8005fe8:	3243      	adds	r2, #67	; 0x43
 8005fea:	9305      	str	r3, [sp, #20]
 8005fec:	9003      	str	r0, [sp, #12]
 8005fee:	9202      	str	r2, [sp, #8]
 8005ff0:	7e0a      	ldrb	r2, [r1, #24]
 8005ff2:	000c      	movs	r4, r1
 8005ff4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005ff6:	2a6e      	cmp	r2, #110	; 0x6e
 8005ff8:	d100      	bne.n	8005ffc <_printf_i+0x1c>
 8005ffa:	e086      	b.n	800610a <_printf_i+0x12a>
 8005ffc:	d81f      	bhi.n	800603e <_printf_i+0x5e>
 8005ffe:	2a63      	cmp	r2, #99	; 0x63
 8006000:	d033      	beq.n	800606a <_printf_i+0x8a>
 8006002:	d808      	bhi.n	8006016 <_printf_i+0x36>
 8006004:	2a00      	cmp	r2, #0
 8006006:	d100      	bne.n	800600a <_printf_i+0x2a>
 8006008:	e08c      	b.n	8006124 <_printf_i+0x144>
 800600a:	2a58      	cmp	r2, #88	; 0x58
 800600c:	d04d      	beq.n	80060aa <_printf_i+0xca>
 800600e:	0025      	movs	r5, r4
 8006010:	3542      	adds	r5, #66	; 0x42
 8006012:	702a      	strb	r2, [r5, #0]
 8006014:	e030      	b.n	8006078 <_printf_i+0x98>
 8006016:	2a64      	cmp	r2, #100	; 0x64
 8006018:	d001      	beq.n	800601e <_printf_i+0x3e>
 800601a:	2a69      	cmp	r2, #105	; 0x69
 800601c:	d1f7      	bne.n	800600e <_printf_i+0x2e>
 800601e:	6819      	ldr	r1, [r3, #0]
 8006020:	6825      	ldr	r5, [r4, #0]
 8006022:	1d0a      	adds	r2, r1, #4
 8006024:	0628      	lsls	r0, r5, #24
 8006026:	d529      	bpl.n	800607c <_printf_i+0x9c>
 8006028:	6808      	ldr	r0, [r1, #0]
 800602a:	601a      	str	r2, [r3, #0]
 800602c:	2800      	cmp	r0, #0
 800602e:	da03      	bge.n	8006038 <_printf_i+0x58>
 8006030:	232d      	movs	r3, #45	; 0x2d
 8006032:	9a02      	ldr	r2, [sp, #8]
 8006034:	4240      	negs	r0, r0
 8006036:	7013      	strb	r3, [r2, #0]
 8006038:	4e6b      	ldr	r6, [pc, #428]	; (80061e8 <_printf_i+0x208>)
 800603a:	270a      	movs	r7, #10
 800603c:	e04f      	b.n	80060de <_printf_i+0xfe>
 800603e:	2a73      	cmp	r2, #115	; 0x73
 8006040:	d074      	beq.n	800612c <_printf_i+0x14c>
 8006042:	d808      	bhi.n	8006056 <_printf_i+0x76>
 8006044:	2a6f      	cmp	r2, #111	; 0x6f
 8006046:	d01f      	beq.n	8006088 <_printf_i+0xa8>
 8006048:	2a70      	cmp	r2, #112	; 0x70
 800604a:	d1e0      	bne.n	800600e <_printf_i+0x2e>
 800604c:	2220      	movs	r2, #32
 800604e:	6809      	ldr	r1, [r1, #0]
 8006050:	430a      	orrs	r2, r1
 8006052:	6022      	str	r2, [r4, #0]
 8006054:	e003      	b.n	800605e <_printf_i+0x7e>
 8006056:	2a75      	cmp	r2, #117	; 0x75
 8006058:	d016      	beq.n	8006088 <_printf_i+0xa8>
 800605a:	2a78      	cmp	r2, #120	; 0x78
 800605c:	d1d7      	bne.n	800600e <_printf_i+0x2e>
 800605e:	0022      	movs	r2, r4
 8006060:	2178      	movs	r1, #120	; 0x78
 8006062:	3245      	adds	r2, #69	; 0x45
 8006064:	7011      	strb	r1, [r2, #0]
 8006066:	4e61      	ldr	r6, [pc, #388]	; (80061ec <_printf_i+0x20c>)
 8006068:	e022      	b.n	80060b0 <_printf_i+0xd0>
 800606a:	0025      	movs	r5, r4
 800606c:	681a      	ldr	r2, [r3, #0]
 800606e:	3542      	adds	r5, #66	; 0x42
 8006070:	1d11      	adds	r1, r2, #4
 8006072:	6019      	str	r1, [r3, #0]
 8006074:	6813      	ldr	r3, [r2, #0]
 8006076:	702b      	strb	r3, [r5, #0]
 8006078:	2301      	movs	r3, #1
 800607a:	e065      	b.n	8006148 <_printf_i+0x168>
 800607c:	6808      	ldr	r0, [r1, #0]
 800607e:	601a      	str	r2, [r3, #0]
 8006080:	0669      	lsls	r1, r5, #25
 8006082:	d5d3      	bpl.n	800602c <_printf_i+0x4c>
 8006084:	b200      	sxth	r0, r0
 8006086:	e7d1      	b.n	800602c <_printf_i+0x4c>
 8006088:	6819      	ldr	r1, [r3, #0]
 800608a:	6825      	ldr	r5, [r4, #0]
 800608c:	1d08      	adds	r0, r1, #4
 800608e:	6018      	str	r0, [r3, #0]
 8006090:	6808      	ldr	r0, [r1, #0]
 8006092:	062e      	lsls	r6, r5, #24
 8006094:	d505      	bpl.n	80060a2 <_printf_i+0xc2>
 8006096:	4e54      	ldr	r6, [pc, #336]	; (80061e8 <_printf_i+0x208>)
 8006098:	2708      	movs	r7, #8
 800609a:	2a6f      	cmp	r2, #111	; 0x6f
 800609c:	d01b      	beq.n	80060d6 <_printf_i+0xf6>
 800609e:	270a      	movs	r7, #10
 80060a0:	e019      	b.n	80060d6 <_printf_i+0xf6>
 80060a2:	066d      	lsls	r5, r5, #25
 80060a4:	d5f7      	bpl.n	8006096 <_printf_i+0xb6>
 80060a6:	b280      	uxth	r0, r0
 80060a8:	e7f5      	b.n	8006096 <_printf_i+0xb6>
 80060aa:	3145      	adds	r1, #69	; 0x45
 80060ac:	4e4e      	ldr	r6, [pc, #312]	; (80061e8 <_printf_i+0x208>)
 80060ae:	700a      	strb	r2, [r1, #0]
 80060b0:	6818      	ldr	r0, [r3, #0]
 80060b2:	6822      	ldr	r2, [r4, #0]
 80060b4:	1d01      	adds	r1, r0, #4
 80060b6:	6800      	ldr	r0, [r0, #0]
 80060b8:	6019      	str	r1, [r3, #0]
 80060ba:	0615      	lsls	r5, r2, #24
 80060bc:	d521      	bpl.n	8006102 <_printf_i+0x122>
 80060be:	07d3      	lsls	r3, r2, #31
 80060c0:	d502      	bpl.n	80060c8 <_printf_i+0xe8>
 80060c2:	2320      	movs	r3, #32
 80060c4:	431a      	orrs	r2, r3
 80060c6:	6022      	str	r2, [r4, #0]
 80060c8:	2710      	movs	r7, #16
 80060ca:	2800      	cmp	r0, #0
 80060cc:	d103      	bne.n	80060d6 <_printf_i+0xf6>
 80060ce:	2320      	movs	r3, #32
 80060d0:	6822      	ldr	r2, [r4, #0]
 80060d2:	439a      	bics	r2, r3
 80060d4:	6022      	str	r2, [r4, #0]
 80060d6:	0023      	movs	r3, r4
 80060d8:	2200      	movs	r2, #0
 80060da:	3343      	adds	r3, #67	; 0x43
 80060dc:	701a      	strb	r2, [r3, #0]
 80060de:	6863      	ldr	r3, [r4, #4]
 80060e0:	60a3      	str	r3, [r4, #8]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	db58      	blt.n	8006198 <_printf_i+0x1b8>
 80060e6:	2204      	movs	r2, #4
 80060e8:	6821      	ldr	r1, [r4, #0]
 80060ea:	4391      	bics	r1, r2
 80060ec:	6021      	str	r1, [r4, #0]
 80060ee:	2800      	cmp	r0, #0
 80060f0:	d154      	bne.n	800619c <_printf_i+0x1bc>
 80060f2:	9d02      	ldr	r5, [sp, #8]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d05a      	beq.n	80061ae <_printf_i+0x1ce>
 80060f8:	0025      	movs	r5, r4
 80060fa:	7833      	ldrb	r3, [r6, #0]
 80060fc:	3542      	adds	r5, #66	; 0x42
 80060fe:	702b      	strb	r3, [r5, #0]
 8006100:	e055      	b.n	80061ae <_printf_i+0x1ce>
 8006102:	0655      	lsls	r5, r2, #25
 8006104:	d5db      	bpl.n	80060be <_printf_i+0xde>
 8006106:	b280      	uxth	r0, r0
 8006108:	e7d9      	b.n	80060be <_printf_i+0xde>
 800610a:	681a      	ldr	r2, [r3, #0]
 800610c:	680d      	ldr	r5, [r1, #0]
 800610e:	1d10      	adds	r0, r2, #4
 8006110:	6949      	ldr	r1, [r1, #20]
 8006112:	6018      	str	r0, [r3, #0]
 8006114:	6813      	ldr	r3, [r2, #0]
 8006116:	062e      	lsls	r6, r5, #24
 8006118:	d501      	bpl.n	800611e <_printf_i+0x13e>
 800611a:	6019      	str	r1, [r3, #0]
 800611c:	e002      	b.n	8006124 <_printf_i+0x144>
 800611e:	066d      	lsls	r5, r5, #25
 8006120:	d5fb      	bpl.n	800611a <_printf_i+0x13a>
 8006122:	8019      	strh	r1, [r3, #0]
 8006124:	2300      	movs	r3, #0
 8006126:	9d02      	ldr	r5, [sp, #8]
 8006128:	6123      	str	r3, [r4, #16]
 800612a:	e04f      	b.n	80061cc <_printf_i+0x1ec>
 800612c:	681a      	ldr	r2, [r3, #0]
 800612e:	1d11      	adds	r1, r2, #4
 8006130:	6019      	str	r1, [r3, #0]
 8006132:	6815      	ldr	r5, [r2, #0]
 8006134:	2100      	movs	r1, #0
 8006136:	6862      	ldr	r2, [r4, #4]
 8006138:	0028      	movs	r0, r5
 800613a:	f000 f859 	bl	80061f0 <memchr>
 800613e:	2800      	cmp	r0, #0
 8006140:	d001      	beq.n	8006146 <_printf_i+0x166>
 8006142:	1b40      	subs	r0, r0, r5
 8006144:	6060      	str	r0, [r4, #4]
 8006146:	6863      	ldr	r3, [r4, #4]
 8006148:	6123      	str	r3, [r4, #16]
 800614a:	2300      	movs	r3, #0
 800614c:	9a02      	ldr	r2, [sp, #8]
 800614e:	7013      	strb	r3, [r2, #0]
 8006150:	e03c      	b.n	80061cc <_printf_i+0x1ec>
 8006152:	6923      	ldr	r3, [r4, #16]
 8006154:	002a      	movs	r2, r5
 8006156:	9904      	ldr	r1, [sp, #16]
 8006158:	9803      	ldr	r0, [sp, #12]
 800615a:	9d05      	ldr	r5, [sp, #20]
 800615c:	47a8      	blx	r5
 800615e:	1c43      	adds	r3, r0, #1
 8006160:	d03e      	beq.n	80061e0 <_printf_i+0x200>
 8006162:	6823      	ldr	r3, [r4, #0]
 8006164:	079b      	lsls	r3, r3, #30
 8006166:	d415      	bmi.n	8006194 <_printf_i+0x1b4>
 8006168:	9b07      	ldr	r3, [sp, #28]
 800616a:	68e0      	ldr	r0, [r4, #12]
 800616c:	4298      	cmp	r0, r3
 800616e:	da39      	bge.n	80061e4 <_printf_i+0x204>
 8006170:	0018      	movs	r0, r3
 8006172:	e037      	b.n	80061e4 <_printf_i+0x204>
 8006174:	0022      	movs	r2, r4
 8006176:	2301      	movs	r3, #1
 8006178:	3219      	adds	r2, #25
 800617a:	9904      	ldr	r1, [sp, #16]
 800617c:	9803      	ldr	r0, [sp, #12]
 800617e:	9e05      	ldr	r6, [sp, #20]
 8006180:	47b0      	blx	r6
 8006182:	1c43      	adds	r3, r0, #1
 8006184:	d02c      	beq.n	80061e0 <_printf_i+0x200>
 8006186:	3501      	adds	r5, #1
 8006188:	68e3      	ldr	r3, [r4, #12]
 800618a:	9a07      	ldr	r2, [sp, #28]
 800618c:	1a9b      	subs	r3, r3, r2
 800618e:	42ab      	cmp	r3, r5
 8006190:	dcf0      	bgt.n	8006174 <_printf_i+0x194>
 8006192:	e7e9      	b.n	8006168 <_printf_i+0x188>
 8006194:	2500      	movs	r5, #0
 8006196:	e7f7      	b.n	8006188 <_printf_i+0x1a8>
 8006198:	2800      	cmp	r0, #0
 800619a:	d0ad      	beq.n	80060f8 <_printf_i+0x118>
 800619c:	9d02      	ldr	r5, [sp, #8]
 800619e:	0039      	movs	r1, r7
 80061a0:	f7fa f838 	bl	8000214 <__aeabi_uidivmod>
 80061a4:	5c73      	ldrb	r3, [r6, r1]
 80061a6:	3d01      	subs	r5, #1
 80061a8:	702b      	strb	r3, [r5, #0]
 80061aa:	2800      	cmp	r0, #0
 80061ac:	d1f7      	bne.n	800619e <_printf_i+0x1be>
 80061ae:	2f08      	cmp	r7, #8
 80061b0:	d109      	bne.n	80061c6 <_printf_i+0x1e6>
 80061b2:	6823      	ldr	r3, [r4, #0]
 80061b4:	07db      	lsls	r3, r3, #31
 80061b6:	d506      	bpl.n	80061c6 <_printf_i+0x1e6>
 80061b8:	6863      	ldr	r3, [r4, #4]
 80061ba:	6922      	ldr	r2, [r4, #16]
 80061bc:	4293      	cmp	r3, r2
 80061be:	dc02      	bgt.n	80061c6 <_printf_i+0x1e6>
 80061c0:	2330      	movs	r3, #48	; 0x30
 80061c2:	3d01      	subs	r5, #1
 80061c4:	702b      	strb	r3, [r5, #0]
 80061c6:	9b02      	ldr	r3, [sp, #8]
 80061c8:	1b5b      	subs	r3, r3, r5
 80061ca:	6123      	str	r3, [r4, #16]
 80061cc:	9b05      	ldr	r3, [sp, #20]
 80061ce:	aa07      	add	r2, sp, #28
 80061d0:	9300      	str	r3, [sp, #0]
 80061d2:	0021      	movs	r1, r4
 80061d4:	9b04      	ldr	r3, [sp, #16]
 80061d6:	9803      	ldr	r0, [sp, #12]
 80061d8:	f7ff fe94 	bl	8005f04 <_printf_common>
 80061dc:	1c43      	adds	r3, r0, #1
 80061de:	d1b8      	bne.n	8006152 <_printf_i+0x172>
 80061e0:	2001      	movs	r0, #1
 80061e2:	4240      	negs	r0, r0
 80061e4:	b009      	add	sp, #36	; 0x24
 80061e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80061e8:	080069fe 	.word	0x080069fe
 80061ec:	08006a0f 	.word	0x08006a0f

080061f0 <memchr>:
 80061f0:	b2c9      	uxtb	r1, r1
 80061f2:	1882      	adds	r2, r0, r2
 80061f4:	4290      	cmp	r0, r2
 80061f6:	d101      	bne.n	80061fc <memchr+0xc>
 80061f8:	2000      	movs	r0, #0
 80061fa:	4770      	bx	lr
 80061fc:	7803      	ldrb	r3, [r0, #0]
 80061fe:	428b      	cmp	r3, r1
 8006200:	d0fb      	beq.n	80061fa <memchr+0xa>
 8006202:	3001      	adds	r0, #1
 8006204:	e7f6      	b.n	80061f4 <memchr+0x4>

08006206 <memmove>:
 8006206:	b510      	push	{r4, lr}
 8006208:	4288      	cmp	r0, r1
 800620a:	d902      	bls.n	8006212 <memmove+0xc>
 800620c:	188b      	adds	r3, r1, r2
 800620e:	4298      	cmp	r0, r3
 8006210:	d303      	bcc.n	800621a <memmove+0x14>
 8006212:	2300      	movs	r3, #0
 8006214:	e007      	b.n	8006226 <memmove+0x20>
 8006216:	5c8b      	ldrb	r3, [r1, r2]
 8006218:	5483      	strb	r3, [r0, r2]
 800621a:	3a01      	subs	r2, #1
 800621c:	d2fb      	bcs.n	8006216 <memmove+0x10>
 800621e:	bd10      	pop	{r4, pc}
 8006220:	5ccc      	ldrb	r4, [r1, r3]
 8006222:	54c4      	strb	r4, [r0, r3]
 8006224:	3301      	adds	r3, #1
 8006226:	429a      	cmp	r2, r3
 8006228:	d1fa      	bne.n	8006220 <memmove+0x1a>
 800622a:	e7f8      	b.n	800621e <memmove+0x18>

0800622c <_free_r>:
 800622c:	b570      	push	{r4, r5, r6, lr}
 800622e:	0005      	movs	r5, r0
 8006230:	2900      	cmp	r1, #0
 8006232:	d010      	beq.n	8006256 <_free_r+0x2a>
 8006234:	1f0c      	subs	r4, r1, #4
 8006236:	6823      	ldr	r3, [r4, #0]
 8006238:	2b00      	cmp	r3, #0
 800623a:	da00      	bge.n	800623e <_free_r+0x12>
 800623c:	18e4      	adds	r4, r4, r3
 800623e:	0028      	movs	r0, r5
 8006240:	f000 f8d4 	bl	80063ec <__malloc_lock>
 8006244:	4a1d      	ldr	r2, [pc, #116]	; (80062bc <_free_r+0x90>)
 8006246:	6813      	ldr	r3, [r2, #0]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d105      	bne.n	8006258 <_free_r+0x2c>
 800624c:	6063      	str	r3, [r4, #4]
 800624e:	6014      	str	r4, [r2, #0]
 8006250:	0028      	movs	r0, r5
 8006252:	f000 f8cc 	bl	80063ee <__malloc_unlock>
 8006256:	bd70      	pop	{r4, r5, r6, pc}
 8006258:	42a3      	cmp	r3, r4
 800625a:	d909      	bls.n	8006270 <_free_r+0x44>
 800625c:	6821      	ldr	r1, [r4, #0]
 800625e:	1860      	adds	r0, r4, r1
 8006260:	4283      	cmp	r3, r0
 8006262:	d1f3      	bne.n	800624c <_free_r+0x20>
 8006264:	6818      	ldr	r0, [r3, #0]
 8006266:	685b      	ldr	r3, [r3, #4]
 8006268:	1841      	adds	r1, r0, r1
 800626a:	6021      	str	r1, [r4, #0]
 800626c:	e7ee      	b.n	800624c <_free_r+0x20>
 800626e:	0013      	movs	r3, r2
 8006270:	685a      	ldr	r2, [r3, #4]
 8006272:	2a00      	cmp	r2, #0
 8006274:	d001      	beq.n	800627a <_free_r+0x4e>
 8006276:	42a2      	cmp	r2, r4
 8006278:	d9f9      	bls.n	800626e <_free_r+0x42>
 800627a:	6819      	ldr	r1, [r3, #0]
 800627c:	1858      	adds	r0, r3, r1
 800627e:	42a0      	cmp	r0, r4
 8006280:	d10b      	bne.n	800629a <_free_r+0x6e>
 8006282:	6820      	ldr	r0, [r4, #0]
 8006284:	1809      	adds	r1, r1, r0
 8006286:	1858      	adds	r0, r3, r1
 8006288:	6019      	str	r1, [r3, #0]
 800628a:	4282      	cmp	r2, r0
 800628c:	d1e0      	bne.n	8006250 <_free_r+0x24>
 800628e:	6810      	ldr	r0, [r2, #0]
 8006290:	6852      	ldr	r2, [r2, #4]
 8006292:	1841      	adds	r1, r0, r1
 8006294:	6019      	str	r1, [r3, #0]
 8006296:	605a      	str	r2, [r3, #4]
 8006298:	e7da      	b.n	8006250 <_free_r+0x24>
 800629a:	42a0      	cmp	r0, r4
 800629c:	d902      	bls.n	80062a4 <_free_r+0x78>
 800629e:	230c      	movs	r3, #12
 80062a0:	602b      	str	r3, [r5, #0]
 80062a2:	e7d5      	b.n	8006250 <_free_r+0x24>
 80062a4:	6821      	ldr	r1, [r4, #0]
 80062a6:	1860      	adds	r0, r4, r1
 80062a8:	4282      	cmp	r2, r0
 80062aa:	d103      	bne.n	80062b4 <_free_r+0x88>
 80062ac:	6810      	ldr	r0, [r2, #0]
 80062ae:	6852      	ldr	r2, [r2, #4]
 80062b0:	1841      	adds	r1, r0, r1
 80062b2:	6021      	str	r1, [r4, #0]
 80062b4:	6062      	str	r2, [r4, #4]
 80062b6:	605c      	str	r4, [r3, #4]
 80062b8:	e7ca      	b.n	8006250 <_free_r+0x24>
 80062ba:	46c0      	nop			; (mov r8, r8)
 80062bc:	200000c0 	.word	0x200000c0

080062c0 <_malloc_r>:
 80062c0:	2303      	movs	r3, #3
 80062c2:	b570      	push	{r4, r5, r6, lr}
 80062c4:	1ccd      	adds	r5, r1, #3
 80062c6:	439d      	bics	r5, r3
 80062c8:	3508      	adds	r5, #8
 80062ca:	0006      	movs	r6, r0
 80062cc:	2d0c      	cmp	r5, #12
 80062ce:	d21e      	bcs.n	800630e <_malloc_r+0x4e>
 80062d0:	250c      	movs	r5, #12
 80062d2:	42a9      	cmp	r1, r5
 80062d4:	d81d      	bhi.n	8006312 <_malloc_r+0x52>
 80062d6:	0030      	movs	r0, r6
 80062d8:	f000 f888 	bl	80063ec <__malloc_lock>
 80062dc:	4a25      	ldr	r2, [pc, #148]	; (8006374 <_malloc_r+0xb4>)
 80062de:	6814      	ldr	r4, [r2, #0]
 80062e0:	0021      	movs	r1, r4
 80062e2:	2900      	cmp	r1, #0
 80062e4:	d119      	bne.n	800631a <_malloc_r+0x5a>
 80062e6:	4c24      	ldr	r4, [pc, #144]	; (8006378 <_malloc_r+0xb8>)
 80062e8:	6823      	ldr	r3, [r4, #0]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d103      	bne.n	80062f6 <_malloc_r+0x36>
 80062ee:	0030      	movs	r0, r6
 80062f0:	f000 f86a 	bl	80063c8 <_sbrk_r>
 80062f4:	6020      	str	r0, [r4, #0]
 80062f6:	0029      	movs	r1, r5
 80062f8:	0030      	movs	r0, r6
 80062fa:	f000 f865 	bl	80063c8 <_sbrk_r>
 80062fe:	1c43      	adds	r3, r0, #1
 8006300:	d12b      	bne.n	800635a <_malloc_r+0x9a>
 8006302:	230c      	movs	r3, #12
 8006304:	0030      	movs	r0, r6
 8006306:	6033      	str	r3, [r6, #0]
 8006308:	f000 f871 	bl	80063ee <__malloc_unlock>
 800630c:	e003      	b.n	8006316 <_malloc_r+0x56>
 800630e:	2d00      	cmp	r5, #0
 8006310:	dadf      	bge.n	80062d2 <_malloc_r+0x12>
 8006312:	230c      	movs	r3, #12
 8006314:	6033      	str	r3, [r6, #0]
 8006316:	2000      	movs	r0, #0
 8006318:	bd70      	pop	{r4, r5, r6, pc}
 800631a:	680b      	ldr	r3, [r1, #0]
 800631c:	1b5b      	subs	r3, r3, r5
 800631e:	d419      	bmi.n	8006354 <_malloc_r+0x94>
 8006320:	2b0b      	cmp	r3, #11
 8006322:	d903      	bls.n	800632c <_malloc_r+0x6c>
 8006324:	600b      	str	r3, [r1, #0]
 8006326:	18cc      	adds	r4, r1, r3
 8006328:	6025      	str	r5, [r4, #0]
 800632a:	e003      	b.n	8006334 <_malloc_r+0x74>
 800632c:	684b      	ldr	r3, [r1, #4]
 800632e:	428c      	cmp	r4, r1
 8006330:	d10d      	bne.n	800634e <_malloc_r+0x8e>
 8006332:	6013      	str	r3, [r2, #0]
 8006334:	0030      	movs	r0, r6
 8006336:	f000 f85a 	bl	80063ee <__malloc_unlock>
 800633a:	0020      	movs	r0, r4
 800633c:	2207      	movs	r2, #7
 800633e:	300b      	adds	r0, #11
 8006340:	1d23      	adds	r3, r4, #4
 8006342:	4390      	bics	r0, r2
 8006344:	1ac3      	subs	r3, r0, r3
 8006346:	d0e7      	beq.n	8006318 <_malloc_r+0x58>
 8006348:	425a      	negs	r2, r3
 800634a:	50e2      	str	r2, [r4, r3]
 800634c:	e7e4      	b.n	8006318 <_malloc_r+0x58>
 800634e:	6063      	str	r3, [r4, #4]
 8006350:	000c      	movs	r4, r1
 8006352:	e7ef      	b.n	8006334 <_malloc_r+0x74>
 8006354:	000c      	movs	r4, r1
 8006356:	6849      	ldr	r1, [r1, #4]
 8006358:	e7c3      	b.n	80062e2 <_malloc_r+0x22>
 800635a:	2303      	movs	r3, #3
 800635c:	1cc4      	adds	r4, r0, #3
 800635e:	439c      	bics	r4, r3
 8006360:	42a0      	cmp	r0, r4
 8006362:	d0e1      	beq.n	8006328 <_malloc_r+0x68>
 8006364:	1a21      	subs	r1, r4, r0
 8006366:	0030      	movs	r0, r6
 8006368:	f000 f82e 	bl	80063c8 <_sbrk_r>
 800636c:	1c43      	adds	r3, r0, #1
 800636e:	d1db      	bne.n	8006328 <_malloc_r+0x68>
 8006370:	e7c7      	b.n	8006302 <_malloc_r+0x42>
 8006372:	46c0      	nop			; (mov r8, r8)
 8006374:	200000c0 	.word	0x200000c0
 8006378:	200000c4 	.word	0x200000c4

0800637c <_realloc_r>:
 800637c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800637e:	0007      	movs	r7, r0
 8006380:	000d      	movs	r5, r1
 8006382:	0016      	movs	r6, r2
 8006384:	2900      	cmp	r1, #0
 8006386:	d105      	bne.n	8006394 <_realloc_r+0x18>
 8006388:	0011      	movs	r1, r2
 800638a:	f7ff ff99 	bl	80062c0 <_malloc_r>
 800638e:	0004      	movs	r4, r0
 8006390:	0020      	movs	r0, r4
 8006392:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006394:	2a00      	cmp	r2, #0
 8006396:	d103      	bne.n	80063a0 <_realloc_r+0x24>
 8006398:	f7ff ff48 	bl	800622c <_free_r>
 800639c:	0034      	movs	r4, r6
 800639e:	e7f7      	b.n	8006390 <_realloc_r+0x14>
 80063a0:	f000 f826 	bl	80063f0 <_malloc_usable_size_r>
 80063a4:	002c      	movs	r4, r5
 80063a6:	42b0      	cmp	r0, r6
 80063a8:	d2f2      	bcs.n	8006390 <_realloc_r+0x14>
 80063aa:	0031      	movs	r1, r6
 80063ac:	0038      	movs	r0, r7
 80063ae:	f7ff ff87 	bl	80062c0 <_malloc_r>
 80063b2:	1e04      	subs	r4, r0, #0
 80063b4:	d0ec      	beq.n	8006390 <_realloc_r+0x14>
 80063b6:	0029      	movs	r1, r5
 80063b8:	0032      	movs	r2, r6
 80063ba:	f7ff fc11 	bl	8005be0 <memcpy>
 80063be:	0029      	movs	r1, r5
 80063c0:	0038      	movs	r0, r7
 80063c2:	f7ff ff33 	bl	800622c <_free_r>
 80063c6:	e7e3      	b.n	8006390 <_realloc_r+0x14>

080063c8 <_sbrk_r>:
 80063c8:	2300      	movs	r3, #0
 80063ca:	b570      	push	{r4, r5, r6, lr}
 80063cc:	4c06      	ldr	r4, [pc, #24]	; (80063e8 <_sbrk_r+0x20>)
 80063ce:	0005      	movs	r5, r0
 80063d0:	0008      	movs	r0, r1
 80063d2:	6023      	str	r3, [r4, #0]
 80063d4:	f7fb fd38 	bl	8001e48 <_sbrk>
 80063d8:	1c43      	adds	r3, r0, #1
 80063da:	d103      	bne.n	80063e4 <_sbrk_r+0x1c>
 80063dc:	6823      	ldr	r3, [r4, #0]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d000      	beq.n	80063e4 <_sbrk_r+0x1c>
 80063e2:	602b      	str	r3, [r5, #0]
 80063e4:	bd70      	pop	{r4, r5, r6, pc}
 80063e6:	46c0      	nop			; (mov r8, r8)
 80063e8:	200002a8 	.word	0x200002a8

080063ec <__malloc_lock>:
 80063ec:	4770      	bx	lr

080063ee <__malloc_unlock>:
 80063ee:	4770      	bx	lr

080063f0 <_malloc_usable_size_r>:
 80063f0:	1f0b      	subs	r3, r1, #4
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	1f18      	subs	r0, r3, #4
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	da01      	bge.n	80063fe <_malloc_usable_size_r+0xe>
 80063fa:	580b      	ldr	r3, [r1, r0]
 80063fc:	18c0      	adds	r0, r0, r3
 80063fe:	4770      	bx	lr

08006400 <_init>:
 8006400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006402:	46c0      	nop			; (mov r8, r8)
 8006404:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006406:	bc08      	pop	{r3}
 8006408:	469e      	mov	lr, r3
 800640a:	4770      	bx	lr

0800640c <_fini>:
 800640c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800640e:	46c0      	nop			; (mov r8, r8)
 8006410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006412:	bc08      	pop	{r3}
 8006414:	469e      	mov	lr, r3
 8006416:	4770      	bx	lr
