
project_L0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b33c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ba0  0800b3fc  0800b3fc  0001b3fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bf9c  0800bf9c  000200d0  2**0
                  CONTENTS
  4 .ARM          00000000  0800bf9c  0800bf9c  000200d0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800bf9c  0800bf9c  000200d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bf9c  0800bf9c  0001bf9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bfa0  0800bfa0  0001bfa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d0  20000000  0800bfa4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d8  200000d0  0800c074  000200d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003a8  0800c074  000203a8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a101  00000000  00000000  000200f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003362  00000000  00000000  0003a1f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001400  00000000  00000000  0003d560  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001250  00000000  00000000  0003e960  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000183fe  00000000  00000000  0003fbb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011918  00000000  00000000  00057fae  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008dc43  00000000  00000000  000698c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f7509  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c2c  00000000  00000000  000f7584  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200000d0 	.word	0x200000d0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800b3e4 	.word	0x0800b3e4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200000d4 	.word	0x200000d4
 8000104:	0800b3e4 	.word	0x0800b3e4

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f8f0 	bl	8000400 <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__divsi3>:
 800022c:	4603      	mov	r3, r0
 800022e:	430b      	orrs	r3, r1
 8000230:	d47f      	bmi.n	8000332 <__divsi3+0x106>
 8000232:	2200      	movs	r2, #0
 8000234:	0843      	lsrs	r3, r0, #1
 8000236:	428b      	cmp	r3, r1
 8000238:	d374      	bcc.n	8000324 <__divsi3+0xf8>
 800023a:	0903      	lsrs	r3, r0, #4
 800023c:	428b      	cmp	r3, r1
 800023e:	d35f      	bcc.n	8000300 <__divsi3+0xd4>
 8000240:	0a03      	lsrs	r3, r0, #8
 8000242:	428b      	cmp	r3, r1
 8000244:	d344      	bcc.n	80002d0 <__divsi3+0xa4>
 8000246:	0b03      	lsrs	r3, r0, #12
 8000248:	428b      	cmp	r3, r1
 800024a:	d328      	bcc.n	800029e <__divsi3+0x72>
 800024c:	0c03      	lsrs	r3, r0, #16
 800024e:	428b      	cmp	r3, r1
 8000250:	d30d      	bcc.n	800026e <__divsi3+0x42>
 8000252:	22ff      	movs	r2, #255	; 0xff
 8000254:	0209      	lsls	r1, r1, #8
 8000256:	ba12      	rev	r2, r2
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d302      	bcc.n	8000264 <__divsi3+0x38>
 800025e:	1212      	asrs	r2, r2, #8
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	d065      	beq.n	8000330 <__divsi3+0x104>
 8000264:	0b03      	lsrs	r3, r0, #12
 8000266:	428b      	cmp	r3, r1
 8000268:	d319      	bcc.n	800029e <__divsi3+0x72>
 800026a:	e000      	b.n	800026e <__divsi3+0x42>
 800026c:	0a09      	lsrs	r1, r1, #8
 800026e:	0bc3      	lsrs	r3, r0, #15
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x4c>
 8000274:	03cb      	lsls	r3, r1, #15
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b83      	lsrs	r3, r0, #14
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x58>
 8000280:	038b      	lsls	r3, r1, #14
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b43      	lsrs	r3, r0, #13
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x64>
 800028c:	034b      	lsls	r3, r1, #13
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b03      	lsrs	r3, r0, #12
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x70>
 8000298:	030b      	lsls	r3, r1, #12
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0ac3      	lsrs	r3, r0, #11
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x7c>
 80002a4:	02cb      	lsls	r3, r1, #11
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a83      	lsrs	r3, r0, #10
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x88>
 80002b0:	028b      	lsls	r3, r1, #10
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a43      	lsrs	r3, r0, #9
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x94>
 80002bc:	024b      	lsls	r3, r1, #9
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a03      	lsrs	r3, r0, #8
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0xa0>
 80002c8:	020b      	lsls	r3, r1, #8
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	d2cd      	bcs.n	800026c <__divsi3+0x40>
 80002d0:	09c3      	lsrs	r3, r0, #7
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xae>
 80002d6:	01cb      	lsls	r3, r1, #7
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0983      	lsrs	r3, r0, #6
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xba>
 80002e2:	018b      	lsls	r3, r1, #6
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0943      	lsrs	r3, r0, #5
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xc6>
 80002ee:	014b      	lsls	r3, r1, #5
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0903      	lsrs	r3, r0, #4
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xd2>
 80002fa:	010b      	lsls	r3, r1, #4
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	08c3      	lsrs	r3, r0, #3
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xde>
 8000306:	00cb      	lsls	r3, r1, #3
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0883      	lsrs	r3, r0, #2
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xea>
 8000312:	008b      	lsls	r3, r1, #2
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0843      	lsrs	r3, r0, #1
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xf6>
 800031e:	004b      	lsls	r3, r1, #1
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	1a41      	subs	r1, r0, r1
 8000326:	d200      	bcs.n	800032a <__divsi3+0xfe>
 8000328:	4601      	mov	r1, r0
 800032a:	4152      	adcs	r2, r2
 800032c:	4610      	mov	r0, r2
 800032e:	4770      	bx	lr
 8000330:	e05d      	b.n	80003ee <__divsi3+0x1c2>
 8000332:	0fca      	lsrs	r2, r1, #31
 8000334:	d000      	beq.n	8000338 <__divsi3+0x10c>
 8000336:	4249      	negs	r1, r1
 8000338:	1003      	asrs	r3, r0, #32
 800033a:	d300      	bcc.n	800033e <__divsi3+0x112>
 800033c:	4240      	negs	r0, r0
 800033e:	4053      	eors	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	469c      	mov	ip, r3
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d32d      	bcc.n	80003a6 <__divsi3+0x17a>
 800034a:	0a03      	lsrs	r3, r0, #8
 800034c:	428b      	cmp	r3, r1
 800034e:	d312      	bcc.n	8000376 <__divsi3+0x14a>
 8000350:	22fc      	movs	r2, #252	; 0xfc
 8000352:	0189      	lsls	r1, r1, #6
 8000354:	ba12      	rev	r2, r2
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d30c      	bcc.n	8000376 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d308      	bcc.n	8000376 <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	1192      	asrs	r2, r2, #6
 8000368:	428b      	cmp	r3, r1
 800036a:	d304      	bcc.n	8000376 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	d03a      	beq.n	80003e6 <__divsi3+0x1ba>
 8000370:	1192      	asrs	r2, r2, #6
 8000372:	e000      	b.n	8000376 <__divsi3+0x14a>
 8000374:	0989      	lsrs	r1, r1, #6
 8000376:	09c3      	lsrs	r3, r0, #7
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x154>
 800037c:	01cb      	lsls	r3, r1, #7
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0983      	lsrs	r3, r0, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x160>
 8000388:	018b      	lsls	r3, r1, #6
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0943      	lsrs	r3, r0, #5
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x16c>
 8000394:	014b      	lsls	r3, r1, #5
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0903      	lsrs	r3, r0, #4
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x178>
 80003a0:	010b      	lsls	r3, r1, #4
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	08c3      	lsrs	r3, r0, #3
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x184>
 80003ac:	00cb      	lsls	r3, r1, #3
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0883      	lsrs	r3, r0, #2
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x190>
 80003b8:	008b      	lsls	r3, r1, #2
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	d2d9      	bcs.n	8000374 <__divsi3+0x148>
 80003c0:	0843      	lsrs	r3, r0, #1
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d301      	bcc.n	80003ca <__divsi3+0x19e>
 80003c6:	004b      	lsls	r3, r1, #1
 80003c8:	1ac0      	subs	r0, r0, r3
 80003ca:	4152      	adcs	r2, r2
 80003cc:	1a41      	subs	r1, r0, r1
 80003ce:	d200      	bcs.n	80003d2 <__divsi3+0x1a6>
 80003d0:	4601      	mov	r1, r0
 80003d2:	4663      	mov	r3, ip
 80003d4:	4152      	adcs	r2, r2
 80003d6:	105b      	asrs	r3, r3, #1
 80003d8:	4610      	mov	r0, r2
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x1b4>
 80003dc:	4240      	negs	r0, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d500      	bpl.n	80003e4 <__divsi3+0x1b8>
 80003e2:	4249      	negs	r1, r1
 80003e4:	4770      	bx	lr
 80003e6:	4663      	mov	r3, ip
 80003e8:	105b      	asrs	r3, r3, #1
 80003ea:	d300      	bcc.n	80003ee <__divsi3+0x1c2>
 80003ec:	4240      	negs	r0, r0
 80003ee:	b501      	push	{r0, lr}
 80003f0:	2000      	movs	r0, #0
 80003f2:	f000 f805 	bl	8000400 <__aeabi_idiv0>
 80003f6:	bd02      	pop	{r1, pc}

080003f8 <__aeabi_idivmod>:
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d0f8      	beq.n	80003ee <__divsi3+0x1c2>
 80003fc:	e716      	b.n	800022c <__divsi3>
 80003fe:	4770      	bx	lr

08000400 <__aeabi_idiv0>:
 8000400:	4770      	bx	lr
 8000402:	46c0      	nop			; (mov r8, r8)

08000404 <__aeabi_cfrcmple>:
 8000404:	4684      	mov	ip, r0
 8000406:	1c08      	adds	r0, r1, #0
 8000408:	4661      	mov	r1, ip
 800040a:	e7ff      	b.n	800040c <__aeabi_cfcmpeq>

0800040c <__aeabi_cfcmpeq>:
 800040c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800040e:	f000 f8c1 	bl	8000594 <__lesf2>
 8000412:	2800      	cmp	r0, #0
 8000414:	d401      	bmi.n	800041a <__aeabi_cfcmpeq+0xe>
 8000416:	2100      	movs	r1, #0
 8000418:	42c8      	cmn	r0, r1
 800041a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800041c <__aeabi_fcmpeq>:
 800041c:	b510      	push	{r4, lr}
 800041e:	f000 f843 	bl	80004a8 <__eqsf2>
 8000422:	4240      	negs	r0, r0
 8000424:	3001      	adds	r0, #1
 8000426:	bd10      	pop	{r4, pc}

08000428 <__aeabi_fcmplt>:
 8000428:	b510      	push	{r4, lr}
 800042a:	f000 f8b3 	bl	8000594 <__lesf2>
 800042e:	2800      	cmp	r0, #0
 8000430:	db01      	blt.n	8000436 <__aeabi_fcmplt+0xe>
 8000432:	2000      	movs	r0, #0
 8000434:	bd10      	pop	{r4, pc}
 8000436:	2001      	movs	r0, #1
 8000438:	bd10      	pop	{r4, pc}
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_fcmple>:
 800043c:	b510      	push	{r4, lr}
 800043e:	f000 f8a9 	bl	8000594 <__lesf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	dd01      	ble.n	800044a <__aeabi_fcmple+0xe>
 8000446:	2000      	movs	r0, #0
 8000448:	bd10      	pop	{r4, pc}
 800044a:	2001      	movs	r0, #1
 800044c:	bd10      	pop	{r4, pc}
 800044e:	46c0      	nop			; (mov r8, r8)

08000450 <__aeabi_fcmpgt>:
 8000450:	b510      	push	{r4, lr}
 8000452:	f000 f851 	bl	80004f8 <__gesf2>
 8000456:	2800      	cmp	r0, #0
 8000458:	dc01      	bgt.n	800045e <__aeabi_fcmpgt+0xe>
 800045a:	2000      	movs	r0, #0
 800045c:	bd10      	pop	{r4, pc}
 800045e:	2001      	movs	r0, #1
 8000460:	bd10      	pop	{r4, pc}
 8000462:	46c0      	nop			; (mov r8, r8)

08000464 <__aeabi_fcmpge>:
 8000464:	b510      	push	{r4, lr}
 8000466:	f000 f847 	bl	80004f8 <__gesf2>
 800046a:	2800      	cmp	r0, #0
 800046c:	da01      	bge.n	8000472 <__aeabi_fcmpge+0xe>
 800046e:	2000      	movs	r0, #0
 8000470:	bd10      	pop	{r4, pc}
 8000472:	2001      	movs	r0, #1
 8000474:	bd10      	pop	{r4, pc}
 8000476:	46c0      	nop			; (mov r8, r8)

08000478 <__aeabi_f2uiz>:
 8000478:	219e      	movs	r1, #158	; 0x9e
 800047a:	b510      	push	{r4, lr}
 800047c:	05c9      	lsls	r1, r1, #23
 800047e:	1c04      	adds	r4, r0, #0
 8000480:	f7ff fff0 	bl	8000464 <__aeabi_fcmpge>
 8000484:	2800      	cmp	r0, #0
 8000486:	d103      	bne.n	8000490 <__aeabi_f2uiz+0x18>
 8000488:	1c20      	adds	r0, r4, #0
 800048a:	f000 fa97 	bl	80009bc <__aeabi_f2iz>
 800048e:	bd10      	pop	{r4, pc}
 8000490:	219e      	movs	r1, #158	; 0x9e
 8000492:	1c20      	adds	r0, r4, #0
 8000494:	05c9      	lsls	r1, r1, #23
 8000496:	f000 f8cd 	bl	8000634 <__aeabi_fsub>
 800049a:	f000 fa8f 	bl	80009bc <__aeabi_f2iz>
 800049e:	2380      	movs	r3, #128	; 0x80
 80004a0:	061b      	lsls	r3, r3, #24
 80004a2:	469c      	mov	ip, r3
 80004a4:	4460      	add	r0, ip
 80004a6:	e7f2      	b.n	800048e <__aeabi_f2uiz+0x16>

080004a8 <__eqsf2>:
 80004a8:	b570      	push	{r4, r5, r6, lr}
 80004aa:	0042      	lsls	r2, r0, #1
 80004ac:	024e      	lsls	r6, r1, #9
 80004ae:	004c      	lsls	r4, r1, #1
 80004b0:	0245      	lsls	r5, r0, #9
 80004b2:	0a6d      	lsrs	r5, r5, #9
 80004b4:	0e12      	lsrs	r2, r2, #24
 80004b6:	0fc3      	lsrs	r3, r0, #31
 80004b8:	0a76      	lsrs	r6, r6, #9
 80004ba:	0e24      	lsrs	r4, r4, #24
 80004bc:	0fc9      	lsrs	r1, r1, #31
 80004be:	2aff      	cmp	r2, #255	; 0xff
 80004c0:	d00f      	beq.n	80004e2 <__eqsf2+0x3a>
 80004c2:	2cff      	cmp	r4, #255	; 0xff
 80004c4:	d011      	beq.n	80004ea <__eqsf2+0x42>
 80004c6:	2001      	movs	r0, #1
 80004c8:	42a2      	cmp	r2, r4
 80004ca:	d000      	beq.n	80004ce <__eqsf2+0x26>
 80004cc:	bd70      	pop	{r4, r5, r6, pc}
 80004ce:	42b5      	cmp	r5, r6
 80004d0:	d1fc      	bne.n	80004cc <__eqsf2+0x24>
 80004d2:	428b      	cmp	r3, r1
 80004d4:	d00d      	beq.n	80004f2 <__eqsf2+0x4a>
 80004d6:	2a00      	cmp	r2, #0
 80004d8:	d1f8      	bne.n	80004cc <__eqsf2+0x24>
 80004da:	0028      	movs	r0, r5
 80004dc:	1e45      	subs	r5, r0, #1
 80004de:	41a8      	sbcs	r0, r5
 80004e0:	e7f4      	b.n	80004cc <__eqsf2+0x24>
 80004e2:	2001      	movs	r0, #1
 80004e4:	2d00      	cmp	r5, #0
 80004e6:	d1f1      	bne.n	80004cc <__eqsf2+0x24>
 80004e8:	e7eb      	b.n	80004c2 <__eqsf2+0x1a>
 80004ea:	2001      	movs	r0, #1
 80004ec:	2e00      	cmp	r6, #0
 80004ee:	d1ed      	bne.n	80004cc <__eqsf2+0x24>
 80004f0:	e7e9      	b.n	80004c6 <__eqsf2+0x1e>
 80004f2:	2000      	movs	r0, #0
 80004f4:	e7ea      	b.n	80004cc <__eqsf2+0x24>
 80004f6:	46c0      	nop			; (mov r8, r8)

080004f8 <__gesf2>:
 80004f8:	b570      	push	{r4, r5, r6, lr}
 80004fa:	004a      	lsls	r2, r1, #1
 80004fc:	024e      	lsls	r6, r1, #9
 80004fe:	0245      	lsls	r5, r0, #9
 8000500:	0044      	lsls	r4, r0, #1
 8000502:	0a6d      	lsrs	r5, r5, #9
 8000504:	0e24      	lsrs	r4, r4, #24
 8000506:	0fc3      	lsrs	r3, r0, #31
 8000508:	0a76      	lsrs	r6, r6, #9
 800050a:	0e12      	lsrs	r2, r2, #24
 800050c:	0fc9      	lsrs	r1, r1, #31
 800050e:	2cff      	cmp	r4, #255	; 0xff
 8000510:	d015      	beq.n	800053e <__gesf2+0x46>
 8000512:	2aff      	cmp	r2, #255	; 0xff
 8000514:	d00e      	beq.n	8000534 <__gesf2+0x3c>
 8000516:	2c00      	cmp	r4, #0
 8000518:	d115      	bne.n	8000546 <__gesf2+0x4e>
 800051a:	2a00      	cmp	r2, #0
 800051c:	d101      	bne.n	8000522 <__gesf2+0x2a>
 800051e:	2e00      	cmp	r6, #0
 8000520:	d01c      	beq.n	800055c <__gesf2+0x64>
 8000522:	2d00      	cmp	r5, #0
 8000524:	d014      	beq.n	8000550 <__gesf2+0x58>
 8000526:	428b      	cmp	r3, r1
 8000528:	d027      	beq.n	800057a <__gesf2+0x82>
 800052a:	2002      	movs	r0, #2
 800052c:	3b01      	subs	r3, #1
 800052e:	4018      	ands	r0, r3
 8000530:	3801      	subs	r0, #1
 8000532:	bd70      	pop	{r4, r5, r6, pc}
 8000534:	2e00      	cmp	r6, #0
 8000536:	d0ee      	beq.n	8000516 <__gesf2+0x1e>
 8000538:	2002      	movs	r0, #2
 800053a:	4240      	negs	r0, r0
 800053c:	e7f9      	b.n	8000532 <__gesf2+0x3a>
 800053e:	2d00      	cmp	r5, #0
 8000540:	d1fa      	bne.n	8000538 <__gesf2+0x40>
 8000542:	2aff      	cmp	r2, #255	; 0xff
 8000544:	d00e      	beq.n	8000564 <__gesf2+0x6c>
 8000546:	2a00      	cmp	r2, #0
 8000548:	d10e      	bne.n	8000568 <__gesf2+0x70>
 800054a:	2e00      	cmp	r6, #0
 800054c:	d0ed      	beq.n	800052a <__gesf2+0x32>
 800054e:	e00b      	b.n	8000568 <__gesf2+0x70>
 8000550:	2301      	movs	r3, #1
 8000552:	3901      	subs	r1, #1
 8000554:	4399      	bics	r1, r3
 8000556:	0008      	movs	r0, r1
 8000558:	3001      	adds	r0, #1
 800055a:	e7ea      	b.n	8000532 <__gesf2+0x3a>
 800055c:	2000      	movs	r0, #0
 800055e:	2d00      	cmp	r5, #0
 8000560:	d0e7      	beq.n	8000532 <__gesf2+0x3a>
 8000562:	e7e2      	b.n	800052a <__gesf2+0x32>
 8000564:	2e00      	cmp	r6, #0
 8000566:	d1e7      	bne.n	8000538 <__gesf2+0x40>
 8000568:	428b      	cmp	r3, r1
 800056a:	d1de      	bne.n	800052a <__gesf2+0x32>
 800056c:	4294      	cmp	r4, r2
 800056e:	dd05      	ble.n	800057c <__gesf2+0x84>
 8000570:	2102      	movs	r1, #2
 8000572:	1e58      	subs	r0, r3, #1
 8000574:	4008      	ands	r0, r1
 8000576:	3801      	subs	r0, #1
 8000578:	e7db      	b.n	8000532 <__gesf2+0x3a>
 800057a:	2400      	movs	r4, #0
 800057c:	42a2      	cmp	r2, r4
 800057e:	dc04      	bgt.n	800058a <__gesf2+0x92>
 8000580:	42b5      	cmp	r5, r6
 8000582:	d8d2      	bhi.n	800052a <__gesf2+0x32>
 8000584:	2000      	movs	r0, #0
 8000586:	42b5      	cmp	r5, r6
 8000588:	d2d3      	bcs.n	8000532 <__gesf2+0x3a>
 800058a:	1e58      	subs	r0, r3, #1
 800058c:	2301      	movs	r3, #1
 800058e:	4398      	bics	r0, r3
 8000590:	3001      	adds	r0, #1
 8000592:	e7ce      	b.n	8000532 <__gesf2+0x3a>

08000594 <__lesf2>:
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	0042      	lsls	r2, r0, #1
 8000598:	0244      	lsls	r4, r0, #9
 800059a:	024d      	lsls	r5, r1, #9
 800059c:	0fc3      	lsrs	r3, r0, #31
 800059e:	0048      	lsls	r0, r1, #1
 80005a0:	0a64      	lsrs	r4, r4, #9
 80005a2:	0e12      	lsrs	r2, r2, #24
 80005a4:	0a6d      	lsrs	r5, r5, #9
 80005a6:	0e00      	lsrs	r0, r0, #24
 80005a8:	0fc9      	lsrs	r1, r1, #31
 80005aa:	2aff      	cmp	r2, #255	; 0xff
 80005ac:	d012      	beq.n	80005d4 <__lesf2+0x40>
 80005ae:	28ff      	cmp	r0, #255	; 0xff
 80005b0:	d00c      	beq.n	80005cc <__lesf2+0x38>
 80005b2:	2a00      	cmp	r2, #0
 80005b4:	d112      	bne.n	80005dc <__lesf2+0x48>
 80005b6:	2800      	cmp	r0, #0
 80005b8:	d119      	bne.n	80005ee <__lesf2+0x5a>
 80005ba:	2d00      	cmp	r5, #0
 80005bc:	d117      	bne.n	80005ee <__lesf2+0x5a>
 80005be:	2c00      	cmp	r4, #0
 80005c0:	d02b      	beq.n	800061a <__lesf2+0x86>
 80005c2:	2002      	movs	r0, #2
 80005c4:	3b01      	subs	r3, #1
 80005c6:	4018      	ands	r0, r3
 80005c8:	3801      	subs	r0, #1
 80005ca:	e026      	b.n	800061a <__lesf2+0x86>
 80005cc:	2d00      	cmp	r5, #0
 80005ce:	d0f0      	beq.n	80005b2 <__lesf2+0x1e>
 80005d0:	2002      	movs	r0, #2
 80005d2:	e022      	b.n	800061a <__lesf2+0x86>
 80005d4:	2c00      	cmp	r4, #0
 80005d6:	d1fb      	bne.n	80005d0 <__lesf2+0x3c>
 80005d8:	28ff      	cmp	r0, #255	; 0xff
 80005da:	d01f      	beq.n	800061c <__lesf2+0x88>
 80005dc:	2800      	cmp	r0, #0
 80005de:	d11f      	bne.n	8000620 <__lesf2+0x8c>
 80005e0:	2d00      	cmp	r5, #0
 80005e2:	d11d      	bne.n	8000620 <__lesf2+0x8c>
 80005e4:	2002      	movs	r0, #2
 80005e6:	3b01      	subs	r3, #1
 80005e8:	4018      	ands	r0, r3
 80005ea:	3801      	subs	r0, #1
 80005ec:	e015      	b.n	800061a <__lesf2+0x86>
 80005ee:	2c00      	cmp	r4, #0
 80005f0:	d00e      	beq.n	8000610 <__lesf2+0x7c>
 80005f2:	428b      	cmp	r3, r1
 80005f4:	d1e5      	bne.n	80005c2 <__lesf2+0x2e>
 80005f6:	2200      	movs	r2, #0
 80005f8:	4290      	cmp	r0, r2
 80005fa:	dc04      	bgt.n	8000606 <__lesf2+0x72>
 80005fc:	42ac      	cmp	r4, r5
 80005fe:	d8e0      	bhi.n	80005c2 <__lesf2+0x2e>
 8000600:	2000      	movs	r0, #0
 8000602:	42ac      	cmp	r4, r5
 8000604:	d209      	bcs.n	800061a <__lesf2+0x86>
 8000606:	1e58      	subs	r0, r3, #1
 8000608:	2301      	movs	r3, #1
 800060a:	4398      	bics	r0, r3
 800060c:	3001      	adds	r0, #1
 800060e:	e004      	b.n	800061a <__lesf2+0x86>
 8000610:	2301      	movs	r3, #1
 8000612:	3901      	subs	r1, #1
 8000614:	4399      	bics	r1, r3
 8000616:	0008      	movs	r0, r1
 8000618:	3001      	adds	r0, #1
 800061a:	bd30      	pop	{r4, r5, pc}
 800061c:	2d00      	cmp	r5, #0
 800061e:	d1d7      	bne.n	80005d0 <__lesf2+0x3c>
 8000620:	428b      	cmp	r3, r1
 8000622:	d1ce      	bne.n	80005c2 <__lesf2+0x2e>
 8000624:	4282      	cmp	r2, r0
 8000626:	dde7      	ble.n	80005f8 <__lesf2+0x64>
 8000628:	2102      	movs	r1, #2
 800062a:	1e58      	subs	r0, r3, #1
 800062c:	4008      	ands	r0, r1
 800062e:	3801      	subs	r0, #1
 8000630:	e7f3      	b.n	800061a <__lesf2+0x86>
 8000632:	46c0      	nop			; (mov r8, r8)

08000634 <__aeabi_fsub>:
 8000634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000636:	4647      	mov	r7, r8
 8000638:	46ce      	mov	lr, r9
 800063a:	0044      	lsls	r4, r0, #1
 800063c:	0fc2      	lsrs	r2, r0, #31
 800063e:	b580      	push	{r7, lr}
 8000640:	0247      	lsls	r7, r0, #9
 8000642:	0248      	lsls	r0, r1, #9
 8000644:	0a40      	lsrs	r0, r0, #9
 8000646:	4684      	mov	ip, r0
 8000648:	4666      	mov	r6, ip
 800064a:	0048      	lsls	r0, r1, #1
 800064c:	0a7f      	lsrs	r7, r7, #9
 800064e:	0e24      	lsrs	r4, r4, #24
 8000650:	00f6      	lsls	r6, r6, #3
 8000652:	0025      	movs	r5, r4
 8000654:	4690      	mov	r8, r2
 8000656:	00fb      	lsls	r3, r7, #3
 8000658:	0e00      	lsrs	r0, r0, #24
 800065a:	0fc9      	lsrs	r1, r1, #31
 800065c:	46b1      	mov	r9, r6
 800065e:	28ff      	cmp	r0, #255	; 0xff
 8000660:	d100      	bne.n	8000664 <__aeabi_fsub+0x30>
 8000662:	e085      	b.n	8000770 <__aeabi_fsub+0x13c>
 8000664:	2601      	movs	r6, #1
 8000666:	4071      	eors	r1, r6
 8000668:	1a26      	subs	r6, r4, r0
 800066a:	4291      	cmp	r1, r2
 800066c:	d057      	beq.n	800071e <__aeabi_fsub+0xea>
 800066e:	2e00      	cmp	r6, #0
 8000670:	dd43      	ble.n	80006fa <__aeabi_fsub+0xc6>
 8000672:	2800      	cmp	r0, #0
 8000674:	d000      	beq.n	8000678 <__aeabi_fsub+0x44>
 8000676:	e07f      	b.n	8000778 <__aeabi_fsub+0x144>
 8000678:	4649      	mov	r1, r9
 800067a:	2900      	cmp	r1, #0
 800067c:	d100      	bne.n	8000680 <__aeabi_fsub+0x4c>
 800067e:	e0aa      	b.n	80007d6 <__aeabi_fsub+0x1a2>
 8000680:	3e01      	subs	r6, #1
 8000682:	2e00      	cmp	r6, #0
 8000684:	d000      	beq.n	8000688 <__aeabi_fsub+0x54>
 8000686:	e0f7      	b.n	8000878 <__aeabi_fsub+0x244>
 8000688:	1a5b      	subs	r3, r3, r1
 800068a:	015a      	lsls	r2, r3, #5
 800068c:	d400      	bmi.n	8000690 <__aeabi_fsub+0x5c>
 800068e:	e08b      	b.n	80007a8 <__aeabi_fsub+0x174>
 8000690:	019b      	lsls	r3, r3, #6
 8000692:	099c      	lsrs	r4, r3, #6
 8000694:	0020      	movs	r0, r4
 8000696:	f001 f815 	bl	80016c4 <__clzsi2>
 800069a:	3805      	subs	r0, #5
 800069c:	4084      	lsls	r4, r0
 800069e:	4285      	cmp	r5, r0
 80006a0:	dd00      	ble.n	80006a4 <__aeabi_fsub+0x70>
 80006a2:	e0d3      	b.n	800084c <__aeabi_fsub+0x218>
 80006a4:	1b45      	subs	r5, r0, r5
 80006a6:	0023      	movs	r3, r4
 80006a8:	2020      	movs	r0, #32
 80006aa:	3501      	adds	r5, #1
 80006ac:	40eb      	lsrs	r3, r5
 80006ae:	1b45      	subs	r5, r0, r5
 80006b0:	40ac      	lsls	r4, r5
 80006b2:	1e62      	subs	r2, r4, #1
 80006b4:	4194      	sbcs	r4, r2
 80006b6:	4323      	orrs	r3, r4
 80006b8:	2407      	movs	r4, #7
 80006ba:	2500      	movs	r5, #0
 80006bc:	401c      	ands	r4, r3
 80006be:	2201      	movs	r2, #1
 80006c0:	4641      	mov	r1, r8
 80006c2:	400a      	ands	r2, r1
 80006c4:	2c00      	cmp	r4, #0
 80006c6:	d004      	beq.n	80006d2 <__aeabi_fsub+0x9e>
 80006c8:	210f      	movs	r1, #15
 80006ca:	4019      	ands	r1, r3
 80006cc:	2904      	cmp	r1, #4
 80006ce:	d000      	beq.n	80006d2 <__aeabi_fsub+0x9e>
 80006d0:	3304      	adds	r3, #4
 80006d2:	0159      	lsls	r1, r3, #5
 80006d4:	d400      	bmi.n	80006d8 <__aeabi_fsub+0xa4>
 80006d6:	e080      	b.n	80007da <__aeabi_fsub+0x1a6>
 80006d8:	3501      	adds	r5, #1
 80006da:	b2ec      	uxtb	r4, r5
 80006dc:	2dff      	cmp	r5, #255	; 0xff
 80006de:	d000      	beq.n	80006e2 <__aeabi_fsub+0xae>
 80006e0:	e0a3      	b.n	800082a <__aeabi_fsub+0x1f6>
 80006e2:	24ff      	movs	r4, #255	; 0xff
 80006e4:	2300      	movs	r3, #0
 80006e6:	025b      	lsls	r3, r3, #9
 80006e8:	05e4      	lsls	r4, r4, #23
 80006ea:	0a58      	lsrs	r0, r3, #9
 80006ec:	07d2      	lsls	r2, r2, #31
 80006ee:	4320      	orrs	r0, r4
 80006f0:	4310      	orrs	r0, r2
 80006f2:	bc0c      	pop	{r2, r3}
 80006f4:	4690      	mov	r8, r2
 80006f6:	4699      	mov	r9, r3
 80006f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80006fa:	2e00      	cmp	r6, #0
 80006fc:	d174      	bne.n	80007e8 <__aeabi_fsub+0x1b4>
 80006fe:	1c60      	adds	r0, r4, #1
 8000700:	b2c0      	uxtb	r0, r0
 8000702:	2801      	cmp	r0, #1
 8000704:	dc00      	bgt.n	8000708 <__aeabi_fsub+0xd4>
 8000706:	e0a7      	b.n	8000858 <__aeabi_fsub+0x224>
 8000708:	464a      	mov	r2, r9
 800070a:	1a9c      	subs	r4, r3, r2
 800070c:	0162      	lsls	r2, r4, #5
 800070e:	d500      	bpl.n	8000712 <__aeabi_fsub+0xde>
 8000710:	e0b6      	b.n	8000880 <__aeabi_fsub+0x24c>
 8000712:	2c00      	cmp	r4, #0
 8000714:	d1be      	bne.n	8000694 <__aeabi_fsub+0x60>
 8000716:	2200      	movs	r2, #0
 8000718:	2400      	movs	r4, #0
 800071a:	2300      	movs	r3, #0
 800071c:	e7e3      	b.n	80006e6 <__aeabi_fsub+0xb2>
 800071e:	2e00      	cmp	r6, #0
 8000720:	dc00      	bgt.n	8000724 <__aeabi_fsub+0xf0>
 8000722:	e085      	b.n	8000830 <__aeabi_fsub+0x1fc>
 8000724:	2800      	cmp	r0, #0
 8000726:	d046      	beq.n	80007b6 <__aeabi_fsub+0x182>
 8000728:	2cff      	cmp	r4, #255	; 0xff
 800072a:	d049      	beq.n	80007c0 <__aeabi_fsub+0x18c>
 800072c:	2280      	movs	r2, #128	; 0x80
 800072e:	4648      	mov	r0, r9
 8000730:	04d2      	lsls	r2, r2, #19
 8000732:	4310      	orrs	r0, r2
 8000734:	4681      	mov	r9, r0
 8000736:	2201      	movs	r2, #1
 8000738:	2e1b      	cmp	r6, #27
 800073a:	dc09      	bgt.n	8000750 <__aeabi_fsub+0x11c>
 800073c:	2020      	movs	r0, #32
 800073e:	464c      	mov	r4, r9
 8000740:	1b80      	subs	r0, r0, r6
 8000742:	4084      	lsls	r4, r0
 8000744:	464a      	mov	r2, r9
 8000746:	0020      	movs	r0, r4
 8000748:	40f2      	lsrs	r2, r6
 800074a:	1e44      	subs	r4, r0, #1
 800074c:	41a0      	sbcs	r0, r4
 800074e:	4302      	orrs	r2, r0
 8000750:	189b      	adds	r3, r3, r2
 8000752:	015a      	lsls	r2, r3, #5
 8000754:	d528      	bpl.n	80007a8 <__aeabi_fsub+0x174>
 8000756:	3501      	adds	r5, #1
 8000758:	2dff      	cmp	r5, #255	; 0xff
 800075a:	d100      	bne.n	800075e <__aeabi_fsub+0x12a>
 800075c:	e0a8      	b.n	80008b0 <__aeabi_fsub+0x27c>
 800075e:	2201      	movs	r2, #1
 8000760:	2407      	movs	r4, #7
 8000762:	4994      	ldr	r1, [pc, #592]	; (80009b4 <__aeabi_fsub+0x380>)
 8000764:	401a      	ands	r2, r3
 8000766:	085b      	lsrs	r3, r3, #1
 8000768:	400b      	ands	r3, r1
 800076a:	4313      	orrs	r3, r2
 800076c:	401c      	ands	r4, r3
 800076e:	e7a6      	b.n	80006be <__aeabi_fsub+0x8a>
 8000770:	2e00      	cmp	r6, #0
 8000772:	d000      	beq.n	8000776 <__aeabi_fsub+0x142>
 8000774:	e778      	b.n	8000668 <__aeabi_fsub+0x34>
 8000776:	e775      	b.n	8000664 <__aeabi_fsub+0x30>
 8000778:	2cff      	cmp	r4, #255	; 0xff
 800077a:	d054      	beq.n	8000826 <__aeabi_fsub+0x1f2>
 800077c:	2280      	movs	r2, #128	; 0x80
 800077e:	4649      	mov	r1, r9
 8000780:	04d2      	lsls	r2, r2, #19
 8000782:	4311      	orrs	r1, r2
 8000784:	4689      	mov	r9, r1
 8000786:	2201      	movs	r2, #1
 8000788:	2e1b      	cmp	r6, #27
 800078a:	dc09      	bgt.n	80007a0 <__aeabi_fsub+0x16c>
 800078c:	2120      	movs	r1, #32
 800078e:	4648      	mov	r0, r9
 8000790:	1b89      	subs	r1, r1, r6
 8000792:	4088      	lsls	r0, r1
 8000794:	464a      	mov	r2, r9
 8000796:	0001      	movs	r1, r0
 8000798:	40f2      	lsrs	r2, r6
 800079a:	1e48      	subs	r0, r1, #1
 800079c:	4181      	sbcs	r1, r0
 800079e:	430a      	orrs	r2, r1
 80007a0:	1a9b      	subs	r3, r3, r2
 80007a2:	015a      	lsls	r2, r3, #5
 80007a4:	d500      	bpl.n	80007a8 <__aeabi_fsub+0x174>
 80007a6:	e773      	b.n	8000690 <__aeabi_fsub+0x5c>
 80007a8:	2201      	movs	r2, #1
 80007aa:	4641      	mov	r1, r8
 80007ac:	400a      	ands	r2, r1
 80007ae:	0759      	lsls	r1, r3, #29
 80007b0:	d000      	beq.n	80007b4 <__aeabi_fsub+0x180>
 80007b2:	e789      	b.n	80006c8 <__aeabi_fsub+0x94>
 80007b4:	e011      	b.n	80007da <__aeabi_fsub+0x1a6>
 80007b6:	4648      	mov	r0, r9
 80007b8:	2800      	cmp	r0, #0
 80007ba:	d158      	bne.n	800086e <__aeabi_fsub+0x23a>
 80007bc:	2cff      	cmp	r4, #255	; 0xff
 80007be:	d10c      	bne.n	80007da <__aeabi_fsub+0x1a6>
 80007c0:	08db      	lsrs	r3, r3, #3
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d100      	bne.n	80007c8 <__aeabi_fsub+0x194>
 80007c6:	e78c      	b.n	80006e2 <__aeabi_fsub+0xae>
 80007c8:	2080      	movs	r0, #128	; 0x80
 80007ca:	03c0      	lsls	r0, r0, #15
 80007cc:	4303      	orrs	r3, r0
 80007ce:	025b      	lsls	r3, r3, #9
 80007d0:	0a5b      	lsrs	r3, r3, #9
 80007d2:	24ff      	movs	r4, #255	; 0xff
 80007d4:	e787      	b.n	80006e6 <__aeabi_fsub+0xb2>
 80007d6:	2cff      	cmp	r4, #255	; 0xff
 80007d8:	d025      	beq.n	8000826 <__aeabi_fsub+0x1f2>
 80007da:	08db      	lsrs	r3, r3, #3
 80007dc:	2dff      	cmp	r5, #255	; 0xff
 80007de:	d0f0      	beq.n	80007c2 <__aeabi_fsub+0x18e>
 80007e0:	025b      	lsls	r3, r3, #9
 80007e2:	0a5b      	lsrs	r3, r3, #9
 80007e4:	b2ec      	uxtb	r4, r5
 80007e6:	e77e      	b.n	80006e6 <__aeabi_fsub+0xb2>
 80007e8:	2c00      	cmp	r4, #0
 80007ea:	d04d      	beq.n	8000888 <__aeabi_fsub+0x254>
 80007ec:	28ff      	cmp	r0, #255	; 0xff
 80007ee:	d018      	beq.n	8000822 <__aeabi_fsub+0x1ee>
 80007f0:	2480      	movs	r4, #128	; 0x80
 80007f2:	04e4      	lsls	r4, r4, #19
 80007f4:	4272      	negs	r2, r6
 80007f6:	4323      	orrs	r3, r4
 80007f8:	2a1b      	cmp	r2, #27
 80007fa:	dd00      	ble.n	80007fe <__aeabi_fsub+0x1ca>
 80007fc:	e0c4      	b.n	8000988 <__aeabi_fsub+0x354>
 80007fe:	001c      	movs	r4, r3
 8000800:	2520      	movs	r5, #32
 8000802:	40d4      	lsrs	r4, r2
 8000804:	1aaa      	subs	r2, r5, r2
 8000806:	4093      	lsls	r3, r2
 8000808:	1e5a      	subs	r2, r3, #1
 800080a:	4193      	sbcs	r3, r2
 800080c:	4323      	orrs	r3, r4
 800080e:	464a      	mov	r2, r9
 8000810:	0005      	movs	r5, r0
 8000812:	1ad3      	subs	r3, r2, r3
 8000814:	4688      	mov	r8, r1
 8000816:	e738      	b.n	800068a <__aeabi_fsub+0x56>
 8000818:	1c72      	adds	r2, r6, #1
 800081a:	d0f8      	beq.n	800080e <__aeabi_fsub+0x1da>
 800081c:	43f2      	mvns	r2, r6
 800081e:	28ff      	cmp	r0, #255	; 0xff
 8000820:	d1ea      	bne.n	80007f8 <__aeabi_fsub+0x1c4>
 8000822:	000a      	movs	r2, r1
 8000824:	464b      	mov	r3, r9
 8000826:	25ff      	movs	r5, #255	; 0xff
 8000828:	e7d7      	b.n	80007da <__aeabi_fsub+0x1a6>
 800082a:	019b      	lsls	r3, r3, #6
 800082c:	0a5b      	lsrs	r3, r3, #9
 800082e:	e75a      	b.n	80006e6 <__aeabi_fsub+0xb2>
 8000830:	2e00      	cmp	r6, #0
 8000832:	d141      	bne.n	80008b8 <__aeabi_fsub+0x284>
 8000834:	1c65      	adds	r5, r4, #1
 8000836:	b2e9      	uxtb	r1, r5
 8000838:	2901      	cmp	r1, #1
 800083a:	dd45      	ble.n	80008c8 <__aeabi_fsub+0x294>
 800083c:	2dff      	cmp	r5, #255	; 0xff
 800083e:	d100      	bne.n	8000842 <__aeabi_fsub+0x20e>
 8000840:	e74f      	b.n	80006e2 <__aeabi_fsub+0xae>
 8000842:	2407      	movs	r4, #7
 8000844:	444b      	add	r3, r9
 8000846:	085b      	lsrs	r3, r3, #1
 8000848:	401c      	ands	r4, r3
 800084a:	e738      	b.n	80006be <__aeabi_fsub+0x8a>
 800084c:	2207      	movs	r2, #7
 800084e:	4b5a      	ldr	r3, [pc, #360]	; (80009b8 <__aeabi_fsub+0x384>)
 8000850:	1a2d      	subs	r5, r5, r0
 8000852:	4023      	ands	r3, r4
 8000854:	4014      	ands	r4, r2
 8000856:	e732      	b.n	80006be <__aeabi_fsub+0x8a>
 8000858:	2c00      	cmp	r4, #0
 800085a:	d11d      	bne.n	8000898 <__aeabi_fsub+0x264>
 800085c:	2b00      	cmp	r3, #0
 800085e:	d17a      	bne.n	8000956 <__aeabi_fsub+0x322>
 8000860:	464b      	mov	r3, r9
 8000862:	2b00      	cmp	r3, #0
 8000864:	d100      	bne.n	8000868 <__aeabi_fsub+0x234>
 8000866:	e091      	b.n	800098c <__aeabi_fsub+0x358>
 8000868:	000a      	movs	r2, r1
 800086a:	2500      	movs	r5, #0
 800086c:	e7b5      	b.n	80007da <__aeabi_fsub+0x1a6>
 800086e:	3e01      	subs	r6, #1
 8000870:	2e00      	cmp	r6, #0
 8000872:	d119      	bne.n	80008a8 <__aeabi_fsub+0x274>
 8000874:	444b      	add	r3, r9
 8000876:	e76c      	b.n	8000752 <__aeabi_fsub+0x11e>
 8000878:	2cff      	cmp	r4, #255	; 0xff
 800087a:	d184      	bne.n	8000786 <__aeabi_fsub+0x152>
 800087c:	25ff      	movs	r5, #255	; 0xff
 800087e:	e7ac      	b.n	80007da <__aeabi_fsub+0x1a6>
 8000880:	464a      	mov	r2, r9
 8000882:	4688      	mov	r8, r1
 8000884:	1ad4      	subs	r4, r2, r3
 8000886:	e705      	b.n	8000694 <__aeabi_fsub+0x60>
 8000888:	2b00      	cmp	r3, #0
 800088a:	d1c5      	bne.n	8000818 <__aeabi_fsub+0x1e4>
 800088c:	000a      	movs	r2, r1
 800088e:	28ff      	cmp	r0, #255	; 0xff
 8000890:	d0c8      	beq.n	8000824 <__aeabi_fsub+0x1f0>
 8000892:	0005      	movs	r5, r0
 8000894:	464b      	mov	r3, r9
 8000896:	e7a0      	b.n	80007da <__aeabi_fsub+0x1a6>
 8000898:	2b00      	cmp	r3, #0
 800089a:	d149      	bne.n	8000930 <__aeabi_fsub+0x2fc>
 800089c:	464b      	mov	r3, r9
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d077      	beq.n	8000992 <__aeabi_fsub+0x35e>
 80008a2:	000a      	movs	r2, r1
 80008a4:	25ff      	movs	r5, #255	; 0xff
 80008a6:	e798      	b.n	80007da <__aeabi_fsub+0x1a6>
 80008a8:	2cff      	cmp	r4, #255	; 0xff
 80008aa:	d000      	beq.n	80008ae <__aeabi_fsub+0x27a>
 80008ac:	e743      	b.n	8000736 <__aeabi_fsub+0x102>
 80008ae:	e787      	b.n	80007c0 <__aeabi_fsub+0x18c>
 80008b0:	000a      	movs	r2, r1
 80008b2:	24ff      	movs	r4, #255	; 0xff
 80008b4:	2300      	movs	r3, #0
 80008b6:	e716      	b.n	80006e6 <__aeabi_fsub+0xb2>
 80008b8:	2c00      	cmp	r4, #0
 80008ba:	d115      	bne.n	80008e8 <__aeabi_fsub+0x2b4>
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d157      	bne.n	8000970 <__aeabi_fsub+0x33c>
 80008c0:	28ff      	cmp	r0, #255	; 0xff
 80008c2:	d1e6      	bne.n	8000892 <__aeabi_fsub+0x25e>
 80008c4:	464b      	mov	r3, r9
 80008c6:	e77b      	b.n	80007c0 <__aeabi_fsub+0x18c>
 80008c8:	2c00      	cmp	r4, #0
 80008ca:	d120      	bne.n	800090e <__aeabi_fsub+0x2da>
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d057      	beq.n	8000980 <__aeabi_fsub+0x34c>
 80008d0:	4649      	mov	r1, r9
 80008d2:	2900      	cmp	r1, #0
 80008d4:	d053      	beq.n	800097e <__aeabi_fsub+0x34a>
 80008d6:	444b      	add	r3, r9
 80008d8:	015a      	lsls	r2, r3, #5
 80008da:	d568      	bpl.n	80009ae <__aeabi_fsub+0x37a>
 80008dc:	2407      	movs	r4, #7
 80008de:	4a36      	ldr	r2, [pc, #216]	; (80009b8 <__aeabi_fsub+0x384>)
 80008e0:	401c      	ands	r4, r3
 80008e2:	2501      	movs	r5, #1
 80008e4:	4013      	ands	r3, r2
 80008e6:	e6ea      	b.n	80006be <__aeabi_fsub+0x8a>
 80008e8:	28ff      	cmp	r0, #255	; 0xff
 80008ea:	d0eb      	beq.n	80008c4 <__aeabi_fsub+0x290>
 80008ec:	2280      	movs	r2, #128	; 0x80
 80008ee:	04d2      	lsls	r2, r2, #19
 80008f0:	4276      	negs	r6, r6
 80008f2:	4313      	orrs	r3, r2
 80008f4:	2e1b      	cmp	r6, #27
 80008f6:	dc53      	bgt.n	80009a0 <__aeabi_fsub+0x36c>
 80008f8:	2520      	movs	r5, #32
 80008fa:	1bad      	subs	r5, r5, r6
 80008fc:	001a      	movs	r2, r3
 80008fe:	40ab      	lsls	r3, r5
 8000900:	40f2      	lsrs	r2, r6
 8000902:	1e5c      	subs	r4, r3, #1
 8000904:	41a3      	sbcs	r3, r4
 8000906:	4313      	orrs	r3, r2
 8000908:	444b      	add	r3, r9
 800090a:	0005      	movs	r5, r0
 800090c:	e721      	b.n	8000752 <__aeabi_fsub+0x11e>
 800090e:	2b00      	cmp	r3, #0
 8000910:	d0d8      	beq.n	80008c4 <__aeabi_fsub+0x290>
 8000912:	4649      	mov	r1, r9
 8000914:	2900      	cmp	r1, #0
 8000916:	d100      	bne.n	800091a <__aeabi_fsub+0x2e6>
 8000918:	e752      	b.n	80007c0 <__aeabi_fsub+0x18c>
 800091a:	2180      	movs	r1, #128	; 0x80
 800091c:	03c9      	lsls	r1, r1, #15
 800091e:	420f      	tst	r7, r1
 8000920:	d100      	bne.n	8000924 <__aeabi_fsub+0x2f0>
 8000922:	e74d      	b.n	80007c0 <__aeabi_fsub+0x18c>
 8000924:	4660      	mov	r0, ip
 8000926:	4208      	tst	r0, r1
 8000928:	d000      	beq.n	800092c <__aeabi_fsub+0x2f8>
 800092a:	e749      	b.n	80007c0 <__aeabi_fsub+0x18c>
 800092c:	464b      	mov	r3, r9
 800092e:	e747      	b.n	80007c0 <__aeabi_fsub+0x18c>
 8000930:	4648      	mov	r0, r9
 8000932:	25ff      	movs	r5, #255	; 0xff
 8000934:	2800      	cmp	r0, #0
 8000936:	d100      	bne.n	800093a <__aeabi_fsub+0x306>
 8000938:	e74f      	b.n	80007da <__aeabi_fsub+0x1a6>
 800093a:	2280      	movs	r2, #128	; 0x80
 800093c:	03d2      	lsls	r2, r2, #15
 800093e:	4217      	tst	r7, r2
 8000940:	d004      	beq.n	800094c <__aeabi_fsub+0x318>
 8000942:	4660      	mov	r0, ip
 8000944:	4210      	tst	r0, r2
 8000946:	d101      	bne.n	800094c <__aeabi_fsub+0x318>
 8000948:	464b      	mov	r3, r9
 800094a:	4688      	mov	r8, r1
 800094c:	2201      	movs	r2, #1
 800094e:	4641      	mov	r1, r8
 8000950:	25ff      	movs	r5, #255	; 0xff
 8000952:	400a      	ands	r2, r1
 8000954:	e741      	b.n	80007da <__aeabi_fsub+0x1a6>
 8000956:	4648      	mov	r0, r9
 8000958:	2800      	cmp	r0, #0
 800095a:	d01f      	beq.n	800099c <__aeabi_fsub+0x368>
 800095c:	1a1a      	subs	r2, r3, r0
 800095e:	0150      	lsls	r0, r2, #5
 8000960:	d520      	bpl.n	80009a4 <__aeabi_fsub+0x370>
 8000962:	464a      	mov	r2, r9
 8000964:	2407      	movs	r4, #7
 8000966:	1ad3      	subs	r3, r2, r3
 8000968:	401c      	ands	r4, r3
 800096a:	4688      	mov	r8, r1
 800096c:	2500      	movs	r5, #0
 800096e:	e6a6      	b.n	80006be <__aeabi_fsub+0x8a>
 8000970:	1c74      	adds	r4, r6, #1
 8000972:	d0c9      	beq.n	8000908 <__aeabi_fsub+0x2d4>
 8000974:	43f6      	mvns	r6, r6
 8000976:	28ff      	cmp	r0, #255	; 0xff
 8000978:	d1bc      	bne.n	80008f4 <__aeabi_fsub+0x2c0>
 800097a:	464b      	mov	r3, r9
 800097c:	e720      	b.n	80007c0 <__aeabi_fsub+0x18c>
 800097e:	4699      	mov	r9, r3
 8000980:	464b      	mov	r3, r9
 8000982:	2500      	movs	r5, #0
 8000984:	08db      	lsrs	r3, r3, #3
 8000986:	e72b      	b.n	80007e0 <__aeabi_fsub+0x1ac>
 8000988:	2301      	movs	r3, #1
 800098a:	e740      	b.n	800080e <__aeabi_fsub+0x1da>
 800098c:	2200      	movs	r2, #0
 800098e:	2300      	movs	r3, #0
 8000990:	e6a9      	b.n	80006e6 <__aeabi_fsub+0xb2>
 8000992:	2380      	movs	r3, #128	; 0x80
 8000994:	2200      	movs	r2, #0
 8000996:	03db      	lsls	r3, r3, #15
 8000998:	24ff      	movs	r4, #255	; 0xff
 800099a:	e6a4      	b.n	80006e6 <__aeabi_fsub+0xb2>
 800099c:	2500      	movs	r5, #0
 800099e:	e71c      	b.n	80007da <__aeabi_fsub+0x1a6>
 80009a0:	2301      	movs	r3, #1
 80009a2:	e7b1      	b.n	8000908 <__aeabi_fsub+0x2d4>
 80009a4:	2a00      	cmp	r2, #0
 80009a6:	d0f1      	beq.n	800098c <__aeabi_fsub+0x358>
 80009a8:	0013      	movs	r3, r2
 80009aa:	2500      	movs	r5, #0
 80009ac:	e6fc      	b.n	80007a8 <__aeabi_fsub+0x174>
 80009ae:	2500      	movs	r5, #0
 80009b0:	e6fa      	b.n	80007a8 <__aeabi_fsub+0x174>
 80009b2:	46c0      	nop			; (mov r8, r8)
 80009b4:	7dffffff 	.word	0x7dffffff
 80009b8:	fbffffff 	.word	0xfbffffff

080009bc <__aeabi_f2iz>:
 80009bc:	0241      	lsls	r1, r0, #9
 80009be:	0042      	lsls	r2, r0, #1
 80009c0:	0fc3      	lsrs	r3, r0, #31
 80009c2:	0a49      	lsrs	r1, r1, #9
 80009c4:	0e12      	lsrs	r2, r2, #24
 80009c6:	2000      	movs	r0, #0
 80009c8:	2a7e      	cmp	r2, #126	; 0x7e
 80009ca:	d90d      	bls.n	80009e8 <__aeabi_f2iz+0x2c>
 80009cc:	2a9d      	cmp	r2, #157	; 0x9d
 80009ce:	d80c      	bhi.n	80009ea <__aeabi_f2iz+0x2e>
 80009d0:	2080      	movs	r0, #128	; 0x80
 80009d2:	0400      	lsls	r0, r0, #16
 80009d4:	4301      	orrs	r1, r0
 80009d6:	2a95      	cmp	r2, #149	; 0x95
 80009d8:	dc0a      	bgt.n	80009f0 <__aeabi_f2iz+0x34>
 80009da:	2096      	movs	r0, #150	; 0x96
 80009dc:	1a82      	subs	r2, r0, r2
 80009de:	40d1      	lsrs	r1, r2
 80009e0:	4248      	negs	r0, r1
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d100      	bne.n	80009e8 <__aeabi_f2iz+0x2c>
 80009e6:	0008      	movs	r0, r1
 80009e8:	4770      	bx	lr
 80009ea:	4a03      	ldr	r2, [pc, #12]	; (80009f8 <__aeabi_f2iz+0x3c>)
 80009ec:	1898      	adds	r0, r3, r2
 80009ee:	e7fb      	b.n	80009e8 <__aeabi_f2iz+0x2c>
 80009f0:	3a96      	subs	r2, #150	; 0x96
 80009f2:	4091      	lsls	r1, r2
 80009f4:	e7f4      	b.n	80009e0 <__aeabi_f2iz+0x24>
 80009f6:	46c0      	nop			; (mov r8, r8)
 80009f8:	7fffffff 	.word	0x7fffffff

080009fc <__aeabi_ddiv>:
 80009fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009fe:	4657      	mov	r7, sl
 8000a00:	46de      	mov	lr, fp
 8000a02:	464e      	mov	r6, r9
 8000a04:	4645      	mov	r5, r8
 8000a06:	b5e0      	push	{r5, r6, r7, lr}
 8000a08:	4683      	mov	fp, r0
 8000a0a:	0007      	movs	r7, r0
 8000a0c:	030e      	lsls	r6, r1, #12
 8000a0e:	0048      	lsls	r0, r1, #1
 8000a10:	b085      	sub	sp, #20
 8000a12:	4692      	mov	sl, r2
 8000a14:	001c      	movs	r4, r3
 8000a16:	0b36      	lsrs	r6, r6, #12
 8000a18:	0d40      	lsrs	r0, r0, #21
 8000a1a:	0fcd      	lsrs	r5, r1, #31
 8000a1c:	2800      	cmp	r0, #0
 8000a1e:	d100      	bne.n	8000a22 <__aeabi_ddiv+0x26>
 8000a20:	e09d      	b.n	8000b5e <__aeabi_ddiv+0x162>
 8000a22:	4b95      	ldr	r3, [pc, #596]	; (8000c78 <__aeabi_ddiv+0x27c>)
 8000a24:	4298      	cmp	r0, r3
 8000a26:	d039      	beq.n	8000a9c <__aeabi_ddiv+0xa0>
 8000a28:	2380      	movs	r3, #128	; 0x80
 8000a2a:	00f6      	lsls	r6, r6, #3
 8000a2c:	041b      	lsls	r3, r3, #16
 8000a2e:	431e      	orrs	r6, r3
 8000a30:	4a92      	ldr	r2, [pc, #584]	; (8000c7c <__aeabi_ddiv+0x280>)
 8000a32:	0f7b      	lsrs	r3, r7, #29
 8000a34:	4333      	orrs	r3, r6
 8000a36:	4699      	mov	r9, r3
 8000a38:	4694      	mov	ip, r2
 8000a3a:	0003      	movs	r3, r0
 8000a3c:	4463      	add	r3, ip
 8000a3e:	9300      	str	r3, [sp, #0]
 8000a40:	2300      	movs	r3, #0
 8000a42:	2600      	movs	r6, #0
 8000a44:	00ff      	lsls	r7, r7, #3
 8000a46:	9302      	str	r3, [sp, #8]
 8000a48:	0323      	lsls	r3, r4, #12
 8000a4a:	0b1b      	lsrs	r3, r3, #12
 8000a4c:	4698      	mov	r8, r3
 8000a4e:	0063      	lsls	r3, r4, #1
 8000a50:	0fe4      	lsrs	r4, r4, #31
 8000a52:	4652      	mov	r2, sl
 8000a54:	0d5b      	lsrs	r3, r3, #21
 8000a56:	9401      	str	r4, [sp, #4]
 8000a58:	d100      	bne.n	8000a5c <__aeabi_ddiv+0x60>
 8000a5a:	e0b3      	b.n	8000bc4 <__aeabi_ddiv+0x1c8>
 8000a5c:	4986      	ldr	r1, [pc, #536]	; (8000c78 <__aeabi_ddiv+0x27c>)
 8000a5e:	428b      	cmp	r3, r1
 8000a60:	d100      	bne.n	8000a64 <__aeabi_ddiv+0x68>
 8000a62:	e09e      	b.n	8000ba2 <__aeabi_ddiv+0x1a6>
 8000a64:	4642      	mov	r2, r8
 8000a66:	00d1      	lsls	r1, r2, #3
 8000a68:	2280      	movs	r2, #128	; 0x80
 8000a6a:	0412      	lsls	r2, r2, #16
 8000a6c:	430a      	orrs	r2, r1
 8000a6e:	4651      	mov	r1, sl
 8000a70:	0f49      	lsrs	r1, r1, #29
 8000a72:	4311      	orrs	r1, r2
 8000a74:	468b      	mov	fp, r1
 8000a76:	4981      	ldr	r1, [pc, #516]	; (8000c7c <__aeabi_ddiv+0x280>)
 8000a78:	4652      	mov	r2, sl
 8000a7a:	468c      	mov	ip, r1
 8000a7c:	9900      	ldr	r1, [sp, #0]
 8000a7e:	4463      	add	r3, ip
 8000a80:	1acb      	subs	r3, r1, r3
 8000a82:	2100      	movs	r1, #0
 8000a84:	00d2      	lsls	r2, r2, #3
 8000a86:	9300      	str	r3, [sp, #0]
 8000a88:	002b      	movs	r3, r5
 8000a8a:	4063      	eors	r3, r4
 8000a8c:	469a      	mov	sl, r3
 8000a8e:	2e0f      	cmp	r6, #15
 8000a90:	d900      	bls.n	8000a94 <__aeabi_ddiv+0x98>
 8000a92:	e105      	b.n	8000ca0 <__aeabi_ddiv+0x2a4>
 8000a94:	4b7a      	ldr	r3, [pc, #488]	; (8000c80 <__aeabi_ddiv+0x284>)
 8000a96:	00b6      	lsls	r6, r6, #2
 8000a98:	599b      	ldr	r3, [r3, r6]
 8000a9a:	469f      	mov	pc, r3
 8000a9c:	465b      	mov	r3, fp
 8000a9e:	4333      	orrs	r3, r6
 8000aa0:	4699      	mov	r9, r3
 8000aa2:	d000      	beq.n	8000aa6 <__aeabi_ddiv+0xaa>
 8000aa4:	e0b8      	b.n	8000c18 <__aeabi_ddiv+0x21c>
 8000aa6:	2302      	movs	r3, #2
 8000aa8:	2608      	movs	r6, #8
 8000aaa:	2700      	movs	r7, #0
 8000aac:	9000      	str	r0, [sp, #0]
 8000aae:	9302      	str	r3, [sp, #8]
 8000ab0:	e7ca      	b.n	8000a48 <__aeabi_ddiv+0x4c>
 8000ab2:	46cb      	mov	fp, r9
 8000ab4:	003a      	movs	r2, r7
 8000ab6:	9902      	ldr	r1, [sp, #8]
 8000ab8:	9501      	str	r5, [sp, #4]
 8000aba:	9b01      	ldr	r3, [sp, #4]
 8000abc:	469a      	mov	sl, r3
 8000abe:	2902      	cmp	r1, #2
 8000ac0:	d027      	beq.n	8000b12 <__aeabi_ddiv+0x116>
 8000ac2:	2903      	cmp	r1, #3
 8000ac4:	d100      	bne.n	8000ac8 <__aeabi_ddiv+0xcc>
 8000ac6:	e280      	b.n	8000fca <__aeabi_ddiv+0x5ce>
 8000ac8:	2901      	cmp	r1, #1
 8000aca:	d044      	beq.n	8000b56 <__aeabi_ddiv+0x15a>
 8000acc:	496d      	ldr	r1, [pc, #436]	; (8000c84 <__aeabi_ddiv+0x288>)
 8000ace:	9b00      	ldr	r3, [sp, #0]
 8000ad0:	468c      	mov	ip, r1
 8000ad2:	4463      	add	r3, ip
 8000ad4:	001c      	movs	r4, r3
 8000ad6:	2c00      	cmp	r4, #0
 8000ad8:	dd38      	ble.n	8000b4c <__aeabi_ddiv+0x150>
 8000ada:	0753      	lsls	r3, r2, #29
 8000adc:	d000      	beq.n	8000ae0 <__aeabi_ddiv+0xe4>
 8000ade:	e213      	b.n	8000f08 <__aeabi_ddiv+0x50c>
 8000ae0:	08d2      	lsrs	r2, r2, #3
 8000ae2:	465b      	mov	r3, fp
 8000ae4:	01db      	lsls	r3, r3, #7
 8000ae6:	d509      	bpl.n	8000afc <__aeabi_ddiv+0x100>
 8000ae8:	4659      	mov	r1, fp
 8000aea:	4b67      	ldr	r3, [pc, #412]	; (8000c88 <__aeabi_ddiv+0x28c>)
 8000aec:	4019      	ands	r1, r3
 8000aee:	468b      	mov	fp, r1
 8000af0:	2180      	movs	r1, #128	; 0x80
 8000af2:	00c9      	lsls	r1, r1, #3
 8000af4:	468c      	mov	ip, r1
 8000af6:	9b00      	ldr	r3, [sp, #0]
 8000af8:	4463      	add	r3, ip
 8000afa:	001c      	movs	r4, r3
 8000afc:	4b63      	ldr	r3, [pc, #396]	; (8000c8c <__aeabi_ddiv+0x290>)
 8000afe:	429c      	cmp	r4, r3
 8000b00:	dc07      	bgt.n	8000b12 <__aeabi_ddiv+0x116>
 8000b02:	465b      	mov	r3, fp
 8000b04:	0564      	lsls	r4, r4, #21
 8000b06:	075f      	lsls	r7, r3, #29
 8000b08:	025b      	lsls	r3, r3, #9
 8000b0a:	4317      	orrs	r7, r2
 8000b0c:	0b1b      	lsrs	r3, r3, #12
 8000b0e:	0d62      	lsrs	r2, r4, #21
 8000b10:	e002      	b.n	8000b18 <__aeabi_ddiv+0x11c>
 8000b12:	2300      	movs	r3, #0
 8000b14:	2700      	movs	r7, #0
 8000b16:	4a58      	ldr	r2, [pc, #352]	; (8000c78 <__aeabi_ddiv+0x27c>)
 8000b18:	2100      	movs	r1, #0
 8000b1a:	031b      	lsls	r3, r3, #12
 8000b1c:	0b1c      	lsrs	r4, r3, #12
 8000b1e:	0d0b      	lsrs	r3, r1, #20
 8000b20:	051b      	lsls	r3, r3, #20
 8000b22:	4323      	orrs	r3, r4
 8000b24:	0514      	lsls	r4, r2, #20
 8000b26:	4a5a      	ldr	r2, [pc, #360]	; (8000c90 <__aeabi_ddiv+0x294>)
 8000b28:	0038      	movs	r0, r7
 8000b2a:	4013      	ands	r3, r2
 8000b2c:	431c      	orrs	r4, r3
 8000b2e:	4653      	mov	r3, sl
 8000b30:	0064      	lsls	r4, r4, #1
 8000b32:	07db      	lsls	r3, r3, #31
 8000b34:	0864      	lsrs	r4, r4, #1
 8000b36:	431c      	orrs	r4, r3
 8000b38:	0021      	movs	r1, r4
 8000b3a:	b005      	add	sp, #20
 8000b3c:	bc3c      	pop	{r2, r3, r4, r5}
 8000b3e:	4690      	mov	r8, r2
 8000b40:	4699      	mov	r9, r3
 8000b42:	46a2      	mov	sl, r4
 8000b44:	46ab      	mov	fp, r5
 8000b46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b48:	2201      	movs	r2, #1
 8000b4a:	4252      	negs	r2, r2
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	1b1b      	subs	r3, r3, r4
 8000b50:	2b38      	cmp	r3, #56	; 0x38
 8000b52:	dc00      	bgt.n	8000b56 <__aeabi_ddiv+0x15a>
 8000b54:	e1ad      	b.n	8000eb2 <__aeabi_ddiv+0x4b6>
 8000b56:	2200      	movs	r2, #0
 8000b58:	2300      	movs	r3, #0
 8000b5a:	2700      	movs	r7, #0
 8000b5c:	e7dc      	b.n	8000b18 <__aeabi_ddiv+0x11c>
 8000b5e:	465b      	mov	r3, fp
 8000b60:	4333      	orrs	r3, r6
 8000b62:	4699      	mov	r9, r3
 8000b64:	d05e      	beq.n	8000c24 <__aeabi_ddiv+0x228>
 8000b66:	2e00      	cmp	r6, #0
 8000b68:	d100      	bne.n	8000b6c <__aeabi_ddiv+0x170>
 8000b6a:	e18a      	b.n	8000e82 <__aeabi_ddiv+0x486>
 8000b6c:	0030      	movs	r0, r6
 8000b6e:	f000 fda9 	bl	80016c4 <__clzsi2>
 8000b72:	0003      	movs	r3, r0
 8000b74:	3b0b      	subs	r3, #11
 8000b76:	2b1c      	cmp	r3, #28
 8000b78:	dd00      	ble.n	8000b7c <__aeabi_ddiv+0x180>
 8000b7a:	e17b      	b.n	8000e74 <__aeabi_ddiv+0x478>
 8000b7c:	221d      	movs	r2, #29
 8000b7e:	1ad3      	subs	r3, r2, r3
 8000b80:	465a      	mov	r2, fp
 8000b82:	0001      	movs	r1, r0
 8000b84:	40da      	lsrs	r2, r3
 8000b86:	3908      	subs	r1, #8
 8000b88:	408e      	lsls	r6, r1
 8000b8a:	0013      	movs	r3, r2
 8000b8c:	465f      	mov	r7, fp
 8000b8e:	4333      	orrs	r3, r6
 8000b90:	4699      	mov	r9, r3
 8000b92:	408f      	lsls	r7, r1
 8000b94:	4b3f      	ldr	r3, [pc, #252]	; (8000c94 <__aeabi_ddiv+0x298>)
 8000b96:	2600      	movs	r6, #0
 8000b98:	1a1b      	subs	r3, r3, r0
 8000b9a:	9300      	str	r3, [sp, #0]
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	9302      	str	r3, [sp, #8]
 8000ba0:	e752      	b.n	8000a48 <__aeabi_ddiv+0x4c>
 8000ba2:	4641      	mov	r1, r8
 8000ba4:	4653      	mov	r3, sl
 8000ba6:	430b      	orrs	r3, r1
 8000ba8:	493b      	ldr	r1, [pc, #236]	; (8000c98 <__aeabi_ddiv+0x29c>)
 8000baa:	469b      	mov	fp, r3
 8000bac:	468c      	mov	ip, r1
 8000bae:	9b00      	ldr	r3, [sp, #0]
 8000bb0:	4463      	add	r3, ip
 8000bb2:	9300      	str	r3, [sp, #0]
 8000bb4:	465b      	mov	r3, fp
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d13b      	bne.n	8000c32 <__aeabi_ddiv+0x236>
 8000bba:	2302      	movs	r3, #2
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	431e      	orrs	r6, r3
 8000bc0:	2102      	movs	r1, #2
 8000bc2:	e761      	b.n	8000a88 <__aeabi_ddiv+0x8c>
 8000bc4:	4643      	mov	r3, r8
 8000bc6:	4313      	orrs	r3, r2
 8000bc8:	469b      	mov	fp, r3
 8000bca:	d037      	beq.n	8000c3c <__aeabi_ddiv+0x240>
 8000bcc:	4643      	mov	r3, r8
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d100      	bne.n	8000bd4 <__aeabi_ddiv+0x1d8>
 8000bd2:	e162      	b.n	8000e9a <__aeabi_ddiv+0x49e>
 8000bd4:	4640      	mov	r0, r8
 8000bd6:	f000 fd75 	bl	80016c4 <__clzsi2>
 8000bda:	0003      	movs	r3, r0
 8000bdc:	3b0b      	subs	r3, #11
 8000bde:	2b1c      	cmp	r3, #28
 8000be0:	dd00      	ble.n	8000be4 <__aeabi_ddiv+0x1e8>
 8000be2:	e153      	b.n	8000e8c <__aeabi_ddiv+0x490>
 8000be4:	0002      	movs	r2, r0
 8000be6:	4641      	mov	r1, r8
 8000be8:	3a08      	subs	r2, #8
 8000bea:	4091      	lsls	r1, r2
 8000bec:	4688      	mov	r8, r1
 8000bee:	211d      	movs	r1, #29
 8000bf0:	1acb      	subs	r3, r1, r3
 8000bf2:	4651      	mov	r1, sl
 8000bf4:	40d9      	lsrs	r1, r3
 8000bf6:	000b      	movs	r3, r1
 8000bf8:	4641      	mov	r1, r8
 8000bfa:	430b      	orrs	r3, r1
 8000bfc:	469b      	mov	fp, r3
 8000bfe:	4653      	mov	r3, sl
 8000c00:	4093      	lsls	r3, r2
 8000c02:	001a      	movs	r2, r3
 8000c04:	9b00      	ldr	r3, [sp, #0]
 8000c06:	4925      	ldr	r1, [pc, #148]	; (8000c9c <__aeabi_ddiv+0x2a0>)
 8000c08:	469c      	mov	ip, r3
 8000c0a:	4460      	add	r0, ip
 8000c0c:	0003      	movs	r3, r0
 8000c0e:	468c      	mov	ip, r1
 8000c10:	4463      	add	r3, ip
 8000c12:	9300      	str	r3, [sp, #0]
 8000c14:	2100      	movs	r1, #0
 8000c16:	e737      	b.n	8000a88 <__aeabi_ddiv+0x8c>
 8000c18:	2303      	movs	r3, #3
 8000c1a:	46b1      	mov	r9, r6
 8000c1c:	9000      	str	r0, [sp, #0]
 8000c1e:	260c      	movs	r6, #12
 8000c20:	9302      	str	r3, [sp, #8]
 8000c22:	e711      	b.n	8000a48 <__aeabi_ddiv+0x4c>
 8000c24:	2300      	movs	r3, #0
 8000c26:	9300      	str	r3, [sp, #0]
 8000c28:	3301      	adds	r3, #1
 8000c2a:	2604      	movs	r6, #4
 8000c2c:	2700      	movs	r7, #0
 8000c2e:	9302      	str	r3, [sp, #8]
 8000c30:	e70a      	b.n	8000a48 <__aeabi_ddiv+0x4c>
 8000c32:	2303      	movs	r3, #3
 8000c34:	46c3      	mov	fp, r8
 8000c36:	431e      	orrs	r6, r3
 8000c38:	2103      	movs	r1, #3
 8000c3a:	e725      	b.n	8000a88 <__aeabi_ddiv+0x8c>
 8000c3c:	3301      	adds	r3, #1
 8000c3e:	431e      	orrs	r6, r3
 8000c40:	2200      	movs	r2, #0
 8000c42:	2101      	movs	r1, #1
 8000c44:	e720      	b.n	8000a88 <__aeabi_ddiv+0x8c>
 8000c46:	2300      	movs	r3, #0
 8000c48:	469a      	mov	sl, r3
 8000c4a:	2380      	movs	r3, #128	; 0x80
 8000c4c:	2700      	movs	r7, #0
 8000c4e:	031b      	lsls	r3, r3, #12
 8000c50:	4a09      	ldr	r2, [pc, #36]	; (8000c78 <__aeabi_ddiv+0x27c>)
 8000c52:	e761      	b.n	8000b18 <__aeabi_ddiv+0x11c>
 8000c54:	2380      	movs	r3, #128	; 0x80
 8000c56:	4649      	mov	r1, r9
 8000c58:	031b      	lsls	r3, r3, #12
 8000c5a:	4219      	tst	r1, r3
 8000c5c:	d100      	bne.n	8000c60 <__aeabi_ddiv+0x264>
 8000c5e:	e0e2      	b.n	8000e26 <__aeabi_ddiv+0x42a>
 8000c60:	4659      	mov	r1, fp
 8000c62:	4219      	tst	r1, r3
 8000c64:	d000      	beq.n	8000c68 <__aeabi_ddiv+0x26c>
 8000c66:	e0de      	b.n	8000e26 <__aeabi_ddiv+0x42a>
 8000c68:	430b      	orrs	r3, r1
 8000c6a:	031b      	lsls	r3, r3, #12
 8000c6c:	0017      	movs	r7, r2
 8000c6e:	0b1b      	lsrs	r3, r3, #12
 8000c70:	46a2      	mov	sl, r4
 8000c72:	4a01      	ldr	r2, [pc, #4]	; (8000c78 <__aeabi_ddiv+0x27c>)
 8000c74:	e750      	b.n	8000b18 <__aeabi_ddiv+0x11c>
 8000c76:	46c0      	nop			; (mov r8, r8)
 8000c78:	000007ff 	.word	0x000007ff
 8000c7c:	fffffc01 	.word	0xfffffc01
 8000c80:	0800b674 	.word	0x0800b674
 8000c84:	000003ff 	.word	0x000003ff
 8000c88:	feffffff 	.word	0xfeffffff
 8000c8c:	000007fe 	.word	0x000007fe
 8000c90:	800fffff 	.word	0x800fffff
 8000c94:	fffffc0d 	.word	0xfffffc0d
 8000c98:	fffff801 	.word	0xfffff801
 8000c9c:	000003f3 	.word	0x000003f3
 8000ca0:	45d9      	cmp	r9, fp
 8000ca2:	d900      	bls.n	8000ca6 <__aeabi_ddiv+0x2aa>
 8000ca4:	e0cb      	b.n	8000e3e <__aeabi_ddiv+0x442>
 8000ca6:	d100      	bne.n	8000caa <__aeabi_ddiv+0x2ae>
 8000ca8:	e0c6      	b.n	8000e38 <__aeabi_ddiv+0x43c>
 8000caa:	003c      	movs	r4, r7
 8000cac:	4648      	mov	r0, r9
 8000cae:	2700      	movs	r7, #0
 8000cb0:	9b00      	ldr	r3, [sp, #0]
 8000cb2:	3b01      	subs	r3, #1
 8000cb4:	9300      	str	r3, [sp, #0]
 8000cb6:	465b      	mov	r3, fp
 8000cb8:	0e16      	lsrs	r6, r2, #24
 8000cba:	021b      	lsls	r3, r3, #8
 8000cbc:	431e      	orrs	r6, r3
 8000cbe:	0213      	lsls	r3, r2, #8
 8000cc0:	4698      	mov	r8, r3
 8000cc2:	0433      	lsls	r3, r6, #16
 8000cc4:	0c1b      	lsrs	r3, r3, #16
 8000cc6:	4699      	mov	r9, r3
 8000cc8:	0c31      	lsrs	r1, r6, #16
 8000cca:	9101      	str	r1, [sp, #4]
 8000ccc:	f7ff faaa 	bl	8000224 <__aeabi_uidivmod>
 8000cd0:	464a      	mov	r2, r9
 8000cd2:	4342      	muls	r2, r0
 8000cd4:	040b      	lsls	r3, r1, #16
 8000cd6:	0c21      	lsrs	r1, r4, #16
 8000cd8:	0005      	movs	r5, r0
 8000cda:	4319      	orrs	r1, r3
 8000cdc:	428a      	cmp	r2, r1
 8000cde:	d907      	bls.n	8000cf0 <__aeabi_ddiv+0x2f4>
 8000ce0:	1989      	adds	r1, r1, r6
 8000ce2:	3d01      	subs	r5, #1
 8000ce4:	428e      	cmp	r6, r1
 8000ce6:	d803      	bhi.n	8000cf0 <__aeabi_ddiv+0x2f4>
 8000ce8:	428a      	cmp	r2, r1
 8000cea:	d901      	bls.n	8000cf0 <__aeabi_ddiv+0x2f4>
 8000cec:	1e85      	subs	r5, r0, #2
 8000cee:	1989      	adds	r1, r1, r6
 8000cf0:	1a88      	subs	r0, r1, r2
 8000cf2:	9901      	ldr	r1, [sp, #4]
 8000cf4:	f7ff fa96 	bl	8000224 <__aeabi_uidivmod>
 8000cf8:	0409      	lsls	r1, r1, #16
 8000cfa:	468c      	mov	ip, r1
 8000cfc:	464a      	mov	r2, r9
 8000cfe:	0421      	lsls	r1, r4, #16
 8000d00:	4664      	mov	r4, ip
 8000d02:	4342      	muls	r2, r0
 8000d04:	0c09      	lsrs	r1, r1, #16
 8000d06:	0003      	movs	r3, r0
 8000d08:	4321      	orrs	r1, r4
 8000d0a:	428a      	cmp	r2, r1
 8000d0c:	d904      	bls.n	8000d18 <__aeabi_ddiv+0x31c>
 8000d0e:	1989      	adds	r1, r1, r6
 8000d10:	3b01      	subs	r3, #1
 8000d12:	428e      	cmp	r6, r1
 8000d14:	d800      	bhi.n	8000d18 <__aeabi_ddiv+0x31c>
 8000d16:	e0f1      	b.n	8000efc <__aeabi_ddiv+0x500>
 8000d18:	042d      	lsls	r5, r5, #16
 8000d1a:	431d      	orrs	r5, r3
 8000d1c:	46ab      	mov	fp, r5
 8000d1e:	4643      	mov	r3, r8
 8000d20:	1a89      	subs	r1, r1, r2
 8000d22:	4642      	mov	r2, r8
 8000d24:	0c28      	lsrs	r0, r5, #16
 8000d26:	0412      	lsls	r2, r2, #16
 8000d28:	0c1d      	lsrs	r5, r3, #16
 8000d2a:	465b      	mov	r3, fp
 8000d2c:	0c14      	lsrs	r4, r2, #16
 8000d2e:	0022      	movs	r2, r4
 8000d30:	041b      	lsls	r3, r3, #16
 8000d32:	0c1b      	lsrs	r3, r3, #16
 8000d34:	435a      	muls	r2, r3
 8000d36:	9403      	str	r4, [sp, #12]
 8000d38:	436b      	muls	r3, r5
 8000d3a:	4344      	muls	r4, r0
 8000d3c:	9502      	str	r5, [sp, #8]
 8000d3e:	4368      	muls	r0, r5
 8000d40:	191b      	adds	r3, r3, r4
 8000d42:	0c15      	lsrs	r5, r2, #16
 8000d44:	18eb      	adds	r3, r5, r3
 8000d46:	429c      	cmp	r4, r3
 8000d48:	d903      	bls.n	8000d52 <__aeabi_ddiv+0x356>
 8000d4a:	2480      	movs	r4, #128	; 0x80
 8000d4c:	0264      	lsls	r4, r4, #9
 8000d4e:	46a4      	mov	ip, r4
 8000d50:	4460      	add	r0, ip
 8000d52:	0c1c      	lsrs	r4, r3, #16
 8000d54:	0415      	lsls	r5, r2, #16
 8000d56:	041b      	lsls	r3, r3, #16
 8000d58:	0c2d      	lsrs	r5, r5, #16
 8000d5a:	1820      	adds	r0, r4, r0
 8000d5c:	195d      	adds	r5, r3, r5
 8000d5e:	4281      	cmp	r1, r0
 8000d60:	d377      	bcc.n	8000e52 <__aeabi_ddiv+0x456>
 8000d62:	d073      	beq.n	8000e4c <__aeabi_ddiv+0x450>
 8000d64:	1a0c      	subs	r4, r1, r0
 8000d66:	4aa2      	ldr	r2, [pc, #648]	; (8000ff0 <__aeabi_ddiv+0x5f4>)
 8000d68:	1b7d      	subs	r5, r7, r5
 8000d6a:	42af      	cmp	r7, r5
 8000d6c:	41bf      	sbcs	r7, r7
 8000d6e:	4694      	mov	ip, r2
 8000d70:	9b00      	ldr	r3, [sp, #0]
 8000d72:	427f      	negs	r7, r7
 8000d74:	4463      	add	r3, ip
 8000d76:	1be0      	subs	r0, r4, r7
 8000d78:	001c      	movs	r4, r3
 8000d7a:	4286      	cmp	r6, r0
 8000d7c:	d100      	bne.n	8000d80 <__aeabi_ddiv+0x384>
 8000d7e:	e0db      	b.n	8000f38 <__aeabi_ddiv+0x53c>
 8000d80:	9901      	ldr	r1, [sp, #4]
 8000d82:	f7ff fa4f 	bl	8000224 <__aeabi_uidivmod>
 8000d86:	464a      	mov	r2, r9
 8000d88:	4342      	muls	r2, r0
 8000d8a:	040b      	lsls	r3, r1, #16
 8000d8c:	0c29      	lsrs	r1, r5, #16
 8000d8e:	0007      	movs	r7, r0
 8000d90:	4319      	orrs	r1, r3
 8000d92:	428a      	cmp	r2, r1
 8000d94:	d907      	bls.n	8000da6 <__aeabi_ddiv+0x3aa>
 8000d96:	1989      	adds	r1, r1, r6
 8000d98:	3f01      	subs	r7, #1
 8000d9a:	428e      	cmp	r6, r1
 8000d9c:	d803      	bhi.n	8000da6 <__aeabi_ddiv+0x3aa>
 8000d9e:	428a      	cmp	r2, r1
 8000da0:	d901      	bls.n	8000da6 <__aeabi_ddiv+0x3aa>
 8000da2:	1e87      	subs	r7, r0, #2
 8000da4:	1989      	adds	r1, r1, r6
 8000da6:	1a88      	subs	r0, r1, r2
 8000da8:	9901      	ldr	r1, [sp, #4]
 8000daa:	f7ff fa3b 	bl	8000224 <__aeabi_uidivmod>
 8000dae:	0409      	lsls	r1, r1, #16
 8000db0:	464a      	mov	r2, r9
 8000db2:	4689      	mov	r9, r1
 8000db4:	0429      	lsls	r1, r5, #16
 8000db6:	464d      	mov	r5, r9
 8000db8:	4342      	muls	r2, r0
 8000dba:	0c09      	lsrs	r1, r1, #16
 8000dbc:	0003      	movs	r3, r0
 8000dbe:	4329      	orrs	r1, r5
 8000dc0:	428a      	cmp	r2, r1
 8000dc2:	d907      	bls.n	8000dd4 <__aeabi_ddiv+0x3d8>
 8000dc4:	1989      	adds	r1, r1, r6
 8000dc6:	3b01      	subs	r3, #1
 8000dc8:	428e      	cmp	r6, r1
 8000dca:	d803      	bhi.n	8000dd4 <__aeabi_ddiv+0x3d8>
 8000dcc:	428a      	cmp	r2, r1
 8000dce:	d901      	bls.n	8000dd4 <__aeabi_ddiv+0x3d8>
 8000dd0:	1e83      	subs	r3, r0, #2
 8000dd2:	1989      	adds	r1, r1, r6
 8000dd4:	043f      	lsls	r7, r7, #16
 8000dd6:	1a89      	subs	r1, r1, r2
 8000dd8:	003a      	movs	r2, r7
 8000dda:	9f03      	ldr	r7, [sp, #12]
 8000ddc:	431a      	orrs	r2, r3
 8000dde:	0038      	movs	r0, r7
 8000de0:	0413      	lsls	r3, r2, #16
 8000de2:	0c1b      	lsrs	r3, r3, #16
 8000de4:	4358      	muls	r0, r3
 8000de6:	4681      	mov	r9, r0
 8000de8:	9802      	ldr	r0, [sp, #8]
 8000dea:	0c15      	lsrs	r5, r2, #16
 8000dec:	436f      	muls	r7, r5
 8000dee:	4343      	muls	r3, r0
 8000df0:	4345      	muls	r5, r0
 8000df2:	4648      	mov	r0, r9
 8000df4:	0c00      	lsrs	r0, r0, #16
 8000df6:	4684      	mov	ip, r0
 8000df8:	19db      	adds	r3, r3, r7
 8000dfa:	4463      	add	r3, ip
 8000dfc:	429f      	cmp	r7, r3
 8000dfe:	d903      	bls.n	8000e08 <__aeabi_ddiv+0x40c>
 8000e00:	2080      	movs	r0, #128	; 0x80
 8000e02:	0240      	lsls	r0, r0, #9
 8000e04:	4684      	mov	ip, r0
 8000e06:	4465      	add	r5, ip
 8000e08:	4648      	mov	r0, r9
 8000e0a:	0c1f      	lsrs	r7, r3, #16
 8000e0c:	0400      	lsls	r0, r0, #16
 8000e0e:	041b      	lsls	r3, r3, #16
 8000e10:	0c00      	lsrs	r0, r0, #16
 8000e12:	197d      	adds	r5, r7, r5
 8000e14:	1818      	adds	r0, r3, r0
 8000e16:	42a9      	cmp	r1, r5
 8000e18:	d200      	bcs.n	8000e1c <__aeabi_ddiv+0x420>
 8000e1a:	e084      	b.n	8000f26 <__aeabi_ddiv+0x52a>
 8000e1c:	d100      	bne.n	8000e20 <__aeabi_ddiv+0x424>
 8000e1e:	e07f      	b.n	8000f20 <__aeabi_ddiv+0x524>
 8000e20:	2301      	movs	r3, #1
 8000e22:	431a      	orrs	r2, r3
 8000e24:	e657      	b.n	8000ad6 <__aeabi_ddiv+0xda>
 8000e26:	2380      	movs	r3, #128	; 0x80
 8000e28:	464a      	mov	r2, r9
 8000e2a:	031b      	lsls	r3, r3, #12
 8000e2c:	4313      	orrs	r3, r2
 8000e2e:	031b      	lsls	r3, r3, #12
 8000e30:	0b1b      	lsrs	r3, r3, #12
 8000e32:	46aa      	mov	sl, r5
 8000e34:	4a6f      	ldr	r2, [pc, #444]	; (8000ff4 <__aeabi_ddiv+0x5f8>)
 8000e36:	e66f      	b.n	8000b18 <__aeabi_ddiv+0x11c>
 8000e38:	42ba      	cmp	r2, r7
 8000e3a:	d900      	bls.n	8000e3e <__aeabi_ddiv+0x442>
 8000e3c:	e735      	b.n	8000caa <__aeabi_ddiv+0x2ae>
 8000e3e:	464b      	mov	r3, r9
 8000e40:	07dc      	lsls	r4, r3, #31
 8000e42:	0858      	lsrs	r0, r3, #1
 8000e44:	087b      	lsrs	r3, r7, #1
 8000e46:	431c      	orrs	r4, r3
 8000e48:	07ff      	lsls	r7, r7, #31
 8000e4a:	e734      	b.n	8000cb6 <__aeabi_ddiv+0x2ba>
 8000e4c:	2400      	movs	r4, #0
 8000e4e:	42af      	cmp	r7, r5
 8000e50:	d289      	bcs.n	8000d66 <__aeabi_ddiv+0x36a>
 8000e52:	4447      	add	r7, r8
 8000e54:	4547      	cmp	r7, r8
 8000e56:	41a4      	sbcs	r4, r4
 8000e58:	465b      	mov	r3, fp
 8000e5a:	4264      	negs	r4, r4
 8000e5c:	19a4      	adds	r4, r4, r6
 8000e5e:	1864      	adds	r4, r4, r1
 8000e60:	3b01      	subs	r3, #1
 8000e62:	42a6      	cmp	r6, r4
 8000e64:	d21e      	bcs.n	8000ea4 <__aeabi_ddiv+0x4a8>
 8000e66:	42a0      	cmp	r0, r4
 8000e68:	d86d      	bhi.n	8000f46 <__aeabi_ddiv+0x54a>
 8000e6a:	d100      	bne.n	8000e6e <__aeabi_ddiv+0x472>
 8000e6c:	e0b6      	b.n	8000fdc <__aeabi_ddiv+0x5e0>
 8000e6e:	1a24      	subs	r4, r4, r0
 8000e70:	469b      	mov	fp, r3
 8000e72:	e778      	b.n	8000d66 <__aeabi_ddiv+0x36a>
 8000e74:	0003      	movs	r3, r0
 8000e76:	465a      	mov	r2, fp
 8000e78:	3b28      	subs	r3, #40	; 0x28
 8000e7a:	409a      	lsls	r2, r3
 8000e7c:	2700      	movs	r7, #0
 8000e7e:	4691      	mov	r9, r2
 8000e80:	e688      	b.n	8000b94 <__aeabi_ddiv+0x198>
 8000e82:	4658      	mov	r0, fp
 8000e84:	f000 fc1e 	bl	80016c4 <__clzsi2>
 8000e88:	3020      	adds	r0, #32
 8000e8a:	e672      	b.n	8000b72 <__aeabi_ddiv+0x176>
 8000e8c:	0003      	movs	r3, r0
 8000e8e:	4652      	mov	r2, sl
 8000e90:	3b28      	subs	r3, #40	; 0x28
 8000e92:	409a      	lsls	r2, r3
 8000e94:	4693      	mov	fp, r2
 8000e96:	2200      	movs	r2, #0
 8000e98:	e6b4      	b.n	8000c04 <__aeabi_ddiv+0x208>
 8000e9a:	4650      	mov	r0, sl
 8000e9c:	f000 fc12 	bl	80016c4 <__clzsi2>
 8000ea0:	3020      	adds	r0, #32
 8000ea2:	e69a      	b.n	8000bda <__aeabi_ddiv+0x1de>
 8000ea4:	42a6      	cmp	r6, r4
 8000ea6:	d1e2      	bne.n	8000e6e <__aeabi_ddiv+0x472>
 8000ea8:	45b8      	cmp	r8, r7
 8000eaa:	d9dc      	bls.n	8000e66 <__aeabi_ddiv+0x46a>
 8000eac:	1a34      	subs	r4, r6, r0
 8000eae:	469b      	mov	fp, r3
 8000eb0:	e759      	b.n	8000d66 <__aeabi_ddiv+0x36a>
 8000eb2:	2b1f      	cmp	r3, #31
 8000eb4:	dc65      	bgt.n	8000f82 <__aeabi_ddiv+0x586>
 8000eb6:	4c50      	ldr	r4, [pc, #320]	; (8000ff8 <__aeabi_ddiv+0x5fc>)
 8000eb8:	9900      	ldr	r1, [sp, #0]
 8000eba:	46a4      	mov	ip, r4
 8000ebc:	465c      	mov	r4, fp
 8000ebe:	4461      	add	r1, ip
 8000ec0:	0008      	movs	r0, r1
 8000ec2:	408c      	lsls	r4, r1
 8000ec4:	0011      	movs	r1, r2
 8000ec6:	4082      	lsls	r2, r0
 8000ec8:	40d9      	lsrs	r1, r3
 8000eca:	1e50      	subs	r0, r2, #1
 8000ecc:	4182      	sbcs	r2, r0
 8000ece:	430c      	orrs	r4, r1
 8000ed0:	4314      	orrs	r4, r2
 8000ed2:	465a      	mov	r2, fp
 8000ed4:	40da      	lsrs	r2, r3
 8000ed6:	0013      	movs	r3, r2
 8000ed8:	0762      	lsls	r2, r4, #29
 8000eda:	d009      	beq.n	8000ef0 <__aeabi_ddiv+0x4f4>
 8000edc:	220f      	movs	r2, #15
 8000ede:	4022      	ands	r2, r4
 8000ee0:	2a04      	cmp	r2, #4
 8000ee2:	d005      	beq.n	8000ef0 <__aeabi_ddiv+0x4f4>
 8000ee4:	0022      	movs	r2, r4
 8000ee6:	1d14      	adds	r4, r2, #4
 8000ee8:	4294      	cmp	r4, r2
 8000eea:	4189      	sbcs	r1, r1
 8000eec:	4249      	negs	r1, r1
 8000eee:	185b      	adds	r3, r3, r1
 8000ef0:	021a      	lsls	r2, r3, #8
 8000ef2:	d562      	bpl.n	8000fba <__aeabi_ddiv+0x5be>
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	2700      	movs	r7, #0
 8000efa:	e60d      	b.n	8000b18 <__aeabi_ddiv+0x11c>
 8000efc:	428a      	cmp	r2, r1
 8000efe:	d800      	bhi.n	8000f02 <__aeabi_ddiv+0x506>
 8000f00:	e70a      	b.n	8000d18 <__aeabi_ddiv+0x31c>
 8000f02:	1e83      	subs	r3, r0, #2
 8000f04:	1989      	adds	r1, r1, r6
 8000f06:	e707      	b.n	8000d18 <__aeabi_ddiv+0x31c>
 8000f08:	230f      	movs	r3, #15
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	2b04      	cmp	r3, #4
 8000f0e:	d100      	bne.n	8000f12 <__aeabi_ddiv+0x516>
 8000f10:	e5e6      	b.n	8000ae0 <__aeabi_ddiv+0xe4>
 8000f12:	1d17      	adds	r7, r2, #4
 8000f14:	4297      	cmp	r7, r2
 8000f16:	4192      	sbcs	r2, r2
 8000f18:	4253      	negs	r3, r2
 8000f1a:	449b      	add	fp, r3
 8000f1c:	08fa      	lsrs	r2, r7, #3
 8000f1e:	e5e0      	b.n	8000ae2 <__aeabi_ddiv+0xe6>
 8000f20:	2800      	cmp	r0, #0
 8000f22:	d100      	bne.n	8000f26 <__aeabi_ddiv+0x52a>
 8000f24:	e5d7      	b.n	8000ad6 <__aeabi_ddiv+0xda>
 8000f26:	1871      	adds	r1, r6, r1
 8000f28:	1e53      	subs	r3, r2, #1
 8000f2a:	42b1      	cmp	r1, r6
 8000f2c:	d327      	bcc.n	8000f7e <__aeabi_ddiv+0x582>
 8000f2e:	42a9      	cmp	r1, r5
 8000f30:	d315      	bcc.n	8000f5e <__aeabi_ddiv+0x562>
 8000f32:	d058      	beq.n	8000fe6 <__aeabi_ddiv+0x5ea>
 8000f34:	001a      	movs	r2, r3
 8000f36:	e773      	b.n	8000e20 <__aeabi_ddiv+0x424>
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	dc00      	bgt.n	8000f3e <__aeabi_ddiv+0x542>
 8000f3c:	e604      	b.n	8000b48 <__aeabi_ddiv+0x14c>
 8000f3e:	2301      	movs	r3, #1
 8000f40:	2200      	movs	r2, #0
 8000f42:	449b      	add	fp, r3
 8000f44:	e5cd      	b.n	8000ae2 <__aeabi_ddiv+0xe6>
 8000f46:	2302      	movs	r3, #2
 8000f48:	4447      	add	r7, r8
 8000f4a:	4547      	cmp	r7, r8
 8000f4c:	4189      	sbcs	r1, r1
 8000f4e:	425b      	negs	r3, r3
 8000f50:	469c      	mov	ip, r3
 8000f52:	4249      	negs	r1, r1
 8000f54:	1989      	adds	r1, r1, r6
 8000f56:	190c      	adds	r4, r1, r4
 8000f58:	44e3      	add	fp, ip
 8000f5a:	1a24      	subs	r4, r4, r0
 8000f5c:	e703      	b.n	8000d66 <__aeabi_ddiv+0x36a>
 8000f5e:	4643      	mov	r3, r8
 8000f60:	005f      	lsls	r7, r3, #1
 8000f62:	4547      	cmp	r7, r8
 8000f64:	419b      	sbcs	r3, r3
 8000f66:	46b8      	mov	r8, r7
 8000f68:	425b      	negs	r3, r3
 8000f6a:	199e      	adds	r6, r3, r6
 8000f6c:	3a02      	subs	r2, #2
 8000f6e:	1989      	adds	r1, r1, r6
 8000f70:	42a9      	cmp	r1, r5
 8000f72:	d000      	beq.n	8000f76 <__aeabi_ddiv+0x57a>
 8000f74:	e754      	b.n	8000e20 <__aeabi_ddiv+0x424>
 8000f76:	4540      	cmp	r0, r8
 8000f78:	d000      	beq.n	8000f7c <__aeabi_ddiv+0x580>
 8000f7a:	e751      	b.n	8000e20 <__aeabi_ddiv+0x424>
 8000f7c:	e5ab      	b.n	8000ad6 <__aeabi_ddiv+0xda>
 8000f7e:	001a      	movs	r2, r3
 8000f80:	e7f6      	b.n	8000f70 <__aeabi_ddiv+0x574>
 8000f82:	211f      	movs	r1, #31
 8000f84:	465f      	mov	r7, fp
 8000f86:	4249      	negs	r1, r1
 8000f88:	1b0c      	subs	r4, r1, r4
 8000f8a:	40e7      	lsrs	r7, r4
 8000f8c:	2b20      	cmp	r3, #32
 8000f8e:	d007      	beq.n	8000fa0 <__aeabi_ddiv+0x5a4>
 8000f90:	491a      	ldr	r1, [pc, #104]	; (8000ffc <__aeabi_ddiv+0x600>)
 8000f92:	9b00      	ldr	r3, [sp, #0]
 8000f94:	468c      	mov	ip, r1
 8000f96:	4463      	add	r3, ip
 8000f98:	0018      	movs	r0, r3
 8000f9a:	465b      	mov	r3, fp
 8000f9c:	4083      	lsls	r3, r0
 8000f9e:	431a      	orrs	r2, r3
 8000fa0:	1e50      	subs	r0, r2, #1
 8000fa2:	4182      	sbcs	r2, r0
 8000fa4:	433a      	orrs	r2, r7
 8000fa6:	2707      	movs	r7, #7
 8000fa8:	2300      	movs	r3, #0
 8000faa:	4017      	ands	r7, r2
 8000fac:	d009      	beq.n	8000fc2 <__aeabi_ddiv+0x5c6>
 8000fae:	210f      	movs	r1, #15
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	4011      	ands	r1, r2
 8000fb4:	0014      	movs	r4, r2
 8000fb6:	2904      	cmp	r1, #4
 8000fb8:	d195      	bne.n	8000ee6 <__aeabi_ddiv+0x4ea>
 8000fba:	0022      	movs	r2, r4
 8000fbc:	075f      	lsls	r7, r3, #29
 8000fbe:	025b      	lsls	r3, r3, #9
 8000fc0:	0b1b      	lsrs	r3, r3, #12
 8000fc2:	08d2      	lsrs	r2, r2, #3
 8000fc4:	4317      	orrs	r7, r2
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	e5a6      	b.n	8000b18 <__aeabi_ddiv+0x11c>
 8000fca:	2380      	movs	r3, #128	; 0x80
 8000fcc:	4659      	mov	r1, fp
 8000fce:	031b      	lsls	r3, r3, #12
 8000fd0:	430b      	orrs	r3, r1
 8000fd2:	031b      	lsls	r3, r3, #12
 8000fd4:	0017      	movs	r7, r2
 8000fd6:	0b1b      	lsrs	r3, r3, #12
 8000fd8:	4a06      	ldr	r2, [pc, #24]	; (8000ff4 <__aeabi_ddiv+0x5f8>)
 8000fda:	e59d      	b.n	8000b18 <__aeabi_ddiv+0x11c>
 8000fdc:	42bd      	cmp	r5, r7
 8000fde:	d8b2      	bhi.n	8000f46 <__aeabi_ddiv+0x54a>
 8000fe0:	469b      	mov	fp, r3
 8000fe2:	2400      	movs	r4, #0
 8000fe4:	e6bf      	b.n	8000d66 <__aeabi_ddiv+0x36a>
 8000fe6:	4580      	cmp	r8, r0
 8000fe8:	d3b9      	bcc.n	8000f5e <__aeabi_ddiv+0x562>
 8000fea:	001a      	movs	r2, r3
 8000fec:	e7c3      	b.n	8000f76 <__aeabi_ddiv+0x57a>
 8000fee:	46c0      	nop			; (mov r8, r8)
 8000ff0:	000003ff 	.word	0x000003ff
 8000ff4:	000007ff 	.word	0x000007ff
 8000ff8:	0000041e 	.word	0x0000041e
 8000ffc:	0000043e 	.word	0x0000043e

08001000 <__aeabi_dmul>:
 8001000:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001002:	4657      	mov	r7, sl
 8001004:	46de      	mov	lr, fp
 8001006:	464e      	mov	r6, r9
 8001008:	4645      	mov	r5, r8
 800100a:	b5e0      	push	{r5, r6, r7, lr}
 800100c:	4683      	mov	fp, r0
 800100e:	0006      	movs	r6, r0
 8001010:	030f      	lsls	r7, r1, #12
 8001012:	0048      	lsls	r0, r1, #1
 8001014:	b087      	sub	sp, #28
 8001016:	4692      	mov	sl, r2
 8001018:	001d      	movs	r5, r3
 800101a:	0b3f      	lsrs	r7, r7, #12
 800101c:	0d40      	lsrs	r0, r0, #21
 800101e:	0fcc      	lsrs	r4, r1, #31
 8001020:	2800      	cmp	r0, #0
 8001022:	d100      	bne.n	8001026 <__aeabi_dmul+0x26>
 8001024:	e06f      	b.n	8001106 <__aeabi_dmul+0x106>
 8001026:	4bde      	ldr	r3, [pc, #888]	; (80013a0 <__aeabi_dmul+0x3a0>)
 8001028:	4298      	cmp	r0, r3
 800102a:	d038      	beq.n	800109e <__aeabi_dmul+0x9e>
 800102c:	2380      	movs	r3, #128	; 0x80
 800102e:	00ff      	lsls	r7, r7, #3
 8001030:	041b      	lsls	r3, r3, #16
 8001032:	431f      	orrs	r7, r3
 8001034:	0f73      	lsrs	r3, r6, #29
 8001036:	433b      	orrs	r3, r7
 8001038:	9301      	str	r3, [sp, #4]
 800103a:	4bda      	ldr	r3, [pc, #872]	; (80013a4 <__aeabi_dmul+0x3a4>)
 800103c:	2700      	movs	r7, #0
 800103e:	4699      	mov	r9, r3
 8001040:	2300      	movs	r3, #0
 8001042:	469b      	mov	fp, r3
 8001044:	00f6      	lsls	r6, r6, #3
 8001046:	4481      	add	r9, r0
 8001048:	032b      	lsls	r3, r5, #12
 800104a:	0069      	lsls	r1, r5, #1
 800104c:	0b1b      	lsrs	r3, r3, #12
 800104e:	4652      	mov	r2, sl
 8001050:	4698      	mov	r8, r3
 8001052:	0d49      	lsrs	r1, r1, #21
 8001054:	0fed      	lsrs	r5, r5, #31
 8001056:	2900      	cmp	r1, #0
 8001058:	d100      	bne.n	800105c <__aeabi_dmul+0x5c>
 800105a:	e085      	b.n	8001168 <__aeabi_dmul+0x168>
 800105c:	4bd0      	ldr	r3, [pc, #832]	; (80013a0 <__aeabi_dmul+0x3a0>)
 800105e:	4299      	cmp	r1, r3
 8001060:	d100      	bne.n	8001064 <__aeabi_dmul+0x64>
 8001062:	e073      	b.n	800114c <__aeabi_dmul+0x14c>
 8001064:	4643      	mov	r3, r8
 8001066:	00da      	lsls	r2, r3, #3
 8001068:	2380      	movs	r3, #128	; 0x80
 800106a:	041b      	lsls	r3, r3, #16
 800106c:	4313      	orrs	r3, r2
 800106e:	4652      	mov	r2, sl
 8001070:	48cc      	ldr	r0, [pc, #816]	; (80013a4 <__aeabi_dmul+0x3a4>)
 8001072:	0f52      	lsrs	r2, r2, #29
 8001074:	4684      	mov	ip, r0
 8001076:	4313      	orrs	r3, r2
 8001078:	4652      	mov	r2, sl
 800107a:	2000      	movs	r0, #0
 800107c:	4461      	add	r1, ip
 800107e:	00d2      	lsls	r2, r2, #3
 8001080:	4489      	add	r9, r1
 8001082:	0021      	movs	r1, r4
 8001084:	4069      	eors	r1, r5
 8001086:	9100      	str	r1, [sp, #0]
 8001088:	468c      	mov	ip, r1
 800108a:	2101      	movs	r1, #1
 800108c:	4449      	add	r1, r9
 800108e:	468a      	mov	sl, r1
 8001090:	2f0f      	cmp	r7, #15
 8001092:	d900      	bls.n	8001096 <__aeabi_dmul+0x96>
 8001094:	e090      	b.n	80011b8 <__aeabi_dmul+0x1b8>
 8001096:	49c4      	ldr	r1, [pc, #784]	; (80013a8 <__aeabi_dmul+0x3a8>)
 8001098:	00bf      	lsls	r7, r7, #2
 800109a:	59cf      	ldr	r7, [r1, r7]
 800109c:	46bf      	mov	pc, r7
 800109e:	465b      	mov	r3, fp
 80010a0:	433b      	orrs	r3, r7
 80010a2:	9301      	str	r3, [sp, #4]
 80010a4:	d000      	beq.n	80010a8 <__aeabi_dmul+0xa8>
 80010a6:	e16a      	b.n	800137e <__aeabi_dmul+0x37e>
 80010a8:	2302      	movs	r3, #2
 80010aa:	2708      	movs	r7, #8
 80010ac:	2600      	movs	r6, #0
 80010ae:	4681      	mov	r9, r0
 80010b0:	469b      	mov	fp, r3
 80010b2:	e7c9      	b.n	8001048 <__aeabi_dmul+0x48>
 80010b4:	0032      	movs	r2, r6
 80010b6:	4658      	mov	r0, fp
 80010b8:	9b01      	ldr	r3, [sp, #4]
 80010ba:	4661      	mov	r1, ip
 80010bc:	9100      	str	r1, [sp, #0]
 80010be:	2802      	cmp	r0, #2
 80010c0:	d100      	bne.n	80010c4 <__aeabi_dmul+0xc4>
 80010c2:	e075      	b.n	80011b0 <__aeabi_dmul+0x1b0>
 80010c4:	2803      	cmp	r0, #3
 80010c6:	d100      	bne.n	80010ca <__aeabi_dmul+0xca>
 80010c8:	e1fe      	b.n	80014c8 <__aeabi_dmul+0x4c8>
 80010ca:	2801      	cmp	r0, #1
 80010cc:	d000      	beq.n	80010d0 <__aeabi_dmul+0xd0>
 80010ce:	e12c      	b.n	800132a <__aeabi_dmul+0x32a>
 80010d0:	2300      	movs	r3, #0
 80010d2:	2700      	movs	r7, #0
 80010d4:	2600      	movs	r6, #0
 80010d6:	2500      	movs	r5, #0
 80010d8:	033f      	lsls	r7, r7, #12
 80010da:	0d2a      	lsrs	r2, r5, #20
 80010dc:	0b3f      	lsrs	r7, r7, #12
 80010de:	48b3      	ldr	r0, [pc, #716]	; (80013ac <__aeabi_dmul+0x3ac>)
 80010e0:	0512      	lsls	r2, r2, #20
 80010e2:	433a      	orrs	r2, r7
 80010e4:	4002      	ands	r2, r0
 80010e6:	051b      	lsls	r3, r3, #20
 80010e8:	4313      	orrs	r3, r2
 80010ea:	9a00      	ldr	r2, [sp, #0]
 80010ec:	005b      	lsls	r3, r3, #1
 80010ee:	07d1      	lsls	r1, r2, #31
 80010f0:	085b      	lsrs	r3, r3, #1
 80010f2:	430b      	orrs	r3, r1
 80010f4:	0030      	movs	r0, r6
 80010f6:	0019      	movs	r1, r3
 80010f8:	b007      	add	sp, #28
 80010fa:	bc3c      	pop	{r2, r3, r4, r5}
 80010fc:	4690      	mov	r8, r2
 80010fe:	4699      	mov	r9, r3
 8001100:	46a2      	mov	sl, r4
 8001102:	46ab      	mov	fp, r5
 8001104:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001106:	465b      	mov	r3, fp
 8001108:	433b      	orrs	r3, r7
 800110a:	9301      	str	r3, [sp, #4]
 800110c:	d100      	bne.n	8001110 <__aeabi_dmul+0x110>
 800110e:	e12f      	b.n	8001370 <__aeabi_dmul+0x370>
 8001110:	2f00      	cmp	r7, #0
 8001112:	d100      	bne.n	8001116 <__aeabi_dmul+0x116>
 8001114:	e1a5      	b.n	8001462 <__aeabi_dmul+0x462>
 8001116:	0038      	movs	r0, r7
 8001118:	f000 fad4 	bl	80016c4 <__clzsi2>
 800111c:	0003      	movs	r3, r0
 800111e:	3b0b      	subs	r3, #11
 8001120:	2b1c      	cmp	r3, #28
 8001122:	dd00      	ble.n	8001126 <__aeabi_dmul+0x126>
 8001124:	e196      	b.n	8001454 <__aeabi_dmul+0x454>
 8001126:	221d      	movs	r2, #29
 8001128:	1ad3      	subs	r3, r2, r3
 800112a:	465a      	mov	r2, fp
 800112c:	0001      	movs	r1, r0
 800112e:	40da      	lsrs	r2, r3
 8001130:	465e      	mov	r6, fp
 8001132:	3908      	subs	r1, #8
 8001134:	408f      	lsls	r7, r1
 8001136:	0013      	movs	r3, r2
 8001138:	408e      	lsls	r6, r1
 800113a:	433b      	orrs	r3, r7
 800113c:	9301      	str	r3, [sp, #4]
 800113e:	4b9c      	ldr	r3, [pc, #624]	; (80013b0 <__aeabi_dmul+0x3b0>)
 8001140:	2700      	movs	r7, #0
 8001142:	1a1b      	subs	r3, r3, r0
 8001144:	4699      	mov	r9, r3
 8001146:	2300      	movs	r3, #0
 8001148:	469b      	mov	fp, r3
 800114a:	e77d      	b.n	8001048 <__aeabi_dmul+0x48>
 800114c:	4641      	mov	r1, r8
 800114e:	4653      	mov	r3, sl
 8001150:	430b      	orrs	r3, r1
 8001152:	4993      	ldr	r1, [pc, #588]	; (80013a0 <__aeabi_dmul+0x3a0>)
 8001154:	468c      	mov	ip, r1
 8001156:	44e1      	add	r9, ip
 8001158:	2b00      	cmp	r3, #0
 800115a:	d000      	beq.n	800115e <__aeabi_dmul+0x15e>
 800115c:	e11a      	b.n	8001394 <__aeabi_dmul+0x394>
 800115e:	2202      	movs	r2, #2
 8001160:	2002      	movs	r0, #2
 8001162:	4317      	orrs	r7, r2
 8001164:	2200      	movs	r2, #0
 8001166:	e78c      	b.n	8001082 <__aeabi_dmul+0x82>
 8001168:	4313      	orrs	r3, r2
 800116a:	d100      	bne.n	800116e <__aeabi_dmul+0x16e>
 800116c:	e10d      	b.n	800138a <__aeabi_dmul+0x38a>
 800116e:	4643      	mov	r3, r8
 8001170:	2b00      	cmp	r3, #0
 8001172:	d100      	bne.n	8001176 <__aeabi_dmul+0x176>
 8001174:	e181      	b.n	800147a <__aeabi_dmul+0x47a>
 8001176:	4640      	mov	r0, r8
 8001178:	f000 faa4 	bl	80016c4 <__clzsi2>
 800117c:	0002      	movs	r2, r0
 800117e:	3a0b      	subs	r2, #11
 8001180:	2a1c      	cmp	r2, #28
 8001182:	dd00      	ble.n	8001186 <__aeabi_dmul+0x186>
 8001184:	e172      	b.n	800146c <__aeabi_dmul+0x46c>
 8001186:	0001      	movs	r1, r0
 8001188:	4643      	mov	r3, r8
 800118a:	3908      	subs	r1, #8
 800118c:	408b      	lsls	r3, r1
 800118e:	4698      	mov	r8, r3
 8001190:	231d      	movs	r3, #29
 8001192:	1a9a      	subs	r2, r3, r2
 8001194:	4653      	mov	r3, sl
 8001196:	40d3      	lsrs	r3, r2
 8001198:	001a      	movs	r2, r3
 800119a:	4643      	mov	r3, r8
 800119c:	4313      	orrs	r3, r2
 800119e:	4652      	mov	r2, sl
 80011a0:	408a      	lsls	r2, r1
 80011a2:	4649      	mov	r1, r9
 80011a4:	1a08      	subs	r0, r1, r0
 80011a6:	4982      	ldr	r1, [pc, #520]	; (80013b0 <__aeabi_dmul+0x3b0>)
 80011a8:	4689      	mov	r9, r1
 80011aa:	4481      	add	r9, r0
 80011ac:	2000      	movs	r0, #0
 80011ae:	e768      	b.n	8001082 <__aeabi_dmul+0x82>
 80011b0:	4b7b      	ldr	r3, [pc, #492]	; (80013a0 <__aeabi_dmul+0x3a0>)
 80011b2:	2700      	movs	r7, #0
 80011b4:	2600      	movs	r6, #0
 80011b6:	e78e      	b.n	80010d6 <__aeabi_dmul+0xd6>
 80011b8:	0c14      	lsrs	r4, r2, #16
 80011ba:	0412      	lsls	r2, r2, #16
 80011bc:	0c12      	lsrs	r2, r2, #16
 80011be:	0011      	movs	r1, r2
 80011c0:	0c37      	lsrs	r7, r6, #16
 80011c2:	0436      	lsls	r6, r6, #16
 80011c4:	0c35      	lsrs	r5, r6, #16
 80011c6:	4379      	muls	r1, r7
 80011c8:	0028      	movs	r0, r5
 80011ca:	468c      	mov	ip, r1
 80011cc:	002e      	movs	r6, r5
 80011ce:	4360      	muls	r0, r4
 80011d0:	4460      	add	r0, ip
 80011d2:	4683      	mov	fp, r0
 80011d4:	4356      	muls	r6, r2
 80011d6:	0021      	movs	r1, r4
 80011d8:	0c30      	lsrs	r0, r6, #16
 80011da:	4680      	mov	r8, r0
 80011dc:	4658      	mov	r0, fp
 80011de:	4379      	muls	r1, r7
 80011e0:	4440      	add	r0, r8
 80011e2:	9102      	str	r1, [sp, #8]
 80011e4:	4584      	cmp	ip, r0
 80011e6:	d906      	bls.n	80011f6 <__aeabi_dmul+0x1f6>
 80011e8:	4688      	mov	r8, r1
 80011ea:	2180      	movs	r1, #128	; 0x80
 80011ec:	0249      	lsls	r1, r1, #9
 80011ee:	468c      	mov	ip, r1
 80011f0:	44e0      	add	r8, ip
 80011f2:	4641      	mov	r1, r8
 80011f4:	9102      	str	r1, [sp, #8]
 80011f6:	0436      	lsls	r6, r6, #16
 80011f8:	0c01      	lsrs	r1, r0, #16
 80011fa:	0c36      	lsrs	r6, r6, #16
 80011fc:	0400      	lsls	r0, r0, #16
 80011fe:	468b      	mov	fp, r1
 8001200:	1981      	adds	r1, r0, r6
 8001202:	0c1e      	lsrs	r6, r3, #16
 8001204:	041b      	lsls	r3, r3, #16
 8001206:	0c1b      	lsrs	r3, r3, #16
 8001208:	9103      	str	r1, [sp, #12]
 800120a:	0019      	movs	r1, r3
 800120c:	4379      	muls	r1, r7
 800120e:	468c      	mov	ip, r1
 8001210:	0028      	movs	r0, r5
 8001212:	4375      	muls	r5, r6
 8001214:	4465      	add	r5, ip
 8001216:	46a8      	mov	r8, r5
 8001218:	4358      	muls	r0, r3
 800121a:	0c05      	lsrs	r5, r0, #16
 800121c:	4445      	add	r5, r8
 800121e:	4377      	muls	r7, r6
 8001220:	42a9      	cmp	r1, r5
 8001222:	d903      	bls.n	800122c <__aeabi_dmul+0x22c>
 8001224:	2180      	movs	r1, #128	; 0x80
 8001226:	0249      	lsls	r1, r1, #9
 8001228:	468c      	mov	ip, r1
 800122a:	4467      	add	r7, ip
 800122c:	0c29      	lsrs	r1, r5, #16
 800122e:	468c      	mov	ip, r1
 8001230:	0039      	movs	r1, r7
 8001232:	0400      	lsls	r0, r0, #16
 8001234:	0c00      	lsrs	r0, r0, #16
 8001236:	042d      	lsls	r5, r5, #16
 8001238:	182d      	adds	r5, r5, r0
 800123a:	4461      	add	r1, ip
 800123c:	44ab      	add	fp, r5
 800123e:	9105      	str	r1, [sp, #20]
 8001240:	4659      	mov	r1, fp
 8001242:	9104      	str	r1, [sp, #16]
 8001244:	9901      	ldr	r1, [sp, #4]
 8001246:	040f      	lsls	r7, r1, #16
 8001248:	0c3f      	lsrs	r7, r7, #16
 800124a:	0c08      	lsrs	r0, r1, #16
 800124c:	0039      	movs	r1, r7
 800124e:	4351      	muls	r1, r2
 8001250:	4342      	muls	r2, r0
 8001252:	4690      	mov	r8, r2
 8001254:	0002      	movs	r2, r0
 8001256:	468c      	mov	ip, r1
 8001258:	0c09      	lsrs	r1, r1, #16
 800125a:	468b      	mov	fp, r1
 800125c:	4362      	muls	r2, r4
 800125e:	437c      	muls	r4, r7
 8001260:	4444      	add	r4, r8
 8001262:	445c      	add	r4, fp
 8001264:	45a0      	cmp	r8, r4
 8001266:	d903      	bls.n	8001270 <__aeabi_dmul+0x270>
 8001268:	2180      	movs	r1, #128	; 0x80
 800126a:	0249      	lsls	r1, r1, #9
 800126c:	4688      	mov	r8, r1
 800126e:	4442      	add	r2, r8
 8001270:	0c21      	lsrs	r1, r4, #16
 8001272:	4688      	mov	r8, r1
 8001274:	4661      	mov	r1, ip
 8001276:	0409      	lsls	r1, r1, #16
 8001278:	0c09      	lsrs	r1, r1, #16
 800127a:	468c      	mov	ip, r1
 800127c:	0039      	movs	r1, r7
 800127e:	4359      	muls	r1, r3
 8001280:	4343      	muls	r3, r0
 8001282:	4370      	muls	r0, r6
 8001284:	437e      	muls	r6, r7
 8001286:	0c0f      	lsrs	r7, r1, #16
 8001288:	18f6      	adds	r6, r6, r3
 800128a:	0424      	lsls	r4, r4, #16
 800128c:	19be      	adds	r6, r7, r6
 800128e:	4464      	add	r4, ip
 8001290:	4442      	add	r2, r8
 8001292:	468c      	mov	ip, r1
 8001294:	42b3      	cmp	r3, r6
 8001296:	d903      	bls.n	80012a0 <__aeabi_dmul+0x2a0>
 8001298:	2380      	movs	r3, #128	; 0x80
 800129a:	025b      	lsls	r3, r3, #9
 800129c:	4698      	mov	r8, r3
 800129e:	4440      	add	r0, r8
 80012a0:	9b02      	ldr	r3, [sp, #8]
 80012a2:	4661      	mov	r1, ip
 80012a4:	4698      	mov	r8, r3
 80012a6:	9b04      	ldr	r3, [sp, #16]
 80012a8:	0437      	lsls	r7, r6, #16
 80012aa:	4443      	add	r3, r8
 80012ac:	469b      	mov	fp, r3
 80012ae:	45ab      	cmp	fp, r5
 80012b0:	41ad      	sbcs	r5, r5
 80012b2:	426b      	negs	r3, r5
 80012b4:	040d      	lsls	r5, r1, #16
 80012b6:	9905      	ldr	r1, [sp, #20]
 80012b8:	0c2d      	lsrs	r5, r5, #16
 80012ba:	468c      	mov	ip, r1
 80012bc:	197f      	adds	r7, r7, r5
 80012be:	4467      	add	r7, ip
 80012c0:	18fd      	adds	r5, r7, r3
 80012c2:	46a8      	mov	r8, r5
 80012c4:	465d      	mov	r5, fp
 80012c6:	192d      	adds	r5, r5, r4
 80012c8:	42a5      	cmp	r5, r4
 80012ca:	41a4      	sbcs	r4, r4
 80012cc:	4693      	mov	fp, r2
 80012ce:	4264      	negs	r4, r4
 80012d0:	46a4      	mov	ip, r4
 80012d2:	44c3      	add	fp, r8
 80012d4:	44dc      	add	ip, fp
 80012d6:	428f      	cmp	r7, r1
 80012d8:	41bf      	sbcs	r7, r7
 80012da:	4598      	cmp	r8, r3
 80012dc:	419b      	sbcs	r3, r3
 80012de:	4593      	cmp	fp, r2
 80012e0:	4192      	sbcs	r2, r2
 80012e2:	45a4      	cmp	ip, r4
 80012e4:	41a4      	sbcs	r4, r4
 80012e6:	425b      	negs	r3, r3
 80012e8:	427f      	negs	r7, r7
 80012ea:	431f      	orrs	r7, r3
 80012ec:	0c36      	lsrs	r6, r6, #16
 80012ee:	4252      	negs	r2, r2
 80012f0:	4264      	negs	r4, r4
 80012f2:	19bf      	adds	r7, r7, r6
 80012f4:	4322      	orrs	r2, r4
 80012f6:	18bf      	adds	r7, r7, r2
 80012f8:	4662      	mov	r2, ip
 80012fa:	1838      	adds	r0, r7, r0
 80012fc:	0243      	lsls	r3, r0, #9
 80012fe:	0dd2      	lsrs	r2, r2, #23
 8001300:	9903      	ldr	r1, [sp, #12]
 8001302:	4313      	orrs	r3, r2
 8001304:	026a      	lsls	r2, r5, #9
 8001306:	430a      	orrs	r2, r1
 8001308:	1e50      	subs	r0, r2, #1
 800130a:	4182      	sbcs	r2, r0
 800130c:	4661      	mov	r1, ip
 800130e:	0ded      	lsrs	r5, r5, #23
 8001310:	432a      	orrs	r2, r5
 8001312:	024e      	lsls	r6, r1, #9
 8001314:	4332      	orrs	r2, r6
 8001316:	01d9      	lsls	r1, r3, #7
 8001318:	d400      	bmi.n	800131c <__aeabi_dmul+0x31c>
 800131a:	e0b3      	b.n	8001484 <__aeabi_dmul+0x484>
 800131c:	2601      	movs	r6, #1
 800131e:	0850      	lsrs	r0, r2, #1
 8001320:	4032      	ands	r2, r6
 8001322:	4302      	orrs	r2, r0
 8001324:	07de      	lsls	r6, r3, #31
 8001326:	4332      	orrs	r2, r6
 8001328:	085b      	lsrs	r3, r3, #1
 800132a:	4c22      	ldr	r4, [pc, #136]	; (80013b4 <__aeabi_dmul+0x3b4>)
 800132c:	4454      	add	r4, sl
 800132e:	2c00      	cmp	r4, #0
 8001330:	dd62      	ble.n	80013f8 <__aeabi_dmul+0x3f8>
 8001332:	0751      	lsls	r1, r2, #29
 8001334:	d009      	beq.n	800134a <__aeabi_dmul+0x34a>
 8001336:	200f      	movs	r0, #15
 8001338:	4010      	ands	r0, r2
 800133a:	2804      	cmp	r0, #4
 800133c:	d005      	beq.n	800134a <__aeabi_dmul+0x34a>
 800133e:	1d10      	adds	r0, r2, #4
 8001340:	4290      	cmp	r0, r2
 8001342:	4192      	sbcs	r2, r2
 8001344:	4252      	negs	r2, r2
 8001346:	189b      	adds	r3, r3, r2
 8001348:	0002      	movs	r2, r0
 800134a:	01d9      	lsls	r1, r3, #7
 800134c:	d504      	bpl.n	8001358 <__aeabi_dmul+0x358>
 800134e:	2480      	movs	r4, #128	; 0x80
 8001350:	4819      	ldr	r0, [pc, #100]	; (80013b8 <__aeabi_dmul+0x3b8>)
 8001352:	00e4      	lsls	r4, r4, #3
 8001354:	4003      	ands	r3, r0
 8001356:	4454      	add	r4, sl
 8001358:	4818      	ldr	r0, [pc, #96]	; (80013bc <__aeabi_dmul+0x3bc>)
 800135a:	4284      	cmp	r4, r0
 800135c:	dd00      	ble.n	8001360 <__aeabi_dmul+0x360>
 800135e:	e727      	b.n	80011b0 <__aeabi_dmul+0x1b0>
 8001360:	075e      	lsls	r6, r3, #29
 8001362:	025b      	lsls	r3, r3, #9
 8001364:	08d2      	lsrs	r2, r2, #3
 8001366:	0b1f      	lsrs	r7, r3, #12
 8001368:	0563      	lsls	r3, r4, #21
 800136a:	4316      	orrs	r6, r2
 800136c:	0d5b      	lsrs	r3, r3, #21
 800136e:	e6b2      	b.n	80010d6 <__aeabi_dmul+0xd6>
 8001370:	2300      	movs	r3, #0
 8001372:	4699      	mov	r9, r3
 8001374:	3301      	adds	r3, #1
 8001376:	2704      	movs	r7, #4
 8001378:	2600      	movs	r6, #0
 800137a:	469b      	mov	fp, r3
 800137c:	e664      	b.n	8001048 <__aeabi_dmul+0x48>
 800137e:	2303      	movs	r3, #3
 8001380:	9701      	str	r7, [sp, #4]
 8001382:	4681      	mov	r9, r0
 8001384:	270c      	movs	r7, #12
 8001386:	469b      	mov	fp, r3
 8001388:	e65e      	b.n	8001048 <__aeabi_dmul+0x48>
 800138a:	2201      	movs	r2, #1
 800138c:	2001      	movs	r0, #1
 800138e:	4317      	orrs	r7, r2
 8001390:	2200      	movs	r2, #0
 8001392:	e676      	b.n	8001082 <__aeabi_dmul+0x82>
 8001394:	2303      	movs	r3, #3
 8001396:	2003      	movs	r0, #3
 8001398:	431f      	orrs	r7, r3
 800139a:	4643      	mov	r3, r8
 800139c:	e671      	b.n	8001082 <__aeabi_dmul+0x82>
 800139e:	46c0      	nop			; (mov r8, r8)
 80013a0:	000007ff 	.word	0x000007ff
 80013a4:	fffffc01 	.word	0xfffffc01
 80013a8:	0800b6b4 	.word	0x0800b6b4
 80013ac:	800fffff 	.word	0x800fffff
 80013b0:	fffffc0d 	.word	0xfffffc0d
 80013b4:	000003ff 	.word	0x000003ff
 80013b8:	feffffff 	.word	0xfeffffff
 80013bc:	000007fe 	.word	0x000007fe
 80013c0:	2300      	movs	r3, #0
 80013c2:	2780      	movs	r7, #128	; 0x80
 80013c4:	9300      	str	r3, [sp, #0]
 80013c6:	033f      	lsls	r7, r7, #12
 80013c8:	2600      	movs	r6, #0
 80013ca:	4b43      	ldr	r3, [pc, #268]	; (80014d8 <__aeabi_dmul+0x4d8>)
 80013cc:	e683      	b.n	80010d6 <__aeabi_dmul+0xd6>
 80013ce:	9b01      	ldr	r3, [sp, #4]
 80013d0:	0032      	movs	r2, r6
 80013d2:	46a4      	mov	ip, r4
 80013d4:	4658      	mov	r0, fp
 80013d6:	e670      	b.n	80010ba <__aeabi_dmul+0xba>
 80013d8:	46ac      	mov	ip, r5
 80013da:	e66e      	b.n	80010ba <__aeabi_dmul+0xba>
 80013dc:	2780      	movs	r7, #128	; 0x80
 80013de:	9901      	ldr	r1, [sp, #4]
 80013e0:	033f      	lsls	r7, r7, #12
 80013e2:	4239      	tst	r1, r7
 80013e4:	d02d      	beq.n	8001442 <__aeabi_dmul+0x442>
 80013e6:	423b      	tst	r3, r7
 80013e8:	d12b      	bne.n	8001442 <__aeabi_dmul+0x442>
 80013ea:	431f      	orrs	r7, r3
 80013ec:	033f      	lsls	r7, r7, #12
 80013ee:	0b3f      	lsrs	r7, r7, #12
 80013f0:	9500      	str	r5, [sp, #0]
 80013f2:	0016      	movs	r6, r2
 80013f4:	4b38      	ldr	r3, [pc, #224]	; (80014d8 <__aeabi_dmul+0x4d8>)
 80013f6:	e66e      	b.n	80010d6 <__aeabi_dmul+0xd6>
 80013f8:	2501      	movs	r5, #1
 80013fa:	1b2d      	subs	r5, r5, r4
 80013fc:	2d38      	cmp	r5, #56	; 0x38
 80013fe:	dd00      	ble.n	8001402 <__aeabi_dmul+0x402>
 8001400:	e666      	b.n	80010d0 <__aeabi_dmul+0xd0>
 8001402:	2d1f      	cmp	r5, #31
 8001404:	dc40      	bgt.n	8001488 <__aeabi_dmul+0x488>
 8001406:	4835      	ldr	r0, [pc, #212]	; (80014dc <__aeabi_dmul+0x4dc>)
 8001408:	001c      	movs	r4, r3
 800140a:	4450      	add	r0, sl
 800140c:	0016      	movs	r6, r2
 800140e:	4082      	lsls	r2, r0
 8001410:	4084      	lsls	r4, r0
 8001412:	40ee      	lsrs	r6, r5
 8001414:	1e50      	subs	r0, r2, #1
 8001416:	4182      	sbcs	r2, r0
 8001418:	4334      	orrs	r4, r6
 800141a:	4314      	orrs	r4, r2
 800141c:	40eb      	lsrs	r3, r5
 800141e:	0762      	lsls	r2, r4, #29
 8001420:	d009      	beq.n	8001436 <__aeabi_dmul+0x436>
 8001422:	220f      	movs	r2, #15
 8001424:	4022      	ands	r2, r4
 8001426:	2a04      	cmp	r2, #4
 8001428:	d005      	beq.n	8001436 <__aeabi_dmul+0x436>
 800142a:	0022      	movs	r2, r4
 800142c:	1d14      	adds	r4, r2, #4
 800142e:	4294      	cmp	r4, r2
 8001430:	4180      	sbcs	r0, r0
 8001432:	4240      	negs	r0, r0
 8001434:	181b      	adds	r3, r3, r0
 8001436:	021a      	lsls	r2, r3, #8
 8001438:	d53e      	bpl.n	80014b8 <__aeabi_dmul+0x4b8>
 800143a:	2301      	movs	r3, #1
 800143c:	2700      	movs	r7, #0
 800143e:	2600      	movs	r6, #0
 8001440:	e649      	b.n	80010d6 <__aeabi_dmul+0xd6>
 8001442:	2780      	movs	r7, #128	; 0x80
 8001444:	9b01      	ldr	r3, [sp, #4]
 8001446:	033f      	lsls	r7, r7, #12
 8001448:	431f      	orrs	r7, r3
 800144a:	033f      	lsls	r7, r7, #12
 800144c:	0b3f      	lsrs	r7, r7, #12
 800144e:	9400      	str	r4, [sp, #0]
 8001450:	4b21      	ldr	r3, [pc, #132]	; (80014d8 <__aeabi_dmul+0x4d8>)
 8001452:	e640      	b.n	80010d6 <__aeabi_dmul+0xd6>
 8001454:	0003      	movs	r3, r0
 8001456:	465a      	mov	r2, fp
 8001458:	3b28      	subs	r3, #40	; 0x28
 800145a:	409a      	lsls	r2, r3
 800145c:	2600      	movs	r6, #0
 800145e:	9201      	str	r2, [sp, #4]
 8001460:	e66d      	b.n	800113e <__aeabi_dmul+0x13e>
 8001462:	4658      	mov	r0, fp
 8001464:	f000 f92e 	bl	80016c4 <__clzsi2>
 8001468:	3020      	adds	r0, #32
 800146a:	e657      	b.n	800111c <__aeabi_dmul+0x11c>
 800146c:	0003      	movs	r3, r0
 800146e:	4652      	mov	r2, sl
 8001470:	3b28      	subs	r3, #40	; 0x28
 8001472:	409a      	lsls	r2, r3
 8001474:	0013      	movs	r3, r2
 8001476:	2200      	movs	r2, #0
 8001478:	e693      	b.n	80011a2 <__aeabi_dmul+0x1a2>
 800147a:	4650      	mov	r0, sl
 800147c:	f000 f922 	bl	80016c4 <__clzsi2>
 8001480:	3020      	adds	r0, #32
 8001482:	e67b      	b.n	800117c <__aeabi_dmul+0x17c>
 8001484:	46ca      	mov	sl, r9
 8001486:	e750      	b.n	800132a <__aeabi_dmul+0x32a>
 8001488:	201f      	movs	r0, #31
 800148a:	001e      	movs	r6, r3
 800148c:	4240      	negs	r0, r0
 800148e:	1b04      	subs	r4, r0, r4
 8001490:	40e6      	lsrs	r6, r4
 8001492:	2d20      	cmp	r5, #32
 8001494:	d003      	beq.n	800149e <__aeabi_dmul+0x49e>
 8001496:	4c12      	ldr	r4, [pc, #72]	; (80014e0 <__aeabi_dmul+0x4e0>)
 8001498:	4454      	add	r4, sl
 800149a:	40a3      	lsls	r3, r4
 800149c:	431a      	orrs	r2, r3
 800149e:	1e50      	subs	r0, r2, #1
 80014a0:	4182      	sbcs	r2, r0
 80014a2:	4332      	orrs	r2, r6
 80014a4:	2607      	movs	r6, #7
 80014a6:	2700      	movs	r7, #0
 80014a8:	4016      	ands	r6, r2
 80014aa:	d009      	beq.n	80014c0 <__aeabi_dmul+0x4c0>
 80014ac:	200f      	movs	r0, #15
 80014ae:	2300      	movs	r3, #0
 80014b0:	4010      	ands	r0, r2
 80014b2:	0014      	movs	r4, r2
 80014b4:	2804      	cmp	r0, #4
 80014b6:	d1b9      	bne.n	800142c <__aeabi_dmul+0x42c>
 80014b8:	0022      	movs	r2, r4
 80014ba:	075e      	lsls	r6, r3, #29
 80014bc:	025b      	lsls	r3, r3, #9
 80014be:	0b1f      	lsrs	r7, r3, #12
 80014c0:	08d2      	lsrs	r2, r2, #3
 80014c2:	4316      	orrs	r6, r2
 80014c4:	2300      	movs	r3, #0
 80014c6:	e606      	b.n	80010d6 <__aeabi_dmul+0xd6>
 80014c8:	2780      	movs	r7, #128	; 0x80
 80014ca:	033f      	lsls	r7, r7, #12
 80014cc:	431f      	orrs	r7, r3
 80014ce:	033f      	lsls	r7, r7, #12
 80014d0:	0b3f      	lsrs	r7, r7, #12
 80014d2:	0016      	movs	r6, r2
 80014d4:	4b00      	ldr	r3, [pc, #0]	; (80014d8 <__aeabi_dmul+0x4d8>)
 80014d6:	e5fe      	b.n	80010d6 <__aeabi_dmul+0xd6>
 80014d8:	000007ff 	.word	0x000007ff
 80014dc:	0000041e 	.word	0x0000041e
 80014e0:	0000043e 	.word	0x0000043e

080014e4 <__aeabi_i2d>:
 80014e4:	b570      	push	{r4, r5, r6, lr}
 80014e6:	2800      	cmp	r0, #0
 80014e8:	d02d      	beq.n	8001546 <__aeabi_i2d+0x62>
 80014ea:	17c3      	asrs	r3, r0, #31
 80014ec:	18c5      	adds	r5, r0, r3
 80014ee:	405d      	eors	r5, r3
 80014f0:	0fc4      	lsrs	r4, r0, #31
 80014f2:	0028      	movs	r0, r5
 80014f4:	f000 f8e6 	bl	80016c4 <__clzsi2>
 80014f8:	4b15      	ldr	r3, [pc, #84]	; (8001550 <__aeabi_i2d+0x6c>)
 80014fa:	1a1b      	subs	r3, r3, r0
 80014fc:	055b      	lsls	r3, r3, #21
 80014fe:	0d5b      	lsrs	r3, r3, #21
 8001500:	280a      	cmp	r0, #10
 8001502:	dd15      	ble.n	8001530 <__aeabi_i2d+0x4c>
 8001504:	380b      	subs	r0, #11
 8001506:	4085      	lsls	r5, r0
 8001508:	2200      	movs	r2, #0
 800150a:	032d      	lsls	r5, r5, #12
 800150c:	0b2d      	lsrs	r5, r5, #12
 800150e:	2100      	movs	r1, #0
 8001510:	0010      	movs	r0, r2
 8001512:	032d      	lsls	r5, r5, #12
 8001514:	0d0a      	lsrs	r2, r1, #20
 8001516:	0b2d      	lsrs	r5, r5, #12
 8001518:	0512      	lsls	r2, r2, #20
 800151a:	432a      	orrs	r2, r5
 800151c:	4d0d      	ldr	r5, [pc, #52]	; (8001554 <__aeabi_i2d+0x70>)
 800151e:	051b      	lsls	r3, r3, #20
 8001520:	402a      	ands	r2, r5
 8001522:	4313      	orrs	r3, r2
 8001524:	005b      	lsls	r3, r3, #1
 8001526:	07e4      	lsls	r4, r4, #31
 8001528:	085b      	lsrs	r3, r3, #1
 800152a:	4323      	orrs	r3, r4
 800152c:	0019      	movs	r1, r3
 800152e:	bd70      	pop	{r4, r5, r6, pc}
 8001530:	0002      	movs	r2, r0
 8001532:	0029      	movs	r1, r5
 8001534:	3215      	adds	r2, #21
 8001536:	4091      	lsls	r1, r2
 8001538:	000a      	movs	r2, r1
 800153a:	210b      	movs	r1, #11
 800153c:	1a08      	subs	r0, r1, r0
 800153e:	40c5      	lsrs	r5, r0
 8001540:	032d      	lsls	r5, r5, #12
 8001542:	0b2d      	lsrs	r5, r5, #12
 8001544:	e7e3      	b.n	800150e <__aeabi_i2d+0x2a>
 8001546:	2400      	movs	r4, #0
 8001548:	2300      	movs	r3, #0
 800154a:	2500      	movs	r5, #0
 800154c:	2200      	movs	r2, #0
 800154e:	e7de      	b.n	800150e <__aeabi_i2d+0x2a>
 8001550:	0000041e 	.word	0x0000041e
 8001554:	800fffff 	.word	0x800fffff

08001558 <__aeabi_ui2d>:
 8001558:	b510      	push	{r4, lr}
 800155a:	1e04      	subs	r4, r0, #0
 800155c:	d025      	beq.n	80015aa <__aeabi_ui2d+0x52>
 800155e:	f000 f8b1 	bl	80016c4 <__clzsi2>
 8001562:	4b14      	ldr	r3, [pc, #80]	; (80015b4 <__aeabi_ui2d+0x5c>)
 8001564:	1a1b      	subs	r3, r3, r0
 8001566:	055b      	lsls	r3, r3, #21
 8001568:	0d5b      	lsrs	r3, r3, #21
 800156a:	280a      	cmp	r0, #10
 800156c:	dd12      	ble.n	8001594 <__aeabi_ui2d+0x3c>
 800156e:	380b      	subs	r0, #11
 8001570:	4084      	lsls	r4, r0
 8001572:	2200      	movs	r2, #0
 8001574:	0324      	lsls	r4, r4, #12
 8001576:	0b24      	lsrs	r4, r4, #12
 8001578:	2100      	movs	r1, #0
 800157a:	0010      	movs	r0, r2
 800157c:	0324      	lsls	r4, r4, #12
 800157e:	0d0a      	lsrs	r2, r1, #20
 8001580:	0b24      	lsrs	r4, r4, #12
 8001582:	0512      	lsls	r2, r2, #20
 8001584:	4322      	orrs	r2, r4
 8001586:	4c0c      	ldr	r4, [pc, #48]	; (80015b8 <__aeabi_ui2d+0x60>)
 8001588:	051b      	lsls	r3, r3, #20
 800158a:	4022      	ands	r2, r4
 800158c:	4313      	orrs	r3, r2
 800158e:	005b      	lsls	r3, r3, #1
 8001590:	0859      	lsrs	r1, r3, #1
 8001592:	bd10      	pop	{r4, pc}
 8001594:	0002      	movs	r2, r0
 8001596:	0021      	movs	r1, r4
 8001598:	3215      	adds	r2, #21
 800159a:	4091      	lsls	r1, r2
 800159c:	000a      	movs	r2, r1
 800159e:	210b      	movs	r1, #11
 80015a0:	1a08      	subs	r0, r1, r0
 80015a2:	40c4      	lsrs	r4, r0
 80015a4:	0324      	lsls	r4, r4, #12
 80015a6:	0b24      	lsrs	r4, r4, #12
 80015a8:	e7e6      	b.n	8001578 <__aeabi_ui2d+0x20>
 80015aa:	2300      	movs	r3, #0
 80015ac:	2400      	movs	r4, #0
 80015ae:	2200      	movs	r2, #0
 80015b0:	e7e2      	b.n	8001578 <__aeabi_ui2d+0x20>
 80015b2:	46c0      	nop			; (mov r8, r8)
 80015b4:	0000041e 	.word	0x0000041e
 80015b8:	800fffff 	.word	0x800fffff

080015bc <__aeabi_d2f>:
 80015bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015be:	004c      	lsls	r4, r1, #1
 80015c0:	0d64      	lsrs	r4, r4, #21
 80015c2:	030b      	lsls	r3, r1, #12
 80015c4:	1c62      	adds	r2, r4, #1
 80015c6:	0a5b      	lsrs	r3, r3, #9
 80015c8:	0f46      	lsrs	r6, r0, #29
 80015ca:	0552      	lsls	r2, r2, #21
 80015cc:	0fc9      	lsrs	r1, r1, #31
 80015ce:	431e      	orrs	r6, r3
 80015d0:	00c5      	lsls	r5, r0, #3
 80015d2:	0d52      	lsrs	r2, r2, #21
 80015d4:	2a01      	cmp	r2, #1
 80015d6:	dd29      	ble.n	800162c <__aeabi_d2f+0x70>
 80015d8:	4b37      	ldr	r3, [pc, #220]	; (80016b8 <__aeabi_d2f+0xfc>)
 80015da:	18e7      	adds	r7, r4, r3
 80015dc:	2ffe      	cmp	r7, #254	; 0xfe
 80015de:	dc1c      	bgt.n	800161a <__aeabi_d2f+0x5e>
 80015e0:	2f00      	cmp	r7, #0
 80015e2:	dd3b      	ble.n	800165c <__aeabi_d2f+0xa0>
 80015e4:	0180      	lsls	r0, r0, #6
 80015e6:	1e43      	subs	r3, r0, #1
 80015e8:	4198      	sbcs	r0, r3
 80015ea:	2207      	movs	r2, #7
 80015ec:	00f3      	lsls	r3, r6, #3
 80015ee:	0f6d      	lsrs	r5, r5, #29
 80015f0:	4303      	orrs	r3, r0
 80015f2:	432b      	orrs	r3, r5
 80015f4:	401a      	ands	r2, r3
 80015f6:	2a00      	cmp	r2, #0
 80015f8:	d004      	beq.n	8001604 <__aeabi_d2f+0x48>
 80015fa:	220f      	movs	r2, #15
 80015fc:	401a      	ands	r2, r3
 80015fe:	2a04      	cmp	r2, #4
 8001600:	d000      	beq.n	8001604 <__aeabi_d2f+0x48>
 8001602:	3304      	adds	r3, #4
 8001604:	2280      	movs	r2, #128	; 0x80
 8001606:	04d2      	lsls	r2, r2, #19
 8001608:	401a      	ands	r2, r3
 800160a:	d024      	beq.n	8001656 <__aeabi_d2f+0x9a>
 800160c:	3701      	adds	r7, #1
 800160e:	b2fa      	uxtb	r2, r7
 8001610:	2fff      	cmp	r7, #255	; 0xff
 8001612:	d002      	beq.n	800161a <__aeabi_d2f+0x5e>
 8001614:	019b      	lsls	r3, r3, #6
 8001616:	0a58      	lsrs	r0, r3, #9
 8001618:	e001      	b.n	800161e <__aeabi_d2f+0x62>
 800161a:	22ff      	movs	r2, #255	; 0xff
 800161c:	2000      	movs	r0, #0
 800161e:	0240      	lsls	r0, r0, #9
 8001620:	05d2      	lsls	r2, r2, #23
 8001622:	0a40      	lsrs	r0, r0, #9
 8001624:	07c9      	lsls	r1, r1, #31
 8001626:	4310      	orrs	r0, r2
 8001628:	4308      	orrs	r0, r1
 800162a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800162c:	4335      	orrs	r5, r6
 800162e:	2c00      	cmp	r4, #0
 8001630:	d104      	bne.n	800163c <__aeabi_d2f+0x80>
 8001632:	2d00      	cmp	r5, #0
 8001634:	d10a      	bne.n	800164c <__aeabi_d2f+0x90>
 8001636:	2200      	movs	r2, #0
 8001638:	2000      	movs	r0, #0
 800163a:	e7f0      	b.n	800161e <__aeabi_d2f+0x62>
 800163c:	2d00      	cmp	r5, #0
 800163e:	d0ec      	beq.n	800161a <__aeabi_d2f+0x5e>
 8001640:	2080      	movs	r0, #128	; 0x80
 8001642:	03c0      	lsls	r0, r0, #15
 8001644:	4330      	orrs	r0, r6
 8001646:	22ff      	movs	r2, #255	; 0xff
 8001648:	e7e9      	b.n	800161e <__aeabi_d2f+0x62>
 800164a:	2400      	movs	r4, #0
 800164c:	2300      	movs	r3, #0
 800164e:	025b      	lsls	r3, r3, #9
 8001650:	0a58      	lsrs	r0, r3, #9
 8001652:	b2e2      	uxtb	r2, r4
 8001654:	e7e3      	b.n	800161e <__aeabi_d2f+0x62>
 8001656:	08db      	lsrs	r3, r3, #3
 8001658:	003c      	movs	r4, r7
 800165a:	e7f8      	b.n	800164e <__aeabi_d2f+0x92>
 800165c:	003b      	movs	r3, r7
 800165e:	3317      	adds	r3, #23
 8001660:	dbf3      	blt.n	800164a <__aeabi_d2f+0x8e>
 8001662:	2380      	movs	r3, #128	; 0x80
 8001664:	041b      	lsls	r3, r3, #16
 8001666:	4333      	orrs	r3, r6
 8001668:	261e      	movs	r6, #30
 800166a:	1bf6      	subs	r6, r6, r7
 800166c:	2e1f      	cmp	r6, #31
 800166e:	dd14      	ble.n	800169a <__aeabi_d2f+0xde>
 8001670:	2202      	movs	r2, #2
 8001672:	4252      	negs	r2, r2
 8001674:	1bd7      	subs	r7, r2, r7
 8001676:	001a      	movs	r2, r3
 8001678:	40fa      	lsrs	r2, r7
 800167a:	0017      	movs	r7, r2
 800167c:	2e20      	cmp	r6, #32
 800167e:	d004      	beq.n	800168a <__aeabi_d2f+0xce>
 8001680:	4a0e      	ldr	r2, [pc, #56]	; (80016bc <__aeabi_d2f+0x100>)
 8001682:	4694      	mov	ip, r2
 8001684:	4464      	add	r4, ip
 8001686:	40a3      	lsls	r3, r4
 8001688:	431d      	orrs	r5, r3
 800168a:	002b      	movs	r3, r5
 800168c:	1e5d      	subs	r5, r3, #1
 800168e:	41ab      	sbcs	r3, r5
 8001690:	2207      	movs	r2, #7
 8001692:	433b      	orrs	r3, r7
 8001694:	401a      	ands	r2, r3
 8001696:	2700      	movs	r7, #0
 8001698:	e7ad      	b.n	80015f6 <__aeabi_d2f+0x3a>
 800169a:	4a09      	ldr	r2, [pc, #36]	; (80016c0 <__aeabi_d2f+0x104>)
 800169c:	0028      	movs	r0, r5
 800169e:	18a2      	adds	r2, r4, r2
 80016a0:	4095      	lsls	r5, r2
 80016a2:	4093      	lsls	r3, r2
 80016a4:	1e6c      	subs	r4, r5, #1
 80016a6:	41a5      	sbcs	r5, r4
 80016a8:	40f0      	lsrs	r0, r6
 80016aa:	2207      	movs	r2, #7
 80016ac:	432b      	orrs	r3, r5
 80016ae:	4303      	orrs	r3, r0
 80016b0:	401a      	ands	r2, r3
 80016b2:	2700      	movs	r7, #0
 80016b4:	e79f      	b.n	80015f6 <__aeabi_d2f+0x3a>
 80016b6:	46c0      	nop			; (mov r8, r8)
 80016b8:	fffffc80 	.word	0xfffffc80
 80016bc:	fffffca2 	.word	0xfffffca2
 80016c0:	fffffc82 	.word	0xfffffc82

080016c4 <__clzsi2>:
 80016c4:	211c      	movs	r1, #28
 80016c6:	2301      	movs	r3, #1
 80016c8:	041b      	lsls	r3, r3, #16
 80016ca:	4298      	cmp	r0, r3
 80016cc:	d301      	bcc.n	80016d2 <__clzsi2+0xe>
 80016ce:	0c00      	lsrs	r0, r0, #16
 80016d0:	3910      	subs	r1, #16
 80016d2:	0a1b      	lsrs	r3, r3, #8
 80016d4:	4298      	cmp	r0, r3
 80016d6:	d301      	bcc.n	80016dc <__clzsi2+0x18>
 80016d8:	0a00      	lsrs	r0, r0, #8
 80016da:	3908      	subs	r1, #8
 80016dc:	091b      	lsrs	r3, r3, #4
 80016de:	4298      	cmp	r0, r3
 80016e0:	d301      	bcc.n	80016e6 <__clzsi2+0x22>
 80016e2:	0900      	lsrs	r0, r0, #4
 80016e4:	3904      	subs	r1, #4
 80016e6:	a202      	add	r2, pc, #8	; (adr r2, 80016f0 <__clzsi2+0x2c>)
 80016e8:	5c10      	ldrb	r0, [r2, r0]
 80016ea:	1840      	adds	r0, r0, r1
 80016ec:	4770      	bx	lr
 80016ee:	46c0      	nop			; (mov r8, r8)
 80016f0:	02020304 	.word	0x02020304
 80016f4:	01010101 	.word	0x01010101
	...

08001700 <SPI_CS_LOW>:
static uint8_t textSize;
static uint16_t textColor;
static uint16_t bg;

// ---- lower level functions ----
void SPI_CS_LOW() {HAL_GPIO_WritePin(CS_GPIO, CS_PIN, GPIO_PIN_RESET);}
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
 8001704:	4b04      	ldr	r3, [pc, #16]	; (8001718 <SPI_CS_LOW+0x18>)
 8001706:	2200      	movs	r2, #0
 8001708:	2180      	movs	r1, #128	; 0x80
 800170a:	0018      	movs	r0, r3
 800170c:	f005 ff95 	bl	800763a <HAL_GPIO_WritePin>
 8001710:	46c0      	nop			; (mov r8, r8)
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	46c0      	nop			; (mov r8, r8)
 8001718:	50000800 	.word	0x50000800

0800171c <SPI_CS_HIGH>:

void SPI_CS_HIGH() {HAL_GPIO_WritePin(CS_GPIO, CS_PIN, GPIO_PIN_SET);}
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
 8001720:	4b04      	ldr	r3, [pc, #16]	; (8001734 <SPI_CS_HIGH+0x18>)
 8001722:	2201      	movs	r2, #1
 8001724:	2180      	movs	r1, #128	; 0x80
 8001726:	0018      	movs	r0, r3
 8001728:	f005 ff87 	bl	800763a <HAL_GPIO_WritePin>
 800172c:	46c0      	nop			; (mov r8, r8)
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	46c0      	nop			; (mov r8, r8)
 8001734:	50000800 	.word	0x50000800

08001738 <SPI_DC_LOW>:

void SPI_DC_LOW() {HAL_GPIO_WritePin(DC_GPIO, DC_PIN, GPIO_PIN_RESET);}
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
 800173c:	4b04      	ldr	r3, [pc, #16]	; (8001750 <SPI_DC_LOW+0x18>)
 800173e:	2200      	movs	r2, #0
 8001740:	2140      	movs	r1, #64	; 0x40
 8001742:	0018      	movs	r0, r3
 8001744:	f005 ff79 	bl	800763a <HAL_GPIO_WritePin>
 8001748:	46c0      	nop			; (mov r8, r8)
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	46c0      	nop			; (mov r8, r8)
 8001750:	50000400 	.word	0x50000400

08001754 <SPI_DC_HIGH>:

void SPI_DC_HIGH() {HAL_GPIO_WritePin(DC_GPIO, DC_PIN, GPIO_PIN_SET);}
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
 8001758:	4b04      	ldr	r3, [pc, #16]	; (800176c <SPI_DC_HIGH+0x18>)
 800175a:	2201      	movs	r2, #1
 800175c:	2140      	movs	r1, #64	; 0x40
 800175e:	0018      	movs	r0, r3
 8001760:	f005 ff6b 	bl	800763a <HAL_GPIO_WritePin>
 8001764:	46c0      	nop			; (mov r8, r8)
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	46c0      	nop			; (mov r8, r8)
 800176c:	50000400 	.word	0x50000400

08001770 <sendCommand>:

// still ripped but now im changing it
void sendCommand(uint8_t cmd, uint8_t *args, uint16_t numArgs, SPI_HandleTypeDef *hspi) {
 8001770:	b580      	push	{r7, lr}
 8001772:	b084      	sub	sp, #16
 8001774:	af00      	add	r7, sp, #0
 8001776:	60b9      	str	r1, [r7, #8]
 8001778:	0011      	movs	r1, r2
 800177a:	607b      	str	r3, [r7, #4]
 800177c:	230f      	movs	r3, #15
 800177e:	18fb      	adds	r3, r7, r3
 8001780:	1c02      	adds	r2, r0, #0
 8001782:	701a      	strb	r2, [r3, #0]
 8001784:	230c      	movs	r3, #12
 8001786:	18fb      	adds	r3, r7, r3
 8001788:	1c0a      	adds	r2, r1, #0
 800178a:	801a      	strh	r2, [r3, #0]
	while (HAL_SPI_GetState(hspi) == HAL_SPI_STATE_BUSY_TX);		// block next transfer request while DMA transfer is ongoing
 800178c:	46c0      	nop			; (mov r8, r8)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	0018      	movs	r0, r3
 8001792:	f008 f979 	bl	8009a88 <HAL_SPI_GetState>
 8001796:	0003      	movs	r3, r0
 8001798:	2b03      	cmp	r3, #3
 800179a:	d0f8      	beq.n	800178e <sendCommand+0x1e>
	SPI_CS_LOW();	// chip select
 800179c:	f7ff ffb0 	bl	8001700 <SPI_CS_LOW>

	SPI_DC_LOW();	// command mode
 80017a0:	f7ff ffca 	bl	8001738 <SPI_DC_LOW>
	HAL_SPI_Transmit(hspi, &cmd, 1, 1000);	// not using DMA bc it's only 1 byte
 80017a4:	23fa      	movs	r3, #250	; 0xfa
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	220f      	movs	r2, #15
 80017aa:	18b9      	adds	r1, r7, r2
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	2201      	movs	r2, #1
 80017b0:	f007 fe88 	bl	80094c4 <HAL_SPI_Transmit>

	SPI_DC_HIGH();	// data mode
 80017b4:	f7ff ffce 	bl	8001754 <SPI_DC_HIGH>
	if (numArgs) {
 80017b8:	230c      	movs	r3, #12
 80017ba:	18fb      	adds	r3, r7, r3
 80017bc:	881b      	ldrh	r3, [r3, #0]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d007      	beq.n	80017d2 <sendCommand+0x62>
		HAL_SPI_Transmit_IT(hspi, args, numArgs);
 80017c2:	230c      	movs	r3, #12
 80017c4:	18fb      	adds	r3, r7, r3
 80017c6:	881a      	ldrh	r2, [r3, #0]
 80017c8:	68b9      	ldr	r1, [r7, #8]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	0018      	movs	r0, r3
 80017ce:	f007 ffc7 	bl	8009760 <HAL_SPI_Transmit_IT>
//		HAL_SPI_Transmit_DMA(hspi, args, numArgs);
	}

//	SPI_CS_HIGH();	// chip select disable
}
 80017d2:	46c0      	nop			; (mov r8, r8)
 80017d4:	46bd      	mov	sp, r7
 80017d6:	b004      	add	sp, #16
 80017d8:	bd80      	pop	{r7, pc}
	...

080017dc <HAL_SPI_TxCpltCallback>:

// DMA callback on transfer compelete
// using only for sending data, but not commands
// dont send request when transfer is ongoing
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
	if (HAL_GPIO_ReadPin(CS_GPIO, CS_PIN) == GPIO_PIN_RESET) SPI_CS_HIGH();	// chip select disable
 80017e4:	4b06      	ldr	r3, [pc, #24]	; (8001800 <HAL_SPI_TxCpltCallback+0x24>)
 80017e6:	2180      	movs	r1, #128	; 0x80
 80017e8:	0018      	movs	r0, r3
 80017ea:	f005 ff09 	bl	8007600 <HAL_GPIO_ReadPin>
 80017ee:	1e03      	subs	r3, r0, #0
 80017f0:	d101      	bne.n	80017f6 <HAL_SPI_TxCpltCallback+0x1a>
 80017f2:	f7ff ff93 	bl	800171c <SPI_CS_HIGH>
}
 80017f6:	46c0      	nop			; (mov r8, r8)
 80017f8:	46bd      	mov	sp, r7
 80017fa:	b002      	add	sp, #8
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	46c0      	nop			; (mov r8, r8)
 8001800:	50000800 	.word	0x50000800

08001804 <displayInit>:

// array parser heavily based on Adafruit library code
void displayInit(uint8_t *args, SPI_HandleTypeDef *hspi) {
 8001804:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001806:	b085      	sub	sp, #20
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
 800180c:	6039      	str	r1, [r7, #0]
	uint8_t  numCommands, cmd, numArgs;
	uint16_t ms;
	uint8_t index = 0;
 800180e:	220b      	movs	r2, #11
 8001810:	0011      	movs	r1, r2
 8001812:	18bb      	adds	r3, r7, r2
 8001814:	2200      	movs	r2, #0
 8001816:	701a      	strb	r2, [r3, #0]
	uint8_t data;

	numCommands = args[index++];   // Number of commands to follow
 8001818:	000a      	movs	r2, r1
 800181a:	18bb      	adds	r3, r7, r2
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	18ba      	adds	r2, r7, r2
 8001820:	1c59      	adds	r1, r3, #1
 8001822:	7011      	strb	r1, [r2, #0]
 8001824:	001a      	movs	r2, r3
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	189a      	adds	r2, r3, r2
 800182a:	230f      	movs	r3, #15
 800182c:	18fb      	adds	r3, r7, r3
 800182e:	7812      	ldrb	r2, [r2, #0]
 8001830:	701a      	strb	r2, [r3, #0]
	while(numCommands--) {                 // For each command...
 8001832:	e05e      	b.n	80018f2 <displayInit+0xee>
		cmd = args[index++];         // Read command
 8001834:	200b      	movs	r0, #11
 8001836:	183b      	adds	r3, r7, r0
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	183a      	adds	r2, r7, r0
 800183c:	1c59      	adds	r1, r3, #1
 800183e:	7011      	strb	r1, [r2, #0]
 8001840:	001a      	movs	r2, r3
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	189a      	adds	r2, r3, r2
 8001846:	230a      	movs	r3, #10
 8001848:	18fb      	adds	r3, r7, r3
 800184a:	7812      	ldrb	r2, [r2, #0]
 800184c:	701a      	strb	r2, [r3, #0]
		numArgs  = args[index++];    // Number of args to follow
 800184e:	183b      	adds	r3, r7, r0
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	183a      	adds	r2, r7, r0
 8001854:	1c59      	adds	r1, r3, #1
 8001856:	7011      	strb	r1, [r2, #0]
 8001858:	001a      	movs	r2, r3
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	189a      	adds	r2, r3, r2
 800185e:	2609      	movs	r6, #9
 8001860:	19bb      	adds	r3, r7, r6
 8001862:	7812      	ldrb	r2, [r2, #0]
 8001864:	701a      	strb	r2, [r3, #0]
		ms       = numArgs & ST_CMD_DELAY;   // If hibit set, delay follows args
 8001866:	19bb      	adds	r3, r7, r6
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	b29a      	uxth	r2, r3
 800186c:	210c      	movs	r1, #12
 800186e:	187b      	adds	r3, r7, r1
 8001870:	2180      	movs	r1, #128	; 0x80
 8001872:	400a      	ands	r2, r1
 8001874:	801a      	strh	r2, [r3, #0]
		numArgs &= ~ST_CMD_DELAY;            // Mask out delay bit
 8001876:	19bb      	adds	r3, r7, r6
 8001878:	19ba      	adds	r2, r7, r6
 800187a:	7812      	ldrb	r2, [r2, #0]
 800187c:	217f      	movs	r1, #127	; 0x7f
 800187e:	400a      	ands	r2, r1
 8001880:	701a      	strb	r2, [r3, #0]
		sendCommand(cmd, &args[index], numArgs, hspi);
 8001882:	0005      	movs	r5, r0
 8001884:	183b      	adds	r3, r7, r0
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	687a      	ldr	r2, [r7, #4]
 800188a:	18d1      	adds	r1, r2, r3
 800188c:	19bb      	adds	r3, r7, r6
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	b29a      	uxth	r2, r3
 8001892:	683c      	ldr	r4, [r7, #0]
 8001894:	230a      	movs	r3, #10
 8001896:	18fb      	adds	r3, r7, r3
 8001898:	7818      	ldrb	r0, [r3, #0]
 800189a:	0023      	movs	r3, r4
 800189c:	f7ff ff68 	bl	8001770 <sendCommand>
		index += numArgs;
 80018a0:	0028      	movs	r0, r5
 80018a2:	183b      	adds	r3, r7, r0
 80018a4:	1839      	adds	r1, r7, r0
 80018a6:	19ba      	adds	r2, r7, r6
 80018a8:	7809      	ldrb	r1, [r1, #0]
 80018aa:	7812      	ldrb	r2, [r2, #0]
 80018ac:	188a      	adds	r2, r1, r2
 80018ae:	701a      	strb	r2, [r3, #0]

		if(ms) {
 80018b0:	210c      	movs	r1, #12
 80018b2:	187b      	adds	r3, r7, r1
 80018b4:	881b      	ldrh	r3, [r3, #0]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d01b      	beq.n	80018f2 <displayInit+0xee>
			ms = args[index++]; // Read post-command delay time (ms)
 80018ba:	220b      	movs	r2, #11
 80018bc:	18bb      	adds	r3, r7, r2
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	18ba      	adds	r2, r7, r2
 80018c2:	1c59      	adds	r1, r3, #1
 80018c4:	7011      	strb	r1, [r2, #0]
 80018c6:	001a      	movs	r2, r3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	189b      	adds	r3, r3, r2
 80018cc:	781a      	ldrb	r2, [r3, #0]
 80018ce:	210c      	movs	r1, #12
 80018d0:	187b      	adds	r3, r7, r1
 80018d2:	801a      	strh	r2, [r3, #0]
			if(ms == 255) ms = 500;     // If 255, delay for 500 ms
 80018d4:	187b      	adds	r3, r7, r1
 80018d6:	881b      	ldrh	r3, [r3, #0]
 80018d8:	2bff      	cmp	r3, #255	; 0xff
 80018da:	d104      	bne.n	80018e6 <displayInit+0xe2>
 80018dc:	230c      	movs	r3, #12
 80018de:	18fb      	adds	r3, r7, r3
 80018e0:	22fa      	movs	r2, #250	; 0xfa
 80018e2:	0052      	lsls	r2, r2, #1
 80018e4:	801a      	strh	r2, [r3, #0]
			HAL_Delay(ms);
 80018e6:	230c      	movs	r3, #12
 80018e8:	18fb      	adds	r3, r7, r3
 80018ea:	881b      	ldrh	r3, [r3, #0]
 80018ec:	0018      	movs	r0, r3
 80018ee:	f004 fdc7 	bl	8006480 <HAL_Delay>
	while(numCommands--) {                 // For each command...
 80018f2:	220f      	movs	r2, #15
 80018f4:	18bb      	adds	r3, r7, r2
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	18ba      	adds	r2, r7, r2
 80018fa:	1e59      	subs	r1, r3, #1
 80018fc:	7011      	strb	r1, [r2, #0]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d198      	bne.n	8001834 <displayInit+0x30>
		}
	}

	// note: this line may be doing more work than I think
	// (hard to read in datasheet)
	data = 0xC0;
 8001902:	2108      	movs	r1, #8
 8001904:	187b      	adds	r3, r7, r1
 8001906:	22c0      	movs	r2, #192	; 0xc0
 8001908:	701a      	strb	r2, [r3, #0]
	sendCommand(ST77XX_MADCTL, &data, 1, hspi);
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	1879      	adds	r1, r7, r1
 800190e:	2201      	movs	r2, #1
 8001910:	2036      	movs	r0, #54	; 0x36
 8001912:	f7ff ff2d 	bl	8001770 <sendCommand>
}
 8001916:	46c0      	nop			; (mov r8, r8)
 8001918:	46bd      	mov	sp, r7
 800191a:	b005      	add	sp, #20
 800191c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001920 <TFT_startup>:

void TFT_startup(SPI_HandleTypeDef *hspi) {
 8001920:	b590      	push	{r4, r7, lr}
 8001922:	b0a3      	sub	sp, #140	; 0x8c
 8001924:	af02      	add	r7, sp, #8
 8001926:	6078      	str	r0, [r7, #4]
	// startup sequence: rcmd1->rcmd2red->rcmd3
	uint8_t initCommands[] = {
 8001928:	240c      	movs	r4, #12
 800192a:	193a      	adds	r2, r7, r4
 800192c:	4b14      	ldr	r3, [pc, #80]	; (8001980 <TFT_startup+0x60>)
 800192e:	0010      	movs	r0, r2
 8001930:	0019      	movs	r1, r3
 8001932:	2371      	movs	r3, #113	; 0x71
 8001934:	001a      	movs	r2, r3
 8001936:	f009 f937 	bl	800aba8 <memcpy>
			10,                           //     10 ms delay
		ST77XX_DISPON,    ST_CMD_DELAY, //  4: Main screen turn on, no args w/delay
			100	                        //     100 ms delay
	};

	displayInit(initCommands, hspi);
 800193a:	687a      	ldr	r2, [r7, #4]
 800193c:	193b      	adds	r3, r7, r4
 800193e:	0011      	movs	r1, r2
 8001940:	0018      	movs	r0, r3
 8001942:	f7ff ff5f 	bl	8001804 <displayInit>
	setAddrWindow(0, 0, WIDTH, HEIGHT, hspi);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	9300      	str	r3, [sp, #0]
 800194a:	23a0      	movs	r3, #160	; 0xa0
 800194c:	2280      	movs	r2, #128	; 0x80
 800194e:	2100      	movs	r1, #0
 8001950:	2000      	movs	r0, #0
 8001952:	f000 f821 	bl	8001998 <setAddrWindow>

	// set the global variables
	cursorX = 0;
 8001956:	4b0b      	ldr	r3, [pc, #44]	; (8001984 <TFT_startup+0x64>)
 8001958:	2200      	movs	r2, #0
 800195a:	701a      	strb	r2, [r3, #0]
	cursorY = 0;
 800195c:	4b0a      	ldr	r3, [pc, #40]	; (8001988 <TFT_startup+0x68>)
 800195e:	2200      	movs	r2, #0
 8001960:	701a      	strb	r2, [r3, #0]
	textSize = 1;
 8001962:	4b0a      	ldr	r3, [pc, #40]	; (800198c <TFT_startup+0x6c>)
 8001964:	2201      	movs	r2, #1
 8001966:	701a      	strb	r2, [r3, #0]
	textColor = ST77XX_BLACK;
 8001968:	4b09      	ldr	r3, [pc, #36]	; (8001990 <TFT_startup+0x70>)
 800196a:	2200      	movs	r2, #0
 800196c:	801a      	strh	r2, [r3, #0]
	bg = ST77XX_WHITE;
 800196e:	4b09      	ldr	r3, [pc, #36]	; (8001994 <TFT_startup+0x74>)
 8001970:	2201      	movs	r2, #1
 8001972:	4252      	negs	r2, r2
 8001974:	801a      	strh	r2, [r3, #0]
}
 8001976:	46c0      	nop			; (mov r8, r8)
 8001978:	46bd      	mov	sp, r7
 800197a:	b021      	add	sp, #132	; 0x84
 800197c:	bd90      	pop	{r4, r7, pc}
 800197e:	46c0      	nop			; (mov r8, r8)
 8001980:	0800b3fc 	.word	0x0800b3fc
 8001984:	200000ec 	.word	0x200000ec
 8001988:	200000ed 	.word	0x200000ed
 800198c:	200000ee 	.word	0x200000ee
 8001990:	200000f0 	.word	0x200000f0
 8001994:	200000f2 	.word	0x200000f2

08001998 <setAddrWindow>:

// draw something: set addr window -> write to ram memory
// sets specific area on display to write pixels to
// x and y for upper left corner, w for width, h for height
void setAddrWindow(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SPI_HandleTypeDef *hspi) {
 8001998:	b5b0      	push	{r4, r5, r7, lr}
 800199a:	b084      	sub	sp, #16
 800199c:	af00      	add	r7, sp, #0
 800199e:	0005      	movs	r5, r0
 80019a0:	000c      	movs	r4, r1
 80019a2:	0010      	movs	r0, r2
 80019a4:	0019      	movs	r1, r3
 80019a6:	1dbb      	adds	r3, r7, #6
 80019a8:	1c2a      	adds	r2, r5, #0
 80019aa:	801a      	strh	r2, [r3, #0]
 80019ac:	1d3b      	adds	r3, r7, #4
 80019ae:	1c22      	adds	r2, r4, #0
 80019b0:	801a      	strh	r2, [r3, #0]
 80019b2:	1cbb      	adds	r3, r7, #2
 80019b4:	1c02      	adds	r2, r0, #0
 80019b6:	801a      	strh	r2, [r3, #0]
 80019b8:	003b      	movs	r3, r7
 80019ba:	1c0a      	adds	r2, r1, #0
 80019bc:	801a      	strh	r2, [r3, #0]
	// not really needed for our display
	x += _xstart;
 80019be:	1dbb      	adds	r3, r7, #6
 80019c0:	1dba      	adds	r2, r7, #6
 80019c2:	8812      	ldrh	r2, [r2, #0]
 80019c4:	801a      	strh	r2, [r3, #0]
	y += _ystart;
 80019c6:	1d3b      	adds	r3, r7, #4
 80019c8:	1d3a      	adds	r2, r7, #4
 80019ca:	8812      	ldrh	r2, [r2, #0]
 80019cc:	801a      	strh	r2, [r3, #0]

	uint8_t temp[4];
	temp[0] = (x & (0xFF00)) >> 8;
 80019ce:	1dbb      	adds	r3, r7, #6
 80019d0:	881b      	ldrh	r3, [r3, #0]
 80019d2:	0a1b      	lsrs	r3, r3, #8
 80019d4:	b29b      	uxth	r3, r3
 80019d6:	b2da      	uxtb	r2, r3
 80019d8:	210c      	movs	r1, #12
 80019da:	187b      	adds	r3, r7, r1
 80019dc:	701a      	strb	r2, [r3, #0]
	temp[1] = x & (0xFF);
 80019de:	1dbb      	adds	r3, r7, #6
 80019e0:	881b      	ldrh	r3, [r3, #0]
 80019e2:	b2da      	uxtb	r2, r3
 80019e4:	187b      	adds	r3, r7, r1
 80019e6:	705a      	strb	r2, [r3, #1]
	temp[2] = ((x+w-1) & (0xFF00)) >> 8;
 80019e8:	1dbb      	adds	r3, r7, #6
 80019ea:	881a      	ldrh	r2, [r3, #0]
 80019ec:	1cbb      	adds	r3, r7, #2
 80019ee:	881b      	ldrh	r3, [r3, #0]
 80019f0:	18d3      	adds	r3, r2, r3
 80019f2:	3b01      	subs	r3, #1
 80019f4:	121b      	asrs	r3, r3, #8
 80019f6:	b2da      	uxtb	r2, r3
 80019f8:	187b      	adds	r3, r7, r1
 80019fa:	709a      	strb	r2, [r3, #2]
	temp[3] = (x+w-1) & (0xFF);
 80019fc:	1dbb      	adds	r3, r7, #6
 80019fe:	881b      	ldrh	r3, [r3, #0]
 8001a00:	b2da      	uxtb	r2, r3
 8001a02:	1cbb      	adds	r3, r7, #2
 8001a04:	881b      	ldrh	r3, [r3, #0]
 8001a06:	b2db      	uxtb	r3, r3
 8001a08:	18d3      	adds	r3, r2, r3
 8001a0a:	b2db      	uxtb	r3, r3
 8001a0c:	3b01      	subs	r3, #1
 8001a0e:	b2da      	uxtb	r2, r3
 8001a10:	187b      	adds	r3, r7, r1
 8001a12:	70da      	strb	r2, [r3, #3]
	sendCommand(ST77XX_CASET, temp, 4, hspi);
 8001a14:	6a3b      	ldr	r3, [r7, #32]
 8001a16:	000c      	movs	r4, r1
 8001a18:	1879      	adds	r1, r7, r1
 8001a1a:	2204      	movs	r2, #4
 8001a1c:	202a      	movs	r0, #42	; 0x2a
 8001a1e:	f7ff fea7 	bl	8001770 <sendCommand>

	temp[0] = (y & (0xFF00)) >> 8;
 8001a22:	1d3b      	adds	r3, r7, #4
 8001a24:	881b      	ldrh	r3, [r3, #0]
 8001a26:	0a1b      	lsrs	r3, r3, #8
 8001a28:	b29b      	uxth	r3, r3
 8001a2a:	b2da      	uxtb	r2, r3
 8001a2c:	0021      	movs	r1, r4
 8001a2e:	187b      	adds	r3, r7, r1
 8001a30:	701a      	strb	r2, [r3, #0]
	temp[1] = y & (0xFF);
 8001a32:	1d3b      	adds	r3, r7, #4
 8001a34:	881b      	ldrh	r3, [r3, #0]
 8001a36:	b2da      	uxtb	r2, r3
 8001a38:	187b      	adds	r3, r7, r1
 8001a3a:	705a      	strb	r2, [r3, #1]
	temp[2] = ((y+h-1) & (0xFF00)) >> 8;
 8001a3c:	1d3b      	adds	r3, r7, #4
 8001a3e:	881a      	ldrh	r2, [r3, #0]
 8001a40:	003b      	movs	r3, r7
 8001a42:	881b      	ldrh	r3, [r3, #0]
 8001a44:	18d3      	adds	r3, r2, r3
 8001a46:	3b01      	subs	r3, #1
 8001a48:	121b      	asrs	r3, r3, #8
 8001a4a:	b2da      	uxtb	r2, r3
 8001a4c:	187b      	adds	r3, r7, r1
 8001a4e:	709a      	strb	r2, [r3, #2]
	temp[3] = (y+h-1) & (0x00FF);
 8001a50:	1d3b      	adds	r3, r7, #4
 8001a52:	881b      	ldrh	r3, [r3, #0]
 8001a54:	b2da      	uxtb	r2, r3
 8001a56:	003b      	movs	r3, r7
 8001a58:	881b      	ldrh	r3, [r3, #0]
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	18d3      	adds	r3, r2, r3
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	3b01      	subs	r3, #1
 8001a62:	b2da      	uxtb	r2, r3
 8001a64:	187b      	adds	r3, r7, r1
 8001a66:	70da      	strb	r2, [r3, #3]
	sendCommand(ST77XX_RASET, temp, 4, hspi);
 8001a68:	6a3b      	ldr	r3, [r7, #32]
 8001a6a:	1879      	adds	r1, r7, r1
 8001a6c:	2204      	movs	r2, #4
 8001a6e:	202b      	movs	r0, #43	; 0x2b
 8001a70:	f7ff fe7e 	bl	8001770 <sendCommand>
}
 8001a74:	46c0      	nop			; (mov r8, r8)
 8001a76:	46bd      	mov	sp, r7
 8001a78:	b004      	add	sp, #16
 8001a7a:	bdb0      	pop	{r4, r5, r7, pc}

08001a7c <turnDisplayOn>:

void turnDisplayOn(SPI_HandleTypeDef *hspi) {sendCommand(ST77XX_DISPON, NULL, 0, hspi);}		// no args, null shouldn't be accessed by sendCommand func
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2200      	movs	r2, #0
 8001a88:	2100      	movs	r1, #0
 8001a8a:	2029      	movs	r0, #41	; 0x29
 8001a8c:	f7ff fe70 	bl	8001770 <sendCommand>
 8001a90:	46c0      	nop			; (mov r8, r8)
 8001a92:	46bd      	mov	sp, r7
 8001a94:	b002      	add	sp, #8
 8001a96:	bd80      	pop	{r7, pc}

08001a98 <colorFixer>:
// 8-bit spi bus wants msb first; in array, lowest index is sent first
// because L4 is little-endian
//   for 16-bit value, it sends lower byte before upper byte
//   resulting in device thinking lower byte is upper byte
// this switches byte order around
uint16_t colorFixer(uint16_t color) {
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b084      	sub	sp, #16
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	0002      	movs	r2, r0
 8001aa0:	1dbb      	adds	r3, r7, #6
 8001aa2:	801a      	strh	r2, [r3, #0]
	uint8_t a = color & 0xFF;
 8001aa4:	210f      	movs	r1, #15
 8001aa6:	187b      	adds	r3, r7, r1
 8001aa8:	1dba      	adds	r2, r7, #6
 8001aaa:	8812      	ldrh	r2, [r2, #0]
 8001aac:	701a      	strb	r2, [r3, #0]
	uint8_t b = (color & 0xFF00) >> 8;
 8001aae:	1dbb      	adds	r3, r7, #6
 8001ab0:	881b      	ldrh	r3, [r3, #0]
 8001ab2:	0a1b      	lsrs	r3, r3, #8
 8001ab4:	b29a      	uxth	r2, r3
 8001ab6:	200e      	movs	r0, #14
 8001ab8:	183b      	adds	r3, r7, r0
 8001aba:	701a      	strb	r2, [r3, #0]
	uint16_t ret = (a << 8) | b;
 8001abc:	187b      	adds	r3, r7, r1
 8001abe:	781b      	ldrb	r3, [r3, #0]
 8001ac0:	021b      	lsls	r3, r3, #8
 8001ac2:	b21a      	sxth	r2, r3
 8001ac4:	183b      	adds	r3, r7, r0
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	b21b      	sxth	r3, r3
 8001aca:	4313      	orrs	r3, r2
 8001acc:	b21a      	sxth	r2, r3
 8001ace:	210c      	movs	r1, #12
 8001ad0:	187b      	adds	r3, r7, r1
 8001ad2:	801a      	strh	r2, [r3, #0]

	return ret;
 8001ad4:	187b      	adds	r3, r7, r1
 8001ad6:	881b      	ldrh	r3, [r3, #0]
}
 8001ad8:	0018      	movs	r0, r3
 8001ada:	46bd      	mov	sp, r7
 8001adc:	b004      	add	sp, #16
 8001ade:	bd80      	pop	{r7, pc}

08001ae0 <drawHLine>:
	setAddrWindow(x, y, 1, 1, hspi);
	uint16_t tempColor = colorFixer(color);		// else we're using address of something passed by value
	sendCommand(ST77XX_RAMWR, &tempColor, 2, hspi);
}

void drawHLine(uint8_t x, uint8_t y, uint8_t size, uint16_t color, SPI_HandleTypeDef *hspi) {
 8001ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ae2:	b091      	sub	sp, #68	; 0x44
 8001ae4:	af02      	add	r7, sp, #8
 8001ae6:	000c      	movs	r4, r1
 8001ae8:	0016      	movs	r6, r2
 8001aea:	0019      	movs	r1, r3
 8001aec:	2327      	movs	r3, #39	; 0x27
 8001aee:	18fa      	adds	r2, r7, r3
 8001af0:	1c03      	adds	r3, r0, #0
 8001af2:	7013      	strb	r3, [r2, #0]
 8001af4:	2326      	movs	r3, #38	; 0x26
 8001af6:	18fb      	adds	r3, r7, r3
 8001af8:	1c22      	adds	r2, r4, #0
 8001afa:	701a      	strb	r2, [r3, #0]
 8001afc:	2325      	movs	r3, #37	; 0x25
 8001afe:	18fb      	adds	r3, r7, r3
 8001b00:	1c32      	adds	r2, r6, #0
 8001b02:	701a      	strb	r2, [r3, #0]
 8001b04:	2322      	movs	r3, #34	; 0x22
 8001b06:	18fb      	adds	r3, r7, r3
 8001b08:	1c0a      	adds	r2, r1, #0
 8001b0a:	801a      	strh	r2, [r3, #0]
 8001b0c:	466b      	mov	r3, sp
 8001b0e:	001e      	movs	r6, r3
	// bounds checking
	if (x < 0) x = 0;						// don't set x out of bounds
	if (x > WIDTH) x = WIDTH;
 8001b10:	2327      	movs	r3, #39	; 0x27
 8001b12:	18fb      	adds	r3, r7, r3
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	2b80      	cmp	r3, #128	; 0x80
 8001b18:	d903      	bls.n	8001b22 <drawHLine+0x42>
 8001b1a:	2327      	movs	r3, #39	; 0x27
 8001b1c:	18fb      	adds	r3, r7, r3
 8001b1e:	2280      	movs	r2, #128	; 0x80
 8001b20:	701a      	strb	r2, [r3, #0]
	if (x+size > WIDTH) size = WIDTH-x;		// don't set size so line draws out of bounds
 8001b22:	2327      	movs	r3, #39	; 0x27
 8001b24:	18fb      	adds	r3, r7, r3
 8001b26:	781a      	ldrb	r2, [r3, #0]
 8001b28:	2325      	movs	r3, #37	; 0x25
 8001b2a:	18fb      	adds	r3, r7, r3
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	18d3      	adds	r3, r2, r3
 8001b30:	2b80      	cmp	r3, #128	; 0x80
 8001b32:	dd08      	ble.n	8001b46 <drawHLine+0x66>
 8001b34:	2325      	movs	r3, #37	; 0x25
 8001b36:	18fb      	adds	r3, r7, r3
 8001b38:	2227      	movs	r2, #39	; 0x27
 8001b3a:	18ba      	adds	r2, r7, r2
 8001b3c:	7812      	ldrb	r2, [r2, #0]
 8001b3e:	2180      	movs	r1, #128	; 0x80
 8001b40:	4249      	negs	r1, r1
 8001b42:	1a8a      	subs	r2, r1, r2
 8001b44:	701a      	strb	r2, [r3, #0]
	if (x+size < 0) size = 0-x;
	if ((y > HEIGHT) || (y < 0)) return;	// don't draw if y is out of bounds
 8001b46:	2326      	movs	r3, #38	; 0x26
 8001b48:	18fb      	adds	r3, r7, r3
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	2ba0      	cmp	r3, #160	; 0xa0
 8001b4e:	d868      	bhi.n	8001c22 <drawHLine+0x142>

	setAddrWindow(x, y, size, 1, hspi);
 8001b50:	2327      	movs	r3, #39	; 0x27
 8001b52:	18fb      	adds	r3, r7, r3
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	b298      	uxth	r0, r3
 8001b58:	2326      	movs	r3, #38	; 0x26
 8001b5a:	18fb      	adds	r3, r7, r3
 8001b5c:	781b      	ldrb	r3, [r3, #0]
 8001b5e:	b299      	uxth	r1, r3
 8001b60:	2325      	movs	r3, #37	; 0x25
 8001b62:	18fb      	adds	r3, r7, r3
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	b29a      	uxth	r2, r3
 8001b68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b6a:	9300      	str	r3, [sp, #0]
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	f7ff ff13 	bl	8001998 <setAddrWindow>
	uint16_t colors[size];
 8001b72:	2325      	movs	r3, #37	; 0x25
 8001b74:	18fb      	adds	r3, r7, r3
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	001a      	movs	r2, r3
 8001b7a:	3a01      	subs	r2, #1
 8001b7c:	633a      	str	r2, [r7, #48]	; 0x30
 8001b7e:	60bb      	str	r3, [r7, #8]
 8001b80:	2200      	movs	r2, #0
 8001b82:	60fa      	str	r2, [r7, #12]
 8001b84:	68b8      	ldr	r0, [r7, #8]
 8001b86:	68f9      	ldr	r1, [r7, #12]
 8001b88:	0002      	movs	r2, r0
 8001b8a:	0f12      	lsrs	r2, r2, #28
 8001b8c:	000c      	movs	r4, r1
 8001b8e:	0124      	lsls	r4, r4, #4
 8001b90:	61fc      	str	r4, [r7, #28]
 8001b92:	69fc      	ldr	r4, [r7, #28]
 8001b94:	4314      	orrs	r4, r2
 8001b96:	61fc      	str	r4, [r7, #28]
 8001b98:	0002      	movs	r2, r0
 8001b9a:	0112      	lsls	r2, r2, #4
 8001b9c:	61ba      	str	r2, [r7, #24]
 8001b9e:	603b      	str	r3, [r7, #0]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	607a      	str	r2, [r7, #4]
 8001ba4:	6838      	ldr	r0, [r7, #0]
 8001ba6:	6879      	ldr	r1, [r7, #4]
 8001ba8:	0002      	movs	r2, r0
 8001baa:	0f12      	lsrs	r2, r2, #28
 8001bac:	000c      	movs	r4, r1
 8001bae:	0124      	lsls	r4, r4, #4
 8001bb0:	617c      	str	r4, [r7, #20]
 8001bb2:	697c      	ldr	r4, [r7, #20]
 8001bb4:	4314      	orrs	r4, r2
 8001bb6:	617c      	str	r4, [r7, #20]
 8001bb8:	0002      	movs	r2, r0
 8001bba:	0112      	lsls	r2, r2, #4
 8001bbc:	613a      	str	r2, [r7, #16]
 8001bbe:	005b      	lsls	r3, r3, #1
 8001bc0:	3301      	adds	r3, #1
 8001bc2:	3307      	adds	r3, #7
 8001bc4:	08db      	lsrs	r3, r3, #3
 8001bc6:	00db      	lsls	r3, r3, #3
 8001bc8:	466a      	mov	r2, sp
 8001bca:	1ad3      	subs	r3, r2, r3
 8001bcc:	469d      	mov	sp, r3
 8001bce:	ab02      	add	r3, sp, #8
 8001bd0:	3301      	adds	r3, #1
 8001bd2:	085b      	lsrs	r3, r3, #1
 8001bd4:	005b      	lsls	r3, r3, #1
 8001bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (int i = 0; i < size; i++) {		// better way to make array of 1 color; SPI without moving address of sent?
 8001bd8:	2300      	movs	r3, #0
 8001bda:	637b      	str	r3, [r7, #52]	; 0x34
 8001bdc:	e00e      	b.n	8001bfc <drawHLine+0x11c>
		colors[i] = colorFixer(color);
 8001bde:	2322      	movs	r3, #34	; 0x22
 8001be0:	18fb      	adds	r3, r7, r3
 8001be2:	881b      	ldrh	r3, [r3, #0]
 8001be4:	0018      	movs	r0, r3
 8001be6:	f7ff ff57 	bl	8001a98 <colorFixer>
 8001bea:	0003      	movs	r3, r0
 8001bec:	0019      	movs	r1, r3
 8001bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bf0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001bf2:	0052      	lsls	r2, r2, #1
 8001bf4:	52d1      	strh	r1, [r2, r3]
	for (int i = 0; i < size; i++) {		// better way to make array of 1 color; SPI without moving address of sent?
 8001bf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bf8:	3301      	adds	r3, #1
 8001bfa:	637b      	str	r3, [r7, #52]	; 0x34
 8001bfc:	2325      	movs	r3, #37	; 0x25
 8001bfe:	18fb      	adds	r3, r7, r3
 8001c00:	781b      	ldrb	r3, [r3, #0]
 8001c02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001c04:	429a      	cmp	r2, r3
 8001c06:	dbea      	blt.n	8001bde <drawHLine+0xfe>
//		colors[i] = color;
	}

	sendCommand(ST77XX_RAMWR, colors, size*2, hspi);
 8001c08:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001c0a:	2325      	movs	r3, #37	; 0x25
 8001c0c:	18fb      	adds	r3, r7, r3
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	b29b      	uxth	r3, r3
 8001c12:	18db      	adds	r3, r3, r3
 8001c14:	b29a      	uxth	r2, r3
 8001c16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c18:	202c      	movs	r0, #44	; 0x2c
 8001c1a:	f7ff fda9 	bl	8001770 <sendCommand>
 8001c1e:	46b5      	mov	sp, r6
 8001c20:	e001      	b.n	8001c26 <drawHLine+0x146>
	if ((y > HEIGHT) || (y < 0)) return;	// don't draw if y is out of bounds
 8001c22:	46c0      	nop			; (mov r8, r8)
 8001c24:	46b5      	mov	sp, r6
}
 8001c26:	46bd      	mov	sp, r7
 8001c28:	b00f      	add	sp, #60	; 0x3c
 8001c2a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001c2c <drawVLine>:

void drawVLine(uint8_t x, uint8_t y, uint8_t size, uint16_t color, SPI_HandleTypeDef *hspi) {
 8001c2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c2e:	b091      	sub	sp, #68	; 0x44
 8001c30:	af02      	add	r7, sp, #8
 8001c32:	000c      	movs	r4, r1
 8001c34:	0016      	movs	r6, r2
 8001c36:	0019      	movs	r1, r3
 8001c38:	2327      	movs	r3, #39	; 0x27
 8001c3a:	18fa      	adds	r2, r7, r3
 8001c3c:	1c03      	adds	r3, r0, #0
 8001c3e:	7013      	strb	r3, [r2, #0]
 8001c40:	2326      	movs	r3, #38	; 0x26
 8001c42:	18fb      	adds	r3, r7, r3
 8001c44:	1c22      	adds	r2, r4, #0
 8001c46:	701a      	strb	r2, [r3, #0]
 8001c48:	2325      	movs	r3, #37	; 0x25
 8001c4a:	18fb      	adds	r3, r7, r3
 8001c4c:	1c32      	adds	r2, r6, #0
 8001c4e:	701a      	strb	r2, [r3, #0]
 8001c50:	2322      	movs	r3, #34	; 0x22
 8001c52:	18fb      	adds	r3, r7, r3
 8001c54:	1c0a      	adds	r2, r1, #0
 8001c56:	801a      	strh	r2, [r3, #0]
 8001c58:	466b      	mov	r3, sp
 8001c5a:	001e      	movs	r6, r3
	// bounds checking
	if (y < 0) y = 0;						// don't set x out of bounds
	if (y > HEIGHT) y = HEIGHT;
 8001c5c:	2326      	movs	r3, #38	; 0x26
 8001c5e:	18fb      	adds	r3, r7, r3
 8001c60:	781b      	ldrb	r3, [r3, #0]
 8001c62:	2ba0      	cmp	r3, #160	; 0xa0
 8001c64:	d903      	bls.n	8001c6e <drawVLine+0x42>
 8001c66:	2326      	movs	r3, #38	; 0x26
 8001c68:	18fb      	adds	r3, r7, r3
 8001c6a:	22a0      	movs	r2, #160	; 0xa0
 8001c6c:	701a      	strb	r2, [r3, #0]
	if (y+size > HEIGHT) size = HEIGHT-y;	// don't set size so line draws out of bounds
 8001c6e:	2326      	movs	r3, #38	; 0x26
 8001c70:	18fb      	adds	r3, r7, r3
 8001c72:	781a      	ldrb	r2, [r3, #0]
 8001c74:	2325      	movs	r3, #37	; 0x25
 8001c76:	18fb      	adds	r3, r7, r3
 8001c78:	781b      	ldrb	r3, [r3, #0]
 8001c7a:	18d3      	adds	r3, r2, r3
 8001c7c:	2ba0      	cmp	r3, #160	; 0xa0
 8001c7e:	dd08      	ble.n	8001c92 <drawVLine+0x66>
 8001c80:	2325      	movs	r3, #37	; 0x25
 8001c82:	18fb      	adds	r3, r7, r3
 8001c84:	2226      	movs	r2, #38	; 0x26
 8001c86:	18ba      	adds	r2, r7, r2
 8001c88:	7812      	ldrb	r2, [r2, #0]
 8001c8a:	2160      	movs	r1, #96	; 0x60
 8001c8c:	4249      	negs	r1, r1
 8001c8e:	1a8a      	subs	r2, r1, r2
 8001c90:	701a      	strb	r2, [r3, #0]
	if (y+size < 0) size = 0-y;
	if ((x > WIDTH) || (x < 0)) return;		// don't draw if x is out of bounds
 8001c92:	2327      	movs	r3, #39	; 0x27
 8001c94:	18fb      	adds	r3, r7, r3
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	2b80      	cmp	r3, #128	; 0x80
 8001c9a:	d869      	bhi.n	8001d70 <drawVLine+0x144>

	setAddrWindow(x, y, 1, size, hspi);
 8001c9c:	2327      	movs	r3, #39	; 0x27
 8001c9e:	18fb      	adds	r3, r7, r3
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	b298      	uxth	r0, r3
 8001ca4:	2326      	movs	r3, #38	; 0x26
 8001ca6:	18fb      	adds	r3, r7, r3
 8001ca8:	781b      	ldrb	r3, [r3, #0]
 8001caa:	b299      	uxth	r1, r3
 8001cac:	2325      	movs	r3, #37	; 0x25
 8001cae:	18fb      	adds	r3, r7, r3
 8001cb0:	781b      	ldrb	r3, [r3, #0]
 8001cb2:	b29a      	uxth	r2, r3
 8001cb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001cb6:	9300      	str	r3, [sp, #0]
 8001cb8:	0013      	movs	r3, r2
 8001cba:	2201      	movs	r2, #1
 8001cbc:	f7ff fe6c 	bl	8001998 <setAddrWindow>
	uint16_t colors[size];
 8001cc0:	2325      	movs	r3, #37	; 0x25
 8001cc2:	18fb      	adds	r3, r7, r3
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	001a      	movs	r2, r3
 8001cc8:	3a01      	subs	r2, #1
 8001cca:	633a      	str	r2, [r7, #48]	; 0x30
 8001ccc:	60bb      	str	r3, [r7, #8]
 8001cce:	2200      	movs	r2, #0
 8001cd0:	60fa      	str	r2, [r7, #12]
 8001cd2:	68b8      	ldr	r0, [r7, #8]
 8001cd4:	68f9      	ldr	r1, [r7, #12]
 8001cd6:	0002      	movs	r2, r0
 8001cd8:	0f12      	lsrs	r2, r2, #28
 8001cda:	000c      	movs	r4, r1
 8001cdc:	0124      	lsls	r4, r4, #4
 8001cde:	61fc      	str	r4, [r7, #28]
 8001ce0:	69fc      	ldr	r4, [r7, #28]
 8001ce2:	4314      	orrs	r4, r2
 8001ce4:	61fc      	str	r4, [r7, #28]
 8001ce6:	0002      	movs	r2, r0
 8001ce8:	0112      	lsls	r2, r2, #4
 8001cea:	61ba      	str	r2, [r7, #24]
 8001cec:	603b      	str	r3, [r7, #0]
 8001cee:	2200      	movs	r2, #0
 8001cf0:	607a      	str	r2, [r7, #4]
 8001cf2:	6838      	ldr	r0, [r7, #0]
 8001cf4:	6879      	ldr	r1, [r7, #4]
 8001cf6:	0002      	movs	r2, r0
 8001cf8:	0f12      	lsrs	r2, r2, #28
 8001cfa:	000c      	movs	r4, r1
 8001cfc:	0124      	lsls	r4, r4, #4
 8001cfe:	617c      	str	r4, [r7, #20]
 8001d00:	697c      	ldr	r4, [r7, #20]
 8001d02:	4314      	orrs	r4, r2
 8001d04:	617c      	str	r4, [r7, #20]
 8001d06:	0002      	movs	r2, r0
 8001d08:	0112      	lsls	r2, r2, #4
 8001d0a:	613a      	str	r2, [r7, #16]
 8001d0c:	005b      	lsls	r3, r3, #1
 8001d0e:	3301      	adds	r3, #1
 8001d10:	3307      	adds	r3, #7
 8001d12:	08db      	lsrs	r3, r3, #3
 8001d14:	00db      	lsls	r3, r3, #3
 8001d16:	466a      	mov	r2, sp
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	469d      	mov	sp, r3
 8001d1c:	ab02      	add	r3, sp, #8
 8001d1e:	3301      	adds	r3, #1
 8001d20:	085b      	lsrs	r3, r3, #1
 8001d22:	005b      	lsls	r3, r3, #1
 8001d24:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (int i = 0; i < size; i++) {		// there has to be a better way to make array of 1 color
 8001d26:	2300      	movs	r3, #0
 8001d28:	637b      	str	r3, [r7, #52]	; 0x34
 8001d2a:	e00e      	b.n	8001d4a <drawVLine+0x11e>
											// SPI without moving address of sent buffer?
		colors[i] = colorFixer(color);
 8001d2c:	2322      	movs	r3, #34	; 0x22
 8001d2e:	18fb      	adds	r3, r7, r3
 8001d30:	881b      	ldrh	r3, [r3, #0]
 8001d32:	0018      	movs	r0, r3
 8001d34:	f7ff feb0 	bl	8001a98 <colorFixer>
 8001d38:	0003      	movs	r3, r0
 8001d3a:	0019      	movs	r1, r3
 8001d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001d40:	0052      	lsls	r2, r2, #1
 8001d42:	52d1      	strh	r1, [r2, r3]
	for (int i = 0; i < size; i++) {		// there has to be a better way to make array of 1 color
 8001d44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d46:	3301      	adds	r3, #1
 8001d48:	637b      	str	r3, [r7, #52]	; 0x34
 8001d4a:	2325      	movs	r3, #37	; 0x25
 8001d4c:	18fb      	adds	r3, r7, r3
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001d52:	429a      	cmp	r2, r3
 8001d54:	dbea      	blt.n	8001d2c <drawVLine+0x100>
	}

	sendCommand(ST77XX_RAMWR, colors, size*2, hspi);
 8001d56:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001d58:	2325      	movs	r3, #37	; 0x25
 8001d5a:	18fb      	adds	r3, r7, r3
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	b29b      	uxth	r3, r3
 8001d60:	18db      	adds	r3, r3, r3
 8001d62:	b29a      	uxth	r2, r3
 8001d64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d66:	202c      	movs	r0, #44	; 0x2c
 8001d68:	f7ff fd02 	bl	8001770 <sendCommand>
 8001d6c:	46b5      	mov	sp, r6
 8001d6e:	e001      	b.n	8001d74 <drawVLine+0x148>
	if ((x > WIDTH) || (x < 0)) return;		// don't draw if x is out of bounds
 8001d70:	46c0      	nop			; (mov r8, r8)
 8001d72:	46b5      	mov	sp, r6
}
 8001d74:	46bd      	mov	sp, r7
 8001d76:	b00f      	add	sp, #60	; 0x3c
 8001d78:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001d7a <drawBuffer>:

void drawBuffer(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t *buffer, uint16_t bufferSize, SPI_HandleTypeDef *hspi) {
 8001d7a:	b5b0      	push	{r4, r5, r7, lr}
 8001d7c:	b084      	sub	sp, #16
 8001d7e:	af02      	add	r7, sp, #8
 8001d80:	0005      	movs	r5, r0
 8001d82:	000c      	movs	r4, r1
 8001d84:	0010      	movs	r0, r2
 8001d86:	0019      	movs	r1, r3
 8001d88:	1dfb      	adds	r3, r7, #7
 8001d8a:	1c2a      	adds	r2, r5, #0
 8001d8c:	701a      	strb	r2, [r3, #0]
 8001d8e:	1dbb      	adds	r3, r7, #6
 8001d90:	1c22      	adds	r2, r4, #0
 8001d92:	701a      	strb	r2, [r3, #0]
 8001d94:	1d7b      	adds	r3, r7, #5
 8001d96:	1c02      	adds	r2, r0, #0
 8001d98:	701a      	strb	r2, [r3, #0]
 8001d9a:	1d3b      	adds	r3, r7, #4
 8001d9c:	1c0a      	adds	r2, r1, #0
 8001d9e:	701a      	strb	r2, [r3, #0]
	// just dont call this with out-of-range vals pls.
	if (x+w > WIDTH || y+h > HEIGHT) return;
 8001da0:	1dfb      	adds	r3, r7, #7
 8001da2:	781a      	ldrb	r2, [r3, #0]
 8001da4:	1d7b      	adds	r3, r7, #5
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	18d3      	adds	r3, r2, r3
 8001daa:	2b80      	cmp	r3, #128	; 0x80
 8001dac:	dc29      	bgt.n	8001e02 <drawBuffer+0x88>
 8001dae:	1dbb      	adds	r3, r7, #6
 8001db0:	781a      	ldrb	r2, [r3, #0]
 8001db2:	1d3b      	adds	r3, r7, #4
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	18d3      	adds	r3, r2, r3
 8001db8:	2ba0      	cmp	r3, #160	; 0xa0
 8001dba:	dc22      	bgt.n	8001e02 <drawBuffer+0x88>

	// also don't call this with buffer size too big bc there's not enough ram for all pixels of display
	if (bufferSize > 10240) return;
 8001dbc:	231c      	movs	r3, #28
 8001dbe:	18fb      	adds	r3, r7, r3
 8001dc0:	881a      	ldrh	r2, [r3, #0]
 8001dc2:	23a0      	movs	r3, #160	; 0xa0
 8001dc4:	019b      	lsls	r3, r3, #6
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	d81d      	bhi.n	8001e06 <drawBuffer+0x8c>

	setAddrWindow(x, y, w, h, hspi);
 8001dca:	1dfb      	adds	r3, r7, #7
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	b298      	uxth	r0, r3
 8001dd0:	1dbb      	adds	r3, r7, #6
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	b299      	uxth	r1, r3
 8001dd6:	1d7b      	adds	r3, r7, #5
 8001dd8:	781b      	ldrb	r3, [r3, #0]
 8001dda:	b29a      	uxth	r2, r3
 8001ddc:	1d3b      	adds	r3, r7, #4
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	b29c      	uxth	r4, r3
 8001de2:	6a3b      	ldr	r3, [r7, #32]
 8001de4:	9300      	str	r3, [sp, #0]
 8001de6:	0023      	movs	r3, r4
 8001de8:	f7ff fdd6 	bl	8001998 <setAddrWindow>
	sendCommand(ST77XX_RAMWR, buffer, bufferSize*2, hspi);
 8001dec:	231c      	movs	r3, #28
 8001dee:	18fb      	adds	r3, r7, r3
 8001df0:	881b      	ldrh	r3, [r3, #0]
 8001df2:	18db      	adds	r3, r3, r3
 8001df4:	b29a      	uxth	r2, r3
 8001df6:	6a3b      	ldr	r3, [r7, #32]
 8001df8:	69b9      	ldr	r1, [r7, #24]
 8001dfa:	202c      	movs	r0, #44	; 0x2c
 8001dfc:	f7ff fcb8 	bl	8001770 <sendCommand>
 8001e00:	e002      	b.n	8001e08 <drawBuffer+0x8e>
	if (x+w > WIDTH || y+h > HEIGHT) return;
 8001e02:	46c0      	nop			; (mov r8, r8)
 8001e04:	e000      	b.n	8001e08 <drawBuffer+0x8e>
	if (bufferSize > 10240) return;
 8001e06:	46c0      	nop			; (mov r8, r8)
}
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	b002      	add	sp, #8
 8001e0c:	bdb0      	pop	{r4, r5, r7, pc}

08001e0e <drawRect>:
			err -= 1;
		}
	}
}

void drawRect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint16_t color, SPI_HandleTypeDef *hspi) {
 8001e0e:	b5b0      	push	{r4, r5, r7, lr}
 8001e10:	b084      	sub	sp, #16
 8001e12:	af02      	add	r7, sp, #8
 8001e14:	0005      	movs	r5, r0
 8001e16:	000c      	movs	r4, r1
 8001e18:	0010      	movs	r0, r2
 8001e1a:	0019      	movs	r1, r3
 8001e1c:	1dfb      	adds	r3, r7, #7
 8001e1e:	1c2a      	adds	r2, r5, #0
 8001e20:	701a      	strb	r2, [r3, #0]
 8001e22:	1dbb      	adds	r3, r7, #6
 8001e24:	1c22      	adds	r2, r4, #0
 8001e26:	701a      	strb	r2, [r3, #0]
 8001e28:	1d7b      	adds	r3, r7, #5
 8001e2a:	1c02      	adds	r2, r0, #0
 8001e2c:	701a      	strb	r2, [r3, #0]
 8001e2e:	1d3b      	adds	r3, r7, #4
 8001e30:	1c0a      	adds	r2, r1, #0
 8001e32:	701a      	strb	r2, [r3, #0]
	drawHLine(x, y, w, color, hspi);
 8001e34:	2518      	movs	r5, #24
 8001e36:	197b      	adds	r3, r7, r5
 8001e38:	881c      	ldrh	r4, [r3, #0]
 8001e3a:	1d7b      	adds	r3, r7, #5
 8001e3c:	781a      	ldrb	r2, [r3, #0]
 8001e3e:	1dbb      	adds	r3, r7, #6
 8001e40:	7819      	ldrb	r1, [r3, #0]
 8001e42:	1dfb      	adds	r3, r7, #7
 8001e44:	7818      	ldrb	r0, [r3, #0]
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	9300      	str	r3, [sp, #0]
 8001e4a:	0023      	movs	r3, r4
 8001e4c:	f7ff fe48 	bl	8001ae0 <drawHLine>
	drawHLine(x, y+h-1, w, color, hspi);
 8001e50:	1dba      	adds	r2, r7, #6
 8001e52:	1d3b      	adds	r3, r7, #4
 8001e54:	7812      	ldrb	r2, [r2, #0]
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	18d3      	adds	r3, r2, r3
 8001e5a:	b2db      	uxtb	r3, r3
 8001e5c:	3b01      	subs	r3, #1
 8001e5e:	b2d9      	uxtb	r1, r3
 8001e60:	197b      	adds	r3, r7, r5
 8001e62:	881c      	ldrh	r4, [r3, #0]
 8001e64:	1d7b      	adds	r3, r7, #5
 8001e66:	781a      	ldrb	r2, [r3, #0]
 8001e68:	1dfb      	adds	r3, r7, #7
 8001e6a:	7818      	ldrb	r0, [r3, #0]
 8001e6c:	69fb      	ldr	r3, [r7, #28]
 8001e6e:	9300      	str	r3, [sp, #0]
 8001e70:	0023      	movs	r3, r4
 8001e72:	f7ff fe35 	bl	8001ae0 <drawHLine>
	drawVLine(x, y, h, color, hspi);
 8001e76:	197b      	adds	r3, r7, r5
 8001e78:	881c      	ldrh	r4, [r3, #0]
 8001e7a:	1d3b      	adds	r3, r7, #4
 8001e7c:	781a      	ldrb	r2, [r3, #0]
 8001e7e:	1dbb      	adds	r3, r7, #6
 8001e80:	7819      	ldrb	r1, [r3, #0]
 8001e82:	1dfb      	adds	r3, r7, #7
 8001e84:	7818      	ldrb	r0, [r3, #0]
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	9300      	str	r3, [sp, #0]
 8001e8a:	0023      	movs	r3, r4
 8001e8c:	f7ff fece 	bl	8001c2c <drawVLine>
	drawVLine(x+w-1, y, h, color, hspi);
 8001e90:	1dfa      	adds	r2, r7, #7
 8001e92:	1d7b      	adds	r3, r7, #5
 8001e94:	7812      	ldrb	r2, [r2, #0]
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	18d3      	adds	r3, r2, r3
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	3b01      	subs	r3, #1
 8001e9e:	b2d8      	uxtb	r0, r3
 8001ea0:	197b      	adds	r3, r7, r5
 8001ea2:	881c      	ldrh	r4, [r3, #0]
 8001ea4:	1d3b      	adds	r3, r7, #4
 8001ea6:	781a      	ldrb	r2, [r3, #0]
 8001ea8:	1dbb      	adds	r3, r7, #6
 8001eaa:	7819      	ldrb	r1, [r3, #0]
 8001eac:	69fb      	ldr	r3, [r7, #28]
 8001eae:	9300      	str	r3, [sp, #0]
 8001eb0:	0023      	movs	r3, r4
 8001eb2:	f7ff febb 	bl	8001c2c <drawVLine>
}
 8001eb6:	46c0      	nop			; (mov r8, r8)
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	b002      	add	sp, #8
 8001ebc:	bdb0      	pop	{r4, r5, r7, pc}

08001ebe <fillRect>:

void fillRect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint16_t color, SPI_HandleTypeDef *hspi) {
 8001ebe:	b5b0      	push	{r4, r5, r7, lr}
 8001ec0:	b086      	sub	sp, #24
 8001ec2:	af02      	add	r7, sp, #8
 8001ec4:	0005      	movs	r5, r0
 8001ec6:	000c      	movs	r4, r1
 8001ec8:	0010      	movs	r0, r2
 8001eca:	0019      	movs	r1, r3
 8001ecc:	1dfb      	adds	r3, r7, #7
 8001ece:	1c2a      	adds	r2, r5, #0
 8001ed0:	701a      	strb	r2, [r3, #0]
 8001ed2:	1dbb      	adds	r3, r7, #6
 8001ed4:	1c22      	adds	r2, r4, #0
 8001ed6:	701a      	strb	r2, [r3, #0]
 8001ed8:	1d7b      	adds	r3, r7, #5
 8001eda:	1c02      	adds	r2, r0, #0
 8001edc:	701a      	strb	r2, [r3, #0]
 8001ede:	1d3b      	adds	r3, r7, #4
 8001ee0:	1c0a      	adds	r2, r1, #0
 8001ee2:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < h; i++) {
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	60fb      	str	r3, [r7, #12]
 8001ee8:	e014      	b.n	8001f14 <fillRect+0x56>
		drawHLine(x, y+i, w, color, hspi);
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	b2da      	uxtb	r2, r3
 8001eee:	1dbb      	adds	r3, r7, #6
 8001ef0:	781b      	ldrb	r3, [r3, #0]
 8001ef2:	18d3      	adds	r3, r2, r3
 8001ef4:	b2d9      	uxtb	r1, r3
 8001ef6:	2320      	movs	r3, #32
 8001ef8:	18fb      	adds	r3, r7, r3
 8001efa:	881c      	ldrh	r4, [r3, #0]
 8001efc:	1d7b      	adds	r3, r7, #5
 8001efe:	781a      	ldrb	r2, [r3, #0]
 8001f00:	1dfb      	adds	r3, r7, #7
 8001f02:	7818      	ldrb	r0, [r3, #0]
 8001f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f06:	9300      	str	r3, [sp, #0]
 8001f08:	0023      	movs	r3, r4
 8001f0a:	f7ff fde9 	bl	8001ae0 <drawHLine>
	for (int i = 0; i < h; i++) {
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	3301      	adds	r3, #1
 8001f12:	60fb      	str	r3, [r7, #12]
 8001f14:	1d3b      	adds	r3, r7, #4
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	68fa      	ldr	r2, [r7, #12]
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	dbe5      	blt.n	8001eea <fillRect+0x2c>
	}
}
 8001f1e:	46c0      	nop			; (mov r8, r8)
 8001f20:	46bd      	mov	sp, r7
 8001f22:	b004      	add	sp, #16
 8001f24:	bdb0      	pop	{r4, r5, r7, pc}

08001f26 <fillScreen>:

void fillScreen(uint16_t color, SPI_HandleTypeDef *hspi) {
 8001f26:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f28:	b091      	sub	sp, #68	; 0x44
 8001f2a:	af04      	add	r7, sp, #16
 8001f2c:	61b9      	str	r1, [r7, #24]
 8001f2e:	221e      	movs	r2, #30
 8001f30:	18ba      	adds	r2, r7, r2
 8001f32:	1c01      	adds	r1, r0, #0
 8001f34:	8011      	strh	r1, [r2, #0]
 8001f36:	466a      	mov	r2, sp
 8001f38:	607a      	str	r2, [r7, #4]
	uint16_t bufferSize = WIDTH*HEIGHT/4;
 8001f3a:	2012      	movs	r0, #18
 8001f3c:	2218      	movs	r2, #24
 8001f3e:	18b9      	adds	r1, r7, r2
 8001f40:	180a      	adds	r2, r1, r0
 8001f42:	21a0      	movs	r1, #160	; 0xa0
 8001f44:	0149      	lsls	r1, r1, #5
 8001f46:	8011      	strh	r1, [r2, #0]
	uint16_t buffer[bufferSize];
 8001f48:	2218      	movs	r2, #24
 8001f4a:	18ba      	adds	r2, r7, r2
 8001f4c:	1812      	adds	r2, r2, r0
 8001f4e:	8812      	ldrh	r2, [r2, #0]
 8001f50:	0011      	movs	r1, r2
 8001f52:	3901      	subs	r1, #1
 8001f54:	6279      	str	r1, [r7, #36]	; 0x24
 8001f56:	613a      	str	r2, [r7, #16]
 8001f58:	2100      	movs	r1, #0
 8001f5a:	6179      	str	r1, [r7, #20]
 8001f5c:	6939      	ldr	r1, [r7, #16]
 8001f5e:	0f09      	lsrs	r1, r1, #28
 8001f60:	6978      	ldr	r0, [r7, #20]
 8001f62:	0106      	lsls	r6, r0, #4
 8001f64:	430e      	orrs	r6, r1
 8001f66:	6939      	ldr	r1, [r7, #16]
 8001f68:	010d      	lsls	r5, r1, #4
 8001f6a:	60ba      	str	r2, [r7, #8]
 8001f6c:	2100      	movs	r1, #0
 8001f6e:	60f9      	str	r1, [r7, #12]
 8001f70:	68bd      	ldr	r5, [r7, #8]
 8001f72:	68fe      	ldr	r6, [r7, #12]
 8001f74:	0029      	movs	r1, r5
 8001f76:	0f09      	lsrs	r1, r1, #28
 8001f78:	0030      	movs	r0, r6
 8001f7a:	0104      	lsls	r4, r0, #4
 8001f7c:	430c      	orrs	r4, r1
 8001f7e:	0029      	movs	r1, r5
 8001f80:	010b      	lsls	r3, r1, #4
 8001f82:	0013      	movs	r3, r2
 8001f84:	005b      	lsls	r3, r3, #1
 8001f86:	3301      	adds	r3, #1
 8001f88:	3307      	adds	r3, #7
 8001f8a:	08db      	lsrs	r3, r3, #3
 8001f8c:	00db      	lsls	r3, r3, #3
 8001f8e:	466a      	mov	r2, sp
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	469d      	mov	sp, r3
 8001f94:	ab04      	add	r3, sp, #16
 8001f96:	3301      	adds	r3, #1
 8001f98:	085b      	lsrs	r3, r3, #1
 8001f9a:	005b      	lsls	r3, r3, #1
 8001f9c:	623b      	str	r3, [r7, #32]
	int i;
	for (i = 0; i < bufferSize; i++) {
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001fa2:	e00e      	b.n	8001fc2 <fillScreen+0x9c>
		buffer[i] = colorFixer(color);
 8001fa4:	231e      	movs	r3, #30
 8001fa6:	18fb      	adds	r3, r7, r3
 8001fa8:	881b      	ldrh	r3, [r3, #0]
 8001faa:	0018      	movs	r0, r3
 8001fac:	f7ff fd74 	bl	8001a98 <colorFixer>
 8001fb0:	0003      	movs	r3, r0
 8001fb2:	0019      	movs	r1, r3
 8001fb4:	6a3b      	ldr	r3, [r7, #32]
 8001fb6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001fb8:	0052      	lsls	r2, r2, #1
 8001fba:	52d1      	strh	r1, [r2, r3]
	for (i = 0; i < bufferSize; i++) {
 8001fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fbe:	3301      	adds	r3, #1
 8001fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001fc2:	2312      	movs	r3, #18
 8001fc4:	2218      	movs	r2, #24
 8001fc6:	4694      	mov	ip, r2
 8001fc8:	44bc      	add	ip, r7
 8001fca:	4463      	add	r3, ip
 8001fcc:	881b      	ldrh	r3, [r3, #0]
 8001fce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	dbe7      	blt.n	8001fa4 <fillScreen+0x7e>
	}

	for (i = 0; i < 4; i++) {
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001fd8:	e017      	b.n	800200a <fillScreen+0xe4>
		drawBuffer(0, HEIGHT/4*i, WIDTH, HEIGHT/4, buffer, bufferSize, hspi);
 8001fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	2228      	movs	r2, #40	; 0x28
 8001fe0:	4353      	muls	r3, r2
 8001fe2:	b2d9      	uxtb	r1, r3
 8001fe4:	6a3b      	ldr	r3, [r7, #32]
 8001fe6:	69ba      	ldr	r2, [r7, #24]
 8001fe8:	9202      	str	r2, [sp, #8]
 8001fea:	2212      	movs	r2, #18
 8001fec:	2018      	movs	r0, #24
 8001fee:	4684      	mov	ip, r0
 8001ff0:	44bc      	add	ip, r7
 8001ff2:	4462      	add	r2, ip
 8001ff4:	8812      	ldrh	r2, [r2, #0]
 8001ff6:	9201      	str	r2, [sp, #4]
 8001ff8:	9300      	str	r3, [sp, #0]
 8001ffa:	2328      	movs	r3, #40	; 0x28
 8001ffc:	2280      	movs	r2, #128	; 0x80
 8001ffe:	2000      	movs	r0, #0
 8002000:	f7ff febb 	bl	8001d7a <drawBuffer>
	for (i = 0; i < 4; i++) {
 8002004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002006:	3301      	adds	r3, #1
 8002008:	62fb      	str	r3, [r7, #44]	; 0x2c
 800200a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800200c:	2b03      	cmp	r3, #3
 800200e:	dde4      	ble.n	8001fda <fillScreen+0xb4>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	469d      	mov	sp, r3
	}
}
 8002014:	46c0      	nop			; (mov r8, r8)
 8002016:	46bd      	mov	sp, r7
 8002018:	b00d      	add	sp, #52	; 0x34
 800201a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800201c <drawCenteredText>:
// ---- end of basic shapes and lines ----

// ---- start of more complicated graphics ----
void drawCenteredText(uint8_t x_center, uint8_t y, const char *str, SPI_HandleTypeDef *hspi) {
 800201c:	b590      	push	{r4, r7, lr}
 800201e:	b089      	sub	sp, #36	; 0x24
 8002020:	af00      	add	r7, sp, #0
 8002022:	60ba      	str	r2, [r7, #8]
 8002024:	607b      	str	r3, [r7, #4]
 8002026:	230f      	movs	r3, #15
 8002028:	18fb      	adds	r3, r7, r3
 800202a:	1c02      	adds	r2, r0, #0
 800202c:	701a      	strb	r2, [r3, #0]
 800202e:	240e      	movs	r4, #14
 8002030:	193b      	adds	r3, r7, r4
 8002032:	1c0a      	adds	r2, r1, #0
 8002034:	701a      	strb	r2, [r3, #0]
	uint8_t strSize = strlen(str);
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	0018      	movs	r0, r3
 800203a:	f7fe f865 	bl	8000108 <strlen>
 800203e:	0002      	movs	r2, r0
 8002040:	231f      	movs	r3, #31
 8002042:	18fb      	adds	r3, r7, r3
 8002044:	701a      	strb	r2, [r3, #0]
	// bounds checking. text box needed to print text should not end up out of bounds
	if (y+textSize*8 > HEIGHT) return;
 8002046:	193b      	adds	r3, r7, r4
 8002048:	781a      	ldrb	r2, [r3, #0]
 800204a:	4b24      	ldr	r3, [pc, #144]	; (80020dc <drawCenteredText+0xc0>)
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	00db      	lsls	r3, r3, #3
 8002050:	18d3      	adds	r3, r2, r3
 8002052:	2ba0      	cmp	r3, #160	; 0xa0
 8002054:	dc3a      	bgt.n	80020cc <drawCenteredText+0xb0>
	int leftBound = x_center-(strSize*textSize*6)/2;
 8002056:	230f      	movs	r3, #15
 8002058:	18fb      	adds	r3, r7, r3
 800205a:	7819      	ldrb	r1, [r3, #0]
 800205c:	231f      	movs	r3, #31
 800205e:	18fb      	adds	r3, r7, r3
 8002060:	781b      	ldrb	r3, [r3, #0]
 8002062:	4a1e      	ldr	r2, [pc, #120]	; (80020dc <drawCenteredText+0xc0>)
 8002064:	7812      	ldrb	r2, [r2, #0]
 8002066:	435a      	muls	r2, r3
 8002068:	0013      	movs	r3, r2
 800206a:	005b      	lsls	r3, r3, #1
 800206c:	189b      	adds	r3, r3, r2
 800206e:	005b      	lsls	r3, r3, #1
 8002070:	d500      	bpl.n	8002074 <drawCenteredText+0x58>
 8002072:	3301      	adds	r3, #1
 8002074:	105b      	asrs	r3, r3, #1
 8002076:	425b      	negs	r3, r3
 8002078:	18cb      	adds	r3, r1, r3
 800207a:	61bb      	str	r3, [r7, #24]
	int rightBound = x_center+(strSize*textSize*6)/2;
 800207c:	230f      	movs	r3, #15
 800207e:	18fb      	adds	r3, r7, r3
 8002080:	7819      	ldrb	r1, [r3, #0]
 8002082:	231f      	movs	r3, #31
 8002084:	18fb      	adds	r3, r7, r3
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	4a14      	ldr	r2, [pc, #80]	; (80020dc <drawCenteredText+0xc0>)
 800208a:	7812      	ldrb	r2, [r2, #0]
 800208c:	435a      	muls	r2, r3
 800208e:	0013      	movs	r3, r2
 8002090:	005b      	lsls	r3, r3, #1
 8002092:	189b      	adds	r3, r3, r2
 8002094:	005b      	lsls	r3, r3, #1
 8002096:	d500      	bpl.n	800209a <drawCenteredText+0x7e>
 8002098:	3301      	adds	r3, #1
 800209a:	105b      	asrs	r3, r3, #1
 800209c:	18cb      	adds	r3, r1, r3
 800209e:	617b      	str	r3, [r7, #20]
	if (leftBound < 0) return;
 80020a0:	69bb      	ldr	r3, [r7, #24]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	db14      	blt.n	80020d0 <drawCenteredText+0xb4>
	if (rightBound > WIDTH) return;
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	2b80      	cmp	r3, #128	; 0x80
 80020aa:	dc13      	bgt.n	80020d4 <drawCenteredText+0xb8>

	setCursor(leftBound, y);
 80020ac:	69bb      	ldr	r3, [r7, #24]
 80020ae:	b2da      	uxtb	r2, r3
 80020b0:	230e      	movs	r3, #14
 80020b2:	18fb      	adds	r3, r7, r3
 80020b4:	781b      	ldrb	r3, [r3, #0]
 80020b6:	0019      	movs	r1, r3
 80020b8:	0010      	movs	r0, r2
 80020ba:	f000 fce7 	bl	8002a8c <setCursor>
	drawText(str, hspi);
 80020be:	687a      	ldr	r2, [r7, #4]
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	0011      	movs	r1, r2
 80020c4:	0018      	movs	r0, r3
 80020c6:	f000 fc53 	bl	8002970 <drawText>
 80020ca:	e004      	b.n	80020d6 <drawCenteredText+0xba>
	if (y+textSize*8 > HEIGHT) return;
 80020cc:	46c0      	nop			; (mov r8, r8)
 80020ce:	e002      	b.n	80020d6 <drawCenteredText+0xba>
	if (leftBound < 0) return;
 80020d0:	46c0      	nop			; (mov r8, r8)
 80020d2:	e000      	b.n	80020d6 <drawCenteredText+0xba>
	if (rightBound > WIDTH) return;
 80020d4:	46c0      	nop			; (mov r8, r8)
}
 80020d6:	46bd      	mov	sp, r7
 80020d8:	b009      	add	sp, #36	; 0x24
 80020da:	bd90      	pop	{r4, r7, pc}
 80020dc:	200000ee 	.word	0x200000ee

080020e0 <drawCenteredTextWithPadding>:

void drawCenteredTextWithPadding(uint8_t x_center, uint8_t y, uint8_t maxLength, const char *str, SPI_HandleTypeDef *hspi) {
 80020e0:	b5b0      	push	{r4, r5, r7, lr}
 80020e2:	b088      	sub	sp, #32
 80020e4:	af02      	add	r7, sp, #8
 80020e6:	0004      	movs	r4, r0
 80020e8:	0008      	movs	r0, r1
 80020ea:	0011      	movs	r1, r2
 80020ec:	603b      	str	r3, [r7, #0]
 80020ee:	1dfb      	adds	r3, r7, #7
 80020f0:	1c22      	adds	r2, r4, #0
 80020f2:	701a      	strb	r2, [r3, #0]
 80020f4:	1dbb      	adds	r3, r7, #6
 80020f6:	1c02      	adds	r2, r0, #0
 80020f8:	701a      	strb	r2, [r3, #0]
 80020fa:	1d7b      	adds	r3, r7, #5
 80020fc:	1c0a      	adds	r2, r1, #0
 80020fe:	701a      	strb	r2, [r3, #0]
	// bounds checking. text box needed to print text should not end up out of bounds
	if (y+textSize*8 > HEIGHT) return;
 8002100:	1dbb      	adds	r3, r7, #6
 8002102:	781a      	ldrb	r2, [r3, #0]
 8002104:	4b60      	ldr	r3, [pc, #384]	; (8002288 <drawCenteredTextWithPadding+0x1a8>)
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	00db      	lsls	r3, r3, #3
 800210a:	18d3      	adds	r3, r2, r3
 800210c:	2ba0      	cmp	r3, #160	; 0xa0
 800210e:	dd00      	ble.n	8002112 <drawCenteredTextWithPadding+0x32>
 8002110:	e0af      	b.n	8002272 <drawCenteredTextWithPadding+0x192>
	int leftBound = x_center-(maxLength*textSize*6)/2;
 8002112:	1dfb      	adds	r3, r7, #7
 8002114:	7819      	ldrb	r1, [r3, #0]
 8002116:	1d7b      	adds	r3, r7, #5
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	4a5b      	ldr	r2, [pc, #364]	; (8002288 <drawCenteredTextWithPadding+0x1a8>)
 800211c:	7812      	ldrb	r2, [r2, #0]
 800211e:	435a      	muls	r2, r3
 8002120:	0013      	movs	r3, r2
 8002122:	005b      	lsls	r3, r3, #1
 8002124:	189b      	adds	r3, r3, r2
 8002126:	005b      	lsls	r3, r3, #1
 8002128:	d500      	bpl.n	800212c <drawCenteredTextWithPadding+0x4c>
 800212a:	3301      	adds	r3, #1
 800212c:	105b      	asrs	r3, r3, #1
 800212e:	425b      	negs	r3, r3
 8002130:	18cb      	adds	r3, r1, r3
 8002132:	617b      	str	r3, [r7, #20]
	int rightBound = x_center+(maxLength*textSize*6)/2;
 8002134:	1dfb      	adds	r3, r7, #7
 8002136:	7819      	ldrb	r1, [r3, #0]
 8002138:	1d7b      	adds	r3, r7, #5
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	4a52      	ldr	r2, [pc, #328]	; (8002288 <drawCenteredTextWithPadding+0x1a8>)
 800213e:	7812      	ldrb	r2, [r2, #0]
 8002140:	435a      	muls	r2, r3
 8002142:	0013      	movs	r3, r2
 8002144:	005b      	lsls	r3, r3, #1
 8002146:	189b      	adds	r3, r3, r2
 8002148:	005b      	lsls	r3, r3, #1
 800214a:	d500      	bpl.n	800214e <drawCenteredTextWithPadding+0x6e>
 800214c:	3301      	adds	r3, #1
 800214e:	105b      	asrs	r3, r3, #1
 8002150:	18cb      	adds	r3, r1, r3
 8002152:	613b      	str	r3, [r7, #16]
	if (leftBound < 0) return;
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	2b00      	cmp	r3, #0
 8002158:	da00      	bge.n	800215c <drawCenteredTextWithPadding+0x7c>
 800215a:	e08c      	b.n	8002276 <drawCenteredTextWithPadding+0x196>
	if (rightBound > WIDTH) return;
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	2b80      	cmp	r3, #128	; 0x80
 8002160:	dd00      	ble.n	8002164 <drawCenteredTextWithPadding+0x84>
 8002162:	e08a      	b.n	800227a <drawCenteredTextWithPadding+0x19a>

	uint8_t strSize = strlen(str);
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	0018      	movs	r0, r3
 8002168:	f7fd ffce 	bl	8000108 <strlen>
 800216c:	0002      	movs	r2, r0
 800216e:	210f      	movs	r1, #15
 8002170:	187b      	adds	r3, r7, r1
 8002172:	701a      	strb	r2, [r3, #0]
	if (maxLength < strSize) return;		// size should not be greater than max
 8002174:	1d7a      	adds	r2, r7, #5
 8002176:	187b      	adds	r3, r7, r1
 8002178:	7812      	ldrb	r2, [r2, #0]
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	429a      	cmp	r2, r3
 800217e:	d200      	bcs.n	8002182 <drawCenteredTextWithPadding+0xa2>
 8002180:	e07d      	b.n	800227e <drawCenteredTextWithPadding+0x19e>

	// draw left and right padding
	uint8_t diff = maxLength-strSize;
 8002182:	240e      	movs	r4, #14
 8002184:	193b      	adds	r3, r7, r4
 8002186:	1d79      	adds	r1, r7, #5
 8002188:	220f      	movs	r2, #15
 800218a:	18ba      	adds	r2, r7, r2
 800218c:	7809      	ldrb	r1, [r1, #0]
 800218e:	7812      	ldrb	r2, [r2, #0]
 8002190:	1a8a      	subs	r2, r1, r2
 8002192:	701a      	strb	r2, [r3, #0]
	fillRect(leftBound, y, diff*textSize*6/2, textSize*8, bg, hspi);		// math out of order to accomodate diff/2 being a non-int
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	b2d8      	uxtb	r0, r3
 8002198:	193b      	adds	r3, r7, r4
 800219a:	781b      	ldrb	r3, [r3, #0]
 800219c:	4a3a      	ldr	r2, [pc, #232]	; (8002288 <drawCenteredTextWithPadding+0x1a8>)
 800219e:	7812      	ldrb	r2, [r2, #0]
 80021a0:	435a      	muls	r2, r3
 80021a2:	0013      	movs	r3, r2
 80021a4:	005b      	lsls	r3, r3, #1
 80021a6:	189b      	adds	r3, r3, r2
 80021a8:	005b      	lsls	r3, r3, #1
 80021aa:	d500      	bpl.n	80021ae <drawCenteredTextWithPadding+0xce>
 80021ac:	3301      	adds	r3, #1
 80021ae:	105b      	asrs	r3, r3, #1
 80021b0:	b2dc      	uxtb	r4, r3
 80021b2:	4b35      	ldr	r3, [pc, #212]	; (8002288 <drawCenteredTextWithPadding+0x1a8>)
 80021b4:	781b      	ldrb	r3, [r3, #0]
 80021b6:	00db      	lsls	r3, r3, #3
 80021b8:	b2dd      	uxtb	r5, r3
 80021ba:	4b34      	ldr	r3, [pc, #208]	; (800228c <drawCenteredTextWithPadding+0x1ac>)
 80021bc:	881b      	ldrh	r3, [r3, #0]
 80021be:	1dba      	adds	r2, r7, #6
 80021c0:	7811      	ldrb	r1, [r2, #0]
 80021c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80021c4:	9201      	str	r2, [sp, #4]
 80021c6:	9300      	str	r3, [sp, #0]
 80021c8:	002b      	movs	r3, r5
 80021ca:	0022      	movs	r2, r4
 80021cc:	f7ff fe77 	bl	8001ebe <fillRect>
	fillRect(rightBound-diff*textSize*6/2, y, diff*textSize*6/2, textSize*8, bg, hspi);
 80021d0:	230e      	movs	r3, #14
 80021d2:	18fb      	adds	r3, r7, r3
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	4a2c      	ldr	r2, [pc, #176]	; (8002288 <drawCenteredTextWithPadding+0x1a8>)
 80021d8:	7812      	ldrb	r2, [r2, #0]
 80021da:	435a      	muls	r2, r3
 80021dc:	0013      	movs	r3, r2
 80021de:	005b      	lsls	r3, r3, #1
 80021e0:	189b      	adds	r3, r3, r2
 80021e2:	005b      	lsls	r3, r3, #1
 80021e4:	d500      	bpl.n	80021e8 <drawCenteredTextWithPadding+0x108>
 80021e6:	3301      	adds	r3, #1
 80021e8:	105b      	asrs	r3, r3, #1
 80021ea:	425b      	negs	r3, r3
 80021ec:	b2da      	uxtb	r2, r3
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	18d3      	adds	r3, r2, r3
 80021f4:	b2d8      	uxtb	r0, r3
 80021f6:	230e      	movs	r3, #14
 80021f8:	18fb      	adds	r3, r7, r3
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	4a22      	ldr	r2, [pc, #136]	; (8002288 <drawCenteredTextWithPadding+0x1a8>)
 80021fe:	7812      	ldrb	r2, [r2, #0]
 8002200:	435a      	muls	r2, r3
 8002202:	0013      	movs	r3, r2
 8002204:	005b      	lsls	r3, r3, #1
 8002206:	189b      	adds	r3, r3, r2
 8002208:	005b      	lsls	r3, r3, #1
 800220a:	d500      	bpl.n	800220e <drawCenteredTextWithPadding+0x12e>
 800220c:	3301      	adds	r3, #1
 800220e:	105b      	asrs	r3, r3, #1
 8002210:	b2dc      	uxtb	r4, r3
 8002212:	4b1d      	ldr	r3, [pc, #116]	; (8002288 <drawCenteredTextWithPadding+0x1a8>)
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	00db      	lsls	r3, r3, #3
 8002218:	b2dd      	uxtb	r5, r3
 800221a:	4b1c      	ldr	r3, [pc, #112]	; (800228c <drawCenteredTextWithPadding+0x1ac>)
 800221c:	881b      	ldrh	r3, [r3, #0]
 800221e:	1dba      	adds	r2, r7, #6
 8002220:	7811      	ldrb	r1, [r2, #0]
 8002222:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002224:	9201      	str	r2, [sp, #4]
 8002226:	9300      	str	r3, [sp, #0]
 8002228:	002b      	movs	r3, r5
 800222a:	0022      	movs	r2, r4
 800222c:	f7ff fe47 	bl	8001ebe <fillRect>

	int textLeftBound = x_center-(strSize*textSize*6)/2;
 8002230:	1dfb      	adds	r3, r7, #7
 8002232:	7819      	ldrb	r1, [r3, #0]
 8002234:	230f      	movs	r3, #15
 8002236:	18fb      	adds	r3, r7, r3
 8002238:	781b      	ldrb	r3, [r3, #0]
 800223a:	4a13      	ldr	r2, [pc, #76]	; (8002288 <drawCenteredTextWithPadding+0x1a8>)
 800223c:	7812      	ldrb	r2, [r2, #0]
 800223e:	435a      	muls	r2, r3
 8002240:	0013      	movs	r3, r2
 8002242:	005b      	lsls	r3, r3, #1
 8002244:	189b      	adds	r3, r3, r2
 8002246:	005b      	lsls	r3, r3, #1
 8002248:	d500      	bpl.n	800224c <drawCenteredTextWithPadding+0x16c>
 800224a:	3301      	adds	r3, #1
 800224c:	105b      	asrs	r3, r3, #1
 800224e:	425b      	negs	r3, r3
 8002250:	18cb      	adds	r3, r1, r3
 8002252:	60bb      	str	r3, [r7, #8]
	setCursor(textLeftBound, y);
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	b2da      	uxtb	r2, r3
 8002258:	1dbb      	adds	r3, r7, #6
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	0019      	movs	r1, r3
 800225e:	0010      	movs	r0, r2
 8002260:	f000 fc14 	bl	8002a8c <setCursor>
	drawText(str, hspi);
 8002264:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	0011      	movs	r1, r2
 800226a:	0018      	movs	r0, r3
 800226c:	f000 fb80 	bl	8002970 <drawText>
 8002270:	e006      	b.n	8002280 <drawCenteredTextWithPadding+0x1a0>
	if (y+textSize*8 > HEIGHT) return;
 8002272:	46c0      	nop			; (mov r8, r8)
 8002274:	e004      	b.n	8002280 <drawCenteredTextWithPadding+0x1a0>
	if (leftBound < 0) return;
 8002276:	46c0      	nop			; (mov r8, r8)
 8002278:	e002      	b.n	8002280 <drawCenteredTextWithPadding+0x1a0>
	if (rightBound > WIDTH) return;
 800227a:	46c0      	nop			; (mov r8, r8)
 800227c:	e000      	b.n	8002280 <drawCenteredTextWithPadding+0x1a0>
	if (maxLength < strSize) return;		// size should not be greater than max
 800227e:	46c0      	nop			; (mov r8, r8)
}
 8002280:	46bd      	mov	sp, r7
 8002282:	b006      	add	sp, #24
 8002284:	bdb0      	pop	{r4, r5, r7, pc}
 8002286:	46c0      	nop			; (mov r8, r8)
 8002288:	200000ee 	.word	0x200000ee
 800228c:	200000f2 	.word	0x200000f2

08002290 <clearTextLine>:

void clearTextLine(uint8_t y, SPI_HandleTypeDef *hspi) {
 8002290:	b580      	push	{r7, lr}
 8002292:	b084      	sub	sp, #16
 8002294:	af02      	add	r7, sp, #8
 8002296:	0002      	movs	r2, r0
 8002298:	6039      	str	r1, [r7, #0]
 800229a:	1dfb      	adds	r3, r7, #7
 800229c:	701a      	strb	r2, [r3, #0]
	fillRect(0, y, WIDTH, textSize*8, bg, hspi);
 800229e:	4b0a      	ldr	r3, [pc, #40]	; (80022c8 <clearTextLine+0x38>)
 80022a0:	781b      	ldrb	r3, [r3, #0]
 80022a2:	00db      	lsls	r3, r3, #3
 80022a4:	b2d8      	uxtb	r0, r3
 80022a6:	4b09      	ldr	r3, [pc, #36]	; (80022cc <clearTextLine+0x3c>)
 80022a8:	881b      	ldrh	r3, [r3, #0]
 80022aa:	1dfa      	adds	r2, r7, #7
 80022ac:	7811      	ldrb	r1, [r2, #0]
 80022ae:	683a      	ldr	r2, [r7, #0]
 80022b0:	9201      	str	r2, [sp, #4]
 80022b2:	9300      	str	r3, [sp, #0]
 80022b4:	0003      	movs	r3, r0
 80022b6:	2280      	movs	r2, #128	; 0x80
 80022b8:	2000      	movs	r0, #0
 80022ba:	f7ff fe00 	bl	8001ebe <fillRect>
}
 80022be:	46c0      	nop			; (mov r8, r8)
 80022c0:	46bd      	mov	sp, r7
 80022c2:	b002      	add	sp, #8
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	46c0      	nop			; (mov r8, r8)
 80022c8:	200000ee 	.word	0x200000ee
 80022cc:	200000f2 	.word	0x200000f2

080022d0 <drawChar>:
// ---- end of more complicated graphics ----

// ---- text functions ----
void drawChar(uint8_t ch, SPI_HandleTypeDef *hspi) {
 80022d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022d2:	b095      	sub	sp, #84	; 0x54
 80022d4:	af04      	add	r7, sp, #16
 80022d6:	61b9      	str	r1, [r7, #24]
 80022d8:	221f      	movs	r2, #31
 80022da:	18ba      	adds	r2, r7, r2
 80022dc:	1c01      	adds	r1, r0, #0
 80022de:	7011      	strb	r1, [r2, #0]
 80022e0:	466a      	mov	r2, sp
 80022e2:	607a      	str	r2, [r7, #4]
	uint16_t bufferSize = 6*8*textSize*textSize;
 80022e4:	4abe      	ldr	r2, [pc, #760]	; (80025e0 <drawChar+0x310>)
 80022e6:	7812      	ldrb	r2, [r2, #0]
 80022e8:	b292      	uxth	r2, r2
 80022ea:	49bd      	ldr	r1, [pc, #756]	; (80025e0 <drawChar+0x310>)
 80022ec:	7809      	ldrb	r1, [r1, #0]
 80022ee:	b289      	uxth	r1, r1
 80022f0:	434a      	muls	r2, r1
 80022f2:	b291      	uxth	r1, r2
 80022f4:	221a      	movs	r2, #26
 80022f6:	2018      	movs	r0, #24
 80022f8:	4684      	mov	ip, r0
 80022fa:	44bc      	add	ip, r7
 80022fc:	4462      	add	r2, ip
 80022fe:	2030      	movs	r0, #48	; 0x30
 8002300:	4341      	muls	r1, r0
 8002302:	8011      	strh	r1, [r2, #0]
	uint16_t buffer[bufferSize];
 8002304:	221a      	movs	r2, #26
 8002306:	2118      	movs	r1, #24
 8002308:	468c      	mov	ip, r1
 800230a:	44bc      	add	ip, r7
 800230c:	4462      	add	r2, ip
 800230e:	8812      	ldrh	r2, [r2, #0]
 8002310:	0011      	movs	r1, r2
 8002312:	3901      	subs	r1, #1
 8002314:	62f9      	str	r1, [r7, #44]	; 0x2c
 8002316:	613a      	str	r2, [r7, #16]
 8002318:	2100      	movs	r1, #0
 800231a:	6179      	str	r1, [r7, #20]
 800231c:	6939      	ldr	r1, [r7, #16]
 800231e:	0f09      	lsrs	r1, r1, #28
 8002320:	6978      	ldr	r0, [r7, #20]
 8002322:	0106      	lsls	r6, r0, #4
 8002324:	430e      	orrs	r6, r1
 8002326:	6939      	ldr	r1, [r7, #16]
 8002328:	010d      	lsls	r5, r1, #4
 800232a:	60ba      	str	r2, [r7, #8]
 800232c:	2100      	movs	r1, #0
 800232e:	60f9      	str	r1, [r7, #12]
 8002330:	68bd      	ldr	r5, [r7, #8]
 8002332:	68fe      	ldr	r6, [r7, #12]
 8002334:	0029      	movs	r1, r5
 8002336:	0f09      	lsrs	r1, r1, #28
 8002338:	0030      	movs	r0, r6
 800233a:	0104      	lsls	r4, r0, #4
 800233c:	430c      	orrs	r4, r1
 800233e:	0029      	movs	r1, r5
 8002340:	010b      	lsls	r3, r1, #4
 8002342:	0013      	movs	r3, r2
 8002344:	005b      	lsls	r3, r3, #1
 8002346:	3301      	adds	r3, #1
 8002348:	3307      	adds	r3, #7
 800234a:	08db      	lsrs	r3, r3, #3
 800234c:	00db      	lsls	r3, r3, #3
 800234e:	466a      	mov	r2, sp
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	469d      	mov	sp, r3
 8002354:	ab04      	add	r3, sp, #16
 8002356:	3301      	adds	r3, #1
 8002358:	085b      	lsrs	r3, r3, #1
 800235a:	005b      	lsls	r3, r3, #1
 800235c:	62bb      	str	r3, [r7, #40]	; 0x28
	int16_t rowOffset, address;

	for (int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
 800235e:	2325      	movs	r3, #37	; 0x25
 8002360:	2218      	movs	r2, #24
 8002362:	4694      	mov	ip, r2
 8002364:	44bc      	add	ip, r7
 8002366:	4463      	add	r3, ip
 8002368:	2200      	movs	r2, #0
 800236a:	701a      	strb	r2, [r3, #0]
 800236c:	e1f4      	b.n	8002758 <drawChar+0x488>
		uint8_t line = font[ch*5+i];
 800236e:	231f      	movs	r3, #31
 8002370:	18fb      	adds	r3, r7, r3
 8002372:	781a      	ldrb	r2, [r3, #0]
 8002374:	0013      	movs	r3, r2
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	189a      	adds	r2, r3, r2
 800237a:	2325      	movs	r3, #37	; 0x25
 800237c:	2118      	movs	r1, #24
 800237e:	468c      	mov	ip, r1
 8002380:	44bc      	add	ip, r7
 8002382:	4463      	add	r3, ip
 8002384:	781b      	ldrb	r3, [r3, #0]
 8002386:	b25b      	sxtb	r3, r3
 8002388:	18d2      	adds	r2, r2, r3
 800238a:	2324      	movs	r3, #36	; 0x24
 800238c:	2118      	movs	r1, #24
 800238e:	468c      	mov	ip, r1
 8002390:	44bc      	add	ip, r7
 8002392:	4463      	add	r3, ip
 8002394:	4993      	ldr	r1, [pc, #588]	; (80025e4 <drawChar+0x314>)
 8002396:	5c8a      	ldrb	r2, [r1, r2]
 8002398:	701a      	strb	r2, [r3, #0]
		for (int8_t j=0; j<8; j++, line >>= 1) {
 800239a:	2323      	movs	r3, #35	; 0x23
 800239c:	2218      	movs	r2, #24
 800239e:	4694      	mov	ip, r2
 80023a0:	44bc      	add	ip, r7
 80023a2:	4463      	add	r3, ip
 80023a4:	2200      	movs	r2, #0
 80023a6:	701a      	strb	r2, [r3, #0]
 80023a8:	e1c0      	b.n	800272c <drawChar+0x45c>
			if (line & 1) {
 80023aa:	2324      	movs	r3, #36	; 0x24
 80023ac:	2218      	movs	r2, #24
 80023ae:	4694      	mov	ip, r2
 80023b0:	44bc      	add	ip, r7
 80023b2:	4463      	add	r3, ip
 80023b4:	781b      	ldrb	r3, [r3, #0]
 80023b6:	2201      	movs	r2, #1
 80023b8:	4013      	ands	r3, r2
 80023ba:	d100      	bne.n	80023be <drawChar+0xee>
 80023bc:	e0c8      	b.n	8002550 <drawChar+0x280>
				if (textSize == 1) {
 80023be:	4b88      	ldr	r3, [pc, #544]	; (80025e0 <drawChar+0x310>)
 80023c0:	781b      	ldrb	r3, [r3, #0]
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d11c      	bne.n	8002400 <drawChar+0x130>
					buffer[i+j*6] = colorFixer(textColor);
 80023c6:	4b88      	ldr	r3, [pc, #544]	; (80025e8 <drawChar+0x318>)
 80023c8:	8818      	ldrh	r0, [r3, #0]
 80023ca:	2325      	movs	r3, #37	; 0x25
 80023cc:	2218      	movs	r2, #24
 80023ce:	4694      	mov	ip, r2
 80023d0:	44bc      	add	ip, r7
 80023d2:	4463      	add	r3, ip
 80023d4:	2100      	movs	r1, #0
 80023d6:	5659      	ldrsb	r1, [r3, r1]
 80023d8:	2323      	movs	r3, #35	; 0x23
 80023da:	2218      	movs	r2, #24
 80023dc:	4694      	mov	ip, r2
 80023de:	44bc      	add	ip, r7
 80023e0:	4463      	add	r3, ip
 80023e2:	2200      	movs	r2, #0
 80023e4:	569a      	ldrsb	r2, [r3, r2]
 80023e6:	0013      	movs	r3, r2
 80023e8:	005b      	lsls	r3, r3, #1
 80023ea:	189b      	adds	r3, r3, r2
 80023ec:	005b      	lsls	r3, r3, #1
 80023ee:	18cc      	adds	r4, r1, r3
 80023f0:	f7ff fb52 	bl	8001a98 <colorFixer>
 80023f4:	0003      	movs	r3, r0
 80023f6:	0019      	movs	r1, r3
 80023f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023fa:	0062      	lsls	r2, r4, #1
 80023fc:	52d1      	strh	r1, [r2, r3]
 80023fe:	e17f      	b.n	8002700 <drawChar+0x430>
				}
				else {
					for (int8_t k = 0; k < textSize; k++) {
 8002400:	2322      	movs	r3, #34	; 0x22
 8002402:	2218      	movs	r2, #24
 8002404:	4694      	mov	ip, r2
 8002406:	44bc      	add	ip, r7
 8002408:	4463      	add	r3, ip
 800240a:	2200      	movs	r2, #0
 800240c:	701a      	strb	r2, [r3, #0]
 800240e:	e092      	b.n	8002536 <drawChar+0x266>
						rowOffset = textSize*6;
 8002410:	4b73      	ldr	r3, [pc, #460]	; (80025e0 <drawChar+0x310>)
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	b29b      	uxth	r3, r3
 8002416:	1c1a      	adds	r2, r3, #0
 8002418:	1c13      	adds	r3, r2, #0
 800241a:	18db      	adds	r3, r3, r3
 800241c:	189b      	adds	r3, r3, r2
 800241e:	18db      	adds	r3, r3, r3
 8002420:	b29a      	uxth	r2, r3
 8002422:	2326      	movs	r3, #38	; 0x26
 8002424:	2118      	movs	r1, #24
 8002426:	468c      	mov	ip, r1
 8002428:	44bc      	add	ip, r7
 800242a:	4463      	add	r3, ip
 800242c:	801a      	strh	r2, [r3, #0]
						for (int8_t l = 0; l < textSize; l++) {
 800242e:	2321      	movs	r3, #33	; 0x21
 8002430:	2218      	movs	r2, #24
 8002432:	4694      	mov	ip, r2
 8002434:	44bc      	add	ip, r7
 8002436:	4463      	add	r3, ip
 8002438:	2200      	movs	r2, #0
 800243a:	701a      	strb	r2, [r3, #0]
 800243c:	e064      	b.n	8002508 <drawChar+0x238>
							address = (textSize*textSize*j*6)+(i*textSize);
 800243e:	4b68      	ldr	r3, [pc, #416]	; (80025e0 <drawChar+0x310>)
 8002440:	781b      	ldrb	r3, [r3, #0]
 8002442:	b29b      	uxth	r3, r3
 8002444:	4a66      	ldr	r2, [pc, #408]	; (80025e0 <drawChar+0x310>)
 8002446:	7812      	ldrb	r2, [r2, #0]
 8002448:	b292      	uxth	r2, r2
 800244a:	4353      	muls	r3, r2
 800244c:	b29b      	uxth	r3, r3
 800244e:	2223      	movs	r2, #35	; 0x23
 8002450:	2118      	movs	r1, #24
 8002452:	468c      	mov	ip, r1
 8002454:	44bc      	add	ip, r7
 8002456:	4462      	add	r2, ip
 8002458:	7812      	ldrb	r2, [r2, #0]
 800245a:	b252      	sxtb	r2, r2
 800245c:	b292      	uxth	r2, r2
 800245e:	4353      	muls	r3, r2
 8002460:	b29b      	uxth	r3, r3
 8002462:	1c1a      	adds	r2, r3, #0
 8002464:	1c13      	adds	r3, r2, #0
 8002466:	18db      	adds	r3, r3, r3
 8002468:	189b      	adds	r3, r3, r2
 800246a:	18db      	adds	r3, r3, r3
 800246c:	b29a      	uxth	r2, r3
 800246e:	2325      	movs	r3, #37	; 0x25
 8002470:	2118      	movs	r1, #24
 8002472:	468c      	mov	ip, r1
 8002474:	44bc      	add	ip, r7
 8002476:	4463      	add	r3, ip
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	b25b      	sxtb	r3, r3
 800247c:	b29b      	uxth	r3, r3
 800247e:	4958      	ldr	r1, [pc, #352]	; (80025e0 <drawChar+0x310>)
 8002480:	7809      	ldrb	r1, [r1, #0]
 8002482:	b289      	uxth	r1, r1
 8002484:	434b      	muls	r3, r1
 8002486:	b29b      	uxth	r3, r3
 8002488:	18d3      	adds	r3, r2, r3
 800248a:	b29a      	uxth	r2, r3
 800248c:	210e      	movs	r1, #14
 800248e:	2018      	movs	r0, #24
 8002490:	183b      	adds	r3, r7, r0
 8002492:	185b      	adds	r3, r3, r1
 8002494:	801a      	strh	r2, [r3, #0]
							address += rowOffset*k+l;
 8002496:	2322      	movs	r3, #34	; 0x22
 8002498:	2218      	movs	r2, #24
 800249a:	4694      	mov	ip, r2
 800249c:	44bc      	add	ip, r7
 800249e:	4463      	add	r3, ip
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	b25b      	sxtb	r3, r3
 80024a4:	b29b      	uxth	r3, r3
 80024a6:	2226      	movs	r2, #38	; 0x26
 80024a8:	2418      	movs	r4, #24
 80024aa:	46a4      	mov	ip, r4
 80024ac:	44bc      	add	ip, r7
 80024ae:	4462      	add	r2, ip
 80024b0:	8812      	ldrh	r2, [r2, #0]
 80024b2:	4353      	muls	r3, r2
 80024b4:	b29a      	uxth	r2, r3
 80024b6:	2521      	movs	r5, #33	; 0x21
 80024b8:	183b      	adds	r3, r7, r0
 80024ba:	195b      	adds	r3, r3, r5
 80024bc:	781b      	ldrb	r3, [r3, #0]
 80024be:	b25b      	sxtb	r3, r3
 80024c0:	b29b      	uxth	r3, r3
 80024c2:	18d3      	adds	r3, r2, r3
 80024c4:	b29a      	uxth	r2, r3
 80024c6:	183b      	adds	r3, r7, r0
 80024c8:	185b      	adds	r3, r3, r1
 80024ca:	881b      	ldrh	r3, [r3, #0]
 80024cc:	18d3      	adds	r3, r2, r3
 80024ce:	b29a      	uxth	r2, r3
 80024d0:	183b      	adds	r3, r7, r0
 80024d2:	185b      	adds	r3, r3, r1
 80024d4:	801a      	strh	r2, [r3, #0]
							buffer[address] = colorFixer(textColor);
 80024d6:	4b44      	ldr	r3, [pc, #272]	; (80025e8 <drawChar+0x318>)
 80024d8:	881a      	ldrh	r2, [r3, #0]
 80024da:	0006      	movs	r6, r0
 80024dc:	183b      	adds	r3, r7, r0
 80024de:	185b      	adds	r3, r3, r1
 80024e0:	2400      	movs	r4, #0
 80024e2:	5f1c      	ldrsh	r4, [r3, r4]
 80024e4:	0010      	movs	r0, r2
 80024e6:	f7ff fad7 	bl	8001a98 <colorFixer>
 80024ea:	0003      	movs	r3, r0
 80024ec:	0019      	movs	r1, r3
 80024ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024f0:	0062      	lsls	r2, r4, #1
 80024f2:	52d1      	strh	r1, [r2, r3]
						for (int8_t l = 0; l < textSize; l++) {
 80024f4:	19bb      	adds	r3, r7, r6
 80024f6:	195b      	adds	r3, r3, r5
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	b25b      	sxtb	r3, r3
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	3301      	adds	r3, #1
 8002500:	b2da      	uxtb	r2, r3
 8002502:	19bb      	adds	r3, r7, r6
 8002504:	195b      	adds	r3, r3, r5
 8002506:	701a      	strb	r2, [r3, #0]
 8002508:	2321      	movs	r3, #33	; 0x21
 800250a:	2218      	movs	r2, #24
 800250c:	4694      	mov	ip, r2
 800250e:	44bc      	add	ip, r7
 8002510:	4463      	add	r3, ip
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	b25b      	sxtb	r3, r3
 8002516:	4a32      	ldr	r2, [pc, #200]	; (80025e0 <drawChar+0x310>)
 8002518:	7812      	ldrb	r2, [r2, #0]
 800251a:	4293      	cmp	r3, r2
 800251c:	db8f      	blt.n	800243e <drawChar+0x16e>
					for (int8_t k = 0; k < textSize; k++) {
 800251e:	2122      	movs	r1, #34	; 0x22
 8002520:	2018      	movs	r0, #24
 8002522:	183b      	adds	r3, r7, r0
 8002524:	185b      	adds	r3, r3, r1
 8002526:	781b      	ldrb	r3, [r3, #0]
 8002528:	b25b      	sxtb	r3, r3
 800252a:	b2db      	uxtb	r3, r3
 800252c:	3301      	adds	r3, #1
 800252e:	b2da      	uxtb	r2, r3
 8002530:	183b      	adds	r3, r7, r0
 8002532:	185b      	adds	r3, r3, r1
 8002534:	701a      	strb	r2, [r3, #0]
 8002536:	2322      	movs	r3, #34	; 0x22
 8002538:	2218      	movs	r2, #24
 800253a:	4694      	mov	ip, r2
 800253c:	44bc      	add	ip, r7
 800253e:	4463      	add	r3, ip
 8002540:	781b      	ldrb	r3, [r3, #0]
 8002542:	b25b      	sxtb	r3, r3
 8002544:	4a26      	ldr	r2, [pc, #152]	; (80025e0 <drawChar+0x310>)
 8002546:	7812      	ldrb	r2, [r2, #0]
 8002548:	4293      	cmp	r3, r2
 800254a:	da00      	bge.n	800254e <drawChar+0x27e>
 800254c:	e760      	b.n	8002410 <drawChar+0x140>
 800254e:	e0d7      	b.n	8002700 <drawChar+0x430>
						}
					}
//					fillRect(cursorX+i*textSize, cursorY+j*textSize, textSize, textSize, textColor, hspi);
				}
			} else if (bg != textColor) {
 8002550:	4b26      	ldr	r3, [pc, #152]	; (80025ec <drawChar+0x31c>)
 8002552:	881a      	ldrh	r2, [r3, #0]
 8002554:	4b24      	ldr	r3, [pc, #144]	; (80025e8 <drawChar+0x318>)
 8002556:	881b      	ldrh	r3, [r3, #0]
 8002558:	429a      	cmp	r2, r3
 800255a:	d100      	bne.n	800255e <drawChar+0x28e>
 800255c:	e0d0      	b.n	8002700 <drawChar+0x430>
				if (textSize == 1) {
 800255e:	4b20      	ldr	r3, [pc, #128]	; (80025e0 <drawChar+0x310>)
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	2b01      	cmp	r3, #1
 8002564:	d11c      	bne.n	80025a0 <drawChar+0x2d0>
					buffer[i+j*6] = colorFixer(bg);
 8002566:	4b21      	ldr	r3, [pc, #132]	; (80025ec <drawChar+0x31c>)
 8002568:	8818      	ldrh	r0, [r3, #0]
 800256a:	2325      	movs	r3, #37	; 0x25
 800256c:	2218      	movs	r2, #24
 800256e:	4694      	mov	ip, r2
 8002570:	44bc      	add	ip, r7
 8002572:	4463      	add	r3, ip
 8002574:	2100      	movs	r1, #0
 8002576:	5659      	ldrsb	r1, [r3, r1]
 8002578:	2323      	movs	r3, #35	; 0x23
 800257a:	2218      	movs	r2, #24
 800257c:	4694      	mov	ip, r2
 800257e:	44bc      	add	ip, r7
 8002580:	4463      	add	r3, ip
 8002582:	2200      	movs	r2, #0
 8002584:	569a      	ldrsb	r2, [r3, r2]
 8002586:	0013      	movs	r3, r2
 8002588:	005b      	lsls	r3, r3, #1
 800258a:	189b      	adds	r3, r3, r2
 800258c:	005b      	lsls	r3, r3, #1
 800258e:	18cc      	adds	r4, r1, r3
 8002590:	f7ff fa82 	bl	8001a98 <colorFixer>
 8002594:	0003      	movs	r3, r0
 8002596:	0019      	movs	r1, r3
 8002598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800259a:	0062      	lsls	r2, r4, #1
 800259c:	52d1      	strh	r1, [r2, r3]
 800259e:	e0af      	b.n	8002700 <drawChar+0x430>
				}
				else {
					for (int8_t k = 0; k < textSize; k++) {
 80025a0:	2320      	movs	r3, #32
 80025a2:	2218      	movs	r2, #24
 80025a4:	4694      	mov	ip, r2
 80025a6:	44bc      	add	ip, r7
 80025a8:	4463      	add	r3, ip
 80025aa:	2200      	movs	r2, #0
 80025ac:	701a      	strb	r2, [r3, #0]
 80025ae:	e09b      	b.n	80026e8 <drawChar+0x418>
						rowOffset = textSize*6;
 80025b0:	4b0b      	ldr	r3, [pc, #44]	; (80025e0 <drawChar+0x310>)
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	b29b      	uxth	r3, r3
 80025b6:	1c1a      	adds	r2, r3, #0
 80025b8:	1c13      	adds	r3, r2, #0
 80025ba:	18db      	adds	r3, r3, r3
 80025bc:	189b      	adds	r3, r3, r2
 80025be:	18db      	adds	r3, r3, r3
 80025c0:	b29a      	uxth	r2, r3
 80025c2:	2326      	movs	r3, #38	; 0x26
 80025c4:	2118      	movs	r1, #24
 80025c6:	468c      	mov	ip, r1
 80025c8:	44bc      	add	ip, r7
 80025ca:	4463      	add	r3, ip
 80025cc:	801a      	strh	r2, [r3, #0]
						for (int8_t l = 0; l < textSize; l++) {
 80025ce:	231f      	movs	r3, #31
 80025d0:	2218      	movs	r2, #24
 80025d2:	4694      	mov	ip, r2
 80025d4:	44bc      	add	ip, r7
 80025d6:	4463      	add	r3, ip
 80025d8:	2200      	movs	r2, #0
 80025da:	701a      	strb	r2, [r3, #0]
 80025dc:	e06d      	b.n	80026ba <drawChar+0x3ea>
 80025de:	46c0      	nop			; (mov r8, r8)
 80025e0:	200000ee 	.word	0x200000ee
 80025e4:	0800b9c0 	.word	0x0800b9c0
 80025e8:	200000f0 	.word	0x200000f0
 80025ec:	200000f2 	.word	0x200000f2
							address = (textSize*textSize*j*6)+(i*textSize);
 80025f0:	4bda      	ldr	r3, [pc, #872]	; (800295c <drawChar+0x68c>)
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	b29b      	uxth	r3, r3
 80025f6:	4ad9      	ldr	r2, [pc, #868]	; (800295c <drawChar+0x68c>)
 80025f8:	7812      	ldrb	r2, [r2, #0]
 80025fa:	b292      	uxth	r2, r2
 80025fc:	4353      	muls	r3, r2
 80025fe:	b29b      	uxth	r3, r3
 8002600:	2223      	movs	r2, #35	; 0x23
 8002602:	2118      	movs	r1, #24
 8002604:	468c      	mov	ip, r1
 8002606:	44bc      	add	ip, r7
 8002608:	4462      	add	r2, ip
 800260a:	7812      	ldrb	r2, [r2, #0]
 800260c:	b252      	sxtb	r2, r2
 800260e:	b292      	uxth	r2, r2
 8002610:	4353      	muls	r3, r2
 8002612:	b29b      	uxth	r3, r3
 8002614:	1c1a      	adds	r2, r3, #0
 8002616:	1c13      	adds	r3, r2, #0
 8002618:	18db      	adds	r3, r3, r3
 800261a:	189b      	adds	r3, r3, r2
 800261c:	18db      	adds	r3, r3, r3
 800261e:	b29a      	uxth	r2, r3
 8002620:	2325      	movs	r3, #37	; 0x25
 8002622:	2118      	movs	r1, #24
 8002624:	468c      	mov	ip, r1
 8002626:	44bc      	add	ip, r7
 8002628:	4463      	add	r3, ip
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	b25b      	sxtb	r3, r3
 800262e:	b29b      	uxth	r3, r3
 8002630:	49ca      	ldr	r1, [pc, #808]	; (800295c <drawChar+0x68c>)
 8002632:	7809      	ldrb	r1, [r1, #0]
 8002634:	b289      	uxth	r1, r1
 8002636:	434b      	muls	r3, r1
 8002638:	b29b      	uxth	r3, r3
 800263a:	18d3      	adds	r3, r2, r3
 800263c:	b29a      	uxth	r2, r3
 800263e:	210e      	movs	r1, #14
 8002640:	2018      	movs	r0, #24
 8002642:	183b      	adds	r3, r7, r0
 8002644:	185b      	adds	r3, r3, r1
 8002646:	801a      	strh	r2, [r3, #0]
							address += rowOffset*k+l;
 8002648:	2320      	movs	r3, #32
 800264a:	2218      	movs	r2, #24
 800264c:	4694      	mov	ip, r2
 800264e:	44bc      	add	ip, r7
 8002650:	4463      	add	r3, ip
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	b25b      	sxtb	r3, r3
 8002656:	b29b      	uxth	r3, r3
 8002658:	2226      	movs	r2, #38	; 0x26
 800265a:	2418      	movs	r4, #24
 800265c:	46a4      	mov	ip, r4
 800265e:	44bc      	add	ip, r7
 8002660:	4462      	add	r2, ip
 8002662:	8812      	ldrh	r2, [r2, #0]
 8002664:	4353      	muls	r3, r2
 8002666:	b29a      	uxth	r2, r3
 8002668:	251f      	movs	r5, #31
 800266a:	183b      	adds	r3, r7, r0
 800266c:	195b      	adds	r3, r3, r5
 800266e:	781b      	ldrb	r3, [r3, #0]
 8002670:	b25b      	sxtb	r3, r3
 8002672:	b29b      	uxth	r3, r3
 8002674:	18d3      	adds	r3, r2, r3
 8002676:	b29a      	uxth	r2, r3
 8002678:	183b      	adds	r3, r7, r0
 800267a:	185b      	adds	r3, r3, r1
 800267c:	881b      	ldrh	r3, [r3, #0]
 800267e:	18d3      	adds	r3, r2, r3
 8002680:	b29a      	uxth	r2, r3
 8002682:	183b      	adds	r3, r7, r0
 8002684:	185b      	adds	r3, r3, r1
 8002686:	801a      	strh	r2, [r3, #0]
							buffer[address] = colorFixer(bg);
 8002688:	4bb5      	ldr	r3, [pc, #724]	; (8002960 <drawChar+0x690>)
 800268a:	881a      	ldrh	r2, [r3, #0]
 800268c:	0006      	movs	r6, r0
 800268e:	183b      	adds	r3, r7, r0
 8002690:	185b      	adds	r3, r3, r1
 8002692:	2400      	movs	r4, #0
 8002694:	5f1c      	ldrsh	r4, [r3, r4]
 8002696:	0010      	movs	r0, r2
 8002698:	f7ff f9fe 	bl	8001a98 <colorFixer>
 800269c:	0003      	movs	r3, r0
 800269e:	0019      	movs	r1, r3
 80026a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026a2:	0062      	lsls	r2, r4, #1
 80026a4:	52d1      	strh	r1, [r2, r3]
						for (int8_t l = 0; l < textSize; l++) {
 80026a6:	19bb      	adds	r3, r7, r6
 80026a8:	195b      	adds	r3, r3, r5
 80026aa:	781b      	ldrb	r3, [r3, #0]
 80026ac:	b25b      	sxtb	r3, r3
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	3301      	adds	r3, #1
 80026b2:	b2da      	uxtb	r2, r3
 80026b4:	19bb      	adds	r3, r7, r6
 80026b6:	195b      	adds	r3, r3, r5
 80026b8:	701a      	strb	r2, [r3, #0]
 80026ba:	231f      	movs	r3, #31
 80026bc:	2218      	movs	r2, #24
 80026be:	4694      	mov	ip, r2
 80026c0:	44bc      	add	ip, r7
 80026c2:	4463      	add	r3, ip
 80026c4:	781b      	ldrb	r3, [r3, #0]
 80026c6:	b25b      	sxtb	r3, r3
 80026c8:	4aa4      	ldr	r2, [pc, #656]	; (800295c <drawChar+0x68c>)
 80026ca:	7812      	ldrb	r2, [r2, #0]
 80026cc:	4293      	cmp	r3, r2
 80026ce:	db8f      	blt.n	80025f0 <drawChar+0x320>
					for (int8_t k = 0; k < textSize; k++) {
 80026d0:	2120      	movs	r1, #32
 80026d2:	2018      	movs	r0, #24
 80026d4:	183b      	adds	r3, r7, r0
 80026d6:	185b      	adds	r3, r3, r1
 80026d8:	781b      	ldrb	r3, [r3, #0]
 80026da:	b25b      	sxtb	r3, r3
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	3301      	adds	r3, #1
 80026e0:	b2da      	uxtb	r2, r3
 80026e2:	183b      	adds	r3, r7, r0
 80026e4:	185b      	adds	r3, r3, r1
 80026e6:	701a      	strb	r2, [r3, #0]
 80026e8:	2320      	movs	r3, #32
 80026ea:	2218      	movs	r2, #24
 80026ec:	4694      	mov	ip, r2
 80026ee:	44bc      	add	ip, r7
 80026f0:	4463      	add	r3, ip
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	b25b      	sxtb	r3, r3
 80026f6:	4a99      	ldr	r2, [pc, #612]	; (800295c <drawChar+0x68c>)
 80026f8:	7812      	ldrb	r2, [r2, #0]
 80026fa:	4293      	cmp	r3, r2
 80026fc:	da00      	bge.n	8002700 <drawChar+0x430>
 80026fe:	e757      	b.n	80025b0 <drawChar+0x2e0>
		for (int8_t j=0; j<8; j++, line >>= 1) {
 8002700:	2123      	movs	r1, #35	; 0x23
 8002702:	2018      	movs	r0, #24
 8002704:	183b      	adds	r3, r7, r0
 8002706:	185b      	adds	r3, r3, r1
 8002708:	781b      	ldrb	r3, [r3, #0]
 800270a:	b25b      	sxtb	r3, r3
 800270c:	b2db      	uxtb	r3, r3
 800270e:	3301      	adds	r3, #1
 8002710:	b2da      	uxtb	r2, r3
 8002712:	183b      	adds	r3, r7, r0
 8002714:	185b      	adds	r3, r3, r1
 8002716:	701a      	strb	r2, [r3, #0]
 8002718:	2224      	movs	r2, #36	; 0x24
 800271a:	183b      	adds	r3, r7, r0
 800271c:	189b      	adds	r3, r3, r2
 800271e:	2118      	movs	r1, #24
 8002720:	468c      	mov	ip, r1
 8002722:	44bc      	add	ip, r7
 8002724:	4462      	add	r2, ip
 8002726:	7812      	ldrb	r2, [r2, #0]
 8002728:	0852      	lsrs	r2, r2, #1
 800272a:	701a      	strb	r2, [r3, #0]
 800272c:	2323      	movs	r3, #35	; 0x23
 800272e:	2218      	movs	r2, #24
 8002730:	4694      	mov	ip, r2
 8002732:	44bc      	add	ip, r7
 8002734:	4463      	add	r3, ip
 8002736:	781b      	ldrb	r3, [r3, #0]
 8002738:	b25b      	sxtb	r3, r3
 800273a:	2b07      	cmp	r3, #7
 800273c:	dc00      	bgt.n	8002740 <drawChar+0x470>
 800273e:	e634      	b.n	80023aa <drawChar+0xda>
	for (int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
 8002740:	2125      	movs	r1, #37	; 0x25
 8002742:	2018      	movs	r0, #24
 8002744:	183b      	adds	r3, r7, r0
 8002746:	185b      	adds	r3, r3, r1
 8002748:	781b      	ldrb	r3, [r3, #0]
 800274a:	b25b      	sxtb	r3, r3
 800274c:	b2db      	uxtb	r3, r3
 800274e:	3301      	adds	r3, #1
 8002750:	b2da      	uxtb	r2, r3
 8002752:	183b      	adds	r3, r7, r0
 8002754:	185b      	adds	r3, r3, r1
 8002756:	701a      	strb	r2, [r3, #0]
 8002758:	2325      	movs	r3, #37	; 0x25
 800275a:	2218      	movs	r2, #24
 800275c:	4694      	mov	ip, r2
 800275e:	44bc      	add	ip, r7
 8002760:	4463      	add	r3, ip
 8002762:	781b      	ldrb	r3, [r3, #0]
 8002764:	b25b      	sxtb	r3, r3
 8002766:	2b04      	cmp	r3, #4
 8002768:	dc00      	bgt.n	800276c <drawChar+0x49c>
 800276a:	e600      	b.n	800236e <drawChar+0x9e>
				}
			}
		}
	}

	if (bg != textColor) { // If opaque, draw vertical line for last column
 800276c:	4b7c      	ldr	r3, [pc, #496]	; (8002960 <drawChar+0x690>)
 800276e:	881a      	ldrh	r2, [r3, #0]
 8002770:	4b7c      	ldr	r3, [pc, #496]	; (8002964 <drawChar+0x694>)
 8002772:	881b      	ldrh	r3, [r3, #0]
 8002774:	429a      	cmp	r2, r3
 8002776:	d100      	bne.n	800277a <drawChar+0x4aa>
 8002778:	e0ca      	b.n	8002910 <drawChar+0x640>
		for (int8_t j = 0; j < 8; j++) {
 800277a:	231e      	movs	r3, #30
 800277c:	2218      	movs	r2, #24
 800277e:	4694      	mov	ip, r2
 8002780:	44bc      	add	ip, r7
 8002782:	4463      	add	r3, ip
 8002784:	2200      	movs	r2, #0
 8002786:	701a      	strb	r2, [r3, #0]
 8002788:	e0b8      	b.n	80028fc <drawChar+0x62c>
			if (textSize == 1) {
 800278a:	4b74      	ldr	r3, [pc, #464]	; (800295c <drawChar+0x68c>)
 800278c:	781b      	ldrb	r3, [r3, #0]
 800278e:	2b01      	cmp	r3, #1
 8002790:	d116      	bne.n	80027c0 <drawChar+0x4f0>
				buffer[5+j*6] = colorFixer(bg);
 8002792:	4b73      	ldr	r3, [pc, #460]	; (8002960 <drawChar+0x690>)
 8002794:	8819      	ldrh	r1, [r3, #0]
 8002796:	231e      	movs	r3, #30
 8002798:	2218      	movs	r2, #24
 800279a:	4694      	mov	ip, r2
 800279c:	44bc      	add	ip, r7
 800279e:	4463      	add	r3, ip
 80027a0:	2200      	movs	r2, #0
 80027a2:	569a      	ldrsb	r2, [r3, r2]
 80027a4:	0013      	movs	r3, r2
 80027a6:	005b      	lsls	r3, r3, #1
 80027a8:	189b      	adds	r3, r3, r2
 80027aa:	005b      	lsls	r3, r3, #1
 80027ac:	1d5c      	adds	r4, r3, #5
 80027ae:	0008      	movs	r0, r1
 80027b0:	f7ff f972 	bl	8001a98 <colorFixer>
 80027b4:	0003      	movs	r3, r0
 80027b6:	0019      	movs	r1, r3
 80027b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027ba:	0062      	lsls	r2, r4, #1
 80027bc:	52d1      	strh	r1, [r2, r3]
 80027be:	e091      	b.n	80028e4 <drawChar+0x614>
			}
			else {
				for (int8_t k = 0; k < textSize; k++) {
 80027c0:	231d      	movs	r3, #29
 80027c2:	2218      	movs	r2, #24
 80027c4:	4694      	mov	ip, r2
 80027c6:	44bc      	add	ip, r7
 80027c8:	4463      	add	r3, ip
 80027ca:	2200      	movs	r2, #0
 80027cc:	701a      	strb	r2, [r3, #0]
 80027ce:	e07d      	b.n	80028cc <drawChar+0x5fc>
					for (int8_t l = 0; l < textSize; l++) {
 80027d0:	231c      	movs	r3, #28
 80027d2:	2218      	movs	r2, #24
 80027d4:	4694      	mov	ip, r2
 80027d6:	44bc      	add	ip, r7
 80027d8:	4463      	add	r3, ip
 80027da:	2200      	movs	r2, #0
 80027dc:	701a      	strb	r2, [r3, #0]
 80027de:	e05e      	b.n	800289e <drawChar+0x5ce>
						address = (textSize*textSize*j*6)+(5*textSize);
 80027e0:	4b5e      	ldr	r3, [pc, #376]	; (800295c <drawChar+0x68c>)
 80027e2:	781b      	ldrb	r3, [r3, #0]
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	4a5d      	ldr	r2, [pc, #372]	; (800295c <drawChar+0x68c>)
 80027e8:	7812      	ldrb	r2, [r2, #0]
 80027ea:	b292      	uxth	r2, r2
 80027ec:	4353      	muls	r3, r2
 80027ee:	b29b      	uxth	r3, r3
 80027f0:	221e      	movs	r2, #30
 80027f2:	2118      	movs	r1, #24
 80027f4:	468c      	mov	ip, r1
 80027f6:	44bc      	add	ip, r7
 80027f8:	4462      	add	r2, ip
 80027fa:	7812      	ldrb	r2, [r2, #0]
 80027fc:	b252      	sxtb	r2, r2
 80027fe:	b292      	uxth	r2, r2
 8002800:	4353      	muls	r3, r2
 8002802:	b29b      	uxth	r3, r3
 8002804:	1c1a      	adds	r2, r3, #0
 8002806:	1c13      	adds	r3, r2, #0
 8002808:	18db      	adds	r3, r3, r3
 800280a:	189b      	adds	r3, r3, r2
 800280c:	18db      	adds	r3, r3, r3
 800280e:	b29a      	uxth	r2, r3
 8002810:	4b52      	ldr	r3, [pc, #328]	; (800295c <drawChar+0x68c>)
 8002812:	781b      	ldrb	r3, [r3, #0]
 8002814:	b29b      	uxth	r3, r3
 8002816:	1c19      	adds	r1, r3, #0
 8002818:	0089      	lsls	r1, r1, #2
 800281a:	18cb      	adds	r3, r1, r3
 800281c:	b29b      	uxth	r3, r3
 800281e:	18d3      	adds	r3, r2, r3
 8002820:	b29a      	uxth	r2, r3
 8002822:	210e      	movs	r1, #14
 8002824:	2018      	movs	r0, #24
 8002826:	183b      	adds	r3, r7, r0
 8002828:	185b      	adds	r3, r3, r1
 800282a:	801a      	strh	r2, [r3, #0]
						address += rowOffset*k+l;
 800282c:	231d      	movs	r3, #29
 800282e:	2218      	movs	r2, #24
 8002830:	4694      	mov	ip, r2
 8002832:	44bc      	add	ip, r7
 8002834:	4463      	add	r3, ip
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	b25b      	sxtb	r3, r3
 800283a:	b29b      	uxth	r3, r3
 800283c:	2226      	movs	r2, #38	; 0x26
 800283e:	2418      	movs	r4, #24
 8002840:	46a4      	mov	ip, r4
 8002842:	44bc      	add	ip, r7
 8002844:	4462      	add	r2, ip
 8002846:	8812      	ldrh	r2, [r2, #0]
 8002848:	4353      	muls	r3, r2
 800284a:	b29a      	uxth	r2, r3
 800284c:	251c      	movs	r5, #28
 800284e:	183b      	adds	r3, r7, r0
 8002850:	195b      	adds	r3, r3, r5
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	b25b      	sxtb	r3, r3
 8002856:	b29b      	uxth	r3, r3
 8002858:	18d3      	adds	r3, r2, r3
 800285a:	b29a      	uxth	r2, r3
 800285c:	183b      	adds	r3, r7, r0
 800285e:	185b      	adds	r3, r3, r1
 8002860:	881b      	ldrh	r3, [r3, #0]
 8002862:	18d3      	adds	r3, r2, r3
 8002864:	b29a      	uxth	r2, r3
 8002866:	183b      	adds	r3, r7, r0
 8002868:	185b      	adds	r3, r3, r1
 800286a:	801a      	strh	r2, [r3, #0]
						buffer[address] = colorFixer(bg);
 800286c:	4b3c      	ldr	r3, [pc, #240]	; (8002960 <drawChar+0x690>)
 800286e:	881a      	ldrh	r2, [r3, #0]
 8002870:	0006      	movs	r6, r0
 8002872:	183b      	adds	r3, r7, r0
 8002874:	185b      	adds	r3, r3, r1
 8002876:	2400      	movs	r4, #0
 8002878:	5f1c      	ldrsh	r4, [r3, r4]
 800287a:	0010      	movs	r0, r2
 800287c:	f7ff f90c 	bl	8001a98 <colorFixer>
 8002880:	0003      	movs	r3, r0
 8002882:	0019      	movs	r1, r3
 8002884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002886:	0062      	lsls	r2, r4, #1
 8002888:	52d1      	strh	r1, [r2, r3]
					for (int8_t l = 0; l < textSize; l++) {
 800288a:	19bb      	adds	r3, r7, r6
 800288c:	195b      	adds	r3, r3, r5
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	b25b      	sxtb	r3, r3
 8002892:	b2db      	uxtb	r3, r3
 8002894:	3301      	adds	r3, #1
 8002896:	b2da      	uxtb	r2, r3
 8002898:	19bb      	adds	r3, r7, r6
 800289a:	195b      	adds	r3, r3, r5
 800289c:	701a      	strb	r2, [r3, #0]
 800289e:	231c      	movs	r3, #28
 80028a0:	2218      	movs	r2, #24
 80028a2:	4694      	mov	ip, r2
 80028a4:	44bc      	add	ip, r7
 80028a6:	4463      	add	r3, ip
 80028a8:	781b      	ldrb	r3, [r3, #0]
 80028aa:	b25b      	sxtb	r3, r3
 80028ac:	4a2b      	ldr	r2, [pc, #172]	; (800295c <drawChar+0x68c>)
 80028ae:	7812      	ldrb	r2, [r2, #0]
 80028b0:	4293      	cmp	r3, r2
 80028b2:	db95      	blt.n	80027e0 <drawChar+0x510>
				for (int8_t k = 0; k < textSize; k++) {
 80028b4:	211d      	movs	r1, #29
 80028b6:	2018      	movs	r0, #24
 80028b8:	183b      	adds	r3, r7, r0
 80028ba:	185b      	adds	r3, r3, r1
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	b25b      	sxtb	r3, r3
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	3301      	adds	r3, #1
 80028c4:	b2da      	uxtb	r2, r3
 80028c6:	183b      	adds	r3, r7, r0
 80028c8:	185b      	adds	r3, r3, r1
 80028ca:	701a      	strb	r2, [r3, #0]
 80028cc:	231d      	movs	r3, #29
 80028ce:	2218      	movs	r2, #24
 80028d0:	4694      	mov	ip, r2
 80028d2:	44bc      	add	ip, r7
 80028d4:	4463      	add	r3, ip
 80028d6:	781b      	ldrb	r3, [r3, #0]
 80028d8:	b25b      	sxtb	r3, r3
 80028da:	4a20      	ldr	r2, [pc, #128]	; (800295c <drawChar+0x68c>)
 80028dc:	7812      	ldrb	r2, [r2, #0]
 80028de:	4293      	cmp	r3, r2
 80028e0:	da00      	bge.n	80028e4 <drawChar+0x614>
 80028e2:	e775      	b.n	80027d0 <drawChar+0x500>
		for (int8_t j = 0; j < 8; j++) {
 80028e4:	211e      	movs	r1, #30
 80028e6:	2018      	movs	r0, #24
 80028e8:	183b      	adds	r3, r7, r0
 80028ea:	185b      	adds	r3, r3, r1
 80028ec:	781b      	ldrb	r3, [r3, #0]
 80028ee:	b25b      	sxtb	r3, r3
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	3301      	adds	r3, #1
 80028f4:	b2da      	uxtb	r2, r3
 80028f6:	183b      	adds	r3, r7, r0
 80028f8:	185b      	adds	r3, r3, r1
 80028fa:	701a      	strb	r2, [r3, #0]
 80028fc:	231e      	movs	r3, #30
 80028fe:	2218      	movs	r2, #24
 8002900:	4694      	mov	ip, r2
 8002902:	44bc      	add	ip, r7
 8002904:	4463      	add	r3, ip
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	b25b      	sxtb	r3, r3
 800290a:	2b07      	cmp	r3, #7
 800290c:	dc00      	bgt.n	8002910 <drawChar+0x640>
 800290e:	e73c      	b.n	800278a <drawChar+0x4ba>
			}
		}
//		else fillRect(cursorX+5*textSize, cursorY, textSize, 8*textSize, bg, hspi);
	}

	drawBuffer(cursorX, cursorY, 6*textSize, 8*textSize, buffer, bufferSize, hspi);
 8002910:	4b15      	ldr	r3, [pc, #84]	; (8002968 <drawChar+0x698>)
 8002912:	7818      	ldrb	r0, [r3, #0]
 8002914:	4b15      	ldr	r3, [pc, #84]	; (800296c <drawChar+0x69c>)
 8002916:	7819      	ldrb	r1, [r3, #0]
 8002918:	4b10      	ldr	r3, [pc, #64]	; (800295c <drawChar+0x68c>)
 800291a:	781b      	ldrb	r3, [r3, #0]
 800291c:	1c1a      	adds	r2, r3, #0
 800291e:	1c13      	adds	r3, r2, #0
 8002920:	18db      	adds	r3, r3, r3
 8002922:	189b      	adds	r3, r3, r2
 8002924:	18db      	adds	r3, r3, r3
 8002926:	b2dc      	uxtb	r4, r3
 8002928:	4b0c      	ldr	r3, [pc, #48]	; (800295c <drawChar+0x68c>)
 800292a:	781b      	ldrb	r3, [r3, #0]
 800292c:	00db      	lsls	r3, r3, #3
 800292e:	b2dd      	uxtb	r5, r3
 8002930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002932:	69ba      	ldr	r2, [r7, #24]
 8002934:	9202      	str	r2, [sp, #8]
 8002936:	221a      	movs	r2, #26
 8002938:	2618      	movs	r6, #24
 800293a:	46b4      	mov	ip, r6
 800293c:	44bc      	add	ip, r7
 800293e:	4462      	add	r2, ip
 8002940:	8812      	ldrh	r2, [r2, #0]
 8002942:	9201      	str	r2, [sp, #4]
 8002944:	9300      	str	r3, [sp, #0]
 8002946:	002b      	movs	r3, r5
 8002948:	0022      	movs	r2, r4
 800294a:	f7ff fa16 	bl	8001d7a <drawBuffer>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	469d      	mov	sp, r3
//	setCursor(cursorX+6, cursorY);
}
 8002952:	46c0      	nop			; (mov r8, r8)
 8002954:	46bd      	mov	sp, r7
 8002956:	b011      	add	sp, #68	; 0x44
 8002958:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800295a:	46c0      	nop			; (mov r8, r8)
 800295c:	200000ee 	.word	0x200000ee
 8002960:	200000f2 	.word	0x200000f2
 8002964:	200000f0 	.word	0x200000f0
 8002968:	200000ec 	.word	0x200000ec
 800296c:	200000ed 	.word	0x200000ed

08002970 <drawText>:

// this function is slow, and you can definitely see a scrolling speed thing going on
// how to remove this so it prints near instantly?
// maybe not needed if all we're doing is printing time (very few characters)
void drawText(const char *str, SPI_HandleTypeDef *hspi) {
 8002970:	b580      	push	{r7, lr}
 8002972:	b084      	sub	sp, #16
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
 8002978:	6039      	str	r1, [r7, #0]
	// add text wrap
	for (int i = 0; str[i] != '\0'; i++) {
 800297a:	2300      	movs	r3, #0
 800297c:	60fb      	str	r3, [r7, #12]
 800297e:	e01d      	b.n	80029bc <drawText+0x4c>
		drawChar(str[i], hspi);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	18d3      	adds	r3, r2, r3
 8002986:	781b      	ldrb	r3, [r3, #0]
 8002988:	683a      	ldr	r2, [r7, #0]
 800298a:	0011      	movs	r1, r2
 800298c:	0018      	movs	r0, r3
 800298e:	f7ff fc9f 	bl	80022d0 <drawChar>
		setCursor(cursorX+textSize*6, cursorY);
 8002992:	4b0f      	ldr	r3, [pc, #60]	; (80029d0 <drawText+0x60>)
 8002994:	781b      	ldrb	r3, [r3, #0]
 8002996:	1c1a      	adds	r2, r3, #0
 8002998:	1c13      	adds	r3, r2, #0
 800299a:	18db      	adds	r3, r3, r3
 800299c:	189b      	adds	r3, r3, r2
 800299e:	18db      	adds	r3, r3, r3
 80029a0:	b2da      	uxtb	r2, r3
 80029a2:	4b0c      	ldr	r3, [pc, #48]	; (80029d4 <drawText+0x64>)
 80029a4:	781b      	ldrb	r3, [r3, #0]
 80029a6:	18d3      	adds	r3, r2, r3
 80029a8:	b2da      	uxtb	r2, r3
 80029aa:	4b0b      	ldr	r3, [pc, #44]	; (80029d8 <drawText+0x68>)
 80029ac:	781b      	ldrb	r3, [r3, #0]
 80029ae:	0019      	movs	r1, r3
 80029b0:	0010      	movs	r0, r2
 80029b2:	f000 f86b 	bl	8002a8c <setCursor>
	for (int i = 0; str[i] != '\0'; i++) {
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	3301      	adds	r3, #1
 80029ba:	60fb      	str	r3, [r7, #12]
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	687a      	ldr	r2, [r7, #4]
 80029c0:	18d3      	adds	r3, r2, r3
 80029c2:	781b      	ldrb	r3, [r3, #0]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d1db      	bne.n	8002980 <drawText+0x10>
	}
}
 80029c8:	46c0      	nop			; (mov r8, r8)
 80029ca:	46bd      	mov	sp, r7
 80029cc:	b004      	add	sp, #16
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	200000ee 	.word	0x200000ee
 80029d4:	200000ec 	.word	0x200000ec
 80029d8:	200000ed 	.word	0x200000ed

080029dc <drawTextAt>:

void drawTextAt(uint8_t x, uint8_t y, const char *str, SPI_HandleTypeDef *hspi) {
 80029dc:	b590      	push	{r4, r7, lr}
 80029de:	b087      	sub	sp, #28
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	60ba      	str	r2, [r7, #8]
 80029e4:	607b      	str	r3, [r7, #4]
 80029e6:	240f      	movs	r4, #15
 80029e8:	193b      	adds	r3, r7, r4
 80029ea:	1c02      	adds	r2, r0, #0
 80029ec:	701a      	strb	r2, [r3, #0]
 80029ee:	200e      	movs	r0, #14
 80029f0:	183b      	adds	r3, r7, r0
 80029f2:	1c0a      	adds	r2, r1, #0
 80029f4:	701a      	strb	r2, [r3, #0]
	// add text wrap
	int i = 0;
 80029f6:	2300      	movs	r3, #0
 80029f8:	617b      	str	r3, [r7, #20]
	setCursor(x,y);
 80029fa:	183b      	adds	r3, r7, r0
 80029fc:	781a      	ldrb	r2, [r3, #0]
 80029fe:	193b      	adds	r3, r7, r4
 8002a00:	781b      	ldrb	r3, [r3, #0]
 8002a02:	0011      	movs	r1, r2
 8002a04:	0018      	movs	r0, r3
 8002a06:	f000 f841 	bl	8002a8c <setCursor>
	for (i = 0; str[i] != '\0'; i++) {
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	617b      	str	r3, [r7, #20]
 8002a0e:	e01d      	b.n	8002a4c <drawTextAt+0x70>
		drawChar(str[i], hspi);
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	68ba      	ldr	r2, [r7, #8]
 8002a14:	18d3      	adds	r3, r2, r3
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	687a      	ldr	r2, [r7, #4]
 8002a1a:	0011      	movs	r1, r2
 8002a1c:	0018      	movs	r0, r3
 8002a1e:	f7ff fc57 	bl	80022d0 <drawChar>
		setCursor(cursorX+textSize*6, cursorY);
 8002a22:	4b0f      	ldr	r3, [pc, #60]	; (8002a60 <drawTextAt+0x84>)
 8002a24:	781b      	ldrb	r3, [r3, #0]
 8002a26:	1c1a      	adds	r2, r3, #0
 8002a28:	1c13      	adds	r3, r2, #0
 8002a2a:	18db      	adds	r3, r3, r3
 8002a2c:	189b      	adds	r3, r3, r2
 8002a2e:	18db      	adds	r3, r3, r3
 8002a30:	b2da      	uxtb	r2, r3
 8002a32:	4b0c      	ldr	r3, [pc, #48]	; (8002a64 <drawTextAt+0x88>)
 8002a34:	781b      	ldrb	r3, [r3, #0]
 8002a36:	18d3      	adds	r3, r2, r3
 8002a38:	b2da      	uxtb	r2, r3
 8002a3a:	4b0b      	ldr	r3, [pc, #44]	; (8002a68 <drawTextAt+0x8c>)
 8002a3c:	781b      	ldrb	r3, [r3, #0]
 8002a3e:	0019      	movs	r1, r3
 8002a40:	0010      	movs	r0, r2
 8002a42:	f000 f823 	bl	8002a8c <setCursor>
	for (i = 0; str[i] != '\0'; i++) {
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	3301      	adds	r3, #1
 8002a4a:	617b      	str	r3, [r7, #20]
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	68ba      	ldr	r2, [r7, #8]
 8002a50:	18d3      	adds	r3, r2, r3
 8002a52:	781b      	ldrb	r3, [r3, #0]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d1db      	bne.n	8002a10 <drawTextAt+0x34>
	}
//	setCursor(x+i*textSize*6, y);
}
 8002a58:	46c0      	nop			; (mov r8, r8)
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	b007      	add	sp, #28
 8002a5e:	bd90      	pop	{r4, r7, pc}
 8002a60:	200000ee 	.word	0x200000ee
 8002a64:	200000ec 	.word	0x200000ec
 8002a68:	200000ed 	.word	0x200000ed

08002a6c <setBackgroundColor>:

void setBackgroundColor(uint16_t color) {bg = color;}
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b082      	sub	sp, #8
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	0002      	movs	r2, r0
 8002a74:	1dbb      	adds	r3, r7, #6
 8002a76:	801a      	strh	r2, [r3, #0]
 8002a78:	4b03      	ldr	r3, [pc, #12]	; (8002a88 <setBackgroundColor+0x1c>)
 8002a7a:	1dba      	adds	r2, r7, #6
 8002a7c:	8812      	ldrh	r2, [r2, #0]
 8002a7e:	801a      	strh	r2, [r3, #0]
 8002a80:	46c0      	nop			; (mov r8, r8)
 8002a82:	46bd      	mov	sp, r7
 8002a84:	b002      	add	sp, #8
 8002a86:	bd80      	pop	{r7, pc}
 8002a88:	200000f2 	.word	0x200000f2

08002a8c <setCursor>:

void setCursor(uint8_t x, uint8_t y) {
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b082      	sub	sp, #8
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	0002      	movs	r2, r0
 8002a94:	1dfb      	adds	r3, r7, #7
 8002a96:	701a      	strb	r2, [r3, #0]
 8002a98:	1dbb      	adds	r3, r7, #6
 8002a9a:	1c0a      	adds	r2, r1, #0
 8002a9c:	701a      	strb	r2, [r3, #0]
	cursorX = x;
 8002a9e:	4b06      	ldr	r3, [pc, #24]	; (8002ab8 <setCursor+0x2c>)
 8002aa0:	1dfa      	adds	r2, r7, #7
 8002aa2:	7812      	ldrb	r2, [r2, #0]
 8002aa4:	701a      	strb	r2, [r3, #0]
	cursorY = y;
 8002aa6:	4b05      	ldr	r3, [pc, #20]	; (8002abc <setCursor+0x30>)
 8002aa8:	1dba      	adds	r2, r7, #6
 8002aaa:	7812      	ldrb	r2, [r2, #0]
 8002aac:	701a      	strb	r2, [r3, #0]
}
 8002aae:	46c0      	nop			; (mov r8, r8)
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	b002      	add	sp, #8
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	46c0      	nop			; (mov r8, r8)
 8002ab8:	200000ec 	.word	0x200000ec
 8002abc:	200000ed 	.word	0x200000ed

08002ac0 <setTextSize>:

void setTextSize(uint8_t size) {textSize = size;}
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b082      	sub	sp, #8
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	0002      	movs	r2, r0
 8002ac8:	1dfb      	adds	r3, r7, #7
 8002aca:	701a      	strb	r2, [r3, #0]
 8002acc:	4b03      	ldr	r3, [pc, #12]	; (8002adc <setTextSize+0x1c>)
 8002ace:	1dfa      	adds	r2, r7, #7
 8002ad0:	7812      	ldrb	r2, [r2, #0]
 8002ad2:	701a      	strb	r2, [r3, #0]
 8002ad4:	46c0      	nop			; (mov r8, r8)
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	b002      	add	sp, #8
 8002ada:	bd80      	pop	{r7, pc}
 8002adc:	200000ee 	.word	0x200000ee

08002ae0 <setTextColor>:

void setTextColor(uint16_t color) {textColor = color;}
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b082      	sub	sp, #8
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	0002      	movs	r2, r0
 8002ae8:	1dbb      	adds	r3, r7, #6
 8002aea:	801a      	strh	r2, [r3, #0]
 8002aec:	4b03      	ldr	r3, [pc, #12]	; (8002afc <setTextColor+0x1c>)
 8002aee:	1dba      	adds	r2, r7, #6
 8002af0:	8812      	ldrh	r2, [r2, #0]
 8002af2:	801a      	strh	r2, [r3, #0]
 8002af4:	46c0      	nop			; (mov r8, r8)
 8002af6:	46bd      	mov	sp, r7
 8002af8:	b002      	add	sp, #8
 8002afa:	bd80      	pop	{r7, pc}
 8002afc:	200000f0 	.word	0x200000f0

08002b00 <clearScreen>:

void clearScreen(uint16_t backgroundColor, SPI_HandleTypeDef *hspi) {
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b082      	sub	sp, #8
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	0002      	movs	r2, r0
 8002b08:	6039      	str	r1, [r7, #0]
 8002b0a:	1dbb      	adds	r3, r7, #6
 8002b0c:	801a      	strh	r2, [r3, #0]
	bg = backgroundColor;
 8002b0e:	4b07      	ldr	r3, [pc, #28]	; (8002b2c <clearScreen+0x2c>)
 8002b10:	1dba      	adds	r2, r7, #6
 8002b12:	8812      	ldrh	r2, [r2, #0]
 8002b14:	801a      	strh	r2, [r3, #0]
	fillScreen(backgroundColor, hspi);
 8002b16:	683a      	ldr	r2, [r7, #0]
 8002b18:	1dbb      	adds	r3, r7, #6
 8002b1a:	881b      	ldrh	r3, [r3, #0]
 8002b1c:	0011      	movs	r1, r2
 8002b1e:	0018      	movs	r0, r3
 8002b20:	f7ff fa01 	bl	8001f26 <fillScreen>
}
 8002b24:	46c0      	nop			; (mov r8, r8)
 8002b26:	46bd      	mov	sp, r7
 8002b28:	b002      	add	sp, #8
 8002b2a:	bd80      	pop	{r7, pc}
 8002b2c:	200000f2 	.word	0x200000f2

08002b30 <batteryManager>:
static const float batteryCapacity[];
static uint16_t batteryCapacityArraySize = 179;

// spi used to turn display on/off only
// also for drawing battery
void batteryManager(ADC_HandleTypeDef *hadc, SPI_HandleTypeDef *hspi) {
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b082      	sub	sp, #8
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
 8002b38:	6039      	str	r1, [r7, #0]
	if (canSampleBattery) {
 8002b3a:	4b24      	ldr	r3, [pc, #144]	; (8002bcc <batteryManager+0x9c>)
 8002b3c:	781b      	ldrb	r3, [r3, #0]
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d03f      	beq.n	8002bc4 <batteryManager+0x94>
		canSampleBattery = 0;
 8002b44:	4b21      	ldr	r3, [pc, #132]	; (8002bcc <batteryManager+0x9c>)
 8002b46:	2200      	movs	r2, #0
 8002b48:	701a      	strb	r2, [r3, #0]

		battPercentage = getBatteryPercentage(hadc);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	0018      	movs	r0, r3
 8002b4e:	f000 f845 	bl	8002bdc <getBatteryPercentage>
 8002b52:	0003      	movs	r3, r0
 8002b54:	001a      	movs	r2, r3
 8002b56:	4b1e      	ldr	r3, [pc, #120]	; (8002bd0 <batteryManager+0xa0>)
 8002b58:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_3);
 8002b5a:	4b1e      	ldr	r3, [pc, #120]	; (8002bd4 <batteryManager+0xa4>)
 8002b5c:	2108      	movs	r1, #8
 8002b5e:	0018      	movs	r0, r3
 8002b60:	f004 fd88 	bl	8007674 <HAL_GPIO_TogglePin>
		// start really shutting down & set flag
		// disable power supply (setting enable pin to 0)
		if (battPercentage == 0) {
 8002b64:	4b1a      	ldr	r3, [pc, #104]	; (8002bd0 <batteryManager+0xa0>)
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d024      	beq.n	8002bb6 <batteryManager+0x86>
//			turnDisplayOff(hspi);
//			HAL_GPIO_WritePin(POWER_SUPPLY_ENABLE_PORT, POWER_SUPPLY_ENABLE_PIN, GPIO_PIN_RESET);
		}
		else if (battPercentage <= 5) {
 8002b6c:	4b18      	ldr	r3, [pc, #96]	; (8002bd0 <batteryManager+0xa0>)
 8002b6e:	781b      	ldrb	r3, [r3, #0]
 8002b70:	2b05      	cmp	r3, #5
 8002b72:	d803      	bhi.n	8002b7c <batteryManager+0x4c>
			// start turning off most hardware
//			turnDisplayOff(hspi);
			bState = batteryReallyLow;
 8002b74:	4b18      	ldr	r3, [pc, #96]	; (8002bd8 <batteryManager+0xa8>)
 8002b76:	2202      	movs	r2, #2
 8002b78:	701a      	strb	r2, [r3, #0]
 8002b7a:	e01c      	b.n	8002bb6 <batteryManager+0x86>
		}
		// start low-power mode and set flag
		else if (battPercentage <= 15) {
 8002b7c:	4b14      	ldr	r3, [pc, #80]	; (8002bd0 <batteryManager+0xa0>)
 8002b7e:	781b      	ldrb	r3, [r3, #0]
 8002b80:	2b0f      	cmp	r3, #15
 8002b82:	d803      	bhi.n	8002b8c <batteryManager+0x5c>
			// start turning off some hardware
			bState = batteryLow;
 8002b84:	4b14      	ldr	r3, [pc, #80]	; (8002bd8 <batteryManager+0xa8>)
 8002b86:	2201      	movs	r2, #1
 8002b88:	701a      	strb	r2, [r3, #0]
 8002b8a:	e014      	b.n	8002bb6 <batteryManager+0x86>
		}
		// set hardware to use power normally
		else {
			// do nothing? maybe might need to check previous state and make sure everything is normal
			if (bState == batteryLow || bState == batteryReallyLow) {
 8002b8c:	4b12      	ldr	r3, [pc, #72]	; (8002bd8 <batteryManager+0xa8>)
 8002b8e:	781b      	ldrb	r3, [r3, #0]
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d003      	beq.n	8002b9c <batteryManager+0x6c>
 8002b94:	4b10      	ldr	r3, [pc, #64]	; (8002bd8 <batteryManager+0xa8>)
 8002b96:	781b      	ldrb	r3, [r3, #0]
 8002b98:	2b02      	cmp	r3, #2
 8002b9a:	d103      	bne.n	8002ba4 <batteryManager+0x74>
				turnDisplayOn(hspi);
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	0018      	movs	r0, r3
 8002ba0:	f7fe ff6c 	bl	8001a7c <turnDisplayOn>
			}
			HAL_GPIO_WritePin(POWER_SUPPLY_ENABLE_PORT, POWER_SUPPLY_ENABLE_PIN, GPIO_PIN_SET);
 8002ba4:	4b0b      	ldr	r3, [pc, #44]	; (8002bd4 <batteryManager+0xa4>)
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	2110      	movs	r1, #16
 8002baa:	0018      	movs	r0, r3
 8002bac:	f004 fd45 	bl	800763a <HAL_GPIO_WritePin>
			bState = batteryNormal;
 8002bb0:	4b09      	ldr	r3, [pc, #36]	; (8002bd8 <batteryManager+0xa8>)
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	701a      	strb	r2, [r3, #0]
		}

		drawBattery(battPercentage, hspi);
 8002bb6:	4b06      	ldr	r3, [pc, #24]	; (8002bd0 <batteryManager+0xa0>)
 8002bb8:	781b      	ldrb	r3, [r3, #0]
 8002bba:	683a      	ldr	r2, [r7, #0]
 8002bbc:	0011      	movs	r1, r2
 8002bbe:	0018      	movs	r0, r3
 8002bc0:	f003 f99a 	bl	8005ef8 <drawBattery>
	}
}
 8002bc4:	46c0      	nop			; (mov r8, r8)
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	b002      	add	sp, #8
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	20000141 	.word	0x20000141
 8002bd0:	20000140 	.word	0x20000140
 8002bd4:	50000800 	.word	0x50000800
 8002bd8:	200000f4 	.word	0x200000f4

08002bdc <getBatteryPercentage>:

// should return a number from 0-100
uint8_t getBatteryPercentage(ADC_HandleTypeDef *hadc) {
 8002bdc:	b5b0      	push	{r4, r5, r7, lr}
 8002bde:	b086      	sub	sp, #24
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
	float averageVoltage, temp;
	uint8_t index;

	// enable adc voltage divider for measurements, disable after
	HAL_GPIO_WritePin(ADC_DIVIDER_PORT, ADC_DIVIDER_PIN, GPIO_PIN_SET);
 8002be4:	4b3c      	ldr	r3, [pc, #240]	; (8002cd8 <getBatteryPercentage+0xfc>)
 8002be6:	2201      	movs	r2, #1
 8002be8:	2120      	movs	r1, #32
 8002bea:	0018      	movs	r0, r3
 8002bec:	f004 fd25 	bl	800763a <HAL_GPIO_WritePin>
	HAL_ADC_Start_IT(hadc);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	0018      	movs	r0, r3
 8002bf4:	f003 feac 	bl	8006950 <HAL_ADC_Start_IT>
	HAL_ADC_PollForConversion(hadc, HAL_MAX_DELAY);
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	425a      	negs	r2, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	0011      	movs	r1, r2
 8002c00:	0018      	movs	r0, r3
 8002c02:	f003 fe0f 	bl	8006824 <HAL_ADC_PollForConversion>
	averageVoltage = 3.3*HAL_ADC_GetValue(hadc)/(0xFFF);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	0018      	movs	r0, r3
 8002c0a:	f003 ff13 	bl	8006a34 <HAL_ADC_GetValue>
 8002c0e:	0003      	movs	r3, r0
 8002c10:	0018      	movs	r0, r3
 8002c12:	f7fe fca1 	bl	8001558 <__aeabi_ui2d>
 8002c16:	4a31      	ldr	r2, [pc, #196]	; (8002cdc <getBatteryPercentage+0x100>)
 8002c18:	4b31      	ldr	r3, [pc, #196]	; (8002ce0 <getBatteryPercentage+0x104>)
 8002c1a:	f7fe f9f1 	bl	8001000 <__aeabi_dmul>
 8002c1e:	0003      	movs	r3, r0
 8002c20:	000c      	movs	r4, r1
 8002c22:	0018      	movs	r0, r3
 8002c24:	0021      	movs	r1, r4
 8002c26:	2200      	movs	r2, #0
 8002c28:	4b2e      	ldr	r3, [pc, #184]	; (8002ce4 <getBatteryPercentage+0x108>)
 8002c2a:	f7fd fee7 	bl	80009fc <__aeabi_ddiv>
 8002c2e:	0003      	movs	r3, r0
 8002c30:	000c      	movs	r4, r1
 8002c32:	0018      	movs	r0, r3
 8002c34:	0021      	movs	r1, r4
 8002c36:	f7fe fcc1 	bl	80015bc <__aeabi_d2f>
 8002c3a:	1c03      	adds	r3, r0, #0
 8002c3c:	617b      	str	r3, [r7, #20]
	HAL_ADC_Stop(hadc);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	0018      	movs	r0, r3
 8002c42:	f003 fdaf 	bl	80067a4 <HAL_ADC_Stop>
	HAL_GPIO_WritePin(ADC_DIVIDER_PORT, ADC_DIVIDER_PIN, GPIO_PIN_RESET);
 8002c46:	4b24      	ldr	r3, [pc, #144]	; (8002cd8 <getBatteryPercentage+0xfc>)
 8002c48:	2200      	movs	r2, #0
 8002c4a:	2120      	movs	r1, #32
 8002c4c:	0018      	movs	r0, r3
 8002c4e:	f004 fcf4 	bl	800763a <HAL_GPIO_WritePin>

	// trying to look only for 3.9-3.4. anything above 3.7 is 100%, anything below 3.4 is 0%
	// scaled voltages at 3.0642-2.6714
	// indices at 6-151. have to scale and flip to go from 100-0 since 6->100%
	index = search(averageVoltage);
 8002c52:	2513      	movs	r5, #19
 8002c54:	197c      	adds	r4, r7, r5
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	1c18      	adds	r0, r3, #0
 8002c5a:	f000 f84b 	bl	8002cf4 <search>
 8002c5e:	0003      	movs	r3, r0
 8002c60:	7023      	strb	r3, [r4, #0]
	if (index <= 6) return 100;
 8002c62:	197b      	adds	r3, r7, r5
 8002c64:	781b      	ldrb	r3, [r3, #0]
 8002c66:	2b06      	cmp	r3, #6
 8002c68:	d801      	bhi.n	8002c6e <getBatteryPercentage+0x92>
 8002c6a:	2364      	movs	r3, #100	; 0x64
 8002c6c:	e030      	b.n	8002cd0 <getBatteryPercentage+0xf4>
	else if (index >= 135) return 0;		// adjusting numbers because tests want to call 2.65V non-zero
 8002c6e:	2313      	movs	r3, #19
 8002c70:	18fb      	adds	r3, r7, r3
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	2b86      	cmp	r3, #134	; 0x86
 8002c76:	d901      	bls.n	8002c7c <getBatteryPercentage+0xa0>
 8002c78:	2300      	movs	r3, #0
 8002c7a:	e029      	b.n	8002cd0 <getBatteryPercentage+0xf4>
	else {
		index -= 6;
 8002c7c:	2113      	movs	r1, #19
 8002c7e:	187b      	adds	r3, r7, r1
 8002c80:	187a      	adds	r2, r7, r1
 8002c82:	7812      	ldrb	r2, [r2, #0]
 8002c84:	3a06      	subs	r2, #6
 8002c86:	701a      	strb	r2, [r3, #0]
		temp = index*100.0/129;
 8002c88:	187b      	adds	r3, r7, r1
 8002c8a:	781b      	ldrb	r3, [r3, #0]
 8002c8c:	0018      	movs	r0, r3
 8002c8e:	f7fe fc29 	bl	80014e4 <__aeabi_i2d>
 8002c92:	2200      	movs	r2, #0
 8002c94:	4b14      	ldr	r3, [pc, #80]	; (8002ce8 <getBatteryPercentage+0x10c>)
 8002c96:	f7fe f9b3 	bl	8001000 <__aeabi_dmul>
 8002c9a:	0003      	movs	r3, r0
 8002c9c:	000c      	movs	r4, r1
 8002c9e:	0018      	movs	r0, r3
 8002ca0:	0021      	movs	r1, r4
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	4b11      	ldr	r3, [pc, #68]	; (8002cec <getBatteryPercentage+0x110>)
 8002ca6:	f7fd fea9 	bl	80009fc <__aeabi_ddiv>
 8002caa:	0003      	movs	r3, r0
 8002cac:	000c      	movs	r4, r1
 8002cae:	0018      	movs	r0, r3
 8002cb0:	0021      	movs	r1, r4
 8002cb2:	f7fe fc83 	bl	80015bc <__aeabi_d2f>
 8002cb6:	1c03      	adds	r3, r0, #0
 8002cb8:	60fb      	str	r3, [r7, #12]
		temp = 100-temp;
 8002cba:	68f9      	ldr	r1, [r7, #12]
 8002cbc:	480c      	ldr	r0, [pc, #48]	; (8002cf0 <getBatteryPercentage+0x114>)
 8002cbe:	f7fd fcb9 	bl	8000634 <__aeabi_fsub>
 8002cc2:	1c03      	adds	r3, r0, #0
 8002cc4:	60fb      	str	r3, [r7, #12]
		return temp;
 8002cc6:	68f8      	ldr	r0, [r7, #12]
 8002cc8:	f7fd fbd6 	bl	8000478 <__aeabi_f2uiz>
 8002ccc:	0003      	movs	r3, r0
 8002cce:	b2db      	uxtb	r3, r3
	}
}
 8002cd0:	0018      	movs	r0, r3
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	b006      	add	sp, #24
 8002cd6:	bdb0      	pop	{r4, r5, r7, pc}
 8002cd8:	50000800 	.word	0x50000800
 8002cdc:	66666666 	.word	0x66666666
 8002ce0:	400a6666 	.word	0x400a6666
 8002ce4:	40affe00 	.word	0x40affe00
 8002ce8:	40590000 	.word	0x40590000
 8002cec:	40602000 	.word	0x40602000
 8002cf0:	42c80000 	.word	0x42c80000

08002cf4 <search>:

// should return index in array
uint8_t search(float val) {
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b084      	sub	sp, #16
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
	// write binary search for efficiency?
	// size not related to 2. size is not that big. maybe in the future
	uint8_t i;
	for (i = 0; i < batteryCapacityArraySize; i++) {
 8002cfc:	230f      	movs	r3, #15
 8002cfe:	18fb      	adds	r3, r7, r3
 8002d00:	2200      	movs	r2, #0
 8002d02:	701a      	strb	r2, [r3, #0]
 8002d04:	e015      	b.n	8002d32 <search+0x3e>
		if (val > batteryCapacity[i]) return i;
 8002d06:	230f      	movs	r3, #15
 8002d08:	18fb      	adds	r3, r7, r3
 8002d0a:	781a      	ldrb	r2, [r3, #0]
 8002d0c:	4b10      	ldr	r3, [pc, #64]	; (8002d50 <search+0x5c>)
 8002d0e:	0092      	lsls	r2, r2, #2
 8002d10:	58d3      	ldr	r3, [r2, r3]
 8002d12:	1c19      	adds	r1, r3, #0
 8002d14:	6878      	ldr	r0, [r7, #4]
 8002d16:	f7fd fb9b 	bl	8000450 <__aeabi_fcmpgt>
 8002d1a:	1e03      	subs	r3, r0, #0
 8002d1c:	d003      	beq.n	8002d26 <search+0x32>
 8002d1e:	230f      	movs	r3, #15
 8002d20:	18fb      	adds	r3, r7, r3
 8002d22:	781b      	ldrb	r3, [r3, #0]
 8002d24:	e010      	b.n	8002d48 <search+0x54>
	for (i = 0; i < batteryCapacityArraySize; i++) {
 8002d26:	210f      	movs	r1, #15
 8002d28:	187b      	adds	r3, r7, r1
 8002d2a:	781a      	ldrb	r2, [r3, #0]
 8002d2c:	187b      	adds	r3, r7, r1
 8002d2e:	3201      	adds	r2, #1
 8002d30:	701a      	strb	r2, [r3, #0]
 8002d32:	230f      	movs	r3, #15
 8002d34:	18fb      	adds	r3, r7, r3
 8002d36:	781b      	ldrb	r3, [r3, #0]
 8002d38:	b29a      	uxth	r2, r3
 8002d3a:	4b06      	ldr	r3, [pc, #24]	; (8002d54 <search+0x60>)
 8002d3c:	881b      	ldrh	r3, [r3, #0]
 8002d3e:	429a      	cmp	r2, r3
 8002d40:	d3e1      	bcc.n	8002d06 <search+0x12>
	}
	return batteryCapacityArraySize;
 8002d42:	4b04      	ldr	r3, [pc, #16]	; (8002d54 <search+0x60>)
 8002d44:	881b      	ldrh	r3, [r3, #0]
 8002d46:	b2db      	uxtb	r3, r3
}
 8002d48:	0018      	movs	r0, r3
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	b004      	add	sp, #16
 8002d4e:	bd80      	pop	{r7, pc}
 8002d50:	0800b6f4 	.word	0x0800b6f4
 8002d54:	20000000 	.word	0x20000000

08002d58 <setTime>:

#include "clocks.h"

// set rtc time. uses perosnal struct as arg
// assert members not null for set functions?
void setTime(struct times *t, RTC_HandleTypeDef *hrtc) {
 8002d58:	b590      	push	{r4, r7, lr}
 8002d5a:	b089      	sub	sp, #36	; 0x24
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
 8002d60:	6039      	str	r1, [r7, #0]
	RTC_TimeTypeDef stime = {0};	// change to malloc call? does that work in embedded?
 8002d62:	210c      	movs	r1, #12
 8002d64:	000c      	movs	r4, r1
 8002d66:	187b      	adds	r3, r7, r1
 8002d68:	0018      	movs	r0, r3
 8002d6a:	2314      	movs	r3, #20
 8002d6c:	001a      	movs	r2, r3
 8002d6e:	2100      	movs	r1, #0
 8002d70:	f007 ff23 	bl	800abba <memset>

	// set using args later
	stime.Hours = t->hr;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	781a      	ldrb	r2, [r3, #0]
 8002d78:	0021      	movs	r1, r4
 8002d7a:	187b      	adds	r3, r7, r1
 8002d7c:	701a      	strb	r2, [r3, #0]
	stime.Minutes = t->min;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	785a      	ldrb	r2, [r3, #1]
 8002d82:	187b      	adds	r3, r7, r1
 8002d84:	705a      	strb	r2, [r3, #1]
	stime.Seconds = t->sec;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	789a      	ldrb	r2, [r3, #2]
 8002d8a:	187b      	adds	r3, r7, r1
 8002d8c:	709a      	strb	r2, [r3, #2]

	stime.TimeFormat = RTC_HOURFORMAT_24;
 8002d8e:	187b      	adds	r3, r7, r1
 8002d90:	2200      	movs	r2, #0
 8002d92:	70da      	strb	r2, [r3, #3]

	// not sure what these do, but probably fine if set to 0 or ignored
	stime.SubSeconds = 0;
 8002d94:	187b      	adds	r3, r7, r1
 8002d96:	2200      	movs	r2, #0
 8002d98:	605a      	str	r2, [r3, #4]
	stime.SecondFraction = 0;
 8002d9a:	187b      	adds	r3, r7, r1
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	609a      	str	r2, [r3, #8]

	stime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;		// add daylight savings later?
 8002da0:	187b      	adds	r3, r7, r1
 8002da2:	2200      	movs	r2, #0
 8002da4:	60da      	str	r2, [r3, #12]
	stime.StoreOperation = RTC_STOREOPERATION_SET;		// not sure what this does
 8002da6:	187b      	adds	r3, r7, r1
 8002da8:	2280      	movs	r2, #128	; 0x80
 8002daa:	02d2      	lsls	r2, r2, #11
 8002dac:	611a      	str	r2, [r3, #16]

	// do nothing until done
	// not following BCD format (4-bit digit 1, 4-bit digit 2)
	// while makes program hang? ignore instead?
//	while (HAL_RTC_SetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK);
	HAL_RTC_SetTime(hrtc, &stime, RTC_FORMAT_BIN);
 8002dae:	1879      	adds	r1, r7, r1
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	2200      	movs	r2, #0
 8002db4:	0018      	movs	r0, r3
 8002db6:	f005 fd83 	bl	80088c0 <HAL_RTC_SetTime>

//	runClockDisplay(&htim22);
}
 8002dba:	46c0      	nop			; (mov r8, r8)
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	b009      	add	sp, #36	; 0x24
 8002dc0:	bd90      	pop	{r4, r7, pc}

08002dc2 <setDate>:

// set rtc date. uses personal struct
void setDate(struct dates *d, RTC_HandleTypeDef *hrtc) {
 8002dc2:	b590      	push	{r4, r7, lr}
 8002dc4:	b085      	sub	sp, #20
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	6078      	str	r0, [r7, #4]
 8002dca:	6039      	str	r1, [r7, #0]
	// ---- date ----
	RTC_DateTypeDef sdate = {0};
 8002dcc:	240c      	movs	r4, #12
 8002dce:	193b      	adds	r3, r7, r4
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	601a      	str	r2, [r3, #0]

	sdate.Month = d->month;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	789a      	ldrb	r2, [r3, #2]
 8002dd8:	193b      	adds	r3, r7, r4
 8002dda:	705a      	strb	r2, [r3, #1]
	sdate.Date = d->date;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	78da      	ldrb	r2, [r3, #3]
 8002de0:	193b      	adds	r3, r7, r4
 8002de2:	709a      	strb	r2, [r3, #2]
	sdate.WeekDay = weekdayCalculator(d->yr, d->month, d->date);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	8818      	ldrh	r0, [r3, #0]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	7899      	ldrb	r1, [r3, #2]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	78db      	ldrb	r3, [r3, #3]
 8002df0:	001a      	movs	r2, r3
 8002df2:	f000 fa81 	bl	80032f8 <weekdayCalculator>
 8002df6:	0003      	movs	r3, r0
 8002df8:	001a      	movs	r2, r3
 8002dfa:	193b      	adds	r3, r7, r4
 8002dfc:	701a      	strb	r2, [r3, #0]
	sdate.Year = d->yr % 100; 		// set only between 0-99. part of the library (!?)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	881b      	ldrh	r3, [r3, #0]
 8002e02:	2164      	movs	r1, #100	; 0x64
 8002e04:	0018      	movs	r0, r3
 8002e06:	f7fd fa0d 	bl	8000224 <__aeabi_uidivmod>
 8002e0a:	000b      	movs	r3, r1
 8002e0c:	b29b      	uxth	r3, r3
 8002e0e:	b2da      	uxtb	r2, r3
 8002e10:	193b      	adds	r3, r7, r4
 8002e12:	70da      	strb	r2, [r3, #3]

	HAL_RTC_SetDate(hrtc, &sdate, RTC_FORMAT_BIN);
 8002e14:	1939      	adds	r1, r7, r4
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	0018      	movs	r0, r3
 8002e1c:	f005 fe70 	bl	8008b00 <HAL_RTC_SetDate>

//	runClockDisplay(&htim22);
}
 8002e20:	46c0      	nop			; (mov r8, r8)
 8002e22:	46bd      	mov	sp, r7
 8002e24:	b005      	add	sp, #20
 8002e26:	bd90      	pop	{r4, r7, pc}

08002e28 <setDateTime>:

void setDateTime(struct dates *d, struct times *t, RTC_HandleTypeDef *hrtc) {
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b084      	sub	sp, #16
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	60f8      	str	r0, [r7, #12]
 8002e30:	60b9      	str	r1, [r7, #8]
 8002e32:	607a      	str	r2, [r7, #4]
	setDate(d, hrtc);
 8002e34:	687a      	ldr	r2, [r7, #4]
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	0011      	movs	r1, r2
 8002e3a:	0018      	movs	r0, r3
 8002e3c:	f7ff ffc1 	bl	8002dc2 <setDate>
	setTime(t, hrtc);
 8002e40:	687a      	ldr	r2, [r7, #4]
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	0011      	movs	r1, r2
 8002e46:	0018      	movs	r0, r3
 8002e48:	f7ff ff86 	bl	8002d58 <setTime>
}
 8002e4c:	46c0      	nop			; (mov r8, r8)
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	b004      	add	sp, #16
 8002e52:	bd80      	pop	{r7, pc}

08002e54 <setAlarm>:

// for time of day+week
void setAlarm(struct alarmTimes *a, RTC_HandleTypeDef *hrtc) {
 8002e54:	b5b0      	push	{r4, r5, r7, lr}
 8002e56:	b092      	sub	sp, #72	; 0x48
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
 8002e5c:	6039      	str	r1, [r7, #0]
	RTC_AlarmTypeDef salarm = {0};		// is there a problem with using pointers instead?
 8002e5e:	2520      	movs	r5, #32
 8002e60:	197b      	adds	r3, r7, r5
 8002e62:	0018      	movs	r0, r3
 8002e64:	2328      	movs	r3, #40	; 0x28
 8002e66:	001a      	movs	r2, r3
 8002e68:	2100      	movs	r1, #0
 8002e6a:	f007 fea6 	bl	800abba <memset>
	RTC_TimeTypeDef salarmtime = {0};
 8002e6e:	210c      	movs	r1, #12
 8002e70:	000c      	movs	r4, r1
 8002e72:	187b      	adds	r3, r7, r1
 8002e74:	0018      	movs	r0, r3
 8002e76:	2314      	movs	r3, #20
 8002e78:	001a      	movs	r2, r3
 8002e7a:	2100      	movs	r1, #0
 8002e7c:	f007 fe9d 	bl	800abba <memset>

	// change to set with args
	salarmtime.Hours = a->hr;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	781a      	ldrb	r2, [r3, #0]
 8002e84:	0021      	movs	r1, r4
 8002e86:	187b      	adds	r3, r7, r1
 8002e88:	701a      	strb	r2, [r3, #0]
	salarmtime.Minutes = a->min;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	785a      	ldrb	r2, [r3, #1]
 8002e8e:	187b      	adds	r3, r7, r1
 8002e90:	705a      	strb	r2, [r3, #1]
	salarmtime.Seconds = a->sec;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	789a      	ldrb	r2, [r3, #2]
 8002e96:	187b      	adds	r3, r7, r1
 8002e98:	709a      	strb	r2, [r3, #2]
	salarmtime.TimeFormat = RTC_HOURFORMAT_24;
 8002e9a:	187b      	adds	r3, r7, r1
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	70da      	strb	r2, [r3, #3]
	salarmtime.SubSeconds = 0;
 8002ea0:	187b      	adds	r3, r7, r1
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	605a      	str	r2, [r3, #4]
	salarmtime.SecondFraction = 0;
 8002ea6:	187b      	adds	r3, r7, r1
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	609a      	str	r2, [r3, #8]
	salarmtime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002eac:	187b      	adds	r3, r7, r1
 8002eae:	2200      	movs	r2, #0
 8002eb0:	60da      	str	r2, [r3, #12]
	salarmtime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002eb2:	187b      	adds	r3, r7, r1
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	611a      	str	r2, [r3, #16]

	salarm.AlarmTime = salarmtime;
 8002eb8:	197b      	adds	r3, r7, r5
 8002eba:	187a      	adds	r2, r7, r1
 8002ebc:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002ebe:	c313      	stmia	r3!, {r0, r1, r4}
 8002ec0:	ca03      	ldmia	r2!, {r0, r1}
 8002ec2:	c303      	stmia	r3!, {r0, r1}
	salarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002ec4:	197b      	adds	r3, r7, r5
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	615a      	str	r2, [r3, #20]
	salarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8002eca:	197b      	adds	r3, r7, r5
 8002ecc:	2200      	movs	r2, #0
 8002ece:	619a      	str	r2, [r3, #24]
	salarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_WEEKDAY;
 8002ed0:	197b      	adds	r3, r7, r5
 8002ed2:	2280      	movs	r2, #128	; 0x80
 8002ed4:	05d2      	lsls	r2, r2, #23
 8002ed6:	61da      	str	r2, [r3, #28]
	salarm.AlarmDateWeekDay = a->weekday;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	78d9      	ldrb	r1, [r3, #3]
 8002edc:	197b      	adds	r3, r7, r5
 8002ede:	2220      	movs	r2, #32
 8002ee0:	5499      	strb	r1, [r3, r2]
	salarm.Alarm = RTC_ALARM_A;			// change if using different alarm
 8002ee2:	197b      	adds	r3, r7, r5
 8002ee4:	2280      	movs	r2, #128	; 0x80
 8002ee6:	0052      	lsls	r2, r2, #1
 8002ee8:	625a      	str	r2, [r3, #36]	; 0x24

	// do nothing until done
	HAL_RTC_SetAlarm_IT(hrtc, &salarm, RTC_FORMAT_BIN);
 8002eea:	1979      	adds	r1, r7, r5
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	0018      	movs	r0, r3
 8002ef2:	f005 ff01 	bl	8008cf8 <HAL_RTC_SetAlarm_IT>
}
 8002ef6:	46c0      	nop			; (mov r8, r8)
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	b012      	add	sp, #72	; 0x48
 8002efc:	bdb0      	pop	{r4, r5, r7, pc}

08002efe <setClockAlarm>:

// set an alarm for the next second.
// for triggering display updates.
// uses rtc weekday. should have weekday calculator integrated before using
void setClockAlarm(RTC_HandleTypeDef *hrtc) {
 8002efe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f00:	b097      	sub	sp, #92	; 0x5c
 8002f02:	af00      	add	r7, sp, #0
 8002f04:	6078      	str	r0, [r7, #4]
	RTC_AlarmTypeDef salarm = {0};			// malloc if using pointers
 8002f06:	242c      	movs	r4, #44	; 0x2c
 8002f08:	193b      	adds	r3, r7, r4
 8002f0a:	0018      	movs	r0, r3
 8002f0c:	2328      	movs	r3, #40	; 0x28
 8002f0e:	001a      	movs	r2, r3
 8002f10:	2100      	movs	r1, #0
 8002f12:	f007 fe52 	bl	800abba <memset>
	RTC_TimeTypeDef salarmtime = {0};
 8002f16:	2518      	movs	r5, #24
 8002f18:	197b      	adds	r3, r7, r5
 8002f1a:	0018      	movs	r0, r3
 8002f1c:	2314      	movs	r3, #20
 8002f1e:	001a      	movs	r2, r3
 8002f20:	2100      	movs	r1, #0
 8002f22:	f007 fe4a 	bl	800abba <memset>

	struct dates currentDate = {0};
 8002f26:	2310      	movs	r3, #16
 8002f28:	18fb      	adds	r3, r7, r3
 8002f2a:	0018      	movs	r0, r3
 8002f2c:	2306      	movs	r3, #6
 8002f2e:	001a      	movs	r2, r3
 8002f30:	2100      	movs	r1, #0
 8002f32:	f007 fe42 	bl	800abba <memset>
	struct times currentTime = {0};
 8002f36:	210c      	movs	r1, #12
 8002f38:	000e      	movs	r6, r1
 8002f3a:	187b      	adds	r3, r7, r1
 8002f3c:	0018      	movs	r0, r3
 8002f3e:	2303      	movs	r3, #3
 8002f40:	001a      	movs	r2, r3
 8002f42:	2100      	movs	r1, #0
 8002f44:	f007 fe39 	bl	800abba <memset>

	getDateTime(&currentDate, &currentTime, hrtc);
 8002f48:	687a      	ldr	r2, [r7, #4]
 8002f4a:	0031      	movs	r1, r6
 8002f4c:	000c      	movs	r4, r1
 8002f4e:	1879      	adds	r1, r7, r1
 8002f50:	2310      	movs	r3, #16
 8002f52:	18fb      	adds	r3, r7, r3
 8002f54:	0018      	movs	r0, r3
 8002f56:	f000 f8d5 	bl	8003104 <getDateTime>

	struct alarmTimes a = {0};
 8002f5a:	2608      	movs	r6, #8
 8002f5c:	19bb      	adds	r3, r7, r6
 8002f5e:	2200      	movs	r2, #0
 8002f60:	601a      	str	r2, [r3, #0]
	uint8_t s,m,h,w;
	s = currentTime.sec + 1;
 8002f62:	0021      	movs	r1, r4
 8002f64:	187b      	adds	r3, r7, r1
 8002f66:	789a      	ldrb	r2, [r3, #2]
 8002f68:	2057      	movs	r0, #87	; 0x57
 8002f6a:	183b      	adds	r3, r7, r0
 8002f6c:	3201      	adds	r2, #1
 8002f6e:	701a      	strb	r2, [r3, #0]
	m = currentTime.min + s/60;
 8002f70:	187b      	adds	r3, r7, r1
 8002f72:	785c      	ldrb	r4, [r3, #1]
 8002f74:	183b      	adds	r3, r7, r0
 8002f76:	781b      	ldrb	r3, [r3, #0]
 8002f78:	213c      	movs	r1, #60	; 0x3c
 8002f7a:	0018      	movs	r0, r3
 8002f7c:	f7fd f8cc 	bl	8000118 <__udivsi3>
 8002f80:	0003      	movs	r3, r0
 8002f82:	b2da      	uxtb	r2, r3
 8002f84:	2056      	movs	r0, #86	; 0x56
 8002f86:	183b      	adds	r3, r7, r0
 8002f88:	18a2      	adds	r2, r4, r2
 8002f8a:	701a      	strb	r2, [r3, #0]
	h = currentTime.hr + m/60;
 8002f8c:	210c      	movs	r1, #12
 8002f8e:	187b      	adds	r3, r7, r1
 8002f90:	781c      	ldrb	r4, [r3, #0]
 8002f92:	0002      	movs	r2, r0
 8002f94:	18bb      	adds	r3, r7, r2
 8002f96:	781b      	ldrb	r3, [r3, #0]
 8002f98:	213c      	movs	r1, #60	; 0x3c
 8002f9a:	0018      	movs	r0, r3
 8002f9c:	f7fd f8bc 	bl	8000118 <__udivsi3>
 8002fa0:	0003      	movs	r3, r0
 8002fa2:	b2da      	uxtb	r2, r3
 8002fa4:	2155      	movs	r1, #85	; 0x55
 8002fa6:	187b      	adds	r3, r7, r1
 8002fa8:	18a2      	adds	r2, r4, r2
 8002faa:	701a      	strb	r2, [r3, #0]
	w = currentDate.weekday + h/24;
 8002fac:	2310      	movs	r3, #16
 8002fae:	18fb      	adds	r3, r7, r3
 8002fb0:	791c      	ldrb	r4, [r3, #4]
 8002fb2:	187b      	adds	r3, r7, r1
 8002fb4:	781b      	ldrb	r3, [r3, #0]
 8002fb6:	2118      	movs	r1, #24
 8002fb8:	0018      	movs	r0, r3
 8002fba:	f7fd f8ad 	bl	8000118 <__udivsi3>
 8002fbe:	0003      	movs	r3, r0
 8002fc0:	b2da      	uxtb	r2, r3
 8002fc2:	2354      	movs	r3, #84	; 0x54
 8002fc4:	18fb      	adds	r3, r7, r3
 8002fc6:	18a2      	adds	r2, r4, r2
 8002fc8:	701a      	strb	r2, [r3, #0]
	a.sec = s % 60;
 8002fca:	2057      	movs	r0, #87	; 0x57
 8002fcc:	183b      	adds	r3, r7, r0
 8002fce:	781b      	ldrb	r3, [r3, #0]
 8002fd0:	213c      	movs	r1, #60	; 0x3c
 8002fd2:	0018      	movs	r0, r3
 8002fd4:	f7fd f926 	bl	8000224 <__aeabi_uidivmod>
 8002fd8:	000b      	movs	r3, r1
 8002fda:	b2da      	uxtb	r2, r3
 8002fdc:	19bb      	adds	r3, r7, r6
 8002fde:	709a      	strb	r2, [r3, #2]
	a.min = m % 60;
 8002fe0:	2256      	movs	r2, #86	; 0x56
 8002fe2:	18bb      	adds	r3, r7, r2
 8002fe4:	781b      	ldrb	r3, [r3, #0]
 8002fe6:	213c      	movs	r1, #60	; 0x3c
 8002fe8:	0018      	movs	r0, r3
 8002fea:	f7fd f91b 	bl	8000224 <__aeabi_uidivmod>
 8002fee:	000b      	movs	r3, r1
 8002ff0:	b2da      	uxtb	r2, r3
 8002ff2:	19bb      	adds	r3, r7, r6
 8002ff4:	705a      	strb	r2, [r3, #1]
	a.hr = h % 24;
 8002ff6:	2155      	movs	r1, #85	; 0x55
 8002ff8:	187b      	adds	r3, r7, r1
 8002ffa:	781b      	ldrb	r3, [r3, #0]
 8002ffc:	2118      	movs	r1, #24
 8002ffe:	0018      	movs	r0, r3
 8003000:	f7fd f910 	bl	8000224 <__aeabi_uidivmod>
 8003004:	000b      	movs	r3, r1
 8003006:	b2da      	uxtb	r2, r3
 8003008:	19bb      	adds	r3, r7, r6
 800300a:	701a      	strb	r2, [r3, #0]
	a.weekday = (w-1) % 7 + 1;
 800300c:	2354      	movs	r3, #84	; 0x54
 800300e:	18fb      	adds	r3, r7, r3
 8003010:	781b      	ldrb	r3, [r3, #0]
 8003012:	3b01      	subs	r3, #1
 8003014:	2107      	movs	r1, #7
 8003016:	0018      	movs	r0, r3
 8003018:	f7fd f9ee 	bl	80003f8 <__aeabi_idivmod>
 800301c:	000b      	movs	r3, r1
 800301e:	b2db      	uxtb	r3, r3
 8003020:	3301      	adds	r3, #1
 8003022:	b2da      	uxtb	r2, r3
 8003024:	0030      	movs	r0, r6
 8003026:	183b      	adds	r3, r7, r0
 8003028:	70da      	strb	r2, [r3, #3]

	salarmtime.Hours = a.hr;
 800302a:	183b      	adds	r3, r7, r0
 800302c:	781a      	ldrb	r2, [r3, #0]
 800302e:	197b      	adds	r3, r7, r5
 8003030:	701a      	strb	r2, [r3, #0]
	salarmtime.Minutes = a.min;
 8003032:	183b      	adds	r3, r7, r0
 8003034:	785a      	ldrb	r2, [r3, #1]
 8003036:	197b      	adds	r3, r7, r5
 8003038:	705a      	strb	r2, [r3, #1]
	salarmtime.Seconds = a.sec;
 800303a:	183b      	adds	r3, r7, r0
 800303c:	789a      	ldrb	r2, [r3, #2]
 800303e:	197b      	adds	r3, r7, r5
 8003040:	709a      	strb	r2, [r3, #2]
	salarmtime.TimeFormat = RTC_HOURFORMAT_24;
 8003042:	197b      	adds	r3, r7, r5
 8003044:	2200      	movs	r2, #0
 8003046:	70da      	strb	r2, [r3, #3]
	salarmtime.SubSeconds = 0;
 8003048:	0029      	movs	r1, r5
 800304a:	187b      	adds	r3, r7, r1
 800304c:	2200      	movs	r2, #0
 800304e:	605a      	str	r2, [r3, #4]
	salarmtime.SecondFraction = 0;
 8003050:	187b      	adds	r3, r7, r1
 8003052:	2200      	movs	r2, #0
 8003054:	609a      	str	r2, [r3, #8]
	salarmtime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003056:	187b      	adds	r3, r7, r1
 8003058:	2200      	movs	r2, #0
 800305a:	60da      	str	r2, [r3, #12]
	salarmtime.StoreOperation = RTC_STOREOPERATION_RESET;
 800305c:	187b      	adds	r3, r7, r1
 800305e:	2200      	movs	r2, #0
 8003060:	611a      	str	r2, [r3, #16]

	salarm.AlarmTime = salarmtime;
 8003062:	242c      	movs	r4, #44	; 0x2c
 8003064:	193b      	adds	r3, r7, r4
 8003066:	187a      	adds	r2, r7, r1
 8003068:	ca62      	ldmia	r2!, {r1, r5, r6}
 800306a:	c362      	stmia	r3!, {r1, r5, r6}
 800306c:	ca22      	ldmia	r2!, {r1, r5}
 800306e:	c322      	stmia	r3!, {r1, r5}
	salarm.AlarmMask = RTC_ALARMMASK_NONE;
 8003070:	193b      	adds	r3, r7, r4
 8003072:	2200      	movs	r2, #0
 8003074:	615a      	str	r2, [r3, #20]
	salarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8003076:	193b      	adds	r3, r7, r4
 8003078:	2200      	movs	r2, #0
 800307a:	619a      	str	r2, [r3, #24]
	salarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_WEEKDAY;
 800307c:	193b      	adds	r3, r7, r4
 800307e:	2280      	movs	r2, #128	; 0x80
 8003080:	05d2      	lsls	r2, r2, #23
 8003082:	61da      	str	r2, [r3, #28]
	salarm.AlarmDateWeekDay = a.weekday;
 8003084:	183b      	adds	r3, r7, r0
 8003086:	78d9      	ldrb	r1, [r3, #3]
 8003088:	193b      	adds	r3, r7, r4
 800308a:	2220      	movs	r2, #32
 800308c:	5499      	strb	r1, [r3, r2]
	salarm.Alarm = RTC_ALARM_B;			// change if using different alarm
 800308e:	193b      	adds	r3, r7, r4
 8003090:	2280      	movs	r2, #128	; 0x80
 8003092:	0092      	lsls	r2, r2, #2
 8003094:	625a      	str	r2, [r3, #36]	; 0x24

	// do nothing until done
	HAL_RTC_SetAlarm_IT(hrtc, &salarm, RTC_FORMAT_BIN);
 8003096:	1939      	adds	r1, r7, r4
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2200      	movs	r2, #0
 800309c:	0018      	movs	r0, r3
 800309e:	f005 fe2b 	bl	8008cf8 <HAL_RTC_SetAlarm_IT>
}
 80030a2:	46c0      	nop			; (mov r8, r8)
 80030a4:	46bd      	mov	sp, r7
 80030a6:	b017      	add	sp, #92	; 0x5c
 80030a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080030ac <HAL_RTC_AlarmAEventCallback>:

// ---- callbacks for interrupts ----
// used for alarm function in project
// meant to send signal to use motor
// change to use hw timer so signal is temporary
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b082      	sub	sp, #8
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
	// change pin to whatever's accessible
	// using PC0
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_0);
 80030b4:	4b07      	ldr	r3, [pc, #28]	; (80030d4 <HAL_RTC_AlarmAEventCallback+0x28>)
 80030b6:	2101      	movs	r1, #1
 80030b8:	0018      	movs	r0, r3
 80030ba:	f004 fadb 	bl	8007674 <HAL_GPIO_TogglePin>
	isAlarmDone = 1;
 80030be:	4b06      	ldr	r3, [pc, #24]	; (80030d8 <HAL_RTC_AlarmAEventCallback+0x2c>)
 80030c0:	2201      	movs	r2, #1
 80030c2:	701a      	strb	r2, [r3, #0]
	updateFace.alarm = 1;
 80030c4:	4b05      	ldr	r3, [pc, #20]	; (80030dc <HAL_RTC_AlarmAEventCallback+0x30>)
 80030c6:	2201      	movs	r2, #1
 80030c8:	709a      	strb	r2, [r3, #2]
}
 80030ca:	46c0      	nop			; (mov r8, r8)
 80030cc:	46bd      	mov	sp, r7
 80030ce:	b002      	add	sp, #8
 80030d0:	bd80      	pop	{r7, pc}
 80030d2:	46c0      	nop			; (mov r8, r8)
 80030d4:	50000800 	.word	0x50000800
 80030d8:	20000142 	.word	0x20000142
 80030dc:	20000144 	.word	0x20000144

080030e0 <HAL_RTCEx_AlarmBEventCallback>:

// used to trigger display refresh every second. used because then it's synchronous with RTC updates
void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc) {
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b082      	sub	sp, #8
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
	updateFace.clock = 1;
 80030e8:	4b05      	ldr	r3, [pc, #20]	; (8003100 <HAL_RTCEx_AlarmBEventCallback+0x20>)
 80030ea:	2201      	movs	r2, #1
 80030ec:	701a      	strb	r2, [r3, #0]
	setClockAlarm(hrtc);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	0018      	movs	r0, r3
 80030f2:	f7ff ff04 	bl	8002efe <setClockAlarm>
}
 80030f6:	46c0      	nop			; (mov r8, r8)
 80030f8:	46bd      	mov	sp, r7
 80030fa:	b002      	add	sp, #8
 80030fc:	bd80      	pop	{r7, pc}
 80030fe:	46c0      	nop			; (mov r8, r8)
 8003100:	20000144 	.word	0x20000144

08003104 <getDateTime>:
	d->date = sdate.Date;
	d->weekday = sdate.WeekDay;
}

// not using getDate and getTime for efficiency (?)
void getDateTime(struct dates *d, struct times *t, RTC_HandleTypeDef *hrtc) {
 8003104:	b590      	push	{r4, r7, lr}
 8003106:	b08b      	sub	sp, #44	; 0x2c
 8003108:	af00      	add	r7, sp, #0
 800310a:	60f8      	str	r0, [r7, #12]
 800310c:	60b9      	str	r1, [r7, #8]
 800310e:	607a      	str	r2, [r7, #4]
	RTC_DateTypeDef sdate;
	RTC_TimeTypeDef stime;

	// programming manual says to read time after date. something shadow registers.
	// not done automatically in HAL
	HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN);
 8003110:	2310      	movs	r3, #16
 8003112:	18f9      	adds	r1, r7, r3
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2200      	movs	r2, #0
 8003118:	0018      	movs	r0, r3
 800311a:	f005 fc95 	bl	8008a48 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(hrtc, &sdate, RTC_FORMAT_BIN);
 800311e:	2424      	movs	r4, #36	; 0x24
 8003120:	1939      	adds	r1, r7, r4
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2200      	movs	r2, #0
 8003126:	0018      	movs	r0, r3
 8003128:	f005 fd98 	bl	8008c5c <HAL_RTC_GetDate>

	d->yr = sdate.Year > 50 ? sdate.Year+1900 : sdate.Year+2000;		// make assumptions on whether it's 19xx or 20xx
 800312c:	193b      	adds	r3, r7, r4
 800312e:	78db      	ldrb	r3, [r3, #3]
 8003130:	2b32      	cmp	r3, #50	; 0x32
 8003132:	d908      	bls.n	8003146 <getDateTime+0x42>
 8003134:	2324      	movs	r3, #36	; 0x24
 8003136:	18fb      	adds	r3, r7, r3
 8003138:	78db      	ldrb	r3, [r3, #3]
 800313a:	b29b      	uxth	r3, r3
 800313c:	4a16      	ldr	r2, [pc, #88]	; (8003198 <getDateTime+0x94>)
 800313e:	4694      	mov	ip, r2
 8003140:	4463      	add	r3, ip
 8003142:	b29b      	uxth	r3, r3
 8003144:	e008      	b.n	8003158 <getDateTime+0x54>
 8003146:	2324      	movs	r3, #36	; 0x24
 8003148:	18fb      	adds	r3, r7, r3
 800314a:	78db      	ldrb	r3, [r3, #3]
 800314c:	b29b      	uxth	r3, r3
 800314e:	22fa      	movs	r2, #250	; 0xfa
 8003150:	00d2      	lsls	r2, r2, #3
 8003152:	4694      	mov	ip, r2
 8003154:	4463      	add	r3, ip
 8003156:	b29b      	uxth	r3, r3
 8003158:	68fa      	ldr	r2, [r7, #12]
 800315a:	8013      	strh	r3, [r2, #0]
	d->month = sdate.Month;
 800315c:	2124      	movs	r1, #36	; 0x24
 800315e:	187b      	adds	r3, r7, r1
 8003160:	785a      	ldrb	r2, [r3, #1]
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	709a      	strb	r2, [r3, #2]
	d->date = sdate.Date;
 8003166:	187b      	adds	r3, r7, r1
 8003168:	789a      	ldrb	r2, [r3, #2]
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	70da      	strb	r2, [r3, #3]
	d->weekday = sdate.WeekDay;
 800316e:	187b      	adds	r3, r7, r1
 8003170:	781a      	ldrb	r2, [r3, #0]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	711a      	strb	r2, [r3, #4]

	t->hr = stime.Hours;
 8003176:	2110      	movs	r1, #16
 8003178:	187b      	adds	r3, r7, r1
 800317a:	781a      	ldrb	r2, [r3, #0]
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	701a      	strb	r2, [r3, #0]
	t->min = stime.Minutes;
 8003180:	187b      	adds	r3, r7, r1
 8003182:	785a      	ldrb	r2, [r3, #1]
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	705a      	strb	r2, [r3, #1]
	t->sec = stime.Seconds;
 8003188:	187b      	adds	r3, r7, r1
 800318a:	789a      	ldrb	r2, [r3, #2]
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	709a      	strb	r2, [r3, #2]
}
 8003190:	46c0      	nop			; (mov r8, r8)
 8003192:	46bd      	mov	sp, r7
 8003194:	b00b      	add	sp, #44	; 0x2c
 8003196:	bd90      	pop	{r4, r7, pc}
 8003198:	0000076c 	.word	0x0000076c

0800319c <setRTCCalibration>:
// ---- end of clock get functions ----

// ---- RTC calibration function ----
// calibVal should be given in drift/day in seconds
// calibration output on PC13. problems with using pins together with alarm?
void setRTCCalibration(int calibVal, RTC_HandleTypeDef *hrtc) {
 800319c:	b580      	push	{r7, lr}
 800319e:	b084      	sub	sp, #16
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
 80031a4:	6039      	str	r1, [r7, #0]
	uint16_t calm = 0;
 80031a6:	230e      	movs	r3, #14
 80031a8:	18fb      	adds	r3, r7, r3
 80031aa:	2200      	movs	r2, #0
 80031ac:	801a      	strh	r2, [r3, #0]
	uint32_t temp;
	// need to recalculate the bounds
	if (calibVal == 0) return;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d048      	beq.n	8003246 <setRTCCalibration+0xaa>
	else if (calibVal < 0) {		// drift offset is negative. need to slow rtc down
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	da20      	bge.n	80031fc <setRTCCalibration+0x60>
		if (calibVal <= -42) {		// bounds checking. just set to max
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	3329      	adds	r3, #41	; 0x29
 80031be:	da06      	bge.n	80031ce <setRTCCalibration+0x32>
			HAL_RTCEx_SetSmoothCalib(hrtc, RTC_SMOOTHCALIB_PERIOD_32SEC, RTC_SMOOTHCALIB_PLUSPULSES_RESET, 0x1FF);
 80031c0:	4b23      	ldr	r3, [pc, #140]	; (8003250 <setRTCCalibration+0xb4>)
 80031c2:	6838      	ldr	r0, [r7, #0]
 80031c4:	2200      	movs	r2, #0
 80031c6:	2100      	movs	r1, #0
 80031c8:	f006 f867 	bl	800929a <HAL_RTCEx_SetSmoothCalib>
 80031cc:	e03c      	b.n	8003248 <setRTCCalibration+0xac>
		}
		else {
			// math for setting CALM 9-bit register in RTC. formula in notes and in L0 programming reference manual
			temp = -calibVal*32768*32/86400;		// possible overflow when doing math, so reordering
 80031ce:	687a      	ldr	r2, [r7, #4]
 80031d0:	0013      	movs	r3, r2
 80031d2:	031b      	lsls	r3, r3, #12
 80031d4:	1a9b      	subs	r3, r3, r2
 80031d6:	051b      	lsls	r3, r3, #20
 80031d8:	491e      	ldr	r1, [pc, #120]	; (8003254 <setRTCCalibration+0xb8>)
 80031da:	0018      	movs	r0, r3
 80031dc:	f7fd f826 	bl	800022c <__divsi3>
 80031e0:	0003      	movs	r3, r0
 80031e2:	60bb      	str	r3, [r7, #8]
			calm = temp;
 80031e4:	210e      	movs	r1, #14
 80031e6:	187b      	adds	r3, r7, r1
 80031e8:	68ba      	ldr	r2, [r7, #8]
 80031ea:	801a      	strh	r2, [r3, #0]
			HAL_RTCEx_SetSmoothCalib(hrtc, RTC_SMOOTHCALIB_PERIOD_32SEC, RTC_SMOOTHCALIB_PLUSPULSES_RESET, calm);
 80031ec:	187b      	adds	r3, r7, r1
 80031ee:	881b      	ldrh	r3, [r3, #0]
 80031f0:	6838      	ldr	r0, [r7, #0]
 80031f2:	2200      	movs	r2, #0
 80031f4:	2100      	movs	r1, #0
 80031f6:	f006 f850 	bl	800929a <HAL_RTCEx_SetSmoothCalib>
 80031fa:	e025      	b.n	8003248 <setRTCCalibration+0xac>
		}
	}
	else {
		if (calibVal >= 42) { 		// drift offset is positive. need to speed rtc up
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2b29      	cmp	r3, #41	; 0x29
 8003200:	dd07      	ble.n	8003212 <setRTCCalibration+0x76>
			HAL_RTCEx_SetSmoothCalib(hrtc, RTC_SMOOTHCALIB_PERIOD_32SEC, RTC_SMOOTHCALIB_PLUSPULSES_SET, 0);
 8003202:	2380      	movs	r3, #128	; 0x80
 8003204:	021a      	lsls	r2, r3, #8
 8003206:	6838      	ldr	r0, [r7, #0]
 8003208:	2300      	movs	r3, #0
 800320a:	2100      	movs	r1, #0
 800320c:	f006 f845 	bl	800929a <HAL_RTCEx_SetSmoothCalib>
 8003210:	e01a      	b.n	8003248 <setRTCCalibration+0xac>
		}
		else {
			// math
			temp = 512-(calibVal*32768*32/86400);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	051b      	lsls	r3, r3, #20
 8003216:	4910      	ldr	r1, [pc, #64]	; (8003258 <setRTCCalibration+0xbc>)
 8003218:	0018      	movs	r0, r3
 800321a:	f7fd f807 	bl	800022c <__divsi3>
 800321e:	0003      	movs	r3, r0
 8003220:	2280      	movs	r2, #128	; 0x80
 8003222:	0092      	lsls	r2, r2, #2
 8003224:	4694      	mov	ip, r2
 8003226:	4463      	add	r3, ip
 8003228:	60bb      	str	r3, [r7, #8]
			calm = temp;
 800322a:	210e      	movs	r1, #14
 800322c:	187b      	adds	r3, r7, r1
 800322e:	68ba      	ldr	r2, [r7, #8]
 8003230:	801a      	strh	r2, [r3, #0]
			HAL_RTCEx_SetSmoothCalib(hrtc, RTC_SMOOTHCALIB_PERIOD_32SEC, RTC_SMOOTHCALIB_PLUSPULSES_SET, calm);
 8003232:	187b      	adds	r3, r7, r1
 8003234:	8819      	ldrh	r1, [r3, #0]
 8003236:	2380      	movs	r3, #128	; 0x80
 8003238:	021a      	lsls	r2, r3, #8
 800323a:	6838      	ldr	r0, [r7, #0]
 800323c:	000b      	movs	r3, r1
 800323e:	2100      	movs	r1, #0
 8003240:	f006 f82b 	bl	800929a <HAL_RTCEx_SetSmoothCalib>
 8003244:	e000      	b.n	8003248 <setRTCCalibration+0xac>
	if (calibVal == 0) return;
 8003246:	46c0      	nop			; (mov r8, r8)
		}
	}
}
 8003248:	46bd      	mov	sp, r7
 800324a:	b004      	add	sp, #16
 800324c:	bd80      	pop	{r7, pc}
 800324e:	46c0      	nop			; (mov r8, r8)
 8003250:	000001ff 	.word	0x000001ff
 8003254:	00015180 	.word	0x00015180
 8003258:	fffeae80 	.word	0xfffeae80

0800325c <timeToSeconds>:
// ---- end of RTC calibration function ----

// ---- converters and calculators ----
uint32_t timeToSeconds(struct times *t) {
 800325c:	b580      	push	{r7, lr}
 800325e:	b082      	sub	sp, #8
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
	return t->sec + t->min*60 + t->hr*3600;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	789b      	ldrb	r3, [r3, #2]
 8003268:	0019      	movs	r1, r3
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	785b      	ldrb	r3, [r3, #1]
 800326e:	001a      	movs	r2, r3
 8003270:	0013      	movs	r3, r2
 8003272:	011b      	lsls	r3, r3, #4
 8003274:	1a9b      	subs	r3, r3, r2
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	18c9      	adds	r1, r1, r3
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	781b      	ldrb	r3, [r3, #0]
 800327e:	001a      	movs	r2, r3
 8003280:	0013      	movs	r3, r2
 8003282:	011b      	lsls	r3, r3, #4
 8003284:	1a9b      	subs	r3, r3, r2
 8003286:	011a      	lsls	r2, r3, #4
 8003288:	1ad2      	subs	r2, r2, r3
 800328a:	0113      	lsls	r3, r2, #4
 800328c:	001a      	movs	r2, r3
 800328e:	0013      	movs	r3, r2
 8003290:	18cb      	adds	r3, r1, r3
}
 8003292:	0018      	movs	r0, r3
 8003294:	46bd      	mov	sp, r7
 8003296:	b002      	add	sp, #8
 8003298:	bd80      	pop	{r7, pc}

0800329a <secondsToTime>:

void secondsToTime(struct times *t, uint32_t seconds) {
 800329a:	b580      	push	{r7, lr}
 800329c:	b082      	sub	sp, #8
 800329e:	af00      	add	r7, sp, #0
 80032a0:	6078      	str	r0, [r7, #4]
 80032a2:	6039      	str	r1, [r7, #0]
	t->hr = seconds / 3600;
 80032a4:	683a      	ldr	r2, [r7, #0]
 80032a6:	23e1      	movs	r3, #225	; 0xe1
 80032a8:	0119      	lsls	r1, r3, #4
 80032aa:	0010      	movs	r0, r2
 80032ac:	f7fc ff34 	bl	8000118 <__udivsi3>
 80032b0:	0003      	movs	r3, r0
 80032b2:	b2da      	uxtb	r2, r3
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	701a      	strb	r2, [r3, #0]
	seconds %= 3600;
 80032b8:	683a      	ldr	r2, [r7, #0]
 80032ba:	23e1      	movs	r3, #225	; 0xe1
 80032bc:	0119      	lsls	r1, r3, #4
 80032be:	0010      	movs	r0, r2
 80032c0:	f7fc ffb0 	bl	8000224 <__aeabi_uidivmod>
 80032c4:	000b      	movs	r3, r1
 80032c6:	603b      	str	r3, [r7, #0]
	t->min = seconds / 60;
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	213c      	movs	r1, #60	; 0x3c
 80032cc:	0018      	movs	r0, r3
 80032ce:	f7fc ff23 	bl	8000118 <__udivsi3>
 80032d2:	0003      	movs	r3, r0
 80032d4:	b2da      	uxtb	r2, r3
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	705a      	strb	r2, [r3, #1]
	seconds %= 60;
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	213c      	movs	r1, #60	; 0x3c
 80032de:	0018      	movs	r0, r3
 80032e0:	f7fc ffa0 	bl	8000224 <__aeabi_uidivmod>
 80032e4:	000b      	movs	r3, r1
 80032e6:	603b      	str	r3, [r7, #0]
	t->sec = seconds;
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	b2da      	uxtb	r2, r3
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	709a      	strb	r2, [r3, #2]
}
 80032f0:	46c0      	nop			; (mov r8, r8)
 80032f2:	46bd      	mov	sp, r7
 80032f4:	b002      	add	sp, #8
 80032f6:	bd80      	pop	{r7, pc}

080032f8 <weekdayCalculator>:
 * weekdays is 0-6, with 0 being sunday. hal uses 1=monday, 7=sunday - just call with % 7 to integrate with hal
 * months given in 1-12, with 1 being january. hal uses the same setup
 * rtc represents years with last 2 digits only. make sure year has all 4 numbers
 * should be accurate for any gregorian date
 */
uint8_t weekdayCalculator(uint16_t year, uint8_t month, uint8_t day) {
 80032f8:	b590      	push	{r4, r7, lr}
 80032fa:	b085      	sub	sp, #20
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	0004      	movs	r4, r0
 8003300:	0008      	movs	r0, r1
 8003302:	0011      	movs	r1, r2
 8003304:	1dbb      	adds	r3, r7, #6
 8003306:	1c22      	adds	r2, r4, #0
 8003308:	801a      	strh	r2, [r3, #0]
 800330a:	1d7b      	adds	r3, r7, #5
 800330c:	1c02      	adds	r2, r0, #0
 800330e:	701a      	strb	r2, [r3, #0]
 8003310:	1d3b      	adds	r3, r7, #4
 8003312:	1c0a      	adds	r2, r1, #0
 8003314:	701a      	strb	r2, [r3, #0]
	static uint8_t table[] = {0, 3, 2, 5, 0, 3, 5, 1, 4, 6, 2, 4};
	if (month < 3) year--;
 8003316:	1d7b      	adds	r3, r7, #5
 8003318:	781b      	ldrb	r3, [r3, #0]
 800331a:	2b02      	cmp	r3, #2
 800331c:	d804      	bhi.n	8003328 <weekdayCalculator+0x30>
 800331e:	1dbb      	adds	r3, r7, #6
 8003320:	881a      	ldrh	r2, [r3, #0]
 8003322:	1dbb      	adds	r3, r7, #6
 8003324:	3a01      	subs	r2, #1
 8003326:	801a      	strh	r2, [r3, #0]
	uint16_t temp = (year + year/4 - year/100 + year/400 + table[month-1] + day) % 7;
 8003328:	1dbb      	adds	r3, r7, #6
 800332a:	881b      	ldrh	r3, [r3, #0]
 800332c:	1dba      	adds	r2, r7, #6
 800332e:	8812      	ldrh	r2, [r2, #0]
 8003330:	0892      	lsrs	r2, r2, #2
 8003332:	b292      	uxth	r2, r2
 8003334:	189c      	adds	r4, r3, r2
 8003336:	1dbb      	adds	r3, r7, #6
 8003338:	881b      	ldrh	r3, [r3, #0]
 800333a:	2164      	movs	r1, #100	; 0x64
 800333c:	0018      	movs	r0, r3
 800333e:	f7fc feeb 	bl	8000118 <__udivsi3>
 8003342:	0003      	movs	r3, r0
 8003344:	b29b      	uxth	r3, r3
 8003346:	1ae4      	subs	r4, r4, r3
 8003348:	1dbb      	adds	r3, r7, #6
 800334a:	881a      	ldrh	r2, [r3, #0]
 800334c:	23c8      	movs	r3, #200	; 0xc8
 800334e:	0059      	lsls	r1, r3, #1
 8003350:	0010      	movs	r0, r2
 8003352:	f7fc fee1 	bl	8000118 <__udivsi3>
 8003356:	0003      	movs	r3, r0
 8003358:	b29b      	uxth	r3, r3
 800335a:	18e3      	adds	r3, r4, r3
 800335c:	1d7a      	adds	r2, r7, #5
 800335e:	7812      	ldrb	r2, [r2, #0]
 8003360:	3a01      	subs	r2, #1
 8003362:	490e      	ldr	r1, [pc, #56]	; (800339c <weekdayCalculator+0xa4>)
 8003364:	5c8a      	ldrb	r2, [r1, r2]
 8003366:	189a      	adds	r2, r3, r2
 8003368:	1d3b      	adds	r3, r7, #4
 800336a:	781b      	ldrb	r3, [r3, #0]
 800336c:	18d3      	adds	r3, r2, r3
 800336e:	2107      	movs	r1, #7
 8003370:	0018      	movs	r0, r3
 8003372:	f7fd f841 	bl	80003f8 <__aeabi_idivmod>
 8003376:	000b      	movs	r3, r1
 8003378:	001a      	movs	r2, r3
 800337a:	210e      	movs	r1, #14
 800337c:	187b      	adds	r3, r7, r1
 800337e:	801a      	strh	r2, [r3, #0]
	if (temp == 0) return RTC_WEEKDAY_SUNDAY;
 8003380:	187b      	adds	r3, r7, r1
 8003382:	881b      	ldrh	r3, [r3, #0]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d101      	bne.n	800338c <weekdayCalculator+0x94>
 8003388:	2307      	movs	r3, #7
 800338a:	e003      	b.n	8003394 <weekdayCalculator+0x9c>
	else return temp;
 800338c:	230e      	movs	r3, #14
 800338e:	18fb      	adds	r3, r7, r3
 8003390:	881b      	ldrh	r3, [r3, #0]
 8003392:	b2db      	uxtb	r3, r3
}
 8003394:	0018      	movs	r0, r3
 8003396:	46bd      	mov	sp, r7
 8003398:	b005      	add	sp, #20
 800339a:	bd90      	pop	{r4, r7, pc}
 800339c:	20000004 	.word	0x20000004

080033a0 <maxDaysInMonth>:

// calculator for number of days in a month given a month and accounting for leap years
// assumes month is 1-12, 1=january, 12=december
uint8_t maxDaysInMonth(uint8_t month, uint16_t year) {
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b082      	sub	sp, #8
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	0002      	movs	r2, r0
 80033a8:	1dfb      	adds	r3, r7, #7
 80033aa:	701a      	strb	r2, [r3, #0]
 80033ac:	1d3b      	adds	r3, r7, #4
 80033ae:	1c0a      	adds	r2, r1, #0
 80033b0:	801a      	strh	r2, [r3, #0]
	if (month == 0 || month > 12) return 0;		// bounds checking
 80033b2:	1dfb      	adds	r3, r7, #7
 80033b4:	781b      	ldrb	r3, [r3, #0]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d003      	beq.n	80033c2 <maxDaysInMonth+0x22>
 80033ba:	1dfb      	adds	r3, r7, #7
 80033bc:	781b      	ldrb	r3, [r3, #0]
 80033be:	2b0c      	cmp	r3, #12
 80033c0:	d901      	bls.n	80033c6 <maxDaysInMonth+0x26>
 80033c2:	2300      	movs	r3, #0
 80033c4:	e052      	b.n	800346c <maxDaysInMonth+0xcc>

	// not using built-in defines, because they're in BCD
	if (month == 1  ||		// january
 80033c6:	1dfb      	adds	r3, r7, #7
 80033c8:	781b      	ldrb	r3, [r3, #0]
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d017      	beq.n	80033fe <maxDaysInMonth+0x5e>
 80033ce:	1dfb      	adds	r3, r7, #7
 80033d0:	781b      	ldrb	r3, [r3, #0]
 80033d2:	2b03      	cmp	r3, #3
 80033d4:	d013      	beq.n	80033fe <maxDaysInMonth+0x5e>
		month == 3  ||		// march
 80033d6:	1dfb      	adds	r3, r7, #7
 80033d8:	781b      	ldrb	r3, [r3, #0]
 80033da:	2b05      	cmp	r3, #5
 80033dc:	d00f      	beq.n	80033fe <maxDaysInMonth+0x5e>
		month == 5  ||		// may
 80033de:	1dfb      	adds	r3, r7, #7
 80033e0:	781b      	ldrb	r3, [r3, #0]
 80033e2:	2b07      	cmp	r3, #7
 80033e4:	d00b      	beq.n	80033fe <maxDaysInMonth+0x5e>
		month == 7  ||		// july
 80033e6:	1dfb      	adds	r3, r7, #7
 80033e8:	781b      	ldrb	r3, [r3, #0]
 80033ea:	2b08      	cmp	r3, #8
 80033ec:	d007      	beq.n	80033fe <maxDaysInMonth+0x5e>
		month == 8  ||		// august
 80033ee:	1dfb      	adds	r3, r7, #7
 80033f0:	781b      	ldrb	r3, [r3, #0]
 80033f2:	2b0a      	cmp	r3, #10
 80033f4:	d003      	beq.n	80033fe <maxDaysInMonth+0x5e>
		month == 10 ||		// october
 80033f6:	1dfb      	adds	r3, r7, #7
 80033f8:	781b      	ldrb	r3, [r3, #0]
 80033fa:	2b0c      	cmp	r3, #12
 80033fc:	d101      	bne.n	8003402 <maxDaysInMonth+0x62>
		month == 12) {		// december
		return 31;
 80033fe:	231f      	movs	r3, #31
 8003400:	e034      	b.n	800346c <maxDaysInMonth+0xcc>
	}
	else if (month == 4 ||	// april
 8003402:	1dfb      	adds	r3, r7, #7
 8003404:	781b      	ldrb	r3, [r3, #0]
 8003406:	2b04      	cmp	r3, #4
 8003408:	d00b      	beq.n	8003422 <maxDaysInMonth+0x82>
 800340a:	1dfb      	adds	r3, r7, #7
 800340c:	781b      	ldrb	r3, [r3, #0]
 800340e:	2b06      	cmp	r3, #6
 8003410:	d007      	beq.n	8003422 <maxDaysInMonth+0x82>
			 month == 6 ||	// june
 8003412:	1dfb      	adds	r3, r7, #7
 8003414:	781b      	ldrb	r3, [r3, #0]
 8003416:	2b09      	cmp	r3, #9
 8003418:	d003      	beq.n	8003422 <maxDaysInMonth+0x82>
			 month == 9 ||	// september
 800341a:	1dfb      	adds	r3, r7, #7
 800341c:	781b      	ldrb	r3, [r3, #0]
 800341e:	2b0b      	cmp	r3, #11
 8003420:	d101      	bne.n	8003426 <maxDaysInMonth+0x86>
			 month == 11) {	// november
		return 30;
 8003422:	231e      	movs	r3, #30
 8003424:	e022      	b.n	800346c <maxDaysInMonth+0xcc>
	}

	// february/leap year calculator
	// leap year for every 4th year, but every 100th year is not a leap year except on every 400th year
	// ex. 2020 is a leap year, 2100 is not a leap year, 2000 is a leap year.
	else if (year % 400 == 0) return 29;
 8003426:	1d3b      	adds	r3, r7, #4
 8003428:	881a      	ldrh	r2, [r3, #0]
 800342a:	23c8      	movs	r3, #200	; 0xc8
 800342c:	0059      	lsls	r1, r3, #1
 800342e:	0010      	movs	r0, r2
 8003430:	f7fc fef8 	bl	8000224 <__aeabi_uidivmod>
 8003434:	000b      	movs	r3, r1
 8003436:	b29b      	uxth	r3, r3
 8003438:	2b00      	cmp	r3, #0
 800343a:	d101      	bne.n	8003440 <maxDaysInMonth+0xa0>
 800343c:	231d      	movs	r3, #29
 800343e:	e015      	b.n	800346c <maxDaysInMonth+0xcc>
	else if (year % 100 == 0) return 28;
 8003440:	1d3b      	adds	r3, r7, #4
 8003442:	881b      	ldrh	r3, [r3, #0]
 8003444:	2164      	movs	r1, #100	; 0x64
 8003446:	0018      	movs	r0, r3
 8003448:	f7fc feec 	bl	8000224 <__aeabi_uidivmod>
 800344c:	000b      	movs	r3, r1
 800344e:	b29b      	uxth	r3, r3
 8003450:	2b00      	cmp	r3, #0
 8003452:	d101      	bne.n	8003458 <maxDaysInMonth+0xb8>
 8003454:	231c      	movs	r3, #28
 8003456:	e009      	b.n	800346c <maxDaysInMonth+0xcc>
	else if (year % 4 == 0) return 29;
 8003458:	1d3b      	adds	r3, r7, #4
 800345a:	881b      	ldrh	r3, [r3, #0]
 800345c:	2203      	movs	r2, #3
 800345e:	4013      	ands	r3, r2
 8003460:	b29b      	uxth	r3, r3
 8003462:	2b00      	cmp	r3, #0
 8003464:	d101      	bne.n	800346a <maxDaysInMonth+0xca>
 8003466:	231d      	movs	r3, #29
 8003468:	e000      	b.n	800346c <maxDaysInMonth+0xcc>
	else return 28;
 800346a:	231c      	movs	r3, #28
}
 800346c:	0018      	movs	r0, r3
 800346e:	46bd      	mov	sp, r7
 8003470:	b002      	add	sp, #8
 8003472:	bd80      	pop	{r7, pc}

08003474 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003474:	b590      	push	{r4, r7, lr}
 8003476:	b083      	sub	sp, #12
 8003478:	af02      	add	r7, sp, #8
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800347a:	f002 ffa1 	bl	80063c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800347e:	f000 f88b 	bl	8003598 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003482:	f000 fcbb 	bl	8003dfc <MX_GPIO_Init>
  MX_SPI1_Init();
 8003486:	f000 fa55 	bl	8003934 <MX_SPI1_Init>
  MX_ADC_Init();
 800348a:	f000 f90d 	bl	80036a8 <MX_ADC_Init>
  MX_RTC_Init();
 800348e:	f000 f997 	bl	80037c0 <MX_RTC_Init>
  MX_TIM21_Init();
 8003492:	f000 fb6d 	bl	8003b70 <MX_TIM21_Init>
  MX_LPTIM1_Init();
 8003496:	f000 f96b 	bl	8003770 <MX_LPTIM1_Init>
  MX_DMA_Init();
 800349a:	f000 fc91 	bl	8003dc0 <MX_DMA_Init>
  MX_TIM22_Init();
 800349e:	f000 fbff 	bl	8003ca0 <MX_TIM22_Init>
  MX_TIM2_Init();
 80034a2:	f000 fa83 	bl	80039ac <MX_TIM2_Init>
  MX_TIM6_Init();
 80034a6:	f000 fb27 	bl	8003af8 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  	/* initialization for display */
	setRTCCalibration(-3, &hrtc);
 80034aa:	4a31      	ldr	r2, [pc, #196]	; (8003570 <main+0xfc>)
 80034ac:	2303      	movs	r3, #3
 80034ae:	425b      	negs	r3, r3
 80034b0:	0011      	movs	r1, r2
 80034b2:	0018      	movs	r0, r3
 80034b4:	f7ff fe72 	bl	800319c <setRTCCalibration>
//	HAL_Delay(2000);
//	HAL_GPIO_WritePin(POWER_SUPPLY_ENABLE_PORT, POWER_SUPPLY_ENABLE_PIN, GPIO_PIN_SET);
	TFT_startup(&hspi1);
 80034b8:	4b2e      	ldr	r3, [pc, #184]	; (8003574 <main+0x100>)
 80034ba:	0018      	movs	r0, r3
 80034bc:	f7fe fa30 	bl	8001920 <TFT_startup>
	clearScreen(ST77XX_BLACK, &hspi1);
 80034c0:	4b2c      	ldr	r3, [pc, #176]	; (8003574 <main+0x100>)
 80034c2:	0019      	movs	r1, r3
 80034c4:	2000      	movs	r0, #0
 80034c6:	f7ff fb1b 	bl	8002b00 <clearScreen>

	/* start updating display for ui */
	initFace();
 80034ca:	f002 ff19 	bl	8006300 <initFace>
	setClockAlarm(&hrtc);
 80034ce:	4b28      	ldr	r3, [pc, #160]	; (8003570 <main+0xfc>)
 80034d0:	0018      	movs	r0, r3
 80034d2:	f7ff fd14 	bl	8002efe <setClockAlarm>
	runTimerStopwatchBase(&htim21);
 80034d6:	4b28      	ldr	r3, [pc, #160]	; (8003578 <main+0x104>)
 80034d8:	0018      	movs	r0, r3
 80034da:	f001 f9eb 	bl	80048b4 <runTimerStopwatchBase>
	runBacklightMotorBase(&htim2);
 80034de:	4b27      	ldr	r3, [pc, #156]	; (800357c <main+0x108>)
 80034e0:	0018      	movs	r0, r3
 80034e2:	f001 fa3f 	bl	8004964 <runBacklightMotorBase>
	runADCSampler(&htim22);
 80034e6:	4b26      	ldr	r3, [pc, #152]	; (8003580 <main+0x10c>)
 80034e8:	0018      	movs	r0, r3
 80034ea:	f001 f9ef 	bl	80048cc <runADCSampler>
//		testBatteryCalculator(&hadc, &hspi1);

		// ui/nav tests or full run. uncomment when ready
		// to have state code execute in order from top-down, instead of executing wherever
		// need to note sections that need to execute outside of buttons
		if (buttons.is1Pressed || buttons.is2Pressed || buttons.is3Pressed || buttons.is4Pressed) {
 80034ee:	4b25      	ldr	r3, [pc, #148]	; (8003584 <main+0x110>)
 80034f0:	781b      	ldrb	r3, [r3, #0]
 80034f2:	b2db      	uxtb	r3, r3
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d10e      	bne.n	8003516 <main+0xa2>
 80034f8:	4b22      	ldr	r3, [pc, #136]	; (8003584 <main+0x110>)
 80034fa:	785b      	ldrb	r3, [r3, #1]
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d109      	bne.n	8003516 <main+0xa2>
 8003502:	4b20      	ldr	r3, [pc, #128]	; (8003584 <main+0x110>)
 8003504:	789b      	ldrb	r3, [r3, #2]
 8003506:	b2db      	uxtb	r3, r3
 8003508:	2b00      	cmp	r3, #0
 800350a:	d104      	bne.n	8003516 <main+0xa2>
 800350c:	4b1d      	ldr	r3, [pc, #116]	; (8003584 <main+0x110>)
 800350e:	78db      	ldrb	r3, [r3, #3]
 8003510:	b2db      	uxtb	r3, r3
 8003512:	2b00      	cmp	r3, #0
 8003514:	d008      	beq.n	8003528 <main+0xb4>
//			runMotor(&htim2);
//			buttons.is1Pressed = buttons.is2Pressed = buttons.is3Pressed = buttons.is4Pressed = 0;
			updateState(&hrtc, &htim21, &htim2, &htim6, &hspi1);
 8003516:	4c1c      	ldr	r4, [pc, #112]	; (8003588 <main+0x114>)
 8003518:	4a18      	ldr	r2, [pc, #96]	; (800357c <main+0x108>)
 800351a:	4917      	ldr	r1, [pc, #92]	; (8003578 <main+0x104>)
 800351c:	4814      	ldr	r0, [pc, #80]	; (8003570 <main+0xfc>)
 800351e:	4b15      	ldr	r3, [pc, #84]	; (8003574 <main+0x100>)
 8003520:	9300      	str	r3, [sp, #0]
 8003522:	0023      	movs	r3, r4
 8003524:	f001 fa72 	bl	8004a0c <updateState>
		}

		updateDisplay(&hrtc, &hspi1);
 8003528:	4a12      	ldr	r2, [pc, #72]	; (8003574 <main+0x100>)
 800352a:	4b11      	ldr	r3, [pc, #68]	; (8003570 <main+0xfc>)
 800352c:	0011      	movs	r1, r2
 800352e:	0018      	movs	r0, r3
 8003530:	f002 f868 	bl	8005604 <updateDisplay>
		batteryManager(&hadc, &hspi1);
 8003534:	4a0f      	ldr	r2, [pc, #60]	; (8003574 <main+0x100>)
 8003536:	4b15      	ldr	r3, [pc, #84]	; (800358c <main+0x118>)
 8003538:	0011      	movs	r1, r2
 800353a:	0018      	movs	r0, r3
 800353c:	f7ff faf8 	bl	8002b30 <batteryManager>

		if (isTimerDone || isAlarmDone) {
 8003540:	4b13      	ldr	r3, [pc, #76]	; (8003590 <main+0x11c>)
 8003542:	781b      	ldrb	r3, [r3, #0]
 8003544:	b2db      	uxtb	r3, r3
 8003546:	2b00      	cmp	r3, #0
 8003548:	d104      	bne.n	8003554 <main+0xe0>
 800354a:	4b12      	ldr	r3, [pc, #72]	; (8003594 <main+0x120>)
 800354c:	781b      	ldrb	r3, [r3, #0]
 800354e:	b2db      	uxtb	r3, r3
 8003550:	2b00      	cmp	r3, #0
 8003552:	d00a      	beq.n	800356a <main+0xf6>
			runMotor(&htim2);
 8003554:	4b09      	ldr	r3, [pc, #36]	; (800357c <main+0x108>)
 8003556:	0018      	movs	r0, r3
 8003558:	f001 f9ca 	bl	80048f0 <runMotor>
			isTimerDone = isAlarmDone = 0;
 800355c:	2100      	movs	r1, #0
 800355e:	4b0d      	ldr	r3, [pc, #52]	; (8003594 <main+0x120>)
 8003560:	1c0a      	adds	r2, r1, #0
 8003562:	701a      	strb	r2, [r3, #0]
 8003564:	4b0a      	ldr	r3, [pc, #40]	; (8003590 <main+0x11c>)
 8003566:	1c0a      	adds	r2, r1, #0
 8003568:	701a      	strb	r2, [r3, #0]
  \brief   Wait For Interrupt
  \details Wait For Interrupt is a hint instruction that suspends execution until one of a number of events occurs.
 */
__attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
 800356a:	bf30      	wfi
		if (buttons.is1Pressed || buttons.is2Pressed || buttons.is3Pressed || buttons.is4Pressed) {
 800356c:	e7bf      	b.n	80034ee <main+0x7a>
 800356e:	46c0      	nop			; (mov r8, r8)
 8003570:	20000208 	.word	0x20000208
 8003574:	2000022c 	.word	0x2000022c
 8003578:	20000364 	.word	0x20000364
 800357c:	20000284 	.word	0x20000284
 8003580:	2000019c 	.word	0x2000019c
 8003584:	20000190 	.word	0x20000190
 8003588:	20000154 	.word	0x20000154
 800358c:	200002c0 	.word	0x200002c0
 8003590:	20000150 	.word	0x20000150
 8003594:	20000142 	.word	0x20000142

08003598 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003598:	b590      	push	{r4, r7, lr}
 800359a:	b09f      	sub	sp, #124	; 0x7c
 800359c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800359e:	2440      	movs	r4, #64	; 0x40
 80035a0:	193b      	adds	r3, r7, r4
 80035a2:	0018      	movs	r0, r3
 80035a4:	2338      	movs	r3, #56	; 0x38
 80035a6:	001a      	movs	r2, r3
 80035a8:	2100      	movs	r1, #0
 80035aa:	f007 fb06 	bl	800abba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80035ae:	232c      	movs	r3, #44	; 0x2c
 80035b0:	18fb      	adds	r3, r7, r3
 80035b2:	0018      	movs	r0, r3
 80035b4:	2314      	movs	r3, #20
 80035b6:	001a      	movs	r2, r3
 80035b8:	2100      	movs	r1, #0
 80035ba:	f007 fafe 	bl	800abba <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80035be:	1d3b      	adds	r3, r7, #4
 80035c0:	0018      	movs	r0, r3
 80035c2:	2328      	movs	r3, #40	; 0x28
 80035c4:	001a      	movs	r2, r3
 80035c6:	2100      	movs	r1, #0
 80035c8:	f007 faf7 	bl	800abba <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80035cc:	4b33      	ldr	r3, [pc, #204]	; (800369c <SystemClock_Config+0x104>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a33      	ldr	r2, [pc, #204]	; (80036a0 <SystemClock_Config+0x108>)
 80035d2:	401a      	ands	r2, r3
 80035d4:	4b31      	ldr	r3, [pc, #196]	; (800369c <SystemClock_Config+0x104>)
 80035d6:	2180      	movs	r1, #128	; 0x80
 80035d8:	0109      	lsls	r1, r1, #4
 80035da:	430a      	orrs	r2, r1
 80035dc:	601a      	str	r2, [r3, #0]
  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 80035de:	f004 f9d1 	bl	8007984 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80035e2:	4b30      	ldr	r3, [pc, #192]	; (80036a4 <SystemClock_Config+0x10c>)
 80035e4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80035e6:	4b2f      	ldr	r3, [pc, #188]	; (80036a4 <SystemClock_Config+0x10c>)
 80035e8:	492d      	ldr	r1, [pc, #180]	; (80036a0 <SystemClock_Config+0x108>)
 80035ea:	400a      	ands	r2, r1
 80035ec:	651a      	str	r2, [r3, #80]	; 0x50
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 80035ee:	193b      	adds	r3, r7, r4
 80035f0:	2226      	movs	r2, #38	; 0x26
 80035f2:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80035f4:	193b      	adds	r3, r7, r4
 80035f6:	2280      	movs	r2, #128	; 0x80
 80035f8:	0052      	lsls	r2, r2, #1
 80035fa:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80035fc:	0021      	movs	r1, r4
 80035fe:	187b      	adds	r3, r7, r1
 8003600:	2201      	movs	r2, #1
 8003602:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003604:	187b      	adds	r3, r7, r1
 8003606:	2210      	movs	r2, #16
 8003608:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800360a:	187b      	adds	r3, r7, r1
 800360c:	2201      	movs	r2, #1
 800360e:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003610:	187b      	adds	r3, r7, r1
 8003612:	2202      	movs	r2, #2
 8003614:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003616:	187b      	adds	r3, r7, r1
 8003618:	2200      	movs	r2, #0
 800361a:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 800361c:	187b      	adds	r3, r7, r1
 800361e:	2280      	movs	r2, #128	; 0x80
 8003620:	02d2      	lsls	r2, r2, #11
 8003622:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8003624:	187b      	adds	r3, r7, r1
 8003626:	2280      	movs	r2, #128	; 0x80
 8003628:	03d2      	lsls	r2, r2, #15
 800362a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800362c:	187b      	adds	r3, r7, r1
 800362e:	0018      	movs	r0, r3
 8003630:	f004 f9b6 	bl	80079a0 <HAL_RCC_OscConfig>
 8003634:	1e03      	subs	r3, r0, #0
 8003636:	d001      	beq.n	800363c <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8003638:	f000 fc78 	bl	8003f2c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800363c:	212c      	movs	r1, #44	; 0x2c
 800363e:	187b      	adds	r3, r7, r1
 8003640:	220f      	movs	r2, #15
 8003642:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003644:	187b      	adds	r3, r7, r1
 8003646:	2203      	movs	r2, #3
 8003648:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800364a:	187b      	adds	r3, r7, r1
 800364c:	2200      	movs	r2, #0
 800364e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003650:	187b      	adds	r3, r7, r1
 8003652:	2200      	movs	r2, #0
 8003654:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003656:	187b      	adds	r3, r7, r1
 8003658:	2200      	movs	r2, #0
 800365a:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800365c:	187b      	adds	r3, r7, r1
 800365e:	2101      	movs	r1, #1
 8003660:	0018      	movs	r0, r3
 8003662:	f004 fd6d 	bl	8008140 <HAL_RCC_ClockConfig>
 8003666:	1e03      	subs	r3, r0, #0
 8003668:	d001      	beq.n	800366e <SystemClock_Config+0xd6>
  {
    Error_Handler();
 800366a:	f000 fc5f 	bl	8003f2c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_LPTIM1;
 800366e:	1d3b      	adds	r3, r7, #4
 8003670:	22a0      	movs	r2, #160	; 0xa0
 8003672:	601a      	str	r2, [r3, #0]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003674:	1d3b      	adds	r3, r7, #4
 8003676:	2280      	movs	r2, #128	; 0x80
 8003678:	0252      	lsls	r2, r2, #9
 800367a:	605a      	str	r2, [r3, #4]
  PeriphClkInit.LptimClockSelection = RCC_LPTIM1CLKSOURCE_LSE;
 800367c:	1d3b      	adds	r3, r7, #4
 800367e:	22c0      	movs	r2, #192	; 0xc0
 8003680:	0312      	lsls	r2, r2, #12
 8003682:	621a      	str	r2, [r3, #32]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003684:	1d3b      	adds	r3, r7, #4
 8003686:	0018      	movs	r0, r3
 8003688:	f004 ff08 	bl	800849c <HAL_RCCEx_PeriphCLKConfig>
 800368c:	1e03      	subs	r3, r0, #0
 800368e:	d001      	beq.n	8003694 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8003690:	f000 fc4c 	bl	8003f2c <Error_Handler>
  }
}
 8003694:	46c0      	nop			; (mov r8, r8)
 8003696:	46bd      	mov	sp, r7
 8003698:	b01f      	add	sp, #124	; 0x7c
 800369a:	bd90      	pop	{r4, r7, pc}
 800369c:	40007000 	.word	0x40007000
 80036a0:	ffffe7ff 	.word	0xffffe7ff
 80036a4:	40021000 	.word	0x40021000

080036a8 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b082      	sub	sp, #8
 80036ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80036ae:	003b      	movs	r3, r7
 80036b0:	0018      	movs	r0, r3
 80036b2:	2308      	movs	r3, #8
 80036b4:	001a      	movs	r2, r3
 80036b6:	2100      	movs	r1, #0
 80036b8:	f007 fa7f 	bl	800abba <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc.Instance = ADC1;
 80036bc:	4b2a      	ldr	r3, [pc, #168]	; (8003768 <MX_ADC_Init+0xc0>)
 80036be:	4a2b      	ldr	r2, [pc, #172]	; (800376c <MX_ADC_Init+0xc4>)
 80036c0:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 80036c2:	4b29      	ldr	r3, [pc, #164]	; (8003768 <MX_ADC_Init+0xc0>)
 80036c4:	2200      	movs	r2, #0
 80036c6:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80036c8:	4b27      	ldr	r3, [pc, #156]	; (8003768 <MX_ADC_Init+0xc0>)
 80036ca:	2280      	movs	r2, #128	; 0x80
 80036cc:	05d2      	lsls	r2, r2, #23
 80036ce:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80036d0:	4b25      	ldr	r3, [pc, #148]	; (8003768 <MX_ADC_Init+0xc0>)
 80036d2:	2200      	movs	r2, #0
 80036d4:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_79CYCLES_5;
 80036d6:	4b24      	ldr	r3, [pc, #144]	; (8003768 <MX_ADC_Init+0xc0>)
 80036d8:	2206      	movs	r2, #6
 80036da:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80036dc:	4b22      	ldr	r3, [pc, #136]	; (8003768 <MX_ADC_Init+0xc0>)
 80036de:	2201      	movs	r2, #1
 80036e0:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80036e2:	4b21      	ldr	r3, [pc, #132]	; (8003768 <MX_ADC_Init+0xc0>)
 80036e4:	2200      	movs	r2, #0
 80036e6:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 80036e8:	4b1f      	ldr	r3, [pc, #124]	; (8003768 <MX_ADC_Init+0xc0>)
 80036ea:	2220      	movs	r2, #32
 80036ec:	2100      	movs	r1, #0
 80036ee:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80036f0:	4b1d      	ldr	r3, [pc, #116]	; (8003768 <MX_ADC_Init+0xc0>)
 80036f2:	2221      	movs	r2, #33	; 0x21
 80036f4:	2100      	movs	r1, #0
 80036f6:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80036f8:	4b1b      	ldr	r3, [pc, #108]	; (8003768 <MX_ADC_Init+0xc0>)
 80036fa:	2200      	movs	r2, #0
 80036fc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80036fe:	4b1a      	ldr	r3, [pc, #104]	; (8003768 <MX_ADC_Init+0xc0>)
 8003700:	22c2      	movs	r2, #194	; 0xc2
 8003702:	32ff      	adds	r2, #255	; 0xff
 8003704:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8003706:	4b18      	ldr	r3, [pc, #96]	; (8003768 <MX_ADC_Init+0xc0>)
 8003708:	222c      	movs	r2, #44	; 0x2c
 800370a:	2100      	movs	r1, #0
 800370c:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800370e:	4b16      	ldr	r3, [pc, #88]	; (8003768 <MX_ADC_Init+0xc0>)
 8003710:	2204      	movs	r2, #4
 8003712:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003714:	4b14      	ldr	r3, [pc, #80]	; (8003768 <MX_ADC_Init+0xc0>)
 8003716:	2200      	movs	r2, #0
 8003718:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 800371a:	4b13      	ldr	r3, [pc, #76]	; (8003768 <MX_ADC_Init+0xc0>)
 800371c:	2200      	movs	r2, #0
 800371e:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8003720:	4b11      	ldr	r3, [pc, #68]	; (8003768 <MX_ADC_Init+0xc0>)
 8003722:	2200      	movs	r2, #0
 8003724:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8003726:	4b10      	ldr	r3, [pc, #64]	; (8003768 <MX_ADC_Init+0xc0>)
 8003728:	2200      	movs	r2, #0
 800372a:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800372c:	4b0e      	ldr	r3, [pc, #56]	; (8003768 <MX_ADC_Init+0xc0>)
 800372e:	0018      	movs	r0, r3
 8003730:	f002 fec4 	bl	80064bc <HAL_ADC_Init>
 8003734:	1e03      	subs	r3, r0, #0
 8003736:	d001      	beq.n	800373c <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8003738:	f000 fbf8 	bl	8003f2c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800373c:	003b      	movs	r3, r7
 800373e:	2201      	movs	r2, #1
 8003740:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8003742:	003b      	movs	r3, r7
 8003744:	2280      	movs	r2, #128	; 0x80
 8003746:	0152      	lsls	r2, r2, #5
 8003748:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800374a:	003a      	movs	r2, r7
 800374c:	4b06      	ldr	r3, [pc, #24]	; (8003768 <MX_ADC_Init+0xc0>)
 800374e:	0011      	movs	r1, r2
 8003750:	0018      	movs	r0, r3
 8003752:	f003 f97b 	bl	8006a4c <HAL_ADC_ConfigChannel>
 8003756:	1e03      	subs	r3, r0, #0
 8003758:	d001      	beq.n	800375e <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 800375a:	f000 fbe7 	bl	8003f2c <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800375e:	46c0      	nop			; (mov r8, r8)
 8003760:	46bd      	mov	sp, r7
 8003762:	b002      	add	sp, #8
 8003764:	bd80      	pop	{r7, pc}
 8003766:	46c0      	nop			; (mov r8, r8)
 8003768:	200002c0 	.word	0x200002c0
 800376c:	40012400 	.word	0x40012400

08003770 <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8003774:	4b0f      	ldr	r3, [pc, #60]	; (80037b4 <MX_LPTIM1_Init+0x44>)
 8003776:	4a10      	ldr	r2, [pc, #64]	; (80037b8 <MX_LPTIM1_Init+0x48>)
 8003778:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 800377a:	4b0e      	ldr	r3, [pc, #56]	; (80037b4 <MX_LPTIM1_Init+0x44>)
 800377c:	2200      	movs	r2, #0
 800377e:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8003780:	4b0c      	ldr	r3, [pc, #48]	; (80037b4 <MX_LPTIM1_Init+0x44>)
 8003782:	2200      	movs	r2, #0
 8003784:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8003786:	4b0b      	ldr	r3, [pc, #44]	; (80037b4 <MX_LPTIM1_Init+0x44>)
 8003788:	4a0c      	ldr	r2, [pc, #48]	; (80037bc <MX_LPTIM1_Init+0x4c>)
 800378a:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 800378c:	4b09      	ldr	r3, [pc, #36]	; (80037b4 <MX_LPTIM1_Init+0x44>)
 800378e:	2200      	movs	r2, #0
 8003790:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8003792:	4b08      	ldr	r3, [pc, #32]	; (80037b4 <MX_LPTIM1_Init+0x44>)
 8003794:	2200      	movs	r2, #0
 8003796:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8003798:	4b06      	ldr	r3, [pc, #24]	; (80037b4 <MX_LPTIM1_Init+0x44>)
 800379a:	2200      	movs	r2, #0
 800379c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 800379e:	4b05      	ldr	r3, [pc, #20]	; (80037b4 <MX_LPTIM1_Init+0x44>)
 80037a0:	0018      	movs	r0, r3
 80037a2:	f003 ff95 	bl	80076d0 <HAL_LPTIM_Init>
 80037a6:	1e03      	subs	r3, r0, #0
 80037a8:	d001      	beq.n	80037ae <MX_LPTIM1_Init+0x3e>
  {
    Error_Handler();
 80037aa:	f000 fbbf 	bl	8003f2c <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 80037ae:	46c0      	nop			; (mov r8, r8)
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}
 80037b4:	200001d8 	.word	0x200001d8
 80037b8:	40007c00 	.word	0x40007c00
 80037bc:	0000ffff 	.word	0x0000ffff

080037c0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b090      	sub	sp, #64	; 0x40
 80037c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80037c6:	232c      	movs	r3, #44	; 0x2c
 80037c8:	18fb      	adds	r3, r7, r3
 80037ca:	0018      	movs	r0, r3
 80037cc:	2314      	movs	r3, #20
 80037ce:	001a      	movs	r2, r3
 80037d0:	2100      	movs	r1, #0
 80037d2:	f007 f9f2 	bl	800abba <memset>
  RTC_DateTypeDef sDate = {0};
 80037d6:	2328      	movs	r3, #40	; 0x28
 80037d8:	18fb      	adds	r3, r7, r3
 80037da:	2200      	movs	r2, #0
 80037dc:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 80037de:	003b      	movs	r3, r7
 80037e0:	0018      	movs	r0, r3
 80037e2:	2328      	movs	r3, #40	; 0x28
 80037e4:	001a      	movs	r2, r3
 80037e6:	2100      	movs	r1, #0
 80037e8:	f007 f9e7 	bl	800abba <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 80037ec:	4b4f      	ldr	r3, [pc, #316]	; (800392c <MX_RTC_Init+0x16c>)
 80037ee:	4a50      	ldr	r2, [pc, #320]	; (8003930 <MX_RTC_Init+0x170>)
 80037f0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80037f2:	4b4e      	ldr	r3, [pc, #312]	; (800392c <MX_RTC_Init+0x16c>)
 80037f4:	2200      	movs	r2, #0
 80037f6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80037f8:	4b4c      	ldr	r3, [pc, #304]	; (800392c <MX_RTC_Init+0x16c>)
 80037fa:	227f      	movs	r2, #127	; 0x7f
 80037fc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80037fe:	4b4b      	ldr	r3, [pc, #300]	; (800392c <MX_RTC_Init+0x16c>)
 8003800:	22ff      	movs	r2, #255	; 0xff
 8003802:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003804:	4b49      	ldr	r3, [pc, #292]	; (800392c <MX_RTC_Init+0x16c>)
 8003806:	2200      	movs	r2, #0
 8003808:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800380a:	4b48      	ldr	r3, [pc, #288]	; (800392c <MX_RTC_Init+0x16c>)
 800380c:	2200      	movs	r2, #0
 800380e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003810:	4b46      	ldr	r3, [pc, #280]	; (800392c <MX_RTC_Init+0x16c>)
 8003812:	2200      	movs	r2, #0
 8003814:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003816:	4b45      	ldr	r3, [pc, #276]	; (800392c <MX_RTC_Init+0x16c>)
 8003818:	2200      	movs	r2, #0
 800381a:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800381c:	4b43      	ldr	r3, [pc, #268]	; (800392c <MX_RTC_Init+0x16c>)
 800381e:	0018      	movs	r0, r3
 8003820:	f004 ffb0 	bl	8008784 <HAL_RTC_Init>
 8003824:	1e03      	subs	r3, r0, #0
 8003826:	d001      	beq.n	800382c <MX_RTC_Init+0x6c>
  {
    Error_Handler();
 8003828:	f000 fb80 	bl	8003f2c <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0;
 800382c:	212c      	movs	r1, #44	; 0x2c
 800382e:	187b      	adds	r3, r7, r1
 8003830:	2200      	movs	r2, #0
 8003832:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0;
 8003834:	187b      	adds	r3, r7, r1
 8003836:	2200      	movs	r2, #0
 8003838:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 800383a:	187b      	adds	r3, r7, r1
 800383c:	2200      	movs	r2, #0
 800383e:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003840:	187b      	adds	r3, r7, r1
 8003842:	2200      	movs	r2, #0
 8003844:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003846:	187b      	adds	r3, r7, r1
 8003848:	2200      	movs	r2, #0
 800384a:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800384c:	1879      	adds	r1, r7, r1
 800384e:	4b37      	ldr	r3, [pc, #220]	; (800392c <MX_RTC_Init+0x16c>)
 8003850:	2200      	movs	r2, #0
 8003852:	0018      	movs	r0, r3
 8003854:	f005 f834 	bl	80088c0 <HAL_RTC_SetTime>
 8003858:	1e03      	subs	r3, r0, #0
 800385a:	d001      	beq.n	8003860 <MX_RTC_Init+0xa0>
  {
    Error_Handler();
 800385c:	f000 fb66 	bl	8003f2c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SUNDAY;
 8003860:	2128      	movs	r1, #40	; 0x28
 8003862:	187b      	adds	r3, r7, r1
 8003864:	2207      	movs	r2, #7
 8003866:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_DECEMBER;
 8003868:	187b      	adds	r3, r7, r1
 800386a:	2212      	movs	r2, #18
 800386c:	705a      	strb	r2, [r3, #1]
  sDate.Date = 1;
 800386e:	187b      	adds	r3, r7, r1
 8003870:	2201      	movs	r2, #1
 8003872:	709a      	strb	r2, [r3, #2]
  sDate.Year = 19;
 8003874:	187b      	adds	r3, r7, r1
 8003876:	2213      	movs	r2, #19
 8003878:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800387a:	1879      	adds	r1, r7, r1
 800387c:	4b2b      	ldr	r3, [pc, #172]	; (800392c <MX_RTC_Init+0x16c>)
 800387e:	2200      	movs	r2, #0
 8003880:	0018      	movs	r0, r3
 8003882:	f005 f93d 	bl	8008b00 <HAL_RTC_SetDate>
 8003886:	1e03      	subs	r3, r0, #0
 8003888:	d001      	beq.n	800388e <MX_RTC_Init+0xce>
  {
    Error_Handler();
 800388a:	f000 fb4f 	bl	8003f2c <Error_Handler>
  }
  /** Enable the Alarm A 
  */
  sAlarm.AlarmTime.Hours = 0;
 800388e:	003b      	movs	r3, r7
 8003890:	2200      	movs	r2, #0
 8003892:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0;
 8003894:	003b      	movs	r3, r7
 8003896:	2200      	movs	r2, #0
 8003898:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0;
 800389a:	003b      	movs	r3, r7
 800389c:	2200      	movs	r2, #0
 800389e:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 80038a0:	003b      	movs	r3, r7
 80038a2:	2200      	movs	r2, #0
 80038a4:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80038a6:	003b      	movs	r3, r7
 80038a8:	2200      	movs	r2, #0
 80038aa:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80038ac:	003b      	movs	r3, r7
 80038ae:	2200      	movs	r2, #0
 80038b0:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80038b2:	003b      	movs	r3, r7
 80038b4:	2200      	movs	r2, #0
 80038b6:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80038b8:	003b      	movs	r3, r7
 80038ba:	2200      	movs	r2, #0
 80038bc:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80038be:	003b      	movs	r3, r7
 80038c0:	2200      	movs	r2, #0
 80038c2:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 1;
 80038c4:	003b      	movs	r3, r7
 80038c6:	2220      	movs	r2, #32
 80038c8:	2101      	movs	r1, #1
 80038ca:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 80038cc:	003b      	movs	r3, r7
 80038ce:	2280      	movs	r2, #128	; 0x80
 80038d0:	0052      	lsls	r2, r2, #1
 80038d2:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 80038d4:	0039      	movs	r1, r7
 80038d6:	4b15      	ldr	r3, [pc, #84]	; (800392c <MX_RTC_Init+0x16c>)
 80038d8:	2200      	movs	r2, #0
 80038da:	0018      	movs	r0, r3
 80038dc:	f005 fa0c 	bl	8008cf8 <HAL_RTC_SetAlarm_IT>
 80038e0:	1e03      	subs	r3, r0, #0
 80038e2:	d001      	beq.n	80038e8 <MX_RTC_Init+0x128>
  {
    Error_Handler();
 80038e4:	f000 fb22 	bl	8003f2c <Error_Handler>
  }
  /** Enable the Alarm B 
  */
  sAlarm.AlarmDateWeekDay = 1;
 80038e8:	003b      	movs	r3, r7
 80038ea:	2220      	movs	r2, #32
 80038ec:	2101      	movs	r1, #1
 80038ee:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_B;
 80038f0:	003b      	movs	r3, r7
 80038f2:	2280      	movs	r2, #128	; 0x80
 80038f4:	0092      	lsls	r2, r2, #2
 80038f6:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 80038f8:	0039      	movs	r1, r7
 80038fa:	4b0c      	ldr	r3, [pc, #48]	; (800392c <MX_RTC_Init+0x16c>)
 80038fc:	2200      	movs	r2, #0
 80038fe:	0018      	movs	r0, r3
 8003900:	f005 f9fa 	bl	8008cf8 <HAL_RTC_SetAlarm_IT>
 8003904:	1e03      	subs	r3, r0, #0
 8003906:	d001      	beq.n	800390c <MX_RTC_Init+0x14c>
  {
    Error_Handler();
 8003908:	f000 fb10 	bl	8003f2c <Error_Handler>
  }
  /** Enable Calibrartion 
  */
  if (HAL_RTCEx_SetCalibrationOutPut(&hrtc, RTC_CALIBOUTPUT_1HZ) != HAL_OK)
 800390c:	2380      	movs	r3, #128	; 0x80
 800390e:	031a      	lsls	r2, r3, #12
 8003910:	4b06      	ldr	r3, [pc, #24]	; (800392c <MX_RTC_Init+0x16c>)
 8003912:	0011      	movs	r1, r2
 8003914:	0018      	movs	r0, r3
 8003916:	f005 fd23 	bl	8009360 <HAL_RTCEx_SetCalibrationOutPut>
 800391a:	1e03      	subs	r3, r0, #0
 800391c:	d001      	beq.n	8003922 <MX_RTC_Init+0x162>
  {
    Error_Handler();
 800391e:	f000 fb05 	bl	8003f2c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8003922:	46c0      	nop			; (mov r8, r8)
 8003924:	46bd      	mov	sp, r7
 8003926:	b010      	add	sp, #64	; 0x40
 8003928:	bd80      	pop	{r7, pc}
 800392a:	46c0      	nop			; (mov r8, r8)
 800392c:	20000208 	.word	0x20000208
 8003930:	40002800 	.word	0x40002800

08003934 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003938:	4b19      	ldr	r3, [pc, #100]	; (80039a0 <MX_SPI1_Init+0x6c>)
 800393a:	4a1a      	ldr	r2, [pc, #104]	; (80039a4 <MX_SPI1_Init+0x70>)
 800393c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800393e:	4b18      	ldr	r3, [pc, #96]	; (80039a0 <MX_SPI1_Init+0x6c>)
 8003940:	2282      	movs	r2, #130	; 0x82
 8003942:	0052      	lsls	r2, r2, #1
 8003944:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003946:	4b16      	ldr	r3, [pc, #88]	; (80039a0 <MX_SPI1_Init+0x6c>)
 8003948:	2200      	movs	r2, #0
 800394a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800394c:	4b14      	ldr	r3, [pc, #80]	; (80039a0 <MX_SPI1_Init+0x6c>)
 800394e:	2200      	movs	r2, #0
 8003950:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003952:	4b13      	ldr	r3, [pc, #76]	; (80039a0 <MX_SPI1_Init+0x6c>)
 8003954:	2200      	movs	r2, #0
 8003956:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003958:	4b11      	ldr	r3, [pc, #68]	; (80039a0 <MX_SPI1_Init+0x6c>)
 800395a:	2200      	movs	r2, #0
 800395c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800395e:	4b10      	ldr	r3, [pc, #64]	; (80039a0 <MX_SPI1_Init+0x6c>)
 8003960:	2280      	movs	r2, #128	; 0x80
 8003962:	0092      	lsls	r2, r2, #2
 8003964:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003966:	4b0e      	ldr	r3, [pc, #56]	; (80039a0 <MX_SPI1_Init+0x6c>)
 8003968:	2200      	movs	r2, #0
 800396a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800396c:	4b0c      	ldr	r3, [pc, #48]	; (80039a0 <MX_SPI1_Init+0x6c>)
 800396e:	2200      	movs	r2, #0
 8003970:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003972:	4b0b      	ldr	r3, [pc, #44]	; (80039a0 <MX_SPI1_Init+0x6c>)
 8003974:	2200      	movs	r2, #0
 8003976:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003978:	4b09      	ldr	r3, [pc, #36]	; (80039a0 <MX_SPI1_Init+0x6c>)
 800397a:	2200      	movs	r2, #0
 800397c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800397e:	4b08      	ldr	r3, [pc, #32]	; (80039a0 <MX_SPI1_Init+0x6c>)
 8003980:	2207      	movs	r2, #7
 8003982:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003984:	4b06      	ldr	r3, [pc, #24]	; (80039a0 <MX_SPI1_Init+0x6c>)
 8003986:	0018      	movs	r0, r3
 8003988:	f005 fd32 	bl	80093f0 <HAL_SPI_Init>
 800398c:	1e03      	subs	r3, r0, #0
 800398e:	d001      	beq.n	8003994 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003990:	f000 facc 	bl	8003f2c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
  hspi1.hdmatx = &hdma_spi1_tx;
 8003994:	4b02      	ldr	r3, [pc, #8]	; (80039a0 <MX_SPI1_Init+0x6c>)
 8003996:	4a04      	ldr	r2, [pc, #16]	; (80039a8 <MX_SPI1_Init+0x74>)
 8003998:	649a      	str	r2, [r3, #72]	; 0x48
  /* USER CODE END SPI1_Init 2 */

}
 800399a:	46c0      	nop			; (mov r8, r8)
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}
 80039a0:	2000022c 	.word	0x2000022c
 80039a4:	40013000 	.word	0x40013000
 80039a8:	2000031c 	.word	0x2000031c

080039ac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b08a      	sub	sp, #40	; 0x28
 80039b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80039b2:	2318      	movs	r3, #24
 80039b4:	18fb      	adds	r3, r7, r3
 80039b6:	0018      	movs	r0, r3
 80039b8:	2310      	movs	r3, #16
 80039ba:	001a      	movs	r2, r3
 80039bc:	2100      	movs	r1, #0
 80039be:	f007 f8fc 	bl	800abba <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80039c2:	2310      	movs	r3, #16
 80039c4:	18fb      	adds	r3, r7, r3
 80039c6:	0018      	movs	r0, r3
 80039c8:	2308      	movs	r3, #8
 80039ca:	001a      	movs	r2, r3
 80039cc:	2100      	movs	r1, #0
 80039ce:	f007 f8f4 	bl	800abba <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80039d2:	003b      	movs	r3, r7
 80039d4:	0018      	movs	r0, r3
 80039d6:	2310      	movs	r3, #16
 80039d8:	001a      	movs	r2, r3
 80039da:	2100      	movs	r1, #0
 80039dc:	f007 f8ed 	bl	800abba <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80039e0:	4b43      	ldr	r3, [pc, #268]	; (8003af0 <MX_TIM2_Init+0x144>)
 80039e2:	2280      	movs	r2, #128	; 0x80
 80039e4:	05d2      	lsls	r2, r2, #23
 80039e6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80039e8:	4b41      	ldr	r3, [pc, #260]	; (8003af0 <MX_TIM2_Init+0x144>)
 80039ea:	2200      	movs	r2, #0
 80039ec:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039ee:	4b40      	ldr	r3, [pc, #256]	; (8003af0 <MX_TIM2_Init+0x144>)
 80039f0:	2200      	movs	r2, #0
 80039f2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0x3FFF;
 80039f4:	4b3e      	ldr	r3, [pc, #248]	; (8003af0 <MX_TIM2_Init+0x144>)
 80039f6:	4a3f      	ldr	r2, [pc, #252]	; (8003af4 <MX_TIM2_Init+0x148>)
 80039f8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80039fa:	4b3d      	ldr	r3, [pc, #244]	; (8003af0 <MX_TIM2_Init+0x144>)
 80039fc:	2200      	movs	r2, #0
 80039fe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a00:	4b3b      	ldr	r3, [pc, #236]	; (8003af0 <MX_TIM2_Init+0x144>)
 8003a02:	2200      	movs	r2, #0
 8003a04:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003a06:	4b3a      	ldr	r3, [pc, #232]	; (8003af0 <MX_TIM2_Init+0x144>)
 8003a08:	0018      	movs	r0, r3
 8003a0a:	f006 f9b7 	bl	8009d7c <HAL_TIM_Base_Init>
 8003a0e:	1e03      	subs	r3, r0, #0
 8003a10:	d001      	beq.n	8003a16 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8003a12:	f000 fa8b 	bl	8003f2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 8003a16:	2118      	movs	r1, #24
 8003a18:	187b      	adds	r3, r7, r1
 8003a1a:	2280      	movs	r2, #128	; 0x80
 8003a1c:	0192      	lsls	r2, r2, #6
 8003a1e:	601a      	str	r2, [r3, #0]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 8003a20:	187b      	adds	r3, r7, r1
 8003a22:	2200      	movs	r2, #0
 8003a24:	605a      	str	r2, [r3, #4]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 8003a26:	187b      	adds	r3, r7, r1
 8003a28:	2200      	movs	r2, #0
 8003a2a:	609a      	str	r2, [r3, #8]
  sClockSourceConfig.ClockFilter = 0;
 8003a2c:	187b      	adds	r3, r7, r1
 8003a2e:	2200      	movs	r2, #0
 8003a30:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003a32:	187a      	adds	r2, r7, r1
 8003a34:	4b2e      	ldr	r3, [pc, #184]	; (8003af0 <MX_TIM2_Init+0x144>)
 8003a36:	0011      	movs	r1, r2
 8003a38:	0018      	movs	r0, r3
 8003a3a:	f006 fd2b 	bl	800a494 <HAL_TIM_ConfigClockSource>
 8003a3e:	1e03      	subs	r3, r0, #0
 8003a40:	d001      	beq.n	8003a46 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8003a42:	f000 fa73 	bl	8003f2c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003a46:	4b2a      	ldr	r3, [pc, #168]	; (8003af0 <MX_TIM2_Init+0x144>)
 8003a48:	0018      	movs	r0, r3
 8003a4a:	f006 fb01 	bl	800a050 <HAL_TIM_PWM_Init>
 8003a4e:	1e03      	subs	r3, r0, #0
 8003a50:	d001      	beq.n	8003a56 <MX_TIM2_Init+0xaa>
  {
    Error_Handler();
 8003a52:	f000 fa6b 	bl	8003f2c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8003a56:	4b26      	ldr	r3, [pc, #152]	; (8003af0 <MX_TIM2_Init+0x144>)
 8003a58:	0018      	movs	r0, r3
 8003a5a:	f006 fa21 	bl	8009ea0 <HAL_TIM_OC_Init>
 8003a5e:	1e03      	subs	r3, r0, #0
 8003a60:	d001      	beq.n	8003a66 <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 8003a62:	f000 fa63 	bl	8003f2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a66:	2110      	movs	r1, #16
 8003a68:	187b      	adds	r3, r7, r1
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a6e:	187b      	adds	r3, r7, r1
 8003a70:	2200      	movs	r2, #0
 8003a72:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003a74:	187a      	adds	r2, r7, r1
 8003a76:	4b1e      	ldr	r3, [pc, #120]	; (8003af0 <MX_TIM2_Init+0x144>)
 8003a78:	0011      	movs	r1, r2
 8003a7a:	0018      	movs	r0, r3
 8003a7c:	f006 ffff 	bl	800aa7e <HAL_TIMEx_MasterConfigSynchronization>
 8003a80:	1e03      	subs	r3, r0, #0
 8003a82:	d001      	beq.n	8003a88 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8003a84:	f000 fa52 	bl	8003f2c <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim2, TIM2_ETR_LSE) != HAL_OK)
 8003a88:	4b19      	ldr	r3, [pc, #100]	; (8003af0 <MX_TIM2_Init+0x144>)
 8003a8a:	2105      	movs	r1, #5
 8003a8c:	0018      	movs	r0, r3
 8003a8e:	f007 f839 	bl	800ab04 <HAL_TIMEx_RemapConfig>
 8003a92:	1e03      	subs	r3, r0, #0
 8003a94:	d001      	beq.n	8003a9a <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8003a96:	f000 fa49 	bl	8003f2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003a9a:	003b      	movs	r3, r7
 8003a9c:	2260      	movs	r2, #96	; 0x60
 8003a9e:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8003aa0:	003b      	movs	r3, r7
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003aa6:	003b      	movs	r3, r7
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003aac:	003b      	movs	r3, r7
 8003aae:	2200      	movs	r2, #0
 8003ab0:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003ab2:	0039      	movs	r1, r7
 8003ab4:	4b0e      	ldr	r3, [pc, #56]	; (8003af0 <MX_TIM2_Init+0x144>)
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	0018      	movs	r0, r3
 8003aba:	f006 fc33 	bl	800a324 <HAL_TIM_PWM_ConfigChannel>
 8003abe:	1e03      	subs	r3, r0, #0
 8003ac0:	d001      	beq.n	8003ac6 <MX_TIM2_Init+0x11a>
  {
    Error_Handler();
 8003ac2:	f000 fa33 	bl	8003f2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8003ac6:	003b      	movs	r3, r7
 8003ac8:	2200      	movs	r2, #0
 8003aca:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003acc:	0039      	movs	r1, r7
 8003ace:	4b08      	ldr	r3, [pc, #32]	; (8003af0 <MX_TIM2_Init+0x144>)
 8003ad0:	2204      	movs	r2, #4
 8003ad2:	0018      	movs	r0, r3
 8003ad4:	f006 fbd8 	bl	800a288 <HAL_TIM_OC_ConfigChannel>
 8003ad8:	1e03      	subs	r3, r0, #0
 8003ada:	d001      	beq.n	8003ae0 <MX_TIM2_Init+0x134>
  {
    Error_Handler();
 8003adc:	f000 fa26 	bl	8003f2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003ae0:	4b03      	ldr	r3, [pc, #12]	; (8003af0 <MX_TIM2_Init+0x144>)
 8003ae2:	0018      	movs	r0, r3
 8003ae4:	f000 fbb0 	bl	8004248 <HAL_TIM_MspPostInit>

}
 8003ae8:	46c0      	nop			; (mov r8, r8)
 8003aea:	46bd      	mov	sp, r7
 8003aec:	b00a      	add	sp, #40	; 0x28
 8003aee:	bd80      	pop	{r7, pc}
 8003af0:	20000284 	.word	0x20000284
 8003af4:	00003fff 	.word	0x00003fff

08003af8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b082      	sub	sp, #8
 8003afc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003afe:	003b      	movs	r3, r7
 8003b00:	0018      	movs	r0, r3
 8003b02:	2308      	movs	r3, #8
 8003b04:	001a      	movs	r2, r3
 8003b06:	2100      	movs	r1, #0
 8003b08:	f007 f857 	bl	800abba <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003b0c:	4b15      	ldr	r3, [pc, #84]	; (8003b64 <MX_TIM6_Init+0x6c>)
 8003b0e:	4a16      	ldr	r2, [pc, #88]	; (8003b68 <MX_TIM6_Init+0x70>)
 8003b10:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0x40;
 8003b12:	4b14      	ldr	r3, [pc, #80]	; (8003b64 <MX_TIM6_Init+0x6c>)
 8003b14:	2240      	movs	r2, #64	; 0x40
 8003b16:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b18:	4b12      	ldr	r3, [pc, #72]	; (8003b64 <MX_TIM6_Init+0x6c>)
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8003b1e:	4b11      	ldr	r3, [pc, #68]	; (8003b64 <MX_TIM6_Init+0x6c>)
 8003b20:	4a12      	ldr	r2, [pc, #72]	; (8003b6c <MX_TIM6_Init+0x74>)
 8003b22:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b24:	4b0f      	ldr	r3, [pc, #60]	; (8003b64 <MX_TIM6_Init+0x6c>)
 8003b26:	2200      	movs	r2, #0
 8003b28:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003b2a:	4b0e      	ldr	r3, [pc, #56]	; (8003b64 <MX_TIM6_Init+0x6c>)
 8003b2c:	0018      	movs	r0, r3
 8003b2e:	f006 f925 	bl	8009d7c <HAL_TIM_Base_Init>
 8003b32:	1e03      	subs	r3, r0, #0
 8003b34:	d001      	beq.n	8003b3a <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8003b36:	f000 f9f9 	bl	8003f2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003b3a:	003b      	movs	r3, r7
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b40:	003b      	movs	r3, r7
 8003b42:	2200      	movs	r2, #0
 8003b44:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003b46:	003a      	movs	r2, r7
 8003b48:	4b06      	ldr	r3, [pc, #24]	; (8003b64 <MX_TIM6_Init+0x6c>)
 8003b4a:	0011      	movs	r1, r2
 8003b4c:	0018      	movs	r0, r3
 8003b4e:	f006 ff96 	bl	800aa7e <HAL_TIMEx_MasterConfigSynchronization>
 8003b52:	1e03      	subs	r3, r0, #0
 8003b54:	d001      	beq.n	8003b5a <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8003b56:	f000 f9e9 	bl	8003f2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003b5a:	46c0      	nop			; (mov r8, r8)
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	b002      	add	sp, #8
 8003b60:	bd80      	pop	{r7, pc}
 8003b62:	46c0      	nop			; (mov r8, r8)
 8003b64:	20000154 	.word	0x20000154
 8003b68:	40001000 	.word	0x40001000
 8003b6c:	0000ffff 	.word	0x0000ffff

08003b70 <MX_TIM21_Init>:
  * @brief TIM21 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM21_Init(void)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b08a      	sub	sp, #40	; 0x28
 8003b74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM21_Init 0 */

  /* USER CODE END TIM21_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003b76:	2318      	movs	r3, #24
 8003b78:	18fb      	adds	r3, r7, r3
 8003b7a:	0018      	movs	r0, r3
 8003b7c:	2310      	movs	r3, #16
 8003b7e:	001a      	movs	r2, r3
 8003b80:	2100      	movs	r1, #0
 8003b82:	f007 f81a 	bl	800abba <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003b86:	2310      	movs	r3, #16
 8003b88:	18fb      	adds	r3, r7, r3
 8003b8a:	0018      	movs	r0, r3
 8003b8c:	2308      	movs	r3, #8
 8003b8e:	001a      	movs	r2, r3
 8003b90:	2100      	movs	r1, #0
 8003b92:	f007 f812 	bl	800abba <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003b96:	003b      	movs	r3, r7
 8003b98:	0018      	movs	r0, r3
 8003b9a:	2310      	movs	r3, #16
 8003b9c:	001a      	movs	r2, r3
 8003b9e:	2100      	movs	r1, #0
 8003ba0:	f007 f80b 	bl	800abba <memset>

  /* USER CODE BEGIN TIM21_Init 1 */

  /* USER CODE END TIM21_Init 1 */
  htim21.Instance = TIM21;
 8003ba4:	4b3b      	ldr	r3, [pc, #236]	; (8003c94 <MX_TIM21_Init+0x124>)
 8003ba6:	4a3c      	ldr	r2, [pc, #240]	; (8003c98 <MX_TIM21_Init+0x128>)
 8003ba8:	601a      	str	r2, [r3, #0]
  htim21.Init.Prescaler = 0;
 8003baa:	4b3a      	ldr	r3, [pc, #232]	; (8003c94 <MX_TIM21_Init+0x124>)
 8003bac:	2200      	movs	r2, #0
 8003bae:	605a      	str	r2, [r3, #4]
  htim21.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003bb0:	4b38      	ldr	r3, [pc, #224]	; (8003c94 <MX_TIM21_Init+0x124>)
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	609a      	str	r2, [r3, #8]
  htim21.Init.Period = 0x7FFF;
 8003bb6:	4b37      	ldr	r3, [pc, #220]	; (8003c94 <MX_TIM21_Init+0x124>)
 8003bb8:	4a38      	ldr	r2, [pc, #224]	; (8003c9c <MX_TIM21_Init+0x12c>)
 8003bba:	60da      	str	r2, [r3, #12]
  htim21.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003bbc:	4b35      	ldr	r3, [pc, #212]	; (8003c94 <MX_TIM21_Init+0x124>)
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	611a      	str	r2, [r3, #16]
  htim21.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003bc2:	4b34      	ldr	r3, [pc, #208]	; (8003c94 <MX_TIM21_Init+0x124>)
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim21) != HAL_OK)
 8003bc8:	4b32      	ldr	r3, [pc, #200]	; (8003c94 <MX_TIM21_Init+0x124>)
 8003bca:	0018      	movs	r0, r3
 8003bcc:	f006 f8d6 	bl	8009d7c <HAL_TIM_Base_Init>
 8003bd0:	1e03      	subs	r3, r0, #0
 8003bd2:	d001      	beq.n	8003bd8 <MX_TIM21_Init+0x68>
  {
    Error_Handler();
 8003bd4:	f000 f9aa 	bl	8003f2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 8003bd8:	2118      	movs	r1, #24
 8003bda:	187b      	adds	r3, r7, r1
 8003bdc:	2280      	movs	r2, #128	; 0x80
 8003bde:	0192      	lsls	r2, r2, #6
 8003be0:	601a      	str	r2, [r3, #0]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 8003be2:	187b      	adds	r3, r7, r1
 8003be4:	2200      	movs	r2, #0
 8003be6:	605a      	str	r2, [r3, #4]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 8003be8:	187b      	adds	r3, r7, r1
 8003bea:	2200      	movs	r2, #0
 8003bec:	609a      	str	r2, [r3, #8]
  sClockSourceConfig.ClockFilter = 0;
 8003bee:	187b      	adds	r3, r7, r1
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_ConfigClockSource(&htim21, &sClockSourceConfig) != HAL_OK)
 8003bf4:	187a      	adds	r2, r7, r1
 8003bf6:	4b27      	ldr	r3, [pc, #156]	; (8003c94 <MX_TIM21_Init+0x124>)
 8003bf8:	0011      	movs	r1, r2
 8003bfa:	0018      	movs	r0, r3
 8003bfc:	f006 fc4a 	bl	800a494 <HAL_TIM_ConfigClockSource>
 8003c00:	1e03      	subs	r3, r0, #0
 8003c02:	d001      	beq.n	8003c08 <MX_TIM21_Init+0x98>
  {
    Error_Handler();
 8003c04:	f000 f992 	bl	8003f2c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim21) != HAL_OK)
 8003c08:	4b22      	ldr	r3, [pc, #136]	; (8003c94 <MX_TIM21_Init+0x124>)
 8003c0a:	0018      	movs	r0, r3
 8003c0c:	f006 f948 	bl	8009ea0 <HAL_TIM_OC_Init>
 8003c10:	1e03      	subs	r3, r0, #0
 8003c12:	d001      	beq.n	8003c18 <MX_TIM21_Init+0xa8>
  {
    Error_Handler();
 8003c14:	f000 f98a 	bl	8003f2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003c18:	2110      	movs	r1, #16
 8003c1a:	187b      	adds	r3, r7, r1
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c20:	187b      	adds	r3, r7, r1
 8003c22:	2200      	movs	r2, #0
 8003c24:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim21, &sMasterConfig) != HAL_OK)
 8003c26:	187a      	adds	r2, r7, r1
 8003c28:	4b1a      	ldr	r3, [pc, #104]	; (8003c94 <MX_TIM21_Init+0x124>)
 8003c2a:	0011      	movs	r1, r2
 8003c2c:	0018      	movs	r0, r3
 8003c2e:	f006 ff26 	bl	800aa7e <HAL_TIMEx_MasterConfigSynchronization>
 8003c32:	1e03      	subs	r3, r0, #0
 8003c34:	d001      	beq.n	8003c3a <MX_TIM21_Init+0xca>
  {
    Error_Handler();
 8003c36:	f000 f979 	bl	8003f2c <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim21, TIM21_ETR_LSE) != HAL_OK)
 8003c3a:	4b16      	ldr	r3, [pc, #88]	; (8003c94 <MX_TIM21_Init+0x124>)
 8003c3c:	2103      	movs	r1, #3
 8003c3e:	0018      	movs	r0, r3
 8003c40:	f006 ff60 	bl	800ab04 <HAL_TIMEx_RemapConfig>
 8003c44:	1e03      	subs	r3, r0, #0
 8003c46:	d001      	beq.n	8003c4c <MX_TIM21_Init+0xdc>
  {
    Error_Handler();
 8003c48:	f000 f970 	bl	8003f2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8003c4c:	003b      	movs	r3, r7
 8003c4e:	2200      	movs	r2, #0
 8003c50:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8003c52:	003b      	movs	r3, r7
 8003c54:	2200      	movs	r2, #0
 8003c56:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003c58:	003b      	movs	r3, r7
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003c5e:	003b      	movs	r3, r7
 8003c60:	2200      	movs	r2, #0
 8003c62:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_OC_ConfigChannel(&htim21, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003c64:	0039      	movs	r1, r7
 8003c66:	4b0b      	ldr	r3, [pc, #44]	; (8003c94 <MX_TIM21_Init+0x124>)
 8003c68:	2200      	movs	r2, #0
 8003c6a:	0018      	movs	r0, r3
 8003c6c:	f006 fb0c 	bl	800a288 <HAL_TIM_OC_ConfigChannel>
 8003c70:	1e03      	subs	r3, r0, #0
 8003c72:	d001      	beq.n	8003c78 <MX_TIM21_Init+0x108>
  {
    Error_Handler();
 8003c74:	f000 f95a 	bl	8003f2c <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim21, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003c78:	0039      	movs	r1, r7
 8003c7a:	4b06      	ldr	r3, [pc, #24]	; (8003c94 <MX_TIM21_Init+0x124>)
 8003c7c:	2204      	movs	r2, #4
 8003c7e:	0018      	movs	r0, r3
 8003c80:	f006 fb02 	bl	800a288 <HAL_TIM_OC_ConfigChannel>
 8003c84:	1e03      	subs	r3, r0, #0
 8003c86:	d001      	beq.n	8003c8c <MX_TIM21_Init+0x11c>
  {
    Error_Handler();
 8003c88:	f000 f950 	bl	8003f2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM21_Init 2 */

  /* USER CODE END TIM21_Init 2 */

}
 8003c8c:	46c0      	nop			; (mov r8, r8)
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	b00a      	add	sp, #40	; 0x28
 8003c92:	bd80      	pop	{r7, pc}
 8003c94:	20000364 	.word	0x20000364
 8003c98:	40010800 	.word	0x40010800
 8003c9c:	00007fff 	.word	0x00007fff

08003ca0 <MX_TIM22_Init>:
  * @brief TIM22 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM22_Init(void)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b08a      	sub	sp, #40	; 0x28
 8003ca4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM22_Init 0 */

  /* USER CODE END TIM22_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003ca6:	2318      	movs	r3, #24
 8003ca8:	18fb      	adds	r3, r7, r3
 8003caa:	0018      	movs	r0, r3
 8003cac:	2310      	movs	r3, #16
 8003cae:	001a      	movs	r2, r3
 8003cb0:	2100      	movs	r1, #0
 8003cb2:	f006 ff82 	bl	800abba <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003cb6:	2310      	movs	r3, #16
 8003cb8:	18fb      	adds	r3, r7, r3
 8003cba:	0018      	movs	r0, r3
 8003cbc:	2308      	movs	r3, #8
 8003cbe:	001a      	movs	r2, r3
 8003cc0:	2100      	movs	r1, #0
 8003cc2:	f006 ff7a 	bl	800abba <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003cc6:	003b      	movs	r3, r7
 8003cc8:	0018      	movs	r0, r3
 8003cca:	2310      	movs	r3, #16
 8003ccc:	001a      	movs	r2, r3
 8003cce:	2100      	movs	r1, #0
 8003cd0:	f006 ff73 	bl	800abba <memset>

  /* USER CODE BEGIN TIM22_Init 1 */

  /* USER CODE END TIM22_Init 1 */
  htim22.Instance = TIM22;
 8003cd4:	4b37      	ldr	r3, [pc, #220]	; (8003db4 <MX_TIM22_Init+0x114>)
 8003cd6:	4a38      	ldr	r2, [pc, #224]	; (8003db8 <MX_TIM22_Init+0x118>)
 8003cd8:	601a      	str	r2, [r3, #0]
  htim22.Init.Prescaler = 0x400;
 8003cda:	4b36      	ldr	r3, [pc, #216]	; (8003db4 <MX_TIM22_Init+0x114>)
 8003cdc:	2280      	movs	r2, #128	; 0x80
 8003cde:	00d2      	lsls	r2, r2, #3
 8003ce0:	605a      	str	r2, [r3, #4]
  htim22.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ce2:	4b34      	ldr	r3, [pc, #208]	; (8003db4 <MX_TIM22_Init+0x114>)
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	609a      	str	r2, [r3, #8]
  htim22.Init.Period = 1919;
 8003ce8:	4b32      	ldr	r3, [pc, #200]	; (8003db4 <MX_TIM22_Init+0x114>)
 8003cea:	4a34      	ldr	r2, [pc, #208]	; (8003dbc <MX_TIM22_Init+0x11c>)
 8003cec:	60da      	str	r2, [r3, #12]
  htim22.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003cee:	4b31      	ldr	r3, [pc, #196]	; (8003db4 <MX_TIM22_Init+0x114>)
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	611a      	str	r2, [r3, #16]
  htim22.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003cf4:	4b2f      	ldr	r3, [pc, #188]	; (8003db4 <MX_TIM22_Init+0x114>)
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim22) != HAL_OK)
 8003cfa:	4b2e      	ldr	r3, [pc, #184]	; (8003db4 <MX_TIM22_Init+0x114>)
 8003cfc:	0018      	movs	r0, r3
 8003cfe:	f006 f83d 	bl	8009d7c <HAL_TIM_Base_Init>
 8003d02:	1e03      	subs	r3, r0, #0
 8003d04:	d001      	beq.n	8003d0a <MX_TIM22_Init+0x6a>
  {
    Error_Handler();
 8003d06:	f000 f911 	bl	8003f2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 8003d0a:	2118      	movs	r1, #24
 8003d0c:	187b      	adds	r3, r7, r1
 8003d0e:	2280      	movs	r2, #128	; 0x80
 8003d10:	0192      	lsls	r2, r2, #6
 8003d12:	601a      	str	r2, [r3, #0]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 8003d14:	187b      	adds	r3, r7, r1
 8003d16:	2200      	movs	r2, #0
 8003d18:	605a      	str	r2, [r3, #4]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 8003d1a:	187b      	adds	r3, r7, r1
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	609a      	str	r2, [r3, #8]
  sClockSourceConfig.ClockFilter = 0;
 8003d20:	187b      	adds	r3, r7, r1
 8003d22:	2200      	movs	r2, #0
 8003d24:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_ConfigClockSource(&htim22, &sClockSourceConfig) != HAL_OK)
 8003d26:	187a      	adds	r2, r7, r1
 8003d28:	4b22      	ldr	r3, [pc, #136]	; (8003db4 <MX_TIM22_Init+0x114>)
 8003d2a:	0011      	movs	r1, r2
 8003d2c:	0018      	movs	r0, r3
 8003d2e:	f006 fbb1 	bl	800a494 <HAL_TIM_ConfigClockSource>
 8003d32:	1e03      	subs	r3, r0, #0
 8003d34:	d001      	beq.n	8003d3a <MX_TIM22_Init+0x9a>
  {
    Error_Handler();
 8003d36:	f000 f8f9 	bl	8003f2c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim22) != HAL_OK)
 8003d3a:	4b1e      	ldr	r3, [pc, #120]	; (8003db4 <MX_TIM22_Init+0x114>)
 8003d3c:	0018      	movs	r0, r3
 8003d3e:	f006 f8af 	bl	8009ea0 <HAL_TIM_OC_Init>
 8003d42:	1e03      	subs	r3, r0, #0
 8003d44:	d001      	beq.n	8003d4a <MX_TIM22_Init+0xaa>
  {
    Error_Handler();
 8003d46:	f000 f8f1 	bl	8003f2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d4a:	2110      	movs	r1, #16
 8003d4c:	187b      	adds	r3, r7, r1
 8003d4e:	2200      	movs	r2, #0
 8003d50:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d52:	187b      	adds	r3, r7, r1
 8003d54:	2200      	movs	r2, #0
 8003d56:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim22, &sMasterConfig) != HAL_OK)
 8003d58:	187a      	adds	r2, r7, r1
 8003d5a:	4b16      	ldr	r3, [pc, #88]	; (8003db4 <MX_TIM22_Init+0x114>)
 8003d5c:	0011      	movs	r1, r2
 8003d5e:	0018      	movs	r0, r3
 8003d60:	f006 fe8d 	bl	800aa7e <HAL_TIMEx_MasterConfigSynchronization>
 8003d64:	1e03      	subs	r3, r0, #0
 8003d66:	d001      	beq.n	8003d6c <MX_TIM22_Init+0xcc>
  {
    Error_Handler();
 8003d68:	f000 f8e0 	bl	8003f2c <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim22, TIM22_ETR_LSE) != HAL_OK)
 8003d6c:	4b11      	ldr	r3, [pc, #68]	; (8003db4 <MX_TIM22_Init+0x114>)
 8003d6e:	2103      	movs	r1, #3
 8003d70:	0018      	movs	r0, r3
 8003d72:	f006 fec7 	bl	800ab04 <HAL_TIMEx_RemapConfig>
 8003d76:	1e03      	subs	r3, r0, #0
 8003d78:	d001      	beq.n	8003d7e <MX_TIM22_Init+0xde>
  {
    Error_Handler();
 8003d7a:	f000 f8d7 	bl	8003f2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8003d7e:	003b      	movs	r3, r7
 8003d80:	2200      	movs	r2, #0
 8003d82:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8003d84:	003b      	movs	r3, r7
 8003d86:	2200      	movs	r2, #0
 8003d88:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003d8a:	003b      	movs	r3, r7
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003d90:	003b      	movs	r3, r7
 8003d92:	2200      	movs	r2, #0
 8003d94:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_OC_ConfigChannel(&htim22, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003d96:	0039      	movs	r1, r7
 8003d98:	4b06      	ldr	r3, [pc, #24]	; (8003db4 <MX_TIM22_Init+0x114>)
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	0018      	movs	r0, r3
 8003d9e:	f006 fa73 	bl	800a288 <HAL_TIM_OC_ConfigChannel>
 8003da2:	1e03      	subs	r3, r0, #0
 8003da4:	d001      	beq.n	8003daa <MX_TIM22_Init+0x10a>
  {
    Error_Handler();
 8003da6:	f000 f8c1 	bl	8003f2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM22_Init 2 */

  /* USER CODE END TIM22_Init 2 */

}
 8003daa:	46c0      	nop			; (mov r8, r8)
 8003dac:	46bd      	mov	sp, r7
 8003dae:	b00a      	add	sp, #40	; 0x28
 8003db0:	bd80      	pop	{r7, pc}
 8003db2:	46c0      	nop			; (mov r8, r8)
 8003db4:	2000019c 	.word	0x2000019c
 8003db8:	40011400 	.word	0x40011400
 8003dbc:	0000077f 	.word	0x0000077f

08003dc0 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b082      	sub	sp, #8
 8003dc4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003dc6:	4b0c      	ldr	r3, [pc, #48]	; (8003df8 <MX_DMA_Init+0x38>)
 8003dc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003dca:	4b0b      	ldr	r3, [pc, #44]	; (8003df8 <MX_DMA_Init+0x38>)
 8003dcc:	2101      	movs	r1, #1
 8003dce:	430a      	orrs	r2, r1
 8003dd0:	631a      	str	r2, [r3, #48]	; 0x30
 8003dd2:	4b09      	ldr	r3, [pc, #36]	; (8003df8 <MX_DMA_Init+0x38>)
 8003dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	4013      	ands	r3, r2
 8003dda:	607b      	str	r3, [r7, #4]
 8003ddc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8003dde:	2200      	movs	r2, #0
 8003de0:	2100      	movs	r1, #0
 8003de2:	200a      	movs	r0, #10
 8003de4:	f003 f8ce 	bl	8006f84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8003de8:	200a      	movs	r0, #10
 8003dea:	f003 f8e0 	bl	8006fae <HAL_NVIC_EnableIRQ>

}
 8003dee:	46c0      	nop			; (mov r8, r8)
 8003df0:	46bd      	mov	sp, r7
 8003df2:	b002      	add	sp, #8
 8003df4:	bd80      	pop	{r7, pc}
 8003df6:	46c0      	nop			; (mov r8, r8)
 8003df8:	40021000 	.word	0x40021000

08003dfc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003dfc:	b590      	push	{r4, r7, lr}
 8003dfe:	b089      	sub	sp, #36	; 0x24
 8003e00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e02:	240c      	movs	r4, #12
 8003e04:	193b      	adds	r3, r7, r4
 8003e06:	0018      	movs	r0, r3
 8003e08:	2314      	movs	r3, #20
 8003e0a:	001a      	movs	r2, r3
 8003e0c:	2100      	movs	r1, #0
 8003e0e:	f006 fed4 	bl	800abba <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e12:	4b41      	ldr	r3, [pc, #260]	; (8003f18 <MX_GPIO_Init+0x11c>)
 8003e14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e16:	4b40      	ldr	r3, [pc, #256]	; (8003f18 <MX_GPIO_Init+0x11c>)
 8003e18:	2104      	movs	r1, #4
 8003e1a:	430a      	orrs	r2, r1
 8003e1c:	62da      	str	r2, [r3, #44]	; 0x2c
 8003e1e:	4b3e      	ldr	r3, [pc, #248]	; (8003f18 <MX_GPIO_Init+0x11c>)
 8003e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e22:	2204      	movs	r2, #4
 8003e24:	4013      	ands	r3, r2
 8003e26:	60bb      	str	r3, [r7, #8]
 8003e28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e2a:	4b3b      	ldr	r3, [pc, #236]	; (8003f18 <MX_GPIO_Init+0x11c>)
 8003e2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e2e:	4b3a      	ldr	r3, [pc, #232]	; (8003f18 <MX_GPIO_Init+0x11c>)
 8003e30:	2101      	movs	r1, #1
 8003e32:	430a      	orrs	r2, r1
 8003e34:	62da      	str	r2, [r3, #44]	; 0x2c
 8003e36:	4b38      	ldr	r3, [pc, #224]	; (8003f18 <MX_GPIO_Init+0x11c>)
 8003e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	4013      	ands	r3, r2
 8003e3e:	607b      	str	r3, [r7, #4]
 8003e40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e42:	4b35      	ldr	r3, [pc, #212]	; (8003f18 <MX_GPIO_Init+0x11c>)
 8003e44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e46:	4b34      	ldr	r3, [pc, #208]	; (8003f18 <MX_GPIO_Init+0x11c>)
 8003e48:	2102      	movs	r1, #2
 8003e4a:	430a      	orrs	r2, r1
 8003e4c:	62da      	str	r2, [r3, #44]	; 0x2c
 8003e4e:	4b32      	ldr	r3, [pc, #200]	; (8003f18 <MX_GPIO_Init+0x11c>)
 8003e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e52:	2202      	movs	r2, #2
 8003e54:	4013      	ands	r3, r2
 8003e56:	603b      	str	r3, [r7, #0]
 8003e58:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_5 
 8003e5a:	4b30      	ldr	r3, [pc, #192]	; (8003f1c <MX_GPIO_Init+0x120>)
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	21ab      	movs	r1, #171	; 0xab
 8003e60:	0018      	movs	r0, r3
 8003e62:	f003 fbea 	bl	800763a <HAL_GPIO_WritePin>
                          |GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 8003e66:	4b2d      	ldr	r3, [pc, #180]	; (8003f1c <MX_GPIO_Init+0x120>)
 8003e68:	2201      	movs	r2, #1
 8003e6a:	2110      	movs	r1, #16
 8003e6c:	0018      	movs	r0, r3
 8003e6e:	f003 fbe4 	bl	800763a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_6, GPIO_PIN_RESET);
 8003e72:	4b2b      	ldr	r3, [pc, #172]	; (8003f20 <MX_GPIO_Init+0x124>)
 8003e74:	2200      	movs	r2, #0
 8003e76:	2143      	movs	r1, #67	; 0x43
 8003e78:	0018      	movs	r0, r3
 8003e7a:	f003 fbde 	bl	800763a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 PC3 PC4 
                           PC5 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4 
 8003e7e:	0021      	movs	r1, r4
 8003e80:	187b      	adds	r3, r7, r1
 8003e82:	22bb      	movs	r2, #187	; 0xbb
 8003e84:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e86:	187b      	adds	r3, r7, r1
 8003e88:	2201      	movs	r2, #1
 8003e8a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e8c:	187b      	adds	r3, r7, r1
 8003e8e:	2200      	movs	r2, #0
 8003e90:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e92:	187b      	adds	r3, r7, r1
 8003e94:	2200      	movs	r2, #0
 8003e96:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003e98:	000c      	movs	r4, r1
 8003e9a:	187b      	adds	r3, r7, r1
 8003e9c:	4a1f      	ldr	r2, [pc, #124]	; (8003f1c <MX_GPIO_Init+0x120>)
 8003e9e:	0019      	movs	r1, r3
 8003ea0:	0010      	movs	r0, r2
 8003ea2:	f003 fa2f 	bl	8007304 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_6;
 8003ea6:	0021      	movs	r1, r4
 8003ea8:	187b      	adds	r3, r7, r1
 8003eaa:	2243      	movs	r2, #67	; 0x43
 8003eac:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003eae:	187b      	adds	r3, r7, r1
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003eb4:	187b      	adds	r3, r7, r1
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003eba:	187b      	adds	r3, r7, r1
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ec0:	000c      	movs	r4, r1
 8003ec2:	187b      	adds	r3, r7, r1
 8003ec4:	4a16      	ldr	r2, [pc, #88]	; (8003f20 <MX_GPIO_Init+0x124>)
 8003ec6:	0019      	movs	r1, r3
 8003ec8:	0010      	movs	r0, r2
 8003eca:	f003 fa1b 	bl	8007304 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8003ece:	0021      	movs	r1, r4
 8003ed0:	187b      	adds	r3, r7, r1
 8003ed2:	4a14      	ldr	r2, [pc, #80]	; (8003f24 <MX_GPIO_Init+0x128>)
 8003ed4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003ed6:	187b      	adds	r3, r7, r1
 8003ed8:	4a13      	ldr	r2, [pc, #76]	; (8003f28 <MX_GPIO_Init+0x12c>)
 8003eda:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003edc:	187b      	adds	r3, r7, r1
 8003ede:	2202      	movs	r2, #2
 8003ee0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ee2:	187b      	adds	r3, r7, r1
 8003ee4:	4a0e      	ldr	r2, [pc, #56]	; (8003f20 <MX_GPIO_Init+0x124>)
 8003ee6:	0019      	movs	r1, r3
 8003ee8:	0010      	movs	r0, r2
 8003eea:	f003 fa0b 	bl	8007304 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 8003eee:	2200      	movs	r2, #0
 8003ef0:	2100      	movs	r1, #0
 8003ef2:	2006      	movs	r0, #6
 8003ef4:	f003 f846 	bl	8006f84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8003ef8:	2006      	movs	r0, #6
 8003efa:	f003 f858 	bl	8006fae <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8003efe:	2200      	movs	r2, #0
 8003f00:	2100      	movs	r1, #0
 8003f02:	2007      	movs	r0, #7
 8003f04:	f003 f83e 	bl	8006f84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8003f08:	2007      	movs	r0, #7
 8003f0a:	f003 f850 	bl	8006fae <HAL_NVIC_EnableIRQ>

}
 8003f0e:	46c0      	nop			; (mov r8, r8)
 8003f10:	46bd      	mov	sp, r7
 8003f12:	b009      	add	sp, #36	; 0x24
 8003f14:	bd90      	pop	{r4, r7, pc}
 8003f16:	46c0      	nop			; (mov r8, r8)
 8003f18:	40021000 	.word	0x40021000
 8003f1c:	50000800 	.word	0x50000800
 8003f20:	50000400 	.word	0x50000400
 8003f24:	0000e004 	.word	0x0000e004
 8003f28:	10110000 	.word	0x10110000

08003f2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003f30:	46c0      	nop			; (mov r8, r8)
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}
	...

08003f38 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f3c:	4b07      	ldr	r3, [pc, #28]	; (8003f5c <HAL_MspInit+0x24>)
 8003f3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f40:	4b06      	ldr	r3, [pc, #24]	; (8003f5c <HAL_MspInit+0x24>)
 8003f42:	2101      	movs	r1, #1
 8003f44:	430a      	orrs	r2, r1
 8003f46:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8003f48:	4b04      	ldr	r3, [pc, #16]	; (8003f5c <HAL_MspInit+0x24>)
 8003f4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f4c:	4b03      	ldr	r3, [pc, #12]	; (8003f5c <HAL_MspInit+0x24>)
 8003f4e:	2180      	movs	r1, #128	; 0x80
 8003f50:	0549      	lsls	r1, r1, #21
 8003f52:	430a      	orrs	r2, r1
 8003f54:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003f56:	46c0      	nop			; (mov r8, r8)
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}
 8003f5c:	40021000 	.word	0x40021000

08003f60 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b088      	sub	sp, #32
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f68:	230c      	movs	r3, #12
 8003f6a:	18fb      	adds	r3, r7, r3
 8003f6c:	0018      	movs	r0, r3
 8003f6e:	2314      	movs	r3, #20
 8003f70:	001a      	movs	r2, r3
 8003f72:	2100      	movs	r1, #0
 8003f74:	f006 fe21 	bl	800abba <memset>
  if(hadc->Instance==ADC1)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a15      	ldr	r2, [pc, #84]	; (8003fd4 <HAL_ADC_MspInit+0x74>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d123      	bne.n	8003fca <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003f82:	4b15      	ldr	r3, [pc, #84]	; (8003fd8 <HAL_ADC_MspInit+0x78>)
 8003f84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f86:	4b14      	ldr	r3, [pc, #80]	; (8003fd8 <HAL_ADC_MspInit+0x78>)
 8003f88:	2180      	movs	r1, #128	; 0x80
 8003f8a:	0089      	lsls	r1, r1, #2
 8003f8c:	430a      	orrs	r2, r1
 8003f8e:	635a      	str	r2, [r3, #52]	; 0x34
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f90:	4b11      	ldr	r3, [pc, #68]	; (8003fd8 <HAL_ADC_MspInit+0x78>)
 8003f92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f94:	4b10      	ldr	r3, [pc, #64]	; (8003fd8 <HAL_ADC_MspInit+0x78>)
 8003f96:	2101      	movs	r1, #1
 8003f98:	430a      	orrs	r2, r1
 8003f9a:	62da      	str	r2, [r3, #44]	; 0x2c
 8003f9c:	4b0e      	ldr	r3, [pc, #56]	; (8003fd8 <HAL_ADC_MspInit+0x78>)
 8003f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	4013      	ands	r3, r2
 8003fa4:	60bb      	str	r3, [r7, #8]
 8003fa6:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration    
    PA0     ------> ADC_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003fa8:	210c      	movs	r1, #12
 8003faa:	187b      	adds	r3, r7, r1
 8003fac:	2201      	movs	r2, #1
 8003fae:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003fb0:	187b      	adds	r3, r7, r1
 8003fb2:	2203      	movs	r2, #3
 8003fb4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fb6:	187b      	adds	r3, r7, r1
 8003fb8:	2200      	movs	r2, #0
 8003fba:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fbc:	187a      	adds	r2, r7, r1
 8003fbe:	23a0      	movs	r3, #160	; 0xa0
 8003fc0:	05db      	lsls	r3, r3, #23
 8003fc2:	0011      	movs	r1, r2
 8003fc4:	0018      	movs	r0, r3
 8003fc6:	f003 f99d 	bl	8007304 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003fca:	46c0      	nop			; (mov r8, r8)
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	b008      	add	sp, #32
 8003fd0:	bd80      	pop	{r7, pc}
 8003fd2:	46c0      	nop			; (mov r8, r8)
 8003fd4:	40012400 	.word	0x40012400
 8003fd8:	40021000 	.word	0x40021000

08003fdc <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b082      	sub	sp, #8
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  if(hlptim->Instance==LPTIM1)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a0a      	ldr	r2, [pc, #40]	; (8004014 <HAL_LPTIM_MspInit+0x38>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d10e      	bne.n	800400c <HAL_LPTIM_MspInit+0x30>
  {
  /* USER CODE BEGIN LPTIM1_MspInit 0 */

  /* USER CODE END LPTIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8003fee:	4b0a      	ldr	r3, [pc, #40]	; (8004018 <HAL_LPTIM_MspInit+0x3c>)
 8003ff0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ff2:	4b09      	ldr	r3, [pc, #36]	; (8004018 <HAL_LPTIM_MspInit+0x3c>)
 8003ff4:	2180      	movs	r1, #128	; 0x80
 8003ff6:	0609      	lsls	r1, r1, #24
 8003ff8:	430a      	orrs	r2, r1
 8003ffa:	639a      	str	r2, [r3, #56]	; 0x38
    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	2100      	movs	r1, #0
 8004000:	200d      	movs	r0, #13
 8004002:	f002 ffbf 	bl	8006f84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 8004006:	200d      	movs	r0, #13
 8004008:	f002 ffd1 	bl	8006fae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }

}
 800400c:	46c0      	nop			; (mov r8, r8)
 800400e:	46bd      	mov	sp, r7
 8004010:	b002      	add	sp, #8
 8004012:	bd80      	pop	{r7, pc}
 8004014:	40007c00 	.word	0x40007c00
 8004018:	40021000 	.word	0x40021000

0800401c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b088      	sub	sp, #32
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004024:	230c      	movs	r3, #12
 8004026:	18fb      	adds	r3, r7, r3
 8004028:	0018      	movs	r0, r3
 800402a:	2314      	movs	r3, #20
 800402c:	001a      	movs	r2, r3
 800402e:	2100      	movs	r1, #0
 8004030:	f006 fdc3 	bl	800abba <memset>
  if(hrtc->Instance==RTC)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a14      	ldr	r2, [pc, #80]	; (800408c <HAL_RTC_MspInit+0x70>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d121      	bne.n	8004082 <HAL_RTC_MspInit+0x66>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800403e:	4b14      	ldr	r3, [pc, #80]	; (8004090 <HAL_RTC_MspInit+0x74>)
 8004040:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004042:	4b13      	ldr	r3, [pc, #76]	; (8004090 <HAL_RTC_MspInit+0x74>)
 8004044:	2180      	movs	r1, #128	; 0x80
 8004046:	02c9      	lsls	r1, r1, #11
 8004048:	430a      	orrs	r2, r1
 800404a:	651a      	str	r2, [r3, #80]	; 0x50
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800404c:	4b10      	ldr	r3, [pc, #64]	; (8004090 <HAL_RTC_MspInit+0x74>)
 800404e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004050:	4b0f      	ldr	r3, [pc, #60]	; (8004090 <HAL_RTC_MspInit+0x74>)
 8004052:	2104      	movs	r1, #4
 8004054:	430a      	orrs	r2, r1
 8004056:	62da      	str	r2, [r3, #44]	; 0x2c
 8004058:	4b0d      	ldr	r3, [pc, #52]	; (8004090 <HAL_RTC_MspInit+0x74>)
 800405a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800405c:	2204      	movs	r2, #4
 800405e:	4013      	ands	r3, r2
 8004060:	60bb      	str	r3, [r7, #8]
 8004062:	68bb      	ldr	r3, [r7, #8]
    /**RTC GPIO Configuration    
    PC13     ------> RTC_OUT_CALIB 
    */
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004064:	230c      	movs	r3, #12
 8004066:	18fb      	adds	r3, r7, r3
 8004068:	4a0a      	ldr	r2, [pc, #40]	; (8004094 <HAL_RTC_MspInit+0x78>)
 800406a:	0019      	movs	r1, r3
 800406c:	0010      	movs	r0, r2
 800406e:	f003 f949 	bl	8007304 <HAL_GPIO_Init>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8004072:	2200      	movs	r2, #0
 8004074:	2100      	movs	r1, #0
 8004076:	2002      	movs	r0, #2
 8004078:	f002 ff84 	bl	8006f84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 800407c:	2002      	movs	r0, #2
 800407e:	f002 ff96 	bl	8006fae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8004082:	46c0      	nop			; (mov r8, r8)
 8004084:	46bd      	mov	sp, r7
 8004086:	b008      	add	sp, #32
 8004088:	bd80      	pop	{r7, pc}
 800408a:	46c0      	nop			; (mov r8, r8)
 800408c:	40002800 	.word	0x40002800
 8004090:	40021000 	.word	0x40021000
 8004094:	50000800 	.word	0x50000800

08004098 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b088      	sub	sp, #32
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040a0:	230c      	movs	r3, #12
 80040a2:	18fb      	adds	r3, r7, r3
 80040a4:	0018      	movs	r0, r3
 80040a6:	2314      	movs	r3, #20
 80040a8:	001a      	movs	r2, r3
 80040aa:	2100      	movs	r1, #0
 80040ac:	f006 fd85 	bl	800abba <memset>
  if(hspi->Instance==SPI1)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a30      	ldr	r2, [pc, #192]	; (8004178 <HAL_SPI_MspInit+0xe0>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d15a      	bne.n	8004170 <HAL_SPI_MspInit+0xd8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80040ba:	4b30      	ldr	r3, [pc, #192]	; (800417c <HAL_SPI_MspInit+0xe4>)
 80040bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040be:	4b2f      	ldr	r3, [pc, #188]	; (800417c <HAL_SPI_MspInit+0xe4>)
 80040c0:	2180      	movs	r1, #128	; 0x80
 80040c2:	0149      	lsls	r1, r1, #5
 80040c4:	430a      	orrs	r2, r1
 80040c6:	635a      	str	r2, [r3, #52]	; 0x34
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040c8:	4b2c      	ldr	r3, [pc, #176]	; (800417c <HAL_SPI_MspInit+0xe4>)
 80040ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040cc:	4b2b      	ldr	r3, [pc, #172]	; (800417c <HAL_SPI_MspInit+0xe4>)
 80040ce:	2101      	movs	r1, #1
 80040d0:	430a      	orrs	r2, r1
 80040d2:	62da      	str	r2, [r3, #44]	; 0x2c
 80040d4:	4b29      	ldr	r3, [pc, #164]	; (800417c <HAL_SPI_MspInit+0xe4>)
 80040d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040d8:	2201      	movs	r2, #1
 80040da:	4013      	ands	r3, r2
 80040dc:	60bb      	str	r3, [r7, #8]
 80040de:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80040e0:	210c      	movs	r1, #12
 80040e2:	187b      	adds	r3, r7, r1
 80040e4:	22a0      	movs	r2, #160	; 0xa0
 80040e6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040e8:	187b      	adds	r3, r7, r1
 80040ea:	2202      	movs	r2, #2
 80040ec:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040ee:	187b      	adds	r3, r7, r1
 80040f0:	2200      	movs	r2, #0
 80040f2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040f4:	187b      	adds	r3, r7, r1
 80040f6:	2203      	movs	r2, #3
 80040f8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80040fa:	187b      	adds	r3, r7, r1
 80040fc:	2200      	movs	r2, #0
 80040fe:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004100:	187a      	adds	r2, r7, r1
 8004102:	23a0      	movs	r3, #160	; 0xa0
 8004104:	05db      	lsls	r3, r3, #23
 8004106:	0011      	movs	r1, r2
 8004108:	0018      	movs	r0, r3
 800410a:	f003 f8fb 	bl	8007304 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 800410e:	4b1c      	ldr	r3, [pc, #112]	; (8004180 <HAL_SPI_MspInit+0xe8>)
 8004110:	4a1c      	ldr	r2, [pc, #112]	; (8004184 <HAL_SPI_MspInit+0xec>)
 8004112:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
 8004114:	4b1a      	ldr	r3, [pc, #104]	; (8004180 <HAL_SPI_MspInit+0xe8>)
 8004116:	2201      	movs	r2, #1
 8004118:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800411a:	4b19      	ldr	r3, [pc, #100]	; (8004180 <HAL_SPI_MspInit+0xe8>)
 800411c:	2210      	movs	r2, #16
 800411e:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004120:	4b17      	ldr	r3, [pc, #92]	; (8004180 <HAL_SPI_MspInit+0xe8>)
 8004122:	2200      	movs	r2, #0
 8004124:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004126:	4b16      	ldr	r3, [pc, #88]	; (8004180 <HAL_SPI_MspInit+0xe8>)
 8004128:	2280      	movs	r2, #128	; 0x80
 800412a:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800412c:	4b14      	ldr	r3, [pc, #80]	; (8004180 <HAL_SPI_MspInit+0xe8>)
 800412e:	2200      	movs	r2, #0
 8004130:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004132:	4b13      	ldr	r3, [pc, #76]	; (8004180 <HAL_SPI_MspInit+0xe8>)
 8004134:	2200      	movs	r2, #0
 8004136:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8004138:	4b11      	ldr	r3, [pc, #68]	; (8004180 <HAL_SPI_MspInit+0xe8>)
 800413a:	2200      	movs	r2, #0
 800413c:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800413e:	4b10      	ldr	r3, [pc, #64]	; (8004180 <HAL_SPI_MspInit+0xe8>)
 8004140:	2200      	movs	r2, #0
 8004142:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8004144:	4b0e      	ldr	r3, [pc, #56]	; (8004180 <HAL_SPI_MspInit+0xe8>)
 8004146:	0018      	movs	r0, r3
 8004148:	f002 ff6e 	bl	8007028 <HAL_DMA_Init>
 800414c:	1e03      	subs	r3, r0, #0
 800414e:	d001      	beq.n	8004154 <HAL_SPI_MspInit+0xbc>
    {
      Error_Handler();
 8004150:	f7ff feec 	bl	8003f2c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	4a0a      	ldr	r2, [pc, #40]	; (8004180 <HAL_SPI_MspInit+0xe8>)
 8004158:	649a      	str	r2, [r3, #72]	; 0x48
 800415a:	4b09      	ldr	r3, [pc, #36]	; (8004180 <HAL_SPI_MspInit+0xe8>)
 800415c:	687a      	ldr	r2, [r7, #4]
 800415e:	629a      	str	r2, [r3, #40]	; 0x28

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8004160:	2200      	movs	r2, #0
 8004162:	2100      	movs	r1, #0
 8004164:	2019      	movs	r0, #25
 8004166:	f002 ff0d 	bl	8006f84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800416a:	2019      	movs	r0, #25
 800416c:	f002 ff1f 	bl	8006fae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8004170:	46c0      	nop			; (mov r8, r8)
 8004172:	46bd      	mov	sp, r7
 8004174:	b008      	add	sp, #32
 8004176:	bd80      	pop	{r7, pc}
 8004178:	40013000 	.word	0x40013000
 800417c:	40021000 	.word	0x40021000
 8004180:	2000031c 	.word	0x2000031c
 8004184:	40020030 	.word	0x40020030

08004188 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b082      	sub	sp, #8
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681a      	ldr	r2, [r3, #0]
 8004194:	2380      	movs	r3, #128	; 0x80
 8004196:	05db      	lsls	r3, r3, #23
 8004198:	429a      	cmp	r2, r3
 800419a:	d10e      	bne.n	80041ba <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800419c:	4b26      	ldr	r3, [pc, #152]	; (8004238 <HAL_TIM_Base_MspInit+0xb0>)
 800419e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041a0:	4b25      	ldr	r3, [pc, #148]	; (8004238 <HAL_TIM_Base_MspInit+0xb0>)
 80041a2:	2101      	movs	r1, #1
 80041a4:	430a      	orrs	r2, r1
 80041a6:	639a      	str	r2, [r3, #56]	; 0x38
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80041a8:	2200      	movs	r2, #0
 80041aa:	2100      	movs	r1, #0
 80041ac:	200f      	movs	r0, #15
 80041ae:	f002 fee9 	bl	8006f84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80041b2:	200f      	movs	r0, #15
 80041b4:	f002 fefb 	bl	8006fae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM22_MspInit 1 */

  /* USER CODE END TIM22_MspInit 1 */
  }

}
 80041b8:	e03a      	b.n	8004230 <HAL_TIM_Base_MspInit+0xa8>
  else if(htim_base->Instance==TIM6)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a1f      	ldr	r2, [pc, #124]	; (800423c <HAL_TIM_Base_MspInit+0xb4>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d10e      	bne.n	80041e2 <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80041c4:	4b1c      	ldr	r3, [pc, #112]	; (8004238 <HAL_TIM_Base_MspInit+0xb0>)
 80041c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041c8:	4b1b      	ldr	r3, [pc, #108]	; (8004238 <HAL_TIM_Base_MspInit+0xb0>)
 80041ca:	2110      	movs	r1, #16
 80041cc:	430a      	orrs	r2, r1
 80041ce:	639a      	str	r2, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80041d0:	2200      	movs	r2, #0
 80041d2:	2100      	movs	r1, #0
 80041d4:	2011      	movs	r0, #17
 80041d6:	f002 fed5 	bl	8006f84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80041da:	2011      	movs	r0, #17
 80041dc:	f002 fee7 	bl	8006fae <HAL_NVIC_EnableIRQ>
}
 80041e0:	e026      	b.n	8004230 <HAL_TIM_Base_MspInit+0xa8>
  else if(htim_base->Instance==TIM21)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a16      	ldr	r2, [pc, #88]	; (8004240 <HAL_TIM_Base_MspInit+0xb8>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d10e      	bne.n	800420a <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM21_CLK_ENABLE();
 80041ec:	4b12      	ldr	r3, [pc, #72]	; (8004238 <HAL_TIM_Base_MspInit+0xb0>)
 80041ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041f0:	4b11      	ldr	r3, [pc, #68]	; (8004238 <HAL_TIM_Base_MspInit+0xb0>)
 80041f2:	2104      	movs	r1, #4
 80041f4:	430a      	orrs	r2, r1
 80041f6:	635a      	str	r2, [r3, #52]	; 0x34
    HAL_NVIC_SetPriority(TIM21_IRQn, 0, 0);
 80041f8:	2200      	movs	r2, #0
 80041fa:	2100      	movs	r1, #0
 80041fc:	2014      	movs	r0, #20
 80041fe:	f002 fec1 	bl	8006f84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM21_IRQn);
 8004202:	2014      	movs	r0, #20
 8004204:	f002 fed3 	bl	8006fae <HAL_NVIC_EnableIRQ>
}
 8004208:	e012      	b.n	8004230 <HAL_TIM_Base_MspInit+0xa8>
  else if(htim_base->Instance==TIM22)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a0d      	ldr	r2, [pc, #52]	; (8004244 <HAL_TIM_Base_MspInit+0xbc>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d10d      	bne.n	8004230 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM22_CLK_ENABLE();
 8004214:	4b08      	ldr	r3, [pc, #32]	; (8004238 <HAL_TIM_Base_MspInit+0xb0>)
 8004216:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004218:	4b07      	ldr	r3, [pc, #28]	; (8004238 <HAL_TIM_Base_MspInit+0xb0>)
 800421a:	2120      	movs	r1, #32
 800421c:	430a      	orrs	r2, r1
 800421e:	635a      	str	r2, [r3, #52]	; 0x34
    HAL_NVIC_SetPriority(TIM22_IRQn, 0, 0);
 8004220:	2200      	movs	r2, #0
 8004222:	2100      	movs	r1, #0
 8004224:	2016      	movs	r0, #22
 8004226:	f002 fead 	bl	8006f84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM22_IRQn);
 800422a:	2016      	movs	r0, #22
 800422c:	f002 febf 	bl	8006fae <HAL_NVIC_EnableIRQ>
}
 8004230:	46c0      	nop			; (mov r8, r8)
 8004232:	46bd      	mov	sp, r7
 8004234:	b002      	add	sp, #8
 8004236:	bd80      	pop	{r7, pc}
 8004238:	40021000 	.word	0x40021000
 800423c:	40001000 	.word	0x40001000
 8004240:	40010800 	.word	0x40010800
 8004244:	40011400 	.word	0x40011400

08004248 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b088      	sub	sp, #32
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004250:	230c      	movs	r3, #12
 8004252:	18fb      	adds	r3, r7, r3
 8004254:	0018      	movs	r0, r3
 8004256:	2314      	movs	r3, #20
 8004258:	001a      	movs	r2, r3
 800425a:	2100      	movs	r1, #0
 800425c:	f006 fcad 	bl	800abba <memset>
  if(htim->Instance==TIM2)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	2380      	movs	r3, #128	; 0x80
 8004266:	05db      	lsls	r3, r3, #23
 8004268:	429a      	cmp	r2, r3
 800426a:	d123      	bne.n	80042b4 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800426c:	4b13      	ldr	r3, [pc, #76]	; (80042bc <HAL_TIM_MspPostInit+0x74>)
 800426e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004270:	4b12      	ldr	r3, [pc, #72]	; (80042bc <HAL_TIM_MspPostInit+0x74>)
 8004272:	2101      	movs	r1, #1
 8004274:	430a      	orrs	r2, r1
 8004276:	62da      	str	r2, [r3, #44]	; 0x2c
 8004278:	4b10      	ldr	r3, [pc, #64]	; (80042bc <HAL_TIM_MspPostInit+0x74>)
 800427a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800427c:	2201      	movs	r2, #1
 800427e:	4013      	ands	r3, r2
 8004280:	60bb      	str	r3, [r7, #8]
 8004282:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration    
    PA15     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004284:	210c      	movs	r1, #12
 8004286:	187b      	adds	r3, r7, r1
 8004288:	2280      	movs	r2, #128	; 0x80
 800428a:	0212      	lsls	r2, r2, #8
 800428c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800428e:	187b      	adds	r3, r7, r1
 8004290:	2202      	movs	r2, #2
 8004292:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004294:	187b      	adds	r3, r7, r1
 8004296:	2200      	movs	r2, #0
 8004298:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800429a:	187b      	adds	r3, r7, r1
 800429c:	2200      	movs	r2, #0
 800429e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM2;
 80042a0:	187b      	adds	r3, r7, r1
 80042a2:	2205      	movs	r2, #5
 80042a4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042a6:	187a      	adds	r2, r7, r1
 80042a8:	23a0      	movs	r3, #160	; 0xa0
 80042aa:	05db      	lsls	r3, r3, #23
 80042ac:	0011      	movs	r1, r2
 80042ae:	0018      	movs	r0, r3
 80042b0:	f003 f828 	bl	8007304 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80042b4:	46c0      	nop			; (mov r8, r8)
 80042b6:	46bd      	mov	sp, r7
 80042b8:	b008      	add	sp, #32
 80042ba:	bd80      	pop	{r7, pc}
 80042bc:	40021000 	.word	0x40021000

080042c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80042c4:	46c0      	nop			; (mov r8, r8)
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}

080042ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80042ca:	b580      	push	{r7, lr}
 80042cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80042ce:	e7fe      	b.n	80042ce <HardFault_Handler+0x4>

080042d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80042d4:	46c0      	nop			; (mov r8, r8)
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}

080042da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80042da:	b580      	push	{r7, lr}
 80042dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80042de:	46c0      	nop			; (mov r8, r8)
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}

080042e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80042e8:	f002 f8b4 	bl	8006454 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80042ec:	46c0      	nop			; (mov r8, r8)
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}
	...

080042f4 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80042f8:	4b03      	ldr	r3, [pc, #12]	; (8004308 <RTC_IRQHandler+0x14>)
 80042fa:	0018      	movs	r0, r3
 80042fc:	f004 fee8 	bl	80090d0 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8004300:	46c0      	nop			; (mov r8, r8)
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}
 8004306:	46c0      	nop			; (mov r8, r8)
 8004308:	20000208 	.word	0x20000208

0800430c <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8004310:	2004      	movs	r0, #4
 8004312:	f003 f9c1 	bl	8007698 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8004316:	46c0      	nop			; (mov r8, r8)
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}

0800431c <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8004320:	2380      	movs	r3, #128	; 0x80
 8004322:	019b      	lsls	r3, r3, #6
 8004324:	0018      	movs	r0, r3
 8004326:	f003 f9b7 	bl	8007698 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 800432a:	2380      	movs	r3, #128	; 0x80
 800432c:	01db      	lsls	r3, r3, #7
 800432e:	0018      	movs	r0, r3
 8004330:	f003 f9b2 	bl	8007698 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8004334:	2380      	movs	r3, #128	; 0x80
 8004336:	021b      	lsls	r3, r3, #8
 8004338:	0018      	movs	r0, r3
 800433a:	f003 f9ad 	bl	8007698 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800433e:	46c0      	nop			; (mov r8, r8)
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}

08004344 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8004348:	4b03      	ldr	r3, [pc, #12]	; (8004358 <DMA1_Channel2_3_IRQHandler+0x14>)
 800434a:	0018      	movs	r0, r3
 800434c:	f002 ff2c 	bl	80071a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8004350:	46c0      	nop			; (mov r8, r8)
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}
 8004356:	46c0      	nop			; (mov r8, r8)
 8004358:	2000031c 	.word	0x2000031c

0800435c <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt / LPTIM1 wake-up interrupt through EXTI line 29.
  */
void LPTIM1_IRQHandler(void)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 8004360:	4b03      	ldr	r3, [pc, #12]	; (8004370 <LPTIM1_IRQHandler+0x14>)
 8004362:	0018      	movs	r0, r3
 8004364:	f003 fa34 	bl	80077d0 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 8004368:	46c0      	nop			; (mov r8, r8)
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}
 800436e:	46c0      	nop			; (mov r8, r8)
 8004370:	200001d8 	.word	0x200001d8

08004374 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004378:	4b03      	ldr	r3, [pc, #12]	; (8004388 <TIM2_IRQHandler+0x14>)
 800437a:	0018      	movs	r0, r3
 800437c:	f005 fe9c 	bl	800a0b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004380:	46c0      	nop			; (mov r8, r8)
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}
 8004386:	46c0      	nop			; (mov r8, r8)
 8004388:	20000284 	.word	0x20000284

0800438c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1/DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004390:	4b03      	ldr	r3, [pc, #12]	; (80043a0 <TIM6_DAC_IRQHandler+0x14>)
 8004392:	0018      	movs	r0, r3
 8004394:	f005 fe90 	bl	800a0b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004398:	46c0      	nop			; (mov r8, r8)
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}
 800439e:	46c0      	nop			; (mov r8, r8)
 80043a0:	20000154 	.word	0x20000154

080043a4 <TIM21_IRQHandler>:

/**
  * @brief This function handles TIM21 global interrupt.
  */
void TIM21_IRQHandler(void)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM21_IRQn 0 */

  /* USER CODE END TIM21_IRQn 0 */
  HAL_TIM_IRQHandler(&htim21);
 80043a8:	4b03      	ldr	r3, [pc, #12]	; (80043b8 <TIM21_IRQHandler+0x14>)
 80043aa:	0018      	movs	r0, r3
 80043ac:	f005 fe84 	bl	800a0b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM21_IRQn 1 */

  /* USER CODE END TIM21_IRQn 1 */
}
 80043b0:	46c0      	nop			; (mov r8, r8)
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}
 80043b6:	46c0      	nop			; (mov r8, r8)
 80043b8:	20000364 	.word	0x20000364

080043bc <TIM22_IRQHandler>:

/**
  * @brief This function handles TIM22 global interrupt.
  */
void TIM22_IRQHandler(void)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM22_IRQn 0 */

  /* USER CODE END TIM22_IRQn 0 */
  HAL_TIM_IRQHandler(&htim22);
 80043c0:	4b03      	ldr	r3, [pc, #12]	; (80043d0 <TIM22_IRQHandler+0x14>)
 80043c2:	0018      	movs	r0, r3
 80043c4:	f005 fe78 	bl	800a0b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM22_IRQn 1 */

  /* USER CODE END TIM22_IRQn 1 */
}
 80043c8:	46c0      	nop			; (mov r8, r8)
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}
 80043ce:	46c0      	nop			; (mov r8, r8)
 80043d0:	2000019c 	.word	0x2000019c

080043d4 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80043d8:	4b03      	ldr	r3, [pc, #12]	; (80043e8 <SPI1_IRQHandler+0x14>)
 80043da:	0018      	movs	r0, r3
 80043dc:	f005 fa4e 	bl	800987c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80043e0:	46c0      	nop			; (mov r8, r8)
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}
 80043e6:	46c0      	nop			; (mov r8, r8)
 80043e8:	2000022c 	.word	0x2000022c

080043ec <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b084      	sub	sp, #16
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80043f4:	4b11      	ldr	r3, [pc, #68]	; (800443c <_sbrk+0x50>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d102      	bne.n	8004402 <_sbrk+0x16>
		heap_end = &end;
 80043fc:	4b0f      	ldr	r3, [pc, #60]	; (800443c <_sbrk+0x50>)
 80043fe:	4a10      	ldr	r2, [pc, #64]	; (8004440 <_sbrk+0x54>)
 8004400:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8004402:	4b0e      	ldr	r3, [pc, #56]	; (800443c <_sbrk+0x50>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8004408:	4b0c      	ldr	r3, [pc, #48]	; (800443c <_sbrk+0x50>)
 800440a:	681a      	ldr	r2, [r3, #0]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	18d3      	adds	r3, r2, r3
 8004410:	466a      	mov	r2, sp
 8004412:	4293      	cmp	r3, r2
 8004414:	d907      	bls.n	8004426 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8004416:	f006 fb9d 	bl	800ab54 <__errno>
 800441a:	0003      	movs	r3, r0
 800441c:	220c      	movs	r2, #12
 800441e:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8004420:	2301      	movs	r3, #1
 8004422:	425b      	negs	r3, r3
 8004424:	e006      	b.n	8004434 <_sbrk+0x48>
	}

	heap_end += incr;
 8004426:	4b05      	ldr	r3, [pc, #20]	; (800443c <_sbrk+0x50>)
 8004428:	681a      	ldr	r2, [r3, #0]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	18d2      	adds	r2, r2, r3
 800442e:	4b03      	ldr	r3, [pc, #12]	; (800443c <_sbrk+0x50>)
 8004430:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 8004432:	68fb      	ldr	r3, [r7, #12]
}
 8004434:	0018      	movs	r0, r3
 8004436:	46bd      	mov	sp, r7
 8004438:	b004      	add	sp, #16
 800443a:	bd80      	pop	{r7, pc}
 800443c:	200000f8 	.word	0x200000f8
 8004440:	200003a8 	.word	0x200003a8

08004444 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8004448:	4b17      	ldr	r3, [pc, #92]	; (80044a8 <SystemInit+0x64>)
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	4b16      	ldr	r3, [pc, #88]	; (80044a8 <SystemInit+0x64>)
 800444e:	2180      	movs	r1, #128	; 0x80
 8004450:	0049      	lsls	r1, r1, #1
 8004452:	430a      	orrs	r2, r1
 8004454:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8004456:	4b14      	ldr	r3, [pc, #80]	; (80044a8 <SystemInit+0x64>)
 8004458:	68da      	ldr	r2, [r3, #12]
 800445a:	4b13      	ldr	r3, [pc, #76]	; (80044a8 <SystemInit+0x64>)
 800445c:	4913      	ldr	r1, [pc, #76]	; (80044ac <SystemInit+0x68>)
 800445e:	400a      	ands	r2, r1
 8004460:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8004462:	4b11      	ldr	r3, [pc, #68]	; (80044a8 <SystemInit+0x64>)
 8004464:	681a      	ldr	r2, [r3, #0]
 8004466:	4b10      	ldr	r3, [pc, #64]	; (80044a8 <SystemInit+0x64>)
 8004468:	4911      	ldr	r1, [pc, #68]	; (80044b0 <SystemInit+0x6c>)
 800446a:	400a      	ands	r2, r1
 800446c:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800446e:	4b0e      	ldr	r3, [pc, #56]	; (80044a8 <SystemInit+0x64>)
 8004470:	689a      	ldr	r2, [r3, #8]
 8004472:	4b0d      	ldr	r3, [pc, #52]	; (80044a8 <SystemInit+0x64>)
 8004474:	2101      	movs	r1, #1
 8004476:	438a      	bics	r2, r1
 8004478:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 800447a:	4b0b      	ldr	r3, [pc, #44]	; (80044a8 <SystemInit+0x64>)
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	4b0a      	ldr	r3, [pc, #40]	; (80044a8 <SystemInit+0x64>)
 8004480:	490c      	ldr	r1, [pc, #48]	; (80044b4 <SystemInit+0x70>)
 8004482:	400a      	ands	r2, r1
 8004484:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8004486:	4b08      	ldr	r3, [pc, #32]	; (80044a8 <SystemInit+0x64>)
 8004488:	68da      	ldr	r2, [r3, #12]
 800448a:	4b07      	ldr	r3, [pc, #28]	; (80044a8 <SystemInit+0x64>)
 800448c:	490a      	ldr	r1, [pc, #40]	; (80044b8 <SystemInit+0x74>)
 800448e:	400a      	ands	r2, r1
 8004490:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8004492:	4b05      	ldr	r3, [pc, #20]	; (80044a8 <SystemInit+0x64>)
 8004494:	2200      	movs	r2, #0
 8004496:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004498:	4b08      	ldr	r3, [pc, #32]	; (80044bc <SystemInit+0x78>)
 800449a:	2280      	movs	r2, #128	; 0x80
 800449c:	0512      	lsls	r2, r2, #20
 800449e:	609a      	str	r2, [r3, #8]
#endif
}
 80044a0:	46c0      	nop			; (mov r8, r8)
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}
 80044a6:	46c0      	nop			; (mov r8, r8)
 80044a8:	40021000 	.word	0x40021000
 80044ac:	88ff400c 	.word	0x88ff400c
 80044b0:	fef6fff6 	.word	0xfef6fff6
 80044b4:	fffbffff 	.word	0xfffbffff
 80044b8:	ff02ffff 	.word	0xff02ffff
 80044bc:	e000ed00 	.word	0xe000ed00

080044c0 <HAL_TIM_PeriodElapsedCallback>:
static uint32_t stopwatchStartMarker = 0;
static uint32_t stopwatchPauseMarker = 0;
static uint8_t motorStateCounter = 0;

// important boye that is called for a bunch of different timers
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b082      	sub	sp, #8
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
	// button's timer
	if (htim->Instance == TIM6) {
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a17      	ldr	r2, [pc, #92]	; (800452c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d11f      	bne.n	8004512 <HAL_TIM_PeriodElapsedCallback+0x52>
		// renable button interrupts and clear pending
		HAL_TIM_Base_Stop_IT(htim);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	0018      	movs	r0, r3
 80044d6:	f005 fcc1 	bl	8009e5c <HAL_TIM_Base_Stop_IT>
		HAL_NVIC_ClearPendingIRQ(EXTI2_3_IRQn);
 80044da:	2006      	movs	r0, #6
 80044dc:	f002 fd94 	bl	8007008 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_ClearPendingIRQ(EXTI4_15_IRQn);
 80044e0:	2007      	movs	r0, #7
 80044e2:	f002 fd91 	bl	8007008 <HAL_NVIC_ClearPendingIRQ>
		__HAL_GPIO_EXTI_CLEAR_IT(BUTTON1);
 80044e6:	4b12      	ldr	r3, [pc, #72]	; (8004530 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80044e8:	2204      	movs	r2, #4
 80044ea:	615a      	str	r2, [r3, #20]
		__HAL_GPIO_EXTI_CLEAR_IT(BUTTON2);
 80044ec:	4b10      	ldr	r3, [pc, #64]	; (8004530 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80044ee:	2280      	movs	r2, #128	; 0x80
 80044f0:	0192      	lsls	r2, r2, #6
 80044f2:	615a      	str	r2, [r3, #20]
		__HAL_GPIO_EXTI_CLEAR_IT(BUTTON3);
 80044f4:	4b0e      	ldr	r3, [pc, #56]	; (8004530 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80044f6:	2280      	movs	r2, #128	; 0x80
 80044f8:	01d2      	lsls	r2, r2, #7
 80044fa:	615a      	str	r2, [r3, #20]
		__HAL_GPIO_EXTI_CLEAR_IT(BUTTON4);
 80044fc:	4b0c      	ldr	r3, [pc, #48]	; (8004530 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80044fe:	2280      	movs	r2, #128	; 0x80
 8004500:	0212      	lsls	r2, r2, #8
 8004502:	615a      	str	r2, [r3, #20]

		HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8004504:	2006      	movs	r0, #6
 8004506:	f002 fd52 	bl	8006fae <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800450a:	2007      	movs	r0, #7
 800450c:	f002 fd4f 	bl	8006fae <HAL_NVIC_EnableIRQ>
	}
	// sampler's timer
	else if (htim->Instance == TIM22) {
		canSampleBattery = 1;
	}
}
 8004510:	e007      	b.n	8004522 <HAL_TIM_PeriodElapsedCallback+0x62>
	else if (htim->Instance == TIM22) {
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a07      	ldr	r2, [pc, #28]	; (8004534 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d102      	bne.n	8004522 <HAL_TIM_PeriodElapsedCallback+0x62>
		canSampleBattery = 1;
 800451c:	4b06      	ldr	r3, [pc, #24]	; (8004538 <HAL_TIM_PeriodElapsedCallback+0x78>)
 800451e:	2201      	movs	r2, #1
 8004520:	701a      	strb	r2, [r3, #0]
}
 8004522:	46c0      	nop			; (mov r8, r8)
 8004524:	46bd      	mov	sp, r7
 8004526:	b002      	add	sp, #8
 8004528:	bd80      	pop	{r7, pc}
 800452a:	46c0      	nop			; (mov r8, r8)
 800452c:	40001000 	.word	0x40001000
 8004530:	40010400 	.word	0x40010400
 8004534:	40011400 	.word	0x40011400
 8004538:	20000141 	.word	0x20000141

0800453c <HAL_TIM_OC_DelayElapsedCallback>:

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 800453c:	b580      	push	{r7, lr}
 800453e:	b082      	sub	sp, #8
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM21) {
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a40      	ldr	r2, [pc, #256]	; (800464c <HAL_TIM_OC_DelayElapsedCallback+0x110>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d137      	bne.n	80045be <HAL_TIM_OC_DelayElapsedCallback+0x82>
		// timer's channel
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	7e1b      	ldrb	r3, [r3, #24]
 8004552:	2b01      	cmp	r3, #1
 8004554:	d121      	bne.n	800459a <HAL_TIM_OC_DelayElapsedCallback+0x5e>
			updateFace.timer = 1;
 8004556:	4b3e      	ldr	r3, [pc, #248]	; (8004650 <HAL_TIM_OC_DelayElapsedCallback+0x114>)
 8004558:	2201      	movs	r2, #1
 800455a:	705a      	strb	r2, [r3, #1]
			if (timerCounter != 1) --timerCounter;
 800455c:	4b3d      	ldr	r3, [pc, #244]	; (8004654 <HAL_TIM_OC_DelayElapsedCallback+0x118>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	2b01      	cmp	r3, #1
 8004562:	d005      	beq.n	8004570 <HAL_TIM_OC_DelayElapsedCallback+0x34>
 8004564:	4b3b      	ldr	r3, [pc, #236]	; (8004654 <HAL_TIM_OC_DelayElapsedCallback+0x118>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	1e5a      	subs	r2, r3, #1
 800456a:	4b3a      	ldr	r3, [pc, #232]	; (8004654 <HAL_TIM_OC_DelayElapsedCallback+0x118>)
 800456c:	601a      	str	r2, [r3, #0]
				stopMotor(htim);
				break;
			default: break;
		}
	}
}
 800456e:	e068      	b.n	8004642 <HAL_TIM_OC_DelayElapsedCallback+0x106>
				--timerCounter;
 8004570:	4b38      	ldr	r3, [pc, #224]	; (8004654 <HAL_TIM_OC_DelayElapsedCallback+0x118>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	1e5a      	subs	r2, r3, #1
 8004576:	4b37      	ldr	r3, [pc, #220]	; (8004654 <HAL_TIM_OC_DelayElapsedCallback+0x118>)
 8004578:	601a      	str	r2, [r3, #0]
				isTimerDone = 1;
 800457a:	4b37      	ldr	r3, [pc, #220]	; (8004658 <HAL_TIM_OC_DelayElapsedCallback+0x11c>)
 800457c:	2201      	movs	r2, #1
 800457e:	701a      	strb	r2, [r3, #0]
				stopTimer(htim);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	0018      	movs	r0, r3
 8004584:	f000 f8e4 	bl	8004750 <stopTimer>
				updateFace.timer = 1;
 8004588:	4b31      	ldr	r3, [pc, #196]	; (8004650 <HAL_TIM_OC_DelayElapsedCallback+0x114>)
 800458a:	2201      	movs	r2, #1
 800458c:	705a      	strb	r2, [r3, #1]
				HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_1);
 800458e:	4b33      	ldr	r3, [pc, #204]	; (800465c <HAL_TIM_OC_DelayElapsedCallback+0x120>)
 8004590:	2102      	movs	r1, #2
 8004592:	0018      	movs	r0, r3
 8004594:	f003 f86e 	bl	8007674 <HAL_GPIO_TogglePin>
}
 8004598:	e053      	b.n	8004642 <HAL_TIM_OC_DelayElapsedCallback+0x106>
		else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) {
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	7e1b      	ldrb	r3, [r3, #24]
 800459e:	2b02      	cmp	r3, #2
 80045a0:	d14f      	bne.n	8004642 <HAL_TIM_OC_DelayElapsedCallback+0x106>
			updateFace.stopwatch = 1;
 80045a2:	4b2b      	ldr	r3, [pc, #172]	; (8004650 <HAL_TIM_OC_DelayElapsedCallback+0x114>)
 80045a4:	2201      	movs	r2, #1
 80045a6:	70da      	strb	r2, [r3, #3]
			++stopwatchCounter;
 80045a8:	4b2d      	ldr	r3, [pc, #180]	; (8004660 <HAL_TIM_OC_DelayElapsedCallback+0x124>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	1c5a      	adds	r2, r3, #1
 80045ae:	4b2c      	ldr	r3, [pc, #176]	; (8004660 <HAL_TIM_OC_DelayElapsedCallback+0x124>)
 80045b0:	601a      	str	r2, [r3, #0]
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_1);
 80045b2:	4b2a      	ldr	r3, [pc, #168]	; (800465c <HAL_TIM_OC_DelayElapsedCallback+0x120>)
 80045b4:	2102      	movs	r1, #2
 80045b6:	0018      	movs	r0, r3
 80045b8:	f003 f85c 	bl	8007674 <HAL_GPIO_TogglePin>
}
 80045bc:	e041      	b.n	8004642 <HAL_TIM_OC_DelayElapsedCallback+0x106>
	else if (htim->Instance == TIM2) {
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	2380      	movs	r3, #128	; 0x80
 80045c4:	05db      	lsls	r3, r3, #23
 80045c6:	429a      	cmp	r2, r3
 80045c8:	d138      	bne.n	800463c <HAL_TIM_OC_DelayElapsedCallback+0x100>
		++motorStateCounter;
 80045ca:	4b26      	ldr	r3, [pc, #152]	; (8004664 <HAL_TIM_OC_DelayElapsedCallback+0x128>)
 80045cc:	781b      	ldrb	r3, [r3, #0]
 80045ce:	3301      	adds	r3, #1
 80045d0:	b2da      	uxtb	r2, r3
 80045d2:	4b24      	ldr	r3, [pc, #144]	; (8004664 <HAL_TIM_OC_DelayElapsedCallback+0x128>)
 80045d4:	701a      	strb	r2, [r3, #0]
		switch(motorStateCounter) {
 80045d6:	4b23      	ldr	r3, [pc, #140]	; (8004664 <HAL_TIM_OC_DelayElapsedCallback+0x128>)
 80045d8:	781b      	ldrb	r3, [r3, #0]
 80045da:	2b06      	cmp	r3, #6
 80045dc:	d830      	bhi.n	8004640 <HAL_TIM_OC_DelayElapsedCallback+0x104>
 80045de:	009a      	lsls	r2, r3, #2
 80045e0:	4b21      	ldr	r3, [pc, #132]	; (8004668 <HAL_TIM_OC_DelayElapsedCallback+0x12c>)
 80045e2:	18d3      	adds	r3, r2, r3
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	469f      	mov	pc, r3
			case 1: HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_PIN, GPIO_PIN_SET); break;
 80045e8:	4b20      	ldr	r3, [pc, #128]	; (800466c <HAL_TIM_OC_DelayElapsedCallback+0x130>)
 80045ea:	2201      	movs	r2, #1
 80045ec:	2101      	movs	r1, #1
 80045ee:	0018      	movs	r0, r3
 80045f0:	f003 f823 	bl	800763a <HAL_GPIO_WritePin>
 80045f4:	e025      	b.n	8004642 <HAL_TIM_OC_DelayElapsedCallback+0x106>
			case 2: HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_PIN, GPIO_PIN_RESET); break;
 80045f6:	4b1d      	ldr	r3, [pc, #116]	; (800466c <HAL_TIM_OC_DelayElapsedCallback+0x130>)
 80045f8:	2200      	movs	r2, #0
 80045fa:	2101      	movs	r1, #1
 80045fc:	0018      	movs	r0, r3
 80045fe:	f003 f81c 	bl	800763a <HAL_GPIO_WritePin>
 8004602:	e01e      	b.n	8004642 <HAL_TIM_OC_DelayElapsedCallback+0x106>
			case 3: HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_PIN, GPIO_PIN_SET); break;
 8004604:	4b19      	ldr	r3, [pc, #100]	; (800466c <HAL_TIM_OC_DelayElapsedCallback+0x130>)
 8004606:	2201      	movs	r2, #1
 8004608:	2101      	movs	r1, #1
 800460a:	0018      	movs	r0, r3
 800460c:	f003 f815 	bl	800763a <HAL_GPIO_WritePin>
 8004610:	e017      	b.n	8004642 <HAL_TIM_OC_DelayElapsedCallback+0x106>
			case 4: HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_PIN, GPIO_PIN_RESET); break;
 8004612:	4b16      	ldr	r3, [pc, #88]	; (800466c <HAL_TIM_OC_DelayElapsedCallback+0x130>)
 8004614:	2200      	movs	r2, #0
 8004616:	2101      	movs	r1, #1
 8004618:	0018      	movs	r0, r3
 800461a:	f003 f80e 	bl	800763a <HAL_GPIO_WritePin>
 800461e:	e010      	b.n	8004642 <HAL_TIM_OC_DelayElapsedCallback+0x106>
			case 5: HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_PIN, GPIO_PIN_SET); break;
 8004620:	4b12      	ldr	r3, [pc, #72]	; (800466c <HAL_TIM_OC_DelayElapsedCallback+0x130>)
 8004622:	2201      	movs	r2, #1
 8004624:	2101      	movs	r1, #1
 8004626:	0018      	movs	r0, r3
 8004628:	f003 f807 	bl	800763a <HAL_GPIO_WritePin>
 800462c:	e009      	b.n	8004642 <HAL_TIM_OC_DelayElapsedCallback+0x106>
				HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_PIN, GPIO_PIN_RESET); break;
 800462e:	4b0f      	ldr	r3, [pc, #60]	; (800466c <HAL_TIM_OC_DelayElapsedCallback+0x130>)
 8004630:	2200      	movs	r2, #0
 8004632:	2101      	movs	r1, #1
 8004634:	0018      	movs	r0, r3
 8004636:	f003 f800 	bl	800763a <HAL_GPIO_WritePin>
 800463a:	e002      	b.n	8004642 <HAL_TIM_OC_DelayElapsedCallback+0x106>
	}
 800463c:	46c0      	nop			; (mov r8, r8)
 800463e:	e000      	b.n	8004642 <HAL_TIM_OC_DelayElapsedCallback+0x106>
			default: break;
 8004640:	46c0      	nop			; (mov r8, r8)
}
 8004642:	46c0      	nop			; (mov r8, r8)
 8004644:	46bd      	mov	sp, r7
 8004646:	b002      	add	sp, #8
 8004648:	bd80      	pop	{r7, pc}
 800464a:	46c0      	nop			; (mov r8, r8)
 800464c:	40010800 	.word	0x40010800
 8004650:	20000144 	.word	0x20000144
 8004654:	2000014c 	.word	0x2000014c
 8004658:	20000150 	.word	0x20000150
 800465c:	50000800 	.word	0x50000800
 8004660:	20000198 	.word	0x20000198
 8004664:	2000010c 	.word	0x2000010c
 8004668:	0800bedc 	.word	0x0800bedc
 800466c:	50000400 	.word	0x50000400

08004670 <runTimer>:

// ---- important timer functions  ----
void runTimer(TIM_HandleTypeDef *htim) {
 8004670:	b590      	push	{r4, r7, lr}
 8004672:	b089      	sub	sp, #36	; 0x24
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
	TIM_OC_InitTypeDef sConfig = {0};
 8004678:	2408      	movs	r4, #8
 800467a:	193b      	adds	r3, r7, r4
 800467c:	0018      	movs	r0, r3
 800467e:	2310      	movs	r3, #16
 8004680:	001a      	movs	r2, r3
 8004682:	2100      	movs	r1, #0
 8004684:	f006 fa99 	bl	800abba <memset>
	sConfig.OCMode = TIM_OCMODE_TIMING;
 8004688:	193b      	adds	r3, r7, r4
 800468a:	2200      	movs	r2, #0
 800468c:	601a      	str	r2, [r3, #0]
	sConfig.OCPolarity = TIM_OCPOLARITY_HIGH;
 800468e:	193b      	adds	r3, r7, r4
 8004690:	2200      	movs	r2, #0
 8004692:	609a      	str	r2, [r3, #8]
	sConfig.OCFastMode = TIM_OCFAST_DISABLE;
 8004694:	193b      	adds	r3, r7, r4
 8004696:	2200      	movs	r2, #0
 8004698:	60da      	str	r2, [r3, #12]

	// calculating pulse/OC trigger
	if (isTimerPaused == 0) {		// 1st run, hasn't been paused yet
 800469a:	4b1e      	ldr	r3, [pc, #120]	; (8004714 <runTimer+0xa4>)
 800469c:	781b      	ldrb	r3, [r3, #0]
 800469e:	b2db      	uxtb	r3, r3
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d106      	bne.n	80046b2 <runTimer+0x42>
		sConfig.Pulse = htim->Instance->CNT;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80046aa:	2308      	movs	r3, #8
 80046ac:	18fb      	adds	r3, r7, r3
 80046ae:	605a      	str	r2, [r3, #4]
 80046b0:	e020      	b.n	80046f4 <runTimer+0x84>
	}
	else {		// unpausing
		uint32_t temp = htim->Instance->CNT;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b8:	61fb      	str	r3, [r7, #28]

		// count needed to get from pause marker to start marker - basically how many steps it would've taken to get to next cycle
		// shifted to account for negative behavior
		uint32_t diff = ((int)(timerStartMarker-timerPauseMarker)+0x8000) % 0x8000;
 80046ba:	4b17      	ldr	r3, [pc, #92]	; (8004718 <runTimer+0xa8>)
 80046bc:	681a      	ldr	r2, [r3, #0]
 80046be:	4b17      	ldr	r3, [pc, #92]	; (800471c <runTimer+0xac>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	1ad3      	subs	r3, r2, r3
 80046c4:	2280      	movs	r2, #128	; 0x80
 80046c6:	0212      	lsls	r2, r2, #8
 80046c8:	4694      	mov	ip, r2
 80046ca:	4463      	add	r3, ip
 80046cc:	4a14      	ldr	r2, [pc, #80]	; (8004720 <runTimer+0xb0>)
 80046ce:	4013      	ands	r3, r2
 80046d0:	d503      	bpl.n	80046da <runTimer+0x6a>
 80046d2:	3b01      	subs	r3, #1
 80046d4:	4a13      	ldr	r2, [pc, #76]	; (8004724 <runTimer+0xb4>)
 80046d6:	4313      	orrs	r3, r2
 80046d8:	3301      	adds	r3, #1
 80046da:	61bb      	str	r3, [r7, #24]
		sConfig.Pulse = (temp+diff) % 0x8000;
 80046dc:	69fa      	ldr	r2, [r7, #28]
 80046de:	69bb      	ldr	r3, [r7, #24]
 80046e0:	18d3      	adds	r3, r2, r3
 80046e2:	045b      	lsls	r3, r3, #17
 80046e4:	0c5a      	lsrs	r2, r3, #17
 80046e6:	2108      	movs	r1, #8
 80046e8:	187b      	adds	r3, r7, r1
 80046ea:	605a      	str	r2, [r3, #4]
		timerStartMarker = sConfig.Pulse;		// set new start marker
 80046ec:	187b      	adds	r3, r7, r1
 80046ee:	685a      	ldr	r2, [r3, #4]
 80046f0:	4b09      	ldr	r3, [pc, #36]	; (8004718 <runTimer+0xa8>)
 80046f2:	601a      	str	r2, [r3, #0]
	}

	HAL_TIM_OC_ConfigChannel(htim, &sConfig, TIM_CHANNEL_1);
 80046f4:	2308      	movs	r3, #8
 80046f6:	18f9      	adds	r1, r7, r3
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2200      	movs	r2, #0
 80046fc:	0018      	movs	r0, r3
 80046fe:	f005 fdc3 	bl	800a288 <HAL_TIM_OC_ConfigChannel>
	HAL_TIM_OC_Start_IT(htim, TIM_CHANNEL_1);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2100      	movs	r1, #0
 8004706:	0018      	movs	r0, r3
 8004708:	f005 fbfe 	bl	8009f08 <HAL_TIM_OC_Start_IT>
}
 800470c:	46c0      	nop			; (mov r8, r8)
 800470e:	46bd      	mov	sp, r7
 8004710:	b009      	add	sp, #36	; 0x24
 8004712:	bd90      	pop	{r4, r7, pc}
 8004714:	20000196 	.word	0x20000196
 8004718:	200000fc 	.word	0x200000fc
 800471c:	20000100 	.word	0x20000100
 8004720:	80007fff 	.word	0x80007fff
 8004724:	ffff8000 	.word	0xffff8000

08004728 <pauseTimer>:

// flags should be set in nav
void pauseTimer(TIM_HandleTypeDef *htim) {
 8004728:	b580      	push	{r7, lr}
 800472a:	b082      	sub	sp, #8
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
	HAL_TIM_OC_Stop_IT(htim, TIM_CHANNEL_1);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2100      	movs	r1, #0
 8004734:	0018      	movs	r0, r3
 8004736:	f005 fc39 	bl	8009fac <HAL_TIM_OC_Stop_IT>
	timerPauseMarker = htim->Instance->CNT;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004740:	4b02      	ldr	r3, [pc, #8]	; (800474c <pauseTimer+0x24>)
 8004742:	601a      	str	r2, [r3, #0]
}
 8004744:	46c0      	nop			; (mov r8, r8)
 8004746:	46bd      	mov	sp, r7
 8004748:	b002      	add	sp, #8
 800474a:	bd80      	pop	{r7, pc}
 800474c:	20000100 	.word	0x20000100

08004750 <stopTimer>:

void stopTimer(TIM_HandleTypeDef *htim) {
 8004750:	b580      	push	{r7, lr}
 8004752:	b082      	sub	sp, #8
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
	HAL_TIM_OC_Stop_IT(htim, TIM_CHANNEL_1);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2100      	movs	r1, #0
 800475c:	0018      	movs	r0, r3
 800475e:	f005 fc25 	bl	8009fac <HAL_TIM_OC_Stop_IT>
	timerStartMarker = 0;
 8004762:	4b05      	ldr	r3, [pc, #20]	; (8004778 <stopTimer+0x28>)
 8004764:	2200      	movs	r2, #0
 8004766:	601a      	str	r2, [r3, #0]
	timerPauseMarker = 0;
 8004768:	4b04      	ldr	r3, [pc, #16]	; (800477c <stopTimer+0x2c>)
 800476a:	2200      	movs	r2, #0
 800476c:	601a      	str	r2, [r3, #0]
}
 800476e:	46c0      	nop			; (mov r8, r8)
 8004770:	46bd      	mov	sp, r7
 8004772:	b002      	add	sp, #8
 8004774:	bd80      	pop	{r7, pc}
 8004776:	46c0      	nop			; (mov r8, r8)
 8004778:	200000fc 	.word	0x200000fc
 800477c:	20000100 	.word	0x20000100

08004780 <runStopwatch>:

void runStopwatch(TIM_HandleTypeDef *htim) {
 8004780:	b590      	push	{r4, r7, lr}
 8004782:	b089      	sub	sp, #36	; 0x24
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
	TIM_OC_InitTypeDef sConfig = {0};
 8004788:	2408      	movs	r4, #8
 800478a:	193b      	adds	r3, r7, r4
 800478c:	0018      	movs	r0, r3
 800478e:	2310      	movs	r3, #16
 8004790:	001a      	movs	r2, r3
 8004792:	2100      	movs	r1, #0
 8004794:	f006 fa11 	bl	800abba <memset>
	sConfig.OCMode = TIM_OCMODE_TIMING;
 8004798:	193b      	adds	r3, r7, r4
 800479a:	2200      	movs	r2, #0
 800479c:	601a      	str	r2, [r3, #0]
	sConfig.OCPolarity = TIM_OCPOLARITY_HIGH;
 800479e:	193b      	adds	r3, r7, r4
 80047a0:	2200      	movs	r2, #0
 80047a2:	609a      	str	r2, [r3, #8]
	sConfig.OCFastMode = TIM_OCFAST_DISABLE;
 80047a4:	193b      	adds	r3, r7, r4
 80047a6:	2200      	movs	r2, #0
 80047a8:	60da      	str	r2, [r3, #12]

	// calculating pulse/OC trigger
	if (isStopwatchPaused == 0) {		// 1st run, hasn't been paused yet
 80047aa:	4b22      	ldr	r3, [pc, #136]	; (8004834 <runStopwatch+0xb4>)
 80047ac:	781b      	ldrb	r3, [r3, #0]
 80047ae:	b2db      	uxtb	r3, r3
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d10d      	bne.n	80047d0 <runStopwatch+0x50>
		stopwatchCounter = 0;
 80047b4:	4b20      	ldr	r3, [pc, #128]	; (8004838 <runStopwatch+0xb8>)
 80047b6:	2200      	movs	r2, #0
 80047b8:	601a      	str	r2, [r3, #0]
		sConfig.Pulse = htim->Instance->CNT;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80047c0:	2108      	movs	r1, #8
 80047c2:	187b      	adds	r3, r7, r1
 80047c4:	605a      	str	r2, [r3, #4]
		stopwatchStartMarker = sConfig.Pulse;		// set new start marker
 80047c6:	187b      	adds	r3, r7, r1
 80047c8:	685a      	ldr	r2, [r3, #4]
 80047ca:	4b1c      	ldr	r3, [pc, #112]	; (800483c <runStopwatch+0xbc>)
 80047cc:	601a      	str	r2, [r3, #0]
 80047ce:	e020      	b.n	8004812 <runStopwatch+0x92>
	}
	else {		// unpausing
		uint32_t temp = htim->Instance->CNT;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d6:	61fb      	str	r3, [r7, #28]

		// count needed to get from pause marker to start marker - basically how many steps it would've taken to get to next cycle
		// shifted to account for negative behavior
		uint32_t diff = ((int)(stopwatchStartMarker-stopwatchPauseMarker)+0x8000) % 0x8000;
 80047d8:	4b18      	ldr	r3, [pc, #96]	; (800483c <runStopwatch+0xbc>)
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	4b18      	ldr	r3, [pc, #96]	; (8004840 <runStopwatch+0xc0>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	1ad3      	subs	r3, r2, r3
 80047e2:	2280      	movs	r2, #128	; 0x80
 80047e4:	0212      	lsls	r2, r2, #8
 80047e6:	4694      	mov	ip, r2
 80047e8:	4463      	add	r3, ip
 80047ea:	4a16      	ldr	r2, [pc, #88]	; (8004844 <runStopwatch+0xc4>)
 80047ec:	4013      	ands	r3, r2
 80047ee:	d503      	bpl.n	80047f8 <runStopwatch+0x78>
 80047f0:	3b01      	subs	r3, #1
 80047f2:	4a15      	ldr	r2, [pc, #84]	; (8004848 <runStopwatch+0xc8>)
 80047f4:	4313      	orrs	r3, r2
 80047f6:	3301      	adds	r3, #1
 80047f8:	61bb      	str	r3, [r7, #24]
		sConfig.Pulse = (temp+diff) % 0x8000;
 80047fa:	69fa      	ldr	r2, [r7, #28]
 80047fc:	69bb      	ldr	r3, [r7, #24]
 80047fe:	18d3      	adds	r3, r2, r3
 8004800:	045b      	lsls	r3, r3, #17
 8004802:	0c5a      	lsrs	r2, r3, #17
 8004804:	2108      	movs	r1, #8
 8004806:	187b      	adds	r3, r7, r1
 8004808:	605a      	str	r2, [r3, #4]
		stopwatchStartMarker = sConfig.Pulse;		// set new start marker
 800480a:	187b      	adds	r3, r7, r1
 800480c:	685a      	ldr	r2, [r3, #4]
 800480e:	4b0b      	ldr	r3, [pc, #44]	; (800483c <runStopwatch+0xbc>)
 8004810:	601a      	str	r2, [r3, #0]
	}

	HAL_TIM_OC_ConfigChannel(htim, &sConfig, TIM_CHANNEL_2);
 8004812:	2308      	movs	r3, #8
 8004814:	18f9      	adds	r1, r7, r3
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2204      	movs	r2, #4
 800481a:	0018      	movs	r0, r3
 800481c:	f005 fd34 	bl	800a288 <HAL_TIM_OC_ConfigChannel>
	HAL_TIM_OC_Start_IT(htim, TIM_CHANNEL_2);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2104      	movs	r1, #4
 8004824:	0018      	movs	r0, r3
 8004826:	f005 fb6f 	bl	8009f08 <HAL_TIM_OC_Start_IT>
}
 800482a:	46c0      	nop			; (mov r8, r8)
 800482c:	46bd      	mov	sp, r7
 800482e:	b009      	add	sp, #36	; 0x24
 8004830:	bd90      	pop	{r4, r7, pc}
 8004832:	46c0      	nop			; (mov r8, r8)
 8004834:	20000195 	.word	0x20000195
 8004838:	20000198 	.word	0x20000198
 800483c:	20000104 	.word	0x20000104
 8004840:	20000108 	.word	0x20000108
 8004844:	80007fff 	.word	0x80007fff
 8004848:	ffff8000 	.word	0xffff8000

0800484c <pauseStopwatch>:

// stop the timer or pause it or whatever.
// counter value might reset and screw up timekeeping? should save?
void pauseStopwatch(TIM_HandleTypeDef *htim) {
 800484c:	b580      	push	{r7, lr}
 800484e:	b082      	sub	sp, #8
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
	HAL_TIM_OC_Stop_IT(htim, TIM_CHANNEL_2);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2104      	movs	r1, #4
 8004858:	0018      	movs	r0, r3
 800485a:	f005 fba7 	bl	8009fac <HAL_TIM_OC_Stop_IT>
	stopwatchPauseMarker = htim->Instance->CNT;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004864:	4b02      	ldr	r3, [pc, #8]	; (8004870 <pauseStopwatch+0x24>)
 8004866:	601a      	str	r2, [r3, #0]
}
 8004868:	46c0      	nop			; (mov r8, r8)
 800486a:	46bd      	mov	sp, r7
 800486c:	b002      	add	sp, #8
 800486e:	bd80      	pop	{r7, pc}
 8004870:	20000108 	.word	0x20000108

08004874 <clearStopwatch>:

void clearStopwatch(TIM_HandleTypeDef *htim) {
 8004874:	b580      	push	{r7, lr}
 8004876:	b082      	sub	sp, #8
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
	HAL_TIM_OC_Stop_IT(htim, TIM_CHANNEL_2);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2104      	movs	r1, #4
 8004880:	0018      	movs	r0, r3
 8004882:	f005 fb93 	bl	8009fac <HAL_TIM_OC_Stop_IT>
	stopwatchPauseMarker = htim->Instance->CNT;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800488c:	4b06      	ldr	r3, [pc, #24]	; (80048a8 <clearStopwatch+0x34>)
 800488e:	601a      	str	r2, [r3, #0]
	stopwatchStartMarker = htim->Instance->CNT;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004896:	4b05      	ldr	r3, [pc, #20]	; (80048ac <clearStopwatch+0x38>)
 8004898:	601a      	str	r2, [r3, #0]

	stopwatchCounter = 0;
 800489a:	4b05      	ldr	r3, [pc, #20]	; (80048b0 <clearStopwatch+0x3c>)
 800489c:	2200      	movs	r2, #0
 800489e:	601a      	str	r2, [r3, #0]
}
 80048a0:	46c0      	nop			; (mov r8, r8)
 80048a2:	46bd      	mov	sp, r7
 80048a4:	b002      	add	sp, #8
 80048a6:	bd80      	pop	{r7, pc}
 80048a8:	20000108 	.word	0x20000108
 80048ac:	20000104 	.word	0x20000104
 80048b0:	20000198 	.word	0x20000198

080048b4 <runTimerStopwatchBase>:

void runTimerStopwatchBase(TIM_HandleTypeDef *htim) {HAL_TIM_Base_Start(htim);}
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b082      	sub	sp, #8
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	0018      	movs	r0, r3
 80048c0:	f005 fa88 	bl	8009dd4 <HAL_TIM_Base_Start>
 80048c4:	46c0      	nop			; (mov r8, r8)
 80048c6:	46bd      	mov	sp, r7
 80048c8:	b002      	add	sp, #8
 80048ca:	bd80      	pop	{r7, pc}

080048cc <runADCSampler>:
void stopTimerStopwatchBase(TIM_HandleTypeDef *htim) {HAL_TIM_Base_Stop(htim);}
// ---- end of important timer functions ----

// ---- motor and other things that use timer ----
// uses LSE timer TIM22
void runADCSampler(TIM_HandleTypeDef *htim) {
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b082      	sub	sp, #8
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start_IT(htim);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	0018      	movs	r0, r3
 80048d8:	f005 fa9e 	bl	8009e18 <HAL_TIM_Base_Start_IT>
	canSampleBattery = 1;
 80048dc:	4b03      	ldr	r3, [pc, #12]	; (80048ec <runADCSampler+0x20>)
 80048de:	2201      	movs	r2, #1
 80048e0:	701a      	strb	r2, [r3, #0]
}
 80048e2:	46c0      	nop			; (mov r8, r8)
 80048e4:	46bd      	mov	sp, r7
 80048e6:	b002      	add	sp, #8
 80048e8:	bd80      	pop	{r7, pc}
 80048ea:	46c0      	nop			; (mov r8, r8)
 80048ec:	20000141 	.word	0x20000141

080048f0 <runMotor>:
}

// running motor for vibration. should run for a finite time
// connect motor enable line to timer output line
// uses LSE timer TIM2 CH2
void runMotor(TIM_HandleTypeDef *htim) {
 80048f0:	b590      	push	{r4, r7, lr}
 80048f2:	b087      	sub	sp, #28
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
	TIM_OC_InitTypeDef sConfig = {0};
 80048f8:	2408      	movs	r4, #8
 80048fa:	193b      	adds	r3, r7, r4
 80048fc:	0018      	movs	r0, r3
 80048fe:	2310      	movs	r3, #16
 8004900:	001a      	movs	r2, r3
 8004902:	2100      	movs	r1, #0
 8004904:	f006 f959 	bl	800abba <memset>
	sConfig.OCMode = TIM_OCMODE_TIMING;
 8004908:	0021      	movs	r1, r4
 800490a:	187b      	adds	r3, r7, r1
 800490c:	2200      	movs	r2, #0
 800490e:	601a      	str	r2, [r3, #0]
	sConfig.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004910:	187b      	adds	r3, r7, r1
 8004912:	2200      	movs	r2, #0
 8004914:	609a      	str	r2, [r3, #8]
	sConfig.OCFastMode = TIM_OCFAST_DISABLE;
 8004916:	187b      	adds	r3, r7, r1
 8004918:	2200      	movs	r2, #0
 800491a:	60da      	str	r2, [r3, #12]
	sConfig.Pulse = htim->Instance->CNT;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004922:	000c      	movs	r4, r1
 8004924:	187b      	adds	r3, r7, r1
 8004926:	605a      	str	r2, [r3, #4]

	HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_PIN, GPIO_PIN_SET);
 8004928:	4b0c      	ldr	r3, [pc, #48]	; (800495c <runMotor+0x6c>)
 800492a:	2201      	movs	r2, #1
 800492c:	2101      	movs	r1, #1
 800492e:	0018      	movs	r0, r3
 8004930:	f002 fe83 	bl	800763a <HAL_GPIO_WritePin>
	HAL_TIM_OC_ConfigChannel(htim, &sConfig, TIM_CHANNEL_2);
 8004934:	0021      	movs	r1, r4
 8004936:	1879      	adds	r1, r7, r1
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2204      	movs	r2, #4
 800493c:	0018      	movs	r0, r3
 800493e:	f005 fca3 	bl	800a288 <HAL_TIM_OC_ConfigChannel>
	HAL_TIM_OC_Start_IT(htim, TIM_CHANNEL_2);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2104      	movs	r1, #4
 8004946:	0018      	movs	r0, r3
 8004948:	f005 fade 	bl	8009f08 <HAL_TIM_OC_Start_IT>

	motorStateCounter = 0;
 800494c:	4b04      	ldr	r3, [pc, #16]	; (8004960 <runMotor+0x70>)
 800494e:	2200      	movs	r2, #0
 8004950:	701a      	strb	r2, [r3, #0]
}
 8004952:	46c0      	nop			; (mov r8, r8)
 8004954:	46bd      	mov	sp, r7
 8004956:	b007      	add	sp, #28
 8004958:	bd90      	pop	{r4, r7, pc}
 800495a:	46c0      	nop			; (mov r8, r8)
 800495c:	50000400 	.word	0x50000400
 8004960:	2000010c 	.word	0x2000010c

08004964 <runBacklightMotorBase>:
	HAL_TIM_OC_Stop_IT(htim, TIM_CHANNEL_2);
	motorStateCounter = 0;
}

// should use TIM22
void runBacklightMotorBase(TIM_HandleTypeDef *htim) {HAL_TIM_Base_Start(htim);}
 8004964:	b580      	push	{r7, lr}
 8004966:	b082      	sub	sp, #8
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	0018      	movs	r0, r3
 8004970:	f005 fa30 	bl	8009dd4 <HAL_TIM_Base_Start>
 8004974:	46c0      	nop			; (mov r8, r8)
 8004976:	46bd      	mov	sp, r7
 8004978:	b002      	add	sp, #8
 800497a:	bd80      	pop	{r7, pc}

0800497c <HAL_GPIO_EXTI_Callback>:
	"Nov",
	"Dec"
};

// button interrupt(s)
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800497c:	b580      	push	{r7, lr}
 800497e:	b082      	sub	sp, #8
 8004980:	af00      	add	r7, sp, #0
 8004982:	0002      	movs	r2, r0
 8004984:	1dbb      	adds	r3, r7, #6
 8004986:	801a      	strh	r2, [r3, #0]
	HAL_NVIC_DisableIRQ(EXTI2_3_IRQn);
 8004988:	2006      	movs	r0, #6
 800498a:	f002 fb20 	bl	8006fce <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI4_15_IRQn);
 800498e:	2007      	movs	r0, #7
 8004990:	f002 fb1d 	bl	8006fce <HAL_NVIC_DisableIRQ>
	HAL_NVIC_ClearPendingIRQ(EXTI2_3_IRQn);
 8004994:	2006      	movs	r0, #6
 8004996:	f002 fb37 	bl	8007008 <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_ClearPendingIRQ(EXTI4_15_IRQn);
 800499a:	2007      	movs	r0, #7
 800499c:	f002 fb34 	bl	8007008 <HAL_NVIC_ClearPendingIRQ>

	if (GPIO_Pin == BUTTON1) buttons.is1Pressed = 1;
 80049a0:	1dbb      	adds	r3, r7, #6
 80049a2:	881b      	ldrh	r3, [r3, #0]
 80049a4:	2b04      	cmp	r3, #4
 80049a6:	d102      	bne.n	80049ae <HAL_GPIO_EXTI_Callback+0x32>
 80049a8:	4b15      	ldr	r3, [pc, #84]	; (8004a00 <HAL_GPIO_EXTI_Callback+0x84>)
 80049aa:	2201      	movs	r2, #1
 80049ac:	701a      	strb	r2, [r3, #0]
	if (GPIO_Pin == BUTTON2) buttons.is2Pressed = 1;
 80049ae:	1dbb      	adds	r3, r7, #6
 80049b0:	881a      	ldrh	r2, [r3, #0]
 80049b2:	2380      	movs	r3, #128	; 0x80
 80049b4:	019b      	lsls	r3, r3, #6
 80049b6:	429a      	cmp	r2, r3
 80049b8:	d102      	bne.n	80049c0 <HAL_GPIO_EXTI_Callback+0x44>
 80049ba:	4b11      	ldr	r3, [pc, #68]	; (8004a00 <HAL_GPIO_EXTI_Callback+0x84>)
 80049bc:	2201      	movs	r2, #1
 80049be:	705a      	strb	r2, [r3, #1]
	if (GPIO_Pin == BUTTON3) buttons.is3Pressed = 1;
 80049c0:	1dbb      	adds	r3, r7, #6
 80049c2:	881a      	ldrh	r2, [r3, #0]
 80049c4:	2380      	movs	r3, #128	; 0x80
 80049c6:	01db      	lsls	r3, r3, #7
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d102      	bne.n	80049d2 <HAL_GPIO_EXTI_Callback+0x56>
 80049cc:	4b0c      	ldr	r3, [pc, #48]	; (8004a00 <HAL_GPIO_EXTI_Callback+0x84>)
 80049ce:	2201      	movs	r2, #1
 80049d0:	709a      	strb	r2, [r3, #2]
	if (GPIO_Pin == BUTTON4) buttons.is4Pressed = 1;
 80049d2:	1dbb      	adds	r3, r7, #6
 80049d4:	881a      	ldrh	r2, [r3, #0]
 80049d6:	2380      	movs	r3, #128	; 0x80
 80049d8:	021b      	lsls	r3, r3, #8
 80049da:	429a      	cmp	r2, r3
 80049dc:	d102      	bne.n	80049e4 <HAL_GPIO_EXTI_Callback+0x68>
 80049de:	4b08      	ldr	r3, [pc, #32]	; (8004a00 <HAL_GPIO_EXTI_Callback+0x84>)
 80049e0:	2201      	movs	r2, #1
 80049e2:	70da      	strb	r2, [r3, #3]

	HAL_TIM_Base_Start_IT(&htim6);
 80049e4:	4b07      	ldr	r3, [pc, #28]	; (8004a04 <HAL_GPIO_EXTI_Callback+0x88>)
 80049e6:	0018      	movs	r0, r3
 80049e8:	f005 fa16 	bl	8009e18 <HAL_TIM_Base_Start_IT>

	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_3);		// should run for any button
 80049ec:	4b06      	ldr	r3, [pc, #24]	; (8004a08 <HAL_GPIO_EXTI_Callback+0x8c>)
 80049ee:	2108      	movs	r1, #8
 80049f0:	0018      	movs	r0, r3
 80049f2:	f002 fe3f 	bl	8007674 <HAL_GPIO_TogglePin>
}
 80049f6:	46c0      	nop			; (mov r8, r8)
 80049f8:	46bd      	mov	sp, r7
 80049fa:	b002      	add	sp, #8
 80049fc:	bd80      	pop	{r7, pc}
 80049fe:	46c0      	nop			; (mov r8, r8)
 8004a00:	20000190 	.word	0x20000190
 8004a04:	20000154 	.word	0x20000154
 8004a08:	50000800 	.word	0x50000800

08004a0c <updateState>:

void updateState(RTC_HandleTypeDef *hrtc, TIM_HandleTypeDef *timerStopwatchTim, TIM_HandleTypeDef *motorBacklightTim, TIM_HandleTypeDef *buttonTim, SPI_HandleTypeDef *hspi) {
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b084      	sub	sp, #16
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	60f8      	str	r0, [r7, #12]
 8004a14:	60b9      	str	r1, [r7, #8]
 8004a16:	607a      	str	r2, [r7, #4]
 8004a18:	603b      	str	r3, [r7, #0]
	/* program flow:
	 *   check current face used
	 *   check current variables and check button pressed
	 */
	// button 1 changes the face on screen.
	if (buttons.is1Pressed) {
 8004a1a:	4bc0      	ldr	r3, [pc, #768]	; (8004d1c <updateState+0x310>)
 8004a1c:	781b      	ldrb	r3, [r3, #0]
 8004a1e:	b2db      	uxtb	r3, r3
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d030      	beq.n	8004a86 <updateState+0x7a>
		buttons.is1Pressed = 0;
 8004a24:	4bbd      	ldr	r3, [pc, #756]	; (8004d1c <updateState+0x310>)
 8004a26:	2200      	movs	r2, #0
 8004a28:	701a      	strb	r2, [r3, #0]
		isFaceBeingChanged = 1;
 8004a2a:	4bbd      	ldr	r3, [pc, #756]	; (8004d20 <updateState+0x314>)
 8004a2c:	2201      	movs	r2, #1
 8004a2e:	701a      	strb	r2, [r3, #0]
		faceOnDisplay = (faceOnDisplay + 1) % NUM_FACES;
 8004a30:	4bbc      	ldr	r3, [pc, #752]	; (8004d24 <updateState+0x318>)
 8004a32:	781b      	ldrb	r3, [r3, #0]
 8004a34:	3301      	adds	r3, #1
 8004a36:	4abc      	ldr	r2, [pc, #752]	; (8004d28 <updateState+0x31c>)
 8004a38:	4013      	ands	r3, r2
 8004a3a:	d504      	bpl.n	8004a46 <updateState+0x3a>
 8004a3c:	3b01      	subs	r3, #1
 8004a3e:	2204      	movs	r2, #4
 8004a40:	4252      	negs	r2, r2
 8004a42:	4313      	orrs	r3, r2
 8004a44:	3301      	adds	r3, #1
 8004a46:	b2da      	uxtb	r2, r3
 8004a48:	4bb6      	ldr	r3, [pc, #728]	; (8004d24 <updateState+0x318>)
 8004a4a:	701a      	strb	r2, [r3, #0]
		switch (faceOnDisplay) {
 8004a4c:	4bb5      	ldr	r3, [pc, #724]	; (8004d24 <updateState+0x318>)
 8004a4e:	781b      	ldrb	r3, [r3, #0]
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	d00c      	beq.n	8004a6e <updateState+0x62>
 8004a54:	dc02      	bgt.n	8004a5c <updateState+0x50>
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d005      	beq.n	8004a66 <updateState+0x5a>
			case faceClock: updateFace.clock = 1; break;
			case faceTimer: updateFace.timer = 1; break;
			case faceAlarm: updateFace.alarm = 1; break;
			case faceStopwatch: updateFace.stopwatch = 1; break;
			default: break;
 8004a5a:	e015      	b.n	8004a88 <updateState+0x7c>
		switch (faceOnDisplay) {
 8004a5c:	2b02      	cmp	r3, #2
 8004a5e:	d00a      	beq.n	8004a76 <updateState+0x6a>
 8004a60:	2b03      	cmp	r3, #3
 8004a62:	d00c      	beq.n	8004a7e <updateState+0x72>
			default: break;
 8004a64:	e010      	b.n	8004a88 <updateState+0x7c>
			case faceClock: updateFace.clock = 1; break;
 8004a66:	4bb1      	ldr	r3, [pc, #708]	; (8004d2c <updateState+0x320>)
 8004a68:	2201      	movs	r2, #1
 8004a6a:	701a      	strb	r2, [r3, #0]
 8004a6c:	e00c      	b.n	8004a88 <updateState+0x7c>
			case faceTimer: updateFace.timer = 1; break;
 8004a6e:	4baf      	ldr	r3, [pc, #700]	; (8004d2c <updateState+0x320>)
 8004a70:	2201      	movs	r2, #1
 8004a72:	705a      	strb	r2, [r3, #1]
 8004a74:	e008      	b.n	8004a88 <updateState+0x7c>
			case faceAlarm: updateFace.alarm = 1; break;
 8004a76:	4bad      	ldr	r3, [pc, #692]	; (8004d2c <updateState+0x320>)
 8004a78:	2201      	movs	r2, #1
 8004a7a:	709a      	strb	r2, [r3, #2]
 8004a7c:	e004      	b.n	8004a88 <updateState+0x7c>
			case faceStopwatch: updateFace.stopwatch = 1; break;
 8004a7e:	4bab      	ldr	r3, [pc, #684]	; (8004d2c <updateState+0x320>)
 8004a80:	2201      	movs	r2, #1
 8004a82:	70da      	strb	r2, [r3, #3]
 8004a84:	e000      	b.n	8004a88 <updateState+0x7c>
		}
	}
 8004a86:	46c0      	nop			; (mov r8, r8)

	// press 2 and 3 alternatively 5 times to reinit display
	static uint8_t s = 0;
	switch(s) {
 8004a88:	4ba9      	ldr	r3, [pc, #676]	; (8004d30 <updateState+0x324>)
 8004a8a:	781b      	ldrb	r3, [r3, #0]
 8004a8c:	2b09      	cmp	r3, #9
 8004a8e:	d900      	bls.n	8004a92 <updateState+0x86>
 8004a90:	e11b      	b.n	8004cca <updateState+0x2be>
 8004a92:	009a      	lsls	r2, r3, #2
 8004a94:	4ba7      	ldr	r3, [pc, #668]	; (8004d34 <updateState+0x328>)
 8004a96:	18d3      	adds	r3, r2, r3
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	469f      	mov	pc, r3
		case 0:	if (buttons.is2Pressed) s++; break;
 8004a9c:	4b9f      	ldr	r3, [pc, #636]	; (8004d1c <updateState+0x310>)
 8004a9e:	785b      	ldrb	r3, [r3, #1]
 8004aa0:	b2db      	uxtb	r3, r3
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d100      	bne.n	8004aa8 <updateState+0x9c>
 8004aa6:	e112      	b.n	8004cce <updateState+0x2c2>
 8004aa8:	4ba1      	ldr	r3, [pc, #644]	; (8004d30 <updateState+0x324>)
 8004aaa:	781b      	ldrb	r3, [r3, #0]
 8004aac:	3301      	adds	r3, #1
 8004aae:	b2da      	uxtb	r2, r3
 8004ab0:	4b9f      	ldr	r3, [pc, #636]	; (8004d30 <updateState+0x324>)
 8004ab2:	701a      	strb	r2, [r3, #0]
 8004ab4:	e10b      	b.n	8004cce <updateState+0x2c2>
		case 1: if (buttons.is3Pressed) s++; else if (buttons.is1Pressed || buttons.is2Pressed || buttons.is4Pressed) s = 0; break;
 8004ab6:	4b99      	ldr	r3, [pc, #612]	; (8004d1c <updateState+0x310>)
 8004ab8:	789b      	ldrb	r3, [r3, #2]
 8004aba:	b2db      	uxtb	r3, r3
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d006      	beq.n	8004ace <updateState+0xc2>
 8004ac0:	4b9b      	ldr	r3, [pc, #620]	; (8004d30 <updateState+0x324>)
 8004ac2:	781b      	ldrb	r3, [r3, #0]
 8004ac4:	3301      	adds	r3, #1
 8004ac6:	b2da      	uxtb	r2, r3
 8004ac8:	4b99      	ldr	r3, [pc, #612]	; (8004d30 <updateState+0x324>)
 8004aca:	701a      	strb	r2, [r3, #0]
 8004acc:	e101      	b.n	8004cd2 <updateState+0x2c6>
 8004ace:	4b93      	ldr	r3, [pc, #588]	; (8004d1c <updateState+0x310>)
 8004ad0:	781b      	ldrb	r3, [r3, #0]
 8004ad2:	b2db      	uxtb	r3, r3
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d10a      	bne.n	8004aee <updateState+0xe2>
 8004ad8:	4b90      	ldr	r3, [pc, #576]	; (8004d1c <updateState+0x310>)
 8004ada:	785b      	ldrb	r3, [r3, #1]
 8004adc:	b2db      	uxtb	r3, r3
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d105      	bne.n	8004aee <updateState+0xe2>
 8004ae2:	4b8e      	ldr	r3, [pc, #568]	; (8004d1c <updateState+0x310>)
 8004ae4:	78db      	ldrb	r3, [r3, #3]
 8004ae6:	b2db      	uxtb	r3, r3
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d100      	bne.n	8004aee <updateState+0xe2>
 8004aec:	e0f1      	b.n	8004cd2 <updateState+0x2c6>
 8004aee:	4b90      	ldr	r3, [pc, #576]	; (8004d30 <updateState+0x324>)
 8004af0:	2200      	movs	r2, #0
 8004af2:	701a      	strb	r2, [r3, #0]
 8004af4:	e0ed      	b.n	8004cd2 <updateState+0x2c6>
		case 2: if (buttons.is2Pressed) s++; else if (buttons.is1Pressed || buttons.is3Pressed || buttons.is4Pressed) s = 0; break;
 8004af6:	4b89      	ldr	r3, [pc, #548]	; (8004d1c <updateState+0x310>)
 8004af8:	785b      	ldrb	r3, [r3, #1]
 8004afa:	b2db      	uxtb	r3, r3
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d006      	beq.n	8004b0e <updateState+0x102>
 8004b00:	4b8b      	ldr	r3, [pc, #556]	; (8004d30 <updateState+0x324>)
 8004b02:	781b      	ldrb	r3, [r3, #0]
 8004b04:	3301      	adds	r3, #1
 8004b06:	b2da      	uxtb	r2, r3
 8004b08:	4b89      	ldr	r3, [pc, #548]	; (8004d30 <updateState+0x324>)
 8004b0a:	701a      	strb	r2, [r3, #0]
 8004b0c:	e0e3      	b.n	8004cd6 <updateState+0x2ca>
 8004b0e:	4b83      	ldr	r3, [pc, #524]	; (8004d1c <updateState+0x310>)
 8004b10:	781b      	ldrb	r3, [r3, #0]
 8004b12:	b2db      	uxtb	r3, r3
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d10a      	bne.n	8004b2e <updateState+0x122>
 8004b18:	4b80      	ldr	r3, [pc, #512]	; (8004d1c <updateState+0x310>)
 8004b1a:	789b      	ldrb	r3, [r3, #2]
 8004b1c:	b2db      	uxtb	r3, r3
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d105      	bne.n	8004b2e <updateState+0x122>
 8004b22:	4b7e      	ldr	r3, [pc, #504]	; (8004d1c <updateState+0x310>)
 8004b24:	78db      	ldrb	r3, [r3, #3]
 8004b26:	b2db      	uxtb	r3, r3
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d100      	bne.n	8004b2e <updateState+0x122>
 8004b2c:	e0d3      	b.n	8004cd6 <updateState+0x2ca>
 8004b2e:	4b80      	ldr	r3, [pc, #512]	; (8004d30 <updateState+0x324>)
 8004b30:	2200      	movs	r2, #0
 8004b32:	701a      	strb	r2, [r3, #0]
 8004b34:	e0cf      	b.n	8004cd6 <updateState+0x2ca>
		case 3: if (buttons.is3Pressed) s++; else if (buttons.is1Pressed || buttons.is2Pressed || buttons.is4Pressed) s = 0; break;
 8004b36:	4b79      	ldr	r3, [pc, #484]	; (8004d1c <updateState+0x310>)
 8004b38:	789b      	ldrb	r3, [r3, #2]
 8004b3a:	b2db      	uxtb	r3, r3
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d006      	beq.n	8004b4e <updateState+0x142>
 8004b40:	4b7b      	ldr	r3, [pc, #492]	; (8004d30 <updateState+0x324>)
 8004b42:	781b      	ldrb	r3, [r3, #0]
 8004b44:	3301      	adds	r3, #1
 8004b46:	b2da      	uxtb	r2, r3
 8004b48:	4b79      	ldr	r3, [pc, #484]	; (8004d30 <updateState+0x324>)
 8004b4a:	701a      	strb	r2, [r3, #0]
 8004b4c:	e0c5      	b.n	8004cda <updateState+0x2ce>
 8004b4e:	4b73      	ldr	r3, [pc, #460]	; (8004d1c <updateState+0x310>)
 8004b50:	781b      	ldrb	r3, [r3, #0]
 8004b52:	b2db      	uxtb	r3, r3
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d10a      	bne.n	8004b6e <updateState+0x162>
 8004b58:	4b70      	ldr	r3, [pc, #448]	; (8004d1c <updateState+0x310>)
 8004b5a:	785b      	ldrb	r3, [r3, #1]
 8004b5c:	b2db      	uxtb	r3, r3
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d105      	bne.n	8004b6e <updateState+0x162>
 8004b62:	4b6e      	ldr	r3, [pc, #440]	; (8004d1c <updateState+0x310>)
 8004b64:	78db      	ldrb	r3, [r3, #3]
 8004b66:	b2db      	uxtb	r3, r3
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d100      	bne.n	8004b6e <updateState+0x162>
 8004b6c:	e0b5      	b.n	8004cda <updateState+0x2ce>
 8004b6e:	4b70      	ldr	r3, [pc, #448]	; (8004d30 <updateState+0x324>)
 8004b70:	2200      	movs	r2, #0
 8004b72:	701a      	strb	r2, [r3, #0]
 8004b74:	e0b1      	b.n	8004cda <updateState+0x2ce>
		case 4: if (buttons.is2Pressed) s++; else if (buttons.is1Pressed || buttons.is3Pressed || buttons.is4Pressed) s = 0; break;
 8004b76:	4b69      	ldr	r3, [pc, #420]	; (8004d1c <updateState+0x310>)
 8004b78:	785b      	ldrb	r3, [r3, #1]
 8004b7a:	b2db      	uxtb	r3, r3
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d006      	beq.n	8004b8e <updateState+0x182>
 8004b80:	4b6b      	ldr	r3, [pc, #428]	; (8004d30 <updateState+0x324>)
 8004b82:	781b      	ldrb	r3, [r3, #0]
 8004b84:	3301      	adds	r3, #1
 8004b86:	b2da      	uxtb	r2, r3
 8004b88:	4b69      	ldr	r3, [pc, #420]	; (8004d30 <updateState+0x324>)
 8004b8a:	701a      	strb	r2, [r3, #0]
 8004b8c:	e0a7      	b.n	8004cde <updateState+0x2d2>
 8004b8e:	4b63      	ldr	r3, [pc, #396]	; (8004d1c <updateState+0x310>)
 8004b90:	781b      	ldrb	r3, [r3, #0]
 8004b92:	b2db      	uxtb	r3, r3
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d10a      	bne.n	8004bae <updateState+0x1a2>
 8004b98:	4b60      	ldr	r3, [pc, #384]	; (8004d1c <updateState+0x310>)
 8004b9a:	789b      	ldrb	r3, [r3, #2]
 8004b9c:	b2db      	uxtb	r3, r3
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d105      	bne.n	8004bae <updateState+0x1a2>
 8004ba2:	4b5e      	ldr	r3, [pc, #376]	; (8004d1c <updateState+0x310>)
 8004ba4:	78db      	ldrb	r3, [r3, #3]
 8004ba6:	b2db      	uxtb	r3, r3
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d100      	bne.n	8004bae <updateState+0x1a2>
 8004bac:	e097      	b.n	8004cde <updateState+0x2d2>
 8004bae:	4b60      	ldr	r3, [pc, #384]	; (8004d30 <updateState+0x324>)
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	701a      	strb	r2, [r3, #0]
 8004bb4:	e093      	b.n	8004cde <updateState+0x2d2>
		case 5: if (buttons.is3Pressed) s++; else if (buttons.is1Pressed || buttons.is2Pressed || buttons.is4Pressed) s = 0; break;
 8004bb6:	4b59      	ldr	r3, [pc, #356]	; (8004d1c <updateState+0x310>)
 8004bb8:	789b      	ldrb	r3, [r3, #2]
 8004bba:	b2db      	uxtb	r3, r3
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d006      	beq.n	8004bce <updateState+0x1c2>
 8004bc0:	4b5b      	ldr	r3, [pc, #364]	; (8004d30 <updateState+0x324>)
 8004bc2:	781b      	ldrb	r3, [r3, #0]
 8004bc4:	3301      	adds	r3, #1
 8004bc6:	b2da      	uxtb	r2, r3
 8004bc8:	4b59      	ldr	r3, [pc, #356]	; (8004d30 <updateState+0x324>)
 8004bca:	701a      	strb	r2, [r3, #0]
 8004bcc:	e089      	b.n	8004ce2 <updateState+0x2d6>
 8004bce:	4b53      	ldr	r3, [pc, #332]	; (8004d1c <updateState+0x310>)
 8004bd0:	781b      	ldrb	r3, [r3, #0]
 8004bd2:	b2db      	uxtb	r3, r3
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d10a      	bne.n	8004bee <updateState+0x1e2>
 8004bd8:	4b50      	ldr	r3, [pc, #320]	; (8004d1c <updateState+0x310>)
 8004bda:	785b      	ldrb	r3, [r3, #1]
 8004bdc:	b2db      	uxtb	r3, r3
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d105      	bne.n	8004bee <updateState+0x1e2>
 8004be2:	4b4e      	ldr	r3, [pc, #312]	; (8004d1c <updateState+0x310>)
 8004be4:	78db      	ldrb	r3, [r3, #3]
 8004be6:	b2db      	uxtb	r3, r3
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d100      	bne.n	8004bee <updateState+0x1e2>
 8004bec:	e079      	b.n	8004ce2 <updateState+0x2d6>
 8004bee:	4b50      	ldr	r3, [pc, #320]	; (8004d30 <updateState+0x324>)
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	701a      	strb	r2, [r3, #0]
 8004bf4:	e075      	b.n	8004ce2 <updateState+0x2d6>
		case 6: if (buttons.is2Pressed) s++; else if (buttons.is1Pressed || buttons.is3Pressed || buttons.is4Pressed) s = 0; break;
 8004bf6:	4b49      	ldr	r3, [pc, #292]	; (8004d1c <updateState+0x310>)
 8004bf8:	785b      	ldrb	r3, [r3, #1]
 8004bfa:	b2db      	uxtb	r3, r3
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d006      	beq.n	8004c0e <updateState+0x202>
 8004c00:	4b4b      	ldr	r3, [pc, #300]	; (8004d30 <updateState+0x324>)
 8004c02:	781b      	ldrb	r3, [r3, #0]
 8004c04:	3301      	adds	r3, #1
 8004c06:	b2da      	uxtb	r2, r3
 8004c08:	4b49      	ldr	r3, [pc, #292]	; (8004d30 <updateState+0x324>)
 8004c0a:	701a      	strb	r2, [r3, #0]
 8004c0c:	e06b      	b.n	8004ce6 <updateState+0x2da>
 8004c0e:	4b43      	ldr	r3, [pc, #268]	; (8004d1c <updateState+0x310>)
 8004c10:	781b      	ldrb	r3, [r3, #0]
 8004c12:	b2db      	uxtb	r3, r3
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d109      	bne.n	8004c2c <updateState+0x220>
 8004c18:	4b40      	ldr	r3, [pc, #256]	; (8004d1c <updateState+0x310>)
 8004c1a:	789b      	ldrb	r3, [r3, #2]
 8004c1c:	b2db      	uxtb	r3, r3
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d104      	bne.n	8004c2c <updateState+0x220>
 8004c22:	4b3e      	ldr	r3, [pc, #248]	; (8004d1c <updateState+0x310>)
 8004c24:	78db      	ldrb	r3, [r3, #3]
 8004c26:	b2db      	uxtb	r3, r3
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d05c      	beq.n	8004ce6 <updateState+0x2da>
 8004c2c:	4b40      	ldr	r3, [pc, #256]	; (8004d30 <updateState+0x324>)
 8004c2e:	2200      	movs	r2, #0
 8004c30:	701a      	strb	r2, [r3, #0]
 8004c32:	e058      	b.n	8004ce6 <updateState+0x2da>
		case 7: if (buttons.is3Pressed) s++; else if (buttons.is1Pressed || buttons.is2Pressed || buttons.is4Pressed) s = 0; break;
 8004c34:	4b39      	ldr	r3, [pc, #228]	; (8004d1c <updateState+0x310>)
 8004c36:	789b      	ldrb	r3, [r3, #2]
 8004c38:	b2db      	uxtb	r3, r3
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d006      	beq.n	8004c4c <updateState+0x240>
 8004c3e:	4b3c      	ldr	r3, [pc, #240]	; (8004d30 <updateState+0x324>)
 8004c40:	781b      	ldrb	r3, [r3, #0]
 8004c42:	3301      	adds	r3, #1
 8004c44:	b2da      	uxtb	r2, r3
 8004c46:	4b3a      	ldr	r3, [pc, #232]	; (8004d30 <updateState+0x324>)
 8004c48:	701a      	strb	r2, [r3, #0]
 8004c4a:	e04e      	b.n	8004cea <updateState+0x2de>
 8004c4c:	4b33      	ldr	r3, [pc, #204]	; (8004d1c <updateState+0x310>)
 8004c4e:	781b      	ldrb	r3, [r3, #0]
 8004c50:	b2db      	uxtb	r3, r3
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d109      	bne.n	8004c6a <updateState+0x25e>
 8004c56:	4b31      	ldr	r3, [pc, #196]	; (8004d1c <updateState+0x310>)
 8004c58:	785b      	ldrb	r3, [r3, #1]
 8004c5a:	b2db      	uxtb	r3, r3
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d104      	bne.n	8004c6a <updateState+0x25e>
 8004c60:	4b2e      	ldr	r3, [pc, #184]	; (8004d1c <updateState+0x310>)
 8004c62:	78db      	ldrb	r3, [r3, #3]
 8004c64:	b2db      	uxtb	r3, r3
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d03f      	beq.n	8004cea <updateState+0x2de>
 8004c6a:	4b31      	ldr	r3, [pc, #196]	; (8004d30 <updateState+0x324>)
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	701a      	strb	r2, [r3, #0]
 8004c70:	e03b      	b.n	8004cea <updateState+0x2de>
		case 8: if (buttons.is2Pressed) s++; else if (buttons.is1Pressed || buttons.is3Pressed || buttons.is4Pressed) s = 0; break;
 8004c72:	4b2a      	ldr	r3, [pc, #168]	; (8004d1c <updateState+0x310>)
 8004c74:	785b      	ldrb	r3, [r3, #1]
 8004c76:	b2db      	uxtb	r3, r3
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d006      	beq.n	8004c8a <updateState+0x27e>
 8004c7c:	4b2c      	ldr	r3, [pc, #176]	; (8004d30 <updateState+0x324>)
 8004c7e:	781b      	ldrb	r3, [r3, #0]
 8004c80:	3301      	adds	r3, #1
 8004c82:	b2da      	uxtb	r2, r3
 8004c84:	4b2a      	ldr	r3, [pc, #168]	; (8004d30 <updateState+0x324>)
 8004c86:	701a      	strb	r2, [r3, #0]
 8004c88:	e031      	b.n	8004cee <updateState+0x2e2>
 8004c8a:	4b24      	ldr	r3, [pc, #144]	; (8004d1c <updateState+0x310>)
 8004c8c:	781b      	ldrb	r3, [r3, #0]
 8004c8e:	b2db      	uxtb	r3, r3
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d109      	bne.n	8004ca8 <updateState+0x29c>
 8004c94:	4b21      	ldr	r3, [pc, #132]	; (8004d1c <updateState+0x310>)
 8004c96:	789b      	ldrb	r3, [r3, #2]
 8004c98:	b2db      	uxtb	r3, r3
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d104      	bne.n	8004ca8 <updateState+0x29c>
 8004c9e:	4b1f      	ldr	r3, [pc, #124]	; (8004d1c <updateState+0x310>)
 8004ca0:	78db      	ldrb	r3, [r3, #3]
 8004ca2:	b2db      	uxtb	r3, r3
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d022      	beq.n	8004cee <updateState+0x2e2>
 8004ca8:	4b21      	ldr	r3, [pc, #132]	; (8004d30 <updateState+0x324>)
 8004caa:	2200      	movs	r2, #0
 8004cac:	701a      	strb	r2, [r3, #0]
 8004cae:	e01e      	b.n	8004cee <updateState+0x2e2>
		case 9: if (buttons.is3Pressed) {TFT_startup(hspi); s = 0;} break;
 8004cb0:	4b1a      	ldr	r3, [pc, #104]	; (8004d1c <updateState+0x310>)
 8004cb2:	789b      	ldrb	r3, [r3, #2]
 8004cb4:	b2db      	uxtb	r3, r3
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d01b      	beq.n	8004cf2 <updateState+0x2e6>
 8004cba:	69bb      	ldr	r3, [r7, #24]
 8004cbc:	0018      	movs	r0, r3
 8004cbe:	f7fc fe2f 	bl	8001920 <TFT_startup>
 8004cc2:	4b1b      	ldr	r3, [pc, #108]	; (8004d30 <updateState+0x324>)
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	701a      	strb	r2, [r3, #0]
 8004cc8:	e013      	b.n	8004cf2 <updateState+0x2e6>
		default: break;
 8004cca:	46c0      	nop			; (mov r8, r8)
 8004ccc:	e012      	b.n	8004cf4 <updateState+0x2e8>
		case 0:	if (buttons.is2Pressed) s++; break;
 8004cce:	46c0      	nop			; (mov r8, r8)
 8004cd0:	e010      	b.n	8004cf4 <updateState+0x2e8>
		case 1: if (buttons.is3Pressed) s++; else if (buttons.is1Pressed || buttons.is2Pressed || buttons.is4Pressed) s = 0; break;
 8004cd2:	46c0      	nop			; (mov r8, r8)
 8004cd4:	e00e      	b.n	8004cf4 <updateState+0x2e8>
		case 2: if (buttons.is2Pressed) s++; else if (buttons.is1Pressed || buttons.is3Pressed || buttons.is4Pressed) s = 0; break;
 8004cd6:	46c0      	nop			; (mov r8, r8)
 8004cd8:	e00c      	b.n	8004cf4 <updateState+0x2e8>
		case 3: if (buttons.is3Pressed) s++; else if (buttons.is1Pressed || buttons.is2Pressed || buttons.is4Pressed) s = 0; break;
 8004cda:	46c0      	nop			; (mov r8, r8)
 8004cdc:	e00a      	b.n	8004cf4 <updateState+0x2e8>
		case 4: if (buttons.is2Pressed) s++; else if (buttons.is1Pressed || buttons.is3Pressed || buttons.is4Pressed) s = 0; break;
 8004cde:	46c0      	nop			; (mov r8, r8)
 8004ce0:	e008      	b.n	8004cf4 <updateState+0x2e8>
		case 5: if (buttons.is3Pressed) s++; else if (buttons.is1Pressed || buttons.is2Pressed || buttons.is4Pressed) s = 0; break;
 8004ce2:	46c0      	nop			; (mov r8, r8)
 8004ce4:	e006      	b.n	8004cf4 <updateState+0x2e8>
		case 6: if (buttons.is2Pressed) s++; else if (buttons.is1Pressed || buttons.is3Pressed || buttons.is4Pressed) s = 0; break;
 8004ce6:	46c0      	nop			; (mov r8, r8)
 8004ce8:	e004      	b.n	8004cf4 <updateState+0x2e8>
		case 7: if (buttons.is3Pressed) s++; else if (buttons.is1Pressed || buttons.is2Pressed || buttons.is4Pressed) s = 0; break;
 8004cea:	46c0      	nop			; (mov r8, r8)
 8004cec:	e002      	b.n	8004cf4 <updateState+0x2e8>
		case 8: if (buttons.is2Pressed) s++; else if (buttons.is1Pressed || buttons.is3Pressed || buttons.is4Pressed) s = 0; break;
 8004cee:	46c0      	nop			; (mov r8, r8)
 8004cf0:	e000      	b.n	8004cf4 <updateState+0x2e8>
		case 9: if (buttons.is3Pressed) {TFT_startup(hspi); s = 0;} break;
 8004cf2:	46c0      	nop			; (mov r8, r8)
//	drawTextAt(0, 0, str, hspi);

//	if (buttons.is3Pressed) turnDisplayOn(hspi);
//	if (buttons.is4Pressed) turnDisplayOff(hspi);

	if (faceOnDisplay == faceClock) updateClockState(hrtc);
 8004cf4:	4b0b      	ldr	r3, [pc, #44]	; (8004d24 <updateState+0x318>)
 8004cf6:	781b      	ldrb	r3, [r3, #0]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d104      	bne.n	8004d06 <updateState+0x2fa>
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	0018      	movs	r0, r3
 8004d00:	f000 f842 	bl	8004d88 <updateClockState>
 8004d04:	e02b      	b.n	8004d5e <updateState+0x352>
	else if (faceOnDisplay == faceTimer) updateTimerState(timerStopwatchTim, motorBacklightTim);
 8004d06:	4b07      	ldr	r3, [pc, #28]	; (8004d24 <updateState+0x318>)
 8004d08:	781b      	ldrb	r3, [r3, #0]
 8004d0a:	2b01      	cmp	r3, #1
 8004d0c:	d114      	bne.n	8004d38 <updateState+0x32c>
 8004d0e:	687a      	ldr	r2, [r7, #4]
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	0011      	movs	r1, r2
 8004d14:	0018      	movs	r0, r3
 8004d16:	f000 f97f 	bl	8005018 <updateTimerState>
 8004d1a:	e020      	b.n	8004d5e <updateState+0x352>
 8004d1c:	20000190 	.word	0x20000190
 8004d20:	20000068 	.word	0x20000068
 8004d24:	20000134 	.word	0x20000134
 8004d28:	80000003 	.word	0x80000003
 8004d2c:	20000144 	.word	0x20000144
 8004d30:	20000135 	.word	0x20000135
 8004d34:	0800bef8 	.word	0x0800bef8
	else if (faceOnDisplay == faceAlarm) updateAlarmState(hrtc, motorBacklightTim);
 8004d38:	4b11      	ldr	r3, [pc, #68]	; (8004d80 <updateState+0x374>)
 8004d3a:	781b      	ldrb	r3, [r3, #0]
 8004d3c:	2b02      	cmp	r3, #2
 8004d3e:	d106      	bne.n	8004d4e <updateState+0x342>
 8004d40:	687a      	ldr	r2, [r7, #4]
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	0011      	movs	r1, r2
 8004d46:	0018      	movs	r0, r3
 8004d48:	f000 fabc 	bl	80052c4 <updateAlarmState>
 8004d4c:	e007      	b.n	8004d5e <updateState+0x352>
	else if (faceOnDisplay == faceStopwatch) updateStopwatchState(timerStopwatchTim);
 8004d4e:	4b0c      	ldr	r3, [pc, #48]	; (8004d80 <updateState+0x374>)
 8004d50:	781b      	ldrb	r3, [r3, #0]
 8004d52:	2b03      	cmp	r3, #3
 8004d54:	d103      	bne.n	8004d5e <updateState+0x352>
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	0018      	movs	r0, r3
 8004d5a:	f000 fbe7 	bl	800552c <updateStopwatchState>

	// some decisions in respective state functions dont clear these flags
	buttons.is1Pressed = buttons.is2Pressed = buttons.is3Pressed = buttons.is4Pressed = 0;
 8004d5e:	2200      	movs	r2, #0
 8004d60:	4b08      	ldr	r3, [pc, #32]	; (8004d84 <updateState+0x378>)
 8004d62:	1c11      	adds	r1, r2, #0
 8004d64:	70d9      	strb	r1, [r3, #3]
 8004d66:	4b07      	ldr	r3, [pc, #28]	; (8004d84 <updateState+0x378>)
 8004d68:	1c11      	adds	r1, r2, #0
 8004d6a:	7099      	strb	r1, [r3, #2]
 8004d6c:	4b05      	ldr	r3, [pc, #20]	; (8004d84 <updateState+0x378>)
 8004d6e:	1c11      	adds	r1, r2, #0
 8004d70:	7059      	strb	r1, [r3, #1]
 8004d72:	4b04      	ldr	r3, [pc, #16]	; (8004d84 <updateState+0x378>)
 8004d74:	701a      	strb	r2, [r3, #0]
}
 8004d76:	46c0      	nop			; (mov r8, r8)
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	b004      	add	sp, #16
 8004d7c:	bd80      	pop	{r7, pc}
 8004d7e:	46c0      	nop			; (mov r8, r8)
 8004d80:	20000134 	.word	0x20000134
 8004d84:	20000190 	.word	0x20000190

08004d88 <updateClockState>:
 *     the clock is updated and we revert back to default mode.
 *
 * notes:
 *   make date setting more robust (invalidate date entries when that day of month doesn't exist or just change modulo)
 */
void updateClockState(RTC_HandleTypeDef *hrtc) {
 8004d88:	b590      	push	{r4, r7, lr}
 8004d8a:	b083      	sub	sp, #12
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
	// change fields up, do nothing if not setting clock
	if (buttons.is2Pressed && clockVars.isBeingSet) {
 8004d90:	4b9c      	ldr	r3, [pc, #624]	; (8005004 <updateClockState+0x27c>)
 8004d92:	785b      	ldrb	r3, [r3, #1]
 8004d94:	b2db      	uxtb	r3, r3
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d060      	beq.n	8004e5c <updateClockState+0xd4>
 8004d9a:	4b9b      	ldr	r3, [pc, #620]	; (8005008 <updateClockState+0x280>)
 8004d9c:	781b      	ldrb	r3, [r3, #0]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d05c      	beq.n	8004e5c <updateClockState+0xd4>
		buttons.is2Pressed = 0;
 8004da2:	4b98      	ldr	r3, [pc, #608]	; (8005004 <updateClockState+0x27c>)
 8004da4:	2200      	movs	r2, #0
 8004da6:	705a      	strb	r2, [r3, #1]
		updateFace.clock = 1;
 8004da8:	4b98      	ldr	r3, [pc, #608]	; (800500c <updateClockState+0x284>)
 8004daa:	2201      	movs	r2, #1
 8004dac:	701a      	strb	r2, [r3, #0]
		switch (clockVars.fieldBeingSet) {
 8004dae:	4b96      	ldr	r3, [pc, #600]	; (8005008 <updateClockState+0x280>)
 8004db0:	785b      	ldrb	r3, [r3, #1]
 8004db2:	2b05      	cmp	r3, #5
 8004db4:	d854      	bhi.n	8004e60 <updateClockState+0xd8>
 8004db6:	009a      	lsls	r2, r3, #2
 8004db8:	4b95      	ldr	r3, [pc, #596]	; (8005010 <updateClockState+0x288>)
 8004dba:	18d3      	adds	r3, r2, r3
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	469f      	mov	pc, r3
			case 1: clockVars.timeToSet->min = (clockVars.timeToSet->min+1) % 60; break;
 8004dc0:	4b91      	ldr	r3, [pc, #580]	; (8005008 <updateClockState+0x280>)
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	785b      	ldrb	r3, [r3, #1]
 8004dc6:	3301      	adds	r3, #1
 8004dc8:	213c      	movs	r1, #60	; 0x3c
 8004dca:	0018      	movs	r0, r3
 8004dcc:	f7fb fb14 	bl	80003f8 <__aeabi_idivmod>
 8004dd0:	000b      	movs	r3, r1
 8004dd2:	001a      	movs	r2, r3
 8004dd4:	4b8c      	ldr	r3, [pc, #560]	; (8005008 <updateClockState+0x280>)
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	b2d2      	uxtb	r2, r2
 8004dda:	705a      	strb	r2, [r3, #1]
 8004ddc:	e041      	b.n	8004e62 <updateClockState+0xda>
			case 2: clockVars.timeToSet->hr = (clockVars.timeToSet->hr+1) % 24; break;
 8004dde:	4b8a      	ldr	r3, [pc, #552]	; (8005008 <updateClockState+0x280>)
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	781b      	ldrb	r3, [r3, #0]
 8004de4:	3301      	adds	r3, #1
 8004de6:	2118      	movs	r1, #24
 8004de8:	0018      	movs	r0, r3
 8004dea:	f7fb fb05 	bl	80003f8 <__aeabi_idivmod>
 8004dee:	000b      	movs	r3, r1
 8004df0:	001a      	movs	r2, r3
 8004df2:	4b85      	ldr	r3, [pc, #532]	; (8005008 <updateClockState+0x280>)
 8004df4:	689b      	ldr	r3, [r3, #8]
 8004df6:	b2d2      	uxtb	r2, r2
 8004df8:	701a      	strb	r2, [r3, #0]
 8004dfa:	e032      	b.n	8004e62 <updateClockState+0xda>
			case 3: clockVars.dateToSet->yr++; break;		// supposed to be between large numbers. no need for bounds checking
 8004dfc:	4b82      	ldr	r3, [pc, #520]	; (8005008 <updateClockState+0x280>)
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	881a      	ldrh	r2, [r3, #0]
 8004e02:	3201      	adds	r2, #1
 8004e04:	b292      	uxth	r2, r2
 8004e06:	801a      	strh	r2, [r3, #0]
 8004e08:	e02b      	b.n	8004e62 <updateClockState+0xda>
			case 4: clockVars.dateToSet->month = (clockVars.dateToSet->month) % 12 + 1; break;
 8004e0a:	4b7f      	ldr	r3, [pc, #508]	; (8005008 <updateClockState+0x280>)
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	789b      	ldrb	r3, [r3, #2]
 8004e10:	210c      	movs	r1, #12
 8004e12:	0018      	movs	r0, r3
 8004e14:	f7fb fa06 	bl	8000224 <__aeabi_uidivmod>
 8004e18:	000b      	movs	r3, r1
 8004e1a:	b2da      	uxtb	r2, r3
 8004e1c:	4b7a      	ldr	r3, [pc, #488]	; (8005008 <updateClockState+0x280>)
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	3201      	adds	r2, #1
 8004e22:	b2d2      	uxtb	r2, r2
 8004e24:	709a      	strb	r2, [r3, #2]
 8004e26:	e01c      	b.n	8004e62 <updateClockState+0xda>
			case 5: clockVars.dateToSet->date = ((clockVars.dateToSet->date) % maxDaysInMonth(clockVars.dateToSet->month, clockVars.dateToSet->yr)) + 1; break;
 8004e28:	4b77      	ldr	r3, [pc, #476]	; (8005008 <updateClockState+0x280>)
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	78dc      	ldrb	r4, [r3, #3]
 8004e2e:	4b76      	ldr	r3, [pc, #472]	; (8005008 <updateClockState+0x280>)
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	789a      	ldrb	r2, [r3, #2]
 8004e34:	4b74      	ldr	r3, [pc, #464]	; (8005008 <updateClockState+0x280>)
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	881b      	ldrh	r3, [r3, #0]
 8004e3a:	0019      	movs	r1, r3
 8004e3c:	0010      	movs	r0, r2
 8004e3e:	f7fe faaf 	bl	80033a0 <maxDaysInMonth>
 8004e42:	0003      	movs	r3, r0
 8004e44:	0019      	movs	r1, r3
 8004e46:	0020      	movs	r0, r4
 8004e48:	f7fb f9ec 	bl	8000224 <__aeabi_uidivmod>
 8004e4c:	000b      	movs	r3, r1
 8004e4e:	b2da      	uxtb	r2, r3
 8004e50:	4b6d      	ldr	r3, [pc, #436]	; (8005008 <updateClockState+0x280>)
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	3201      	adds	r2, #1
 8004e56:	b2d2      	uxtb	r2, r2
 8004e58:	70da      	strb	r2, [r3, #3]
 8004e5a:	e002      	b.n	8004e62 <updateClockState+0xda>
			default: break;
		}
	}
 8004e5c:	46c0      	nop			; (mov r8, r8)
 8004e5e:	e000      	b.n	8004e62 <updateClockState+0xda>
			default: break;
 8004e60:	46c0      	nop			; (mov r8, r8)
	// change fields down, do nothing if not setting clock
	if (buttons.is3Pressed && clockVars.isBeingSet) {
 8004e62:	4b68      	ldr	r3, [pc, #416]	; (8005004 <updateClockState+0x27c>)
 8004e64:	789b      	ldrb	r3, [r3, #2]
 8004e66:	b2db      	uxtb	r3, r3
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d066      	beq.n	8004f3a <updateClockState+0x1b2>
 8004e6c:	4b66      	ldr	r3, [pc, #408]	; (8005008 <updateClockState+0x280>)
 8004e6e:	781b      	ldrb	r3, [r3, #0]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d062      	beq.n	8004f3a <updateClockState+0x1b2>
		buttons.is3Pressed = 0;
 8004e74:	4b63      	ldr	r3, [pc, #396]	; (8005004 <updateClockState+0x27c>)
 8004e76:	2200      	movs	r2, #0
 8004e78:	709a      	strb	r2, [r3, #2]
		updateFace.clock = 1;
 8004e7a:	4b64      	ldr	r3, [pc, #400]	; (800500c <updateClockState+0x284>)
 8004e7c:	2201      	movs	r2, #1
 8004e7e:	701a      	strb	r2, [r3, #0]
		switch (clockVars.fieldBeingSet) {
 8004e80:	4b61      	ldr	r3, [pc, #388]	; (8005008 <updateClockState+0x280>)
 8004e82:	785b      	ldrb	r3, [r3, #1]
 8004e84:	2b05      	cmp	r3, #5
 8004e86:	d85a      	bhi.n	8004f3e <updateClockState+0x1b6>
 8004e88:	009a      	lsls	r2, r3, #2
 8004e8a:	4b62      	ldr	r3, [pc, #392]	; (8005014 <updateClockState+0x28c>)
 8004e8c:	18d3      	adds	r3, r2, r3
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	469f      	mov	pc, r3
			case 1:
				if (clockVars.timeToSet->min == 0) clockVars.timeToSet->min = 59;
 8004e92:	4b5d      	ldr	r3, [pc, #372]	; (8005008 <updateClockState+0x280>)
 8004e94:	689b      	ldr	r3, [r3, #8]
 8004e96:	785b      	ldrb	r3, [r3, #1]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d104      	bne.n	8004ea6 <updateClockState+0x11e>
 8004e9c:	4b5a      	ldr	r3, [pc, #360]	; (8005008 <updateClockState+0x280>)
 8004e9e:	689b      	ldr	r3, [r3, #8]
 8004ea0:	223b      	movs	r2, #59	; 0x3b
 8004ea2:	705a      	strb	r2, [r3, #1]
				else clockVars.timeToSet->min--;
				break;
 8004ea4:	e04c      	b.n	8004f40 <updateClockState+0x1b8>
				else clockVars.timeToSet->min--;
 8004ea6:	4b58      	ldr	r3, [pc, #352]	; (8005008 <updateClockState+0x280>)
 8004ea8:	689b      	ldr	r3, [r3, #8]
 8004eaa:	785a      	ldrb	r2, [r3, #1]
 8004eac:	3a01      	subs	r2, #1
 8004eae:	b2d2      	uxtb	r2, r2
 8004eb0:	705a      	strb	r2, [r3, #1]
				break;
 8004eb2:	e045      	b.n	8004f40 <updateClockState+0x1b8>
			case 2:
				if (clockVars.timeToSet->hr == 0) clockVars.timeToSet->hr = 23;
 8004eb4:	4b54      	ldr	r3, [pc, #336]	; (8005008 <updateClockState+0x280>)
 8004eb6:	689b      	ldr	r3, [r3, #8]
 8004eb8:	781b      	ldrb	r3, [r3, #0]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d104      	bne.n	8004ec8 <updateClockState+0x140>
 8004ebe:	4b52      	ldr	r3, [pc, #328]	; (8005008 <updateClockState+0x280>)
 8004ec0:	689b      	ldr	r3, [r3, #8]
 8004ec2:	2217      	movs	r2, #23
 8004ec4:	701a      	strb	r2, [r3, #0]
				else clockVars.timeToSet->hr--;
				break;
 8004ec6:	e03b      	b.n	8004f40 <updateClockState+0x1b8>
				else clockVars.timeToSet->hr--;
 8004ec8:	4b4f      	ldr	r3, [pc, #316]	; (8005008 <updateClockState+0x280>)
 8004eca:	689b      	ldr	r3, [r3, #8]
 8004ecc:	781a      	ldrb	r2, [r3, #0]
 8004ece:	3a01      	subs	r2, #1
 8004ed0:	b2d2      	uxtb	r2, r2
 8004ed2:	701a      	strb	r2, [r3, #0]
				break;
 8004ed4:	e034      	b.n	8004f40 <updateClockState+0x1b8>
			case 3: clockVars.dateToSet->yr--; break;		// supposed to be from 1950-2050. no need to do bounds checking
 8004ed6:	4b4c      	ldr	r3, [pc, #304]	; (8005008 <updateClockState+0x280>)
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	881a      	ldrh	r2, [r3, #0]
 8004edc:	3a01      	subs	r2, #1
 8004ede:	b292      	uxth	r2, r2
 8004ee0:	801a      	strh	r2, [r3, #0]
 8004ee2:	e02d      	b.n	8004f40 <updateClockState+0x1b8>
			case 4: //clockVars.dateToSet->month = clockVars.dateToSet->month == 1 ? 12 : clockVars.dateToSet->month-1; break;
				if (clockVars.dateToSet->month == 1) clockVars.dateToSet->month = 12;
 8004ee4:	4b48      	ldr	r3, [pc, #288]	; (8005008 <updateClockState+0x280>)
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	789b      	ldrb	r3, [r3, #2]
 8004eea:	2b01      	cmp	r3, #1
 8004eec:	d104      	bne.n	8004ef8 <updateClockState+0x170>
 8004eee:	4b46      	ldr	r3, [pc, #280]	; (8005008 <updateClockState+0x280>)
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	220c      	movs	r2, #12
 8004ef4:	709a      	strb	r2, [r3, #2]
				else clockVars.dateToSet->month--;
				break;
 8004ef6:	e023      	b.n	8004f40 <updateClockState+0x1b8>
				else clockVars.dateToSet->month--;
 8004ef8:	4b43      	ldr	r3, [pc, #268]	; (8005008 <updateClockState+0x280>)
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	789a      	ldrb	r2, [r3, #2]
 8004efe:	3a01      	subs	r2, #1
 8004f00:	b2d2      	uxtb	r2, r2
 8004f02:	709a      	strb	r2, [r3, #2]
				break;
 8004f04:	e01c      	b.n	8004f40 <updateClockState+0x1b8>
			case 5:
				if (clockVars.dateToSet->date == 1) clockVars.dateToSet->date = maxDaysInMonth(clockVars.dateToSet->month, clockVars.dateToSet->yr);
 8004f06:	4b40      	ldr	r3, [pc, #256]	; (8005008 <updateClockState+0x280>)
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	78db      	ldrb	r3, [r3, #3]
 8004f0c:	2b01      	cmp	r3, #1
 8004f0e:	d10d      	bne.n	8004f2c <updateClockState+0x1a4>
 8004f10:	4b3d      	ldr	r3, [pc, #244]	; (8005008 <updateClockState+0x280>)
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	789a      	ldrb	r2, [r3, #2]
 8004f16:	4b3c      	ldr	r3, [pc, #240]	; (8005008 <updateClockState+0x280>)
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	8819      	ldrh	r1, [r3, #0]
 8004f1c:	4b3a      	ldr	r3, [pc, #232]	; (8005008 <updateClockState+0x280>)
 8004f1e:	685c      	ldr	r4, [r3, #4]
 8004f20:	0010      	movs	r0, r2
 8004f22:	f7fe fa3d 	bl	80033a0 <maxDaysInMonth>
 8004f26:	0003      	movs	r3, r0
 8004f28:	70e3      	strb	r3, [r4, #3]
				else clockVars.dateToSet->date--;
				break;
 8004f2a:	e009      	b.n	8004f40 <updateClockState+0x1b8>
				else clockVars.dateToSet->date--;
 8004f2c:	4b36      	ldr	r3, [pc, #216]	; (8005008 <updateClockState+0x280>)
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	78da      	ldrb	r2, [r3, #3]
 8004f32:	3a01      	subs	r2, #1
 8004f34:	b2d2      	uxtb	r2, r2
 8004f36:	70da      	strb	r2, [r3, #3]
				break;
 8004f38:	e002      	b.n	8004f40 <updateClockState+0x1b8>
			default: break;
		}
	}
 8004f3a:	46c0      	nop			; (mov r8, r8)
 8004f3c:	e000      	b.n	8004f40 <updateClockState+0x1b8>
			default: break;
 8004f3e:	46c0      	nop			; (mov r8, r8)
	// switches between setting mode and default mode. changes between different clock fields
	if (buttons.is4Pressed) {
 8004f40:	4b30      	ldr	r3, [pc, #192]	; (8005004 <updateClockState+0x27c>)
 8004f42:	78db      	ldrb	r3, [r3, #3]
 8004f44:	b2db      	uxtb	r3, r3
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d057      	beq.n	8004ffa <updateClockState+0x272>
		buttons.is4Pressed = 0;
 8004f4a:	4b2e      	ldr	r3, [pc, #184]	; (8005004 <updateClockState+0x27c>)
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	70da      	strb	r2, [r3, #3]
		updateFace.clock = 1;
 8004f50:	4b2e      	ldr	r3, [pc, #184]	; (800500c <updateClockState+0x284>)
 8004f52:	2201      	movs	r2, #1
 8004f54:	701a      	strb	r2, [r3, #0]
		clockVars.fieldBeingSet = (clockVars.fieldBeingSet + 1) % (NUM_CLOCKFIELDS + 1);
 8004f56:	4b2c      	ldr	r3, [pc, #176]	; (8005008 <updateClockState+0x280>)
 8004f58:	785b      	ldrb	r3, [r3, #1]
 8004f5a:	3301      	adds	r3, #1
 8004f5c:	2106      	movs	r1, #6
 8004f5e:	0018      	movs	r0, r3
 8004f60:	f7fb fa4a 	bl	80003f8 <__aeabi_idivmod>
 8004f64:	000b      	movs	r3, r1
 8004f66:	b2da      	uxtb	r2, r3
 8004f68:	4b27      	ldr	r3, [pc, #156]	; (8005008 <updateClockState+0x280>)
 8004f6a:	705a      	strb	r2, [r3, #1]
		if (clockVars.fieldBeingSet != 0) {
 8004f6c:	4b26      	ldr	r3, [pc, #152]	; (8005008 <updateClockState+0x280>)
 8004f6e:	785b      	ldrb	r3, [r3, #1]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d033      	beq.n	8004fdc <updateClockState+0x254>
			clockVars.isBeingSet = 1;
 8004f74:	4b24      	ldr	r3, [pc, #144]	; (8005008 <updateClockState+0x280>)
 8004f76:	2201      	movs	r2, #1
 8004f78:	701a      	strb	r2, [r3, #0]

			// should pull current time when first entering setting mode
			if (clockVars.fieldBeingSet == 1) {
 8004f7a:	4b23      	ldr	r3, [pc, #140]	; (8005008 <updateClockState+0x280>)
 8004f7c:	785b      	ldrb	r3, [r3, #1]
 8004f7e:	2b01      	cmp	r3, #1
 8004f80:	d10e      	bne.n	8004fa0 <updateClockState+0x218>
				getDateTime(clockVars.dateToSet, clockVars.timeToSet, hrtc);
 8004f82:	4b21      	ldr	r3, [pc, #132]	; (8005008 <updateClockState+0x280>)
 8004f84:	6858      	ldr	r0, [r3, #4]
 8004f86:	4b20      	ldr	r3, [pc, #128]	; (8005008 <updateClockState+0x280>)
 8004f88:	689b      	ldr	r3, [r3, #8]
 8004f8a:	687a      	ldr	r2, [r7, #4]
 8004f8c:	0019      	movs	r1, r3
 8004f8e:	f7fe f8b9 	bl	8003104 <getDateTime>
				HAL_RTC_DeactivateAlarm(hrtc, RTC_ALARM_B);
 8004f92:	2380      	movs	r3, #128	; 0x80
 8004f94:	009a      	lsls	r2, r3, #2
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	0011      	movs	r1, r2
 8004f9a:	0018      	movs	r0, r3
 8004f9c:	f003 fff8 	bl	8008f90 <HAL_RTC_DeactivateAlarm>
			}

			if (clockVars.dateToSet->date > maxDaysInMonth(clockVars.dateToSet->month, clockVars.dateToSet->yr)) {
 8004fa0:	4b19      	ldr	r3, [pc, #100]	; (8005008 <updateClockState+0x280>)
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	78dc      	ldrb	r4, [r3, #3]
 8004fa6:	4b18      	ldr	r3, [pc, #96]	; (8005008 <updateClockState+0x280>)
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	789a      	ldrb	r2, [r3, #2]
 8004fac:	4b16      	ldr	r3, [pc, #88]	; (8005008 <updateClockState+0x280>)
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	881b      	ldrh	r3, [r3, #0]
 8004fb2:	0019      	movs	r1, r3
 8004fb4:	0010      	movs	r0, r2
 8004fb6:	f7fe f9f3 	bl	80033a0 <maxDaysInMonth>
 8004fba:	0003      	movs	r3, r0
 8004fbc:	429c      	cmp	r4, r3
 8004fbe:	d91c      	bls.n	8004ffa <updateClockState+0x272>
				clockVars.dateToSet->date = maxDaysInMonth(clockVars.dateToSet->month, clockVars.dateToSet->yr);
 8004fc0:	4b11      	ldr	r3, [pc, #68]	; (8005008 <updateClockState+0x280>)
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	789a      	ldrb	r2, [r3, #2]
 8004fc6:	4b10      	ldr	r3, [pc, #64]	; (8005008 <updateClockState+0x280>)
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	8819      	ldrh	r1, [r3, #0]
 8004fcc:	4b0e      	ldr	r3, [pc, #56]	; (8005008 <updateClockState+0x280>)
 8004fce:	685c      	ldr	r4, [r3, #4]
 8004fd0:	0010      	movs	r0, r2
 8004fd2:	f7fe f9e5 	bl	80033a0 <maxDaysInMonth>
 8004fd6:	0003      	movs	r3, r0
 8004fd8:	70e3      	strb	r3, [r4, #3]
			// second set to 0, weekday ignored
			setDateTime(clockVars.dateToSet, clockVars.timeToSet, hrtc);
			setClockAlarm(hrtc);
		}
	}
}
 8004fda:	e00e      	b.n	8004ffa <updateClockState+0x272>
			clockVars.isBeingSet = 0;
 8004fdc:	4b0a      	ldr	r3, [pc, #40]	; (8005008 <updateClockState+0x280>)
 8004fde:	2200      	movs	r2, #0
 8004fe0:	701a      	strb	r2, [r3, #0]
			setDateTime(clockVars.dateToSet, clockVars.timeToSet, hrtc);
 8004fe2:	4b09      	ldr	r3, [pc, #36]	; (8005008 <updateClockState+0x280>)
 8004fe4:	6858      	ldr	r0, [r3, #4]
 8004fe6:	4b08      	ldr	r3, [pc, #32]	; (8005008 <updateClockState+0x280>)
 8004fe8:	689b      	ldr	r3, [r3, #8]
 8004fea:	687a      	ldr	r2, [r7, #4]
 8004fec:	0019      	movs	r1, r3
 8004fee:	f7fd ff1b 	bl	8002e28 <setDateTime>
			setClockAlarm(hrtc);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	0018      	movs	r0, r3
 8004ff6:	f7fd ff82 	bl	8002efe <setClockAlarm>
}
 8004ffa:	46c0      	nop			; (mov r8, r8)
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	b003      	add	sp, #12
 8005000:	bd90      	pop	{r4, r7, pc}
 8005002:	46c0      	nop			; (mov r8, r8)
 8005004:	20000190 	.word	0x20000190
 8005008:	20000110 	.word	0x20000110
 800500c:	20000144 	.word	0x20000144
 8005010:	0800bf20 	.word	0x0800bf20
 8005014:	0800bf38 	.word	0x0800bf38

08005018 <updateTimerState>:
 *     second, timer only runs for half second.)
 *     also not sure how to implement pause using rtc (alarm value has to change depending on how long timer is paused for)
 *   might need to change to using only hardware timer for this instead of rtc because of problems listed above
 *   insert a few more functions into this (those that need to use the hardware)
 */
void updateTimerState(TIM_HandleTypeDef *timerStopwatchTim, TIM_HandleTypeDef *motorTim) {
 8005018:	b580      	push	{r7, lr}
 800501a:	b082      	sub	sp, #8
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
 8005020:	6039      	str	r1, [r7, #0]
	if (timerVars.isBeingSet) {
 8005022:	4ba0      	ldr	r3, [pc, #640]	; (80052a4 <updateTimerState+0x28c>)
 8005024:	781b      	ldrb	r3, [r3, #0]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d100      	bne.n	800502c <updateTimerState+0x14>
 800502a:	e089      	b.n	8005140 <updateTimerState+0x128>
		if (buttons.is2Pressed) {
 800502c:	4b9e      	ldr	r3, [pc, #632]	; (80052a8 <updateTimerState+0x290>)
 800502e:	785b      	ldrb	r3, [r3, #1]
 8005030:	b2db      	uxtb	r3, r3
 8005032:	2b00      	cmp	r3, #0
 8005034:	d03b      	beq.n	80050ae <updateTimerState+0x96>
			buttons.is2Pressed = 0;
 8005036:	4b9c      	ldr	r3, [pc, #624]	; (80052a8 <updateTimerState+0x290>)
 8005038:	2200      	movs	r2, #0
 800503a:	705a      	strb	r2, [r3, #1]
			updateFace.timer = 1;
 800503c:	4b9b      	ldr	r3, [pc, #620]	; (80052ac <updateTimerState+0x294>)
 800503e:	2201      	movs	r2, #1
 8005040:	705a      	strb	r2, [r3, #1]

			// set field up
			switch (timerVars.fieldBeingSet) {
 8005042:	4b98      	ldr	r3, [pc, #608]	; (80052a4 <updateTimerState+0x28c>)
 8005044:	785b      	ldrb	r3, [r3, #1]
 8005046:	2b02      	cmp	r3, #2
 8005048:	d013      	beq.n	8005072 <updateTimerState+0x5a>
 800504a:	2b03      	cmp	r3, #3
 800504c:	d020      	beq.n	8005090 <updateTimerState+0x78>
 800504e:	2b01      	cmp	r3, #1
 8005050:	d000      	beq.n	8005054 <updateTimerState+0x3c>
				case 1: timerVars.timeToSet->sec = (timerVars.timeToSet->sec+1) % 60; break;
				case 2: timerVars.timeToSet->min = (timerVars.timeToSet->min+1) % 60; break;
				case 3: timerVars.timeToSet->hr = (timerVars.timeToSet->hr+1) % 100; break;
				default: break;
 8005052:	e02d      	b.n	80050b0 <updateTimerState+0x98>
				case 1: timerVars.timeToSet->sec = (timerVars.timeToSet->sec+1) % 60; break;
 8005054:	4b93      	ldr	r3, [pc, #588]	; (80052a4 <updateTimerState+0x28c>)
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	789b      	ldrb	r3, [r3, #2]
 800505a:	3301      	adds	r3, #1
 800505c:	213c      	movs	r1, #60	; 0x3c
 800505e:	0018      	movs	r0, r3
 8005060:	f7fb f9ca 	bl	80003f8 <__aeabi_idivmod>
 8005064:	000b      	movs	r3, r1
 8005066:	001a      	movs	r2, r3
 8005068:	4b8e      	ldr	r3, [pc, #568]	; (80052a4 <updateTimerState+0x28c>)
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	b2d2      	uxtb	r2, r2
 800506e:	709a      	strb	r2, [r3, #2]
 8005070:	e01e      	b.n	80050b0 <updateTimerState+0x98>
				case 2: timerVars.timeToSet->min = (timerVars.timeToSet->min+1) % 60; break;
 8005072:	4b8c      	ldr	r3, [pc, #560]	; (80052a4 <updateTimerState+0x28c>)
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	785b      	ldrb	r3, [r3, #1]
 8005078:	3301      	adds	r3, #1
 800507a:	213c      	movs	r1, #60	; 0x3c
 800507c:	0018      	movs	r0, r3
 800507e:	f7fb f9bb 	bl	80003f8 <__aeabi_idivmod>
 8005082:	000b      	movs	r3, r1
 8005084:	001a      	movs	r2, r3
 8005086:	4b87      	ldr	r3, [pc, #540]	; (80052a4 <updateTimerState+0x28c>)
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	b2d2      	uxtb	r2, r2
 800508c:	705a      	strb	r2, [r3, #1]
 800508e:	e00f      	b.n	80050b0 <updateTimerState+0x98>
				case 3: timerVars.timeToSet->hr = (timerVars.timeToSet->hr+1) % 100; break;
 8005090:	4b84      	ldr	r3, [pc, #528]	; (80052a4 <updateTimerState+0x28c>)
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	781b      	ldrb	r3, [r3, #0]
 8005096:	3301      	adds	r3, #1
 8005098:	2164      	movs	r1, #100	; 0x64
 800509a:	0018      	movs	r0, r3
 800509c:	f7fb f9ac 	bl	80003f8 <__aeabi_idivmod>
 80050a0:	000b      	movs	r3, r1
 80050a2:	001a      	movs	r2, r3
 80050a4:	4b7f      	ldr	r3, [pc, #508]	; (80052a4 <updateTimerState+0x28c>)
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	b2d2      	uxtb	r2, r2
 80050aa:	701a      	strb	r2, [r3, #0]
 80050ac:	e000      	b.n	80050b0 <updateTimerState+0x98>
			}
		}
 80050ae:	46c0      	nop			; (mov r8, r8)
		if (buttons.is3Pressed) {
 80050b0:	4b7d      	ldr	r3, [pc, #500]	; (80052a8 <updateTimerState+0x290>)
 80050b2:	789b      	ldrb	r3, [r3, #2]
 80050b4:	b2db      	uxtb	r3, r3
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d100      	bne.n	80050bc <updateTimerState+0xa4>
 80050ba:	e09a      	b.n	80051f2 <updateTimerState+0x1da>
			buttons.is3Pressed = 0;
 80050bc:	4b7a      	ldr	r3, [pc, #488]	; (80052a8 <updateTimerState+0x290>)
 80050be:	2200      	movs	r2, #0
 80050c0:	709a      	strb	r2, [r3, #2]
			updateFace.timer = 1;
 80050c2:	4b7a      	ldr	r3, [pc, #488]	; (80052ac <updateTimerState+0x294>)
 80050c4:	2201      	movs	r2, #1
 80050c6:	705a      	strb	r2, [r3, #1]

			// set field down
			switch (timerVars.fieldBeingSet) {
 80050c8:	4b76      	ldr	r3, [pc, #472]	; (80052a4 <updateTimerState+0x28c>)
 80050ca:	785b      	ldrb	r3, [r3, #1]
 80050cc:	2b02      	cmp	r3, #2
 80050ce:	d015      	beq.n	80050fc <updateTimerState+0xe4>
 80050d0:	2b03      	cmp	r3, #3
 80050d2:	d024      	beq.n	800511e <updateTimerState+0x106>
 80050d4:	2b01      	cmp	r3, #1
 80050d6:	d000      	beq.n	80050da <updateTimerState+0xc2>
					break;
				case 3:
					if (timerVars.timeToSet->hr == 0) timerVars.timeToSet->hr = 99;		// no limit on hour, since we're not using day
					else timerVars.timeToSet->hr--;
					break;
				default: break;
 80050d8:	e08c      	b.n	80051f4 <updateTimerState+0x1dc>
					if (timerVars.timeToSet->sec == 0) timerVars.timeToSet->sec = 59;
 80050da:	4b72      	ldr	r3, [pc, #456]	; (80052a4 <updateTimerState+0x28c>)
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	789b      	ldrb	r3, [r3, #2]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d104      	bne.n	80050ee <updateTimerState+0xd6>
 80050e4:	4b6f      	ldr	r3, [pc, #444]	; (80052a4 <updateTimerState+0x28c>)
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	223b      	movs	r2, #59	; 0x3b
 80050ea:	709a      	strb	r2, [r3, #2]
					break;
 80050ec:	e082      	b.n	80051f4 <updateTimerState+0x1dc>
					else timerVars.timeToSet->sec--;
 80050ee:	4b6d      	ldr	r3, [pc, #436]	; (80052a4 <updateTimerState+0x28c>)
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	789a      	ldrb	r2, [r3, #2]
 80050f4:	3a01      	subs	r2, #1
 80050f6:	b2d2      	uxtb	r2, r2
 80050f8:	709a      	strb	r2, [r3, #2]
					break;
 80050fa:	e07b      	b.n	80051f4 <updateTimerState+0x1dc>
					if (timerVars.timeToSet->min == 0) timerVars.timeToSet->min = 59;
 80050fc:	4b69      	ldr	r3, [pc, #420]	; (80052a4 <updateTimerState+0x28c>)
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	785b      	ldrb	r3, [r3, #1]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d104      	bne.n	8005110 <updateTimerState+0xf8>
 8005106:	4b67      	ldr	r3, [pc, #412]	; (80052a4 <updateTimerState+0x28c>)
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	223b      	movs	r2, #59	; 0x3b
 800510c:	705a      	strb	r2, [r3, #1]
					break;
 800510e:	e071      	b.n	80051f4 <updateTimerState+0x1dc>
					else timerVars.timeToSet->min--;
 8005110:	4b64      	ldr	r3, [pc, #400]	; (80052a4 <updateTimerState+0x28c>)
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	785a      	ldrb	r2, [r3, #1]
 8005116:	3a01      	subs	r2, #1
 8005118:	b2d2      	uxtb	r2, r2
 800511a:	705a      	strb	r2, [r3, #1]
					break;
 800511c:	e06a      	b.n	80051f4 <updateTimerState+0x1dc>
					if (timerVars.timeToSet->hr == 0) timerVars.timeToSet->hr = 99;		// no limit on hour, since we're not using day
 800511e:	4b61      	ldr	r3, [pc, #388]	; (80052a4 <updateTimerState+0x28c>)
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	781b      	ldrb	r3, [r3, #0]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d104      	bne.n	8005132 <updateTimerState+0x11a>
 8005128:	4b5e      	ldr	r3, [pc, #376]	; (80052a4 <updateTimerState+0x28c>)
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	2263      	movs	r2, #99	; 0x63
 800512e:	701a      	strb	r2, [r3, #0]
					break;
 8005130:	e060      	b.n	80051f4 <updateTimerState+0x1dc>
					else timerVars.timeToSet->hr--;
 8005132:	4b5c      	ldr	r3, [pc, #368]	; (80052a4 <updateTimerState+0x28c>)
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	781a      	ldrb	r2, [r3, #0]
 8005138:	3a01      	subs	r2, #1
 800513a:	b2d2      	uxtb	r2, r2
 800513c:	701a      	strb	r2, [r3, #0]
					break;
 800513e:	e059      	b.n	80051f4 <updateTimerState+0x1dc>
			}
		}
	}
	// set and ready to run
	else if (timerVars.isSet) {
 8005140:	4b58      	ldr	r3, [pc, #352]	; (80052a4 <updateTimerState+0x28c>)
 8005142:	789b      	ldrb	r3, [r3, #2]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d055      	beq.n	80051f4 <updateTimerState+0x1dc>
		if (buttons.is2Pressed && isTimerRunning == 0 && timerCounter != 0) {
 8005148:	4b57      	ldr	r3, [pc, #348]	; (80052a8 <updateTimerState+0x290>)
 800514a:	785b      	ldrb	r3, [r3, #1]
 800514c:	b2db      	uxtb	r3, r3
 800514e:	2b00      	cmp	r3, #0
 8005150:	d018      	beq.n	8005184 <updateTimerState+0x16c>
 8005152:	4b57      	ldr	r3, [pc, #348]	; (80052b0 <updateTimerState+0x298>)
 8005154:	781b      	ldrb	r3, [r3, #0]
 8005156:	b2db      	uxtb	r3, r3
 8005158:	2b00      	cmp	r3, #0
 800515a:	d113      	bne.n	8005184 <updateTimerState+0x16c>
 800515c:	4b55      	ldr	r3, [pc, #340]	; (80052b4 <updateTimerState+0x29c>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d00f      	beq.n	8005184 <updateTimerState+0x16c>
			buttons.is2Pressed = 0;
 8005164:	4b50      	ldr	r3, [pc, #320]	; (80052a8 <updateTimerState+0x290>)
 8005166:	2200      	movs	r2, #0
 8005168:	705a      	strb	r2, [r3, #1]
			updateFace.timer = 1;
 800516a:	4b50      	ldr	r3, [pc, #320]	; (80052ac <updateTimerState+0x294>)
 800516c:	2201      	movs	r2, #1
 800516e:	705a      	strb	r2, [r3, #1]

			// start timer
			runTimer(timerStopwatchTim);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	0018      	movs	r0, r3
 8005174:	f7ff fa7c 	bl	8004670 <runTimer>
			isTimerRunning = 1;
 8005178:	4b4d      	ldr	r3, [pc, #308]	; (80052b0 <updateTimerState+0x298>)
 800517a:	2201      	movs	r2, #1
 800517c:	701a      	strb	r2, [r3, #0]
			isTimerPaused = 0;
 800517e:	4b4e      	ldr	r3, [pc, #312]	; (80052b8 <updateTimerState+0x2a0>)
 8005180:	2200      	movs	r2, #0
 8005182:	701a      	strb	r2, [r3, #0]
		}
		if (buttons.is3Pressed && isTimerRunning && timerCounter != 0) {
 8005184:	4b48      	ldr	r3, [pc, #288]	; (80052a8 <updateTimerState+0x290>)
 8005186:	789b      	ldrb	r3, [r3, #2]
 8005188:	b2db      	uxtb	r3, r3
 800518a:	2b00      	cmp	r3, #0
 800518c:	d018      	beq.n	80051c0 <updateTimerState+0x1a8>
 800518e:	4b48      	ldr	r3, [pc, #288]	; (80052b0 <updateTimerState+0x298>)
 8005190:	781b      	ldrb	r3, [r3, #0]
 8005192:	b2db      	uxtb	r3, r3
 8005194:	2b00      	cmp	r3, #0
 8005196:	d013      	beq.n	80051c0 <updateTimerState+0x1a8>
 8005198:	4b46      	ldr	r3, [pc, #280]	; (80052b4 <updateTimerState+0x29c>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d00f      	beq.n	80051c0 <updateTimerState+0x1a8>
			buttons.is3Pressed = 0;
 80051a0:	4b41      	ldr	r3, [pc, #260]	; (80052a8 <updateTimerState+0x290>)
 80051a2:	2200      	movs	r2, #0
 80051a4:	709a      	strb	r2, [r3, #2]
			updateFace.timer = 1;
 80051a6:	4b41      	ldr	r3, [pc, #260]	; (80052ac <updateTimerState+0x294>)
 80051a8:	2201      	movs	r2, #1
 80051aa:	705a      	strb	r2, [r3, #1]

			// pause timer
			pauseTimer(timerStopwatchTim);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	0018      	movs	r0, r3
 80051b0:	f7ff faba 	bl	8004728 <pauseTimer>
			isTimerRunning = 0;
 80051b4:	4b3e      	ldr	r3, [pc, #248]	; (80052b0 <updateTimerState+0x298>)
 80051b6:	2200      	movs	r2, #0
 80051b8:	701a      	strb	r2, [r3, #0]
			isTimerPaused = 1;
 80051ba:	4b3f      	ldr	r3, [pc, #252]	; (80052b8 <updateTimerState+0x2a0>)
 80051bc:	2201      	movs	r2, #1
 80051be:	701a      	strb	r2, [r3, #0]
		}
		if (buttons.is4Pressed) {
 80051c0:	4b39      	ldr	r3, [pc, #228]	; (80052a8 <updateTimerState+0x290>)
 80051c2:	78db      	ldrb	r3, [r3, #3]
 80051c4:	b2db      	uxtb	r3, r3
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d014      	beq.n	80051f4 <updateTimerState+0x1dc>
			buttons.is4Pressed = 0;
 80051ca:	4b37      	ldr	r3, [pc, #220]	; (80052a8 <updateTimerState+0x290>)
 80051cc:	2200      	movs	r2, #0
 80051ce:	70da      	strb	r2, [r3, #3]
			updateFace.timer = 1;
 80051d0:	4b36      	ldr	r3, [pc, #216]	; (80052ac <updateTimerState+0x294>)
 80051d2:	2201      	movs	r2, #1
 80051d4:	705a      	strb	r2, [r3, #1]

			// stop and clear timer
			stopTimer(timerStopwatchTim);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	0018      	movs	r0, r3
 80051da:	f7ff fab9 	bl	8004750 <stopTimer>
			timerVars.isSet = 0;
 80051de:	4b31      	ldr	r3, [pc, #196]	; (80052a4 <updateTimerState+0x28c>)
 80051e0:	2200      	movs	r2, #0
 80051e2:	709a      	strb	r2, [r3, #2]
			isTimerRunning = 0;
 80051e4:	4b32      	ldr	r3, [pc, #200]	; (80052b0 <updateTimerState+0x298>)
 80051e6:	2200      	movs	r2, #0
 80051e8:	701a      	strb	r2, [r3, #0]
			isTimerPaused = 0;
 80051ea:	4b33      	ldr	r3, [pc, #204]	; (80052b8 <updateTimerState+0x2a0>)
 80051ec:	2200      	movs	r2, #0
 80051ee:	701a      	strb	r2, [r3, #0]
 80051f0:	e000      	b.n	80051f4 <updateTimerState+0x1dc>
		}
 80051f2:	46c0      	nop			; (mov r8, r8)
//			timerCounter = timeToSeconds(timerVars.timeToSet);
//			runMotor(motorTim);
//		}
	}
	// not done? might be done (other buttons start/stop timer)
	if (buttons.is4Pressed) {
 80051f4:	4b2c      	ldr	r3, [pc, #176]	; (80052a8 <updateTimerState+0x290>)
 80051f6:	78db      	ldrb	r3, [r3, #3]
 80051f8:	b2db      	uxtb	r3, r3
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d04d      	beq.n	800529a <updateTimerState+0x282>
		buttons.is4Pressed = 0;
 80051fe:	4b2a      	ldr	r3, [pc, #168]	; (80052a8 <updateTimerState+0x290>)
 8005200:	2200      	movs	r2, #0
 8005202:	70da      	strb	r2, [r3, #3]
		updateFace.timer = 1;
 8005204:	4b29      	ldr	r3, [pc, #164]	; (80052ac <updateTimerState+0x294>)
 8005206:	2201      	movs	r2, #1
 8005208:	705a      	strb	r2, [r3, #1]

		// change field/mode
		timerVars.fieldBeingSet = (timerVars.fieldBeingSet + 1) % (NUM_TIMERFIELDS + 1);
 800520a:	4b26      	ldr	r3, [pc, #152]	; (80052a4 <updateTimerState+0x28c>)
 800520c:	785b      	ldrb	r3, [r3, #1]
 800520e:	3301      	adds	r3, #1
 8005210:	4a2a      	ldr	r2, [pc, #168]	; (80052bc <updateTimerState+0x2a4>)
 8005212:	4013      	ands	r3, r2
 8005214:	d504      	bpl.n	8005220 <updateTimerState+0x208>
 8005216:	3b01      	subs	r3, #1
 8005218:	2204      	movs	r2, #4
 800521a:	4252      	negs	r2, r2
 800521c:	4313      	orrs	r3, r2
 800521e:	3301      	adds	r3, #1
 8005220:	b2da      	uxtb	r2, r3
 8005222:	4b20      	ldr	r3, [pc, #128]	; (80052a4 <updateTimerState+0x28c>)
 8005224:	705a      	strb	r2, [r3, #1]
		if (timerVars.fieldBeingSet != 0) {
 8005226:	4b1f      	ldr	r3, [pc, #124]	; (80052a4 <updateTimerState+0x28c>)
 8005228:	785b      	ldrb	r3, [r3, #1]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d016      	beq.n	800525c <updateTimerState+0x244>
			timerVars.isBeingSet = 1;
 800522e:	4b1d      	ldr	r3, [pc, #116]	; (80052a4 <updateTimerState+0x28c>)
 8005230:	2201      	movs	r2, #1
 8005232:	701a      	strb	r2, [r3, #0]
			timerVars.isSet = 0;
 8005234:	4b1b      	ldr	r3, [pc, #108]	; (80052a4 <updateTimerState+0x28c>)
 8005236:	2200      	movs	r2, #0
 8005238:	709a      	strb	r2, [r3, #2]

			// set temp fields to 0 when first entering setting mode
			if (timerVars.fieldBeingSet == 1) {
 800523a:	4b1a      	ldr	r3, [pc, #104]	; (80052a4 <updateTimerState+0x28c>)
 800523c:	785b      	ldrb	r3, [r3, #1]
 800523e:	2b01      	cmp	r3, #1
 8005240:	d12b      	bne.n	800529a <updateTimerState+0x282>
				timerVars.timeToSet->sec = 0;
 8005242:	4b18      	ldr	r3, [pc, #96]	; (80052a4 <updateTimerState+0x28c>)
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	2200      	movs	r2, #0
 8005248:	709a      	strb	r2, [r3, #2]
				timerVars.timeToSet->min = 0;
 800524a:	4b16      	ldr	r3, [pc, #88]	; (80052a4 <updateTimerState+0x28c>)
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	2200      	movs	r2, #0
 8005250:	705a      	strb	r2, [r3, #1]
				timerVars.timeToSet->hr = 0;
 8005252:	4b14      	ldr	r3, [pc, #80]	; (80052a4 <updateTimerState+0x28c>)
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	2200      	movs	r2, #0
 8005258:	701a      	strb	r2, [r3, #0]
		else {
			timerVars.isBeingSet = 0;
			timerVars.isSet = 0;
		}
	}
}
 800525a:	e01e      	b.n	800529a <updateTimerState+0x282>
		else if (timeToSeconds(timerVars.timeToSet) != 0) {
 800525c:	4b11      	ldr	r3, [pc, #68]	; (80052a4 <updateTimerState+0x28c>)
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	0018      	movs	r0, r3
 8005262:	f7fd fffb 	bl	800325c <timeToSeconds>
 8005266:	1e03      	subs	r3, r0, #0
 8005268:	d011      	beq.n	800528e <updateTimerState+0x276>
			timerVars.isBeingSet = 0;
 800526a:	4b0e      	ldr	r3, [pc, #56]	; (80052a4 <updateTimerState+0x28c>)
 800526c:	2200      	movs	r2, #0
 800526e:	701a      	strb	r2, [r3, #0]
			timerVars.isSet = 1;
 8005270:	4b0c      	ldr	r3, [pc, #48]	; (80052a4 <updateTimerState+0x28c>)
 8005272:	2201      	movs	r2, #1
 8005274:	709a      	strb	r2, [r3, #2]
			isTimerDone = 0;
 8005276:	4b12      	ldr	r3, [pc, #72]	; (80052c0 <updateTimerState+0x2a8>)
 8005278:	2200      	movs	r2, #0
 800527a:	701a      	strb	r2, [r3, #0]
			timerCounter = timeToSeconds(timerVars.timeToSet);
 800527c:	4b09      	ldr	r3, [pc, #36]	; (80052a4 <updateTimerState+0x28c>)
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	0018      	movs	r0, r3
 8005282:	f7fd ffeb 	bl	800325c <timeToSeconds>
 8005286:	0002      	movs	r2, r0
 8005288:	4b0a      	ldr	r3, [pc, #40]	; (80052b4 <updateTimerState+0x29c>)
 800528a:	601a      	str	r2, [r3, #0]
}
 800528c:	e005      	b.n	800529a <updateTimerState+0x282>
			timerVars.isBeingSet = 0;
 800528e:	4b05      	ldr	r3, [pc, #20]	; (80052a4 <updateTimerState+0x28c>)
 8005290:	2200      	movs	r2, #0
 8005292:	701a      	strb	r2, [r3, #0]
			timerVars.isSet = 0;
 8005294:	4b03      	ldr	r3, [pc, #12]	; (80052a4 <updateTimerState+0x28c>)
 8005296:	2200      	movs	r2, #0
 8005298:	709a      	strb	r2, [r3, #2]
}
 800529a:	46c0      	nop			; (mov r8, r8)
 800529c:	46bd      	mov	sp, r7
 800529e:	b002      	add	sp, #8
 80052a0:	bd80      	pop	{r7, pc}
 80052a2:	46c0      	nop			; (mov r8, r8)
 80052a4:	2000011c 	.word	0x2000011c
 80052a8:	20000190 	.word	0x20000190
 80052ac:	20000144 	.word	0x20000144
 80052b0:	20000194 	.word	0x20000194
 80052b4:	2000014c 	.word	0x2000014c
 80052b8:	20000196 	.word	0x20000196
 80052bc:	80000003 	.word	0x80000003
 80052c0:	20000150 	.word	0x20000150

080052c4 <updateAlarmState>:
 *   should change to make it possible to have multiple alarms
 *   also pick alarms that repeat and alarms that don't
 *   need to make changes to ui to make this happen
 *   currently just does old behavior (only 1 alarm)
 */
void updateAlarmState(RTC_HandleTypeDef *hrtc, TIM_HandleTypeDef *motorTim) {
 80052c4:	b5b0      	push	{r4, r5, r7, lr}
 80052c6:	b086      	sub	sp, #24
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
 80052cc:	6039      	str	r1, [r7, #0]
	if (buttons.is2Pressed && alarmVars.isBeingSet) {
 80052ce:	4b94      	ldr	r3, [pc, #592]	; (8005520 <updateAlarmState+0x25c>)
 80052d0:	785b      	ldrb	r3, [r3, #1]
 80052d2:	b2db      	uxtb	r3, r3
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d052      	beq.n	800537e <updateAlarmState+0xba>
 80052d8:	4b92      	ldr	r3, [pc, #584]	; (8005524 <updateAlarmState+0x260>)
 80052da:	781b      	ldrb	r3, [r3, #0]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d04e      	beq.n	800537e <updateAlarmState+0xba>
		buttons.is2Pressed = 0;
 80052e0:	4b8f      	ldr	r3, [pc, #572]	; (8005520 <updateAlarmState+0x25c>)
 80052e2:	2200      	movs	r2, #0
 80052e4:	705a      	strb	r2, [r3, #1]
		updateFace.alarm = 1;
 80052e6:	4b90      	ldr	r3, [pc, #576]	; (8005528 <updateAlarmState+0x264>)
 80052e8:	2201      	movs	r2, #1
 80052ea:	709a      	strb	r2, [r3, #2]

		// change fields up
		switch (alarmVars.fieldBeingSet) {
 80052ec:	4b8d      	ldr	r3, [pc, #564]	; (8005524 <updateAlarmState+0x260>)
 80052ee:	785b      	ldrb	r3, [r3, #1]
 80052f0:	2b02      	cmp	r3, #2
 80052f2:	d017      	beq.n	8005324 <updateAlarmState+0x60>
 80052f4:	dc02      	bgt.n	80052fc <updateAlarmState+0x38>
 80052f6:	2b01      	cmp	r3, #1
 80052f8:	d005      	beq.n	8005306 <updateAlarmState+0x42>
			case 1: alarmVars.alarmToSet->sec = (alarmVars.alarmToSet->sec + 1) % 60; break;
			case 2: alarmVars.alarmToSet->min = (alarmVars.alarmToSet->min + 1) % 60; break;
			case 3: alarmVars.alarmToSet->hr = (alarmVars.alarmToSet->hr + 1) % 24; break;
			case 4: alarmVars.alarmToSet->weekday = (alarmVars.alarmToSet->weekday) % 7 + 1; break;
			default: break;
 80052fa:	e041      	b.n	8005380 <updateAlarmState+0xbc>
		switch (alarmVars.fieldBeingSet) {
 80052fc:	2b03      	cmp	r3, #3
 80052fe:	d020      	beq.n	8005342 <updateAlarmState+0x7e>
 8005300:	2b04      	cmp	r3, #4
 8005302:	d02d      	beq.n	8005360 <updateAlarmState+0x9c>
			default: break;
 8005304:	e03c      	b.n	8005380 <updateAlarmState+0xbc>
			case 1: alarmVars.alarmToSet->sec = (alarmVars.alarmToSet->sec + 1) % 60; break;
 8005306:	4b87      	ldr	r3, [pc, #540]	; (8005524 <updateAlarmState+0x260>)
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	789b      	ldrb	r3, [r3, #2]
 800530c:	3301      	adds	r3, #1
 800530e:	213c      	movs	r1, #60	; 0x3c
 8005310:	0018      	movs	r0, r3
 8005312:	f7fb f871 	bl	80003f8 <__aeabi_idivmod>
 8005316:	000b      	movs	r3, r1
 8005318:	001a      	movs	r2, r3
 800531a:	4b82      	ldr	r3, [pc, #520]	; (8005524 <updateAlarmState+0x260>)
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	b2d2      	uxtb	r2, r2
 8005320:	709a      	strb	r2, [r3, #2]
 8005322:	e02d      	b.n	8005380 <updateAlarmState+0xbc>
			case 2: alarmVars.alarmToSet->min = (alarmVars.alarmToSet->min + 1) % 60; break;
 8005324:	4b7f      	ldr	r3, [pc, #508]	; (8005524 <updateAlarmState+0x260>)
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	785b      	ldrb	r3, [r3, #1]
 800532a:	3301      	adds	r3, #1
 800532c:	213c      	movs	r1, #60	; 0x3c
 800532e:	0018      	movs	r0, r3
 8005330:	f7fb f862 	bl	80003f8 <__aeabi_idivmod>
 8005334:	000b      	movs	r3, r1
 8005336:	001a      	movs	r2, r3
 8005338:	4b7a      	ldr	r3, [pc, #488]	; (8005524 <updateAlarmState+0x260>)
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	b2d2      	uxtb	r2, r2
 800533e:	705a      	strb	r2, [r3, #1]
 8005340:	e01e      	b.n	8005380 <updateAlarmState+0xbc>
			case 3: alarmVars.alarmToSet->hr = (alarmVars.alarmToSet->hr + 1) % 24; break;
 8005342:	4b78      	ldr	r3, [pc, #480]	; (8005524 <updateAlarmState+0x260>)
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	781b      	ldrb	r3, [r3, #0]
 8005348:	3301      	adds	r3, #1
 800534a:	2118      	movs	r1, #24
 800534c:	0018      	movs	r0, r3
 800534e:	f7fb f853 	bl	80003f8 <__aeabi_idivmod>
 8005352:	000b      	movs	r3, r1
 8005354:	001a      	movs	r2, r3
 8005356:	4b73      	ldr	r3, [pc, #460]	; (8005524 <updateAlarmState+0x260>)
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	b2d2      	uxtb	r2, r2
 800535c:	701a      	strb	r2, [r3, #0]
 800535e:	e00f      	b.n	8005380 <updateAlarmState+0xbc>
			case 4: alarmVars.alarmToSet->weekday = (alarmVars.alarmToSet->weekday) % 7 + 1; break;
 8005360:	4b70      	ldr	r3, [pc, #448]	; (8005524 <updateAlarmState+0x260>)
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	78db      	ldrb	r3, [r3, #3]
 8005366:	2107      	movs	r1, #7
 8005368:	0018      	movs	r0, r3
 800536a:	f7fa ff5b 	bl	8000224 <__aeabi_uidivmod>
 800536e:	000b      	movs	r3, r1
 8005370:	b2da      	uxtb	r2, r3
 8005372:	4b6c      	ldr	r3, [pc, #432]	; (8005524 <updateAlarmState+0x260>)
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	3201      	adds	r2, #1
 8005378:	b2d2      	uxtb	r2, r2
 800537a:	70da      	strb	r2, [r3, #3]
 800537c:	e000      	b.n	8005380 <updateAlarmState+0xbc>
		}
	}
 800537e:	46c0      	nop			; (mov r8, r8)
	if (buttons.is3Pressed && alarmVars.isBeingSet) {
 8005380:	4b67      	ldr	r3, [pc, #412]	; (8005520 <updateAlarmState+0x25c>)
 8005382:	789b      	ldrb	r3, [r3, #2]
 8005384:	b2db      	uxtb	r3, r3
 8005386:	2b00      	cmp	r3, #0
 8005388:	d05a      	beq.n	8005440 <updateAlarmState+0x17c>
 800538a:	4b66      	ldr	r3, [pc, #408]	; (8005524 <updateAlarmState+0x260>)
 800538c:	781b      	ldrb	r3, [r3, #0]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d056      	beq.n	8005440 <updateAlarmState+0x17c>
		buttons.is3Pressed = 0;
 8005392:	4b63      	ldr	r3, [pc, #396]	; (8005520 <updateAlarmState+0x25c>)
 8005394:	2200      	movs	r2, #0
 8005396:	709a      	strb	r2, [r3, #2]
		updateFace.alarm = 1;
 8005398:	4b63      	ldr	r3, [pc, #396]	; (8005528 <updateAlarmState+0x264>)
 800539a:	2201      	movs	r2, #1
 800539c:	709a      	strb	r2, [r3, #2]

		// change fields down
		switch (alarmVars.fieldBeingSet) {
 800539e:	4b61      	ldr	r3, [pc, #388]	; (8005524 <updateAlarmState+0x260>)
 80053a0:	785b      	ldrb	r3, [r3, #1]
 80053a2:	2b02      	cmp	r3, #2
 80053a4:	d019      	beq.n	80053da <updateAlarmState+0x116>
 80053a6:	dc02      	bgt.n	80053ae <updateAlarmState+0xea>
 80053a8:	2b01      	cmp	r3, #1
 80053aa:	d005      	beq.n	80053b8 <updateAlarmState+0xf4>
				break;
			case 4:
				if (alarmVars.alarmToSet->weekday == RTC_WEEKDAY_MONDAY) alarmVars.alarmToSet->weekday = RTC_WEEKDAY_SUNDAY;
				else alarmVars.alarmToSet->weekday--;
				break;
			default: break;
 80053ac:	e049      	b.n	8005442 <updateAlarmState+0x17e>
		switch (alarmVars.fieldBeingSet) {
 80053ae:	2b03      	cmp	r3, #3
 80053b0:	d024      	beq.n	80053fc <updateAlarmState+0x138>
 80053b2:	2b04      	cmp	r3, #4
 80053b4:	d033      	beq.n	800541e <updateAlarmState+0x15a>
			default: break;
 80053b6:	e044      	b.n	8005442 <updateAlarmState+0x17e>
				if (alarmVars.alarmToSet->sec == 0) alarmVars.alarmToSet->sec = 59;
 80053b8:	4b5a      	ldr	r3, [pc, #360]	; (8005524 <updateAlarmState+0x260>)
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	789b      	ldrb	r3, [r3, #2]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d104      	bne.n	80053cc <updateAlarmState+0x108>
 80053c2:	4b58      	ldr	r3, [pc, #352]	; (8005524 <updateAlarmState+0x260>)
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	223b      	movs	r2, #59	; 0x3b
 80053c8:	709a      	strb	r2, [r3, #2]
				break;
 80053ca:	e03a      	b.n	8005442 <updateAlarmState+0x17e>
				else alarmVars.alarmToSet->sec--;
 80053cc:	4b55      	ldr	r3, [pc, #340]	; (8005524 <updateAlarmState+0x260>)
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	789a      	ldrb	r2, [r3, #2]
 80053d2:	3a01      	subs	r2, #1
 80053d4:	b2d2      	uxtb	r2, r2
 80053d6:	709a      	strb	r2, [r3, #2]
				break;
 80053d8:	e033      	b.n	8005442 <updateAlarmState+0x17e>
				if (alarmVars.alarmToSet->min == 0) alarmVars.alarmToSet->min = 59;
 80053da:	4b52      	ldr	r3, [pc, #328]	; (8005524 <updateAlarmState+0x260>)
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	785b      	ldrb	r3, [r3, #1]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d104      	bne.n	80053ee <updateAlarmState+0x12a>
 80053e4:	4b4f      	ldr	r3, [pc, #316]	; (8005524 <updateAlarmState+0x260>)
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	223b      	movs	r2, #59	; 0x3b
 80053ea:	705a      	strb	r2, [r3, #1]
				break;
 80053ec:	e029      	b.n	8005442 <updateAlarmState+0x17e>
				else alarmVars.alarmToSet->min--;
 80053ee:	4b4d      	ldr	r3, [pc, #308]	; (8005524 <updateAlarmState+0x260>)
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	785a      	ldrb	r2, [r3, #1]
 80053f4:	3a01      	subs	r2, #1
 80053f6:	b2d2      	uxtb	r2, r2
 80053f8:	705a      	strb	r2, [r3, #1]
				break;
 80053fa:	e022      	b.n	8005442 <updateAlarmState+0x17e>
				if (alarmVars.alarmToSet->hr == 0) alarmVars.alarmToSet->hr = 23;
 80053fc:	4b49      	ldr	r3, [pc, #292]	; (8005524 <updateAlarmState+0x260>)
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	781b      	ldrb	r3, [r3, #0]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d104      	bne.n	8005410 <updateAlarmState+0x14c>
 8005406:	4b47      	ldr	r3, [pc, #284]	; (8005524 <updateAlarmState+0x260>)
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	2217      	movs	r2, #23
 800540c:	701a      	strb	r2, [r3, #0]
				break;
 800540e:	e018      	b.n	8005442 <updateAlarmState+0x17e>
				else alarmVars.alarmToSet->hr--;
 8005410:	4b44      	ldr	r3, [pc, #272]	; (8005524 <updateAlarmState+0x260>)
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	781a      	ldrb	r2, [r3, #0]
 8005416:	3a01      	subs	r2, #1
 8005418:	b2d2      	uxtb	r2, r2
 800541a:	701a      	strb	r2, [r3, #0]
				break;
 800541c:	e011      	b.n	8005442 <updateAlarmState+0x17e>
				if (alarmVars.alarmToSet->weekday == RTC_WEEKDAY_MONDAY) alarmVars.alarmToSet->weekday = RTC_WEEKDAY_SUNDAY;
 800541e:	4b41      	ldr	r3, [pc, #260]	; (8005524 <updateAlarmState+0x260>)
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	78db      	ldrb	r3, [r3, #3]
 8005424:	2b01      	cmp	r3, #1
 8005426:	d104      	bne.n	8005432 <updateAlarmState+0x16e>
 8005428:	4b3e      	ldr	r3, [pc, #248]	; (8005524 <updateAlarmState+0x260>)
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	2207      	movs	r2, #7
 800542e:	70da      	strb	r2, [r3, #3]
				break;
 8005430:	e007      	b.n	8005442 <updateAlarmState+0x17e>
				else alarmVars.alarmToSet->weekday--;
 8005432:	4b3c      	ldr	r3, [pc, #240]	; (8005524 <updateAlarmState+0x260>)
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	78da      	ldrb	r2, [r3, #3]
 8005438:	3a01      	subs	r2, #1
 800543a:	b2d2      	uxtb	r2, r2
 800543c:	70da      	strb	r2, [r3, #3]
				break;
 800543e:	e000      	b.n	8005442 <updateAlarmState+0x17e>
		}
	}
 8005440:	46c0      	nop			; (mov r8, r8)
	if (buttons.is4Pressed) {
 8005442:	4b37      	ldr	r3, [pc, #220]	; (8005520 <updateAlarmState+0x25c>)
 8005444:	78db      	ldrb	r3, [r3, #3]
 8005446:	b2db      	uxtb	r3, r3
 8005448:	2b00      	cmp	r3, #0
 800544a:	d065      	beq.n	8005518 <updateAlarmState+0x254>
		buttons.is4Pressed = 0;
 800544c:	4b34      	ldr	r3, [pc, #208]	; (8005520 <updateAlarmState+0x25c>)
 800544e:	2200      	movs	r2, #0
 8005450:	70da      	strb	r2, [r3, #3]
		updateFace.alarm = 1;
 8005452:	4b35      	ldr	r3, [pc, #212]	; (8005528 <updateAlarmState+0x264>)
 8005454:	2201      	movs	r2, #1
 8005456:	709a      	strb	r2, [r3, #2]

		if (alarmVars.isSet == 0) {
 8005458:	4b32      	ldr	r3, [pc, #200]	; (8005524 <updateAlarmState+0x260>)
 800545a:	789b      	ldrb	r3, [r3, #2]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d151      	bne.n	8005504 <updateAlarmState+0x240>
			// toggle between fields
			alarmVars.fieldBeingSet = (alarmVars.fieldBeingSet + 1) % (NUM_ALARMFIELDS + 1);
 8005460:	4b30      	ldr	r3, [pc, #192]	; (8005524 <updateAlarmState+0x260>)
 8005462:	785b      	ldrb	r3, [r3, #1]
 8005464:	3301      	adds	r3, #1
 8005466:	2105      	movs	r1, #5
 8005468:	0018      	movs	r0, r3
 800546a:	f7fa ffc5 	bl	80003f8 <__aeabi_idivmod>
 800546e:	000b      	movs	r3, r1
 8005470:	b2da      	uxtb	r2, r3
 8005472:	4b2c      	ldr	r3, [pc, #176]	; (8005524 <updateAlarmState+0x260>)
 8005474:	705a      	strb	r2, [r3, #1]
			if (alarmVars.fieldBeingSet != 0) {
 8005476:	4b2b      	ldr	r3, [pc, #172]	; (8005524 <updateAlarmState+0x260>)
 8005478:	785b      	ldrb	r3, [r3, #1]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d034      	beq.n	80054e8 <updateAlarmState+0x224>
				alarmVars.isBeingSet = 1;
 800547e:	4b29      	ldr	r3, [pc, #164]	; (8005524 <updateAlarmState+0x260>)
 8005480:	2201      	movs	r2, #1
 8005482:	701a      	strb	r2, [r3, #0]
				if (alarmVars.fieldBeingSet == 1) {
 8005484:	4b27      	ldr	r3, [pc, #156]	; (8005524 <updateAlarmState+0x260>)
 8005486:	785b      	ldrb	r3, [r3, #1]
 8005488:	2b01      	cmp	r3, #1
 800548a:	d145      	bne.n	8005518 <updateAlarmState+0x254>
					struct dates d = {0};
 800548c:	2510      	movs	r5, #16
 800548e:	197b      	adds	r3, r7, r5
 8005490:	0018      	movs	r0, r3
 8005492:	2306      	movs	r3, #6
 8005494:	001a      	movs	r2, r3
 8005496:	2100      	movs	r1, #0
 8005498:	f005 fb8f 	bl	800abba <memset>
					struct times t = {0};
 800549c:	240c      	movs	r4, #12
 800549e:	193b      	adds	r3, r7, r4
 80054a0:	0018      	movs	r0, r3
 80054a2:	2303      	movs	r3, #3
 80054a4:	001a      	movs	r2, r3
 80054a6:	2100      	movs	r1, #0
 80054a8:	f005 fb87 	bl	800abba <memset>
					getDateTime(&d, &t, hrtc);
 80054ac:	687a      	ldr	r2, [r7, #4]
 80054ae:	0021      	movs	r1, r4
 80054b0:	000c      	movs	r4, r1
 80054b2:	1879      	adds	r1, r7, r1
 80054b4:	197b      	adds	r3, r7, r5
 80054b6:	0018      	movs	r0, r3
 80054b8:	f7fd fe24 	bl	8003104 <getDateTime>
					alarmVars.alarmToSet->sec = t.sec;
 80054bc:	4b19      	ldr	r3, [pc, #100]	; (8005524 <updateAlarmState+0x260>)
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	0021      	movs	r1, r4
 80054c2:	187a      	adds	r2, r7, r1
 80054c4:	7892      	ldrb	r2, [r2, #2]
 80054c6:	709a      	strb	r2, [r3, #2]
					alarmVars.alarmToSet->min = t.min;
 80054c8:	4b16      	ldr	r3, [pc, #88]	; (8005524 <updateAlarmState+0x260>)
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	187a      	adds	r2, r7, r1
 80054ce:	7852      	ldrb	r2, [r2, #1]
 80054d0:	705a      	strb	r2, [r3, #1]
					alarmVars.alarmToSet->hr = t.hr;
 80054d2:	4b14      	ldr	r3, [pc, #80]	; (8005524 <updateAlarmState+0x260>)
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	187a      	adds	r2, r7, r1
 80054d8:	7812      	ldrb	r2, [r2, #0]
 80054da:	701a      	strb	r2, [r3, #0]
					alarmVars.alarmToSet->weekday = d.weekday;
 80054dc:	4b11      	ldr	r3, [pc, #68]	; (8005524 <updateAlarmState+0x260>)
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	197a      	adds	r2, r7, r5
 80054e2:	7912      	ldrb	r2, [r2, #4]
 80054e4:	70da      	strb	r2, [r3, #3]
		}
	}
//	if (isAlarmDone) {
//		runMotor(motorTim);
//	}
}
 80054e6:	e017      	b.n	8005518 <updateAlarmState+0x254>
				alarmVars.isBeingSet = 0;
 80054e8:	4b0e      	ldr	r3, [pc, #56]	; (8005524 <updateAlarmState+0x260>)
 80054ea:	2200      	movs	r2, #0
 80054ec:	701a      	strb	r2, [r3, #0]
				alarmVars.isSet = 1;
 80054ee:	4b0d      	ldr	r3, [pc, #52]	; (8005524 <updateAlarmState+0x260>)
 80054f0:	2201      	movs	r2, #1
 80054f2:	709a      	strb	r2, [r3, #2]
				setAlarm(alarmVars.alarmToSet, hrtc);
 80054f4:	4b0b      	ldr	r3, [pc, #44]	; (8005524 <updateAlarmState+0x260>)
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	687a      	ldr	r2, [r7, #4]
 80054fa:	0011      	movs	r1, r2
 80054fc:	0018      	movs	r0, r3
 80054fe:	f7fd fca9 	bl	8002e54 <setAlarm>
}
 8005502:	e009      	b.n	8005518 <updateAlarmState+0x254>
			alarmVars.isSet = 0;
 8005504:	4b07      	ldr	r3, [pc, #28]	; (8005524 <updateAlarmState+0x260>)
 8005506:	2200      	movs	r2, #0
 8005508:	709a      	strb	r2, [r3, #2]
			HAL_RTC_DeactivateAlarm(hrtc, RTC_ALARM_A);
 800550a:	2380      	movs	r3, #128	; 0x80
 800550c:	005a      	lsls	r2, r3, #1
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	0011      	movs	r1, r2
 8005512:	0018      	movs	r0, r3
 8005514:	f003 fd3c 	bl	8008f90 <HAL_RTC_DeactivateAlarm>
}
 8005518:	46c0      	nop			; (mov r8, r8)
 800551a:	46bd      	mov	sp, r7
 800551c:	b006      	add	sp, #24
 800551e:	bdb0      	pop	{r4, r5, r7, pc}
 8005520:	20000190 	.word	0x20000190
 8005524:	20000124 	.word	0x20000124
 8005528:	20000144 	.word	0x20000144

0800552c <updateStopwatchState>:
 * notes:
 *   using lptim now, but might need to change to use other timer as lptim might be used by adc
 *     to take regular measurements of the battery
 *   would just have to modify functions in timers.c
 */
void updateStopwatchState(TIM_HandleTypeDef *timerStopwatchTim) {
 800552c:	b580      	push	{r7, lr}
 800552e:	b082      	sub	sp, #8
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
	if (buttons.is2Pressed) {	// start/stop
 8005534:	4b2d      	ldr	r3, [pc, #180]	; (80055ec <updateStopwatchState+0xc0>)
 8005536:	785b      	ldrb	r3, [r3, #1]
 8005538:	b2db      	uxtb	r3, r3
 800553a:	2b00      	cmp	r3, #0
 800553c:	d01f      	beq.n	800557e <updateStopwatchState+0x52>
		buttons.is2Pressed = 0;
 800553e:	4b2b      	ldr	r3, [pc, #172]	; (80055ec <updateStopwatchState+0xc0>)
 8005540:	2200      	movs	r2, #0
 8005542:	705a      	strb	r2, [r3, #1]
		updateFace.stopwatch = 1;
 8005544:	4b2a      	ldr	r3, [pc, #168]	; (80055f0 <updateStopwatchState+0xc4>)
 8005546:	2201      	movs	r2, #1
 8005548:	70da      	strb	r2, [r3, #3]

		if (isStopwatchRunning == 0) {
 800554a:	4b2a      	ldr	r3, [pc, #168]	; (80055f4 <updateStopwatchState+0xc8>)
 800554c:	781b      	ldrb	r3, [r3, #0]
 800554e:	b2db      	uxtb	r3, r3
 8005550:	2b00      	cmp	r3, #0
 8005552:	d10a      	bne.n	800556a <updateStopwatchState+0x3e>
			runStopwatch(timerStopwatchTim);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	0018      	movs	r0, r3
 8005558:	f7ff f912 	bl	8004780 <runStopwatch>
			isStopwatchRunning = 1;
 800555c:	4b25      	ldr	r3, [pc, #148]	; (80055f4 <updateStopwatchState+0xc8>)
 800555e:	2201      	movs	r2, #1
 8005560:	701a      	strb	r2, [r3, #0]
			isStopwatchPaused = 0;
 8005562:	4b25      	ldr	r3, [pc, #148]	; (80055f8 <updateStopwatchState+0xcc>)
 8005564:	2200      	movs	r2, #0
 8005566:	701a      	strb	r2, [r3, #0]
 8005568:	e009      	b.n	800557e <updateStopwatchState+0x52>
		}
		else {
			pauseStopwatch(timerStopwatchTim);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	0018      	movs	r0, r3
 800556e:	f7ff f96d 	bl	800484c <pauseStopwatch>
			isStopwatchRunning = 0;
 8005572:	4b20      	ldr	r3, [pc, #128]	; (80055f4 <updateStopwatchState+0xc8>)
 8005574:	2200      	movs	r2, #0
 8005576:	701a      	strb	r2, [r3, #0]
			isStopwatchPaused = 1;
 8005578:	4b1f      	ldr	r3, [pc, #124]	; (80055f8 <updateStopwatchState+0xcc>)
 800557a:	2201      	movs	r2, #1
 800557c:	701a      	strb	r2, [r3, #0]
		}
	}
	if (buttons.is3Pressed && stopwatchCounter != 0) {
 800557e:	4b1b      	ldr	r3, [pc, #108]	; (80055ec <updateStopwatchState+0xc0>)
 8005580:	789b      	ldrb	r3, [r3, #2]
 8005582:	b2db      	uxtb	r3, r3
 8005584:	2b00      	cmp	r3, #0
 8005586:	d011      	beq.n	80055ac <updateStopwatchState+0x80>
 8005588:	4b1c      	ldr	r3, [pc, #112]	; (80055fc <updateStopwatchState+0xd0>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d00d      	beq.n	80055ac <updateStopwatchState+0x80>
		buttons.is3Pressed = 0;
 8005590:	4b16      	ldr	r3, [pc, #88]	; (80055ec <updateStopwatchState+0xc0>)
 8005592:	2200      	movs	r2, #0
 8005594:	709a      	strb	r2, [r3, #2]
		updateFace.stopwatch = 1;
 8005596:	4b16      	ldr	r3, [pc, #88]	; (80055f0 <updateStopwatchState+0xc4>)
 8005598:	2201      	movs	r2, #1
 800559a:	70da      	strb	r2, [r3, #3]

		// pull data and set lap
		stopwatchVars.lapPrev = stopwatchVars.lapCurrent;
 800559c:	4b18      	ldr	r3, [pc, #96]	; (8005600 <updateStopwatchState+0xd4>)
 800559e:	685a      	ldr	r2, [r3, #4]
 80055a0:	4b17      	ldr	r3, [pc, #92]	; (8005600 <updateStopwatchState+0xd4>)
 80055a2:	601a      	str	r2, [r3, #0]
		stopwatchVars.lapCurrent = stopwatchCounter;
 80055a4:	4b15      	ldr	r3, [pc, #84]	; (80055fc <updateStopwatchState+0xd0>)
 80055a6:	681a      	ldr	r2, [r3, #0]
 80055a8:	4b15      	ldr	r3, [pc, #84]	; (8005600 <updateStopwatchState+0xd4>)
 80055aa:	605a      	str	r2, [r3, #4]
	}
	if (buttons.is4Pressed) {
 80055ac:	4b0f      	ldr	r3, [pc, #60]	; (80055ec <updateStopwatchState+0xc0>)
 80055ae:	78db      	ldrb	r3, [r3, #3]
 80055b0:	b2db      	uxtb	r3, r3
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d015      	beq.n	80055e2 <updateStopwatchState+0xb6>
		buttons.is4Pressed = 0;
 80055b6:	4b0d      	ldr	r3, [pc, #52]	; (80055ec <updateStopwatchState+0xc0>)
 80055b8:	2200      	movs	r2, #0
 80055ba:	70da      	strb	r2, [r3, #3]
		updateFace.stopwatch = 1;
 80055bc:	4b0c      	ldr	r3, [pc, #48]	; (80055f0 <updateStopwatchState+0xc4>)
 80055be:	2201      	movs	r2, #1
 80055c0:	70da      	strb	r2, [r3, #3]

		// clear stopwatch hw
		clearStopwatch(timerStopwatchTim);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	0018      	movs	r0, r3
 80055c6:	f7ff f955 	bl	8004874 <clearStopwatch>
		stopwatchVars.lapCurrent = 0;
 80055ca:	4b0d      	ldr	r3, [pc, #52]	; (8005600 <updateStopwatchState+0xd4>)
 80055cc:	2200      	movs	r2, #0
 80055ce:	605a      	str	r2, [r3, #4]
		stopwatchVars.lapPrev = 0;
 80055d0:	4b0b      	ldr	r3, [pc, #44]	; (8005600 <updateStopwatchState+0xd4>)
 80055d2:	2200      	movs	r2, #0
 80055d4:	601a      	str	r2, [r3, #0]
		isStopwatchRunning = 0;
 80055d6:	4b07      	ldr	r3, [pc, #28]	; (80055f4 <updateStopwatchState+0xc8>)
 80055d8:	2200      	movs	r2, #0
 80055da:	701a      	strb	r2, [r3, #0]
		isStopwatchPaused = 0;
 80055dc:	4b06      	ldr	r3, [pc, #24]	; (80055f8 <updateStopwatchState+0xcc>)
 80055de:	2200      	movs	r2, #0
 80055e0:	701a      	strb	r2, [r3, #0]
	}
}
 80055e2:	46c0      	nop			; (mov r8, r8)
 80055e4:	46bd      	mov	sp, r7
 80055e6:	b002      	add	sp, #8
 80055e8:	bd80      	pop	{r7, pc}
 80055ea:	46c0      	nop			; (mov r8, r8)
 80055ec:	20000190 	.word	0x20000190
 80055f0:	20000144 	.word	0x20000144
 80055f4:	20000148 	.word	0x20000148
 80055f8:	20000195 	.word	0x20000195
 80055fc:	20000198 	.word	0x20000198
 8005600:	2000012c 	.word	0x2000012c

08005604 <updateDisplay>:

// update screen based on global variables
// going in main, so it's executing in a while loop
//   software interrupt on flag so that this doesn't run all the time?
void updateDisplay(RTC_HandleTypeDef *hrtc, SPI_HandleTypeDef *hspi) {
 8005604:	b580      	push	{r7, lr}
 8005606:	b082      	sub	sp, #8
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
 800560c:	6039      	str	r1, [r7, #0]
	// change faces
	if (isFaceBeingChanged == 1) {
 800560e:	4b56      	ldr	r3, [pc, #344]	; (8005768 <updateDisplay+0x164>)
 8005610:	781b      	ldrb	r3, [r3, #0]
 8005612:	2b01      	cmp	r3, #1
 8005614:	d14e      	bne.n	80056b4 <updateDisplay+0xb0>
		isFaceBeingChanged = 0;
 8005616:	4b54      	ldr	r3, [pc, #336]	; (8005768 <updateDisplay+0x164>)
 8005618:	2200      	movs	r2, #0
 800561a:	701a      	strb	r2, [r3, #0]

		// drawing titles and boxes that won't be rewritten during normal operation within
		// a specific face (titles and buttons)
		if (faceOnDisplay == faceClock) {
 800561c:	4b53      	ldr	r3, [pc, #332]	; (800576c <updateDisplay+0x168>)
 800561e:	781b      	ldrb	r3, [r3, #0]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d10b      	bne.n	800563c <updateDisplay+0x38>
			clearScreen(ST77XX_CYAN, hspi);
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	4a52      	ldr	r2, [pc, #328]	; (8005770 <updateDisplay+0x16c>)
 8005628:	0019      	movs	r1, r3
 800562a:	0010      	movs	r0, r2
 800562c:	f7fd fa68 	bl	8002b00 <clearScreen>
			drawTitle("clock", hspi);
 8005630:	683a      	ldr	r2, [r7, #0]
 8005632:	4b50      	ldr	r3, [pc, #320]	; (8005774 <updateDisplay+0x170>)
 8005634:	0011      	movs	r1, r2
 8005636:	0018      	movs	r0, r3
 8005638:	f000 fbea 	bl	8005e10 <drawTitle>
		}
		if (faceOnDisplay == faceTimer) {
 800563c:	4b4b      	ldr	r3, [pc, #300]	; (800576c <updateDisplay+0x168>)
 800563e:	781b      	ldrb	r3, [r3, #0]
 8005640:	2b01      	cmp	r3, #1
 8005642:	d10c      	bne.n	800565e <updateDisplay+0x5a>
			clearScreen(ST77XX_GREEN, hspi);
 8005644:	683a      	ldr	r2, [r7, #0]
 8005646:	23fc      	movs	r3, #252	; 0xfc
 8005648:	00db      	lsls	r3, r3, #3
 800564a:	0011      	movs	r1, r2
 800564c:	0018      	movs	r0, r3
 800564e:	f7fd fa57 	bl	8002b00 <clearScreen>
			drawTitle("timer", hspi);
 8005652:	683a      	ldr	r2, [r7, #0]
 8005654:	4b48      	ldr	r3, [pc, #288]	; (8005778 <updateDisplay+0x174>)
 8005656:	0011      	movs	r1, r2
 8005658:	0018      	movs	r0, r3
 800565a:	f000 fbd9 	bl	8005e10 <drawTitle>
		}
		if (faceOnDisplay == faceAlarm) {
 800565e:	4b43      	ldr	r3, [pc, #268]	; (800576c <updateDisplay+0x168>)
 8005660:	781b      	ldrb	r3, [r3, #0]
 8005662:	2b02      	cmp	r3, #2
 8005664:	d10b      	bne.n	800567e <updateDisplay+0x7a>
			clearScreen(ST77XX_MAGENTA, hspi);
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	4a44      	ldr	r2, [pc, #272]	; (800577c <updateDisplay+0x178>)
 800566a:	0019      	movs	r1, r3
 800566c:	0010      	movs	r0, r2
 800566e:	f7fd fa47 	bl	8002b00 <clearScreen>
			drawTitle("alarm", hspi);
 8005672:	683a      	ldr	r2, [r7, #0]
 8005674:	4b42      	ldr	r3, [pc, #264]	; (8005780 <updateDisplay+0x17c>)
 8005676:	0011      	movs	r1, r2
 8005678:	0018      	movs	r0, r3
 800567a:	f000 fbc9 	bl	8005e10 <drawTitle>
		}
		if (faceOnDisplay == faceStopwatch) {
 800567e:	4b3b      	ldr	r3, [pc, #236]	; (800576c <updateDisplay+0x168>)
 8005680:	781b      	ldrb	r3, [r3, #0]
 8005682:	2b03      	cmp	r3, #3
 8005684:	d10b      	bne.n	800569e <updateDisplay+0x9a>
			clearScreen(ST77XX_YELLOW, hspi);
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	4a3e      	ldr	r2, [pc, #248]	; (8005784 <updateDisplay+0x180>)
 800568a:	0019      	movs	r1, r3
 800568c:	0010      	movs	r0, r2
 800568e:	f7fd fa37 	bl	8002b00 <clearScreen>
			drawTitle("stopwatch", hspi);
 8005692:	683a      	ldr	r2, [r7, #0]
 8005694:	4b3c      	ldr	r3, [pc, #240]	; (8005788 <updateDisplay+0x184>)
 8005696:	0011      	movs	r1, r2
 8005698:	0018      	movs	r0, r3
 800569a:	f000 fbb9 	bl	8005e10 <drawTitle>
		}

		drawBattery(battPercentage, hspi);
 800569e:	4b3b      	ldr	r3, [pc, #236]	; (800578c <updateDisplay+0x188>)
 80056a0:	781b      	ldrb	r3, [r3, #0]
 80056a2:	683a      	ldr	r2, [r7, #0]
 80056a4:	0011      	movs	r1, r2
 80056a6:	0018      	movs	r0, r3
 80056a8:	f000 fc26 	bl	8005ef8 <drawBattery>
		drawButtons(hspi);
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	0018      	movs	r0, r3
 80056b0:	f000 fb68 	bl	8005d84 <drawButtons>
	}

	// update clock face
	if (faceOnDisplay == faceClock) {
 80056b4:	4b2d      	ldr	r3, [pc, #180]	; (800576c <updateDisplay+0x168>)
 80056b6:	781b      	ldrb	r3, [r3, #0]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d112      	bne.n	80056e2 <updateDisplay+0xde>
		if (updateFace.clock == 1) {
 80056bc:	4b34      	ldr	r3, [pc, #208]	; (8005790 <updateDisplay+0x18c>)
 80056be:	781b      	ldrb	r3, [r3, #0]
 80056c0:	b2db      	uxtb	r3, r3
 80056c2:	2b01      	cmp	r3, #1
 80056c4:	d14c      	bne.n	8005760 <updateDisplay+0x15c>
			updateFace.clock = 0;
 80056c6:	4b32      	ldr	r3, [pc, #200]	; (8005790 <updateDisplay+0x18c>)
 80056c8:	2200      	movs	r2, #0
 80056ca:	701a      	strb	r2, [r3, #0]
			setBackgroundColor(ST77XX_CYAN);
 80056cc:	4b28      	ldr	r3, [pc, #160]	; (8005770 <updateDisplay+0x16c>)
 80056ce:	0018      	movs	r0, r3
 80056d0:	f7fd f9cc 	bl	8002a6c <setBackgroundColor>
			updateClockDisplay(hrtc, hspi);
 80056d4:	683a      	ldr	r2, [r7, #0]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	0011      	movs	r1, r2
 80056da:	0018      	movs	r0, r3
 80056dc:	f000 f85a 	bl	8005794 <updateClockDisplay>
		}
	}

	// is called a lot and redrawn every time. inefficient, but w/e
//	drawBattery(battPercentage, hspi);
}
 80056e0:	e03e      	b.n	8005760 <updateDisplay+0x15c>
	else if (faceOnDisplay == faceTimer) {
 80056e2:	4b22      	ldr	r3, [pc, #136]	; (800576c <updateDisplay+0x168>)
 80056e4:	781b      	ldrb	r3, [r3, #0]
 80056e6:	2b01      	cmp	r3, #1
 80056e8:	d111      	bne.n	800570e <updateDisplay+0x10a>
		if (updateFace.timer == 1) {
 80056ea:	4b29      	ldr	r3, [pc, #164]	; (8005790 <updateDisplay+0x18c>)
 80056ec:	785b      	ldrb	r3, [r3, #1]
 80056ee:	b2db      	uxtb	r3, r3
 80056f0:	2b01      	cmp	r3, #1
 80056f2:	d135      	bne.n	8005760 <updateDisplay+0x15c>
			updateFace.timer = 0;
 80056f4:	4b26      	ldr	r3, [pc, #152]	; (8005790 <updateDisplay+0x18c>)
 80056f6:	2200      	movs	r2, #0
 80056f8:	705a      	strb	r2, [r3, #1]
			setBackgroundColor(ST77XX_GREEN);
 80056fa:	23fc      	movs	r3, #252	; 0xfc
 80056fc:	00db      	lsls	r3, r3, #3
 80056fe:	0018      	movs	r0, r3
 8005700:	f7fd f9b4 	bl	8002a6c <setBackgroundColor>
			updateTimerDisplay(hspi);
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	0018      	movs	r0, r3
 8005708:	f000 f8ee 	bl	80058e8 <updateTimerDisplay>
}
 800570c:	e028      	b.n	8005760 <updateDisplay+0x15c>
	else if (faceOnDisplay == faceAlarm) {
 800570e:	4b17      	ldr	r3, [pc, #92]	; (800576c <updateDisplay+0x168>)
 8005710:	781b      	ldrb	r3, [r3, #0]
 8005712:	2b02      	cmp	r3, #2
 8005714:	d110      	bne.n	8005738 <updateDisplay+0x134>
		if (updateFace.alarm == 1) {
 8005716:	4b1e      	ldr	r3, [pc, #120]	; (8005790 <updateDisplay+0x18c>)
 8005718:	789b      	ldrb	r3, [r3, #2]
 800571a:	b2db      	uxtb	r3, r3
 800571c:	2b01      	cmp	r3, #1
 800571e:	d11f      	bne.n	8005760 <updateDisplay+0x15c>
			updateFace.alarm = 0;
 8005720:	4b1b      	ldr	r3, [pc, #108]	; (8005790 <updateDisplay+0x18c>)
 8005722:	2200      	movs	r2, #0
 8005724:	709a      	strb	r2, [r3, #2]
			setBackgroundColor(ST77XX_MAGENTA);
 8005726:	4b15      	ldr	r3, [pc, #84]	; (800577c <updateDisplay+0x178>)
 8005728:	0018      	movs	r0, r3
 800572a:	f7fd f99f 	bl	8002a6c <setBackgroundColor>
			updateAlarmDisplay(hspi);
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	0018      	movs	r0, r3
 8005732:	f000 f9d9 	bl	8005ae8 <updateAlarmDisplay>
}
 8005736:	e013      	b.n	8005760 <updateDisplay+0x15c>
	else if (faceOnDisplay == faceStopwatch) {
 8005738:	4b0c      	ldr	r3, [pc, #48]	; (800576c <updateDisplay+0x168>)
 800573a:	781b      	ldrb	r3, [r3, #0]
 800573c:	2b03      	cmp	r3, #3
 800573e:	d10f      	bne.n	8005760 <updateDisplay+0x15c>
		if (updateFace.stopwatch == 1) {
 8005740:	4b13      	ldr	r3, [pc, #76]	; (8005790 <updateDisplay+0x18c>)
 8005742:	78db      	ldrb	r3, [r3, #3]
 8005744:	b2db      	uxtb	r3, r3
 8005746:	2b01      	cmp	r3, #1
 8005748:	d10a      	bne.n	8005760 <updateDisplay+0x15c>
			updateFace.stopwatch = 0;
 800574a:	4b11      	ldr	r3, [pc, #68]	; (8005790 <updateDisplay+0x18c>)
 800574c:	2200      	movs	r2, #0
 800574e:	70da      	strb	r2, [r3, #3]
			setBackgroundColor(ST77XX_YELLOW);
 8005750:	4b0c      	ldr	r3, [pc, #48]	; (8005784 <updateDisplay+0x180>)
 8005752:	0018      	movs	r0, r3
 8005754:	f7fd f98a 	bl	8002a6c <setBackgroundColor>
			updateStopwatchDisplay(hspi);
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	0018      	movs	r0, r3
 800575c:	f000 fa8a 	bl	8005c74 <updateStopwatchDisplay>
}
 8005760:	46c0      	nop			; (mov r8, r8)
 8005762:	46bd      	mov	sp, r7
 8005764:	b002      	add	sp, #8
 8005766:	bd80      	pop	{r7, pc}
 8005768:	20000068 	.word	0x20000068
 800576c:	20000134 	.word	0x20000134
 8005770:	000007ff 	.word	0x000007ff
 8005774:	0800b4ec 	.word	0x0800b4ec
 8005778:	0800b4f4 	.word	0x0800b4f4
 800577c:	0000f81f 	.word	0x0000f81f
 8005780:	0800b4fc 	.word	0x0800b4fc
 8005784:	0000ffe0 	.word	0x0000ffe0
 8005788:	0800b504 	.word	0x0800b504
 800578c:	20000140 	.word	0x20000140
 8005790:	20000144 	.word	0x20000144

08005794 <updateClockDisplay>:

void updateClockDisplay(RTC_HandleTypeDef *hrtc, SPI_HandleTypeDef *hspi) {
 8005794:	b5b0      	push	{r4, r5, r7, lr}
 8005796:	b088      	sub	sp, #32
 8005798:	af02      	add	r7, sp, #8
 800579a:	6078      	str	r0, [r7, #4]
 800579c:	6039      	str	r1, [r7, #0]
	struct dates currentDate = {0};
 800579e:	2310      	movs	r3, #16
 80057a0:	18fb      	adds	r3, r7, r3
 80057a2:	0018      	movs	r0, r3
 80057a4:	2306      	movs	r3, #6
 80057a6:	001a      	movs	r2, r3
 80057a8:	2100      	movs	r1, #0
 80057aa:	f005 fa06 	bl	800abba <memset>
	struct times currentTime = {0};
 80057ae:	230c      	movs	r3, #12
 80057b0:	18fb      	adds	r3, r7, r3
 80057b2:	0018      	movs	r0, r3
 80057b4:	2303      	movs	r3, #3
 80057b6:	001a      	movs	r2, r3
 80057b8:	2100      	movs	r1, #0
 80057ba:	f005 f9fe 	bl	800abba <memset>

	setTextColor(ST77XX_BLACK);
 80057be:	2000      	movs	r0, #0
 80057c0:	f7fd f98e 	bl	8002ae0 <setTextColor>
	if (clockVars.isBeingSet == 0) {
 80057c4:	4b3c      	ldr	r3, [pc, #240]	; (80058b8 <updateClockDisplay+0x124>)
 80057c6:	781b      	ldrb	r3, [r3, #0]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d11c      	bne.n	8005806 <updateClockDisplay+0x72>
		getDateTime(&currentDate, &currentTime, hrtc);
 80057cc:	687a      	ldr	r2, [r7, #4]
 80057ce:	240c      	movs	r4, #12
 80057d0:	1939      	adds	r1, r7, r4
 80057d2:	2510      	movs	r5, #16
 80057d4:	197b      	adds	r3, r7, r5
 80057d6:	0018      	movs	r0, r3
 80057d8:	f7fd fc94 	bl	8003104 <getDateTime>
		drawClock(&currentDate, &currentTime, hspi);
 80057dc:	683a      	ldr	r2, [r7, #0]
 80057de:	1939      	adds	r1, r7, r4
 80057e0:	197b      	adds	r3, r7, r5
 80057e2:	0018      	movs	r0, r3
 80057e4:	f000 fc22 	bl	800602c <drawClock>

		setTextSize(1);
 80057e8:	2001      	movs	r0, #1
 80057ea:	f7fd f969 	bl	8002ac0 <setTextSize>
		// clear line that says "setting ___"
		clearTextLine(44, hspi);
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	0019      	movs	r1, r3
 80057f2:	202c      	movs	r0, #44	; 0x2c
 80057f4:	f7fc fd4c 	bl	8002290 <clearTextLine>

		// draw button text
		drawButtonText("", "", "set", hspi);
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	4a30      	ldr	r2, [pc, #192]	; (80058bc <updateClockDisplay+0x128>)
 80057fc:	4930      	ldr	r1, [pc, #192]	; (80058c0 <updateClockDisplay+0x12c>)
 80057fe:	4830      	ldr	r0, [pc, #192]	; (80058c0 <updateClockDisplay+0x12c>)
 8005800:	f000 fada 	bl	8005db8 <drawButtonText>
			default: break;
		}

		drawClock(clockVars.dateToSet, clockVars.timeToSet, hspi);
	}
}
 8005804:	e054      	b.n	80058b0 <updateClockDisplay+0x11c>
	else if (clockVars.isBeingSet == 1) {
 8005806:	4b2c      	ldr	r3, [pc, #176]	; (80058b8 <updateClockDisplay+0x124>)
 8005808:	781b      	ldrb	r3, [r3, #0]
 800580a:	2b01      	cmp	r3, #1
 800580c:	d150      	bne.n	80058b0 <updateClockDisplay+0x11c>
		if (clockVars.fieldBeingSet == 1) drawButtonText("up", "down", "change", hspi);
 800580e:	4b2a      	ldr	r3, [pc, #168]	; (80058b8 <updateClockDisplay+0x124>)
 8005810:	785b      	ldrb	r3, [r3, #1]
 8005812:	2b01      	cmp	r3, #1
 8005814:	d105      	bne.n	8005822 <updateClockDisplay+0x8e>
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	4a2a      	ldr	r2, [pc, #168]	; (80058c4 <updateClockDisplay+0x130>)
 800581a:	492b      	ldr	r1, [pc, #172]	; (80058c8 <updateClockDisplay+0x134>)
 800581c:	482b      	ldr	r0, [pc, #172]	; (80058cc <updateClockDisplay+0x138>)
 800581e:	f000 facb 	bl	8005db8 <drawButtonText>
		setTextSize(1);
 8005822:	2001      	movs	r0, #1
 8005824:	f7fd f94c 	bl	8002ac0 <setTextSize>
		switch (clockVars.fieldBeingSet) {
 8005828:	4b23      	ldr	r3, [pc, #140]	; (80058b8 <updateClockDisplay+0x124>)
 800582a:	785b      	ldrb	r3, [r3, #1]
 800582c:	2b05      	cmp	r3, #5
 800582e:	d836      	bhi.n	800589e <updateClockDisplay+0x10a>
 8005830:	009a      	lsls	r2, r3, #2
 8005832:	4b27      	ldr	r3, [pc, #156]	; (80058d0 <updateClockDisplay+0x13c>)
 8005834:	18d3      	adds	r3, r2, r3
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	469f      	mov	pc, r3
			case 1:	drawCenteredTextWithPadding(WIDTH/2, 44, 17, "setting minute...", hspi); break;
 800583a:	4a26      	ldr	r2, [pc, #152]	; (80058d4 <updateClockDisplay+0x140>)
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	9300      	str	r3, [sp, #0]
 8005840:	0013      	movs	r3, r2
 8005842:	2211      	movs	r2, #17
 8005844:	212c      	movs	r1, #44	; 0x2c
 8005846:	2040      	movs	r0, #64	; 0x40
 8005848:	f7fc fc4a 	bl	80020e0 <drawCenteredTextWithPadding>
 800584c:	e028      	b.n	80058a0 <updateClockDisplay+0x10c>
			case 2:	drawCenteredTextWithPadding(WIDTH/2, 44, 17, "setting hour...", hspi);	break;
 800584e:	4a22      	ldr	r2, [pc, #136]	; (80058d8 <updateClockDisplay+0x144>)
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	9300      	str	r3, [sp, #0]
 8005854:	0013      	movs	r3, r2
 8005856:	2211      	movs	r2, #17
 8005858:	212c      	movs	r1, #44	; 0x2c
 800585a:	2040      	movs	r0, #64	; 0x40
 800585c:	f7fc fc40 	bl	80020e0 <drawCenteredTextWithPadding>
 8005860:	e01e      	b.n	80058a0 <updateClockDisplay+0x10c>
			case 3: drawCenteredTextWithPadding(WIDTH/2, 44, 17, "setting year...", hspi); break;
 8005862:	4a1e      	ldr	r2, [pc, #120]	; (80058dc <updateClockDisplay+0x148>)
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	9300      	str	r3, [sp, #0]
 8005868:	0013      	movs	r3, r2
 800586a:	2211      	movs	r2, #17
 800586c:	212c      	movs	r1, #44	; 0x2c
 800586e:	2040      	movs	r0, #64	; 0x40
 8005870:	f7fc fc36 	bl	80020e0 <drawCenteredTextWithPadding>
 8005874:	e014      	b.n	80058a0 <updateClockDisplay+0x10c>
			case 4: drawCenteredTextWithPadding(WIDTH/2, 44, 17, "setting month...", hspi); break;
 8005876:	4a1a      	ldr	r2, [pc, #104]	; (80058e0 <updateClockDisplay+0x14c>)
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	9300      	str	r3, [sp, #0]
 800587c:	0013      	movs	r3, r2
 800587e:	2211      	movs	r2, #17
 8005880:	212c      	movs	r1, #44	; 0x2c
 8005882:	2040      	movs	r0, #64	; 0x40
 8005884:	f7fc fc2c 	bl	80020e0 <drawCenteredTextWithPadding>
 8005888:	e00a      	b.n	80058a0 <updateClockDisplay+0x10c>
			case 5: drawCenteredTextWithPadding(WIDTH/2, 44, 17, "setting date...", hspi); break;
 800588a:	4a16      	ldr	r2, [pc, #88]	; (80058e4 <updateClockDisplay+0x150>)
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	9300      	str	r3, [sp, #0]
 8005890:	0013      	movs	r3, r2
 8005892:	2211      	movs	r2, #17
 8005894:	212c      	movs	r1, #44	; 0x2c
 8005896:	2040      	movs	r0, #64	; 0x40
 8005898:	f7fc fc22 	bl	80020e0 <drawCenteredTextWithPadding>
 800589c:	e000      	b.n	80058a0 <updateClockDisplay+0x10c>
			default: break;
 800589e:	46c0      	nop			; (mov r8, r8)
		drawClock(clockVars.dateToSet, clockVars.timeToSet, hspi);
 80058a0:	4b05      	ldr	r3, [pc, #20]	; (80058b8 <updateClockDisplay+0x124>)
 80058a2:	6858      	ldr	r0, [r3, #4]
 80058a4:	4b04      	ldr	r3, [pc, #16]	; (80058b8 <updateClockDisplay+0x124>)
 80058a6:	689b      	ldr	r3, [r3, #8]
 80058a8:	683a      	ldr	r2, [r7, #0]
 80058aa:	0019      	movs	r1, r3
 80058ac:	f000 fbbe 	bl	800602c <drawClock>
}
 80058b0:	46c0      	nop			; (mov r8, r8)
 80058b2:	46bd      	mov	sp, r7
 80058b4:	b006      	add	sp, #24
 80058b6:	bdb0      	pop	{r4, r5, r7, pc}
 80058b8:	20000110 	.word	0x20000110
 80058bc:	0800b510 	.word	0x0800b510
 80058c0:	0800b470 	.word	0x0800b470
 80058c4:	0800b514 	.word	0x0800b514
 80058c8:	0800b51c 	.word	0x0800b51c
 80058cc:	0800b524 	.word	0x0800b524
 80058d0:	0800bf50 	.word	0x0800bf50
 80058d4:	0800b528 	.word	0x0800b528
 80058d8:	0800b53c 	.word	0x0800b53c
 80058dc:	0800b54c 	.word	0x0800b54c
 80058e0:	0800b55c 	.word	0x0800b55c
 80058e4:	0800b570 	.word	0x0800b570

080058e8 <updateTimerDisplay>:

void updateTimerDisplay(SPI_HandleTypeDef *hspi) {
 80058e8:	b590      	push	{r4, r7, lr}
 80058ea:	b087      	sub	sp, #28
 80058ec:	af02      	add	r7, sp, #8
 80058ee:	6078      	str	r0, [r7, #4]
	struct times currentTimer = {0};
 80058f0:	230c      	movs	r3, #12
 80058f2:	18fb      	adds	r3, r7, r3
 80058f4:	0018      	movs	r0, r3
 80058f6:	2303      	movs	r3, #3
 80058f8:	001a      	movs	r2, r3
 80058fa:	2100      	movs	r1, #0
 80058fc:	f005 f95d 	bl	800abba <memset>

	setTextColor(ST77XX_BLACK);
 8005900:	2000      	movs	r0, #0
 8005902:	f7fd f8ed 	bl	8002ae0 <setTextColor>
	if (timerVars.isBeingSet == 0) {
 8005906:	4b64      	ldr	r3, [pc, #400]	; (8005a98 <updateTimerDisplay+0x1b0>)
 8005908:	781b      	ldrb	r3, [r3, #0]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d000      	beq.n	8005910 <updateTimerDisplay+0x28>
 800590e:	e087      	b.n	8005a20 <updateTimerDisplay+0x138>
		if (timerVars.isSet == 0) {
 8005910:	4b61      	ldr	r3, [pc, #388]	; (8005a98 <updateTimerDisplay+0x1b0>)
 8005912:	789b      	ldrb	r3, [r3, #2]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d11f      	bne.n	8005958 <updateTimerDisplay+0x70>
			setTextSize(2);
 8005918:	2002      	movs	r0, #2
 800591a:	f7fd f8d1 	bl	8002ac0 <setTextSize>
			clearTextLine(68, hspi);	// clear timer time text
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	0019      	movs	r1, r3
 8005922:	2044      	movs	r0, #68	; 0x44
 8005924:	f7fc fcb4 	bl	8002290 <clearTextLine>

			// write "timer unset"
			setTextSize(1);
 8005928:	2001      	movs	r0, #1
 800592a:	f7fd f8c9 	bl	8002ac0 <setTextSize>
			clearTextLine(52, hspi);	// clear setting ___ text
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	0019      	movs	r1, r3
 8005932:	2034      	movs	r0, #52	; 0x34
 8005934:	f7fc fcac 	bl	8002290 <clearTextLine>
			drawCenteredTextWithPadding(WIDTH/2, 84, 12, "timer unset", hspi);
 8005938:	4a58      	ldr	r2, [pc, #352]	; (8005a9c <updateTimerDisplay+0x1b4>)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	9300      	str	r3, [sp, #0]
 800593e:	0013      	movs	r3, r2
 8005940:	220c      	movs	r2, #12
 8005942:	2154      	movs	r1, #84	; 0x54
 8005944:	2040      	movs	r0, #64	; 0x40
 8005946:	f7fc fbcb 	bl	80020e0 <drawCenteredTextWithPadding>

			// draw button text
			drawButtonText("", "", "set", hspi);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	4a54      	ldr	r2, [pc, #336]	; (8005aa0 <updateTimerDisplay+0x1b8>)
 800594e:	4955      	ldr	r1, [pc, #340]	; (8005aa4 <updateTimerDisplay+0x1bc>)
 8005950:	4854      	ldr	r0, [pc, #336]	; (8005aa4 <updateTimerDisplay+0x1bc>)
 8005952:	f000 fa31 	bl	8005db8 <drawButtonText>
			default: break;
		}

		drawTimer(timerVars.timeToSet, hspi);
	}
}
 8005956:	e09b      	b.n	8005a90 <updateTimerDisplay+0x1a8>
		else if (isTimerDone == 0) {
 8005958:	4b53      	ldr	r3, [pc, #332]	; (8005aa8 <updateTimerDisplay+0x1c0>)
 800595a:	781b      	ldrb	r3, [r3, #0]
 800595c:	b2db      	uxtb	r3, r3
 800595e:	2b00      	cmp	r3, #0
 8005960:	d143      	bne.n	80059ea <updateTimerDisplay+0x102>
			secondsToTime(&currentTimer, timerCounter);
 8005962:	4b52      	ldr	r3, [pc, #328]	; (8005aac <updateTimerDisplay+0x1c4>)
 8005964:	681a      	ldr	r2, [r3, #0]
 8005966:	240c      	movs	r4, #12
 8005968:	193b      	adds	r3, r7, r4
 800596a:	0011      	movs	r1, r2
 800596c:	0018      	movs	r0, r3
 800596e:	f7fd fc94 	bl	800329a <secondsToTime>
			drawTimer(&currentTimer, hspi);
 8005972:	687a      	ldr	r2, [r7, #4]
 8005974:	193b      	adds	r3, r7, r4
 8005976:	0011      	movs	r1, r2
 8005978:	0018      	movs	r0, r3
 800597a:	f000 fbf1 	bl	8006160 <drawTimer>
			setTextSize(1);
 800597e:	2001      	movs	r0, #1
 8005980:	f7fd f89e 	bl	8002ac0 <setTextSize>
			clearTextLine(52, hspi);	// clear setting ___ text
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	0019      	movs	r1, r3
 8005988:	2034      	movs	r0, #52	; 0x34
 800598a:	f7fc fc81 	bl	8002290 <clearTextLine>
			if (isTimerPaused == 1) {
 800598e:	4b48      	ldr	r3, [pc, #288]	; (8005ab0 <updateTimerDisplay+0x1c8>)
 8005990:	781b      	ldrb	r3, [r3, #0]
 8005992:	b2db      	uxtb	r3, r3
 8005994:	2b01      	cmp	r3, #1
 8005996:	d109      	bne.n	80059ac <updateTimerDisplay+0xc4>
				drawCenteredTextWithPadding(WIDTH/2, 84, 12, "timer paused", hspi);
 8005998:	4a46      	ldr	r2, [pc, #280]	; (8005ab4 <updateTimerDisplay+0x1cc>)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	9300      	str	r3, [sp, #0]
 800599e:	0013      	movs	r3, r2
 80059a0:	220c      	movs	r2, #12
 80059a2:	2154      	movs	r1, #84	; 0x54
 80059a4:	2040      	movs	r0, #64	; 0x40
 80059a6:	f7fc fb9b 	bl	80020e0 <drawCenteredTextWithPadding>
 80059aa:	e017      	b.n	80059dc <updateTimerDisplay+0xf4>
			else if (isTimerRunning == 0 && timerCounter != 0) {
 80059ac:	4b42      	ldr	r3, [pc, #264]	; (8005ab8 <updateTimerDisplay+0x1d0>)
 80059ae:	781b      	ldrb	r3, [r3, #0]
 80059b0:	b2db      	uxtb	r3, r3
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d10d      	bne.n	80059d2 <updateTimerDisplay+0xea>
 80059b6:	4b3d      	ldr	r3, [pc, #244]	; (8005aac <updateTimerDisplay+0x1c4>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d009      	beq.n	80059d2 <updateTimerDisplay+0xea>
				drawCenteredTextWithPadding(WIDTH/2, 84, 12, "timer set!", hspi);
 80059be:	4a3f      	ldr	r2, [pc, #252]	; (8005abc <updateTimerDisplay+0x1d4>)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	9300      	str	r3, [sp, #0]
 80059c4:	0013      	movs	r3, r2
 80059c6:	220c      	movs	r2, #12
 80059c8:	2154      	movs	r1, #84	; 0x54
 80059ca:	2040      	movs	r0, #64	; 0x40
 80059cc:	f7fc fb88 	bl	80020e0 <drawCenteredTextWithPadding>
 80059d0:	e004      	b.n	80059dc <updateTimerDisplay+0xf4>
				clearTextLine(84, hspi);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	0019      	movs	r1, r3
 80059d6:	2054      	movs	r0, #84	; 0x54
 80059d8:	f7fc fc5a 	bl	8002290 <clearTextLine>
			drawButtonText("run", "pause", "clear", hspi);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	4a38      	ldr	r2, [pc, #224]	; (8005ac0 <updateTimerDisplay+0x1d8>)
 80059e0:	4938      	ldr	r1, [pc, #224]	; (8005ac4 <updateTimerDisplay+0x1dc>)
 80059e2:	4839      	ldr	r0, [pc, #228]	; (8005ac8 <updateTimerDisplay+0x1e0>)
 80059e4:	f000 f9e8 	bl	8005db8 <drawButtonText>
}
 80059e8:	e052      	b.n	8005a90 <updateTimerDisplay+0x1a8>
			secondsToTime(&currentTimer, timerCounter);
 80059ea:	4b30      	ldr	r3, [pc, #192]	; (8005aac <updateTimerDisplay+0x1c4>)
 80059ec:	681a      	ldr	r2, [r3, #0]
 80059ee:	240c      	movs	r4, #12
 80059f0:	193b      	adds	r3, r7, r4
 80059f2:	0011      	movs	r1, r2
 80059f4:	0018      	movs	r0, r3
 80059f6:	f7fd fc50 	bl	800329a <secondsToTime>
			drawTimer(&currentTimer, hspi);
 80059fa:	687a      	ldr	r2, [r7, #4]
 80059fc:	193b      	adds	r3, r7, r4
 80059fe:	0011      	movs	r1, r2
 8005a00:	0018      	movs	r0, r3
 8005a02:	f000 fbad 	bl	8006160 <drawTimer>
			setTextSize(1);
 8005a06:	2001      	movs	r0, #1
 8005a08:	f7fd f85a 	bl	8002ac0 <setTextSize>
			drawCenteredTextWithPadding(WIDTH/2, 84, 12, "timer done!", hspi);
 8005a0c:	4a2f      	ldr	r2, [pc, #188]	; (8005acc <updateTimerDisplay+0x1e4>)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	9300      	str	r3, [sp, #0]
 8005a12:	0013      	movs	r3, r2
 8005a14:	220c      	movs	r2, #12
 8005a16:	2154      	movs	r1, #84	; 0x54
 8005a18:	2040      	movs	r0, #64	; 0x40
 8005a1a:	f7fc fb61 	bl	80020e0 <drawCenteredTextWithPadding>
}
 8005a1e:	e037      	b.n	8005a90 <updateTimerDisplay+0x1a8>
	else if (timerVars.isBeingSet == 1) {
 8005a20:	4b1d      	ldr	r3, [pc, #116]	; (8005a98 <updateTimerDisplay+0x1b0>)
 8005a22:	781b      	ldrb	r3, [r3, #0]
 8005a24:	2b01      	cmp	r3, #1
 8005a26:	d133      	bne.n	8005a90 <updateTimerDisplay+0x1a8>
		drawButtonText("up", "down", "change", hspi);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	4a29      	ldr	r2, [pc, #164]	; (8005ad0 <updateTimerDisplay+0x1e8>)
 8005a2c:	4929      	ldr	r1, [pc, #164]	; (8005ad4 <updateTimerDisplay+0x1ec>)
 8005a2e:	482a      	ldr	r0, [pc, #168]	; (8005ad8 <updateTimerDisplay+0x1f0>)
 8005a30:	f000 f9c2 	bl	8005db8 <drawButtonText>
		switch (timerVars.fieldBeingSet) {
 8005a34:	4b18      	ldr	r3, [pc, #96]	; (8005a98 <updateTimerDisplay+0x1b0>)
 8005a36:	785b      	ldrb	r3, [r3, #1]
 8005a38:	2b02      	cmp	r3, #2
 8005a3a:	d00e      	beq.n	8005a5a <updateTimerDisplay+0x172>
 8005a3c:	2b03      	cmp	r3, #3
 8005a3e:	d016      	beq.n	8005a6e <updateTimerDisplay+0x186>
 8005a40:	2b01      	cmp	r3, #1
 8005a42:	d000      	beq.n	8005a46 <updateTimerDisplay+0x15e>
			default: break;
 8005a44:	e01d      	b.n	8005a82 <updateTimerDisplay+0x19a>
			case 1: drawCenteredTextWithPadding(WIDTH/2, 52, 17, "setting second...", hspi); break;
 8005a46:	4a25      	ldr	r2, [pc, #148]	; (8005adc <updateTimerDisplay+0x1f4>)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	9300      	str	r3, [sp, #0]
 8005a4c:	0013      	movs	r3, r2
 8005a4e:	2211      	movs	r2, #17
 8005a50:	2134      	movs	r1, #52	; 0x34
 8005a52:	2040      	movs	r0, #64	; 0x40
 8005a54:	f7fc fb44 	bl	80020e0 <drawCenteredTextWithPadding>
 8005a58:	e013      	b.n	8005a82 <updateTimerDisplay+0x19a>
			case 2: drawCenteredTextWithPadding(WIDTH/2, 52, 17, "setting minute...", hspi); break;
 8005a5a:	4a21      	ldr	r2, [pc, #132]	; (8005ae0 <updateTimerDisplay+0x1f8>)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	9300      	str	r3, [sp, #0]
 8005a60:	0013      	movs	r3, r2
 8005a62:	2211      	movs	r2, #17
 8005a64:	2134      	movs	r1, #52	; 0x34
 8005a66:	2040      	movs	r0, #64	; 0x40
 8005a68:	f7fc fb3a 	bl	80020e0 <drawCenteredTextWithPadding>
 8005a6c:	e009      	b.n	8005a82 <updateTimerDisplay+0x19a>
			case 3: drawCenteredTextWithPadding(WIDTH/2, 52, 17, "setting hour...", hspi); break;
 8005a6e:	4a1d      	ldr	r2, [pc, #116]	; (8005ae4 <updateTimerDisplay+0x1fc>)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	9300      	str	r3, [sp, #0]
 8005a74:	0013      	movs	r3, r2
 8005a76:	2211      	movs	r2, #17
 8005a78:	2134      	movs	r1, #52	; 0x34
 8005a7a:	2040      	movs	r0, #64	; 0x40
 8005a7c:	f7fc fb30 	bl	80020e0 <drawCenteredTextWithPadding>
 8005a80:	46c0      	nop			; (mov r8, r8)
		drawTimer(timerVars.timeToSet, hspi);
 8005a82:	4b05      	ldr	r3, [pc, #20]	; (8005a98 <updateTimerDisplay+0x1b0>)
 8005a84:	685b      	ldr	r3, [r3, #4]
 8005a86:	687a      	ldr	r2, [r7, #4]
 8005a88:	0011      	movs	r1, r2
 8005a8a:	0018      	movs	r0, r3
 8005a8c:	f000 fb68 	bl	8006160 <drawTimer>
}
 8005a90:	46c0      	nop			; (mov r8, r8)
 8005a92:	46bd      	mov	sp, r7
 8005a94:	b005      	add	sp, #20
 8005a96:	bd90      	pop	{r4, r7, pc}
 8005a98:	2000011c 	.word	0x2000011c
 8005a9c:	0800b580 	.word	0x0800b580
 8005aa0:	0800b510 	.word	0x0800b510
 8005aa4:	0800b470 	.word	0x0800b470
 8005aa8:	20000150 	.word	0x20000150
 8005aac:	2000014c 	.word	0x2000014c
 8005ab0:	20000196 	.word	0x20000196
 8005ab4:	0800b58c 	.word	0x0800b58c
 8005ab8:	20000194 	.word	0x20000194
 8005abc:	0800b59c 	.word	0x0800b59c
 8005ac0:	0800b5a8 	.word	0x0800b5a8
 8005ac4:	0800b5b0 	.word	0x0800b5b0
 8005ac8:	0800b5b8 	.word	0x0800b5b8
 8005acc:	0800b5bc 	.word	0x0800b5bc
 8005ad0:	0800b514 	.word	0x0800b514
 8005ad4:	0800b51c 	.word	0x0800b51c
 8005ad8:	0800b524 	.word	0x0800b524
 8005adc:	0800b5c8 	.word	0x0800b5c8
 8005ae0:	0800b528 	.word	0x0800b528
 8005ae4:	0800b53c 	.word	0x0800b53c

08005ae8 <updateAlarmDisplay>:

void updateAlarmDisplay(SPI_HandleTypeDef *hspi) {
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b084      	sub	sp, #16
 8005aec:	af02      	add	r7, sp, #8
 8005aee:	6078      	str	r0, [r7, #4]
	setTextColor(ST77XX_BLACK);
 8005af0:	2000      	movs	r0, #0
 8005af2:	f7fc fff5 	bl	8002ae0 <setTextColor>
	if (alarmVars.isBeingSet == 0) {
 8005af6:	4b50      	ldr	r3, [pc, #320]	; (8005c38 <updateAlarmDisplay+0x150>)
 8005af8:	781b      	ldrb	r3, [r3, #0]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d14f      	bne.n	8005b9e <updateAlarmDisplay+0xb6>
		if (alarmVars.isSet == 0) {
 8005afe:	4b4e      	ldr	r3, [pc, #312]	; (8005c38 <updateAlarmDisplay+0x150>)
 8005b00:	789b      	ldrb	r3, [r3, #2]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d11f      	bne.n	8005b46 <updateAlarmDisplay+0x5e>
			setTextSize(3);
 8005b06:	2003      	movs	r0, #3
 8005b08:	f7fc ffda 	bl	8002ac0 <setTextSize>
			clearTextLine(68, hspi);	// clear alarm time text
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	0019      	movs	r1, r3
 8005b10:	2044      	movs	r0, #68	; 0x44
 8005b12:	f7fc fbbd 	bl	8002290 <clearTextLine>

			setTextSize(1);
 8005b16:	2001      	movs	r0, #1
 8005b18:	f7fc ffd2 	bl	8002ac0 <setTextSize>
			clearTextLine(52, hspi);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	0019      	movs	r1, r3
 8005b20:	2034      	movs	r0, #52	; 0x34
 8005b22:	f7fc fbb5 	bl	8002290 <clearTextLine>
			drawCenteredTextWithPadding(WIDTH/2, 100, 11, "alarm unset", hspi);
 8005b26:	4a45      	ldr	r2, [pc, #276]	; (8005c3c <updateAlarmDisplay+0x154>)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	9300      	str	r3, [sp, #0]
 8005b2c:	0013      	movs	r3, r2
 8005b2e:	220b      	movs	r2, #11
 8005b30:	2164      	movs	r1, #100	; 0x64
 8005b32:	2040      	movs	r0, #64	; 0x40
 8005b34:	f7fc fad4 	bl	80020e0 <drawCenteredTextWithPadding>

			// draw button text
			drawButtonText("", "", "set", hspi);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	4a41      	ldr	r2, [pc, #260]	; (8005c40 <updateAlarmDisplay+0x158>)
 8005b3c:	4941      	ldr	r1, [pc, #260]	; (8005c44 <updateAlarmDisplay+0x15c>)
 8005b3e:	4841      	ldr	r0, [pc, #260]	; (8005c44 <updateAlarmDisplay+0x15c>)
 8005b40:	f000 f93a 	bl	8005db8 <drawButtonText>
		// draw button text
		drawButtonText("up", "down", "change", hspi);

		drawAlarm(alarmVars.alarmToSet, hspi);
	}
}
 8005b44:	e074      	b.n	8005c30 <updateAlarmDisplay+0x148>
		else if (isAlarmDone == 0) {
 8005b46:	4b40      	ldr	r3, [pc, #256]	; (8005c48 <updateAlarmDisplay+0x160>)
 8005b48:	781b      	ldrb	r3, [r3, #0]
 8005b4a:	b2db      	uxtb	r3, r3
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d119      	bne.n	8005b84 <updateAlarmDisplay+0x9c>
			setTextSize(1);
 8005b50:	2001      	movs	r0, #1
 8005b52:	f7fc ffb5 	bl	8002ac0 <setTextSize>
			drawCenteredTextWithPadding(WIDTH/2, 100, 11, "alarm set", hspi);
 8005b56:	4a3d      	ldr	r2, [pc, #244]	; (8005c4c <updateAlarmDisplay+0x164>)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	9300      	str	r3, [sp, #0]
 8005b5c:	0013      	movs	r3, r2
 8005b5e:	220b      	movs	r2, #11
 8005b60:	2164      	movs	r1, #100	; 0x64
 8005b62:	2040      	movs	r0, #64	; 0x40
 8005b64:	f7fc fabc 	bl	80020e0 <drawCenteredTextWithPadding>
			drawAlarm(alarmVars.alarmToSet, hspi);
 8005b68:	4b33      	ldr	r3, [pc, #204]	; (8005c38 <updateAlarmDisplay+0x150>)
 8005b6a:	685b      	ldr	r3, [r3, #4]
 8005b6c:	687a      	ldr	r2, [r7, #4]
 8005b6e:	0011      	movs	r1, r2
 8005b70:	0018      	movs	r0, r3
 8005b72:	f000 fb1b 	bl	80061ac <drawAlarm>
			drawButtonText("", "", "clear", hspi);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	4a35      	ldr	r2, [pc, #212]	; (8005c50 <updateAlarmDisplay+0x168>)
 8005b7a:	4932      	ldr	r1, [pc, #200]	; (8005c44 <updateAlarmDisplay+0x15c>)
 8005b7c:	4831      	ldr	r0, [pc, #196]	; (8005c44 <updateAlarmDisplay+0x15c>)
 8005b7e:	f000 f91b 	bl	8005db8 <drawButtonText>
}
 8005b82:	e055      	b.n	8005c30 <updateAlarmDisplay+0x148>
			setTextSize(1);
 8005b84:	2001      	movs	r0, #1
 8005b86:	f7fc ff9b 	bl	8002ac0 <setTextSize>
			drawCenteredTextWithPadding(WIDTH/2, 100, 11, "alarm done!", hspi);
 8005b8a:	4a32      	ldr	r2, [pc, #200]	; (8005c54 <updateAlarmDisplay+0x16c>)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	9300      	str	r3, [sp, #0]
 8005b90:	0013      	movs	r3, r2
 8005b92:	220b      	movs	r2, #11
 8005b94:	2164      	movs	r1, #100	; 0x64
 8005b96:	2040      	movs	r0, #64	; 0x40
 8005b98:	f7fc faa2 	bl	80020e0 <drawCenteredTextWithPadding>
}
 8005b9c:	e048      	b.n	8005c30 <updateAlarmDisplay+0x148>
	else if (alarmVars.isBeingSet == 1) {
 8005b9e:	4b26      	ldr	r3, [pc, #152]	; (8005c38 <updateAlarmDisplay+0x150>)
 8005ba0:	781b      	ldrb	r3, [r3, #0]
 8005ba2:	2b01      	cmp	r3, #1
 8005ba4:	d144      	bne.n	8005c30 <updateAlarmDisplay+0x148>
		setTextSize(1);
 8005ba6:	2001      	movs	r0, #1
 8005ba8:	f7fc ff8a 	bl	8002ac0 <setTextSize>
		switch (alarmVars.fieldBeingSet) {
 8005bac:	4b22      	ldr	r3, [pc, #136]	; (8005c38 <updateAlarmDisplay+0x150>)
 8005bae:	785b      	ldrb	r3, [r3, #1]
 8005bb0:	2b02      	cmp	r3, #2
 8005bb2:	d012      	beq.n	8005bda <updateAlarmDisplay+0xf2>
 8005bb4:	dc02      	bgt.n	8005bbc <updateAlarmDisplay+0xd4>
 8005bb6:	2b01      	cmp	r3, #1
 8005bb8:	d005      	beq.n	8005bc6 <updateAlarmDisplay+0xde>
			default: break;
 8005bba:	e02c      	b.n	8005c16 <updateAlarmDisplay+0x12e>
		switch (alarmVars.fieldBeingSet) {
 8005bbc:	2b03      	cmp	r3, #3
 8005bbe:	d016      	beq.n	8005bee <updateAlarmDisplay+0x106>
 8005bc0:	2b04      	cmp	r3, #4
 8005bc2:	d01e      	beq.n	8005c02 <updateAlarmDisplay+0x11a>
			default: break;
 8005bc4:	e027      	b.n	8005c16 <updateAlarmDisplay+0x12e>
			case 1: drawCenteredTextWithPadding(WIDTH/2, 52, 17, "setting second...", hspi); break;
 8005bc6:	4a24      	ldr	r2, [pc, #144]	; (8005c58 <updateAlarmDisplay+0x170>)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	9300      	str	r3, [sp, #0]
 8005bcc:	0013      	movs	r3, r2
 8005bce:	2211      	movs	r2, #17
 8005bd0:	2134      	movs	r1, #52	; 0x34
 8005bd2:	2040      	movs	r0, #64	; 0x40
 8005bd4:	f7fc fa84 	bl	80020e0 <drawCenteredTextWithPadding>
 8005bd8:	e01d      	b.n	8005c16 <updateAlarmDisplay+0x12e>
			case 2: drawCenteredTextWithPadding(WIDTH/2, 52, 17, "setting minute...", hspi); break;
 8005bda:	4a20      	ldr	r2, [pc, #128]	; (8005c5c <updateAlarmDisplay+0x174>)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	9300      	str	r3, [sp, #0]
 8005be0:	0013      	movs	r3, r2
 8005be2:	2211      	movs	r2, #17
 8005be4:	2134      	movs	r1, #52	; 0x34
 8005be6:	2040      	movs	r0, #64	; 0x40
 8005be8:	f7fc fa7a 	bl	80020e0 <drawCenteredTextWithPadding>
 8005bec:	e013      	b.n	8005c16 <updateAlarmDisplay+0x12e>
			case 3: drawCenteredTextWithPadding(WIDTH/2, 52, 17, "setting hour...", hspi); break;
 8005bee:	4a1c      	ldr	r2, [pc, #112]	; (8005c60 <updateAlarmDisplay+0x178>)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	9300      	str	r3, [sp, #0]
 8005bf4:	0013      	movs	r3, r2
 8005bf6:	2211      	movs	r2, #17
 8005bf8:	2134      	movs	r1, #52	; 0x34
 8005bfa:	2040      	movs	r0, #64	; 0x40
 8005bfc:	f7fc fa70 	bl	80020e0 <drawCenteredTextWithPadding>
 8005c00:	e009      	b.n	8005c16 <updateAlarmDisplay+0x12e>
			case 4: drawCenteredTextWithPadding(WIDTH/2, 52, 17, "setting day...", hspi); break;
 8005c02:	4a18      	ldr	r2, [pc, #96]	; (8005c64 <updateAlarmDisplay+0x17c>)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	9300      	str	r3, [sp, #0]
 8005c08:	0013      	movs	r3, r2
 8005c0a:	2211      	movs	r2, #17
 8005c0c:	2134      	movs	r1, #52	; 0x34
 8005c0e:	2040      	movs	r0, #64	; 0x40
 8005c10:	f7fc fa66 	bl	80020e0 <drawCenteredTextWithPadding>
 8005c14:	46c0      	nop			; (mov r8, r8)
		drawButtonText("up", "down", "change", hspi);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	4a13      	ldr	r2, [pc, #76]	; (8005c68 <updateAlarmDisplay+0x180>)
 8005c1a:	4914      	ldr	r1, [pc, #80]	; (8005c6c <updateAlarmDisplay+0x184>)
 8005c1c:	4814      	ldr	r0, [pc, #80]	; (8005c70 <updateAlarmDisplay+0x188>)
 8005c1e:	f000 f8cb 	bl	8005db8 <drawButtonText>
		drawAlarm(alarmVars.alarmToSet, hspi);
 8005c22:	4b05      	ldr	r3, [pc, #20]	; (8005c38 <updateAlarmDisplay+0x150>)
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	687a      	ldr	r2, [r7, #4]
 8005c28:	0011      	movs	r1, r2
 8005c2a:	0018      	movs	r0, r3
 8005c2c:	f000 fabe 	bl	80061ac <drawAlarm>
}
 8005c30:	46c0      	nop			; (mov r8, r8)
 8005c32:	46bd      	mov	sp, r7
 8005c34:	b002      	add	sp, #8
 8005c36:	bd80      	pop	{r7, pc}
 8005c38:	20000124 	.word	0x20000124
 8005c3c:	0800b5dc 	.word	0x0800b5dc
 8005c40:	0800b510 	.word	0x0800b510
 8005c44:	0800b470 	.word	0x0800b470
 8005c48:	20000142 	.word	0x20000142
 8005c4c:	0800b5e8 	.word	0x0800b5e8
 8005c50:	0800b5a8 	.word	0x0800b5a8
 8005c54:	0800b5f4 	.word	0x0800b5f4
 8005c58:	0800b5c8 	.word	0x0800b5c8
 8005c5c:	0800b528 	.word	0x0800b528
 8005c60:	0800b53c 	.word	0x0800b53c
 8005c64:	0800b600 	.word	0x0800b600
 8005c68:	0800b514 	.word	0x0800b514
 8005c6c:	0800b51c 	.word	0x0800b51c
 8005c70:	0800b524 	.word	0x0800b524

08005c74 <updateStopwatchDisplay>:

void updateStopwatchDisplay(SPI_HandleTypeDef *hspi) {
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b082      	sub	sp, #8
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
	setTextColor(ST77XX_BLACK);
 8005c7c:	2000      	movs	r0, #0
 8005c7e:	f7fc ff2f 	bl	8002ae0 <setTextColor>
	drawStopwatch(stopwatchCounter, hspi);
 8005c82:	4b16      	ldr	r3, [pc, #88]	; (8005cdc <updateStopwatchDisplay+0x68>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	687a      	ldr	r2, [r7, #4]
 8005c88:	0011      	movs	r1, r2
 8005c8a:	0018      	movs	r0, r3
 8005c8c:	f000 fac8 	bl	8006220 <drawStopwatch>
	drawStopwatchLap(stopwatchVars.lapCurrent-stopwatchVars.lapPrev, hspi);
 8005c90:	4b13      	ldr	r3, [pc, #76]	; (8005ce0 <updateStopwatchDisplay+0x6c>)
 8005c92:	685a      	ldr	r2, [r3, #4]
 8005c94:	4b12      	ldr	r3, [pc, #72]	; (8005ce0 <updateStopwatchDisplay+0x6c>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	1ad3      	subs	r3, r2, r3
 8005c9a:	687a      	ldr	r2, [r7, #4]
 8005c9c:	0011      	movs	r1, r2
 8005c9e:	0018      	movs	r0, r3
 8005ca0:	f000 faf6 	bl	8006290 <drawStopwatchLap>

	if (isStopwatchRunning == 0) drawButtonText("run", "lap", "clear", hspi);
 8005ca4:	4b0f      	ldr	r3, [pc, #60]	; (8005ce4 <updateStopwatchDisplay+0x70>)
 8005ca6:	781b      	ldrb	r3, [r3, #0]
 8005ca8:	b2db      	uxtb	r3, r3
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d106      	bne.n	8005cbc <updateStopwatchDisplay+0x48>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	4a0d      	ldr	r2, [pc, #52]	; (8005ce8 <updateStopwatchDisplay+0x74>)
 8005cb2:	490e      	ldr	r1, [pc, #56]	; (8005cec <updateStopwatchDisplay+0x78>)
 8005cb4:	480e      	ldr	r0, [pc, #56]	; (8005cf0 <updateStopwatchDisplay+0x7c>)
 8005cb6:	f000 f87f 	bl	8005db8 <drawButtonText>
	else if (isStopwatchRunning == 1) drawButtonText("pause", "lap", "clear", hspi);
}
 8005cba:	e00a      	b.n	8005cd2 <updateStopwatchDisplay+0x5e>
	else if (isStopwatchRunning == 1) drawButtonText("pause", "lap", "clear", hspi);
 8005cbc:	4b09      	ldr	r3, [pc, #36]	; (8005ce4 <updateStopwatchDisplay+0x70>)
 8005cbe:	781b      	ldrb	r3, [r3, #0]
 8005cc0:	b2db      	uxtb	r3, r3
 8005cc2:	2b01      	cmp	r3, #1
 8005cc4:	d105      	bne.n	8005cd2 <updateStopwatchDisplay+0x5e>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	4a07      	ldr	r2, [pc, #28]	; (8005ce8 <updateStopwatchDisplay+0x74>)
 8005cca:	4908      	ldr	r1, [pc, #32]	; (8005cec <updateStopwatchDisplay+0x78>)
 8005ccc:	4809      	ldr	r0, [pc, #36]	; (8005cf4 <updateStopwatchDisplay+0x80>)
 8005cce:	f000 f873 	bl	8005db8 <drawButtonText>
}
 8005cd2:	46c0      	nop			; (mov r8, r8)
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	b002      	add	sp, #8
 8005cd8:	bd80      	pop	{r7, pc}
 8005cda:	46c0      	nop			; (mov r8, r8)
 8005cdc:	20000198 	.word	0x20000198
 8005ce0:	2000012c 	.word	0x2000012c
 8005ce4:	20000148 	.word	0x20000148
 8005ce8:	0800b5a8 	.word	0x0800b5a8
 8005cec:	0800b610 	.word	0x0800b610
 8005cf0:	0800b5b8 	.word	0x0800b5b8
 8005cf4:	0800b5b0 	.word	0x0800b5b0

08005cf8 <drawButton>:

// ---- drawing functions related specifically to the user interface ----
void drawButton(uint8_t x_center, uint8_t y_center, SPI_HandleTypeDef *hspi) {
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b084      	sub	sp, #16
 8005cfc:	af02      	add	r7, sp, #8
 8005cfe:	603a      	str	r2, [r7, #0]
 8005d00:	1dfb      	adds	r3, r7, #7
 8005d02:	1c02      	adds	r2, r0, #0
 8005d04:	701a      	strb	r2, [r3, #0]
 8005d06:	1dbb      	adds	r3, r7, #6
 8005d08:	1c0a      	adds	r2, r1, #0
 8005d0a:	701a      	strb	r2, [r3, #0]
	// bounds checking. probably already done in draw/fillRect
	if (x_center-5 < 0 || x_center+5 > WIDTH || y_center-5 < 0 || y_center+5 > HEIGHT) return;
 8005d0c:	1dfb      	adds	r3, r7, #7
 8005d0e:	781b      	ldrb	r3, [r3, #0]
 8005d10:	3b05      	subs	r3, #5
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	db2f      	blt.n	8005d76 <drawButton+0x7e>
 8005d16:	1dfb      	adds	r3, r7, #7
 8005d18:	781b      	ldrb	r3, [r3, #0]
 8005d1a:	3305      	adds	r3, #5
 8005d1c:	2b80      	cmp	r3, #128	; 0x80
 8005d1e:	dc2a      	bgt.n	8005d76 <drawButton+0x7e>
 8005d20:	1dbb      	adds	r3, r7, #6
 8005d22:	781b      	ldrb	r3, [r3, #0]
 8005d24:	3b05      	subs	r3, #5
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	db25      	blt.n	8005d76 <drawButton+0x7e>
 8005d2a:	1dbb      	adds	r3, r7, #6
 8005d2c:	781b      	ldrb	r3, [r3, #0]
 8005d2e:	3305      	adds	r3, #5
 8005d30:	2ba0      	cmp	r3, #160	; 0xa0
 8005d32:	dc20      	bgt.n	8005d76 <drawButton+0x7e>

	// draw rect size 8 with 1 pixel border
	// parameters give center position of graphic
	drawRect(x_center-5, y_center-5, 10, 10, ST77XX_BLACK, hspi);
 8005d34:	1dfb      	adds	r3, r7, #7
 8005d36:	781b      	ldrb	r3, [r3, #0]
 8005d38:	3b05      	subs	r3, #5
 8005d3a:	b2d8      	uxtb	r0, r3
 8005d3c:	1dbb      	adds	r3, r7, #6
 8005d3e:	781b      	ldrb	r3, [r3, #0]
 8005d40:	3b05      	subs	r3, #5
 8005d42:	b2d9      	uxtb	r1, r3
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	9301      	str	r3, [sp, #4]
 8005d48:	2300      	movs	r3, #0
 8005d4a:	9300      	str	r3, [sp, #0]
 8005d4c:	230a      	movs	r3, #10
 8005d4e:	220a      	movs	r2, #10
 8005d50:	f7fc f85d 	bl	8001e0e <drawRect>
	fillRect(x_center-4, y_center-4, 8, 8, ST77XX_WHITE, hspi);
 8005d54:	1dfb      	adds	r3, r7, #7
 8005d56:	781b      	ldrb	r3, [r3, #0]
 8005d58:	3b04      	subs	r3, #4
 8005d5a:	b2d8      	uxtb	r0, r3
 8005d5c:	1dbb      	adds	r3, r7, #6
 8005d5e:	781b      	ldrb	r3, [r3, #0]
 8005d60:	3b04      	subs	r3, #4
 8005d62:	b2d9      	uxtb	r1, r3
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	9301      	str	r3, [sp, #4]
 8005d68:	4b05      	ldr	r3, [pc, #20]	; (8005d80 <drawButton+0x88>)
 8005d6a:	9300      	str	r3, [sp, #0]
 8005d6c:	2308      	movs	r3, #8
 8005d6e:	2208      	movs	r2, #8
 8005d70:	f7fc f8a5 	bl	8001ebe <fillRect>
 8005d74:	e000      	b.n	8005d78 <drawButton+0x80>
	if (x_center-5 < 0 || x_center+5 > WIDTH || y_center-5 < 0 || y_center+5 > HEIGHT) return;
 8005d76:	46c0      	nop			; (mov r8, r8)
}
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	b002      	add	sp, #8
 8005d7c:	bd80      	pop	{r7, pc}
 8005d7e:	46c0      	nop			; (mov r8, r8)
 8005d80:	0000ffff 	.word	0x0000ffff

08005d84 <drawButtons>:

void drawButtons(SPI_HandleTypeDef *hspi) {
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b082      	sub	sp, #8
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
	// 3 buttons. positioned so their text boxes, which are centered over button, can have equal spacing left and right
	drawButton(22, HEIGHT-15, hspi);		// button 1
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	001a      	movs	r2, r3
 8005d90:	2191      	movs	r1, #145	; 0x91
 8005d92:	2016      	movs	r0, #22
 8005d94:	f7ff ffb0 	bl	8005cf8 <drawButton>
	drawButton(64, HEIGHT-15, hspi);		// button 2
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	001a      	movs	r2, r3
 8005d9c:	2191      	movs	r1, #145	; 0x91
 8005d9e:	2040      	movs	r0, #64	; 0x40
 8005da0:	f7ff ffaa 	bl	8005cf8 <drawButton>
	drawButton(106, HEIGHT-15, hspi);		// button 3
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	001a      	movs	r2, r3
 8005da8:	2191      	movs	r1, #145	; 0x91
 8005daa:	206a      	movs	r0, #106	; 0x6a
 8005dac:	f7ff ffa4 	bl	8005cf8 <drawButton>
}
 8005db0:	46c0      	nop			; (mov r8, r8)
 8005db2:	46bd      	mov	sp, r7
 8005db4:	b002      	add	sp, #8
 8005db6:	bd80      	pop	{r7, pc}

08005db8 <drawButtonText>:

void drawButtonText(const char *str1, const char *str2, const char *str3, SPI_HandleTypeDef *hspi) {
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b086      	sub	sp, #24
 8005dbc:	af02      	add	r7, sp, #8
 8005dbe:	60f8      	str	r0, [r7, #12]
 8005dc0:	60b9      	str	r1, [r7, #8]
 8005dc2:	607a      	str	r2, [r7, #4]
 8005dc4:	603b      	str	r3, [r7, #0]
	setTextSize(1);
 8005dc6:	2001      	movs	r0, #1
 8005dc8:	f7fc fe7a 	bl	8002ac0 <setTextSize>
	setTextColor(ST77XX_BLACK);
 8005dcc:	2000      	movs	r0, #0
 8005dce:	f7fc fe87 	bl	8002ae0 <setTextColor>
	drawCenteredTextWithPadding(22, HEIGHT-28, 7, str1, hspi);		// button 1
 8005dd2:	68fa      	ldr	r2, [r7, #12]
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	9300      	str	r3, [sp, #0]
 8005dd8:	0013      	movs	r3, r2
 8005dda:	2207      	movs	r2, #7
 8005ddc:	2184      	movs	r1, #132	; 0x84
 8005dde:	2016      	movs	r0, #22
 8005de0:	f7fc f97e 	bl	80020e0 <drawCenteredTextWithPadding>
	drawCenteredTextWithPadding(64, HEIGHT-28, 7, str2, hspi);		// button 2
 8005de4:	68ba      	ldr	r2, [r7, #8]
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	9300      	str	r3, [sp, #0]
 8005dea:	0013      	movs	r3, r2
 8005dec:	2207      	movs	r2, #7
 8005dee:	2184      	movs	r1, #132	; 0x84
 8005df0:	2040      	movs	r0, #64	; 0x40
 8005df2:	f7fc f975 	bl	80020e0 <drawCenteredTextWithPadding>
	drawCenteredTextWithPadding(106, HEIGHT-28, 7, str3, hspi);		// button 3
 8005df6:	687a      	ldr	r2, [r7, #4]
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	9300      	str	r3, [sp, #0]
 8005dfc:	0013      	movs	r3, r2
 8005dfe:	2207      	movs	r2, #7
 8005e00:	2184      	movs	r1, #132	; 0x84
 8005e02:	206a      	movs	r0, #106	; 0x6a
 8005e04:	f7fc f96c 	bl	80020e0 <drawCenteredTextWithPadding>
}
 8005e08:	46c0      	nop			; (mov r8, r8)
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	b004      	add	sp, #16
 8005e0e:	bd80      	pop	{r7, pc}

08005e10 <drawTitle>:

void drawTitle(char *str, SPI_HandleTypeDef *hspi) {
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b084      	sub	sp, #16
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
 8005e18:	6039      	str	r1, [r7, #0]
	uint8_t strSize = strlen(str);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	0018      	movs	r0, r3
 8005e1e:	f7fa f973 	bl	8000108 <strlen>
 8005e22:	0002      	movs	r2, r0
 8005e24:	210f      	movs	r1, #15
 8005e26:	187b      	adds	r3, r7, r1
 8005e28:	701a      	strb	r2, [r3, #0]

	// drawing title
	if (12*strSize < WIDTH) {			// about string size = 10 for width = 128
 8005e2a:	187b      	adds	r3, r7, r1
 8005e2c:	781a      	ldrb	r2, [r3, #0]
 8005e2e:	0013      	movs	r3, r2
 8005e30:	005b      	lsls	r3, r3, #1
 8005e32:	189b      	adds	r3, r3, r2
 8005e34:	009b      	lsls	r3, r3, #2
 8005e36:	2b7f      	cmp	r3, #127	; 0x7f
 8005e38:	dc14      	bgt.n	8005e64 <drawTitle+0x54>
		setTextSize(2);
 8005e3a:	2002      	movs	r0, #2
 8005e3c:	f7fc fe40 	bl	8002ac0 <setTextSize>
		setCursor((WIDTH-12*strSize)/2, 10);
 8005e40:	230f      	movs	r3, #15
 8005e42:	18fb      	adds	r3, r7, r3
 8005e44:	781a      	ldrb	r2, [r3, #0]
 8005e46:	0013      	movs	r3, r2
 8005e48:	0092      	lsls	r2, r2, #2
 8005e4a:	1a9b      	subs	r3, r3, r2
 8005e4c:	009b      	lsls	r3, r3, #2
 8005e4e:	3380      	adds	r3, #128	; 0x80
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	da00      	bge.n	8005e56 <drawTitle+0x46>
 8005e54:	3301      	adds	r3, #1
 8005e56:	105b      	asrs	r3, r3, #1
 8005e58:	b2db      	uxtb	r3, r3
 8005e5a:	210a      	movs	r1, #10
 8005e5c:	0018      	movs	r0, r3
 8005e5e:	f7fc fe15 	bl	8002a8c <setCursor>
 8005e62:	e039      	b.n	8005ed8 <drawTitle+0xc8>
	}
	else if (6*strSize < WIDTH) {		// about string size = 21 for width = 128
 8005e64:	230f      	movs	r3, #15
 8005e66:	18fb      	adds	r3, r7, r3
 8005e68:	781a      	ldrb	r2, [r3, #0]
 8005e6a:	0013      	movs	r3, r2
 8005e6c:	005b      	lsls	r3, r3, #1
 8005e6e:	189b      	adds	r3, r3, r2
 8005e70:	005b      	lsls	r3, r3, #1
 8005e72:	2b7f      	cmp	r3, #127	; 0x7f
 8005e74:	dc14      	bgt.n	8005ea0 <drawTitle+0x90>
		setTextSize(1);
 8005e76:	2001      	movs	r0, #1
 8005e78:	f7fc fe22 	bl	8002ac0 <setTextSize>
		setCursor((WIDTH-6*strSize)/2, 10);
 8005e7c:	230f      	movs	r3, #15
 8005e7e:	18fb      	adds	r3, r7, r3
 8005e80:	781a      	ldrb	r2, [r3, #0]
 8005e82:	0013      	movs	r3, r2
 8005e84:	0092      	lsls	r2, r2, #2
 8005e86:	1a9b      	subs	r3, r3, r2
 8005e88:	005b      	lsls	r3, r3, #1
 8005e8a:	3380      	adds	r3, #128	; 0x80
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	da00      	bge.n	8005e92 <drawTitle+0x82>
 8005e90:	3301      	adds	r3, #1
 8005e92:	105b      	asrs	r3, r3, #1
 8005e94:	b2db      	uxtb	r3, r3
 8005e96:	210a      	movs	r1, #10
 8005e98:	0018      	movs	r0, r3
 8005e9a:	f7fc fdf7 	bl	8002a8c <setCursor>
 8005e9e:	e01b      	b.n	8005ed8 <drawTitle+0xc8>
	}
	else {
		setTextSize(1);
 8005ea0:	2001      	movs	r0, #1
 8005ea2:	f7fc fe0d 	bl	8002ac0 <setTextSize>
		sprintf(str, "it's too long");		// should not need to worry about null access, since this string is shorter than case above
 8005ea6:	687a      	ldr	r2, [r7, #4]
 8005ea8:	4b12      	ldr	r3, [pc, #72]	; (8005ef4 <drawTitle+0xe4>)
 8005eaa:	0010      	movs	r0, r2
 8005eac:	0019      	movs	r1, r3
 8005eae:	230e      	movs	r3, #14
 8005eb0:	001a      	movs	r2, r3
 8005eb2:	f004 fe79 	bl	800aba8 <memcpy>
		setCursor((WIDTH-6*strSize)/2, 10);
 8005eb6:	230f      	movs	r3, #15
 8005eb8:	18fb      	adds	r3, r7, r3
 8005eba:	781a      	ldrb	r2, [r3, #0]
 8005ebc:	0013      	movs	r3, r2
 8005ebe:	0092      	lsls	r2, r2, #2
 8005ec0:	1a9b      	subs	r3, r3, r2
 8005ec2:	005b      	lsls	r3, r3, #1
 8005ec4:	3380      	adds	r3, #128	; 0x80
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	da00      	bge.n	8005ecc <drawTitle+0xbc>
 8005eca:	3301      	adds	r3, #1
 8005ecc:	105b      	asrs	r3, r3, #1
 8005ece:	b2db      	uxtb	r3, r3
 8005ed0:	210a      	movs	r1, #10
 8005ed2:	0018      	movs	r0, r3
 8005ed4:	f7fc fdda 	bl	8002a8c <setCursor>
	}

	setTextColor(ST77XX_BLACK);
 8005ed8:	2000      	movs	r0, #0
 8005eda:	f7fc fe01 	bl	8002ae0 <setTextColor>
	drawText(str, hspi);
 8005ede:	683a      	ldr	r2, [r7, #0]
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	0011      	movs	r1, r2
 8005ee4:	0018      	movs	r0, r3
 8005ee6:	f7fc fd43 	bl	8002970 <drawText>
}
 8005eea:	46c0      	nop			; (mov r8, r8)
 8005eec:	46bd      	mov	sp, r7
 8005eee:	b004      	add	sp, #16
 8005ef0:	bd80      	pop	{r7, pc}
 8005ef2:	46c0      	nop			; (mov r8, r8)
 8005ef4:	0800b614 	.word	0x0800b614

08005ef8 <drawBattery>:

void drawBattery(uint8_t batteryLevel, SPI_HandleTypeDef *hspi) {
 8005ef8:	b590      	push	{r4, r7, lr}
 8005efa:	b087      	sub	sp, #28
 8005efc:	af02      	add	r7, sp, #8
 8005efe:	0002      	movs	r2, r0
 8005f00:	6039      	str	r1, [r7, #0]
 8005f02:	1dfb      	adds	r3, r7, #7
 8005f04:	701a      	strb	r2, [r3, #0]
	// doesn't move and is used on an empty screen, so shouldn't need to clear then print
	char str[5];

	// drawing battery symbol. hard coded to be 6x13, upper left corner on (49,26)
	drawVLine(49, 28, 10, ST77XX_BLACK, hspi);		// left col
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	9300      	str	r3, [sp, #0]
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	220a      	movs	r2, #10
 8005f0e:	211c      	movs	r1, #28
 8005f10:	2031      	movs	r0, #49	; 0x31
 8005f12:	f7fb fe8b 	bl	8001c2c <drawVLine>
	drawVLine(54, 28, 10, ST77XX_BLACK, hspi);		// right col
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	9300      	str	r3, [sp, #0]
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	220a      	movs	r2, #10
 8005f1e:	211c      	movs	r1, #28
 8005f20:	2036      	movs	r0, #54	; 0x36
 8005f22:	f7fb fe83 	bl	8001c2c <drawVLine>
	drawHLine(50, 38, 4, ST77XX_BLACK, hspi);		// bottom
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	9300      	str	r3, [sp, #0]
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	2204      	movs	r2, #4
 8005f2e:	2126      	movs	r1, #38	; 0x26
 8005f30:	2032      	movs	r0, #50	; 0x32
 8005f32:	f7fb fdd5 	bl	8001ae0 <drawHLine>
	drawHLine(50, 27, 4, ST77XX_BLACK, hspi);		// top bottom level
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	9300      	str	r3, [sp, #0]
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	2204      	movs	r2, #4
 8005f3e:	211b      	movs	r1, #27
 8005f40:	2032      	movs	r0, #50	; 0x32
 8005f42:	f7fb fdcd 	bl	8001ae0 <drawHLine>
	drawHLine(51, 26, 2, ST77XX_BLACK, hspi);		// top upper level
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	9300      	str	r3, [sp, #0]
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	2202      	movs	r2, #2
 8005f4e:	211a      	movs	r1, #26
 8005f50:	2033      	movs	r0, #51	; 0x33
 8005f52:	f7fb fdc5 	bl	8001ae0 <drawHLine>

	uint16_t color = ST77XX_GREEN;
 8005f56:	230e      	movs	r3, #14
 8005f58:	18fb      	adds	r3, r7, r3
 8005f5a:	22fc      	movs	r2, #252	; 0xfc
 8005f5c:	00d2      	lsls	r2, r2, #3
 8005f5e:	801a      	strh	r2, [r3, #0]
	if (batteryLevel < 20) color = ST77XX_RED;
 8005f60:	1dfb      	adds	r3, r7, #7
 8005f62:	781b      	ldrb	r3, [r3, #0]
 8005f64:	2b13      	cmp	r3, #19
 8005f66:	d803      	bhi.n	8005f70 <drawBattery+0x78>
 8005f68:	230e      	movs	r3, #14
 8005f6a:	18fb      	adds	r3, r7, r3
 8005f6c:	4a2c      	ldr	r2, [pc, #176]	; (8006020 <drawBattery+0x128>)
 8005f6e:	801a      	strh	r2, [r3, #0]
	fillRect(50, 28+(100-batteryLevel)/10, 4, (batteryLevel+9)/10, color, hspi);	// +9 to avoid having to use float and round()
 8005f70:	1dfb      	adds	r3, r7, #7
 8005f72:	781b      	ldrb	r3, [r3, #0]
 8005f74:	2264      	movs	r2, #100	; 0x64
 8005f76:	1ad3      	subs	r3, r2, r3
 8005f78:	210a      	movs	r1, #10
 8005f7a:	0018      	movs	r0, r3
 8005f7c:	f7fa f956 	bl	800022c <__divsi3>
 8005f80:	0003      	movs	r3, r0
 8005f82:	b2db      	uxtb	r3, r3
 8005f84:	331c      	adds	r3, #28
 8005f86:	b2dc      	uxtb	r4, r3
 8005f88:	1dfb      	adds	r3, r7, #7
 8005f8a:	781b      	ldrb	r3, [r3, #0]
 8005f8c:	3309      	adds	r3, #9
 8005f8e:	210a      	movs	r1, #10
 8005f90:	0018      	movs	r0, r3
 8005f92:	f7fa f94b 	bl	800022c <__divsi3>
 8005f96:	0003      	movs	r3, r0
 8005f98:	b2da      	uxtb	r2, r3
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	9301      	str	r3, [sp, #4]
 8005f9e:	230e      	movs	r3, #14
 8005fa0:	18fb      	adds	r3, r7, r3
 8005fa2:	881b      	ldrh	r3, [r3, #0]
 8005fa4:	9300      	str	r3, [sp, #0]
 8005fa6:	0013      	movs	r3, r2
 8005fa8:	2204      	movs	r2, #4
 8005faa:	0021      	movs	r1, r4
 8005fac:	2032      	movs	r0, #50	; 0x32
 8005fae:	f7fb ff86 	bl	8001ebe <fillRect>
	fillRect(50, 28, 4, (100-batteryLevel)/10, ST77XX_WHITE, hspi);
 8005fb2:	1dfb      	adds	r3, r7, #7
 8005fb4:	781b      	ldrb	r3, [r3, #0]
 8005fb6:	2264      	movs	r2, #100	; 0x64
 8005fb8:	1ad3      	subs	r3, r2, r3
 8005fba:	210a      	movs	r1, #10
 8005fbc:	0018      	movs	r0, r3
 8005fbe:	f7fa f935 	bl	800022c <__divsi3>
 8005fc2:	0003      	movs	r3, r0
 8005fc4:	b2da      	uxtb	r2, r3
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	9301      	str	r3, [sp, #4]
 8005fca:	4b16      	ldr	r3, [pc, #88]	; (8006024 <drawBattery+0x12c>)
 8005fcc:	9300      	str	r3, [sp, #0]
 8005fce:	0013      	movs	r3, r2
 8005fd0:	2204      	movs	r2, #4
 8005fd2:	211c      	movs	r1, #28
 8005fd4:	2032      	movs	r0, #50	; 0x32
 8005fd6:	f7fb ff72 	bl	8001ebe <fillRect>

	setTextSize(1);
 8005fda:	2001      	movs	r0, #1
 8005fdc:	f7fc fd70 	bl	8002ac0 <setTextSize>
	if (batteryLevel >= 20) color = ST77XX_BLACK;		// reusing variable for more obfuscated code.
 8005fe0:	1dfb      	adds	r3, r7, #7
 8005fe2:	781b      	ldrb	r3, [r3, #0]
 8005fe4:	2b13      	cmp	r3, #19
 8005fe6:	d903      	bls.n	8005ff0 <drawBattery+0xf8>
 8005fe8:	230e      	movs	r3, #14
 8005fea:	18fb      	adds	r3, r7, r3
 8005fec:	2200      	movs	r2, #0
 8005fee:	801a      	strh	r2, [r3, #0]
	setTextColor(color);
 8005ff0:	230e      	movs	r3, #14
 8005ff2:	18fb      	adds	r3, r7, r3
 8005ff4:	881b      	ldrh	r3, [r3, #0]
 8005ff6:	0018      	movs	r0, r3
 8005ff8:	f7fc fd72 	bl	8002ae0 <setTextColor>
	sprintf(str, "%3d%%", batteryLevel);
 8005ffc:	1dfb      	adds	r3, r7, #7
 8005ffe:	781a      	ldrb	r2, [r3, #0]
 8006000:	4909      	ldr	r1, [pc, #36]	; (8006028 <drawBattery+0x130>)
 8006002:	2408      	movs	r4, #8
 8006004:	193b      	adds	r3, r7, r4
 8006006:	0018      	movs	r0, r3
 8006008:	f004 fe5e 	bl	800acc8 <siprintf>
	drawTextAt(55, 31, str, hspi);
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	193a      	adds	r2, r7, r4
 8006010:	211f      	movs	r1, #31
 8006012:	2037      	movs	r0, #55	; 0x37
 8006014:	f7fc fce2 	bl	80029dc <drawTextAt>
}
 8006018:	46c0      	nop			; (mov r8, r8)
 800601a:	46bd      	mov	sp, r7
 800601c:	b005      	add	sp, #20
 800601e:	bd90      	pop	{r4, r7, pc}
 8006020:	fffff800 	.word	0xfffff800
 8006024:	0000ffff 	.word	0x0000ffff
 8006028:	0800b624 	.word	0x0800b624

0800602c <drawClock>:

// draw time and date
// should optimize to only redraw part that changed
void drawClock(struct dates *d, struct times *t, SPI_HandleTypeDef *hspi) {
 800602c:	b5b0      	push	{r4, r5, r7, lr}
 800602e:	b090      	sub	sp, #64	; 0x40
 8006030:	af02      	add	r7, sp, #8
 8006032:	60f8      	str	r0, [r7, #12]
 8006034:	60b9      	str	r1, [r7, #8]
 8006036:	607a      	str	r2, [r7, #4]
	// notes on paper.
	char str[40];

	// no need to draw padding for those that always have the same length
	// drawing hr and min, 12-hr format
	if (t->hr % 12 == 0) sprintf(str, "%2d:%02d", 12, t->min);
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	781b      	ldrb	r3, [r3, #0]
 800603c:	210c      	movs	r1, #12
 800603e:	0018      	movs	r0, r3
 8006040:	f7fa f8f0 	bl	8000224 <__aeabi_uidivmod>
 8006044:	000b      	movs	r3, r1
 8006046:	b2db      	uxtb	r3, r3
 8006048:	2b00      	cmp	r3, #0
 800604a:	d108      	bne.n	800605e <drawClock+0x32>
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	785b      	ldrb	r3, [r3, #1]
 8006050:	493c      	ldr	r1, [pc, #240]	; (8006144 <drawClock+0x118>)
 8006052:	2210      	movs	r2, #16
 8006054:	18b8      	adds	r0, r7, r2
 8006056:	220c      	movs	r2, #12
 8006058:	f004 fe36 	bl	800acc8 <siprintf>
 800605c:	e00f      	b.n	800607e <drawClock+0x52>
	else sprintf(str, "%2d:%02d", t->hr%12, t->min);
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	781b      	ldrb	r3, [r3, #0]
 8006062:	210c      	movs	r1, #12
 8006064:	0018      	movs	r0, r3
 8006066:	f7fa f8dd 	bl	8000224 <__aeabi_uidivmod>
 800606a:	000b      	movs	r3, r1
 800606c:	b2db      	uxtb	r3, r3
 800606e:	001a      	movs	r2, r3
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	785b      	ldrb	r3, [r3, #1]
 8006074:	4933      	ldr	r1, [pc, #204]	; (8006144 <drawClock+0x118>)
 8006076:	2010      	movs	r0, #16
 8006078:	1838      	adds	r0, r7, r0
 800607a:	f004 fe25 	bl	800acc8 <siprintf>
	setTextSize(3);
 800607e:	2003      	movs	r0, #3
 8006080:	f7fc fd1e 	bl	8002ac0 <setTextSize>
	setTextColor(ST77XX_BLACK);
 8006084:	2000      	movs	r0, #0
 8006086:	f7fc fd2b 	bl	8002ae0 <setTextColor>
	drawCenteredText(52, 60, str, hspi);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2410      	movs	r4, #16
 800608e:	193a      	adds	r2, r7, r4
 8006090:	213c      	movs	r1, #60	; 0x3c
 8006092:	2034      	movs	r0, #52	; 0x34
 8006094:	f7fb ffc2 	bl	800201c <drawCenteredText>

	// drawing sec
	sprintf(str, "%02d", t->sec);
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	789b      	ldrb	r3, [r3, #2]
 800609c:	001a      	movs	r2, r3
 800609e:	492a      	ldr	r1, [pc, #168]	; (8006148 <drawClock+0x11c>)
 80060a0:	193b      	adds	r3, r7, r4
 80060a2:	0018      	movs	r0, r3
 80060a4:	f004 fe10 	bl	800acc8 <siprintf>
	setTextSize(2);
 80060a8:	2002      	movs	r0, #2
 80060aa:	f7fc fd09 	bl	8002ac0 <setTextSize>
	drawCenteredText(109, 68, str, hspi);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	193a      	adds	r2, r7, r4
 80060b2:	2144      	movs	r1, #68	; 0x44
 80060b4:	206d      	movs	r0, #109	; 0x6d
 80060b6:	f7fb ffb1 	bl	800201c <drawCenteredText>

	// drawing AM/PM text
	setTextSize(1);
 80060ba:	2001      	movs	r0, #1
 80060bc:	f7fc fd00 	bl	8002ac0 <setTextSize>
	if (t->hr < 12) drawCenteredText(103, 60, "AM", hspi);
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	781b      	ldrb	r3, [r3, #0]
 80060c4:	2b0b      	cmp	r3, #11
 80060c6:	d806      	bhi.n	80060d6 <drawClock+0xaa>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	4a20      	ldr	r2, [pc, #128]	; (800614c <drawClock+0x120>)
 80060cc:	213c      	movs	r1, #60	; 0x3c
 80060ce:	2067      	movs	r0, #103	; 0x67
 80060d0:	f7fb ffa4 	bl	800201c <drawCenteredText>
 80060d4:	e005      	b.n	80060e2 <drawClock+0xb6>
	else drawCenteredText(103, 60, "PM", hspi);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	4a1d      	ldr	r2, [pc, #116]	; (8006150 <drawClock+0x124>)
 80060da:	213c      	movs	r1, #60	; 0x3c
 80060dc:	2067      	movs	r0, #103	; 0x67
 80060de:	f7fb ff9d 	bl	800201c <drawCenteredText>

	// drawing date
	setTextSize(1);
 80060e2:	2001      	movs	r0, #1
 80060e4:	f7fc fcec 	bl	8002ac0 <setTextSize>
	sprintf(str, "%s %d %04d", monthNames[d->month], d->date, d->yr);
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	789b      	ldrb	r3, [r3, #2]
 80060ec:	001a      	movs	r2, r3
 80060ee:	4b19      	ldr	r3, [pc, #100]	; (8006154 <drawClock+0x128>)
 80060f0:	0092      	lsls	r2, r2, #2
 80060f2:	58d2      	ldr	r2, [r2, r3]
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	78db      	ldrb	r3, [r3, #3]
 80060f8:	001c      	movs	r4, r3
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	881b      	ldrh	r3, [r3, #0]
 80060fe:	4916      	ldr	r1, [pc, #88]	; (8006158 <drawClock+0x12c>)
 8006100:	2510      	movs	r5, #16
 8006102:	1978      	adds	r0, r7, r5
 8006104:	9300      	str	r3, [sp, #0]
 8006106:	0023      	movs	r3, r4
 8006108:	f004 fdde 	bl	800acc8 <siprintf>
	drawCenteredTextWithPadding(WIDTH/2, 84, 11, str, hspi);
 800610c:	197a      	adds	r2, r7, r5
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	9300      	str	r3, [sp, #0]
 8006112:	0013      	movs	r3, r2
 8006114:	220b      	movs	r2, #11
 8006116:	2154      	movs	r1, #84	; 0x54
 8006118:	2040      	movs	r0, #64	; 0x40
 800611a:	f7fb ffe1 	bl	80020e0 <drawCenteredTextWithPadding>

	// drawing weekday
	drawCenteredTextWithPadding(WIDTH/2, 92, 9, weekdayNames[d->weekday], hspi);
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	791b      	ldrb	r3, [r3, #4]
 8006122:	001a      	movs	r2, r3
 8006124:	4b0d      	ldr	r3, [pc, #52]	; (800615c <drawClock+0x130>)
 8006126:	0092      	lsls	r2, r2, #2
 8006128:	58d2      	ldr	r2, [r2, r3]
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	9300      	str	r3, [sp, #0]
 800612e:	0013      	movs	r3, r2
 8006130:	2209      	movs	r2, #9
 8006132:	215c      	movs	r1, #92	; 0x5c
 8006134:	2040      	movs	r0, #64	; 0x40
 8006136:	f7fb ffd3 	bl	80020e0 <drawCenteredTextWithPadding>
}
 800613a:	46c0      	nop			; (mov r8, r8)
 800613c:	46bd      	mov	sp, r7
 800613e:	b00e      	add	sp, #56	; 0x38
 8006140:	bdb0      	pop	{r4, r5, r7, pc}
 8006142:	46c0      	nop			; (mov r8, r8)
 8006144:	0800b62c 	.word	0x0800b62c
 8006148:	0800b638 	.word	0x0800b638
 800614c:	0800b640 	.word	0x0800b640
 8006150:	0800b644 	.word	0x0800b644
 8006154:	20000034 	.word	0x20000034
 8006158:	0800b648 	.word	0x0800b648
 800615c:	20000014 	.word	0x20000014

08006160 <drawTimer>:

void drawTimer(struct times *t, SPI_HandleTypeDef *hspi) {
 8006160:	b5b0      	push	{r4, r5, r7, lr}
 8006162:	b08e      	sub	sp, #56	; 0x38
 8006164:	af02      	add	r7, sp, #8
 8006166:	6078      	str	r0, [r7, #4]
 8006168:	6039      	str	r1, [r7, #0]
	char str[40];

	// only drawing hr:min:sec of timer
	setTextSize(2);
 800616a:	2002      	movs	r0, #2
 800616c:	f7fc fca8 	bl	8002ac0 <setTextSize>
	setTextColor(ST77XX_BLACK);
 8006170:	2000      	movs	r0, #0
 8006172:	f7fc fcb5 	bl	8002ae0 <setTextColor>
	sprintf(str, "%2d:%2d:%2d", t->hr, t->min, t->sec);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	781b      	ldrb	r3, [r3, #0]
 800617a:	001a      	movs	r2, r3
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	785b      	ldrb	r3, [r3, #1]
 8006180:	001c      	movs	r4, r3
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	789b      	ldrb	r3, [r3, #2]
 8006186:	4908      	ldr	r1, [pc, #32]	; (80061a8 <drawTimer+0x48>)
 8006188:	2508      	movs	r5, #8
 800618a:	1978      	adds	r0, r7, r5
 800618c:	9300      	str	r3, [sp, #0]
 800618e:	0023      	movs	r3, r4
 8006190:	f004 fd9a 	bl	800acc8 <siprintf>
	drawCenteredText(WIDTH/2, HEIGHT/2-12, str, hspi);		// about y=68
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	197a      	adds	r2, r7, r5
 8006198:	2144      	movs	r1, #68	; 0x44
 800619a:	2040      	movs	r0, #64	; 0x40
 800619c:	f7fb ff3e 	bl	800201c <drawCenteredText>

	// leaving room to draw "timer set!/unset"
}
 80061a0:	46c0      	nop			; (mov r8, r8)
 80061a2:	46bd      	mov	sp, r7
 80061a4:	b00c      	add	sp, #48	; 0x30
 80061a6:	bdb0      	pop	{r4, r5, r7, pc}
 80061a8:	0800b654 	.word	0x0800b654

080061ac <drawAlarm>:

void drawAlarm(struct alarmTimes *a, SPI_HandleTypeDef *hspi) {
 80061ac:	b5b0      	push	{r4, r5, r7, lr}
 80061ae:	b08e      	sub	sp, #56	; 0x38
 80061b0:	af02      	add	r7, sp, #8
 80061b2:	6078      	str	r0, [r7, #4]
 80061b4:	6039      	str	r1, [r7, #0]
	char str[40];

	// drawing hr:min:sec
	setTextSize(2);
 80061b6:	2002      	movs	r0, #2
 80061b8:	f7fc fc82 	bl	8002ac0 <setTextSize>
	setTextColor(ST77XX_BLACK);
 80061bc:	2000      	movs	r0, #0
 80061be:	f7fc fc8f 	bl	8002ae0 <setTextColor>
	sprintf(str, "%2d:%2d:%2d", a->hr, a->min, a->sec);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	781b      	ldrb	r3, [r3, #0]
 80061c6:	001a      	movs	r2, r3
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	785b      	ldrb	r3, [r3, #1]
 80061cc:	001c      	movs	r4, r3
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	789b      	ldrb	r3, [r3, #2]
 80061d2:	4911      	ldr	r1, [pc, #68]	; (8006218 <drawAlarm+0x6c>)
 80061d4:	2508      	movs	r5, #8
 80061d6:	1978      	adds	r0, r7, r5
 80061d8:	9300      	str	r3, [sp, #0]
 80061da:	0023      	movs	r3, r4
 80061dc:	f004 fd74 	bl	800acc8 <siprintf>
	drawCenteredText(WIDTH/2, 68, str, hspi);
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	197a      	adds	r2, r7, r5
 80061e4:	2144      	movs	r1, #68	; 0x44
 80061e6:	2040      	movs	r0, #64	; 0x40
 80061e8:	f7fb ff18 	bl	800201c <drawCenteredText>

	// drawing weekday
	setTextSize(1);
 80061ec:	2001      	movs	r0, #1
 80061ee:	f7fc fc67 	bl	8002ac0 <setTextSize>
	drawCenteredTextWithPadding(WIDTH/2, 84, 9, weekdayNames[a->weekday], hspi);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	78db      	ldrb	r3, [r3, #3]
 80061f6:	001a      	movs	r2, r3
 80061f8:	4b08      	ldr	r3, [pc, #32]	; (800621c <drawAlarm+0x70>)
 80061fa:	0092      	lsls	r2, r2, #2
 80061fc:	58d2      	ldr	r2, [r2, r3]
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	9300      	str	r3, [sp, #0]
 8006202:	0013      	movs	r3, r2
 8006204:	2209      	movs	r2, #9
 8006206:	2154      	movs	r1, #84	; 0x54
 8006208:	2040      	movs	r0, #64	; 0x40
 800620a:	f7fb ff69 	bl	80020e0 <drawCenteredTextWithPadding>
}
 800620e:	46c0      	nop			; (mov r8, r8)
 8006210:	46bd      	mov	sp, r7
 8006212:	b00c      	add	sp, #48	; 0x30
 8006214:	bdb0      	pop	{r4, r5, r7, pc}
 8006216:	46c0      	nop			; (mov r8, r8)
 8006218:	0800b654 	.word	0x0800b654
 800621c:	20000014 	.word	0x20000014

08006220 <drawStopwatch>:

void drawStopwatch(uint32_t seconds, SPI_HandleTypeDef *hspi) {
 8006220:	b5b0      	push	{r4, r5, r7, lr}
 8006222:	b090      	sub	sp, #64	; 0x40
 8006224:	af02      	add	r7, sp, #8
 8006226:	6078      	str	r0, [r7, #4]
 8006228:	6039      	str	r1, [r7, #0]
	struct times t = {0};
 800622a:	2134      	movs	r1, #52	; 0x34
 800622c:	000c      	movs	r4, r1
 800622e:	187b      	adds	r3, r7, r1
 8006230:	0018      	movs	r0, r3
 8006232:	2303      	movs	r3, #3
 8006234:	001a      	movs	r2, r3
 8006236:	2100      	movs	r1, #0
 8006238:	f004 fcbf 	bl	800abba <memset>
	char str[40];

	secondsToTime(&t, seconds);
 800623c:	687a      	ldr	r2, [r7, #4]
 800623e:	0021      	movs	r1, r4
 8006240:	000c      	movs	r4, r1
 8006242:	187b      	adds	r3, r7, r1
 8006244:	0011      	movs	r1, r2
 8006246:	0018      	movs	r0, r3
 8006248:	f7fd f827 	bl	800329a <secondsToTime>

	// drawing hr:min:sec
	setTextSize(2);
 800624c:	2002      	movs	r0, #2
 800624e:	f7fc fc37 	bl	8002ac0 <setTextSize>
	setTextColor(ST77XX_BLACK);
 8006252:	2000      	movs	r0, #0
 8006254:	f7fc fc44 	bl	8002ae0 <setTextColor>
	sprintf(str, "%2d:%2d:%2d", t.hr, t.min, t.sec);
 8006258:	0021      	movs	r1, r4
 800625a:	187b      	adds	r3, r7, r1
 800625c:	781b      	ldrb	r3, [r3, #0]
 800625e:	001a      	movs	r2, r3
 8006260:	187b      	adds	r3, r7, r1
 8006262:	785b      	ldrb	r3, [r3, #1]
 8006264:	001c      	movs	r4, r3
 8006266:	187b      	adds	r3, r7, r1
 8006268:	789b      	ldrb	r3, [r3, #2]
 800626a:	4908      	ldr	r1, [pc, #32]	; (800628c <drawStopwatch+0x6c>)
 800626c:	250c      	movs	r5, #12
 800626e:	1978      	adds	r0, r7, r5
 8006270:	9300      	str	r3, [sp, #0]
 8006272:	0023      	movs	r3, r4
 8006274:	f004 fd28 	bl	800acc8 <siprintf>
	drawCenteredText(WIDTH/2, 68, str, hspi);
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	197a      	adds	r2, r7, r5
 800627c:	2144      	movs	r1, #68	; 0x44
 800627e:	2040      	movs	r0, #64	; 0x40
 8006280:	f7fb fecc 	bl	800201c <drawCenteredText>

	// leaving room for lap
}
 8006284:	46c0      	nop			; (mov r8, r8)
 8006286:	46bd      	mov	sp, r7
 8006288:	b00e      	add	sp, #56	; 0x38
 800628a:	bdb0      	pop	{r4, r5, r7, pc}
 800628c:	0800b654 	.word	0x0800b654

08006290 <drawStopwatchLap>:

void drawStopwatchLap(uint32_t seconds, SPI_HandleTypeDef *hspi) {
 8006290:	b5b0      	push	{r4, r5, r7, lr}
 8006292:	b090      	sub	sp, #64	; 0x40
 8006294:	af02      	add	r7, sp, #8
 8006296:	6078      	str	r0, [r7, #4]
 8006298:	6039      	str	r1, [r7, #0]
	struct times t = {0};
 800629a:	2134      	movs	r1, #52	; 0x34
 800629c:	000c      	movs	r4, r1
 800629e:	187b      	adds	r3, r7, r1
 80062a0:	0018      	movs	r0, r3
 80062a2:	2303      	movs	r3, #3
 80062a4:	001a      	movs	r2, r3
 80062a6:	2100      	movs	r1, #0
 80062a8:	f004 fc87 	bl	800abba <memset>
	char str[40];

	secondsToTime(&t, seconds);
 80062ac:	687a      	ldr	r2, [r7, #4]
 80062ae:	0021      	movs	r1, r4
 80062b0:	000c      	movs	r4, r1
 80062b2:	187b      	adds	r3, r7, r1
 80062b4:	0011      	movs	r1, r2
 80062b6:	0018      	movs	r0, r3
 80062b8:	f7fc ffef 	bl	800329a <secondsToTime>

	// drawing hr:min:sec
	setTextSize(1);
 80062bc:	2001      	movs	r0, #1
 80062be:	f7fc fbff 	bl	8002ac0 <setTextSize>
	setTextColor(ST77XX_BLACK);
 80062c2:	2000      	movs	r0, #0
 80062c4:	f7fc fc0c 	bl	8002ae0 <setTextColor>
	sprintf(str, "lap: %2d:%2d:%2d", t.hr, t.min, t.sec);
 80062c8:	0021      	movs	r1, r4
 80062ca:	187b      	adds	r3, r7, r1
 80062cc:	781b      	ldrb	r3, [r3, #0]
 80062ce:	001a      	movs	r2, r3
 80062d0:	187b      	adds	r3, r7, r1
 80062d2:	785b      	ldrb	r3, [r3, #1]
 80062d4:	001c      	movs	r4, r3
 80062d6:	187b      	adds	r3, r7, r1
 80062d8:	789b      	ldrb	r3, [r3, #2]
 80062da:	4908      	ldr	r1, [pc, #32]	; (80062fc <drawStopwatchLap+0x6c>)
 80062dc:	250c      	movs	r5, #12
 80062de:	1978      	adds	r0, r7, r5
 80062e0:	9300      	str	r3, [sp, #0]
 80062e2:	0023      	movs	r3, r4
 80062e4:	f004 fcf0 	bl	800acc8 <siprintf>
	drawCenteredText(WIDTH/2, 84, str, hspi);
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	197a      	adds	r2, r7, r5
 80062ec:	2154      	movs	r1, #84	; 0x54
 80062ee:	2040      	movs	r0, #64	; 0x40
 80062f0:	f7fb fe94 	bl	800201c <drawCenteredText>
}
 80062f4:	46c0      	nop			; (mov r8, r8)
 80062f6:	46bd      	mov	sp, r7
 80062f8:	b00e      	add	sp, #56	; 0x38
 80062fa:	bdb0      	pop	{r4, r5, r7, pc}
 80062fc:	0800b660 	.word	0x0800b660

08006300 <initFace>:
// ---- end of drawing functions ----

// initializes variables. should be called at the start of the run
void initFace() {
 8006300:	b580      	push	{r7, lr}
 8006302:	af00      	add	r7, sp, #0
	faceOnDisplay = faceClock;
 8006304:	4b14      	ldr	r3, [pc, #80]	; (8006358 <initFace+0x58>)
 8006306:	2200      	movs	r2, #0
 8006308:	701a      	strb	r2, [r3, #0]
	updateFace.clock = 1;
 800630a:	4b14      	ldr	r3, [pc, #80]	; (800635c <initFace+0x5c>)
 800630c:	2201      	movs	r2, #1
 800630e:	701a      	strb	r2, [r3, #0]

	clockVars.dateToSet = (struct dates *)calloc(1, sizeof(struct dates *));
 8006310:	2104      	movs	r1, #4
 8006312:	2001      	movs	r0, #1
 8006314:	f004 fc14 	bl	800ab40 <calloc>
 8006318:	0003      	movs	r3, r0
 800631a:	001a      	movs	r2, r3
 800631c:	4b10      	ldr	r3, [pc, #64]	; (8006360 <initFace+0x60>)
 800631e:	605a      	str	r2, [r3, #4]
	clockVars.timeToSet = (struct times *)calloc(1, sizeof(struct times *));
 8006320:	2104      	movs	r1, #4
 8006322:	2001      	movs	r0, #1
 8006324:	f004 fc0c 	bl	800ab40 <calloc>
 8006328:	0003      	movs	r3, r0
 800632a:	001a      	movs	r2, r3
 800632c:	4b0c      	ldr	r3, [pc, #48]	; (8006360 <initFace+0x60>)
 800632e:	609a      	str	r2, [r3, #8]
	timerVars.timeToSet = (struct times *)calloc(1, sizeof(struct times *));
 8006330:	2104      	movs	r1, #4
 8006332:	2001      	movs	r0, #1
 8006334:	f004 fc04 	bl	800ab40 <calloc>
 8006338:	0003      	movs	r3, r0
 800633a:	001a      	movs	r2, r3
 800633c:	4b09      	ldr	r3, [pc, #36]	; (8006364 <initFace+0x64>)
 800633e:	605a      	str	r2, [r3, #4]
	alarmVars.alarmToSet = (struct alarmTimes *)calloc(1, sizeof(struct alarmTimes *));
 8006340:	2104      	movs	r1, #4
 8006342:	2001      	movs	r0, #1
 8006344:	f004 fbfc 	bl	800ab40 <calloc>
 8006348:	0003      	movs	r3, r0
 800634a:	001a      	movs	r2, r3
 800634c:	4b06      	ldr	r3, [pc, #24]	; (8006368 <initFace+0x68>)
 800634e:	605a      	str	r2, [r3, #4]
}
 8006350:	46c0      	nop			; (mov r8, r8)
 8006352:	46bd      	mov	sp, r7
 8006354:	bd80      	pop	{r7, pc}
 8006356:	46c0      	nop			; (mov r8, r8)
 8006358:	20000134 	.word	0x20000134
 800635c:	20000144 	.word	0x20000144
 8006360:	20000110 	.word	0x20000110
 8006364:	2000011c 	.word	0x2000011c
 8006368:	20000124 	.word	0x20000124

0800636c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 800636c:	480d      	ldr	r0, [pc, #52]	; (80063a4 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800636e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8006370:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8006372:	e003      	b.n	800637c <LoopCopyDataInit>

08006374 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8006374:	4b0c      	ldr	r3, [pc, #48]	; (80063a8 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 8006376:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8006378:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800637a:	3104      	adds	r1, #4

0800637c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 800637c:	480b      	ldr	r0, [pc, #44]	; (80063ac <LoopForever+0xa>)
  ldr  r3, =_edata
 800637e:	4b0c      	ldr	r3, [pc, #48]	; (80063b0 <LoopForever+0xe>)
  adds  r2, r0, r1
 8006380:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8006382:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8006384:	d3f6      	bcc.n	8006374 <CopyDataInit>
  ldr  r2, =_sbss
 8006386:	4a0b      	ldr	r2, [pc, #44]	; (80063b4 <LoopForever+0x12>)
  b  LoopFillZerobss
 8006388:	e002      	b.n	8006390 <LoopFillZerobss>

0800638a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 800638a:	2300      	movs	r3, #0
  str  r3, [r2]
 800638c:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800638e:	3204      	adds	r2, #4

08006390 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8006390:	4b09      	ldr	r3, [pc, #36]	; (80063b8 <LoopForever+0x16>)
  cmp  r2, r3
 8006392:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8006394:	d3f9      	bcc.n	800638a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8006396:	f7fe f855 	bl	8004444 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800639a:	f004 fbe1 	bl	800ab60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800639e:	f7fd f869 	bl	8003474 <main>

080063a2 <LoopForever>:

LoopForever:
    b LoopForever
 80063a2:	e7fe      	b.n	80063a2 <LoopForever>
   ldr   r0, =_estack
 80063a4:	20005000 	.word	0x20005000
  ldr  r3, =_sidata
 80063a8:	0800bfa4 	.word	0x0800bfa4
  ldr  r0, =_sdata
 80063ac:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80063b0:	200000d0 	.word	0x200000d0
  ldr  r2, =_sbss
 80063b4:	200000d0 	.word	0x200000d0
  ldr  r3, = _ebss
 80063b8:	200003a8 	.word	0x200003a8

080063bc <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80063bc:	e7fe      	b.n	80063bc <ADC1_COMP_IRQHandler>
	...

080063c0 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b082      	sub	sp, #8
 80063c4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80063c6:	1dfb      	adds	r3, r7, #7
 80063c8:	2200      	movs	r2, #0
 80063ca:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80063cc:	4b0b      	ldr	r3, [pc, #44]	; (80063fc <HAL_Init+0x3c>)
 80063ce:	681a      	ldr	r2, [r3, #0]
 80063d0:	4b0a      	ldr	r3, [pc, #40]	; (80063fc <HAL_Init+0x3c>)
 80063d2:	2140      	movs	r1, #64	; 0x40
 80063d4:	430a      	orrs	r2, r1
 80063d6:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80063d8:	2000      	movs	r0, #0
 80063da:	f000 f811 	bl	8006400 <HAL_InitTick>
 80063de:	1e03      	subs	r3, r0, #0
 80063e0:	d003      	beq.n	80063ea <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80063e2:	1dfb      	adds	r3, r7, #7
 80063e4:	2201      	movs	r2, #1
 80063e6:	701a      	strb	r2, [r3, #0]
 80063e8:	e001      	b.n	80063ee <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80063ea:	f7fd fda5 	bl	8003f38 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80063ee:	1dfb      	adds	r3, r7, #7
 80063f0:	781b      	ldrb	r3, [r3, #0]
}
 80063f2:	0018      	movs	r0, r3
 80063f4:	46bd      	mov	sp, r7
 80063f6:	b002      	add	sp, #8
 80063f8:	bd80      	pop	{r7, pc}
 80063fa:	46c0      	nop			; (mov r8, r8)
 80063fc:	40022000 	.word	0x40022000

08006400 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b084      	sub	sp, #16
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8006408:	230f      	movs	r3, #15
 800640a:	18fb      	adds	r3, r7, r3
 800640c:	2200      	movs	r2, #0
 800640e:	701a      	strb	r2, [r3, #0]

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8006410:	4b0f      	ldr	r3, [pc, #60]	; (8006450 <HAL_InitTick+0x50>)
 8006412:	681a      	ldr	r2, [r3, #0]
 8006414:	23fa      	movs	r3, #250	; 0xfa
 8006416:	0099      	lsls	r1, r3, #2
 8006418:	0010      	movs	r0, r2
 800641a:	f7f9 fe7d 	bl	8000118 <__udivsi3>
 800641e:	0003      	movs	r3, r0
 8006420:	0018      	movs	r0, r3
 8006422:	f000 fde4 	bl	8006fee <HAL_SYSTICK_Config>
 8006426:	1e03      	subs	r3, r0, #0
 8006428:	d004      	beq.n	8006434 <HAL_InitTick+0x34>
  {
    status = HAL_ERROR;
 800642a:	230f      	movs	r3, #15
 800642c:	18fb      	adds	r3, r7, r3
 800642e:	2201      	movs	r2, #1
 8006430:	701a      	strb	r2, [r3, #0]
 8006432:	e006      	b.n	8006442 <HAL_InitTick+0x42>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 8006434:	6879      	ldr	r1, [r7, #4]
 8006436:	2301      	movs	r3, #1
 8006438:	425b      	negs	r3, r3
 800643a:	2200      	movs	r2, #0
 800643c:	0018      	movs	r0, r3
 800643e:	f000 fda1 	bl	8006f84 <HAL_NVIC_SetPriority>
  }

  /* Return function status */
  return status;
 8006442:	230f      	movs	r3, #15
 8006444:	18fb      	adds	r3, r7, r3
 8006446:	781b      	ldrb	r3, [r3, #0]
}
 8006448:	0018      	movs	r0, r3
 800644a:	46bd      	mov	sp, r7
 800644c:	b004      	add	sp, #16
 800644e:	bd80      	pop	{r7, pc}
 8006450:	20000010 	.word	0x20000010

08006454 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	af00      	add	r7, sp, #0
  uwTick++;
 8006458:	4b03      	ldr	r3, [pc, #12]	; (8006468 <HAL_IncTick+0x14>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	1c5a      	adds	r2, r3, #1
 800645e:	4b02      	ldr	r3, [pc, #8]	; (8006468 <HAL_IncTick+0x14>)
 8006460:	601a      	str	r2, [r3, #0]
}
 8006462:	46c0      	nop			; (mov r8, r8)
 8006464:	46bd      	mov	sp, r7
 8006466:	bd80      	pop	{r7, pc}
 8006468:	200003a0 	.word	0x200003a0

0800646c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	af00      	add	r7, sp, #0
  return uwTick;
 8006470:	4b02      	ldr	r3, [pc, #8]	; (800647c <HAL_GetTick+0x10>)
 8006472:	681b      	ldr	r3, [r3, #0]
}
 8006474:	0018      	movs	r0, r3
 8006476:	46bd      	mov	sp, r7
 8006478:	bd80      	pop	{r7, pc}
 800647a:	46c0      	nop			; (mov r8, r8)
 800647c:	200003a0 	.word	0x200003a0

08006480 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b084      	sub	sp, #16
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006488:	f7ff fff0 	bl	800646c <HAL_GetTick>
 800648c:	0003      	movs	r3, r0
 800648e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	3301      	adds	r3, #1
 8006498:	d002      	beq.n	80064a0 <HAL_Delay+0x20>
  {
    wait++;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	3301      	adds	r3, #1
 800649e:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80064a0:	46c0      	nop			; (mov r8, r8)
 80064a2:	f7ff ffe3 	bl	800646c <HAL_GetTick>
 80064a6:	0002      	movs	r2, r0
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	1ad3      	subs	r3, r2, r3
 80064ac:	68fa      	ldr	r2, [r7, #12]
 80064ae:	429a      	cmp	r2, r3
 80064b0:	d8f7      	bhi.n	80064a2 <HAL_Delay+0x22>
  {
  }
}
 80064b2:	46c0      	nop			; (mov r8, r8)
 80064b4:	46bd      	mov	sp, r7
 80064b6:	b004      	add	sp, #16
 80064b8:	bd80      	pop	{r7, pc}
	...

080064bc <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b082      	sub	sp, #8
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d101      	bne.n	80064ce <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 80064ca:	2301      	movs	r3, #1
 80064cc:	e159      	b.n	8006782 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d10a      	bne.n	80064ec <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2200      	movs	r2, #0
 80064da:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2250      	movs	r2, #80	; 0x50
 80064e0:	2100      	movs	r1, #0
 80064e2:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	0018      	movs	r0, r3
 80064e8:	f7fd fd3a 	bl	8003f60 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064f0:	2210      	movs	r2, #16
 80064f2:	4013      	ands	r3, r2
 80064f4:	2b10      	cmp	r3, #16
 80064f6:	d005      	beq.n	8006504 <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	689b      	ldr	r3, [r3, #8]
 80064fe:	2204      	movs	r2, #4
 8006500:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8006502:	d00b      	beq.n	800651c <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006508:	2210      	movs	r2, #16
 800650a:	431a      	orrs	r2, r3
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2250      	movs	r2, #80	; 0x50
 8006514:	2100      	movs	r1, #0
 8006516:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8006518:	2301      	movs	r3, #1
 800651a:	e132      	b.n	8006782 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006520:	4a9a      	ldr	r2, [pc, #616]	; (800678c <HAL_ADC_Init+0x2d0>)
 8006522:	4013      	ands	r3, r2
 8006524:	2202      	movs	r2, #2
 8006526:	431a      	orrs	r2, r3
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	689b      	ldr	r3, [r3, #8]
 8006532:	2203      	movs	r2, #3
 8006534:	4013      	ands	r3, r2
 8006536:	2b01      	cmp	r3, #1
 8006538:	d108      	bne.n	800654c <HAL_ADC_Init+0x90>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	2201      	movs	r2, #1
 8006542:	4013      	ands	r3, r2
 8006544:	2b01      	cmp	r3, #1
 8006546:	d101      	bne.n	800654c <HAL_ADC_Init+0x90>
 8006548:	2301      	movs	r3, #1
 800654a:	e000      	b.n	800654e <HAL_ADC_Init+0x92>
 800654c:	2300      	movs	r3, #0
 800654e:	2b00      	cmp	r3, #0
 8006550:	d149      	bne.n	80065e6 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	685a      	ldr	r2, [r3, #4]
 8006556:	23c0      	movs	r3, #192	; 0xc0
 8006558:	061b      	lsls	r3, r3, #24
 800655a:	429a      	cmp	r2, r3
 800655c:	d00b      	beq.n	8006576 <HAL_ADC_Init+0xba>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	685a      	ldr	r2, [r3, #4]
 8006562:	2380      	movs	r3, #128	; 0x80
 8006564:	05db      	lsls	r3, r3, #23
 8006566:	429a      	cmp	r2, r3
 8006568:	d005      	beq.n	8006576 <HAL_ADC_Init+0xba>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	685a      	ldr	r2, [r3, #4]
 800656e:	2380      	movs	r3, #128	; 0x80
 8006570:	061b      	lsls	r3, r3, #24
 8006572:	429a      	cmp	r2, r3
 8006574:	d111      	bne.n	800659a <HAL_ADC_Init+0xde>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	691a      	ldr	r2, [r3, #16]
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	0092      	lsls	r2, r2, #2
 8006582:	0892      	lsrs	r2, r2, #2
 8006584:	611a      	str	r2, [r3, #16]
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	6919      	ldr	r1, [r3, #16]
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	685a      	ldr	r2, [r3, #4]
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	430a      	orrs	r2, r1
 8006596:	611a      	str	r2, [r3, #16]
 8006598:	e014      	b.n	80065c4 <HAL_ADC_Init+0x108>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	691a      	ldr	r2, [r3, #16]
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	0092      	lsls	r2, r2, #2
 80065a6:	0892      	lsrs	r2, r2, #2
 80065a8:	611a      	str	r2, [r3, #16]
 80065aa:	4b79      	ldr	r3, [pc, #484]	; (8006790 <HAL_ADC_Init+0x2d4>)
 80065ac:	681a      	ldr	r2, [r3, #0]
 80065ae:	4b78      	ldr	r3, [pc, #480]	; (8006790 <HAL_ADC_Init+0x2d4>)
 80065b0:	4978      	ldr	r1, [pc, #480]	; (8006794 <HAL_ADC_Init+0x2d8>)
 80065b2:	400a      	ands	r2, r1
 80065b4:	601a      	str	r2, [r3, #0]
 80065b6:	4b76      	ldr	r3, [pc, #472]	; (8006790 <HAL_ADC_Init+0x2d4>)
 80065b8:	6819      	ldr	r1, [r3, #0]
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	685a      	ldr	r2, [r3, #4]
 80065be:	4b74      	ldr	r3, [pc, #464]	; (8006790 <HAL_ADC_Init+0x2d4>)
 80065c0:	430a      	orrs	r2, r1
 80065c2:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	68da      	ldr	r2, [r3, #12]
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	2118      	movs	r1, #24
 80065d0:	438a      	bics	r2, r1
 80065d2:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	68d9      	ldr	r1, [r3, #12]
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	689a      	ldr	r2, [r3, #8]
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	430a      	orrs	r2, r1
 80065e4:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 80065e6:	4b6a      	ldr	r3, [pc, #424]	; (8006790 <HAL_ADC_Init+0x2d4>)
 80065e8:	681a      	ldr	r2, [r3, #0]
 80065ea:	4b69      	ldr	r3, [pc, #420]	; (8006790 <HAL_ADC_Init+0x2d4>)
 80065ec:	496a      	ldr	r1, [pc, #424]	; (8006798 <HAL_ADC_Init+0x2dc>)
 80065ee:	400a      	ands	r2, r1
 80065f0:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 80065f2:	4b67      	ldr	r3, [pc, #412]	; (8006790 <HAL_ADC_Init+0x2d4>)
 80065f4:	6819      	ldr	r1, [r3, #0]
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065fa:	065a      	lsls	r2, r3, #25
 80065fc:	4b64      	ldr	r3, [pc, #400]	; (8006790 <HAL_ADC_Init+0x2d4>)
 80065fe:	430a      	orrs	r2, r1
 8006600:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	689a      	ldr	r2, [r3, #8]
 8006608:	2380      	movs	r3, #128	; 0x80
 800660a:	055b      	lsls	r3, r3, #21
 800660c:	4013      	ands	r3, r2
 800660e:	d108      	bne.n	8006622 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	689a      	ldr	r2, [r3, #8]
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	2180      	movs	r1, #128	; 0x80
 800661c:	0549      	lsls	r1, r1, #21
 800661e:	430a      	orrs	r2, r1
 8006620:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	68da      	ldr	r2, [r3, #12]
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	495b      	ldr	r1, [pc, #364]	; (800679c <HAL_ADC_Init+0x2e0>)
 800662e:	400a      	ands	r2, r1
 8006630:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	68d9      	ldr	r1, [r3, #12]
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	691b      	ldr	r3, [r3, #16]
 8006640:	2b02      	cmp	r3, #2
 8006642:	d101      	bne.n	8006648 <HAL_ADC_Init+0x18c>
 8006644:	2304      	movs	r3, #4
 8006646:	e000      	b.n	800664a <HAL_ADC_Init+0x18e>
 8006648:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800664a:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2020      	movs	r0, #32
 8006650:	5c1b      	ldrb	r3, [r3, r0]
 8006652:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8006654:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	202c      	movs	r0, #44	; 0x2c
 800665a:	5c1b      	ldrb	r3, [r3, r0]
 800665c:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800665e:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8006664:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	699b      	ldr	r3, [r3, #24]
 800666a:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 800666c:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	69db      	ldr	r3, [r3, #28]
 8006672:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8006674:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	430a      	orrs	r2, r1
 800667c:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006682:	23c2      	movs	r3, #194	; 0xc2
 8006684:	33ff      	adds	r3, #255	; 0xff
 8006686:	429a      	cmp	r2, r3
 8006688:	d00b      	beq.n	80066a2 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	68d9      	ldr	r1, [r3, #12]
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8006698:	431a      	orrs	r2, r3
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	430a      	orrs	r2, r1
 80066a0:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2221      	movs	r2, #33	; 0x21
 80066a6:	5c9b      	ldrb	r3, [r3, r2]
 80066a8:	2b01      	cmp	r3, #1
 80066aa:	d11a      	bne.n	80066e2 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2220      	movs	r2, #32
 80066b0:	5c9b      	ldrb	r3, [r3, r2]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d109      	bne.n	80066ca <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	68da      	ldr	r2, [r3, #12]
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	2180      	movs	r1, #128	; 0x80
 80066c2:	0249      	lsls	r1, r1, #9
 80066c4:	430a      	orrs	r2, r1
 80066c6:	60da      	str	r2, [r3, #12]
 80066c8:	e00b      	b.n	80066e2 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066ce:	2220      	movs	r2, #32
 80066d0:	431a      	orrs	r2, r3
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066da:	2201      	movs	r2, #1
 80066dc:	431a      	orrs	r2, r3
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066e6:	2b01      	cmp	r3, #1
 80066e8:	d11f      	bne.n	800672a <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	691a      	ldr	r2, [r3, #16]
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	492a      	ldr	r1, [pc, #168]	; (80067a0 <HAL_ADC_Init+0x2e4>)
 80066f6:	400a      	ands	r2, r1
 80066f8:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	6919      	ldr	r1, [r3, #16]
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8006708:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 800670e:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	430a      	orrs	r2, r1
 8006716:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	691a      	ldr	r2, [r3, #16]
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	2101      	movs	r1, #1
 8006724:	430a      	orrs	r2, r1
 8006726:	611a      	str	r2, [r3, #16]
 8006728:	e00e      	b.n	8006748 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	691b      	ldr	r3, [r3, #16]
 8006730:	2201      	movs	r2, #1
 8006732:	4013      	ands	r3, r2
 8006734:	2b01      	cmp	r3, #1
 8006736:	d107      	bne.n	8006748 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	691a      	ldr	r2, [r3, #16]
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	2101      	movs	r1, #1
 8006744:	438a      	bics	r2, r1
 8006746:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	695a      	ldr	r2, [r3, #20]
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	2107      	movs	r1, #7
 8006754:	438a      	bics	r2, r1
 8006756:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	6959      	ldr	r1, [r3, #20]
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	430a      	orrs	r2, r1
 8006768:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2200      	movs	r2, #0
 800676e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006774:	2203      	movs	r2, #3
 8006776:	4393      	bics	r3, r2
 8006778:	2201      	movs	r2, #1
 800677a:	431a      	orrs	r2, r3
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8006780:	2300      	movs	r3, #0
}
 8006782:	0018      	movs	r0, r3
 8006784:	46bd      	mov	sp, r7
 8006786:	b002      	add	sp, #8
 8006788:	bd80      	pop	{r7, pc}
 800678a:	46c0      	nop			; (mov r8, r8)
 800678c:	fffffefd 	.word	0xfffffefd
 8006790:	40012708 	.word	0x40012708
 8006794:	ffc3ffff 	.word	0xffc3ffff
 8006798:	fdffffff 	.word	0xfdffffff
 800679c:	fffe0219 	.word	0xfffe0219
 80067a0:	fffffc03 	.word	0xfffffc03

080067a4 <HAL_ADC_Stop>:
  *         case of auto_injection mode), disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80067a4:	b5b0      	push	{r4, r5, r7, lr}
 80067a6:	b084      	sub	sp, #16
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80067ac:	230f      	movs	r3, #15
 80067ae:	18fb      	adds	r3, r7, r3
 80067b0:	2200      	movs	r2, #0
 80067b2:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2250      	movs	r2, #80	; 0x50
 80067b8:	5c9b      	ldrb	r3, [r3, r2]
 80067ba:	2b01      	cmp	r3, #1
 80067bc:	d101      	bne.n	80067c2 <HAL_ADC_Stop+0x1e>
 80067be:	2302      	movs	r3, #2
 80067c0:	e02a      	b.n	8006818 <HAL_ADC_Stop+0x74>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2250      	movs	r2, #80	; 0x50
 80067c6:	2101      	movs	r1, #1
 80067c8:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80067ca:	250f      	movs	r5, #15
 80067cc:	197c      	adds	r4, r7, r5
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	0018      	movs	r0, r3
 80067d2:	f000 fa9b 	bl	8006d0c <ADC_ConversionStop>
 80067d6:	0003      	movs	r3, r0
 80067d8:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80067da:	197b      	adds	r3, r7, r5
 80067dc:	781b      	ldrb	r3, [r3, #0]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d113      	bne.n	800680a <HAL_ADC_Stop+0x66>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80067e2:	250f      	movs	r5, #15
 80067e4:	197c      	adds	r4, r7, r5
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	0018      	movs	r0, r3
 80067ea:	f000 fa2f 	bl	8006c4c <ADC_Disable>
 80067ee:	0003      	movs	r3, r0
 80067f0:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80067f2:	197b      	adds	r3, r7, r5
 80067f4:	781b      	ldrb	r3, [r3, #0]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d107      	bne.n	800680a <HAL_ADC_Stop+0x66>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067fe:	4a08      	ldr	r2, [pc, #32]	; (8006820 <HAL_ADC_Stop+0x7c>)
 8006800:	4013      	ands	r3, r2
 8006802:	2201      	movs	r2, #1
 8006804:	431a      	orrs	r2, r3
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2250      	movs	r2, #80	; 0x50
 800680e:	2100      	movs	r1, #0
 8006810:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8006812:	230f      	movs	r3, #15
 8006814:	18fb      	adds	r3, r7, r3
 8006816:	781b      	ldrb	r3, [r3, #0]
}
 8006818:	0018      	movs	r0, r3
 800681a:	46bd      	mov	sp, r7
 800681c:	b004      	add	sp, #16
 800681e:	bdb0      	pop	{r4, r5, r7, pc}
 8006820:	fffffefe 	.word	0xfffffefe

08006824 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b084      	sub	sp, #16
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
 800682c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800682e:	2300      	movs	r3, #0
 8006830:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 8006832:	2300      	movs	r3, #0
 8006834:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	695b      	ldr	r3, [r3, #20]
 800683a:	2b08      	cmp	r3, #8
 800683c:	d102      	bne.n	8006844 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800683e:	2308      	movs	r3, #8
 8006840:	60fb      	str	r3, [r7, #12]
 8006842:	e014      	b.n	800686e <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	68db      	ldr	r3, [r3, #12]
 800684a:	2201      	movs	r2, #1
 800684c:	4013      	ands	r3, r2
 800684e:	2b01      	cmp	r3, #1
 8006850:	d10b      	bne.n	800686a <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006856:	2220      	movs	r2, #32
 8006858:	431a      	orrs	r2, r3
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2250      	movs	r2, #80	; 0x50
 8006862:	2100      	movs	r1, #0
 8006864:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 8006866:	2301      	movs	r3, #1
 8006868:	e06c      	b.n	8006944 <HAL_ADC_PollForConversion+0x120>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800686a:	230c      	movs	r3, #12
 800686c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800686e:	f7ff fdfd 	bl	800646c <HAL_GetTick>
 8006872:	0003      	movs	r3, r0
 8006874:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8006876:	e019      	b.n	80068ac <HAL_ADC_PollForConversion+0x88>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	3301      	adds	r3, #1
 800687c:	d016      	beq.n	80068ac <HAL_ADC_PollForConversion+0x88>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d007      	beq.n	8006894 <HAL_ADC_PollForConversion+0x70>
 8006884:	f7ff fdf2 	bl	800646c <HAL_GetTick>
 8006888:	0002      	movs	r2, r0
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	1ad3      	subs	r3, r2, r3
 800688e:	683a      	ldr	r2, [r7, #0]
 8006890:	429a      	cmp	r2, r3
 8006892:	d20b      	bcs.n	80068ac <HAL_ADC_PollForConversion+0x88>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006898:	2204      	movs	r2, #4
 800689a:	431a      	orrs	r2, r3
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2250      	movs	r2, #80	; 0x50
 80068a4:	2100      	movs	r1, #0
 80068a6:	5499      	strb	r1, [r3, r2]
        
        return HAL_TIMEOUT;
 80068a8:	2303      	movs	r3, #3
 80068aa:	e04b      	b.n	8006944 <HAL_ADC_PollForConversion+0x120>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	68fa      	ldr	r2, [r7, #12]
 80068b4:	4013      	ands	r3, r2
 80068b6:	d0df      	beq.n	8006878 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068bc:	2280      	movs	r2, #128	; 0x80
 80068be:	0092      	lsls	r2, r2, #2
 80068c0:	431a      	orrs	r2, r3
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	68da      	ldr	r2, [r3, #12]
 80068cc:	23c0      	movs	r3, #192	; 0xc0
 80068ce:	011b      	lsls	r3, r3, #4
 80068d0:	4013      	ands	r3, r2
 80068d2:	d12e      	bne.n	8006932 <HAL_ADC_PollForConversion+0x10e>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2220      	movs	r2, #32
 80068d8:	5c9b      	ldrb	r3, [r3, r2]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d129      	bne.n	8006932 <HAL_ADC_PollForConversion+0x10e>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	2208      	movs	r2, #8
 80068e6:	4013      	ands	r3, r2
 80068e8:	2b08      	cmp	r3, #8
 80068ea:	d122      	bne.n	8006932 <HAL_ADC_PollForConversion+0x10e>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	689b      	ldr	r3, [r3, #8]
 80068f2:	2204      	movs	r2, #4
 80068f4:	4013      	ands	r3, r2
 80068f6:	d110      	bne.n	800691a <HAL_ADC_PollForConversion+0xf6>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	685a      	ldr	r2, [r3, #4]
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	210c      	movs	r1, #12
 8006904:	438a      	bics	r2, r1
 8006906:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800690c:	4a0f      	ldr	r2, [pc, #60]	; (800694c <HAL_ADC_PollForConversion+0x128>)
 800690e:	4013      	ands	r3, r2
 8006910:	2201      	movs	r2, #1
 8006912:	431a      	orrs	r2, r3
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	655a      	str	r2, [r3, #84]	; 0x54
 8006918:	e00b      	b.n	8006932 <HAL_ADC_PollForConversion+0x10e>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800691e:	2220      	movs	r2, #32
 8006920:	431a      	orrs	r2, r3
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800692a:	2201      	movs	r2, #1
 800692c:	431a      	orrs	r2, r3
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	659a      	str	r2, [r3, #88]	; 0x58
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	699b      	ldr	r3, [r3, #24]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d103      	bne.n	8006942 <HAL_ADC_PollForConversion+0x11e>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	220c      	movs	r2, #12
 8006940:	601a      	str	r2, [r3, #0]
  }
  
  /* Return function status */
  return HAL_OK;
 8006942:	2300      	movs	r3, #0
}
 8006944:	0018      	movs	r0, r3
 8006946:	46bd      	mov	sp, r7
 8006948:	b004      	add	sp, #16
 800694a:	bd80      	pop	{r7, pc}
 800694c:	fffffefe 	.word	0xfffffefe

08006950 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8006950:	b590      	push	{r4, r7, lr}
 8006952:	b085      	sub	sp, #20
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006958:	230f      	movs	r3, #15
 800695a:	18fb      	adds	r3, r7, r3
 800695c:	2200      	movs	r2, #0
 800695e:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	689b      	ldr	r3, [r3, #8]
 8006966:	2204      	movs	r2, #4
 8006968:	4013      	ands	r3, r2
 800696a:	d156      	bne.n	8006a1a <HAL_ADC_Start_IT+0xca>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2250      	movs	r2, #80	; 0x50
 8006970:	5c9b      	ldrb	r3, [r3, r2]
 8006972:	2b01      	cmp	r3, #1
 8006974:	d101      	bne.n	800697a <HAL_ADC_Start_IT+0x2a>
 8006976:	2302      	movs	r3, #2
 8006978:	e056      	b.n	8006a28 <HAL_ADC_Start_IT+0xd8>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2250      	movs	r2, #80	; 0x50
 800697e:	2101      	movs	r1, #1
 8006980:	5499      	strb	r1, [r3, r2]
    
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	69db      	ldr	r3, [r3, #28]
 8006986:	2b01      	cmp	r3, #1
 8006988:	d007      	beq.n	800699a <HAL_ADC_Start_IT+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800698a:	230f      	movs	r3, #15
 800698c:	18fc      	adds	r4, r7, r3
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	0018      	movs	r0, r3
 8006992:	f000 f8fb 	bl	8006b8c <ADC_Enable>
 8006996:	0003      	movs	r3, r0
 8006998:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800699a:	230f      	movs	r3, #15
 800699c:	18fb      	adds	r3, r7, r3
 800699e:	781b      	ldrb	r3, [r3, #0]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d13e      	bne.n	8006a22 <HAL_ADC_Start_IT+0xd2>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069a8:	4a21      	ldr	r2, [pc, #132]	; (8006a30 <HAL_ADC_Start_IT+0xe0>)
 80069aa:	4013      	ands	r3, r2
 80069ac:	2280      	movs	r2, #128	; 0x80
 80069ae:	0052      	lsls	r2, r2, #1
 80069b0:	431a      	orrs	r2, r3
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2200      	movs	r2, #0
 80069ba:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2250      	movs	r2, #80	; 0x50
 80069c0:	2100      	movs	r1, #0
 80069c2:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	221c      	movs	r2, #28
 80069ca:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	695b      	ldr	r3, [r3, #20]
 80069d0:	2b08      	cmp	r3, #8
 80069d2:	d110      	bne.n	80069f6 <HAL_ADC_Start_IT+0xa6>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	685a      	ldr	r2, [r3, #4]
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	2104      	movs	r1, #4
 80069e0:	438a      	bics	r2, r1
 80069e2:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS | ADC_IT_OVR));
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	685a      	ldr	r2, [r3, #4]
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	2118      	movs	r1, #24
 80069f0:	430a      	orrs	r2, r1
 80069f2:	605a      	str	r2, [r3, #4]
          break;
 80069f4:	e008      	b.n	8006a08 <HAL_ADC_Start_IT+0xb8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	685a      	ldr	r2, [r3, #4]
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	211c      	movs	r1, #28
 8006a02:	430a      	orrs	r2, r1
 8006a04:	605a      	str	r2, [r3, #4]
          break;
 8006a06:	46c0      	nop			; (mov r8, r8)
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	689a      	ldr	r2, [r3, #8]
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	2104      	movs	r1, #4
 8006a14:	430a      	orrs	r2, r1
 8006a16:	609a      	str	r2, [r3, #8]
 8006a18:	e003      	b.n	8006a22 <HAL_ADC_Start_IT+0xd2>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8006a1a:	230f      	movs	r3, #15
 8006a1c:	18fb      	adds	r3, r7, r3
 8006a1e:	2202      	movs	r2, #2
 8006a20:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8006a22:	230f      	movs	r3, #15
 8006a24:	18fb      	adds	r3, r7, r3
 8006a26:	781b      	ldrb	r3, [r3, #0]
}
 8006a28:	0018      	movs	r0, r3
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	b005      	add	sp, #20
 8006a2e:	bd90      	pop	{r4, r7, pc}
 8006a30:	fffff0fe 	.word	0xfffff0fe

08006a34 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b082      	sub	sp, #8
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8006a42:	0018      	movs	r0, r3
 8006a44:	46bd      	mov	sp, r7
 8006a46:	b002      	add	sp, #8
 8006a48:	bd80      	pop	{r7, pc}
	...

08006a4c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b082      	sub	sp, #8
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
 8006a54:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2250      	movs	r2, #80	; 0x50
 8006a5a:	5c9b      	ldrb	r3, [r3, r2]
 8006a5c:	2b01      	cmp	r3, #1
 8006a5e:	d101      	bne.n	8006a64 <HAL_ADC_ConfigChannel+0x18>
 8006a60:	2302      	movs	r3, #2
 8006a62:	e085      	b.n	8006b70 <HAL_ADC_ConfigChannel+0x124>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2250      	movs	r2, #80	; 0x50
 8006a68:	2101      	movs	r1, #1
 8006a6a:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	689b      	ldr	r3, [r3, #8]
 8006a72:	2204      	movs	r2, #4
 8006a74:	4013      	ands	r3, r2
 8006a76:	d00b      	beq.n	8006a90 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a7c:	2220      	movs	r2, #32
 8006a7e:	431a      	orrs	r2, r3
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2250      	movs	r2, #80	; 0x50
 8006a88:	2100      	movs	r1, #0
 8006a8a:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	e06f      	b.n	8006b70 <HAL_ADC_ConfigChannel+0x124>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	685b      	ldr	r3, [r3, #4]
 8006a94:	4a38      	ldr	r2, [pc, #224]	; (8006b78 <HAL_ADC_ConfigChannel+0x12c>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d035      	beq.n	8006b06 <HAL_ADC_ConfigChannel+0xba>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	035b      	lsls	r3, r3, #13
 8006aa6:	0b5a      	lsrs	r2, r3, #13
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	430a      	orrs	r2, r1
 8006aae:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	681a      	ldr	r2, [r3, #0]
 8006ab4:	2380      	movs	r3, #128	; 0x80
 8006ab6:	02db      	lsls	r3, r3, #11
 8006ab8:	4013      	ands	r3, r2
 8006aba:	d009      	beq.n	8006ad0 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 8006abc:	4b2f      	ldr	r3, [pc, #188]	; (8006b7c <HAL_ADC_ConfigChannel+0x130>)
 8006abe:	681a      	ldr	r2, [r3, #0]
 8006ac0:	4b2e      	ldr	r3, [pc, #184]	; (8006b7c <HAL_ADC_ConfigChannel+0x130>)
 8006ac2:	2180      	movs	r1, #128	; 0x80
 8006ac4:	0409      	lsls	r1, r1, #16
 8006ac6:	430a      	orrs	r2, r1
 8006ac8:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8006aca:	200a      	movs	r0, #10
 8006acc:	f000 f964 	bl	8006d98 <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	681a      	ldr	r2, [r3, #0]
 8006ad4:	2380      	movs	r3, #128	; 0x80
 8006ad6:	029b      	lsls	r3, r3, #10
 8006ad8:	4013      	ands	r3, r2
 8006ada:	d006      	beq.n	8006aea <HAL_ADC_ConfigChannel+0x9e>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 8006adc:	4b27      	ldr	r3, [pc, #156]	; (8006b7c <HAL_ADC_ConfigChannel+0x130>)
 8006ade:	681a      	ldr	r2, [r3, #0]
 8006ae0:	4b26      	ldr	r3, [pc, #152]	; (8006b7c <HAL_ADC_ConfigChannel+0x130>)
 8006ae2:	2180      	movs	r1, #128	; 0x80
 8006ae4:	03c9      	lsls	r1, r1, #15
 8006ae6:	430a      	orrs	r2, r1
 8006ae8:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	681a      	ldr	r2, [r3, #0]
 8006aee:	2380      	movs	r3, #128	; 0x80
 8006af0:	025b      	lsls	r3, r3, #9
 8006af2:	4013      	ands	r3, r2
 8006af4:	d037      	beq.n	8006b66 <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR |= ADC_CCR_VLCDEN;   
 8006af6:	4b21      	ldr	r3, [pc, #132]	; (8006b7c <HAL_ADC_ConfigChannel+0x130>)
 8006af8:	681a      	ldr	r2, [r3, #0]
 8006afa:	4b20      	ldr	r3, [pc, #128]	; (8006b7c <HAL_ADC_ConfigChannel+0x130>)
 8006afc:	2180      	movs	r1, #128	; 0x80
 8006afe:	0449      	lsls	r1, r1, #17
 8006b00:	430a      	orrs	r2, r1
 8006b02:	601a      	str	r2, [r3, #0]
 8006b04:	e02f      	b.n	8006b66 <HAL_ADC_ConfigChannel+0x11a>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	035b      	lsls	r3, r3, #13
 8006b12:	0b5b      	lsrs	r3, r3, #13
 8006b14:	43d9      	mvns	r1, r3
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	400a      	ands	r2, r1
 8006b1c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	681a      	ldr	r2, [r3, #0]
 8006b22:	2380      	movs	r3, #128	; 0x80
 8006b24:	02db      	lsls	r3, r3, #11
 8006b26:	4013      	ands	r3, r2
 8006b28:	d005      	beq.n	8006b36 <HAL_ADC_ConfigChannel+0xea>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 8006b2a:	4b14      	ldr	r3, [pc, #80]	; (8006b7c <HAL_ADC_ConfigChannel+0x130>)
 8006b2c:	681a      	ldr	r2, [r3, #0]
 8006b2e:	4b13      	ldr	r3, [pc, #76]	; (8006b7c <HAL_ADC_ConfigChannel+0x130>)
 8006b30:	4913      	ldr	r1, [pc, #76]	; (8006b80 <HAL_ADC_ConfigChannel+0x134>)
 8006b32:	400a      	ands	r2, r1
 8006b34:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	681a      	ldr	r2, [r3, #0]
 8006b3a:	2380      	movs	r3, #128	; 0x80
 8006b3c:	029b      	lsls	r3, r3, #10
 8006b3e:	4013      	ands	r3, r2
 8006b40:	d005      	beq.n	8006b4e <HAL_ADC_ConfigChannel+0x102>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8006b42:	4b0e      	ldr	r3, [pc, #56]	; (8006b7c <HAL_ADC_ConfigChannel+0x130>)
 8006b44:	681a      	ldr	r2, [r3, #0]
 8006b46:	4b0d      	ldr	r3, [pc, #52]	; (8006b7c <HAL_ADC_ConfigChannel+0x130>)
 8006b48:	490e      	ldr	r1, [pc, #56]	; (8006b84 <HAL_ADC_ConfigChannel+0x138>)
 8006b4a:	400a      	ands	r2, r1
 8006b4c:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	681a      	ldr	r2, [r3, #0]
 8006b52:	2380      	movs	r3, #128	; 0x80
 8006b54:	025b      	lsls	r3, r3, #9
 8006b56:	4013      	ands	r3, r2
 8006b58:	d005      	beq.n	8006b66 <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR &= ~ADC_CCR_VLCDEN;   
 8006b5a:	4b08      	ldr	r3, [pc, #32]	; (8006b7c <HAL_ADC_ConfigChannel+0x130>)
 8006b5c:	681a      	ldr	r2, [r3, #0]
 8006b5e:	4b07      	ldr	r3, [pc, #28]	; (8006b7c <HAL_ADC_ConfigChannel+0x130>)
 8006b60:	4909      	ldr	r1, [pc, #36]	; (8006b88 <HAL_ADC_ConfigChannel+0x13c>)
 8006b62:	400a      	ands	r2, r1
 8006b64:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2250      	movs	r2, #80	; 0x50
 8006b6a:	2100      	movs	r1, #0
 8006b6c:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 8006b6e:	2300      	movs	r3, #0
}
 8006b70:	0018      	movs	r0, r3
 8006b72:	46bd      	mov	sp, r7
 8006b74:	b002      	add	sp, #8
 8006b76:	bd80      	pop	{r7, pc}
 8006b78:	00001001 	.word	0x00001001
 8006b7c:	40012708 	.word	0x40012708
 8006b80:	ff7fffff 	.word	0xff7fffff
 8006b84:	ffbfffff 	.word	0xffbfffff
 8006b88:	feffffff 	.word	0xfeffffff

08006b8c <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b084      	sub	sp, #16
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006b94:	2300      	movs	r3, #0
 8006b96:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	689b      	ldr	r3, [r3, #8]
 8006b9e:	2203      	movs	r2, #3
 8006ba0:	4013      	ands	r3, r2
 8006ba2:	2b01      	cmp	r3, #1
 8006ba4:	d108      	bne.n	8006bb8 <ADC_Enable+0x2c>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	2201      	movs	r2, #1
 8006bae:	4013      	ands	r3, r2
 8006bb0:	2b01      	cmp	r3, #1
 8006bb2:	d101      	bne.n	8006bb8 <ADC_Enable+0x2c>
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	e000      	b.n	8006bba <ADC_Enable+0x2e>
 8006bb8:	2300      	movs	r3, #0
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d13f      	bne.n	8006c3e <ADC_Enable+0xb2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	689b      	ldr	r3, [r3, #8]
 8006bc4:	4a20      	ldr	r2, [pc, #128]	; (8006c48 <ADC_Enable+0xbc>)
 8006bc6:	4013      	ands	r3, r2
 8006bc8:	d00d      	beq.n	8006be6 <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bce:	2210      	movs	r2, #16
 8006bd0:	431a      	orrs	r2, r3
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bda:	2201      	movs	r2, #1
 8006bdc:	431a      	orrs	r2, r3
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	659a      	str	r2, [r3, #88]	; 0x58
      
      return HAL_ERROR;
 8006be2:	2301      	movs	r3, #1
 8006be4:	e02c      	b.n	8006c40 <ADC_Enable+0xb4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	689a      	ldr	r2, [r3, #8]
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	2101      	movs	r1, #1
 8006bf2:	430a      	orrs	r2, r1
 8006bf4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8006bf6:	2001      	movs	r0, #1
 8006bf8:	f000 f8ce 	bl	8006d98 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8006bfc:	f7ff fc36 	bl	800646c <HAL_GetTick>
 8006c00:	0003      	movs	r3, r0
 8006c02:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8006c04:	e014      	b.n	8006c30 <ADC_Enable+0xa4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006c06:	f7ff fc31 	bl	800646c <HAL_GetTick>
 8006c0a:	0002      	movs	r2, r0
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	1ad3      	subs	r3, r2, r3
 8006c10:	2b0a      	cmp	r3, #10
 8006c12:	d90d      	bls.n	8006c30 <ADC_Enable+0xa4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c18:	2210      	movs	r2, #16
 8006c1a:	431a      	orrs	r2, r3
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c24:	2201      	movs	r2, #1
 8006c26:	431a      	orrs	r2, r3
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	e007      	b.n	8006c40 <ADC_Enable+0xb4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	2201      	movs	r2, #1
 8006c38:	4013      	ands	r3, r2
 8006c3a:	2b01      	cmp	r3, #1
 8006c3c:	d1e3      	bne.n	8006c06 <ADC_Enable+0x7a>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8006c3e:	2300      	movs	r3, #0
}
 8006c40:	0018      	movs	r0, r3
 8006c42:	46bd      	mov	sp, r7
 8006c44:	b004      	add	sp, #16
 8006c46:	bd80      	pop	{r7, pc}
 8006c48:	80000017 	.word	0x80000017

08006c4c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b084      	sub	sp, #16
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006c54:	2300      	movs	r3, #0
 8006c56:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	689b      	ldr	r3, [r3, #8]
 8006c5e:	2203      	movs	r2, #3
 8006c60:	4013      	ands	r3, r2
 8006c62:	2b01      	cmp	r3, #1
 8006c64:	d108      	bne.n	8006c78 <ADC_Disable+0x2c>
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	2201      	movs	r2, #1
 8006c6e:	4013      	ands	r3, r2
 8006c70:	2b01      	cmp	r3, #1
 8006c72:	d101      	bne.n	8006c78 <ADC_Disable+0x2c>
 8006c74:	2301      	movs	r3, #1
 8006c76:	e000      	b.n	8006c7a <ADC_Disable+0x2e>
 8006c78:	2300      	movs	r3, #0
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d041      	beq.n	8006d02 <ADC_Disable+0xb6>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	689b      	ldr	r3, [r3, #8]
 8006c84:	2205      	movs	r2, #5
 8006c86:	4013      	ands	r3, r2
 8006c88:	2b01      	cmp	r3, #1
 8006c8a:	d110      	bne.n	8006cae <ADC_Disable+0x62>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	689a      	ldr	r2, [r3, #8]
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	2102      	movs	r1, #2
 8006c98:	430a      	orrs	r2, r1
 8006c9a:	609a      	str	r2, [r3, #8]
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	2203      	movs	r2, #3
 8006ca2:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8006ca4:	f7ff fbe2 	bl	800646c <HAL_GetTick>
 8006ca8:	0003      	movs	r3, r0
 8006caa:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8006cac:	e022      	b.n	8006cf4 <ADC_Disable+0xa8>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cb2:	2210      	movs	r2, #16
 8006cb4:	431a      	orrs	r2, r3
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cbe:	2201      	movs	r2, #1
 8006cc0:	431a      	orrs	r2, r3
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8006cc6:	2301      	movs	r3, #1
 8006cc8:	e01c      	b.n	8006d04 <ADC_Disable+0xb8>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8006cca:	f7ff fbcf 	bl	800646c <HAL_GetTick>
 8006cce:	0002      	movs	r2, r0
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	1ad3      	subs	r3, r2, r3
 8006cd4:	2b0a      	cmp	r3, #10
 8006cd6:	d90d      	bls.n	8006cf4 <ADC_Disable+0xa8>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cdc:	2210      	movs	r2, #16
 8006cde:	431a      	orrs	r2, r3
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ce8:	2201      	movs	r2, #1
 8006cea:	431a      	orrs	r2, r3
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	e007      	b.n	8006d04 <ADC_Disable+0xb8>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	689b      	ldr	r3, [r3, #8]
 8006cfa:	2201      	movs	r2, #1
 8006cfc:	4013      	ands	r3, r2
 8006cfe:	2b01      	cmp	r3, #1
 8006d00:	d0e3      	beq.n	8006cca <ADC_Disable+0x7e>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8006d02:	2300      	movs	r3, #0
}
 8006d04:	0018      	movs	r0, r3
 8006d06:	46bd      	mov	sp, r7
 8006d08:	b004      	add	sp, #16
 8006d0a:	bd80      	pop	{r7, pc}

08006d0c <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b084      	sub	sp, #16
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006d14:	2300      	movs	r3, #0
 8006d16:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	689b      	ldr	r3, [r3, #8]
 8006d1e:	2204      	movs	r2, #4
 8006d20:	4013      	ands	r3, r2
 8006d22:	d034      	beq.n	8006d8e <ADC_ConversionStop+0x82>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	689b      	ldr	r3, [r3, #8]
 8006d2a:	2204      	movs	r2, #4
 8006d2c:	4013      	ands	r3, r2
 8006d2e:	2b04      	cmp	r3, #4
 8006d30:	d10d      	bne.n	8006d4e <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	689b      	ldr	r3, [r3, #8]
 8006d38:	2202      	movs	r2, #2
 8006d3a:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8006d3c:	d107      	bne.n	8006d4e <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	689a      	ldr	r2, [r3, #8]
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	2110      	movs	r1, #16
 8006d4a:	430a      	orrs	r2, r1
 8006d4c:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8006d4e:	f7ff fb8d 	bl	800646c <HAL_GetTick>
 8006d52:	0003      	movs	r3, r0
 8006d54:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8006d56:	e014      	b.n	8006d82 <ADC_ConversionStop+0x76>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8006d58:	f7ff fb88 	bl	800646c <HAL_GetTick>
 8006d5c:	0002      	movs	r2, r0
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	1ad3      	subs	r3, r2, r3
 8006d62:	2b0a      	cmp	r3, #10
 8006d64:	d90d      	bls.n	8006d82 <ADC_ConversionStop+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d6a:	2210      	movs	r2, #16
 8006d6c:	431a      	orrs	r2, r3
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	655a      	str	r2, [r3, #84]	; 0x54
      
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d76:	2201      	movs	r2, #1
 8006d78:	431a      	orrs	r2, r3
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 8006d7e:	2301      	movs	r3, #1
 8006d80:	e006      	b.n	8006d90 <ADC_ConversionStop+0x84>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	689b      	ldr	r3, [r3, #8]
 8006d88:	2204      	movs	r2, #4
 8006d8a:	4013      	ands	r3, r2
 8006d8c:	d1e4      	bne.n	8006d58 <ADC_ConversionStop+0x4c>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8006d8e:	2300      	movs	r3, #0
}
 8006d90:	0018      	movs	r0, r3
 8006d92:	46bd      	mov	sp, r7
 8006d94:	b004      	add	sp, #16
 8006d96:	bd80      	pop	{r7, pc}

08006d98 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b084      	sub	sp, #16
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8006da0:	4b0a      	ldr	r3, [pc, #40]	; (8006dcc <ADC_DelayMicroSecond+0x34>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	490a      	ldr	r1, [pc, #40]	; (8006dd0 <ADC_DelayMicroSecond+0x38>)
 8006da6:	0018      	movs	r0, r3
 8006da8:	f7f9 f9b6 	bl	8000118 <__udivsi3>
 8006dac:	0003      	movs	r3, r0
 8006dae:	001a      	movs	r2, r3
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	4353      	muls	r3, r2
 8006db4:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 8006db6:	e002      	b.n	8006dbe <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	3b01      	subs	r3, #1
 8006dbc:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d1f9      	bne.n	8006db8 <ADC_DelayMicroSecond+0x20>
  } 
}
 8006dc4:	46c0      	nop			; (mov r8, r8)
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	b004      	add	sp, #16
 8006dca:	bd80      	pop	{r7, pc}
 8006dcc:	20000010 	.word	0x20000010
 8006dd0:	000f4240 	.word	0x000f4240

08006dd4 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b082      	sub	sp, #8
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	0002      	movs	r2, r0
 8006ddc:	1dfb      	adds	r3, r7, #7
 8006dde:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8006de0:	1dfb      	adds	r3, r7, #7
 8006de2:	781b      	ldrb	r3, [r3, #0]
 8006de4:	001a      	movs	r2, r3
 8006de6:	231f      	movs	r3, #31
 8006de8:	401a      	ands	r2, r3
 8006dea:	4b04      	ldr	r3, [pc, #16]	; (8006dfc <NVIC_EnableIRQ+0x28>)
 8006dec:	2101      	movs	r1, #1
 8006dee:	4091      	lsls	r1, r2
 8006df0:	000a      	movs	r2, r1
 8006df2:	601a      	str	r2, [r3, #0]
}
 8006df4:	46c0      	nop			; (mov r8, r8)
 8006df6:	46bd      	mov	sp, r7
 8006df8:	b002      	add	sp, #8
 8006dfa:	bd80      	pop	{r7, pc}
 8006dfc:	e000e100 	.word	0xe000e100

08006e00 <NVIC_DisableIRQ>:
  \brief   Disable External Interrupt
  \details Disables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b082      	sub	sp, #8
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	0002      	movs	r2, r0
 8006e08:	1dfb      	adds	r3, r7, #7
 8006e0a:	701a      	strb	r2, [r3, #0]
  NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8006e0c:	1dfb      	adds	r3, r7, #7
 8006e0e:	781b      	ldrb	r3, [r3, #0]
 8006e10:	001a      	movs	r2, r3
 8006e12:	231f      	movs	r3, #31
 8006e14:	4013      	ands	r3, r2
 8006e16:	4905      	ldr	r1, [pc, #20]	; (8006e2c <NVIC_DisableIRQ+0x2c>)
 8006e18:	2201      	movs	r2, #1
 8006e1a:	409a      	lsls	r2, r3
 8006e1c:	0013      	movs	r3, r2
 8006e1e:	2280      	movs	r2, #128	; 0x80
 8006e20:	508b      	str	r3, [r1, r2]
}
 8006e22:	46c0      	nop			; (mov r8, r8)
 8006e24:	46bd      	mov	sp, r7
 8006e26:	b002      	add	sp, #8
 8006e28:	bd80      	pop	{r7, pc}
 8006e2a:	46c0      	nop			; (mov r8, r8)
 8006e2c:	e000e100 	.word	0xe000e100

08006e30 <NVIC_ClearPendingIRQ>:
  \brief   Clear Pending Interrupt
  \details Clears the pending bit of an external interrupt.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b082      	sub	sp, #8
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	0002      	movs	r2, r0
 8006e38:	1dfb      	adds	r3, r7, #7
 8006e3a:	701a      	strb	r2, [r3, #0]
  NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8006e3c:	1dfb      	adds	r3, r7, #7
 8006e3e:	781b      	ldrb	r3, [r3, #0]
 8006e40:	001a      	movs	r2, r3
 8006e42:	231f      	movs	r3, #31
 8006e44:	4013      	ands	r3, r2
 8006e46:	4905      	ldr	r1, [pc, #20]	; (8006e5c <NVIC_ClearPendingIRQ+0x2c>)
 8006e48:	2201      	movs	r2, #1
 8006e4a:	409a      	lsls	r2, r3
 8006e4c:	23c0      	movs	r3, #192	; 0xc0
 8006e4e:	005b      	lsls	r3, r3, #1
 8006e50:	50ca      	str	r2, [r1, r3]
}
 8006e52:	46c0      	nop			; (mov r8, r8)
 8006e54:	46bd      	mov	sp, r7
 8006e56:	b002      	add	sp, #8
 8006e58:	bd80      	pop	{r7, pc}
 8006e5a:	46c0      	nop			; (mov r8, r8)
 8006e5c:	e000e100 	.word	0xe000e100

08006e60 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006e60:	b590      	push	{r4, r7, lr}
 8006e62:	b083      	sub	sp, #12
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	0002      	movs	r2, r0
 8006e68:	6039      	str	r1, [r7, #0]
 8006e6a:	1dfb      	adds	r3, r7, #7
 8006e6c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 8006e6e:	1dfb      	adds	r3, r7, #7
 8006e70:	781b      	ldrb	r3, [r3, #0]
 8006e72:	2b7f      	cmp	r3, #127	; 0x7f
 8006e74:	d932      	bls.n	8006edc <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006e76:	4a2f      	ldr	r2, [pc, #188]	; (8006f34 <NVIC_SetPriority+0xd4>)
 8006e78:	1dfb      	adds	r3, r7, #7
 8006e7a:	781b      	ldrb	r3, [r3, #0]
 8006e7c:	0019      	movs	r1, r3
 8006e7e:	230f      	movs	r3, #15
 8006e80:	400b      	ands	r3, r1
 8006e82:	3b08      	subs	r3, #8
 8006e84:	089b      	lsrs	r3, r3, #2
 8006e86:	3306      	adds	r3, #6
 8006e88:	009b      	lsls	r3, r3, #2
 8006e8a:	18d3      	adds	r3, r2, r3
 8006e8c:	3304      	adds	r3, #4
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	1dfa      	adds	r2, r7, #7
 8006e92:	7812      	ldrb	r2, [r2, #0]
 8006e94:	0011      	movs	r1, r2
 8006e96:	2203      	movs	r2, #3
 8006e98:	400a      	ands	r2, r1
 8006e9a:	00d2      	lsls	r2, r2, #3
 8006e9c:	21ff      	movs	r1, #255	; 0xff
 8006e9e:	4091      	lsls	r1, r2
 8006ea0:	000a      	movs	r2, r1
 8006ea2:	43d2      	mvns	r2, r2
 8006ea4:	401a      	ands	r2, r3
 8006ea6:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	019b      	lsls	r3, r3, #6
 8006eac:	22ff      	movs	r2, #255	; 0xff
 8006eae:	401a      	ands	r2, r3
 8006eb0:	1dfb      	adds	r3, r7, #7
 8006eb2:	781b      	ldrb	r3, [r3, #0]
 8006eb4:	0018      	movs	r0, r3
 8006eb6:	2303      	movs	r3, #3
 8006eb8:	4003      	ands	r3, r0
 8006eba:	00db      	lsls	r3, r3, #3
 8006ebc:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006ebe:	481d      	ldr	r0, [pc, #116]	; (8006f34 <NVIC_SetPriority+0xd4>)
 8006ec0:	1dfb      	adds	r3, r7, #7
 8006ec2:	781b      	ldrb	r3, [r3, #0]
 8006ec4:	001c      	movs	r4, r3
 8006ec6:	230f      	movs	r3, #15
 8006ec8:	4023      	ands	r3, r4
 8006eca:	3b08      	subs	r3, #8
 8006ecc:	089b      	lsrs	r3, r3, #2
 8006ece:	430a      	orrs	r2, r1
 8006ed0:	3306      	adds	r3, #6
 8006ed2:	009b      	lsls	r3, r3, #2
 8006ed4:	18c3      	adds	r3, r0, r3
 8006ed6:	3304      	adds	r3, #4
 8006ed8:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8006eda:	e027      	b.n	8006f2c <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006edc:	4a16      	ldr	r2, [pc, #88]	; (8006f38 <NVIC_SetPriority+0xd8>)
 8006ede:	1dfb      	adds	r3, r7, #7
 8006ee0:	781b      	ldrb	r3, [r3, #0]
 8006ee2:	b25b      	sxtb	r3, r3
 8006ee4:	089b      	lsrs	r3, r3, #2
 8006ee6:	33c0      	adds	r3, #192	; 0xc0
 8006ee8:	009b      	lsls	r3, r3, #2
 8006eea:	589b      	ldr	r3, [r3, r2]
 8006eec:	1dfa      	adds	r2, r7, #7
 8006eee:	7812      	ldrb	r2, [r2, #0]
 8006ef0:	0011      	movs	r1, r2
 8006ef2:	2203      	movs	r2, #3
 8006ef4:	400a      	ands	r2, r1
 8006ef6:	00d2      	lsls	r2, r2, #3
 8006ef8:	21ff      	movs	r1, #255	; 0xff
 8006efa:	4091      	lsls	r1, r2
 8006efc:	000a      	movs	r2, r1
 8006efe:	43d2      	mvns	r2, r2
 8006f00:	401a      	ands	r2, r3
 8006f02:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	019b      	lsls	r3, r3, #6
 8006f08:	22ff      	movs	r2, #255	; 0xff
 8006f0a:	401a      	ands	r2, r3
 8006f0c:	1dfb      	adds	r3, r7, #7
 8006f0e:	781b      	ldrb	r3, [r3, #0]
 8006f10:	0018      	movs	r0, r3
 8006f12:	2303      	movs	r3, #3
 8006f14:	4003      	ands	r3, r0
 8006f16:	00db      	lsls	r3, r3, #3
 8006f18:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006f1a:	4807      	ldr	r0, [pc, #28]	; (8006f38 <NVIC_SetPriority+0xd8>)
 8006f1c:	1dfb      	adds	r3, r7, #7
 8006f1e:	781b      	ldrb	r3, [r3, #0]
 8006f20:	b25b      	sxtb	r3, r3
 8006f22:	089b      	lsrs	r3, r3, #2
 8006f24:	430a      	orrs	r2, r1
 8006f26:	33c0      	adds	r3, #192	; 0xc0
 8006f28:	009b      	lsls	r3, r3, #2
 8006f2a:	501a      	str	r2, [r3, r0]
}
 8006f2c:	46c0      	nop			; (mov r8, r8)
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	b003      	add	sp, #12
 8006f32:	bd90      	pop	{r4, r7, pc}
 8006f34:	e000ed00 	.word	0xe000ed00
 8006f38:	e000e100 	.word	0xe000e100

08006f3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b082      	sub	sp, #8
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	3b01      	subs	r3, #1
 8006f48:	4a0c      	ldr	r2, [pc, #48]	; (8006f7c <SysTick_Config+0x40>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d901      	bls.n	8006f52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006f4e:	2301      	movs	r3, #1
 8006f50:	e010      	b.n	8006f74 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006f52:	4b0b      	ldr	r3, [pc, #44]	; (8006f80 <SysTick_Config+0x44>)
 8006f54:	687a      	ldr	r2, [r7, #4]
 8006f56:	3a01      	subs	r2, #1
 8006f58:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	425b      	negs	r3, r3
 8006f5e:	2103      	movs	r1, #3
 8006f60:	0018      	movs	r0, r3
 8006f62:	f7ff ff7d 	bl	8006e60 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006f66:	4b06      	ldr	r3, [pc, #24]	; (8006f80 <SysTick_Config+0x44>)
 8006f68:	2200      	movs	r2, #0
 8006f6a:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006f6c:	4b04      	ldr	r3, [pc, #16]	; (8006f80 <SysTick_Config+0x44>)
 8006f6e:	2207      	movs	r2, #7
 8006f70:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006f72:	2300      	movs	r3, #0
}
 8006f74:	0018      	movs	r0, r3
 8006f76:	46bd      	mov	sp, r7
 8006f78:	b002      	add	sp, #8
 8006f7a:	bd80      	pop	{r7, pc}
 8006f7c:	00ffffff 	.word	0x00ffffff
 8006f80:	e000e010 	.word	0xe000e010

08006f84 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b084      	sub	sp, #16
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	60b9      	str	r1, [r7, #8]
 8006f8c:	607a      	str	r2, [r7, #4]
 8006f8e:	210f      	movs	r1, #15
 8006f90:	187b      	adds	r3, r7, r1
 8006f92:	1c02      	adds	r2, r0, #0
 8006f94:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8006f96:	68ba      	ldr	r2, [r7, #8]
 8006f98:	187b      	adds	r3, r7, r1
 8006f9a:	781b      	ldrb	r3, [r3, #0]
 8006f9c:	b25b      	sxtb	r3, r3
 8006f9e:	0011      	movs	r1, r2
 8006fa0:	0018      	movs	r0, r3
 8006fa2:	f7ff ff5d 	bl	8006e60 <NVIC_SetPriority>
}
 8006fa6:	46c0      	nop			; (mov r8, r8)
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	b004      	add	sp, #16
 8006fac:	bd80      	pop	{r7, pc}

08006fae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006fae:	b580      	push	{r7, lr}
 8006fb0:	b082      	sub	sp, #8
 8006fb2:	af00      	add	r7, sp, #0
 8006fb4:	0002      	movs	r2, r0
 8006fb6:	1dfb      	adds	r3, r7, #7
 8006fb8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006fba:	1dfb      	adds	r3, r7, #7
 8006fbc:	781b      	ldrb	r3, [r3, #0]
 8006fbe:	b25b      	sxtb	r3, r3
 8006fc0:	0018      	movs	r0, r3
 8006fc2:	f7ff ff07 	bl	8006dd4 <NVIC_EnableIRQ>
}
 8006fc6:	46c0      	nop			; (mov r8, r8)
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	b002      	add	sp, #8
 8006fcc:	bd80      	pop	{r7, pc}

08006fce <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006fce:	b580      	push	{r7, lr}
 8006fd0:	b082      	sub	sp, #8
 8006fd2:	af00      	add	r7, sp, #0
 8006fd4:	0002      	movs	r2, r0
 8006fd6:	1dfb      	adds	r3, r7, #7
 8006fd8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8006fda:	1dfb      	adds	r3, r7, #7
 8006fdc:	781b      	ldrb	r3, [r3, #0]
 8006fde:	b25b      	sxtb	r3, r3
 8006fe0:	0018      	movs	r0, r3
 8006fe2:	f7ff ff0d 	bl	8006e00 <NVIC_DisableIRQ>
}
 8006fe6:	46c0      	nop			; (mov r8, r8)
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	b002      	add	sp, #8
 8006fec:	bd80      	pop	{r7, pc}

08006fee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006fee:	b580      	push	{r7, lr}
 8006ff0:	b082      	sub	sp, #8
 8006ff2:	af00      	add	r7, sp, #0
 8006ff4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	0018      	movs	r0, r3
 8006ffa:	f7ff ff9f 	bl	8006f3c <SysTick_Config>
 8006ffe:	0003      	movs	r3, r0
}
 8007000:	0018      	movs	r0, r3
 8007002:	46bd      	mov	sp, r7
 8007004:	b002      	add	sp, #8
 8007006:	bd80      	pop	{r7, pc}

08007008 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{ 
 8007008:	b580      	push	{r7, lr}
 800700a:	b082      	sub	sp, #8
 800700c:	af00      	add	r7, sp, #0
 800700e:	0002      	movs	r2, r0
 8007010:	1dfb      	adds	r3, r7, #7
 8007012:	701a      	strb	r2, [r3, #0]
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8007014:	1dfb      	adds	r3, r7, #7
 8007016:	781b      	ldrb	r3, [r3, #0]
 8007018:	b25b      	sxtb	r3, r3
 800701a:	0018      	movs	r0, r3
 800701c:	f7ff ff08 	bl	8006e30 <NVIC_ClearPendingIRQ>
}
 8007020:	46c0      	nop			; (mov r8, r8)
 8007022:	46bd      	mov	sp, r7
 8007024:	b002      	add	sp, #8
 8007026:	bd80      	pop	{r7, pc}

08007028 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b084      	sub	sp, #16
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d101      	bne.n	800703a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8007036:	2301      	movs	r3, #1
 8007038:	e061      	b.n	80070fe <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	4a32      	ldr	r2, [pc, #200]	; (8007108 <HAL_DMA_Init+0xe0>)
 8007040:	4694      	mov	ip, r2
 8007042:	4463      	add	r3, ip
 8007044:	2114      	movs	r1, #20
 8007046:	0018      	movs	r0, r3
 8007048:	f7f9 f866 	bl	8000118 <__udivsi3>
 800704c:	0003      	movs	r3, r0
 800704e:	009a      	lsls	r2, r3, #2
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	4a2d      	ldr	r2, [pc, #180]	; (800710c <HAL_DMA_Init+0xe4>)
 8007058:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2225      	movs	r2, #37	; 0x25
 800705e:	2102      	movs	r1, #2
 8007060:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	4a28      	ldr	r2, [pc, #160]	; (8007110 <HAL_DMA_Init+0xe8>)
 800706e:	4013      	ands	r3, r2
 8007070:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800707a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	691b      	ldr	r3, [r3, #16]
 8007080:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007086:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	699b      	ldr	r3, [r3, #24]
 800708c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007092:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6a1b      	ldr	r3, [r3, #32]
 8007098:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800709a:	68fa      	ldr	r2, [r7, #12]
 800709c:	4313      	orrs	r3, r2
 800709e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	68fa      	ldr	r2, [r7, #12]
 80070a6:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	689a      	ldr	r2, [r3, #8]
 80070ac:	2380      	movs	r3, #128	; 0x80
 80070ae:	01db      	lsls	r3, r3, #7
 80070b0:	429a      	cmp	r2, r3
 80070b2:	d018      	beq.n	80070e6 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80070b4:	4b17      	ldr	r3, [pc, #92]	; (8007114 <HAL_DMA_Init+0xec>)
 80070b6:	681a      	ldr	r2, [r3, #0]
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070bc:	211c      	movs	r1, #28
 80070be:	400b      	ands	r3, r1
 80070c0:	210f      	movs	r1, #15
 80070c2:	4099      	lsls	r1, r3
 80070c4:	000b      	movs	r3, r1
 80070c6:	43d9      	mvns	r1, r3
 80070c8:	4b12      	ldr	r3, [pc, #72]	; (8007114 <HAL_DMA_Init+0xec>)
 80070ca:	400a      	ands	r2, r1
 80070cc:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80070ce:	4b11      	ldr	r3, [pc, #68]	; (8007114 <HAL_DMA_Init+0xec>)
 80070d0:	6819      	ldr	r1, [r3, #0]
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	685a      	ldr	r2, [r3, #4]
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070da:	201c      	movs	r0, #28
 80070dc:	4003      	ands	r3, r0
 80070de:	409a      	lsls	r2, r3
 80070e0:	4b0c      	ldr	r3, [pc, #48]	; (8007114 <HAL_DMA_Init+0xec>)
 80070e2:	430a      	orrs	r2, r1
 80070e4:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2200      	movs	r2, #0
 80070ea:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2225      	movs	r2, #37	; 0x25
 80070f0:	2101      	movs	r1, #1
 80070f2:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2224      	movs	r2, #36	; 0x24
 80070f8:	2100      	movs	r1, #0
 80070fa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80070fc:	2300      	movs	r3, #0
}
 80070fe:	0018      	movs	r0, r3
 8007100:	46bd      	mov	sp, r7
 8007102:	b004      	add	sp, #16
 8007104:	bd80      	pop	{r7, pc}
 8007106:	46c0      	nop			; (mov r8, r8)
 8007108:	bffdfff8 	.word	0xbffdfff8
 800710c:	40020000 	.word	0x40020000
 8007110:	ffff800f 	.word	0xffff800f
 8007114:	400200a8 	.word	0x400200a8

08007118 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b084      	sub	sp, #16
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007120:	230f      	movs	r3, #15
 8007122:	18fb      	adds	r3, r7, r3
 8007124:	2200      	movs	r2, #0
 8007126:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2225      	movs	r2, #37	; 0x25
 800712c:	5c9b      	ldrb	r3, [r3, r2]
 800712e:	b2db      	uxtb	r3, r3
 8007130:	2b02      	cmp	r3, #2
 8007132:	d007      	beq.n	8007144 <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2204      	movs	r2, #4
 8007138:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800713a:	230f      	movs	r3, #15
 800713c:	18fb      	adds	r3, r7, r3
 800713e:	2201      	movs	r2, #1
 8007140:	701a      	strb	r2, [r3, #0]
 8007142:	e02a      	b.n	800719a <HAL_DMA_Abort_IT+0x82>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	681a      	ldr	r2, [r3, #0]
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	210e      	movs	r1, #14
 8007150:	438a      	bics	r2, r1
 8007152:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	681a      	ldr	r2, [r3, #0]
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	2101      	movs	r1, #1
 8007160:	438a      	bics	r2, r1
 8007162:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007168:	221c      	movs	r2, #28
 800716a:	401a      	ands	r2, r3
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007170:	2101      	movs	r1, #1
 8007172:	4091      	lsls	r1, r2
 8007174:	000a      	movs	r2, r1
 8007176:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2225      	movs	r2, #37	; 0x25
 800717c:	2101      	movs	r1, #1
 800717e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2224      	movs	r2, #36	; 0x24
 8007184:	2100      	movs	r1, #0
 8007186:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800718c:	2b00      	cmp	r3, #0
 800718e:	d004      	beq.n	800719a <HAL_DMA_Abort_IT+0x82>
    {
      hdma->XferAbortCallback(hdma);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007194:	687a      	ldr	r2, [r7, #4]
 8007196:	0010      	movs	r0, r2
 8007198:	4798      	blx	r3
    }
  }
  return status;
 800719a:	230f      	movs	r3, #15
 800719c:	18fb      	adds	r3, r7, r3
 800719e:	781b      	ldrb	r3, [r3, #0]
}
 80071a0:	0018      	movs	r0, r3
 80071a2:	46bd      	mov	sp, r7
 80071a4:	b004      	add	sp, #16
 80071a6:	bd80      	pop	{r7, pc}

080071a8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b084      	sub	sp, #16
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071c4:	221c      	movs	r2, #28
 80071c6:	4013      	ands	r3, r2
 80071c8:	2204      	movs	r2, #4
 80071ca:	409a      	lsls	r2, r3
 80071cc:	0013      	movs	r3, r2
 80071ce:	68fa      	ldr	r2, [r7, #12]
 80071d0:	4013      	ands	r3, r2
 80071d2:	d026      	beq.n	8007222 <HAL_DMA_IRQHandler+0x7a>
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	2204      	movs	r2, #4
 80071d8:	4013      	ands	r3, r2
 80071da:	d022      	beq.n	8007222 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	2220      	movs	r2, #32
 80071e4:	4013      	ands	r3, r2
 80071e6:	d107      	bne.n	80071f8 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	681a      	ldr	r2, [r3, #0]
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	2104      	movs	r1, #4
 80071f4:	438a      	bics	r2, r1
 80071f6:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071fc:	221c      	movs	r2, #28
 80071fe:	401a      	ands	r2, r3
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007204:	2104      	movs	r1, #4
 8007206:	4091      	lsls	r1, r2
 8007208:	000a      	movs	r2, r1
 800720a:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007210:	2b00      	cmp	r3, #0
 8007212:	d100      	bne.n	8007216 <HAL_DMA_IRQHandler+0x6e>
 8007214:	e071      	b.n	80072fa <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800721a:	687a      	ldr	r2, [r7, #4]
 800721c:	0010      	movs	r0, r2
 800721e:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8007220:	e06b      	b.n	80072fa <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007226:	221c      	movs	r2, #28
 8007228:	4013      	ands	r3, r2
 800722a:	2202      	movs	r2, #2
 800722c:	409a      	lsls	r2, r3
 800722e:	0013      	movs	r3, r2
 8007230:	68fa      	ldr	r2, [r7, #12]
 8007232:	4013      	ands	r3, r2
 8007234:	d02d      	beq.n	8007292 <HAL_DMA_IRQHandler+0xea>
 8007236:	68bb      	ldr	r3, [r7, #8]
 8007238:	2202      	movs	r2, #2
 800723a:	4013      	ands	r3, r2
 800723c:	d029      	beq.n	8007292 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	2220      	movs	r2, #32
 8007246:	4013      	ands	r3, r2
 8007248:	d10b      	bne.n	8007262 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	681a      	ldr	r2, [r3, #0]
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	210a      	movs	r1, #10
 8007256:	438a      	bics	r2, r1
 8007258:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2225      	movs	r2, #37	; 0x25
 800725e:	2101      	movs	r1, #1
 8007260:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007266:	221c      	movs	r2, #28
 8007268:	401a      	ands	r2, r3
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800726e:	2102      	movs	r1, #2
 8007270:	4091      	lsls	r1, r2
 8007272:	000a      	movs	r2, r1
 8007274:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2224      	movs	r2, #36	; 0x24
 800727a:	2100      	movs	r1, #0
 800727c:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007282:	2b00      	cmp	r3, #0
 8007284:	d039      	beq.n	80072fa <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800728a:	687a      	ldr	r2, [r7, #4]
 800728c:	0010      	movs	r0, r2
 800728e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8007290:	e033      	b.n	80072fa <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007296:	221c      	movs	r2, #28
 8007298:	4013      	ands	r3, r2
 800729a:	2208      	movs	r2, #8
 800729c:	409a      	lsls	r2, r3
 800729e:	0013      	movs	r3, r2
 80072a0:	68fa      	ldr	r2, [r7, #12]
 80072a2:	4013      	ands	r3, r2
 80072a4:	d02a      	beq.n	80072fc <HAL_DMA_IRQHandler+0x154>
 80072a6:	68bb      	ldr	r3, [r7, #8]
 80072a8:	2208      	movs	r2, #8
 80072aa:	4013      	ands	r3, r2
 80072ac:	d026      	beq.n	80072fc <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	681a      	ldr	r2, [r3, #0]
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	210e      	movs	r1, #14
 80072ba:	438a      	bics	r2, r1
 80072bc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072c2:	221c      	movs	r2, #28
 80072c4:	401a      	ands	r2, r3
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ca:	2101      	movs	r1, #1
 80072cc:	4091      	lsls	r1, r2
 80072ce:	000a      	movs	r2, r1
 80072d0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2201      	movs	r2, #1
 80072d6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2225      	movs	r2, #37	; 0x25
 80072dc:	2101      	movs	r1, #1
 80072de:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2224      	movs	r2, #36	; 0x24
 80072e4:	2100      	movs	r1, #0
 80072e6:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d005      	beq.n	80072fc <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072f4:	687a      	ldr	r2, [r7, #4]
 80072f6:	0010      	movs	r0, r2
 80072f8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80072fa:	46c0      	nop			; (mov r8, r8)
 80072fc:	46c0      	nop			; (mov r8, r8)
}
 80072fe:	46bd      	mov	sp, r7
 8007300:	b004      	add	sp, #16
 8007302:	bd80      	pop	{r7, pc}

08007304 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b086      	sub	sp, #24
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
 800730c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800730e:	2300      	movs	r3, #0
 8007310:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007312:	2300      	movs	r3, #0
 8007314:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8007316:	2300      	movs	r3, #0
 8007318:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,(GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800731a:	e155      	b.n	80075c8 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	2101      	movs	r1, #1
 8007322:	697a      	ldr	r2, [r7, #20]
 8007324:	4091      	lsls	r1, r2
 8007326:	000a      	movs	r2, r1
 8007328:	4013      	ands	r3, r2
 800732a:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d100      	bne.n	8007334 <HAL_GPIO_Init+0x30>
 8007332:	e146      	b.n	80075c2 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	685b      	ldr	r3, [r3, #4]
 8007338:	2b02      	cmp	r3, #2
 800733a:	d003      	beq.n	8007344 <HAL_GPIO_Init+0x40>
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	685b      	ldr	r3, [r3, #4]
 8007340:	2b12      	cmp	r3, #18
 8007342:	d123      	bne.n	800738c <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3U];
 8007344:	697b      	ldr	r3, [r7, #20]
 8007346:	08da      	lsrs	r2, r3, #3
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	3208      	adds	r2, #8
 800734c:	0092      	lsls	r2, r2, #2
 800734e:	58d3      	ldr	r3, [r2, r3]
 8007350:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8007352:	697b      	ldr	r3, [r7, #20]
 8007354:	2207      	movs	r2, #7
 8007356:	4013      	ands	r3, r2
 8007358:	009b      	lsls	r3, r3, #2
 800735a:	220f      	movs	r2, #15
 800735c:	409a      	lsls	r2, r3
 800735e:	0013      	movs	r3, r2
 8007360:	43da      	mvns	r2, r3
 8007362:	693b      	ldr	r3, [r7, #16]
 8007364:	4013      	ands	r3, r2
 8007366:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	691a      	ldr	r2, [r3, #16]
 800736c:	697b      	ldr	r3, [r7, #20]
 800736e:	2107      	movs	r1, #7
 8007370:	400b      	ands	r3, r1
 8007372:	009b      	lsls	r3, r3, #2
 8007374:	409a      	lsls	r2, r3
 8007376:	0013      	movs	r3, r2
 8007378:	693a      	ldr	r2, [r7, #16]
 800737a:	4313      	orrs	r3, r2
 800737c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800737e:	697b      	ldr	r3, [r7, #20]
 8007380:	08da      	lsrs	r2, r3, #3
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	3208      	adds	r2, #8
 8007386:	0092      	lsls	r2, r2, #2
 8007388:	6939      	ldr	r1, [r7, #16]
 800738a:	50d1      	str	r1, [r2, r3]
      } 

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	685b      	ldr	r3, [r3, #4]
 8007390:	2b01      	cmp	r3, #1
 8007392:	d00b      	beq.n	80073ac <HAL_GPIO_Init+0xa8>
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	685b      	ldr	r3, [r3, #4]
 8007398:	2b02      	cmp	r3, #2
 800739a:	d007      	beq.n	80073ac <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80073a0:	2b11      	cmp	r3, #17
 80073a2:	d003      	beq.n	80073ac <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	685b      	ldr	r3, [r3, #4]
 80073a8:	2b12      	cmp	r3, #18
 80073aa:	d130      	bne.n	800740e <HAL_GPIO_Init+0x10a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	689b      	ldr	r3, [r3, #8]
 80073b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80073b2:	697b      	ldr	r3, [r7, #20]
 80073b4:	005b      	lsls	r3, r3, #1
 80073b6:	2203      	movs	r2, #3
 80073b8:	409a      	lsls	r2, r3
 80073ba:	0013      	movs	r3, r2
 80073bc:	43da      	mvns	r2, r3
 80073be:	693b      	ldr	r3, [r7, #16]
 80073c0:	4013      	ands	r3, r2
 80073c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	68da      	ldr	r2, [r3, #12]
 80073c8:	697b      	ldr	r3, [r7, #20]
 80073ca:	005b      	lsls	r3, r3, #1
 80073cc:	409a      	lsls	r2, r3
 80073ce:	0013      	movs	r3, r2
 80073d0:	693a      	ldr	r2, [r7, #16]
 80073d2:	4313      	orrs	r3, r2
 80073d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	693a      	ldr	r2, [r7, #16]
 80073da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp= GPIOx->OTYPER;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	685b      	ldr	r3, [r3, #4]
 80073e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80073e2:	2201      	movs	r2, #1
 80073e4:	697b      	ldr	r3, [r7, #20]
 80073e6:	409a      	lsls	r2, r3
 80073e8:	0013      	movs	r3, r2
 80073ea:	43da      	mvns	r2, r3
 80073ec:	693b      	ldr	r3, [r7, #16]
 80073ee:	4013      	ands	r3, r2
 80073f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	685b      	ldr	r3, [r3, #4]
 80073f6:	091b      	lsrs	r3, r3, #4
 80073f8:	2201      	movs	r2, #1
 80073fa:	401a      	ands	r2, r3
 80073fc:	697b      	ldr	r3, [r7, #20]
 80073fe:	409a      	lsls	r2, r3
 8007400:	0013      	movs	r3, r2
 8007402:	693a      	ldr	r2, [r7, #16]
 8007404:	4313      	orrs	r3, r2
 8007406:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	693a      	ldr	r2, [r7, #16]
 800740c:	605a      	str	r2, [r3, #4]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007414:	697b      	ldr	r3, [r7, #20]
 8007416:	005b      	lsls	r3, r3, #1
 8007418:	2203      	movs	r2, #3
 800741a:	409a      	lsls	r2, r3
 800741c:	0013      	movs	r3, r2
 800741e:	43da      	mvns	r2, r3
 8007420:	693b      	ldr	r3, [r7, #16]
 8007422:	4013      	ands	r3, r2
 8007424:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	685b      	ldr	r3, [r3, #4]
 800742a:	2203      	movs	r2, #3
 800742c:	401a      	ands	r2, r3
 800742e:	697b      	ldr	r3, [r7, #20]
 8007430:	005b      	lsls	r3, r3, #1
 8007432:	409a      	lsls	r2, r3
 8007434:	0013      	movs	r3, r2
 8007436:	693a      	ldr	r2, [r7, #16]
 8007438:	4313      	orrs	r3, r2
 800743a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	693a      	ldr	r2, [r7, #16]
 8007440:	601a      	str	r2, [r3, #0]

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	68db      	ldr	r3, [r3, #12]
 8007446:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007448:	697b      	ldr	r3, [r7, #20]
 800744a:	005b      	lsls	r3, r3, #1
 800744c:	2203      	movs	r2, #3
 800744e:	409a      	lsls	r2, r3
 8007450:	0013      	movs	r3, r2
 8007452:	43da      	mvns	r2, r3
 8007454:	693b      	ldr	r3, [r7, #16]
 8007456:	4013      	ands	r3, r2
 8007458:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	689a      	ldr	r2, [r3, #8]
 800745e:	697b      	ldr	r3, [r7, #20]
 8007460:	005b      	lsls	r3, r3, #1
 8007462:	409a      	lsls	r2, r3
 8007464:	0013      	movs	r3, r2
 8007466:	693a      	ldr	r2, [r7, #16]
 8007468:	4313      	orrs	r3, r2
 800746a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	693a      	ldr	r2, [r7, #16]
 8007470:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	685a      	ldr	r2, [r3, #4]
 8007476:	2380      	movs	r3, #128	; 0x80
 8007478:	055b      	lsls	r3, r3, #21
 800747a:	4013      	ands	r3, r2
 800747c:	d100      	bne.n	8007480 <HAL_GPIO_Init+0x17c>
 800747e:	e0a0      	b.n	80075c2 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007480:	4b57      	ldr	r3, [pc, #348]	; (80075e0 <HAL_GPIO_Init+0x2dc>)
 8007482:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007484:	4b56      	ldr	r3, [pc, #344]	; (80075e0 <HAL_GPIO_Init+0x2dc>)
 8007486:	2101      	movs	r1, #1
 8007488:	430a      	orrs	r2, r1
 800748a:	635a      	str	r2, [r3, #52]	; 0x34
        
        temp = SYSCFG->EXTICR[position >> 2U];
 800748c:	4a55      	ldr	r2, [pc, #340]	; (80075e4 <HAL_GPIO_Init+0x2e0>)
 800748e:	697b      	ldr	r3, [r7, #20]
 8007490:	089b      	lsrs	r3, r3, #2
 8007492:	3302      	adds	r3, #2
 8007494:	009b      	lsls	r3, r3, #2
 8007496:	589b      	ldr	r3, [r3, r2]
 8007498:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 800749a:	697b      	ldr	r3, [r7, #20]
 800749c:	2203      	movs	r2, #3
 800749e:	4013      	ands	r3, r2
 80074a0:	009b      	lsls	r3, r3, #2
 80074a2:	220f      	movs	r2, #15
 80074a4:	409a      	lsls	r2, r3
 80074a6:	0013      	movs	r3, r2
 80074a8:	43da      	mvns	r2, r3
 80074aa:	693b      	ldr	r3, [r7, #16]
 80074ac:	4013      	ands	r3, r2
 80074ae:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80074b0:	687a      	ldr	r2, [r7, #4]
 80074b2:	23a0      	movs	r3, #160	; 0xa0
 80074b4:	05db      	lsls	r3, r3, #23
 80074b6:	429a      	cmp	r2, r3
 80074b8:	d01f      	beq.n	80074fa <HAL_GPIO_Init+0x1f6>
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	4a4a      	ldr	r2, [pc, #296]	; (80075e8 <HAL_GPIO_Init+0x2e4>)
 80074be:	4293      	cmp	r3, r2
 80074c0:	d019      	beq.n	80074f6 <HAL_GPIO_Init+0x1f2>
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	4a49      	ldr	r2, [pc, #292]	; (80075ec <HAL_GPIO_Init+0x2e8>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d013      	beq.n	80074f2 <HAL_GPIO_Init+0x1ee>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	4a48      	ldr	r2, [pc, #288]	; (80075f0 <HAL_GPIO_Init+0x2ec>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d00d      	beq.n	80074ee <HAL_GPIO_Init+0x1ea>
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	4a47      	ldr	r2, [pc, #284]	; (80075f4 <HAL_GPIO_Init+0x2f0>)
 80074d6:	4293      	cmp	r3, r2
 80074d8:	d007      	beq.n	80074ea <HAL_GPIO_Init+0x1e6>
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	4a46      	ldr	r2, [pc, #280]	; (80075f8 <HAL_GPIO_Init+0x2f4>)
 80074de:	4293      	cmp	r3, r2
 80074e0:	d101      	bne.n	80074e6 <HAL_GPIO_Init+0x1e2>
 80074e2:	2305      	movs	r3, #5
 80074e4:	e00a      	b.n	80074fc <HAL_GPIO_Init+0x1f8>
 80074e6:	2306      	movs	r3, #6
 80074e8:	e008      	b.n	80074fc <HAL_GPIO_Init+0x1f8>
 80074ea:	2304      	movs	r3, #4
 80074ec:	e006      	b.n	80074fc <HAL_GPIO_Init+0x1f8>
 80074ee:	2303      	movs	r3, #3
 80074f0:	e004      	b.n	80074fc <HAL_GPIO_Init+0x1f8>
 80074f2:	2302      	movs	r3, #2
 80074f4:	e002      	b.n	80074fc <HAL_GPIO_Init+0x1f8>
 80074f6:	2301      	movs	r3, #1
 80074f8:	e000      	b.n	80074fc <HAL_GPIO_Init+0x1f8>
 80074fa:	2300      	movs	r3, #0
 80074fc:	697a      	ldr	r2, [r7, #20]
 80074fe:	2103      	movs	r1, #3
 8007500:	400a      	ands	r2, r1
 8007502:	0092      	lsls	r2, r2, #2
 8007504:	4093      	lsls	r3, r2
 8007506:	693a      	ldr	r2, [r7, #16]
 8007508:	4313      	orrs	r3, r2
 800750a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800750c:	4935      	ldr	r1, [pc, #212]	; (80075e4 <HAL_GPIO_Init+0x2e0>)
 800750e:	697b      	ldr	r3, [r7, #20]
 8007510:	089b      	lsrs	r3, r3, #2
 8007512:	3302      	adds	r3, #2
 8007514:	009b      	lsls	r3, r3, #2
 8007516:	693a      	ldr	r2, [r7, #16]
 8007518:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800751a:	4b38      	ldr	r3, [pc, #224]	; (80075fc <HAL_GPIO_Init+0x2f8>)
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	43da      	mvns	r2, r3
 8007524:	693b      	ldr	r3, [r7, #16]
 8007526:	4013      	ands	r3, r2
 8007528:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	685a      	ldr	r2, [r3, #4]
 800752e:	2380      	movs	r3, #128	; 0x80
 8007530:	025b      	lsls	r3, r3, #9
 8007532:	4013      	ands	r3, r2
 8007534:	d003      	beq.n	800753e <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8007536:	693a      	ldr	r2, [r7, #16]
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	4313      	orrs	r3, r2
 800753c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800753e:	4b2f      	ldr	r3, [pc, #188]	; (80075fc <HAL_GPIO_Init+0x2f8>)
 8007540:	693a      	ldr	r2, [r7, #16]
 8007542:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8007544:	4b2d      	ldr	r3, [pc, #180]	; (80075fc <HAL_GPIO_Init+0x2f8>)
 8007546:	685b      	ldr	r3, [r3, #4]
 8007548:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	43da      	mvns	r2, r3
 800754e:	693b      	ldr	r3, [r7, #16]
 8007550:	4013      	ands	r3, r2
 8007552:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	685a      	ldr	r2, [r3, #4]
 8007558:	2380      	movs	r3, #128	; 0x80
 800755a:	029b      	lsls	r3, r3, #10
 800755c:	4013      	ands	r3, r2
 800755e:	d003      	beq.n	8007568 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8007560:	693a      	ldr	r2, [r7, #16]
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	4313      	orrs	r3, r2
 8007566:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8007568:	4b24      	ldr	r3, [pc, #144]	; (80075fc <HAL_GPIO_Init+0x2f8>)
 800756a:	693a      	ldr	r2, [r7, #16]
 800756c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800756e:	4b23      	ldr	r3, [pc, #140]	; (80075fc <HAL_GPIO_Init+0x2f8>)
 8007570:	689b      	ldr	r3, [r3, #8]
 8007572:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	43da      	mvns	r2, r3
 8007578:	693b      	ldr	r3, [r7, #16]
 800757a:	4013      	ands	r3, r2
 800757c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	685a      	ldr	r2, [r3, #4]
 8007582:	2380      	movs	r3, #128	; 0x80
 8007584:	035b      	lsls	r3, r3, #13
 8007586:	4013      	ands	r3, r2
 8007588:	d003      	beq.n	8007592 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 800758a:	693a      	ldr	r2, [r7, #16]
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	4313      	orrs	r3, r2
 8007590:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8007592:	4b1a      	ldr	r3, [pc, #104]	; (80075fc <HAL_GPIO_Init+0x2f8>)
 8007594:	693a      	ldr	r2, [r7, #16]
 8007596:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8007598:	4b18      	ldr	r3, [pc, #96]	; (80075fc <HAL_GPIO_Init+0x2f8>)
 800759a:	68db      	ldr	r3, [r3, #12]
 800759c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	43da      	mvns	r2, r3
 80075a2:	693b      	ldr	r3, [r7, #16]
 80075a4:	4013      	ands	r3, r2
 80075a6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	685a      	ldr	r2, [r3, #4]
 80075ac:	2380      	movs	r3, #128	; 0x80
 80075ae:	039b      	lsls	r3, r3, #14
 80075b0:	4013      	ands	r3, r2
 80075b2:	d003      	beq.n	80075bc <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 80075b4:	693a      	ldr	r2, [r7, #16]
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	4313      	orrs	r3, r2
 80075ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80075bc:	4b0f      	ldr	r3, [pc, #60]	; (80075fc <HAL_GPIO_Init+0x2f8>)
 80075be:	693a      	ldr	r2, [r7, #16]
 80075c0:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 80075c2:	697b      	ldr	r3, [r7, #20]
 80075c4:	3301      	adds	r3, #1
 80075c6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	681a      	ldr	r2, [r3, #0]
 80075cc:	697b      	ldr	r3, [r7, #20]
 80075ce:	40da      	lsrs	r2, r3
 80075d0:	1e13      	subs	r3, r2, #0
 80075d2:	d000      	beq.n	80075d6 <HAL_GPIO_Init+0x2d2>
 80075d4:	e6a2      	b.n	800731c <HAL_GPIO_Init+0x18>
  }
}
 80075d6:	46c0      	nop			; (mov r8, r8)
 80075d8:	46bd      	mov	sp, r7
 80075da:	b006      	add	sp, #24
 80075dc:	bd80      	pop	{r7, pc}
 80075de:	46c0      	nop			; (mov r8, r8)
 80075e0:	40021000 	.word	0x40021000
 80075e4:	40010000 	.word	0x40010000
 80075e8:	50000400 	.word	0x50000400
 80075ec:	50000800 	.word	0x50000800
 80075f0:	50000c00 	.word	0x50000c00
 80075f4:	50001000 	.word	0x50001000
 80075f8:	50001c00 	.word	0x50001c00
 80075fc:	40010400 	.word	0x40010400

08007600 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007600:	b580      	push	{r7, lr}
 8007602:	b084      	sub	sp, #16
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
 8007608:	000a      	movs	r2, r1
 800760a:	1cbb      	adds	r3, r7, #2
 800760c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;
  
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  
  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	691b      	ldr	r3, [r3, #16]
 8007612:	1cba      	adds	r2, r7, #2
 8007614:	8812      	ldrh	r2, [r2, #0]
 8007616:	4013      	ands	r3, r2
 8007618:	d004      	beq.n	8007624 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800761a:	230f      	movs	r3, #15
 800761c:	18fb      	adds	r3, r7, r3
 800761e:	2201      	movs	r2, #1
 8007620:	701a      	strb	r2, [r3, #0]
 8007622:	e003      	b.n	800762c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007624:	230f      	movs	r3, #15
 8007626:	18fb      	adds	r3, r7, r3
 8007628:	2200      	movs	r2, #0
 800762a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800762c:	230f      	movs	r3, #15
 800762e:	18fb      	adds	r3, r7, r3
 8007630:	781b      	ldrb	r3, [r3, #0]
}
 8007632:	0018      	movs	r0, r3
 8007634:	46bd      	mov	sp, r7
 8007636:	b004      	add	sp, #16
 8007638:	bd80      	pop	{r7, pc}

0800763a <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800763a:	b580      	push	{r7, lr}
 800763c:	b082      	sub	sp, #8
 800763e:	af00      	add	r7, sp, #0
 8007640:	6078      	str	r0, [r7, #4]
 8007642:	0008      	movs	r0, r1
 8007644:	0011      	movs	r1, r2
 8007646:	1cbb      	adds	r3, r7, #2
 8007648:	1c02      	adds	r2, r0, #0
 800764a:	801a      	strh	r2, [r3, #0]
 800764c:	1c7b      	adds	r3, r7, #1
 800764e:	1c0a      	adds	r2, r1, #0
 8007650:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 8007652:	1c7b      	adds	r3, r7, #1
 8007654:	781b      	ldrb	r3, [r3, #0]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d004      	beq.n	8007664 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 800765a:	1cbb      	adds	r3, r7, #2
 800765c:	881a      	ldrh	r2, [r3, #0]
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8007662:	e003      	b.n	800766c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8007664:	1cbb      	adds	r3, r7, #2
 8007666:	881a      	ldrh	r2, [r3, #0]
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800766c:	46c0      	nop			; (mov r8, r8)
 800766e:	46bd      	mov	sp, r7
 8007670:	b002      	add	sp, #8
 8007672:	bd80      	pop	{r7, pc}

08007674 <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007674:	b580      	push	{r7, lr}
 8007676:	b082      	sub	sp, #8
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
 800767c:	000a      	movs	r2, r1
 800767e:	1cbb      	adds	r3, r7, #2
 8007680:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	695a      	ldr	r2, [r3, #20]
 8007686:	1cbb      	adds	r3, r7, #2
 8007688:	881b      	ldrh	r3, [r3, #0]
 800768a:	405a      	eors	r2, r3
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	615a      	str	r2, [r3, #20]
}
 8007690:	46c0      	nop			; (mov r8, r8)
 8007692:	46bd      	mov	sp, r7
 8007694:	b002      	add	sp, #8
 8007696:	bd80      	pop	{r7, pc}

08007698 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b082      	sub	sp, #8
 800769c:	af00      	add	r7, sp, #0
 800769e:	0002      	movs	r2, r0
 80076a0:	1dbb      	adds	r3, r7, #6
 80076a2:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 80076a4:	4b09      	ldr	r3, [pc, #36]	; (80076cc <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80076a6:	695b      	ldr	r3, [r3, #20]
 80076a8:	1dba      	adds	r2, r7, #6
 80076aa:	8812      	ldrh	r2, [r2, #0]
 80076ac:	4013      	ands	r3, r2
 80076ae:	d008      	beq.n	80076c2 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80076b0:	4b06      	ldr	r3, [pc, #24]	; (80076cc <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80076b2:	1dba      	adds	r2, r7, #6
 80076b4:	8812      	ldrh	r2, [r2, #0]
 80076b6:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80076b8:	1dbb      	adds	r3, r7, #6
 80076ba:	881b      	ldrh	r3, [r3, #0]
 80076bc:	0018      	movs	r0, r3
 80076be:	f7fd f95d 	bl	800497c <HAL_GPIO_EXTI_Callback>
  }
}
 80076c2:	46c0      	nop			; (mov r8, r8)
 80076c4:	46bd      	mov	sp, r7
 80076c6:	b002      	add	sp, #8
 80076c8:	bd80      	pop	{r7, pc}
 80076ca:	46c0      	nop			; (mov r8, r8)
 80076cc:	40010400 	.word	0x40010400

080076d0 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b084      	sub	sp, #16
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d101      	bne.n	80076e2 <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 80076de:	2301      	movs	r3, #1
 80076e0:	e06c      	b.n	80077bc <HAL_LPTIM_Init+0xec>
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	222e      	movs	r2, #46	; 0x2e
 80076e6:	5c9b      	ldrb	r3, [r3, r2]
 80076e8:	b2db      	uxtb	r3, r3
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d107      	bne.n	80076fe <HAL_LPTIM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	222d      	movs	r2, #45	; 0x2d
 80076f2:	2100      	movs	r1, #0
 80076f4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	0018      	movs	r0, r3
 80076fa:	f7fc fc6f 	bl	8003fdc <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	222e      	movs	r2, #46	; 0x2e
 8007702:	2102      	movs	r1, #2
 8007704:	5499      	strb	r1, [r3, r2]

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	68db      	ldr	r3, [r3, #12]
 800770c:	60fb      	str	r3, [r7, #12]

  if (((hlptim->Init.Clock.Source) == LPTIM_CLOCKSOURCE_ULPTIM) || ((hlptim->Init.CounterSource) == LPTIM_COUNTERSOURCE_EXTERNAL))
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	685b      	ldr	r3, [r3, #4]
 8007712:	2b01      	cmp	r3, #1
 8007714:	d005      	beq.n	8007722 <HAL_LPTIM_Init+0x52>
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800771a:	2380      	movs	r3, #128	; 0x80
 800771c:	041b      	lsls	r3, r3, #16
 800771e:	429a      	cmp	r2, r3
 8007720:	d103      	bne.n	800772a <HAL_LPTIM_Init+0x5a>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	221e      	movs	r2, #30
 8007726:	4393      	bics	r3, r2
 8007728:	60fb      	str	r3, [r7, #12]
  }
  if ((hlptim->Init.Trigger.Source) != LPTIM_TRIGSOURCE_SOFTWARE)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	695b      	ldr	r3, [r3, #20]
 800772e:	4a25      	ldr	r2, [pc, #148]	; (80077c4 <HAL_LPTIM_Init+0xf4>)
 8007730:	4293      	cmp	r3, r2
 8007732:	d003      	beq.n	800773c <HAL_LPTIM_Init+0x6c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	4a24      	ldr	r2, [pc, #144]	; (80077c8 <HAL_LPTIM_Init+0xf8>)
 8007738:	4013      	ands	r3, r2
 800773a:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, CKPOL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_CKPOL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	4a23      	ldr	r2, [pc, #140]	; (80077cc <HAL_LPTIM_Init+0xfc>)
 8007740:	4013      	ands	r3, r2
 8007742:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800774c:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 8007752:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 8007758:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 800775e:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8007760:	68fa      	ldr	r2, [r7, #12]
 8007762:	4313      	orrs	r3, r2
 8007764:	60fb      	str	r3, [r7, #12]

  if (((hlptim->Init.Clock.Source) == LPTIM_CLOCKSOURCE_ULPTIM) || ((hlptim->Init.CounterSource) == LPTIM_COUNTERSOURCE_EXTERNAL))
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	685b      	ldr	r3, [r3, #4]
 800776a:	2b01      	cmp	r3, #1
 800776c:	d005      	beq.n	800777a <HAL_LPTIM_Init+0xaa>
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007772:	2380      	movs	r3, #128	; 0x80
 8007774:	041b      	lsls	r3, r3, #16
 8007776:	429a      	cmp	r2, r3
 8007778:	d107      	bne.n	800778a <HAL_LPTIM_Init+0xba>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8007782:	4313      	orrs	r3, r2
 8007784:	68fa      	ldr	r2, [r7, #12]
 8007786:	4313      	orrs	r3, r2
 8007788:	60fb      	str	r3, [r7, #12]
  }

  if ((hlptim->Init.Trigger.Source) != LPTIM_TRIGSOURCE_SOFTWARE)
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	695b      	ldr	r3, [r3, #20]
 800778e:	4a0d      	ldr	r2, [pc, #52]	; (80077c4 <HAL_LPTIM_Init+0xf4>)
 8007790:	4293      	cmp	r3, r2
 8007792:	d00a      	beq.n	80077aa <HAL_LPTIM_Init+0xda>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 800779c:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 80077a2:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80077a4:	68fa      	ldr	r2, [r7, #12]
 80077a6:	4313      	orrs	r3, r2
 80077a8:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	68fa      	ldr	r2, [r7, #12]
 80077b0:	60da      	str	r2, [r3, #12]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	222e      	movs	r2, #46	; 0x2e
 80077b6:	2101      	movs	r1, #1
 80077b8:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80077ba:	2300      	movs	r3, #0
}
 80077bc:	0018      	movs	r0, r3
 80077be:	46bd      	mov	sp, r7
 80077c0:	b004      	add	sp, #16
 80077c2:	bd80      	pop	{r7, pc}
 80077c4:	0000ffff 	.word	0x0000ffff
 80077c8:	ffff1f3f 	.word	0xffff1f3f
 80077cc:	ff19f1f8 	.word	0xff19f1f8

080077d0 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b082      	sub	sp, #8
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	2201      	movs	r2, #1
 80077e0:	4013      	ands	r3, r2
 80077e2:	2b01      	cmp	r3, #1
 80077e4:	d10e      	bne.n	8007804 <HAL_LPTIM_IRQHandler+0x34>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	689b      	ldr	r3, [r3, #8]
 80077ec:	2201      	movs	r2, #1
 80077ee:	4013      	ands	r3, r2
 80077f0:	2b01      	cmp	r3, #1
 80077f2:	d107      	bne.n	8007804 <HAL_LPTIM_IRQHandler+0x34>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	2201      	movs	r2, #1
 80077fa:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	0018      	movs	r0, r3
 8007800:	f000 f888 	bl	8007914 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	2202      	movs	r2, #2
 800780c:	4013      	ands	r3, r2
 800780e:	2b02      	cmp	r3, #2
 8007810:	d10e      	bne.n	8007830 <HAL_LPTIM_IRQHandler+0x60>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	689b      	ldr	r3, [r3, #8]
 8007818:	2202      	movs	r2, #2
 800781a:	4013      	ands	r3, r2
 800781c:	2b02      	cmp	r3, #2
 800781e:	d107      	bne.n	8007830 <HAL_LPTIM_IRQHandler+0x60>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	2202      	movs	r2, #2
 8007826:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	0018      	movs	r0, r3
 800782c:	f000 f87a 	bl	8007924 <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	2204      	movs	r2, #4
 8007838:	4013      	ands	r3, r2
 800783a:	2b04      	cmp	r3, #4
 800783c:	d10e      	bne.n	800785c <HAL_LPTIM_IRQHandler+0x8c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	689b      	ldr	r3, [r3, #8]
 8007844:	2204      	movs	r2, #4
 8007846:	4013      	ands	r3, r2
 8007848:	2b04      	cmp	r3, #4
 800784a:	d107      	bne.n	800785c <HAL_LPTIM_IRQHandler+0x8c>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	2204      	movs	r2, #4
 8007852:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	0018      	movs	r0, r3
 8007858:	f000 f86c 	bl	8007934 <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	2208      	movs	r2, #8
 8007864:	4013      	ands	r3, r2
 8007866:	2b08      	cmp	r3, #8
 8007868:	d10e      	bne.n	8007888 <HAL_LPTIM_IRQHandler+0xb8>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	689b      	ldr	r3, [r3, #8]
 8007870:	2208      	movs	r2, #8
 8007872:	4013      	ands	r3, r2
 8007874:	2b08      	cmp	r3, #8
 8007876:	d107      	bne.n	8007888 <HAL_LPTIM_IRQHandler+0xb8>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	2208      	movs	r2, #8
 800787e:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	0018      	movs	r0, r3
 8007884:	f000 f85e 	bl	8007944 <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	2210      	movs	r2, #16
 8007890:	4013      	ands	r3, r2
 8007892:	2b10      	cmp	r3, #16
 8007894:	d10e      	bne.n	80078b4 <HAL_LPTIM_IRQHandler+0xe4>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	689b      	ldr	r3, [r3, #8]
 800789c:	2210      	movs	r2, #16
 800789e:	4013      	ands	r3, r2
 80078a0:	2b10      	cmp	r3, #16
 80078a2:	d107      	bne.n	80078b4 <HAL_LPTIM_IRQHandler+0xe4>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	2210      	movs	r2, #16
 80078aa:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	0018      	movs	r0, r3
 80078b0:	f000 f850 	bl	8007954 <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	2220      	movs	r2, #32
 80078bc:	4013      	ands	r3, r2
 80078be:	2b20      	cmp	r3, #32
 80078c0:	d10e      	bne.n	80078e0 <HAL_LPTIM_IRQHandler+0x110>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	689b      	ldr	r3, [r3, #8]
 80078c8:	2220      	movs	r2, #32
 80078ca:	4013      	ands	r3, r2
 80078cc:	2b20      	cmp	r3, #32
 80078ce:	d107      	bne.n	80078e0 <HAL_LPTIM_IRQHandler+0x110>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	2220      	movs	r2, #32
 80078d6:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	0018      	movs	r0, r3
 80078dc:	f000 f842 	bl	8007964 <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	2240      	movs	r2, #64	; 0x40
 80078e8:	4013      	ands	r3, r2
 80078ea:	2b40      	cmp	r3, #64	; 0x40
 80078ec:	d10e      	bne.n	800790c <HAL_LPTIM_IRQHandler+0x13c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	689b      	ldr	r3, [r3, #8]
 80078f4:	2240      	movs	r2, #64	; 0x40
 80078f6:	4013      	ands	r3, r2
 80078f8:	2b40      	cmp	r3, #64	; 0x40
 80078fa:	d107      	bne.n	800790c <HAL_LPTIM_IRQHandler+0x13c>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	2240      	movs	r2, #64	; 0x40
 8007902:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	0018      	movs	r0, r3
 8007908:	f000 f834 	bl	8007974 <HAL_LPTIM_DirectionDownCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 800790c:	46c0      	nop			; (mov r8, r8)
 800790e:	46bd      	mov	sp, r7
 8007910:	b002      	add	sp, #8
 8007912:	bd80      	pop	{r7, pc}

08007914 <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b082      	sub	sp, #8
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 800791c:	46c0      	nop			; (mov r8, r8)
 800791e:	46bd      	mov	sp, r7
 8007920:	b002      	add	sp, #8
 8007922:	bd80      	pop	{r7, pc}

08007924 <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8007924:	b580      	push	{r7, lr}
 8007926:	b082      	sub	sp, #8
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 800792c:	46c0      	nop			; (mov r8, r8)
 800792e:	46bd      	mov	sp, r7
 8007930:	b002      	add	sp, #8
 8007932:	bd80      	pop	{r7, pc}

08007934 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b082      	sub	sp, #8
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 800793c:	46c0      	nop			; (mov r8, r8)
 800793e:	46bd      	mov	sp, r7
 8007940:	b002      	add	sp, #8
 8007942:	bd80      	pop	{r7, pc}

08007944 <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b082      	sub	sp, #8
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 800794c:	46c0      	nop			; (mov r8, r8)
 800794e:	46bd      	mov	sp, r7
 8007950:	b002      	add	sp, #8
 8007952:	bd80      	pop	{r7, pc}

08007954 <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8007954:	b580      	push	{r7, lr}
 8007956:	b082      	sub	sp, #8
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 800795c:	46c0      	nop			; (mov r8, r8)
 800795e:	46bd      	mov	sp, r7
 8007960:	b002      	add	sp, #8
 8007962:	bd80      	pop	{r7, pc}

08007964 <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 8007964:	b580      	push	{r7, lr}
 8007966:	b082      	sub	sp, #8
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 800796c:	46c0      	nop			; (mov r8, r8)
 800796e:	46bd      	mov	sp, r7
 8007970:	b002      	add	sp, #8
 8007972:	bd80      	pop	{r7, pc}

08007974 <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 8007974:	b580      	push	{r7, lr}
 8007976:	b082      	sub	sp, #8
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 800797c:	46c0      	nop			; (mov r8, r8)
 800797e:	46bd      	mov	sp, r7
 8007980:	b002      	add	sp, #8
 8007982:	bd80      	pop	{r7, pc}

08007984 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8007984:	b580      	push	{r7, lr}
 8007986:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 8007988:	4b04      	ldr	r3, [pc, #16]	; (800799c <HAL_PWR_EnableBkUpAccess+0x18>)
 800798a:	681a      	ldr	r2, [r3, #0]
 800798c:	4b03      	ldr	r3, [pc, #12]	; (800799c <HAL_PWR_EnableBkUpAccess+0x18>)
 800798e:	2180      	movs	r1, #128	; 0x80
 8007990:	0049      	lsls	r1, r1, #1
 8007992:	430a      	orrs	r2, r1
 8007994:	601a      	str	r2, [r3, #0]
}
 8007996:	46c0      	nop			; (mov r8, r8)
 8007998:	46bd      	mov	sp, r7
 800799a:	bd80      	pop	{r7, pc}
 800799c:	40007000 	.word	0x40007000

080079a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80079a0:	b5b0      	push	{r4, r5, r7, lr}
 80079a2:	b08a      	sub	sp, #40	; 0x28
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d102      	bne.n	80079b4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80079ae:	2301      	movs	r3, #1
 80079b0:	f000 fbbc 	bl	800812c <HAL_RCC_OscConfig+0x78c>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80079b4:	4bc8      	ldr	r3, [pc, #800]	; (8007cd8 <HAL_RCC_OscConfig+0x338>)
 80079b6:	68db      	ldr	r3, [r3, #12]
 80079b8:	220c      	movs	r2, #12
 80079ba:	4013      	ands	r3, r2
 80079bc:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80079be:	4bc6      	ldr	r3, [pc, #792]	; (8007cd8 <HAL_RCC_OscConfig+0x338>)
 80079c0:	68da      	ldr	r2, [r3, #12]
 80079c2:	2380      	movs	r3, #128	; 0x80
 80079c4:	025b      	lsls	r3, r3, #9
 80079c6:	4013      	ands	r3, r2
 80079c8:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	2201      	movs	r2, #1
 80079d0:	4013      	ands	r3, r2
 80079d2:	d100      	bne.n	80079d6 <HAL_RCC_OscConfig+0x36>
 80079d4:	e07e      	b.n	8007ad4 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80079d6:	69fb      	ldr	r3, [r7, #28]
 80079d8:	2b08      	cmp	r3, #8
 80079da:	d007      	beq.n	80079ec <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80079dc:	69fb      	ldr	r3, [r7, #28]
 80079de:	2b0c      	cmp	r3, #12
 80079e0:	d112      	bne.n	8007a08 <HAL_RCC_OscConfig+0x68>
 80079e2:	69ba      	ldr	r2, [r7, #24]
 80079e4:	2380      	movs	r3, #128	; 0x80
 80079e6:	025b      	lsls	r3, r3, #9
 80079e8:	429a      	cmp	r2, r3
 80079ea:	d10d      	bne.n	8007a08 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80079ec:	4bba      	ldr	r3, [pc, #744]	; (8007cd8 <HAL_RCC_OscConfig+0x338>)
 80079ee:	681a      	ldr	r2, [r3, #0]
 80079f0:	2380      	movs	r3, #128	; 0x80
 80079f2:	029b      	lsls	r3, r3, #10
 80079f4:	4013      	ands	r3, r2
 80079f6:	d100      	bne.n	80079fa <HAL_RCC_OscConfig+0x5a>
 80079f8:	e06b      	b.n	8007ad2 <HAL_RCC_OscConfig+0x132>
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	685b      	ldr	r3, [r3, #4]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d167      	bne.n	8007ad2 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8007a02:	2301      	movs	r3, #1
 8007a04:	f000 fb92 	bl	800812c <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	685a      	ldr	r2, [r3, #4]
 8007a0c:	2380      	movs	r3, #128	; 0x80
 8007a0e:	025b      	lsls	r3, r3, #9
 8007a10:	429a      	cmp	r2, r3
 8007a12:	d107      	bne.n	8007a24 <HAL_RCC_OscConfig+0x84>
 8007a14:	4bb0      	ldr	r3, [pc, #704]	; (8007cd8 <HAL_RCC_OscConfig+0x338>)
 8007a16:	681a      	ldr	r2, [r3, #0]
 8007a18:	4baf      	ldr	r3, [pc, #700]	; (8007cd8 <HAL_RCC_OscConfig+0x338>)
 8007a1a:	2180      	movs	r1, #128	; 0x80
 8007a1c:	0249      	lsls	r1, r1, #9
 8007a1e:	430a      	orrs	r2, r1
 8007a20:	601a      	str	r2, [r3, #0]
 8007a22:	e027      	b.n	8007a74 <HAL_RCC_OscConfig+0xd4>
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	685a      	ldr	r2, [r3, #4]
 8007a28:	23a0      	movs	r3, #160	; 0xa0
 8007a2a:	02db      	lsls	r3, r3, #11
 8007a2c:	429a      	cmp	r2, r3
 8007a2e:	d10e      	bne.n	8007a4e <HAL_RCC_OscConfig+0xae>
 8007a30:	4ba9      	ldr	r3, [pc, #676]	; (8007cd8 <HAL_RCC_OscConfig+0x338>)
 8007a32:	681a      	ldr	r2, [r3, #0]
 8007a34:	4ba8      	ldr	r3, [pc, #672]	; (8007cd8 <HAL_RCC_OscConfig+0x338>)
 8007a36:	2180      	movs	r1, #128	; 0x80
 8007a38:	02c9      	lsls	r1, r1, #11
 8007a3a:	430a      	orrs	r2, r1
 8007a3c:	601a      	str	r2, [r3, #0]
 8007a3e:	4ba6      	ldr	r3, [pc, #664]	; (8007cd8 <HAL_RCC_OscConfig+0x338>)
 8007a40:	681a      	ldr	r2, [r3, #0]
 8007a42:	4ba5      	ldr	r3, [pc, #660]	; (8007cd8 <HAL_RCC_OscConfig+0x338>)
 8007a44:	2180      	movs	r1, #128	; 0x80
 8007a46:	0249      	lsls	r1, r1, #9
 8007a48:	430a      	orrs	r2, r1
 8007a4a:	601a      	str	r2, [r3, #0]
 8007a4c:	e012      	b.n	8007a74 <HAL_RCC_OscConfig+0xd4>
 8007a4e:	4ba2      	ldr	r3, [pc, #648]	; (8007cd8 <HAL_RCC_OscConfig+0x338>)
 8007a50:	681a      	ldr	r2, [r3, #0]
 8007a52:	4ba1      	ldr	r3, [pc, #644]	; (8007cd8 <HAL_RCC_OscConfig+0x338>)
 8007a54:	49a1      	ldr	r1, [pc, #644]	; (8007cdc <HAL_RCC_OscConfig+0x33c>)
 8007a56:	400a      	ands	r2, r1
 8007a58:	601a      	str	r2, [r3, #0]
 8007a5a:	4b9f      	ldr	r3, [pc, #636]	; (8007cd8 <HAL_RCC_OscConfig+0x338>)
 8007a5c:	681a      	ldr	r2, [r3, #0]
 8007a5e:	2380      	movs	r3, #128	; 0x80
 8007a60:	025b      	lsls	r3, r3, #9
 8007a62:	4013      	ands	r3, r2
 8007a64:	60fb      	str	r3, [r7, #12]
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	4b9b      	ldr	r3, [pc, #620]	; (8007cd8 <HAL_RCC_OscConfig+0x338>)
 8007a6a:	681a      	ldr	r2, [r3, #0]
 8007a6c:	4b9a      	ldr	r3, [pc, #616]	; (8007cd8 <HAL_RCC_OscConfig+0x338>)
 8007a6e:	499c      	ldr	r1, [pc, #624]	; (8007ce0 <HAL_RCC_OscConfig+0x340>)
 8007a70:	400a      	ands	r2, r1
 8007a72:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	685b      	ldr	r3, [r3, #4]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d015      	beq.n	8007aa8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a7c:	f7fe fcf6 	bl	800646c <HAL_GetTick>
 8007a80:	0003      	movs	r3, r0
 8007a82:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007a84:	e009      	b.n	8007a9a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007a86:	f7fe fcf1 	bl	800646c <HAL_GetTick>
 8007a8a:	0002      	movs	r2, r0
 8007a8c:	697b      	ldr	r3, [r7, #20]
 8007a8e:	1ad3      	subs	r3, r2, r3
 8007a90:	2b64      	cmp	r3, #100	; 0x64
 8007a92:	d902      	bls.n	8007a9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007a94:	2303      	movs	r3, #3
 8007a96:	f000 fb49 	bl	800812c <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007a9a:	4b8f      	ldr	r3, [pc, #572]	; (8007cd8 <HAL_RCC_OscConfig+0x338>)
 8007a9c:	681a      	ldr	r2, [r3, #0]
 8007a9e:	2380      	movs	r3, #128	; 0x80
 8007aa0:	029b      	lsls	r3, r3, #10
 8007aa2:	4013      	ands	r3, r2
 8007aa4:	d0ef      	beq.n	8007a86 <HAL_RCC_OscConfig+0xe6>
 8007aa6:	e015      	b.n	8007ad4 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007aa8:	f7fe fce0 	bl	800646c <HAL_GetTick>
 8007aac:	0003      	movs	r3, r0
 8007aae:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007ab0:	e008      	b.n	8007ac4 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007ab2:	f7fe fcdb 	bl	800646c <HAL_GetTick>
 8007ab6:	0002      	movs	r2, r0
 8007ab8:	697b      	ldr	r3, [r7, #20]
 8007aba:	1ad3      	subs	r3, r2, r3
 8007abc:	2b64      	cmp	r3, #100	; 0x64
 8007abe:	d901      	bls.n	8007ac4 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8007ac0:	2303      	movs	r3, #3
 8007ac2:	e333      	b.n	800812c <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007ac4:	4b84      	ldr	r3, [pc, #528]	; (8007cd8 <HAL_RCC_OscConfig+0x338>)
 8007ac6:	681a      	ldr	r2, [r3, #0]
 8007ac8:	2380      	movs	r3, #128	; 0x80
 8007aca:	029b      	lsls	r3, r3, #10
 8007acc:	4013      	ands	r3, r2
 8007ace:	d1f0      	bne.n	8007ab2 <HAL_RCC_OscConfig+0x112>
 8007ad0:	e000      	b.n	8007ad4 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007ad2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	2202      	movs	r2, #2
 8007ada:	4013      	ands	r3, r2
 8007adc:	d100      	bne.n	8007ae0 <HAL_RCC_OscConfig+0x140>
 8007ade:	e098      	b.n	8007c12 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	68db      	ldr	r3, [r3, #12]
 8007ae4:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8007ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ae8:	2220      	movs	r2, #32
 8007aea:	4013      	ands	r3, r2
 8007aec:	d009      	beq.n	8007b02 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8007aee:	4b7a      	ldr	r3, [pc, #488]	; (8007cd8 <HAL_RCC_OscConfig+0x338>)
 8007af0:	681a      	ldr	r2, [r3, #0]
 8007af2:	4b79      	ldr	r3, [pc, #484]	; (8007cd8 <HAL_RCC_OscConfig+0x338>)
 8007af4:	2120      	movs	r1, #32
 8007af6:	430a      	orrs	r2, r1
 8007af8:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8007afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007afc:	2220      	movs	r2, #32
 8007afe:	4393      	bics	r3, r2
 8007b00:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007b02:	69fb      	ldr	r3, [r7, #28]
 8007b04:	2b04      	cmp	r3, #4
 8007b06:	d005      	beq.n	8007b14 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8007b08:	69fb      	ldr	r3, [r7, #28]
 8007b0a:	2b0c      	cmp	r3, #12
 8007b0c:	d13d      	bne.n	8007b8a <HAL_RCC_OscConfig+0x1ea>
 8007b0e:	69bb      	ldr	r3, [r7, #24]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d13a      	bne.n	8007b8a <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8007b14:	4b70      	ldr	r3, [pc, #448]	; (8007cd8 <HAL_RCC_OscConfig+0x338>)
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	2204      	movs	r2, #4
 8007b1a:	4013      	ands	r3, r2
 8007b1c:	d004      	beq.n	8007b28 <HAL_RCC_OscConfig+0x188>
 8007b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d101      	bne.n	8007b28 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8007b24:	2301      	movs	r3, #1
 8007b26:	e301      	b.n	800812c <HAL_RCC_OscConfig+0x78c>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b28:	4b6b      	ldr	r3, [pc, #428]	; (8007cd8 <HAL_RCC_OscConfig+0x338>)
 8007b2a:	685b      	ldr	r3, [r3, #4]
 8007b2c:	4a6d      	ldr	r2, [pc, #436]	; (8007ce4 <HAL_RCC_OscConfig+0x344>)
 8007b2e:	4013      	ands	r3, r2
 8007b30:	0019      	movs	r1, r3
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	691b      	ldr	r3, [r3, #16]
 8007b36:	021a      	lsls	r2, r3, #8
 8007b38:	4b67      	ldr	r3, [pc, #412]	; (8007cd8 <HAL_RCC_OscConfig+0x338>)
 8007b3a:	430a      	orrs	r2, r1
 8007b3c:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8007b3e:	4b66      	ldr	r3, [pc, #408]	; (8007cd8 <HAL_RCC_OscConfig+0x338>)
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	2209      	movs	r2, #9
 8007b44:	4393      	bics	r3, r2
 8007b46:	0019      	movs	r1, r3
 8007b48:	4b63      	ldr	r3, [pc, #396]	; (8007cd8 <HAL_RCC_OscConfig+0x338>)
 8007b4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b4c:	430a      	orrs	r2, r1
 8007b4e:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007b50:	f000 fc20 	bl	8008394 <HAL_RCC_GetSysClockFreq>
 8007b54:	0001      	movs	r1, r0
 8007b56:	4b60      	ldr	r3, [pc, #384]	; (8007cd8 <HAL_RCC_OscConfig+0x338>)
 8007b58:	68db      	ldr	r3, [r3, #12]
 8007b5a:	091b      	lsrs	r3, r3, #4
 8007b5c:	220f      	movs	r2, #15
 8007b5e:	4013      	ands	r3, r2
 8007b60:	4a61      	ldr	r2, [pc, #388]	; (8007ce8 <HAL_RCC_OscConfig+0x348>)
 8007b62:	5cd3      	ldrb	r3, [r2, r3]
 8007b64:	000a      	movs	r2, r1
 8007b66:	40da      	lsrs	r2, r3
 8007b68:	4b60      	ldr	r3, [pc, #384]	; (8007cec <HAL_RCC_OscConfig+0x34c>)
 8007b6a:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (TICK_INT_PRIORITY);
 8007b6c:	2513      	movs	r5, #19
 8007b6e:	197c      	adds	r4, r7, r5
 8007b70:	2000      	movs	r0, #0
 8007b72:	f7fe fc45 	bl	8006400 <HAL_InitTick>
 8007b76:	0003      	movs	r3, r0
 8007b78:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8007b7a:	197b      	adds	r3, r7, r5
 8007b7c:	781b      	ldrb	r3, [r3, #0]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d047      	beq.n	8007c12 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8007b82:	2313      	movs	r3, #19
 8007b84:	18fb      	adds	r3, r7, r3
 8007b86:	781b      	ldrb	r3, [r3, #0]
 8007b88:	e2d0      	b.n	800812c <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8007b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d027      	beq.n	8007be0 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8007b90:	4b51      	ldr	r3, [pc, #324]	; (8007cd8 <HAL_RCC_OscConfig+0x338>)
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	2209      	movs	r2, #9
 8007b96:	4393      	bics	r3, r2
 8007b98:	0019      	movs	r1, r3
 8007b9a:	4b4f      	ldr	r3, [pc, #316]	; (8007cd8 <HAL_RCC_OscConfig+0x338>)
 8007b9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b9e:	430a      	orrs	r2, r1
 8007ba0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ba2:	f7fe fc63 	bl	800646c <HAL_GetTick>
 8007ba6:	0003      	movs	r3, r0
 8007ba8:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007baa:	e008      	b.n	8007bbe <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007bac:	f7fe fc5e 	bl	800646c <HAL_GetTick>
 8007bb0:	0002      	movs	r2, r0
 8007bb2:	697b      	ldr	r3, [r7, #20]
 8007bb4:	1ad3      	subs	r3, r2, r3
 8007bb6:	2b02      	cmp	r3, #2
 8007bb8:	d901      	bls.n	8007bbe <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8007bba:	2303      	movs	r3, #3
 8007bbc:	e2b6      	b.n	800812c <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007bbe:	4b46      	ldr	r3, [pc, #280]	; (8007cd8 <HAL_RCC_OscConfig+0x338>)
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	2204      	movs	r2, #4
 8007bc4:	4013      	ands	r3, r2
 8007bc6:	d0f1      	beq.n	8007bac <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007bc8:	4b43      	ldr	r3, [pc, #268]	; (8007cd8 <HAL_RCC_OscConfig+0x338>)
 8007bca:	685b      	ldr	r3, [r3, #4]
 8007bcc:	4a45      	ldr	r2, [pc, #276]	; (8007ce4 <HAL_RCC_OscConfig+0x344>)
 8007bce:	4013      	ands	r3, r2
 8007bd0:	0019      	movs	r1, r3
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	691b      	ldr	r3, [r3, #16]
 8007bd6:	021a      	lsls	r2, r3, #8
 8007bd8:	4b3f      	ldr	r3, [pc, #252]	; (8007cd8 <HAL_RCC_OscConfig+0x338>)
 8007bda:	430a      	orrs	r2, r1
 8007bdc:	605a      	str	r2, [r3, #4]
 8007bde:	e018      	b.n	8007c12 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007be0:	4b3d      	ldr	r3, [pc, #244]	; (8007cd8 <HAL_RCC_OscConfig+0x338>)
 8007be2:	681a      	ldr	r2, [r3, #0]
 8007be4:	4b3c      	ldr	r3, [pc, #240]	; (8007cd8 <HAL_RCC_OscConfig+0x338>)
 8007be6:	2101      	movs	r1, #1
 8007be8:	438a      	bics	r2, r1
 8007bea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007bec:	f7fe fc3e 	bl	800646c <HAL_GetTick>
 8007bf0:	0003      	movs	r3, r0
 8007bf2:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007bf4:	e008      	b.n	8007c08 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007bf6:	f7fe fc39 	bl	800646c <HAL_GetTick>
 8007bfa:	0002      	movs	r2, r0
 8007bfc:	697b      	ldr	r3, [r7, #20]
 8007bfe:	1ad3      	subs	r3, r2, r3
 8007c00:	2b02      	cmp	r3, #2
 8007c02:	d901      	bls.n	8007c08 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8007c04:	2303      	movs	r3, #3
 8007c06:	e291      	b.n	800812c <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007c08:	4b33      	ldr	r3, [pc, #204]	; (8007cd8 <HAL_RCC_OscConfig+0x338>)
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	2204      	movs	r2, #4
 8007c0e:	4013      	ands	r3, r2
 8007c10:	d1f1      	bne.n	8007bf6 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	2210      	movs	r2, #16
 8007c18:	4013      	ands	r3, r2
 8007c1a:	d100      	bne.n	8007c1e <HAL_RCC_OscConfig+0x27e>
 8007c1c:	e09f      	b.n	8007d5e <HAL_RCC_OscConfig+0x3be>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8007c1e:	69fb      	ldr	r3, [r7, #28]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d13f      	bne.n	8007ca4 <HAL_RCC_OscConfig+0x304>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007c24:	4b2c      	ldr	r3, [pc, #176]	; (8007cd8 <HAL_RCC_OscConfig+0x338>)
 8007c26:	681a      	ldr	r2, [r3, #0]
 8007c28:	2380      	movs	r3, #128	; 0x80
 8007c2a:	009b      	lsls	r3, r3, #2
 8007c2c:	4013      	ands	r3, r2
 8007c2e:	d005      	beq.n	8007c3c <HAL_RCC_OscConfig+0x29c>
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	69db      	ldr	r3, [r3, #28]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d101      	bne.n	8007c3c <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8007c38:	2301      	movs	r3, #1
 8007c3a:	e277      	b.n	800812c <HAL_RCC_OscConfig+0x78c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007c3c:	4b26      	ldr	r3, [pc, #152]	; (8007cd8 <HAL_RCC_OscConfig+0x338>)
 8007c3e:	685b      	ldr	r3, [r3, #4]
 8007c40:	4a2b      	ldr	r2, [pc, #172]	; (8007cf0 <HAL_RCC_OscConfig+0x350>)
 8007c42:	4013      	ands	r3, r2
 8007c44:	0019      	movs	r1, r3
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007c4a:	4b23      	ldr	r3, [pc, #140]	; (8007cd8 <HAL_RCC_OscConfig+0x338>)
 8007c4c:	430a      	orrs	r2, r1
 8007c4e:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007c50:	4b21      	ldr	r3, [pc, #132]	; (8007cd8 <HAL_RCC_OscConfig+0x338>)
 8007c52:	685b      	ldr	r3, [r3, #4]
 8007c54:	021b      	lsls	r3, r3, #8
 8007c56:	0a19      	lsrs	r1, r3, #8
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	6a1b      	ldr	r3, [r3, #32]
 8007c5c:	061a      	lsls	r2, r3, #24
 8007c5e:	4b1e      	ldr	r3, [pc, #120]	; (8007cd8 <HAL_RCC_OscConfig+0x338>)
 8007c60:	430a      	orrs	r2, r1
 8007c62:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c68:	0b5b      	lsrs	r3, r3, #13
 8007c6a:	3301      	adds	r3, #1
 8007c6c:	2280      	movs	r2, #128	; 0x80
 8007c6e:	0212      	lsls	r2, r2, #8
 8007c70:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8007c72:	4b19      	ldr	r3, [pc, #100]	; (8007cd8 <HAL_RCC_OscConfig+0x338>)
 8007c74:	68db      	ldr	r3, [r3, #12]
 8007c76:	091b      	lsrs	r3, r3, #4
 8007c78:	210f      	movs	r1, #15
 8007c7a:	400b      	ands	r3, r1
 8007c7c:	491a      	ldr	r1, [pc, #104]	; (8007ce8 <HAL_RCC_OscConfig+0x348>)
 8007c7e:	5ccb      	ldrb	r3, [r1, r3]
 8007c80:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8007c82:	4b1a      	ldr	r3, [pc, #104]	; (8007cec <HAL_RCC_OscConfig+0x34c>)
 8007c84:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8007c86:	2513      	movs	r5, #19
 8007c88:	197c      	adds	r4, r7, r5
 8007c8a:	2000      	movs	r0, #0
 8007c8c:	f7fe fbb8 	bl	8006400 <HAL_InitTick>
 8007c90:	0003      	movs	r3, r0
 8007c92:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8007c94:	197b      	adds	r3, r7, r5
 8007c96:	781b      	ldrb	r3, [r3, #0]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d060      	beq.n	8007d5e <HAL_RCC_OscConfig+0x3be>
        {
          return status;
 8007c9c:	2313      	movs	r3, #19
 8007c9e:	18fb      	adds	r3, r7, r3
 8007ca0:	781b      	ldrb	r3, [r3, #0]
 8007ca2:	e243      	b.n	800812c <HAL_RCC_OscConfig+0x78c>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	69db      	ldr	r3, [r3, #28]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d03e      	beq.n	8007d2a <HAL_RCC_OscConfig+0x38a>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8007cac:	4b0a      	ldr	r3, [pc, #40]	; (8007cd8 <HAL_RCC_OscConfig+0x338>)
 8007cae:	681a      	ldr	r2, [r3, #0]
 8007cb0:	4b09      	ldr	r3, [pc, #36]	; (8007cd8 <HAL_RCC_OscConfig+0x338>)
 8007cb2:	2180      	movs	r1, #128	; 0x80
 8007cb4:	0049      	lsls	r1, r1, #1
 8007cb6:	430a      	orrs	r2, r1
 8007cb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007cba:	f7fe fbd7 	bl	800646c <HAL_GetTick>
 8007cbe:	0003      	movs	r3, r0
 8007cc0:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8007cc2:	e017      	b.n	8007cf4 <HAL_RCC_OscConfig+0x354>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007cc4:	f7fe fbd2 	bl	800646c <HAL_GetTick>
 8007cc8:	0002      	movs	r2, r0
 8007cca:	697b      	ldr	r3, [r7, #20]
 8007ccc:	1ad3      	subs	r3, r2, r3
 8007cce:	2b02      	cmp	r3, #2
 8007cd0:	d910      	bls.n	8007cf4 <HAL_RCC_OscConfig+0x354>
          {
            return HAL_TIMEOUT;
 8007cd2:	2303      	movs	r3, #3
 8007cd4:	e22a      	b.n	800812c <HAL_RCC_OscConfig+0x78c>
 8007cd6:	46c0      	nop			; (mov r8, r8)
 8007cd8:	40021000 	.word	0x40021000
 8007cdc:	fffeffff 	.word	0xfffeffff
 8007ce0:	fffbffff 	.word	0xfffbffff
 8007ce4:	ffffe0ff 	.word	0xffffe0ff
 8007ce8:	0800bec0 	.word	0x0800bec0
 8007cec:	20000010 	.word	0x20000010
 8007cf0:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8007cf4:	4bc6      	ldr	r3, [pc, #792]	; (8008010 <HAL_RCC_OscConfig+0x670>)
 8007cf6:	681a      	ldr	r2, [r3, #0]
 8007cf8:	2380      	movs	r3, #128	; 0x80
 8007cfa:	009b      	lsls	r3, r3, #2
 8007cfc:	4013      	ands	r3, r2
 8007cfe:	d0e1      	beq.n	8007cc4 <HAL_RCC_OscConfig+0x324>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007d00:	4bc3      	ldr	r3, [pc, #780]	; (8008010 <HAL_RCC_OscConfig+0x670>)
 8007d02:	685b      	ldr	r3, [r3, #4]
 8007d04:	4ac3      	ldr	r2, [pc, #780]	; (8008014 <HAL_RCC_OscConfig+0x674>)
 8007d06:	4013      	ands	r3, r2
 8007d08:	0019      	movs	r1, r3
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007d0e:	4bc0      	ldr	r3, [pc, #768]	; (8008010 <HAL_RCC_OscConfig+0x670>)
 8007d10:	430a      	orrs	r2, r1
 8007d12:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007d14:	4bbe      	ldr	r3, [pc, #760]	; (8008010 <HAL_RCC_OscConfig+0x670>)
 8007d16:	685b      	ldr	r3, [r3, #4]
 8007d18:	021b      	lsls	r3, r3, #8
 8007d1a:	0a19      	lsrs	r1, r3, #8
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	6a1b      	ldr	r3, [r3, #32]
 8007d20:	061a      	lsls	r2, r3, #24
 8007d22:	4bbb      	ldr	r3, [pc, #748]	; (8008010 <HAL_RCC_OscConfig+0x670>)
 8007d24:	430a      	orrs	r2, r1
 8007d26:	605a      	str	r2, [r3, #4]
 8007d28:	e019      	b.n	8007d5e <HAL_RCC_OscConfig+0x3be>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8007d2a:	4bb9      	ldr	r3, [pc, #740]	; (8008010 <HAL_RCC_OscConfig+0x670>)
 8007d2c:	681a      	ldr	r2, [r3, #0]
 8007d2e:	4bb8      	ldr	r3, [pc, #736]	; (8008010 <HAL_RCC_OscConfig+0x670>)
 8007d30:	49b9      	ldr	r1, [pc, #740]	; (8008018 <HAL_RCC_OscConfig+0x678>)
 8007d32:	400a      	ands	r2, r1
 8007d34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d36:	f7fe fb99 	bl	800646c <HAL_GetTick>
 8007d3a:	0003      	movs	r3, r0
 8007d3c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8007d3e:	e008      	b.n	8007d52 <HAL_RCC_OscConfig+0x3b2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007d40:	f7fe fb94 	bl	800646c <HAL_GetTick>
 8007d44:	0002      	movs	r2, r0
 8007d46:	697b      	ldr	r3, [r7, #20]
 8007d48:	1ad3      	subs	r3, r2, r3
 8007d4a:	2b02      	cmp	r3, #2
 8007d4c:	d901      	bls.n	8007d52 <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 8007d4e:	2303      	movs	r3, #3
 8007d50:	e1ec      	b.n	800812c <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8007d52:	4baf      	ldr	r3, [pc, #700]	; (8008010 <HAL_RCC_OscConfig+0x670>)
 8007d54:	681a      	ldr	r2, [r3, #0]
 8007d56:	2380      	movs	r3, #128	; 0x80
 8007d58:	009b      	lsls	r3, r3, #2
 8007d5a:	4013      	ands	r3, r2
 8007d5c:	d1f0      	bne.n	8007d40 <HAL_RCC_OscConfig+0x3a0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	2208      	movs	r2, #8
 8007d64:	4013      	ands	r3, r2
 8007d66:	d036      	beq.n	8007dd6 <HAL_RCC_OscConfig+0x436>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	695b      	ldr	r3, [r3, #20]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d019      	beq.n	8007da4 <HAL_RCC_OscConfig+0x404>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007d70:	4ba7      	ldr	r3, [pc, #668]	; (8008010 <HAL_RCC_OscConfig+0x670>)
 8007d72:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007d74:	4ba6      	ldr	r3, [pc, #664]	; (8008010 <HAL_RCC_OscConfig+0x670>)
 8007d76:	2101      	movs	r1, #1
 8007d78:	430a      	orrs	r2, r1
 8007d7a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007d7c:	f7fe fb76 	bl	800646c <HAL_GetTick>
 8007d80:	0003      	movs	r3, r0
 8007d82:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007d84:	e008      	b.n	8007d98 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007d86:	f7fe fb71 	bl	800646c <HAL_GetTick>
 8007d8a:	0002      	movs	r2, r0
 8007d8c:	697b      	ldr	r3, [r7, #20]
 8007d8e:	1ad3      	subs	r3, r2, r3
 8007d90:	2b02      	cmp	r3, #2
 8007d92:	d901      	bls.n	8007d98 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8007d94:	2303      	movs	r3, #3
 8007d96:	e1c9      	b.n	800812c <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007d98:	4b9d      	ldr	r3, [pc, #628]	; (8008010 <HAL_RCC_OscConfig+0x670>)
 8007d9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d9c:	2202      	movs	r2, #2
 8007d9e:	4013      	ands	r3, r2
 8007da0:	d0f1      	beq.n	8007d86 <HAL_RCC_OscConfig+0x3e6>
 8007da2:	e018      	b.n	8007dd6 <HAL_RCC_OscConfig+0x436>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007da4:	4b9a      	ldr	r3, [pc, #616]	; (8008010 <HAL_RCC_OscConfig+0x670>)
 8007da6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007da8:	4b99      	ldr	r3, [pc, #612]	; (8008010 <HAL_RCC_OscConfig+0x670>)
 8007daa:	2101      	movs	r1, #1
 8007dac:	438a      	bics	r2, r1
 8007dae:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007db0:	f7fe fb5c 	bl	800646c <HAL_GetTick>
 8007db4:	0003      	movs	r3, r0
 8007db6:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007db8:	e008      	b.n	8007dcc <HAL_RCC_OscConfig+0x42c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007dba:	f7fe fb57 	bl	800646c <HAL_GetTick>
 8007dbe:	0002      	movs	r2, r0
 8007dc0:	697b      	ldr	r3, [r7, #20]
 8007dc2:	1ad3      	subs	r3, r2, r3
 8007dc4:	2b02      	cmp	r3, #2
 8007dc6:	d901      	bls.n	8007dcc <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8007dc8:	2303      	movs	r3, #3
 8007dca:	e1af      	b.n	800812c <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007dcc:	4b90      	ldr	r3, [pc, #576]	; (8008010 <HAL_RCC_OscConfig+0x670>)
 8007dce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007dd0:	2202      	movs	r2, #2
 8007dd2:	4013      	ands	r3, r2
 8007dd4:	d1f1      	bne.n	8007dba <HAL_RCC_OscConfig+0x41a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	2204      	movs	r2, #4
 8007ddc:	4013      	ands	r3, r2
 8007dde:	d100      	bne.n	8007de2 <HAL_RCC_OscConfig+0x442>
 8007de0:	e0af      	b.n	8007f42 <HAL_RCC_OscConfig+0x5a2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007de2:	2323      	movs	r3, #35	; 0x23
 8007de4:	18fb      	adds	r3, r7, r3
 8007de6:	2200      	movs	r2, #0
 8007de8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007dea:	4b89      	ldr	r3, [pc, #548]	; (8008010 <HAL_RCC_OscConfig+0x670>)
 8007dec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007dee:	2380      	movs	r3, #128	; 0x80
 8007df0:	055b      	lsls	r3, r3, #21
 8007df2:	4013      	ands	r3, r2
 8007df4:	d10a      	bne.n	8007e0c <HAL_RCC_OscConfig+0x46c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007df6:	4b86      	ldr	r3, [pc, #536]	; (8008010 <HAL_RCC_OscConfig+0x670>)
 8007df8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007dfa:	4b85      	ldr	r3, [pc, #532]	; (8008010 <HAL_RCC_OscConfig+0x670>)
 8007dfc:	2180      	movs	r1, #128	; 0x80
 8007dfe:	0549      	lsls	r1, r1, #21
 8007e00:	430a      	orrs	r2, r1
 8007e02:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8007e04:	2323      	movs	r3, #35	; 0x23
 8007e06:	18fb      	adds	r3, r7, r3
 8007e08:	2201      	movs	r2, #1
 8007e0a:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007e0c:	4b83      	ldr	r3, [pc, #524]	; (800801c <HAL_RCC_OscConfig+0x67c>)
 8007e0e:	681a      	ldr	r2, [r3, #0]
 8007e10:	2380      	movs	r3, #128	; 0x80
 8007e12:	005b      	lsls	r3, r3, #1
 8007e14:	4013      	ands	r3, r2
 8007e16:	d11a      	bne.n	8007e4e <HAL_RCC_OscConfig+0x4ae>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007e18:	4b80      	ldr	r3, [pc, #512]	; (800801c <HAL_RCC_OscConfig+0x67c>)
 8007e1a:	681a      	ldr	r2, [r3, #0]
 8007e1c:	4b7f      	ldr	r3, [pc, #508]	; (800801c <HAL_RCC_OscConfig+0x67c>)
 8007e1e:	2180      	movs	r1, #128	; 0x80
 8007e20:	0049      	lsls	r1, r1, #1
 8007e22:	430a      	orrs	r2, r1
 8007e24:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007e26:	f7fe fb21 	bl	800646c <HAL_GetTick>
 8007e2a:	0003      	movs	r3, r0
 8007e2c:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007e2e:	e008      	b.n	8007e42 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007e30:	f7fe fb1c 	bl	800646c <HAL_GetTick>
 8007e34:	0002      	movs	r2, r0
 8007e36:	697b      	ldr	r3, [r7, #20]
 8007e38:	1ad3      	subs	r3, r2, r3
 8007e3a:	2b64      	cmp	r3, #100	; 0x64
 8007e3c:	d901      	bls.n	8007e42 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8007e3e:	2303      	movs	r3, #3
 8007e40:	e174      	b.n	800812c <HAL_RCC_OscConfig+0x78c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007e42:	4b76      	ldr	r3, [pc, #472]	; (800801c <HAL_RCC_OscConfig+0x67c>)
 8007e44:	681a      	ldr	r2, [r3, #0]
 8007e46:	2380      	movs	r3, #128	; 0x80
 8007e48:	005b      	lsls	r3, r3, #1
 8007e4a:	4013      	ands	r3, r2
 8007e4c:	d0f0      	beq.n	8007e30 <HAL_RCC_OscConfig+0x490>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	689a      	ldr	r2, [r3, #8]
 8007e52:	2380      	movs	r3, #128	; 0x80
 8007e54:	005b      	lsls	r3, r3, #1
 8007e56:	429a      	cmp	r2, r3
 8007e58:	d107      	bne.n	8007e6a <HAL_RCC_OscConfig+0x4ca>
 8007e5a:	4b6d      	ldr	r3, [pc, #436]	; (8008010 <HAL_RCC_OscConfig+0x670>)
 8007e5c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007e5e:	4b6c      	ldr	r3, [pc, #432]	; (8008010 <HAL_RCC_OscConfig+0x670>)
 8007e60:	2180      	movs	r1, #128	; 0x80
 8007e62:	0049      	lsls	r1, r1, #1
 8007e64:	430a      	orrs	r2, r1
 8007e66:	651a      	str	r2, [r3, #80]	; 0x50
 8007e68:	e031      	b.n	8007ece <HAL_RCC_OscConfig+0x52e>
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	689b      	ldr	r3, [r3, #8]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d10c      	bne.n	8007e8c <HAL_RCC_OscConfig+0x4ec>
 8007e72:	4b67      	ldr	r3, [pc, #412]	; (8008010 <HAL_RCC_OscConfig+0x670>)
 8007e74:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007e76:	4b66      	ldr	r3, [pc, #408]	; (8008010 <HAL_RCC_OscConfig+0x670>)
 8007e78:	4967      	ldr	r1, [pc, #412]	; (8008018 <HAL_RCC_OscConfig+0x678>)
 8007e7a:	400a      	ands	r2, r1
 8007e7c:	651a      	str	r2, [r3, #80]	; 0x50
 8007e7e:	4b64      	ldr	r3, [pc, #400]	; (8008010 <HAL_RCC_OscConfig+0x670>)
 8007e80:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007e82:	4b63      	ldr	r3, [pc, #396]	; (8008010 <HAL_RCC_OscConfig+0x670>)
 8007e84:	4966      	ldr	r1, [pc, #408]	; (8008020 <HAL_RCC_OscConfig+0x680>)
 8007e86:	400a      	ands	r2, r1
 8007e88:	651a      	str	r2, [r3, #80]	; 0x50
 8007e8a:	e020      	b.n	8007ece <HAL_RCC_OscConfig+0x52e>
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	689a      	ldr	r2, [r3, #8]
 8007e90:	23a0      	movs	r3, #160	; 0xa0
 8007e92:	00db      	lsls	r3, r3, #3
 8007e94:	429a      	cmp	r2, r3
 8007e96:	d10e      	bne.n	8007eb6 <HAL_RCC_OscConfig+0x516>
 8007e98:	4b5d      	ldr	r3, [pc, #372]	; (8008010 <HAL_RCC_OscConfig+0x670>)
 8007e9a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007e9c:	4b5c      	ldr	r3, [pc, #368]	; (8008010 <HAL_RCC_OscConfig+0x670>)
 8007e9e:	2180      	movs	r1, #128	; 0x80
 8007ea0:	00c9      	lsls	r1, r1, #3
 8007ea2:	430a      	orrs	r2, r1
 8007ea4:	651a      	str	r2, [r3, #80]	; 0x50
 8007ea6:	4b5a      	ldr	r3, [pc, #360]	; (8008010 <HAL_RCC_OscConfig+0x670>)
 8007ea8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007eaa:	4b59      	ldr	r3, [pc, #356]	; (8008010 <HAL_RCC_OscConfig+0x670>)
 8007eac:	2180      	movs	r1, #128	; 0x80
 8007eae:	0049      	lsls	r1, r1, #1
 8007eb0:	430a      	orrs	r2, r1
 8007eb2:	651a      	str	r2, [r3, #80]	; 0x50
 8007eb4:	e00b      	b.n	8007ece <HAL_RCC_OscConfig+0x52e>
 8007eb6:	4b56      	ldr	r3, [pc, #344]	; (8008010 <HAL_RCC_OscConfig+0x670>)
 8007eb8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007eba:	4b55      	ldr	r3, [pc, #340]	; (8008010 <HAL_RCC_OscConfig+0x670>)
 8007ebc:	4956      	ldr	r1, [pc, #344]	; (8008018 <HAL_RCC_OscConfig+0x678>)
 8007ebe:	400a      	ands	r2, r1
 8007ec0:	651a      	str	r2, [r3, #80]	; 0x50
 8007ec2:	4b53      	ldr	r3, [pc, #332]	; (8008010 <HAL_RCC_OscConfig+0x670>)
 8007ec4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007ec6:	4b52      	ldr	r3, [pc, #328]	; (8008010 <HAL_RCC_OscConfig+0x670>)
 8007ec8:	4955      	ldr	r1, [pc, #340]	; (8008020 <HAL_RCC_OscConfig+0x680>)
 8007eca:	400a      	ands	r2, r1
 8007ecc:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	689b      	ldr	r3, [r3, #8]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d015      	beq.n	8007f02 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007ed6:	f7fe fac9 	bl	800646c <HAL_GetTick>
 8007eda:	0003      	movs	r3, r0
 8007edc:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007ede:	e009      	b.n	8007ef4 <HAL_RCC_OscConfig+0x554>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007ee0:	f7fe fac4 	bl	800646c <HAL_GetTick>
 8007ee4:	0002      	movs	r2, r0
 8007ee6:	697b      	ldr	r3, [r7, #20]
 8007ee8:	1ad3      	subs	r3, r2, r3
 8007eea:	4a4e      	ldr	r2, [pc, #312]	; (8008024 <HAL_RCC_OscConfig+0x684>)
 8007eec:	4293      	cmp	r3, r2
 8007eee:	d901      	bls.n	8007ef4 <HAL_RCC_OscConfig+0x554>
        {
          return HAL_TIMEOUT;
 8007ef0:	2303      	movs	r3, #3
 8007ef2:	e11b      	b.n	800812c <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007ef4:	4b46      	ldr	r3, [pc, #280]	; (8008010 <HAL_RCC_OscConfig+0x670>)
 8007ef6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007ef8:	2380      	movs	r3, #128	; 0x80
 8007efa:	009b      	lsls	r3, r3, #2
 8007efc:	4013      	ands	r3, r2
 8007efe:	d0ef      	beq.n	8007ee0 <HAL_RCC_OscConfig+0x540>
 8007f00:	e014      	b.n	8007f2c <HAL_RCC_OscConfig+0x58c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007f02:	f7fe fab3 	bl	800646c <HAL_GetTick>
 8007f06:	0003      	movs	r3, r0
 8007f08:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007f0a:	e009      	b.n	8007f20 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007f0c:	f7fe faae 	bl	800646c <HAL_GetTick>
 8007f10:	0002      	movs	r2, r0
 8007f12:	697b      	ldr	r3, [r7, #20]
 8007f14:	1ad3      	subs	r3, r2, r3
 8007f16:	4a43      	ldr	r2, [pc, #268]	; (8008024 <HAL_RCC_OscConfig+0x684>)
 8007f18:	4293      	cmp	r3, r2
 8007f1a:	d901      	bls.n	8007f20 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8007f1c:	2303      	movs	r3, #3
 8007f1e:	e105      	b.n	800812c <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007f20:	4b3b      	ldr	r3, [pc, #236]	; (8008010 <HAL_RCC_OscConfig+0x670>)
 8007f22:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007f24:	2380      	movs	r3, #128	; 0x80
 8007f26:	009b      	lsls	r3, r3, #2
 8007f28:	4013      	ands	r3, r2
 8007f2a:	d1ef      	bne.n	8007f0c <HAL_RCC_OscConfig+0x56c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8007f2c:	2323      	movs	r3, #35	; 0x23
 8007f2e:	18fb      	adds	r3, r7, r3
 8007f30:	781b      	ldrb	r3, [r3, #0]
 8007f32:	2b01      	cmp	r3, #1
 8007f34:	d105      	bne.n	8007f42 <HAL_RCC_OscConfig+0x5a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007f36:	4b36      	ldr	r3, [pc, #216]	; (8008010 <HAL_RCC_OscConfig+0x670>)
 8007f38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f3a:	4b35      	ldr	r3, [pc, #212]	; (8008010 <HAL_RCC_OscConfig+0x670>)
 8007f3c:	493a      	ldr	r1, [pc, #232]	; (8008028 <HAL_RCC_OscConfig+0x688>)
 8007f3e:	400a      	ands	r2, r1
 8007f40:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	2220      	movs	r2, #32
 8007f48:	4013      	ands	r3, r2
 8007f4a:	d049      	beq.n	8007fe0 <HAL_RCC_OscConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	699b      	ldr	r3, [r3, #24]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d026      	beq.n	8007fa2 <HAL_RCC_OscConfig+0x602>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8007f54:	4b2e      	ldr	r3, [pc, #184]	; (8008010 <HAL_RCC_OscConfig+0x670>)
 8007f56:	689a      	ldr	r2, [r3, #8]
 8007f58:	4b2d      	ldr	r3, [pc, #180]	; (8008010 <HAL_RCC_OscConfig+0x670>)
 8007f5a:	2101      	movs	r1, #1
 8007f5c:	430a      	orrs	r2, r1
 8007f5e:	609a      	str	r2, [r3, #8]
 8007f60:	4b2b      	ldr	r3, [pc, #172]	; (8008010 <HAL_RCC_OscConfig+0x670>)
 8007f62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007f64:	4b2a      	ldr	r3, [pc, #168]	; (8008010 <HAL_RCC_OscConfig+0x670>)
 8007f66:	2101      	movs	r1, #1
 8007f68:	430a      	orrs	r2, r1
 8007f6a:	635a      	str	r2, [r3, #52]	; 0x34
 8007f6c:	4b2f      	ldr	r3, [pc, #188]	; (800802c <HAL_RCC_OscConfig+0x68c>)
 8007f6e:	6a1a      	ldr	r2, [r3, #32]
 8007f70:	4b2e      	ldr	r3, [pc, #184]	; (800802c <HAL_RCC_OscConfig+0x68c>)
 8007f72:	2180      	movs	r1, #128	; 0x80
 8007f74:	0189      	lsls	r1, r1, #6
 8007f76:	430a      	orrs	r2, r1
 8007f78:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007f7a:	f7fe fa77 	bl	800646c <HAL_GetTick>
 8007f7e:	0003      	movs	r3, r0
 8007f80:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007f82:	e008      	b.n	8007f96 <HAL_RCC_OscConfig+0x5f6>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007f84:	f7fe fa72 	bl	800646c <HAL_GetTick>
 8007f88:	0002      	movs	r2, r0
 8007f8a:	697b      	ldr	r3, [r7, #20]
 8007f8c:	1ad3      	subs	r3, r2, r3
 8007f8e:	2b02      	cmp	r3, #2
 8007f90:	d901      	bls.n	8007f96 <HAL_RCC_OscConfig+0x5f6>
          {
            return HAL_TIMEOUT;
 8007f92:	2303      	movs	r3, #3
 8007f94:	e0ca      	b.n	800812c <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007f96:	4b1e      	ldr	r3, [pc, #120]	; (8008010 <HAL_RCC_OscConfig+0x670>)
 8007f98:	689b      	ldr	r3, [r3, #8]
 8007f9a:	2202      	movs	r2, #2
 8007f9c:	4013      	ands	r3, r2
 8007f9e:	d0f1      	beq.n	8007f84 <HAL_RCC_OscConfig+0x5e4>
 8007fa0:	e01e      	b.n	8007fe0 <HAL_RCC_OscConfig+0x640>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8007fa2:	4b1b      	ldr	r3, [pc, #108]	; (8008010 <HAL_RCC_OscConfig+0x670>)
 8007fa4:	689a      	ldr	r2, [r3, #8]
 8007fa6:	4b1a      	ldr	r3, [pc, #104]	; (8008010 <HAL_RCC_OscConfig+0x670>)
 8007fa8:	2101      	movs	r1, #1
 8007faa:	438a      	bics	r2, r1
 8007fac:	609a      	str	r2, [r3, #8]
 8007fae:	4b1f      	ldr	r3, [pc, #124]	; (800802c <HAL_RCC_OscConfig+0x68c>)
 8007fb0:	6a1a      	ldr	r2, [r3, #32]
 8007fb2:	4b1e      	ldr	r3, [pc, #120]	; (800802c <HAL_RCC_OscConfig+0x68c>)
 8007fb4:	491e      	ldr	r1, [pc, #120]	; (8008030 <HAL_RCC_OscConfig+0x690>)
 8007fb6:	400a      	ands	r2, r1
 8007fb8:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007fba:	f7fe fa57 	bl	800646c <HAL_GetTick>
 8007fbe:	0003      	movs	r3, r0
 8007fc0:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007fc2:	e008      	b.n	8007fd6 <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007fc4:	f7fe fa52 	bl	800646c <HAL_GetTick>
 8007fc8:	0002      	movs	r2, r0
 8007fca:	697b      	ldr	r3, [r7, #20]
 8007fcc:	1ad3      	subs	r3, r2, r3
 8007fce:	2b02      	cmp	r3, #2
 8007fd0:	d901      	bls.n	8007fd6 <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 8007fd2:	2303      	movs	r3, #3
 8007fd4:	e0aa      	b.n	800812c <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007fd6:	4b0e      	ldr	r3, [pc, #56]	; (8008010 <HAL_RCC_OscConfig+0x670>)
 8007fd8:	689b      	ldr	r3, [r3, #8]
 8007fda:	2202      	movs	r2, #2
 8007fdc:	4013      	ands	r3, r2
 8007fde:	d1f1      	bne.n	8007fc4 <HAL_RCC_OscConfig+0x624>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d100      	bne.n	8007fea <HAL_RCC_OscConfig+0x64a>
 8007fe8:	e09f      	b.n	800812a <HAL_RCC_OscConfig+0x78a>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007fea:	69fb      	ldr	r3, [r7, #28]
 8007fec:	2b0c      	cmp	r3, #12
 8007fee:	d100      	bne.n	8007ff2 <HAL_RCC_OscConfig+0x652>
 8007ff0:	e078      	b.n	80080e4 <HAL_RCC_OscConfig+0x744>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ff6:	2b02      	cmp	r3, #2
 8007ff8:	d159      	bne.n	80080ae <HAL_RCC_OscConfig+0x70e>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007ffa:	4b05      	ldr	r3, [pc, #20]	; (8008010 <HAL_RCC_OscConfig+0x670>)
 8007ffc:	681a      	ldr	r2, [r3, #0]
 8007ffe:	4b04      	ldr	r3, [pc, #16]	; (8008010 <HAL_RCC_OscConfig+0x670>)
 8008000:	490c      	ldr	r1, [pc, #48]	; (8008034 <HAL_RCC_OscConfig+0x694>)
 8008002:	400a      	ands	r2, r1
 8008004:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008006:	f7fe fa31 	bl	800646c <HAL_GetTick>
 800800a:	0003      	movs	r3, r0
 800800c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800800e:	e01c      	b.n	800804a <HAL_RCC_OscConfig+0x6aa>
 8008010:	40021000 	.word	0x40021000
 8008014:	ffff1fff 	.word	0xffff1fff
 8008018:	fffffeff 	.word	0xfffffeff
 800801c:	40007000 	.word	0x40007000
 8008020:	fffffbff 	.word	0xfffffbff
 8008024:	00001388 	.word	0x00001388
 8008028:	efffffff 	.word	0xefffffff
 800802c:	40010000 	.word	0x40010000
 8008030:	ffffdfff 	.word	0xffffdfff
 8008034:	feffffff 	.word	0xfeffffff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008038:	f7fe fa18 	bl	800646c <HAL_GetTick>
 800803c:	0002      	movs	r2, r0
 800803e:	697b      	ldr	r3, [r7, #20]
 8008040:	1ad3      	subs	r3, r2, r3
 8008042:	2b02      	cmp	r3, #2
 8008044:	d901      	bls.n	800804a <HAL_RCC_OscConfig+0x6aa>
          {
            return HAL_TIMEOUT;
 8008046:	2303      	movs	r3, #3
 8008048:	e070      	b.n	800812c <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800804a:	4b3a      	ldr	r3, [pc, #232]	; (8008134 <HAL_RCC_OscConfig+0x794>)
 800804c:	681a      	ldr	r2, [r3, #0]
 800804e:	2380      	movs	r3, #128	; 0x80
 8008050:	049b      	lsls	r3, r3, #18
 8008052:	4013      	ands	r3, r2
 8008054:	d1f0      	bne.n	8008038 <HAL_RCC_OscConfig+0x698>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008056:	4b37      	ldr	r3, [pc, #220]	; (8008134 <HAL_RCC_OscConfig+0x794>)
 8008058:	68db      	ldr	r3, [r3, #12]
 800805a:	4a37      	ldr	r2, [pc, #220]	; (8008138 <HAL_RCC_OscConfig+0x798>)
 800805c:	4013      	ands	r3, r2
 800805e:	0019      	movs	r1, r3
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008068:	431a      	orrs	r2, r3
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800806e:	431a      	orrs	r2, r3
 8008070:	4b30      	ldr	r3, [pc, #192]	; (8008134 <HAL_RCC_OscConfig+0x794>)
 8008072:	430a      	orrs	r2, r1
 8008074:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008076:	4b2f      	ldr	r3, [pc, #188]	; (8008134 <HAL_RCC_OscConfig+0x794>)
 8008078:	681a      	ldr	r2, [r3, #0]
 800807a:	4b2e      	ldr	r3, [pc, #184]	; (8008134 <HAL_RCC_OscConfig+0x794>)
 800807c:	2180      	movs	r1, #128	; 0x80
 800807e:	0449      	lsls	r1, r1, #17
 8008080:	430a      	orrs	r2, r1
 8008082:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008084:	f7fe f9f2 	bl	800646c <HAL_GetTick>
 8008088:	0003      	movs	r3, r0
 800808a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800808c:	e008      	b.n	80080a0 <HAL_RCC_OscConfig+0x700>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800808e:	f7fe f9ed 	bl	800646c <HAL_GetTick>
 8008092:	0002      	movs	r2, r0
 8008094:	697b      	ldr	r3, [r7, #20]
 8008096:	1ad3      	subs	r3, r2, r3
 8008098:	2b02      	cmp	r3, #2
 800809a:	d901      	bls.n	80080a0 <HAL_RCC_OscConfig+0x700>
          {
            return HAL_TIMEOUT;
 800809c:	2303      	movs	r3, #3
 800809e:	e045      	b.n	800812c <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80080a0:	4b24      	ldr	r3, [pc, #144]	; (8008134 <HAL_RCC_OscConfig+0x794>)
 80080a2:	681a      	ldr	r2, [r3, #0]
 80080a4:	2380      	movs	r3, #128	; 0x80
 80080a6:	049b      	lsls	r3, r3, #18
 80080a8:	4013      	ands	r3, r2
 80080aa:	d0f0      	beq.n	800808e <HAL_RCC_OscConfig+0x6ee>
 80080ac:	e03d      	b.n	800812a <HAL_RCC_OscConfig+0x78a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80080ae:	4b21      	ldr	r3, [pc, #132]	; (8008134 <HAL_RCC_OscConfig+0x794>)
 80080b0:	681a      	ldr	r2, [r3, #0]
 80080b2:	4b20      	ldr	r3, [pc, #128]	; (8008134 <HAL_RCC_OscConfig+0x794>)
 80080b4:	4921      	ldr	r1, [pc, #132]	; (800813c <HAL_RCC_OscConfig+0x79c>)
 80080b6:	400a      	ands	r2, r1
 80080b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80080ba:	f7fe f9d7 	bl	800646c <HAL_GetTick>
 80080be:	0003      	movs	r3, r0
 80080c0:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80080c2:	e008      	b.n	80080d6 <HAL_RCC_OscConfig+0x736>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80080c4:	f7fe f9d2 	bl	800646c <HAL_GetTick>
 80080c8:	0002      	movs	r2, r0
 80080ca:	697b      	ldr	r3, [r7, #20]
 80080cc:	1ad3      	subs	r3, r2, r3
 80080ce:	2b02      	cmp	r3, #2
 80080d0:	d901      	bls.n	80080d6 <HAL_RCC_OscConfig+0x736>
          {
            return HAL_TIMEOUT;
 80080d2:	2303      	movs	r3, #3
 80080d4:	e02a      	b.n	800812c <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80080d6:	4b17      	ldr	r3, [pc, #92]	; (8008134 <HAL_RCC_OscConfig+0x794>)
 80080d8:	681a      	ldr	r2, [r3, #0]
 80080da:	2380      	movs	r3, #128	; 0x80
 80080dc:	049b      	lsls	r3, r3, #18
 80080de:	4013      	ands	r3, r2
 80080e0:	d1f0      	bne.n	80080c4 <HAL_RCC_OscConfig+0x724>
 80080e2:	e022      	b.n	800812a <HAL_RCC_OscConfig+0x78a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080e8:	2b01      	cmp	r3, #1
 80080ea:	d101      	bne.n	80080f0 <HAL_RCC_OscConfig+0x750>
      {
        return HAL_ERROR;
 80080ec:	2301      	movs	r3, #1
 80080ee:	e01d      	b.n	800812c <HAL_RCC_OscConfig+0x78c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80080f0:	4b10      	ldr	r3, [pc, #64]	; (8008134 <HAL_RCC_OscConfig+0x794>)
 80080f2:	68db      	ldr	r3, [r3, #12]
 80080f4:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80080f6:	69ba      	ldr	r2, [r7, #24]
 80080f8:	2380      	movs	r3, #128	; 0x80
 80080fa:	025b      	lsls	r3, r3, #9
 80080fc:	401a      	ands	r2, r3
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008102:	429a      	cmp	r2, r3
 8008104:	d10f      	bne.n	8008126 <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8008106:	69ba      	ldr	r2, [r7, #24]
 8008108:	23f0      	movs	r3, #240	; 0xf0
 800810a:	039b      	lsls	r3, r3, #14
 800810c:	401a      	ands	r2, r3
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008112:	429a      	cmp	r2, r3
 8008114:	d107      	bne.n	8008126 <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8008116:	69ba      	ldr	r2, [r7, #24]
 8008118:	23c0      	movs	r3, #192	; 0xc0
 800811a:	041b      	lsls	r3, r3, #16
 800811c:	401a      	ands	r2, r3
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8008122:	429a      	cmp	r2, r3
 8008124:	d001      	beq.n	800812a <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_ERROR;
 8008126:	2301      	movs	r3, #1
 8008128:	e000      	b.n	800812c <HAL_RCC_OscConfig+0x78c>
        }
      }
    }
  }

  return HAL_OK;
 800812a:	2300      	movs	r3, #0
}
 800812c:	0018      	movs	r0, r3
 800812e:	46bd      	mov	sp, r7
 8008130:	b00a      	add	sp, #40	; 0x28
 8008132:	bdb0      	pop	{r4, r5, r7, pc}
 8008134:	40021000 	.word	0x40021000
 8008138:	ff02ffff 	.word	0xff02ffff
 800813c:	feffffff 	.word	0xfeffffff

08008140 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008140:	b5b0      	push	{r4, r5, r7, lr}
 8008142:	b084      	sub	sp, #16
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
 8008148:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d101      	bne.n	8008154 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008150:	2301      	movs	r3, #1
 8008152:	e10d      	b.n	8008370 <HAL_RCC_ClockConfig+0x230>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008154:	4b88      	ldr	r3, [pc, #544]	; (8008378 <HAL_RCC_ClockConfig+0x238>)
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	2201      	movs	r2, #1
 800815a:	4013      	ands	r3, r2
 800815c:	683a      	ldr	r2, [r7, #0]
 800815e:	429a      	cmp	r2, r3
 8008160:	d911      	bls.n	8008186 <HAL_RCC_ClockConfig+0x46>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008162:	4b85      	ldr	r3, [pc, #532]	; (8008378 <HAL_RCC_ClockConfig+0x238>)
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	2201      	movs	r2, #1
 8008168:	4393      	bics	r3, r2
 800816a:	0019      	movs	r1, r3
 800816c:	4b82      	ldr	r3, [pc, #520]	; (8008378 <HAL_RCC_ClockConfig+0x238>)
 800816e:	683a      	ldr	r2, [r7, #0]
 8008170:	430a      	orrs	r2, r1
 8008172:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008174:	4b80      	ldr	r3, [pc, #512]	; (8008378 <HAL_RCC_ClockConfig+0x238>)
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	2201      	movs	r2, #1
 800817a:	4013      	ands	r3, r2
 800817c:	683a      	ldr	r2, [r7, #0]
 800817e:	429a      	cmp	r2, r3
 8008180:	d001      	beq.n	8008186 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8008182:	2301      	movs	r3, #1
 8008184:	e0f4      	b.n	8008370 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	2202      	movs	r2, #2
 800818c:	4013      	ands	r3, r2
 800818e:	d009      	beq.n	80081a4 <HAL_RCC_ClockConfig+0x64>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008190:	4b7a      	ldr	r3, [pc, #488]	; (800837c <HAL_RCC_ClockConfig+0x23c>)
 8008192:	68db      	ldr	r3, [r3, #12]
 8008194:	22f0      	movs	r2, #240	; 0xf0
 8008196:	4393      	bics	r3, r2
 8008198:	0019      	movs	r1, r3
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	689a      	ldr	r2, [r3, #8]
 800819e:	4b77      	ldr	r3, [pc, #476]	; (800837c <HAL_RCC_ClockConfig+0x23c>)
 80081a0:	430a      	orrs	r2, r1
 80081a2:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	2201      	movs	r2, #1
 80081aa:	4013      	ands	r3, r2
 80081ac:	d100      	bne.n	80081b0 <HAL_RCC_ClockConfig+0x70>
 80081ae:	e089      	b.n	80082c4 <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	685b      	ldr	r3, [r3, #4]
 80081b4:	2b02      	cmp	r3, #2
 80081b6:	d107      	bne.n	80081c8 <HAL_RCC_ClockConfig+0x88>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80081b8:	4b70      	ldr	r3, [pc, #448]	; (800837c <HAL_RCC_ClockConfig+0x23c>)
 80081ba:	681a      	ldr	r2, [r3, #0]
 80081bc:	2380      	movs	r3, #128	; 0x80
 80081be:	029b      	lsls	r3, r3, #10
 80081c0:	4013      	ands	r3, r2
 80081c2:	d120      	bne.n	8008206 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80081c4:	2301      	movs	r3, #1
 80081c6:	e0d3      	b.n	8008370 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	685b      	ldr	r3, [r3, #4]
 80081cc:	2b03      	cmp	r3, #3
 80081ce:	d107      	bne.n	80081e0 <HAL_RCC_ClockConfig+0xa0>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80081d0:	4b6a      	ldr	r3, [pc, #424]	; (800837c <HAL_RCC_ClockConfig+0x23c>)
 80081d2:	681a      	ldr	r2, [r3, #0]
 80081d4:	2380      	movs	r3, #128	; 0x80
 80081d6:	049b      	lsls	r3, r3, #18
 80081d8:	4013      	ands	r3, r2
 80081da:	d114      	bne.n	8008206 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80081dc:	2301      	movs	r3, #1
 80081de:	e0c7      	b.n	8008370 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	685b      	ldr	r3, [r3, #4]
 80081e4:	2b01      	cmp	r3, #1
 80081e6:	d106      	bne.n	80081f6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80081e8:	4b64      	ldr	r3, [pc, #400]	; (800837c <HAL_RCC_ClockConfig+0x23c>)
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	2204      	movs	r2, #4
 80081ee:	4013      	ands	r3, r2
 80081f0:	d109      	bne.n	8008206 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80081f2:	2301      	movs	r3, #1
 80081f4:	e0bc      	b.n	8008370 <HAL_RCC_ClockConfig+0x230>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80081f6:	4b61      	ldr	r3, [pc, #388]	; (800837c <HAL_RCC_ClockConfig+0x23c>)
 80081f8:	681a      	ldr	r2, [r3, #0]
 80081fa:	2380      	movs	r3, #128	; 0x80
 80081fc:	009b      	lsls	r3, r3, #2
 80081fe:	4013      	ands	r3, r2
 8008200:	d101      	bne.n	8008206 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8008202:	2301      	movs	r3, #1
 8008204:	e0b4      	b.n	8008370 <HAL_RCC_ClockConfig+0x230>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008206:	4b5d      	ldr	r3, [pc, #372]	; (800837c <HAL_RCC_ClockConfig+0x23c>)
 8008208:	68db      	ldr	r3, [r3, #12]
 800820a:	2203      	movs	r2, #3
 800820c:	4393      	bics	r3, r2
 800820e:	0019      	movs	r1, r3
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	685a      	ldr	r2, [r3, #4]
 8008214:	4b59      	ldr	r3, [pc, #356]	; (800837c <HAL_RCC_ClockConfig+0x23c>)
 8008216:	430a      	orrs	r2, r1
 8008218:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800821a:	f7fe f927 	bl	800646c <HAL_GetTick>
 800821e:	0003      	movs	r3, r0
 8008220:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	685b      	ldr	r3, [r3, #4]
 8008226:	2b02      	cmp	r3, #2
 8008228:	d111      	bne.n	800824e <HAL_RCC_ClockConfig+0x10e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800822a:	e009      	b.n	8008240 <HAL_RCC_ClockConfig+0x100>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800822c:	f7fe f91e 	bl	800646c <HAL_GetTick>
 8008230:	0002      	movs	r2, r0
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	1ad3      	subs	r3, r2, r3
 8008236:	4a52      	ldr	r2, [pc, #328]	; (8008380 <HAL_RCC_ClockConfig+0x240>)
 8008238:	4293      	cmp	r3, r2
 800823a:	d901      	bls.n	8008240 <HAL_RCC_ClockConfig+0x100>
        {
          return HAL_TIMEOUT;
 800823c:	2303      	movs	r3, #3
 800823e:	e097      	b.n	8008370 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8008240:	4b4e      	ldr	r3, [pc, #312]	; (800837c <HAL_RCC_ClockConfig+0x23c>)
 8008242:	68db      	ldr	r3, [r3, #12]
 8008244:	220c      	movs	r2, #12
 8008246:	4013      	ands	r3, r2
 8008248:	2b08      	cmp	r3, #8
 800824a:	d1ef      	bne.n	800822c <HAL_RCC_ClockConfig+0xec>
 800824c:	e03a      	b.n	80082c4 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	685b      	ldr	r3, [r3, #4]
 8008252:	2b03      	cmp	r3, #3
 8008254:	d111      	bne.n	800827a <HAL_RCC_ClockConfig+0x13a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008256:	e009      	b.n	800826c <HAL_RCC_ClockConfig+0x12c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008258:	f7fe f908 	bl	800646c <HAL_GetTick>
 800825c:	0002      	movs	r2, r0
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	1ad3      	subs	r3, r2, r3
 8008262:	4a47      	ldr	r2, [pc, #284]	; (8008380 <HAL_RCC_ClockConfig+0x240>)
 8008264:	4293      	cmp	r3, r2
 8008266:	d901      	bls.n	800826c <HAL_RCC_ClockConfig+0x12c>
        {
          return HAL_TIMEOUT;
 8008268:	2303      	movs	r3, #3
 800826a:	e081      	b.n	8008370 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800826c:	4b43      	ldr	r3, [pc, #268]	; (800837c <HAL_RCC_ClockConfig+0x23c>)
 800826e:	68db      	ldr	r3, [r3, #12]
 8008270:	220c      	movs	r2, #12
 8008272:	4013      	ands	r3, r2
 8008274:	2b0c      	cmp	r3, #12
 8008276:	d1ef      	bne.n	8008258 <HAL_RCC_ClockConfig+0x118>
 8008278:	e024      	b.n	80082c4 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	685b      	ldr	r3, [r3, #4]
 800827e:	2b01      	cmp	r3, #1
 8008280:	d11b      	bne.n	80082ba <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8008282:	e009      	b.n	8008298 <HAL_RCC_ClockConfig+0x158>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008284:	f7fe f8f2 	bl	800646c <HAL_GetTick>
 8008288:	0002      	movs	r2, r0
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	1ad3      	subs	r3, r2, r3
 800828e:	4a3c      	ldr	r2, [pc, #240]	; (8008380 <HAL_RCC_ClockConfig+0x240>)
 8008290:	4293      	cmp	r3, r2
 8008292:	d901      	bls.n	8008298 <HAL_RCC_ClockConfig+0x158>
        {
          return HAL_TIMEOUT;
 8008294:	2303      	movs	r3, #3
 8008296:	e06b      	b.n	8008370 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8008298:	4b38      	ldr	r3, [pc, #224]	; (800837c <HAL_RCC_ClockConfig+0x23c>)
 800829a:	68db      	ldr	r3, [r3, #12]
 800829c:	220c      	movs	r2, #12
 800829e:	4013      	ands	r3, r2
 80082a0:	2b04      	cmp	r3, #4
 80082a2:	d1ef      	bne.n	8008284 <HAL_RCC_ClockConfig+0x144>
 80082a4:	e00e      	b.n	80082c4 <HAL_RCC_ClockConfig+0x184>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80082a6:	f7fe f8e1 	bl	800646c <HAL_GetTick>
 80082aa:	0002      	movs	r2, r0
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	1ad3      	subs	r3, r2, r3
 80082b0:	4a33      	ldr	r2, [pc, #204]	; (8008380 <HAL_RCC_ClockConfig+0x240>)
 80082b2:	4293      	cmp	r3, r2
 80082b4:	d901      	bls.n	80082ba <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 80082b6:	2303      	movs	r3, #3
 80082b8:	e05a      	b.n	8008370 <HAL_RCC_ClockConfig+0x230>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80082ba:	4b30      	ldr	r3, [pc, #192]	; (800837c <HAL_RCC_ClockConfig+0x23c>)
 80082bc:	68db      	ldr	r3, [r3, #12]
 80082be:	220c      	movs	r2, #12
 80082c0:	4013      	ands	r3, r2
 80082c2:	d1f0      	bne.n	80082a6 <HAL_RCC_ClockConfig+0x166>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80082c4:	4b2c      	ldr	r3, [pc, #176]	; (8008378 <HAL_RCC_ClockConfig+0x238>)
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	2201      	movs	r2, #1
 80082ca:	4013      	ands	r3, r2
 80082cc:	683a      	ldr	r2, [r7, #0]
 80082ce:	429a      	cmp	r2, r3
 80082d0:	d211      	bcs.n	80082f6 <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80082d2:	4b29      	ldr	r3, [pc, #164]	; (8008378 <HAL_RCC_ClockConfig+0x238>)
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	2201      	movs	r2, #1
 80082d8:	4393      	bics	r3, r2
 80082da:	0019      	movs	r1, r3
 80082dc:	4b26      	ldr	r3, [pc, #152]	; (8008378 <HAL_RCC_ClockConfig+0x238>)
 80082de:	683a      	ldr	r2, [r7, #0]
 80082e0:	430a      	orrs	r2, r1
 80082e2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80082e4:	4b24      	ldr	r3, [pc, #144]	; (8008378 <HAL_RCC_ClockConfig+0x238>)
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	2201      	movs	r2, #1
 80082ea:	4013      	ands	r3, r2
 80082ec:	683a      	ldr	r2, [r7, #0]
 80082ee:	429a      	cmp	r2, r3
 80082f0:	d001      	beq.n	80082f6 <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 80082f2:	2301      	movs	r3, #1
 80082f4:	e03c      	b.n	8008370 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	2204      	movs	r2, #4
 80082fc:	4013      	ands	r3, r2
 80082fe:	d009      	beq.n	8008314 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008300:	4b1e      	ldr	r3, [pc, #120]	; (800837c <HAL_RCC_ClockConfig+0x23c>)
 8008302:	68db      	ldr	r3, [r3, #12]
 8008304:	4a1f      	ldr	r2, [pc, #124]	; (8008384 <HAL_RCC_ClockConfig+0x244>)
 8008306:	4013      	ands	r3, r2
 8008308:	0019      	movs	r1, r3
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	68da      	ldr	r2, [r3, #12]
 800830e:	4b1b      	ldr	r3, [pc, #108]	; (800837c <HAL_RCC_ClockConfig+0x23c>)
 8008310:	430a      	orrs	r2, r1
 8008312:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	2208      	movs	r2, #8
 800831a:	4013      	ands	r3, r2
 800831c:	d00a      	beq.n	8008334 <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800831e:	4b17      	ldr	r3, [pc, #92]	; (800837c <HAL_RCC_ClockConfig+0x23c>)
 8008320:	68db      	ldr	r3, [r3, #12]
 8008322:	4a19      	ldr	r2, [pc, #100]	; (8008388 <HAL_RCC_ClockConfig+0x248>)
 8008324:	4013      	ands	r3, r2
 8008326:	0019      	movs	r1, r3
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	691b      	ldr	r3, [r3, #16]
 800832c:	00da      	lsls	r2, r3, #3
 800832e:	4b13      	ldr	r3, [pc, #76]	; (800837c <HAL_RCC_ClockConfig+0x23c>)
 8008330:	430a      	orrs	r2, r1
 8008332:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008334:	f000 f82e 	bl	8008394 <HAL_RCC_GetSysClockFreq>
 8008338:	0001      	movs	r1, r0
 800833a:	4b10      	ldr	r3, [pc, #64]	; (800837c <HAL_RCC_ClockConfig+0x23c>)
 800833c:	68db      	ldr	r3, [r3, #12]
 800833e:	091b      	lsrs	r3, r3, #4
 8008340:	220f      	movs	r2, #15
 8008342:	4013      	ands	r3, r2
 8008344:	4a11      	ldr	r2, [pc, #68]	; (800838c <HAL_RCC_ClockConfig+0x24c>)
 8008346:	5cd3      	ldrb	r3, [r2, r3]
 8008348:	000a      	movs	r2, r1
 800834a:	40da      	lsrs	r2, r3
 800834c:	4b10      	ldr	r3, [pc, #64]	; (8008390 <HAL_RCC_ClockConfig+0x250>)
 800834e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 8008350:	250b      	movs	r5, #11
 8008352:	197c      	adds	r4, r7, r5
 8008354:	2000      	movs	r0, #0
 8008356:	f7fe f853 	bl	8006400 <HAL_InitTick>
 800835a:	0003      	movs	r3, r0
 800835c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800835e:	197b      	adds	r3, r7, r5
 8008360:	781b      	ldrb	r3, [r3, #0]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d003      	beq.n	800836e <HAL_RCC_ClockConfig+0x22e>
  {
    return status;
 8008366:	230b      	movs	r3, #11
 8008368:	18fb      	adds	r3, r7, r3
 800836a:	781b      	ldrb	r3, [r3, #0]
 800836c:	e000      	b.n	8008370 <HAL_RCC_ClockConfig+0x230>
  }

  return HAL_OK;
 800836e:	2300      	movs	r3, #0
}
 8008370:	0018      	movs	r0, r3
 8008372:	46bd      	mov	sp, r7
 8008374:	b004      	add	sp, #16
 8008376:	bdb0      	pop	{r4, r5, r7, pc}
 8008378:	40022000 	.word	0x40022000
 800837c:	40021000 	.word	0x40021000
 8008380:	00001388 	.word	0x00001388
 8008384:	fffff8ff 	.word	0xfffff8ff
 8008388:	ffffc7ff 	.word	0xffffc7ff
 800838c:	0800bec0 	.word	0x0800bec0
 8008390:	20000010 	.word	0x20000010

08008394 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008394:	b580      	push	{r7, lr}
 8008396:	b086      	sub	sp, #24
 8008398:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800839a:	4b3b      	ldr	r3, [pc, #236]	; (8008488 <HAL_RCC_GetSysClockFreq+0xf4>)
 800839c:	68db      	ldr	r3, [r3, #12]
 800839e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	220c      	movs	r2, #12
 80083a4:	4013      	ands	r3, r2
 80083a6:	2b08      	cmp	r3, #8
 80083a8:	d00e      	beq.n	80083c8 <HAL_RCC_GetSysClockFreq+0x34>
 80083aa:	2b0c      	cmp	r3, #12
 80083ac:	d00f      	beq.n	80083ce <HAL_RCC_GetSysClockFreq+0x3a>
 80083ae:	2b04      	cmp	r3, #4
 80083b0:	d157      	bne.n	8008462 <HAL_RCC_GetSysClockFreq+0xce>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80083b2:	4b35      	ldr	r3, [pc, #212]	; (8008488 <HAL_RCC_GetSysClockFreq+0xf4>)
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	2210      	movs	r2, #16
 80083b8:	4013      	ands	r3, r2
 80083ba:	d002      	beq.n	80083c2 <HAL_RCC_GetSysClockFreq+0x2e>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80083bc:	4b33      	ldr	r3, [pc, #204]	; (800848c <HAL_RCC_GetSysClockFreq+0xf8>)
 80083be:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80083c0:	e05d      	b.n	800847e <HAL_RCC_GetSysClockFreq+0xea>
        sysclockfreq =  HSI_VALUE;
 80083c2:	4b33      	ldr	r3, [pc, #204]	; (8008490 <HAL_RCC_GetSysClockFreq+0xfc>)
 80083c4:	613b      	str	r3, [r7, #16]
      break;
 80083c6:	e05a      	b.n	800847e <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80083c8:	4b32      	ldr	r3, [pc, #200]	; (8008494 <HAL_RCC_GetSysClockFreq+0x100>)
 80083ca:	613b      	str	r3, [r7, #16]
      break;
 80083cc:	e057      	b.n	800847e <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	0c9b      	lsrs	r3, r3, #18
 80083d2:	220f      	movs	r2, #15
 80083d4:	4013      	ands	r3, r2
 80083d6:	4a30      	ldr	r2, [pc, #192]	; (8008498 <HAL_RCC_GetSysClockFreq+0x104>)
 80083d8:	5cd3      	ldrb	r3, [r2, r3]
 80083da:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	0d9b      	lsrs	r3, r3, #22
 80083e0:	2203      	movs	r2, #3
 80083e2:	4013      	ands	r3, r2
 80083e4:	3301      	adds	r3, #1
 80083e6:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80083e8:	4b27      	ldr	r3, [pc, #156]	; (8008488 <HAL_RCC_GetSysClockFreq+0xf4>)
 80083ea:	68da      	ldr	r2, [r3, #12]
 80083ec:	2380      	movs	r3, #128	; 0x80
 80083ee:	025b      	lsls	r3, r3, #9
 80083f0:	4013      	ands	r3, r2
 80083f2:	d00f      	beq.n	8008414 <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 80083f4:	68b9      	ldr	r1, [r7, #8]
 80083f6:	000a      	movs	r2, r1
 80083f8:	0152      	lsls	r2, r2, #5
 80083fa:	1a52      	subs	r2, r2, r1
 80083fc:	0193      	lsls	r3, r2, #6
 80083fe:	1a9b      	subs	r3, r3, r2
 8008400:	00db      	lsls	r3, r3, #3
 8008402:	185b      	adds	r3, r3, r1
 8008404:	025b      	lsls	r3, r3, #9
 8008406:	6879      	ldr	r1, [r7, #4]
 8008408:	0018      	movs	r0, r3
 800840a:	f7f7 fe85 	bl	8000118 <__udivsi3>
 800840e:	0003      	movs	r3, r0
 8008410:	617b      	str	r3, [r7, #20]
 8008412:	e023      	b.n	800845c <HAL_RCC_GetSysClockFreq+0xc8>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8008414:	4b1c      	ldr	r3, [pc, #112]	; (8008488 <HAL_RCC_GetSysClockFreq+0xf4>)
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	2210      	movs	r2, #16
 800841a:	4013      	ands	r3, r2
 800841c:	d00f      	beq.n	800843e <HAL_RCC_GetSysClockFreq+0xaa>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 800841e:	68b9      	ldr	r1, [r7, #8]
 8008420:	000a      	movs	r2, r1
 8008422:	0152      	lsls	r2, r2, #5
 8008424:	1a52      	subs	r2, r2, r1
 8008426:	0193      	lsls	r3, r2, #6
 8008428:	1a9b      	subs	r3, r3, r2
 800842a:	00db      	lsls	r3, r3, #3
 800842c:	185b      	adds	r3, r3, r1
 800842e:	021b      	lsls	r3, r3, #8
 8008430:	6879      	ldr	r1, [r7, #4]
 8008432:	0018      	movs	r0, r3
 8008434:	f7f7 fe70 	bl	8000118 <__udivsi3>
 8008438:	0003      	movs	r3, r0
 800843a:	617b      	str	r3, [r7, #20]
 800843c:	e00e      	b.n	800845c <HAL_RCC_GetSysClockFreq+0xc8>
        }
        else
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 800843e:	68b9      	ldr	r1, [r7, #8]
 8008440:	000a      	movs	r2, r1
 8008442:	0152      	lsls	r2, r2, #5
 8008444:	1a52      	subs	r2, r2, r1
 8008446:	0193      	lsls	r3, r2, #6
 8008448:	1a9b      	subs	r3, r3, r2
 800844a:	00db      	lsls	r3, r3, #3
 800844c:	185b      	adds	r3, r3, r1
 800844e:	029b      	lsls	r3, r3, #10
 8008450:	6879      	ldr	r1, [r7, #4]
 8008452:	0018      	movs	r0, r3
 8008454:	f7f7 fe60 	bl	8000118 <__udivsi3>
 8008458:	0003      	movs	r3, r0
 800845a:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 800845c:	697b      	ldr	r3, [r7, #20]
 800845e:	613b      	str	r3, [r7, #16]
      break;
 8008460:	e00d      	b.n	800847e <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8008462:	4b09      	ldr	r3, [pc, #36]	; (8008488 <HAL_RCC_GetSysClockFreq+0xf4>)
 8008464:	685b      	ldr	r3, [r3, #4]
 8008466:	0b5b      	lsrs	r3, r3, #13
 8008468:	2207      	movs	r2, #7
 800846a:	4013      	ands	r3, r2
 800846c:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800846e:	683b      	ldr	r3, [r7, #0]
 8008470:	3301      	adds	r3, #1
 8008472:	2280      	movs	r2, #128	; 0x80
 8008474:	0212      	lsls	r2, r2, #8
 8008476:	409a      	lsls	r2, r3
 8008478:	0013      	movs	r3, r2
 800847a:	613b      	str	r3, [r7, #16]
      break;
 800847c:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800847e:	693b      	ldr	r3, [r7, #16]
}
 8008480:	0018      	movs	r0, r3
 8008482:	46bd      	mov	sp, r7
 8008484:	b006      	add	sp, #24
 8008486:	bd80      	pop	{r7, pc}
 8008488:	40021000 	.word	0x40021000
 800848c:	003d0900 	.word	0x003d0900
 8008490:	00f42400 	.word	0x00f42400
 8008494:	007a1200 	.word	0x007a1200
 8008498:	0800bed0 	.word	0x0800bed0

0800849c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800849c:	b580      	push	{r7, lr}
 800849e:	b086      	sub	sp, #24
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	2220      	movs	r2, #32
 80084aa:	4013      	ands	r3, r2
 80084ac:	d106      	bne.n	80084bc <HAL_RCCEx_PeriphCLKConfig+0x20>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681a      	ldr	r2, [r3, #0]
 80084b2:	2380      	movs	r3, #128	; 0x80
 80084b4:	011b      	lsls	r3, r3, #4
 80084b6:	4013      	ands	r3, r2
 80084b8:	d100      	bne.n	80084bc <HAL_RCCEx_PeriphCLKConfig+0x20>
 80084ba:	e0dd      	b.n	8008678 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 80084bc:	2317      	movs	r3, #23
 80084be:	18fb      	adds	r3, r7, r3
 80084c0:	2200      	movs	r2, #0
 80084c2:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80084c4:	4ba4      	ldr	r3, [pc, #656]	; (8008758 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80084c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80084c8:	2380      	movs	r3, #128	; 0x80
 80084ca:	055b      	lsls	r3, r3, #21
 80084cc:	4013      	ands	r3, r2
 80084ce:	d10a      	bne.n	80084e6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80084d0:	4ba1      	ldr	r3, [pc, #644]	; (8008758 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80084d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80084d4:	4ba0      	ldr	r3, [pc, #640]	; (8008758 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80084d6:	2180      	movs	r1, #128	; 0x80
 80084d8:	0549      	lsls	r1, r1, #21
 80084da:	430a      	orrs	r2, r1
 80084dc:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80084de:	2317      	movs	r3, #23
 80084e0:	18fb      	adds	r3, r7, r3
 80084e2:	2201      	movs	r2, #1
 80084e4:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80084e6:	4b9d      	ldr	r3, [pc, #628]	; (800875c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80084e8:	681a      	ldr	r2, [r3, #0]
 80084ea:	2380      	movs	r3, #128	; 0x80
 80084ec:	005b      	lsls	r3, r3, #1
 80084ee:	4013      	ands	r3, r2
 80084f0:	d11a      	bne.n	8008528 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80084f2:	4b9a      	ldr	r3, [pc, #616]	; (800875c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80084f4:	681a      	ldr	r2, [r3, #0]
 80084f6:	4b99      	ldr	r3, [pc, #612]	; (800875c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80084f8:	2180      	movs	r1, #128	; 0x80
 80084fa:	0049      	lsls	r1, r1, #1
 80084fc:	430a      	orrs	r2, r1
 80084fe:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008500:	f7fd ffb4 	bl	800646c <HAL_GetTick>
 8008504:	0003      	movs	r3, r0
 8008506:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008508:	e008      	b.n	800851c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800850a:	f7fd ffaf 	bl	800646c <HAL_GetTick>
 800850e:	0002      	movs	r2, r0
 8008510:	693b      	ldr	r3, [r7, #16]
 8008512:	1ad3      	subs	r3, r2, r3
 8008514:	2b64      	cmp	r3, #100	; 0x64
 8008516:	d901      	bls.n	800851c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8008518:	2303      	movs	r3, #3
 800851a:	e118      	b.n	800874e <HAL_RCCEx_PeriphCLKConfig+0x2b2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800851c:	4b8f      	ldr	r3, [pc, #572]	; (800875c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 800851e:	681a      	ldr	r2, [r3, #0]
 8008520:	2380      	movs	r3, #128	; 0x80
 8008522:	005b      	lsls	r3, r3, #1
 8008524:	4013      	ands	r3, r2
 8008526:	d0f0      	beq.n	800850a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8008528:	4b8b      	ldr	r3, [pc, #556]	; (8008758 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800852a:	681a      	ldr	r2, [r3, #0]
 800852c:	23c0      	movs	r3, #192	; 0xc0
 800852e:	039b      	lsls	r3, r3, #14
 8008530:	4013      	ands	r3, r2
 8008532:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	685a      	ldr	r2, [r3, #4]
 8008538:	23c0      	movs	r3, #192	; 0xc0
 800853a:	039b      	lsls	r3, r3, #14
 800853c:	4013      	ands	r3, r2
 800853e:	68fa      	ldr	r2, [r7, #12]
 8008540:	429a      	cmp	r2, r3
 8008542:	d107      	bne.n	8008554 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	689a      	ldr	r2, [r3, #8]
 8008548:	23c0      	movs	r3, #192	; 0xc0
 800854a:	039b      	lsls	r3, r3, #14
 800854c:	4013      	ands	r3, r2
 800854e:	68fa      	ldr	r2, [r7, #12]
 8008550:	429a      	cmp	r2, r3
 8008552:	d013      	beq.n	800857c <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	685a      	ldr	r2, [r3, #4]
 8008558:	23c0      	movs	r3, #192	; 0xc0
 800855a:	029b      	lsls	r3, r3, #10
 800855c:	401a      	ands	r2, r3
 800855e:	23c0      	movs	r3, #192	; 0xc0
 8008560:	029b      	lsls	r3, r3, #10
 8008562:	429a      	cmp	r2, r3
 8008564:	d10a      	bne.n	800857c <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008566:	4b7c      	ldr	r3, [pc, #496]	; (8008758 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8008568:	681a      	ldr	r2, [r3, #0]
 800856a:	2380      	movs	r3, #128	; 0x80
 800856c:	029b      	lsls	r3, r3, #10
 800856e:	401a      	ands	r2, r3
 8008570:	2380      	movs	r3, #128	; 0x80
 8008572:	029b      	lsls	r3, r3, #10
 8008574:	429a      	cmp	r2, r3
 8008576:	d101      	bne.n	800857c <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8008578:	2301      	movs	r3, #1
 800857a:	e0e8      	b.n	800874e <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800857c:	4b76      	ldr	r3, [pc, #472]	; (8008758 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800857e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008580:	23c0      	movs	r3, #192	; 0xc0
 8008582:	029b      	lsls	r3, r3, #10
 8008584:	4013      	ands	r3, r2
 8008586:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d049      	beq.n	8008622 <HAL_RCCEx_PeriphCLKConfig+0x186>
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	685a      	ldr	r2, [r3, #4]
 8008592:	23c0      	movs	r3, #192	; 0xc0
 8008594:	029b      	lsls	r3, r3, #10
 8008596:	4013      	ands	r3, r2
 8008598:	68fa      	ldr	r2, [r7, #12]
 800859a:	429a      	cmp	r2, r3
 800859c:	d004      	beq.n	80085a8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	2220      	movs	r2, #32
 80085a4:	4013      	ands	r3, r2
 80085a6:	d10d      	bne.n	80085c4 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	689a      	ldr	r2, [r3, #8]
 80085ac:	23c0      	movs	r3, #192	; 0xc0
 80085ae:	029b      	lsls	r3, r3, #10
 80085b0:	4013      	ands	r3, r2
 80085b2:	68fa      	ldr	r2, [r7, #12]
 80085b4:	429a      	cmp	r2, r3
 80085b6:	d034      	beq.n	8008622 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681a      	ldr	r2, [r3, #0]
 80085bc:	2380      	movs	r3, #128	; 0x80
 80085be:	011b      	lsls	r3, r3, #4
 80085c0:	4013      	ands	r3, r2
 80085c2:	d02e      	beq.n	8008622 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80085c4:	4b64      	ldr	r3, [pc, #400]	; (8008758 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80085c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085c8:	4a65      	ldr	r2, [pc, #404]	; (8008760 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80085ca:	4013      	ands	r3, r2
 80085cc:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80085ce:	4b62      	ldr	r3, [pc, #392]	; (8008758 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80085d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80085d2:	4b61      	ldr	r3, [pc, #388]	; (8008758 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80085d4:	2180      	movs	r1, #128	; 0x80
 80085d6:	0309      	lsls	r1, r1, #12
 80085d8:	430a      	orrs	r2, r1
 80085da:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80085dc:	4b5e      	ldr	r3, [pc, #376]	; (8008758 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80085de:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80085e0:	4b5d      	ldr	r3, [pc, #372]	; (8008758 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80085e2:	4960      	ldr	r1, [pc, #384]	; (8008764 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80085e4:	400a      	ands	r2, r1
 80085e6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80085e8:	4b5b      	ldr	r3, [pc, #364]	; (8008758 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80085ea:	68fa      	ldr	r2, [r7, #12]
 80085ec:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80085ee:	68fa      	ldr	r2, [r7, #12]
 80085f0:	2380      	movs	r3, #128	; 0x80
 80085f2:	005b      	lsls	r3, r3, #1
 80085f4:	4013      	ands	r3, r2
 80085f6:	d014      	beq.n	8008622 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80085f8:	f7fd ff38 	bl	800646c <HAL_GetTick>
 80085fc:	0003      	movs	r3, r0
 80085fe:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008600:	e009      	b.n	8008616 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008602:	f7fd ff33 	bl	800646c <HAL_GetTick>
 8008606:	0002      	movs	r2, r0
 8008608:	693b      	ldr	r3, [r7, #16]
 800860a:	1ad3      	subs	r3, r2, r3
 800860c:	4a56      	ldr	r2, [pc, #344]	; (8008768 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800860e:	4293      	cmp	r3, r2
 8008610:	d901      	bls.n	8008616 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8008612:	2303      	movs	r3, #3
 8008614:	e09b      	b.n	800874e <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008616:	4b50      	ldr	r3, [pc, #320]	; (8008758 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8008618:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800861a:	2380      	movs	r3, #128	; 0x80
 800861c:	009b      	lsls	r3, r3, #2
 800861e:	4013      	ands	r3, r2
 8008620:	d0ef      	beq.n	8008602 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	685a      	ldr	r2, [r3, #4]
 8008626:	23c0      	movs	r3, #192	; 0xc0
 8008628:	029b      	lsls	r3, r3, #10
 800862a:	401a      	ands	r2, r3
 800862c:	23c0      	movs	r3, #192	; 0xc0
 800862e:	029b      	lsls	r3, r3, #10
 8008630:	429a      	cmp	r2, r3
 8008632:	d10c      	bne.n	800864e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8008634:	4b48      	ldr	r3, [pc, #288]	; (8008758 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	4a4c      	ldr	r2, [pc, #304]	; (800876c <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800863a:	4013      	ands	r3, r2
 800863c:	0019      	movs	r1, r3
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	685a      	ldr	r2, [r3, #4]
 8008642:	23c0      	movs	r3, #192	; 0xc0
 8008644:	039b      	lsls	r3, r3, #14
 8008646:	401a      	ands	r2, r3
 8008648:	4b43      	ldr	r3, [pc, #268]	; (8008758 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800864a:	430a      	orrs	r2, r1
 800864c:	601a      	str	r2, [r3, #0]
 800864e:	4b42      	ldr	r3, [pc, #264]	; (8008758 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8008650:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	685a      	ldr	r2, [r3, #4]
 8008656:	23c0      	movs	r3, #192	; 0xc0
 8008658:	029b      	lsls	r3, r3, #10
 800865a:	401a      	ands	r2, r3
 800865c:	4b3e      	ldr	r3, [pc, #248]	; (8008758 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800865e:	430a      	orrs	r2, r1
 8008660:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8008662:	2317      	movs	r3, #23
 8008664:	18fb      	adds	r3, r7, r3
 8008666:	781b      	ldrb	r3, [r3, #0]
 8008668:	2b01      	cmp	r3, #1
 800866a:	d105      	bne.n	8008678 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800866c:	4b3a      	ldr	r3, [pc, #232]	; (8008758 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800866e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008670:	4b39      	ldr	r3, [pc, #228]	; (8008758 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8008672:	493f      	ldr	r1, [pc, #252]	; (8008770 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008674:	400a      	ands	r2, r1
 8008676:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	2201      	movs	r2, #1
 800867e:	4013      	ands	r3, r2
 8008680:	d009      	beq.n	8008696 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008682:	4b35      	ldr	r3, [pc, #212]	; (8008758 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8008684:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008686:	2203      	movs	r2, #3
 8008688:	4393      	bics	r3, r2
 800868a:	0019      	movs	r1, r3
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	68da      	ldr	r2, [r3, #12]
 8008690:	4b31      	ldr	r3, [pc, #196]	; (8008758 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8008692:	430a      	orrs	r2, r1
 8008694:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	2202      	movs	r2, #2
 800869c:	4013      	ands	r3, r2
 800869e:	d009      	beq.n	80086b4 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80086a0:	4b2d      	ldr	r3, [pc, #180]	; (8008758 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80086a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086a4:	220c      	movs	r2, #12
 80086a6:	4393      	bics	r3, r2
 80086a8:	0019      	movs	r1, r3
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	691a      	ldr	r2, [r3, #16]
 80086ae:	4b2a      	ldr	r3, [pc, #168]	; (8008758 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80086b0:	430a      	orrs	r2, r1
 80086b2:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	2204      	movs	r2, #4
 80086ba:	4013      	ands	r3, r2
 80086bc:	d009      	beq.n	80086d2 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80086be:	4b26      	ldr	r3, [pc, #152]	; (8008758 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80086c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086c2:	4a2c      	ldr	r2, [pc, #176]	; (8008774 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80086c4:	4013      	ands	r3, r2
 80086c6:	0019      	movs	r1, r3
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	695a      	ldr	r2, [r3, #20]
 80086cc:	4b22      	ldr	r3, [pc, #136]	; (8008758 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80086ce:	430a      	orrs	r2, r1
 80086d0:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	2208      	movs	r2, #8
 80086d8:	4013      	ands	r3, r2
 80086da:	d009      	beq.n	80086f0 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80086dc:	4b1e      	ldr	r3, [pc, #120]	; (8008758 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80086de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086e0:	4a25      	ldr	r2, [pc, #148]	; (8008778 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80086e2:	4013      	ands	r3, r2
 80086e4:	0019      	movs	r1, r3
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	699a      	ldr	r2, [r3, #24]
 80086ea:	4b1b      	ldr	r3, [pc, #108]	; (8008758 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80086ec:	430a      	orrs	r2, r1
 80086ee:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681a      	ldr	r2, [r3, #0]
 80086f4:	2380      	movs	r3, #128	; 0x80
 80086f6:	005b      	lsls	r3, r3, #1
 80086f8:	4013      	ands	r3, r2
 80086fa:	d009      	beq.n	8008710 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80086fc:	4b16      	ldr	r3, [pc, #88]	; (8008758 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80086fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008700:	4a17      	ldr	r2, [pc, #92]	; (8008760 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008702:	4013      	ands	r3, r2
 8008704:	0019      	movs	r1, r3
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	69da      	ldr	r2, [r3, #28]
 800870a:	4b13      	ldr	r3, [pc, #76]	; (8008758 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800870c:	430a      	orrs	r2, r1
 800870e:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	2240      	movs	r2, #64	; 0x40
 8008716:	4013      	ands	r3, r2
 8008718:	d009      	beq.n	800872e <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800871a:	4b0f      	ldr	r3, [pc, #60]	; (8008758 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800871c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800871e:	4a17      	ldr	r2, [pc, #92]	; (800877c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8008720:	4013      	ands	r3, r2
 8008722:	0019      	movs	r1, r3
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008728:	4b0b      	ldr	r3, [pc, #44]	; (8008758 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800872a:	430a      	orrs	r2, r1
 800872c:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	2280      	movs	r2, #128	; 0x80
 8008734:	4013      	ands	r3, r2
 8008736:	d009      	beq.n	800874c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8008738:	4b07      	ldr	r3, [pc, #28]	; (8008758 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800873a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800873c:	4a10      	ldr	r2, [pc, #64]	; (8008780 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800873e:	4013      	ands	r3, r2
 8008740:	0019      	movs	r1, r3
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	6a1a      	ldr	r2, [r3, #32]
 8008746:	4b04      	ldr	r3, [pc, #16]	; (8008758 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8008748:	430a      	orrs	r2, r1
 800874a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800874c:	2300      	movs	r3, #0
}
 800874e:	0018      	movs	r0, r3
 8008750:	46bd      	mov	sp, r7
 8008752:	b006      	add	sp, #24
 8008754:	bd80      	pop	{r7, pc}
 8008756:	46c0      	nop			; (mov r8, r8)
 8008758:	40021000 	.word	0x40021000
 800875c:	40007000 	.word	0x40007000
 8008760:	fffcffff 	.word	0xfffcffff
 8008764:	fff7ffff 	.word	0xfff7ffff
 8008768:	00001388 	.word	0x00001388
 800876c:	ffcfffff 	.word	0xffcfffff
 8008770:	efffffff 	.word	0xefffffff
 8008774:	fffff3ff 	.word	0xfffff3ff
 8008778:	ffffcfff 	.word	0xffffcfff
 800877c:	fbffffff 	.word	0xfbffffff
 8008780:	fff3ffff 	.word	0xfff3ffff

08008784 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008784:	b580      	push	{r7, lr}
 8008786:	b082      	sub	sp, #8
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d101      	bne.n	8008796 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8008792:	2301      	movs	r3, #1
 8008794:	e08e      	b.n	80088b4 <HAL_RTC_Init+0x130>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	2221      	movs	r2, #33	; 0x21
 800879a:	5c9b      	ldrb	r3, [r3, r2]
 800879c:	b2db      	uxtb	r3, r3
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d107      	bne.n	80087b2 <HAL_RTC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	2220      	movs	r2, #32
 80087a6:	2100      	movs	r1, #0
 80087a8:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	0018      	movs	r0, r3
 80087ae:	f7fb fc35 	bl	800401c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	2221      	movs	r2, #33	; 0x21
 80087b6:	2102      	movs	r1, #2
 80087b8:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	22ca      	movs	r2, #202	; 0xca
 80087c0:	625a      	str	r2, [r3, #36]	; 0x24
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	2253      	movs	r2, #83	; 0x53
 80087c8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	0018      	movs	r0, r3
 80087ce:	f000 fcf4 	bl	80091ba <RTC_EnterInitMode>
 80087d2:	1e03      	subs	r3, r0, #0
 80087d4:	d009      	beq.n	80087ea <HAL_RTC_Init+0x66>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	22ff      	movs	r2, #255	; 0xff
 80087dc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	2221      	movs	r2, #33	; 0x21
 80087e2:	2104      	movs	r1, #4
 80087e4:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80087e6:	2301      	movs	r3, #1
 80087e8:	e064      	b.n	80088b4 <HAL_RTC_Init+0x130>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	689a      	ldr	r2, [r3, #8]
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	4931      	ldr	r1, [pc, #196]	; (80088bc <HAL_RTC_Init+0x138>)
 80087f6:	400a      	ands	r2, r1
 80087f8:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	6899      	ldr	r1, [r3, #8]
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	685a      	ldr	r2, [r3, #4]
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	691b      	ldr	r3, [r3, #16]
 8008808:	431a      	orrs	r2, r3
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	699b      	ldr	r3, [r3, #24]
 800880e:	431a      	orrs	r2, r3
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	430a      	orrs	r2, r1
 8008816:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	687a      	ldr	r2, [r7, #4]
 800881e:	68d2      	ldr	r2, [r2, #12]
 8008820:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	6919      	ldr	r1, [r3, #16]
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	689b      	ldr	r3, [r3, #8]
 800882c:	041a      	lsls	r2, r3, #16
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	430a      	orrs	r2, r1
 8008834:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	68da      	ldr	r2, [r3, #12]
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	2180      	movs	r1, #128	; 0x80
 8008842:	438a      	bics	r2, r1
 8008844:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	2103      	movs	r1, #3
 8008852:	438a      	bics	r2, r1
 8008854:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	69da      	ldr	r2, [r3, #28]
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	695b      	ldr	r3, [r3, #20]
 8008864:	431a      	orrs	r2, r3
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	430a      	orrs	r2, r1
 800886c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	689b      	ldr	r3, [r3, #8]
 8008874:	2220      	movs	r2, #32
 8008876:	4013      	ands	r3, r2
 8008878:	d113      	bne.n	80088a2 <HAL_RTC_Init+0x11e>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	0018      	movs	r0, r3
 800887e:	f000 fc75 	bl	800916c <HAL_RTC_WaitForSynchro>
 8008882:	1e03      	subs	r3, r0, #0
 8008884:	d00d      	beq.n	80088a2 <HAL_RTC_Init+0x11e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	22ff      	movs	r2, #255	; 0xff
 800888c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	2221      	movs	r2, #33	; 0x21
 8008892:	2104      	movs	r1, #4
 8008894:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	2220      	movs	r2, #32
 800889a:	2100      	movs	r1, #0
 800889c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800889e:	2301      	movs	r3, #1
 80088a0:	e008      	b.n	80088b4 <HAL_RTC_Init+0x130>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	22ff      	movs	r2, #255	; 0xff
 80088a8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	2221      	movs	r2, #33	; 0x21
 80088ae:	2101      	movs	r1, #1
 80088b0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80088b2:	2300      	movs	r3, #0
  }
}
 80088b4:	0018      	movs	r0, r3
 80088b6:	46bd      	mov	sp, r7
 80088b8:	b002      	add	sp, #8
 80088ba:	bd80      	pop	{r7, pc}
 80088bc:	ff8fffbf 	.word	0xff8fffbf

080088c0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80088c0:	b590      	push	{r4, r7, lr}
 80088c2:	b087      	sub	sp, #28
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	60f8      	str	r0, [r7, #12]
 80088c8:	60b9      	str	r1, [r7, #8]
 80088ca:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	2220      	movs	r2, #32
 80088d0:	5c9b      	ldrb	r3, [r3, r2]
 80088d2:	2b01      	cmp	r3, #1
 80088d4:	d101      	bne.n	80088da <HAL_RTC_SetTime+0x1a>
 80088d6:	2302      	movs	r3, #2
 80088d8:	e0ad      	b.n	8008a36 <HAL_RTC_SetTime+0x176>
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	2220      	movs	r2, #32
 80088de:	2101      	movs	r1, #1
 80088e0:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	2221      	movs	r2, #33	; 0x21
 80088e6:	2102      	movs	r1, #2
 80088e8:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d125      	bne.n	800893c <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	689b      	ldr	r3, [r3, #8]
 80088f6:	2240      	movs	r2, #64	; 0x40
 80088f8:	4013      	ands	r3, r2
 80088fa:	d102      	bne.n	8008902 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80088fc:	68bb      	ldr	r3, [r7, #8]
 80088fe:	2200      	movs	r2, #0
 8008900:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8008902:	68bb      	ldr	r3, [r7, #8]
 8008904:	781b      	ldrb	r3, [r3, #0]
 8008906:	0018      	movs	r0, r3
 8008908:	f000 fc81 	bl	800920e <RTC_ByteToBcd2>
 800890c:	0003      	movs	r3, r0
 800890e:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8008910:	68bb      	ldr	r3, [r7, #8]
 8008912:	785b      	ldrb	r3, [r3, #1]
 8008914:	0018      	movs	r0, r3
 8008916:	f000 fc7a 	bl	800920e <RTC_ByteToBcd2>
 800891a:	0003      	movs	r3, r0
 800891c:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800891e:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8008920:	68bb      	ldr	r3, [r7, #8]
 8008922:	789b      	ldrb	r3, [r3, #2]
 8008924:	0018      	movs	r0, r3
 8008926:	f000 fc72 	bl	800920e <RTC_ByteToBcd2>
 800892a:	0003      	movs	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800892c:	0022      	movs	r2, r4
 800892e:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8008930:	68bb      	ldr	r3, [r7, #8]
 8008932:	78db      	ldrb	r3, [r3, #3]
 8008934:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8008936:	4313      	orrs	r3, r2
 8008938:	617b      	str	r3, [r7, #20]
 800893a:	e017      	b.n	800896c <HAL_RTC_SetTime+0xac>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	689b      	ldr	r3, [r3, #8]
 8008942:	2240      	movs	r2, #64	; 0x40
 8008944:	4013      	ands	r3, r2
 8008946:	d102      	bne.n	800894e <HAL_RTC_SetTime+0x8e>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8008948:	68bb      	ldr	r3, [r7, #8]
 800894a:	2200      	movs	r2, #0
 800894c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800894e:	68bb      	ldr	r3, [r7, #8]
 8008950:	781b      	ldrb	r3, [r3, #0]
 8008952:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8008954:	68bb      	ldr	r3, [r7, #8]
 8008956:	785b      	ldrb	r3, [r3, #1]
 8008958:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800895a:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800895c:	68ba      	ldr	r2, [r7, #8]
 800895e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8008960:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8008962:	68bb      	ldr	r3, [r7, #8]
 8008964:	78db      	ldrb	r3, [r3, #3]
 8008966:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8008968:	4313      	orrs	r3, r2
 800896a:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	22ca      	movs	r2, #202	; 0xca
 8008972:	625a      	str	r2, [r3, #36]	; 0x24
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	2253      	movs	r2, #83	; 0x53
 800897a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	0018      	movs	r0, r3
 8008980:	f000 fc1b 	bl	80091ba <RTC_EnterInitMode>
 8008984:	1e03      	subs	r3, r0, #0
 8008986:	d00d      	beq.n	80089a4 <HAL_RTC_SetTime+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	22ff      	movs	r2, #255	; 0xff
 800898e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	2221      	movs	r2, #33	; 0x21
 8008994:	2104      	movs	r1, #4
 8008996:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	2220      	movs	r2, #32
 800899c:	2100      	movs	r1, #0
 800899e:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80089a0:	2301      	movs	r3, #1
 80089a2:	e048      	b.n	8008a36 <HAL_RTC_SetTime+0x176>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	697a      	ldr	r2, [r7, #20]
 80089aa:	4925      	ldr	r1, [pc, #148]	; (8008a40 <HAL_RTC_SetTime+0x180>)
 80089ac:	400a      	ands	r2, r1
 80089ae:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	689a      	ldr	r2, [r3, #8]
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	4922      	ldr	r1, [pc, #136]	; (8008a44 <HAL_RTC_SetTime+0x184>)
 80089bc:	400a      	ands	r2, r1
 80089be:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	6899      	ldr	r1, [r3, #8]
 80089c6:	68bb      	ldr	r3, [r7, #8]
 80089c8:	68da      	ldr	r2, [r3, #12]
 80089ca:	68bb      	ldr	r3, [r7, #8]
 80089cc:	691b      	ldr	r3, [r3, #16]
 80089ce:	431a      	orrs	r2, r3
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	430a      	orrs	r2, r1
 80089d6:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	68da      	ldr	r2, [r3, #12]
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	2180      	movs	r1, #128	; 0x80
 80089e4:	438a      	bics	r2, r1
 80089e6:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	689b      	ldr	r3, [r3, #8]
 80089ee:	2220      	movs	r2, #32
 80089f0:	4013      	ands	r3, r2
 80089f2:	d113      	bne.n	8008a1c <HAL_RTC_SetTime+0x15c>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	0018      	movs	r0, r3
 80089f8:	f000 fbb8 	bl	800916c <HAL_RTC_WaitForSynchro>
 80089fc:	1e03      	subs	r3, r0, #0
 80089fe:	d00d      	beq.n	8008a1c <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	22ff      	movs	r2, #255	; 0xff
 8008a06:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	2221      	movs	r2, #33	; 0x21
 8008a0c:	2104      	movs	r1, #4
 8008a0e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	2220      	movs	r2, #32
 8008a14:	2100      	movs	r1, #0
 8008a16:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8008a18:	2301      	movs	r3, #1
 8008a1a:	e00c      	b.n	8008a36 <HAL_RTC_SetTime+0x176>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	22ff      	movs	r2, #255	; 0xff
 8008a22:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	2221      	movs	r2, #33	; 0x21
 8008a28:	2101      	movs	r1, #1
 8008a2a:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hrtc);
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	2220      	movs	r2, #32
 8008a30:	2100      	movs	r1, #0
 8008a32:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8008a34:	2300      	movs	r3, #0
  }
}
 8008a36:	0018      	movs	r0, r3
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	b007      	add	sp, #28
 8008a3c:	bd90      	pop	{r4, r7, pc}
 8008a3e:	46c0      	nop			; (mov r8, r8)
 8008a40:	007f7f7f 	.word	0x007f7f7f
 8008a44:	fffbffff 	.word	0xfffbffff

08008a48 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b086      	sub	sp, #24
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	60f8      	str	r0, [r7, #12]
 8008a50:	60b9      	str	r1, [r7, #8]
 8008a52:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008a5a:	68bb      	ldr	r3, [r7, #8]
 8008a5c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	691b      	ldr	r3, [r3, #16]
 8008a64:	045b      	lsls	r3, r3, #17
 8008a66:	0c5a      	lsrs	r2, r3, #17
 8008a68:	68bb      	ldr	r3, [r7, #8]
 8008a6a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	4a22      	ldr	r2, [pc, #136]	; (8008afc <HAL_RTC_GetTime+0xb4>)
 8008a74:	4013      	ands	r3, r2
 8008a76:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8008a78:	697b      	ldr	r3, [r7, #20]
 8008a7a:	0c1b      	lsrs	r3, r3, #16
 8008a7c:	b2db      	uxtb	r3, r3
 8008a7e:	223f      	movs	r2, #63	; 0x3f
 8008a80:	4013      	ands	r3, r2
 8008a82:	b2da      	uxtb	r2, r3
 8008a84:	68bb      	ldr	r3, [r7, #8]
 8008a86:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8008a88:	697b      	ldr	r3, [r7, #20]
 8008a8a:	0a1b      	lsrs	r3, r3, #8
 8008a8c:	b2db      	uxtb	r3, r3
 8008a8e:	227f      	movs	r2, #127	; 0x7f
 8008a90:	4013      	ands	r3, r2
 8008a92:	b2da      	uxtb	r2, r3
 8008a94:	68bb      	ldr	r3, [r7, #8]
 8008a96:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8008a98:	697b      	ldr	r3, [r7, #20]
 8008a9a:	b2db      	uxtb	r3, r3
 8008a9c:	227f      	movs	r2, #127	; 0x7f
 8008a9e:	4013      	ands	r3, r2
 8008aa0:	b2da      	uxtb	r2, r3
 8008aa2:	68bb      	ldr	r3, [r7, #8]
 8008aa4:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8008aa6:	697b      	ldr	r3, [r7, #20]
 8008aa8:	0c1b      	lsrs	r3, r3, #16
 8008aaa:	b2db      	uxtb	r3, r3
 8008aac:	2240      	movs	r2, #64	; 0x40
 8008aae:	4013      	ands	r3, r2
 8008ab0:	b2da      	uxtb	r2, r3
 8008ab2:	68bb      	ldr	r3, [r7, #8]
 8008ab4:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d11a      	bne.n	8008af2 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8008abc:	68bb      	ldr	r3, [r7, #8]
 8008abe:	781b      	ldrb	r3, [r3, #0]
 8008ac0:	0018      	movs	r0, r3
 8008ac2:	f000 fbcd 	bl	8009260 <RTC_Bcd2ToByte>
 8008ac6:	0003      	movs	r3, r0
 8008ac8:	001a      	movs	r2, r3
 8008aca:	68bb      	ldr	r3, [r7, #8]
 8008acc:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8008ace:	68bb      	ldr	r3, [r7, #8]
 8008ad0:	785b      	ldrb	r3, [r3, #1]
 8008ad2:	0018      	movs	r0, r3
 8008ad4:	f000 fbc4 	bl	8009260 <RTC_Bcd2ToByte>
 8008ad8:	0003      	movs	r3, r0
 8008ada:	001a      	movs	r2, r3
 8008adc:	68bb      	ldr	r3, [r7, #8]
 8008ade:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8008ae0:	68bb      	ldr	r3, [r7, #8]
 8008ae2:	789b      	ldrb	r3, [r3, #2]
 8008ae4:	0018      	movs	r0, r3
 8008ae6:	f000 fbbb 	bl	8009260 <RTC_Bcd2ToByte>
 8008aea:	0003      	movs	r3, r0
 8008aec:	001a      	movs	r2, r3
 8008aee:	68bb      	ldr	r3, [r7, #8]
 8008af0:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8008af2:	2300      	movs	r3, #0
}
 8008af4:	0018      	movs	r0, r3
 8008af6:	46bd      	mov	sp, r7
 8008af8:	b006      	add	sp, #24
 8008afa:	bd80      	pop	{r7, pc}
 8008afc:	007f7f7f 	.word	0x007f7f7f

08008b00 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008b00:	b590      	push	{r4, r7, lr}
 8008b02:	b087      	sub	sp, #28
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	60f8      	str	r0, [r7, #12]
 8008b08:	60b9      	str	r1, [r7, #8]
 8008b0a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	2220      	movs	r2, #32
 8008b10:	5c9b      	ldrb	r3, [r3, r2]
 8008b12:	2b01      	cmp	r3, #1
 8008b14:	d101      	bne.n	8008b1a <HAL_RTC_SetDate+0x1a>
 8008b16:	2302      	movs	r3, #2
 8008b18:	e099      	b.n	8008c4e <HAL_RTC_SetDate+0x14e>
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	2220      	movs	r2, #32
 8008b1e:	2101      	movs	r1, #1
 8008b20:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	2221      	movs	r2, #33	; 0x21
 8008b26:	2102      	movs	r1, #2
 8008b28:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d10e      	bne.n	8008b4e <HAL_RTC_SetDate+0x4e>
 8008b30:	68bb      	ldr	r3, [r7, #8]
 8008b32:	785b      	ldrb	r3, [r3, #1]
 8008b34:	001a      	movs	r2, r3
 8008b36:	2310      	movs	r3, #16
 8008b38:	4013      	ands	r3, r2
 8008b3a:	d008      	beq.n	8008b4e <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8008b3c:	68bb      	ldr	r3, [r7, #8]
 8008b3e:	785b      	ldrb	r3, [r3, #1]
 8008b40:	2210      	movs	r2, #16
 8008b42:	4393      	bics	r3, r2
 8008b44:	b2db      	uxtb	r3, r3
 8008b46:	330a      	adds	r3, #10
 8008b48:	b2da      	uxtb	r2, r3
 8008b4a:	68bb      	ldr	r3, [r7, #8]
 8008b4c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d11c      	bne.n	8008b8e <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8008b54:	68bb      	ldr	r3, [r7, #8]
 8008b56:	78db      	ldrb	r3, [r3, #3]
 8008b58:	0018      	movs	r0, r3
 8008b5a:	f000 fb58 	bl	800920e <RTC_ByteToBcd2>
 8008b5e:	0003      	movs	r3, r0
 8008b60:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8008b62:	68bb      	ldr	r3, [r7, #8]
 8008b64:	785b      	ldrb	r3, [r3, #1]
 8008b66:	0018      	movs	r0, r3
 8008b68:	f000 fb51 	bl	800920e <RTC_ByteToBcd2>
 8008b6c:	0003      	movs	r3, r0
 8008b6e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8008b70:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8008b72:	68bb      	ldr	r3, [r7, #8]
 8008b74:	789b      	ldrb	r3, [r3, #2]
 8008b76:	0018      	movs	r0, r3
 8008b78:	f000 fb49 	bl	800920e <RTC_ByteToBcd2>
 8008b7c:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8008b7e:	0022      	movs	r2, r4
 8008b80:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8008b82:	68bb      	ldr	r3, [r7, #8]
 8008b84:	781b      	ldrb	r3, [r3, #0]
 8008b86:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8008b88:	4313      	orrs	r3, r2
 8008b8a:	617b      	str	r3, [r7, #20]
 8008b8c:	e00e      	b.n	8008bac <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8008b8e:	68bb      	ldr	r3, [r7, #8]
 8008b90:	78db      	ldrb	r3, [r3, #3]
 8008b92:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8008b94:	68bb      	ldr	r3, [r7, #8]
 8008b96:	785b      	ldrb	r3, [r3, #1]
 8008b98:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8008b9a:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8008b9c:	68ba      	ldr	r2, [r7, #8]
 8008b9e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8008ba0:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8008ba2:	68bb      	ldr	r3, [r7, #8]
 8008ba4:	781b      	ldrb	r3, [r3, #0]
 8008ba6:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8008ba8:	4313      	orrs	r3, r2
 8008baa:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	22ca      	movs	r2, #202	; 0xca
 8008bb2:	625a      	str	r2, [r3, #36]	; 0x24
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	2253      	movs	r2, #83	; 0x53
 8008bba:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	0018      	movs	r0, r3
 8008bc0:	f000 fafb 	bl	80091ba <RTC_EnterInitMode>
 8008bc4:	1e03      	subs	r3, r0, #0
 8008bc6:	d00d      	beq.n	8008be4 <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	22ff      	movs	r2, #255	; 0xff
 8008bce:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	2221      	movs	r2, #33	; 0x21
 8008bd4:	2104      	movs	r1, #4
 8008bd6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	2220      	movs	r2, #32
 8008bdc:	2100      	movs	r1, #0
 8008bde:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8008be0:	2301      	movs	r3, #1
 8008be2:	e034      	b.n	8008c4e <HAL_RTC_SetDate+0x14e>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	697a      	ldr	r2, [r7, #20]
 8008bea:	491b      	ldr	r1, [pc, #108]	; (8008c58 <HAL_RTC_SetDate+0x158>)
 8008bec:	400a      	ands	r2, r1
 8008bee:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	68da      	ldr	r2, [r3, #12]
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	2180      	movs	r1, #128	; 0x80
 8008bfc:	438a      	bics	r2, r1
 8008bfe:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	689b      	ldr	r3, [r3, #8]
 8008c06:	2220      	movs	r2, #32
 8008c08:	4013      	ands	r3, r2
 8008c0a:	d113      	bne.n	8008c34 <HAL_RTC_SetDate+0x134>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	0018      	movs	r0, r3
 8008c10:	f000 faac 	bl	800916c <HAL_RTC_WaitForSynchro>
 8008c14:	1e03      	subs	r3, r0, #0
 8008c16:	d00d      	beq.n	8008c34 <HAL_RTC_SetDate+0x134>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	22ff      	movs	r2, #255	; 0xff
 8008c1e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	2221      	movs	r2, #33	; 0x21
 8008c24:	2104      	movs	r1, #4
 8008c26:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	2220      	movs	r2, #32
 8008c2c:	2100      	movs	r1, #0
 8008c2e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8008c30:	2301      	movs	r3, #1
 8008c32:	e00c      	b.n	8008c4e <HAL_RTC_SetDate+0x14e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	22ff      	movs	r2, #255	; 0xff
 8008c3a:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	2221      	movs	r2, #33	; 0x21
 8008c40:	2101      	movs	r1, #1
 8008c42:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	2220      	movs	r2, #32
 8008c48:	2100      	movs	r1, #0
 8008c4a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8008c4c:	2300      	movs	r3, #0
  }
}
 8008c4e:	0018      	movs	r0, r3
 8008c50:	46bd      	mov	sp, r7
 8008c52:	b007      	add	sp, #28
 8008c54:	bd90      	pop	{r4, r7, pc}
 8008c56:	46c0      	nop			; (mov r8, r8)
 8008c58:	00ffff3f 	.word	0x00ffff3f

08008c5c <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	b086      	sub	sp, #24
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	60f8      	str	r0, [r7, #12]
 8008c64:	60b9      	str	r1, [r7, #8]
 8008c66:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	685b      	ldr	r3, [r3, #4]
 8008c6e:	4a21      	ldr	r2, [pc, #132]	; (8008cf4 <HAL_RTC_GetDate+0x98>)
 8008c70:	4013      	ands	r3, r2
 8008c72:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8008c74:	697b      	ldr	r3, [r7, #20]
 8008c76:	0c1b      	lsrs	r3, r3, #16
 8008c78:	b2da      	uxtb	r2, r3
 8008c7a:	68bb      	ldr	r3, [r7, #8]
 8008c7c:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8008c7e:	697b      	ldr	r3, [r7, #20]
 8008c80:	0a1b      	lsrs	r3, r3, #8
 8008c82:	b2db      	uxtb	r3, r3
 8008c84:	221f      	movs	r2, #31
 8008c86:	4013      	ands	r3, r2
 8008c88:	b2da      	uxtb	r2, r3
 8008c8a:	68bb      	ldr	r3, [r7, #8]
 8008c8c:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8008c8e:	697b      	ldr	r3, [r7, #20]
 8008c90:	b2db      	uxtb	r3, r3
 8008c92:	223f      	movs	r2, #63	; 0x3f
 8008c94:	4013      	ands	r3, r2
 8008c96:	b2da      	uxtb	r2, r3
 8008c98:	68bb      	ldr	r3, [r7, #8]
 8008c9a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8008c9c:	697b      	ldr	r3, [r7, #20]
 8008c9e:	0b5b      	lsrs	r3, r3, #13
 8008ca0:	b2db      	uxtb	r3, r3
 8008ca2:	2207      	movs	r2, #7
 8008ca4:	4013      	ands	r3, r2
 8008ca6:	b2da      	uxtb	r2, r3
 8008ca8:	68bb      	ldr	r3, [r7, #8]
 8008caa:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d11a      	bne.n	8008ce8 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8008cb2:	68bb      	ldr	r3, [r7, #8]
 8008cb4:	78db      	ldrb	r3, [r3, #3]
 8008cb6:	0018      	movs	r0, r3
 8008cb8:	f000 fad2 	bl	8009260 <RTC_Bcd2ToByte>
 8008cbc:	0003      	movs	r3, r0
 8008cbe:	001a      	movs	r2, r3
 8008cc0:	68bb      	ldr	r3, [r7, #8]
 8008cc2:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8008cc4:	68bb      	ldr	r3, [r7, #8]
 8008cc6:	785b      	ldrb	r3, [r3, #1]
 8008cc8:	0018      	movs	r0, r3
 8008cca:	f000 fac9 	bl	8009260 <RTC_Bcd2ToByte>
 8008cce:	0003      	movs	r3, r0
 8008cd0:	001a      	movs	r2, r3
 8008cd2:	68bb      	ldr	r3, [r7, #8]
 8008cd4:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8008cd6:	68bb      	ldr	r3, [r7, #8]
 8008cd8:	789b      	ldrb	r3, [r3, #2]
 8008cda:	0018      	movs	r0, r3
 8008cdc:	f000 fac0 	bl	8009260 <RTC_Bcd2ToByte>
 8008ce0:	0003      	movs	r3, r0
 8008ce2:	001a      	movs	r2, r3
 8008ce4:	68bb      	ldr	r3, [r7, #8]
 8008ce6:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8008ce8:	2300      	movs	r3, #0
}
 8008cea:	0018      	movs	r0, r3
 8008cec:	46bd      	mov	sp, r7
 8008cee:	b006      	add	sp, #24
 8008cf0:	bd80      	pop	{r7, pc}
 8008cf2:	46c0      	nop			; (mov r8, r8)
 8008cf4:	00ffff3f 	.word	0x00ffff3f

08008cf8 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8008cf8:	b590      	push	{r4, r7, lr}
 8008cfa:	b089      	sub	sp, #36	; 0x24
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	60f8      	str	r0, [r7, #12]
 8008d00:	60b9      	str	r1, [r7, #8]
 8008d02:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	2220      	movs	r2, #32
 8008d08:	5c9b      	ldrb	r3, [r3, r2]
 8008d0a:	2b01      	cmp	r3, #1
 8008d0c:	d101      	bne.n	8008d12 <HAL_RTC_SetAlarm_IT+0x1a>
 8008d0e:	2302      	movs	r3, #2
 8008d10:	e130      	b.n	8008f74 <HAL_RTC_SetAlarm_IT+0x27c>
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	2220      	movs	r2, #32
 8008d16:	2101      	movs	r1, #1
 8008d18:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	2221      	movs	r2, #33	; 0x21
 8008d1e:	2102      	movs	r1, #2
 8008d20:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d136      	bne.n	8008d96 <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	689b      	ldr	r3, [r3, #8]
 8008d2e:	2240      	movs	r2, #64	; 0x40
 8008d30:	4013      	ands	r3, r2
 8008d32:	d102      	bne.n	8008d3a <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8008d34:	68bb      	ldr	r3, [r7, #8]
 8008d36:	2200      	movs	r2, #0
 8008d38:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8008d3a:	68bb      	ldr	r3, [r7, #8]
 8008d3c:	781b      	ldrb	r3, [r3, #0]
 8008d3e:	0018      	movs	r0, r3
 8008d40:	f000 fa65 	bl	800920e <RTC_ByteToBcd2>
 8008d44:	0003      	movs	r3, r0
 8008d46:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8008d48:	68bb      	ldr	r3, [r7, #8]
 8008d4a:	785b      	ldrb	r3, [r3, #1]
 8008d4c:	0018      	movs	r0, r3
 8008d4e:	f000 fa5e 	bl	800920e <RTC_ByteToBcd2>
 8008d52:	0003      	movs	r3, r0
 8008d54:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8008d56:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8008d58:	68bb      	ldr	r3, [r7, #8]
 8008d5a:	789b      	ldrb	r3, [r3, #2]
 8008d5c:	0018      	movs	r0, r3
 8008d5e:	f000 fa56 	bl	800920e <RTC_ByteToBcd2>
 8008d62:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8008d64:	0022      	movs	r2, r4
 8008d66:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8008d68:	68bb      	ldr	r3, [r7, #8]
 8008d6a:	78db      	ldrb	r3, [r3, #3]
 8008d6c:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8008d6e:	431a      	orrs	r2, r3
 8008d70:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8008d72:	68bb      	ldr	r3, [r7, #8]
 8008d74:	2220      	movs	r2, #32
 8008d76:	5c9b      	ldrb	r3, [r3, r2]
 8008d78:	0018      	movs	r0, r3
 8008d7a:	f000 fa48 	bl	800920e <RTC_ByteToBcd2>
 8008d7e:	0003      	movs	r3, r0
 8008d80:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8008d82:	0022      	movs	r2, r4
 8008d84:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8008d86:	68bb      	ldr	r3, [r7, #8]
 8008d88:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8008d8a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8008d8c:	68bb      	ldr	r3, [r7, #8]
 8008d8e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8008d90:	4313      	orrs	r3, r2
 8008d92:	61fb      	str	r3, [r7, #28]
 8008d94:	e022      	b.n	8008ddc <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	689b      	ldr	r3, [r3, #8]
 8008d9c:	2240      	movs	r2, #64	; 0x40
 8008d9e:	4013      	ands	r3, r2
 8008da0:	d102      	bne.n	8008da8 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8008da2:	68bb      	ldr	r3, [r7, #8]
 8008da4:	2200      	movs	r2, #0
 8008da6:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8008da8:	68bb      	ldr	r3, [r7, #8]
 8008daa:	781b      	ldrb	r3, [r3, #0]
 8008dac:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8008dae:	68bb      	ldr	r3, [r7, #8]
 8008db0:	785b      	ldrb	r3, [r3, #1]
 8008db2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8008db4:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8008db6:	68ba      	ldr	r2, [r7, #8]
 8008db8:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8008dba:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8008dbc:	68bb      	ldr	r3, [r7, #8]
 8008dbe:	78db      	ldrb	r3, [r3, #3]
 8008dc0:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8008dc2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8008dc4:	68bb      	ldr	r3, [r7, #8]
 8008dc6:	2120      	movs	r1, #32
 8008dc8:	5c5b      	ldrb	r3, [r3, r1]
 8008dca:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8008dcc:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8008dce:	68bb      	ldr	r3, [r7, #8]
 8008dd0:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8008dd2:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8008dd4:	68bb      	ldr	r3, [r7, #8]
 8008dd6:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8008dd8:	4313      	orrs	r3, r2
 8008dda:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8008ddc:	68bb      	ldr	r3, [r7, #8]
 8008dde:	685a      	ldr	r2, [r3, #4]
 8008de0:	68bb      	ldr	r3, [r7, #8]
 8008de2:	699b      	ldr	r3, [r3, #24]
 8008de4:	4313      	orrs	r3, r2
 8008de6:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	22ca      	movs	r2, #202	; 0xca
 8008dee:	625a      	str	r2, [r3, #36]	; 0x24
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	2253      	movs	r2, #83	; 0x53
 8008df6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8008df8:	68bb      	ldr	r3, [r7, #8]
 8008dfa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008dfc:	2380      	movs	r3, #128	; 0x80
 8008dfe:	005b      	lsls	r3, r3, #1
 8008e00:	429a      	cmp	r2, r3
 8008e02:	d14e      	bne.n	8008ea2 <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	689a      	ldr	r2, [r3, #8]
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	495b      	ldr	r1, [pc, #364]	; (8008f7c <HAL_RTC_SetAlarm_IT+0x284>)
 8008e10:	400a      	ands	r2, r1
 8008e12:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	68db      	ldr	r3, [r3, #12]
 8008e1a:	22ff      	movs	r2, #255	; 0xff
 8008e1c:	401a      	ands	r2, r3
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	4957      	ldr	r1, [pc, #348]	; (8008f80 <HAL_RTC_SetAlarm_IT+0x288>)
 8008e24:	430a      	orrs	r2, r1
 8008e26:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8008e28:	f7fd fb20 	bl	800646c <HAL_GetTick>
 8008e2c:	0003      	movs	r3, r0
 8008e2e:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8008e30:	e016      	b.n	8008e60 <HAL_RTC_SetAlarm_IT+0x168>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008e32:	f7fd fb1b 	bl	800646c <HAL_GetTick>
 8008e36:	0002      	movs	r2, r0
 8008e38:	697b      	ldr	r3, [r7, #20]
 8008e3a:	1ad2      	subs	r2, r2, r3
 8008e3c:	23fa      	movs	r3, #250	; 0xfa
 8008e3e:	009b      	lsls	r3, r3, #2
 8008e40:	429a      	cmp	r2, r3
 8008e42:	d90d      	bls.n	8008e60 <HAL_RTC_SetAlarm_IT+0x168>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	22ff      	movs	r2, #255	; 0xff
 8008e4a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	2221      	movs	r2, #33	; 0x21
 8008e50:	2103      	movs	r1, #3
 8008e52:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	2220      	movs	r2, #32
 8008e58:	2100      	movs	r1, #0
 8008e5a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8008e5c:	2303      	movs	r3, #3
 8008e5e:	e089      	b.n	8008f74 <HAL_RTC_SetAlarm_IT+0x27c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	68db      	ldr	r3, [r3, #12]
 8008e66:	2201      	movs	r2, #1
 8008e68:	4013      	ands	r3, r2
 8008e6a:	d0e2      	beq.n	8008e32 <HAL_RTC_SetAlarm_IT+0x13a>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	69fa      	ldr	r2, [r7, #28]
 8008e72:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	69ba      	ldr	r2, [r7, #24]
 8008e7a:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	689a      	ldr	r2, [r3, #8]
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	2180      	movs	r1, #128	; 0x80
 8008e88:	0049      	lsls	r1, r1, #1
 8008e8a:	430a      	orrs	r2, r1
 8008e8c:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	689a      	ldr	r2, [r3, #8]
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	2180      	movs	r1, #128	; 0x80
 8008e9a:	0149      	lsls	r1, r1, #5
 8008e9c:	430a      	orrs	r2, r1
 8008e9e:	609a      	str	r2, [r3, #8]
 8008ea0:	e04d      	b.n	8008f3e <HAL_RTC_SetAlarm_IT+0x246>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	689a      	ldr	r2, [r3, #8]
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	4935      	ldr	r1, [pc, #212]	; (8008f84 <HAL_RTC_SetAlarm_IT+0x28c>)
 8008eae:	400a      	ands	r2, r1
 8008eb0:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	68db      	ldr	r3, [r3, #12]
 8008eb8:	22ff      	movs	r2, #255	; 0xff
 8008eba:	401a      	ands	r2, r3
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	4931      	ldr	r1, [pc, #196]	; (8008f88 <HAL_RTC_SetAlarm_IT+0x290>)
 8008ec2:	430a      	orrs	r2, r1
 8008ec4:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8008ec6:	f7fd fad1 	bl	800646c <HAL_GetTick>
 8008eca:	0003      	movs	r3, r0
 8008ecc:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8008ece:	e016      	b.n	8008efe <HAL_RTC_SetAlarm_IT+0x206>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008ed0:	f7fd facc 	bl	800646c <HAL_GetTick>
 8008ed4:	0002      	movs	r2, r0
 8008ed6:	697b      	ldr	r3, [r7, #20]
 8008ed8:	1ad2      	subs	r2, r2, r3
 8008eda:	23fa      	movs	r3, #250	; 0xfa
 8008edc:	009b      	lsls	r3, r3, #2
 8008ede:	429a      	cmp	r2, r3
 8008ee0:	d90d      	bls.n	8008efe <HAL_RTC_SetAlarm_IT+0x206>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	22ff      	movs	r2, #255	; 0xff
 8008ee8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	2221      	movs	r2, #33	; 0x21
 8008eee:	2103      	movs	r1, #3
 8008ef0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	2220      	movs	r2, #32
 8008ef6:	2100      	movs	r1, #0
 8008ef8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8008efa:	2303      	movs	r3, #3
 8008efc:	e03a      	b.n	8008f74 <HAL_RTC_SetAlarm_IT+0x27c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	68db      	ldr	r3, [r3, #12]
 8008f04:	2202      	movs	r2, #2
 8008f06:	4013      	ands	r3, r2
 8008f08:	d0e2      	beq.n	8008ed0 <HAL_RTC_SetAlarm_IT+0x1d8>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	69fa      	ldr	r2, [r7, #28]
 8008f10:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	69ba      	ldr	r2, [r7, #24]
 8008f18:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	689a      	ldr	r2, [r3, #8]
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	2180      	movs	r1, #128	; 0x80
 8008f26:	0089      	lsls	r1, r1, #2
 8008f28:	430a      	orrs	r2, r1
 8008f2a:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	689a      	ldr	r2, [r3, #8]
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	2180      	movs	r1, #128	; 0x80
 8008f38:	0189      	lsls	r1, r1, #6
 8008f3a:	430a      	orrs	r2, r1
 8008f3c:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8008f3e:	4b13      	ldr	r3, [pc, #76]	; (8008f8c <HAL_RTC_SetAlarm_IT+0x294>)
 8008f40:	681a      	ldr	r2, [r3, #0]
 8008f42:	4b12      	ldr	r3, [pc, #72]	; (8008f8c <HAL_RTC_SetAlarm_IT+0x294>)
 8008f44:	2180      	movs	r1, #128	; 0x80
 8008f46:	0289      	lsls	r1, r1, #10
 8008f48:	430a      	orrs	r2, r1
 8008f4a:	601a      	str	r2, [r3, #0]

  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8008f4c:	4b0f      	ldr	r3, [pc, #60]	; (8008f8c <HAL_RTC_SetAlarm_IT+0x294>)
 8008f4e:	689a      	ldr	r2, [r3, #8]
 8008f50:	4b0e      	ldr	r3, [pc, #56]	; (8008f8c <HAL_RTC_SetAlarm_IT+0x294>)
 8008f52:	2180      	movs	r1, #128	; 0x80
 8008f54:	0289      	lsls	r1, r1, #10
 8008f56:	430a      	orrs	r2, r1
 8008f58:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	22ff      	movs	r2, #255	; 0xff
 8008f60:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	2221      	movs	r2, #33	; 0x21
 8008f66:	2101      	movs	r1, #1
 8008f68:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	2220      	movs	r2, #32
 8008f6e:	2100      	movs	r1, #0
 8008f70:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008f72:	2300      	movs	r3, #0
}
 8008f74:	0018      	movs	r0, r3
 8008f76:	46bd      	mov	sp, r7
 8008f78:	b009      	add	sp, #36	; 0x24
 8008f7a:	bd90      	pop	{r4, r7, pc}
 8008f7c:	fffffeff 	.word	0xfffffeff
 8008f80:	fffffe7f 	.word	0xfffffe7f
 8008f84:	fffffdff 	.word	0xfffffdff
 8008f88:	fffffd7f 	.word	0xfffffd7f
 8008f8c:	40010400 	.word	0x40010400

08008f90 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8008f90:	b580      	push	{r7, lr}
 8008f92:	b084      	sub	sp, #16
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	6078      	str	r0, [r7, #4]
 8008f98:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	2220      	movs	r2, #32
 8008f9e:	5c9b      	ldrb	r3, [r3, r2]
 8008fa0:	2b01      	cmp	r3, #1
 8008fa2:	d101      	bne.n	8008fa8 <HAL_RTC_DeactivateAlarm+0x18>
 8008fa4:	2302      	movs	r3, #2
 8008fa6:	e086      	b.n	80090b6 <HAL_RTC_DeactivateAlarm+0x126>
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	2220      	movs	r2, #32
 8008fac:	2101      	movs	r1, #1
 8008fae:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	2221      	movs	r2, #33	; 0x21
 8008fb4:	2102      	movs	r1, #2
 8008fb6:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	22ca      	movs	r2, #202	; 0xca
 8008fbe:	625a      	str	r2, [r3, #36]	; 0x24
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	2253      	movs	r2, #83	; 0x53
 8008fc6:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 8008fc8:	683a      	ldr	r2, [r7, #0]
 8008fca:	2380      	movs	r3, #128	; 0x80
 8008fcc:	005b      	lsls	r3, r3, #1
 8008fce:	429a      	cmp	r2, r3
 8008fd0:	d132      	bne.n	8009038 <HAL_RTC_DeactivateAlarm+0xa8>
  {
    /* AlarmA */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	689a      	ldr	r2, [r3, #8]
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	4938      	ldr	r1, [pc, #224]	; (80090c0 <HAL_RTC_DeactivateAlarm+0x130>)
 8008fde:	400a      	ands	r2, r1
 8008fe0:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	689a      	ldr	r2, [r3, #8]
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	4935      	ldr	r1, [pc, #212]	; (80090c4 <HAL_RTC_DeactivateAlarm+0x134>)
 8008fee:	400a      	ands	r2, r1
 8008ff0:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 8008ff2:	f7fd fa3b 	bl	800646c <HAL_GetTick>
 8008ff6:	0003      	movs	r3, r0
 8008ff8:	60fb      	str	r3, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8008ffa:	e016      	b.n	800902a <HAL_RTC_DeactivateAlarm+0x9a>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8008ffc:	f7fd fa36 	bl	800646c <HAL_GetTick>
 8009000:	0002      	movs	r2, r0
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	1ad2      	subs	r2, r2, r3
 8009006:	23fa      	movs	r3, #250	; 0xfa
 8009008:	009b      	lsls	r3, r3, #2
 800900a:	429a      	cmp	r2, r3
 800900c:	d90d      	bls.n	800902a <HAL_RTC_DeactivateAlarm+0x9a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	22ff      	movs	r2, #255	; 0xff
 8009014:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	2221      	movs	r2, #33	; 0x21
 800901a:	2103      	movs	r1, #3
 800901c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	2220      	movs	r2, #32
 8009022:	2100      	movs	r1, #0
 8009024:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8009026:	2303      	movs	r3, #3
 8009028:	e045      	b.n	80090b6 <HAL_RTC_DeactivateAlarm+0x126>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	68db      	ldr	r3, [r3, #12]
 8009030:	2201      	movs	r2, #1
 8009032:	4013      	ands	r3, r2
 8009034:	d0e2      	beq.n	8008ffc <HAL_RTC_DeactivateAlarm+0x6c>
 8009036:	e031      	b.n	800909c <HAL_RTC_DeactivateAlarm+0x10c>
    }
  }
  else
  {
    /* AlarmB */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	689a      	ldr	r2, [r3, #8]
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	4921      	ldr	r1, [pc, #132]	; (80090c8 <HAL_RTC_DeactivateAlarm+0x138>)
 8009044:	400a      	ands	r2, r1
 8009046:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	689a      	ldr	r2, [r3, #8]
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	491e      	ldr	r1, [pc, #120]	; (80090cc <HAL_RTC_DeactivateAlarm+0x13c>)
 8009054:	400a      	ands	r2, r1
 8009056:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 8009058:	f7fd fa08 	bl	800646c <HAL_GetTick>
 800905c:	0003      	movs	r3, r0
 800905e:	60fb      	str	r3, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8009060:	e016      	b.n	8009090 <HAL_RTC_DeactivateAlarm+0x100>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009062:	f7fd fa03 	bl	800646c <HAL_GetTick>
 8009066:	0002      	movs	r2, r0
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	1ad2      	subs	r2, r2, r3
 800906c:	23fa      	movs	r3, #250	; 0xfa
 800906e:	009b      	lsls	r3, r3, #2
 8009070:	429a      	cmp	r2, r3
 8009072:	d90d      	bls.n	8009090 <HAL_RTC_DeactivateAlarm+0x100>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	22ff      	movs	r2, #255	; 0xff
 800907a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	2221      	movs	r2, #33	; 0x21
 8009080:	2103      	movs	r1, #3
 8009082:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2220      	movs	r2, #32
 8009088:	2100      	movs	r1, #0
 800908a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800908c:	2303      	movs	r3, #3
 800908e:	e012      	b.n	80090b6 <HAL_RTC_DeactivateAlarm+0x126>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	68db      	ldr	r3, [r3, #12]
 8009096:	2202      	movs	r2, #2
 8009098:	4013      	ands	r3, r2
 800909a:	d0e2      	beq.n	8009062 <HAL_RTC_DeactivateAlarm+0xd2>
      }
    }
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	22ff      	movs	r2, #255	; 0xff
 80090a2:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	2221      	movs	r2, #33	; 0x21
 80090a8:	2101      	movs	r1, #1
 80090aa:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	2220      	movs	r2, #32
 80090b0:	2100      	movs	r1, #0
 80090b2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80090b4:	2300      	movs	r3, #0
}
 80090b6:	0018      	movs	r0, r3
 80090b8:	46bd      	mov	sp, r7
 80090ba:	b004      	add	sp, #16
 80090bc:	bd80      	pop	{r7, pc}
 80090be:	46c0      	nop			; (mov r8, r8)
 80090c0:	fffffeff 	.word	0xfffffeff
 80090c4:	ffffefff 	.word	0xffffefff
 80090c8:	fffffdff 	.word	0xfffffdff
 80090cc:	ffffdfff 	.word	0xffffdfff

080090d0 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b082      	sub	sp, #8
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	689a      	ldr	r2, [r3, #8]
 80090de:	2380      	movs	r3, #128	; 0x80
 80090e0:	015b      	lsls	r3, r3, #5
 80090e2:	4013      	ands	r3, r2
 80090e4:	d014      	beq.n	8009110 <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	68da      	ldr	r2, [r3, #12]
 80090ec:	2380      	movs	r3, #128	; 0x80
 80090ee:	005b      	lsls	r3, r3, #1
 80090f0:	4013      	ands	r3, r2
 80090f2:	d00d      	beq.n	8009110 <HAL_RTC_AlarmIRQHandler+0x40>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	0018      	movs	r0, r3
 80090f8:	f7f9 ffd8 	bl	80030ac <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	68db      	ldr	r3, [r3, #12]
 8009102:	22ff      	movs	r2, #255	; 0xff
 8009104:	401a      	ands	r2, r3
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	4915      	ldr	r1, [pc, #84]	; (8009160 <HAL_RTC_AlarmIRQHandler+0x90>)
 800910c:	430a      	orrs	r2, r1
 800910e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	689a      	ldr	r2, [r3, #8]
 8009116:	2380      	movs	r3, #128	; 0x80
 8009118:	019b      	lsls	r3, r3, #6
 800911a:	4013      	ands	r3, r2
 800911c:	d014      	beq.n	8009148 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	68da      	ldr	r2, [r3, #12]
 8009124:	2380      	movs	r3, #128	; 0x80
 8009126:	009b      	lsls	r3, r3, #2
 8009128:	4013      	ands	r3, r2
 800912a:	d00d      	beq.n	8009148 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* AlarmB callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	0018      	movs	r0, r3
 8009130:	f7f9 ffd6 	bl	80030e0 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	68db      	ldr	r3, [r3, #12]
 800913a:	22ff      	movs	r2, #255	; 0xff
 800913c:	401a      	ands	r2, r3
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	4908      	ldr	r1, [pc, #32]	; (8009164 <HAL_RTC_AlarmIRQHandler+0x94>)
 8009144:	430a      	orrs	r2, r1
 8009146:	60da      	str	r2, [r3, #12]
    }
  }
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8009148:	4b07      	ldr	r3, [pc, #28]	; (8009168 <HAL_RTC_AlarmIRQHandler+0x98>)
 800914a:	2280      	movs	r2, #128	; 0x80
 800914c:	0292      	lsls	r2, r2, #10
 800914e:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	2221      	movs	r2, #33	; 0x21
 8009154:	2101      	movs	r1, #1
 8009156:	5499      	strb	r1, [r3, r2]
}
 8009158:	46c0      	nop			; (mov r8, r8)
 800915a:	46bd      	mov	sp, r7
 800915c:	b002      	add	sp, #8
 800915e:	bd80      	pop	{r7, pc}
 8009160:	fffffe7f 	.word	0xfffffe7f
 8009164:	fffffd7f 	.word	0xfffffd7f
 8009168:	40010400 	.word	0x40010400

0800916c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800916c:	b580      	push	{r7, lr}
 800916e:	b084      	sub	sp, #16
 8009170:	af00      	add	r7, sp, #0
 8009172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	68da      	ldr	r2, [r3, #12]
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	21a0      	movs	r1, #160	; 0xa0
 8009180:	438a      	bics	r2, r1
 8009182:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8009184:	f7fd f972 	bl	800646c <HAL_GetTick>
 8009188:	0003      	movs	r3, r0
 800918a:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800918c:	e00a      	b.n	80091a4 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800918e:	f7fd f96d 	bl	800646c <HAL_GetTick>
 8009192:	0002      	movs	r2, r0
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	1ad2      	subs	r2, r2, r3
 8009198:	23fa      	movs	r3, #250	; 0xfa
 800919a:	009b      	lsls	r3, r3, #2
 800919c:	429a      	cmp	r2, r3
 800919e:	d901      	bls.n	80091a4 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80091a0:	2303      	movs	r3, #3
 80091a2:	e006      	b.n	80091b2 <HAL_RTC_WaitForSynchro+0x46>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	68db      	ldr	r3, [r3, #12]
 80091aa:	2220      	movs	r2, #32
 80091ac:	4013      	ands	r3, r2
 80091ae:	d0ee      	beq.n	800918e <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 80091b0:	2300      	movs	r3, #0
}
 80091b2:	0018      	movs	r0, r3
 80091b4:	46bd      	mov	sp, r7
 80091b6:	b004      	add	sp, #16
 80091b8:	bd80      	pop	{r7, pc}

080091ba <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80091ba:	b580      	push	{r7, lr}
 80091bc:	b084      	sub	sp, #16
 80091be:	af00      	add	r7, sp, #0
 80091c0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	68db      	ldr	r3, [r3, #12]
 80091c8:	2240      	movs	r2, #64	; 0x40
 80091ca:	4013      	ands	r3, r2
 80091cc:	d11a      	bne.n	8009204 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	2201      	movs	r2, #1
 80091d4:	4252      	negs	r2, r2
 80091d6:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80091d8:	f7fd f948 	bl	800646c <HAL_GetTick>
 80091dc:	0003      	movs	r3, r0
 80091de:	60fb      	str	r3, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80091e0:	e00a      	b.n	80091f8 <RTC_EnterInitMode+0x3e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80091e2:	f7fd f943 	bl	800646c <HAL_GetTick>
 80091e6:	0002      	movs	r2, r0
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	1ad2      	subs	r2, r2, r3
 80091ec:	23fa      	movs	r3, #250	; 0xfa
 80091ee:	009b      	lsls	r3, r3, #2
 80091f0:	429a      	cmp	r2, r3
 80091f2:	d901      	bls.n	80091f8 <RTC_EnterInitMode+0x3e>
      {
        return HAL_TIMEOUT;
 80091f4:	2303      	movs	r3, #3
 80091f6:	e006      	b.n	8009206 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	68db      	ldr	r3, [r3, #12]
 80091fe:	2240      	movs	r2, #64	; 0x40
 8009200:	4013      	ands	r3, r2
 8009202:	d0ee      	beq.n	80091e2 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8009204:	2300      	movs	r3, #0
}
 8009206:	0018      	movs	r0, r3
 8009208:	46bd      	mov	sp, r7
 800920a:	b004      	add	sp, #16
 800920c:	bd80      	pop	{r7, pc}

0800920e <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800920e:	b580      	push	{r7, lr}
 8009210:	b084      	sub	sp, #16
 8009212:	af00      	add	r7, sp, #0
 8009214:	0002      	movs	r2, r0
 8009216:	1dfb      	adds	r3, r7, #7
 8009218:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 800921a:	2300      	movs	r3, #0
 800921c:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 800921e:	230b      	movs	r3, #11
 8009220:	18fb      	adds	r3, r7, r3
 8009222:	1dfa      	adds	r2, r7, #7
 8009224:	7812      	ldrb	r2, [r2, #0]
 8009226:	701a      	strb	r2, [r3, #0]

  while (Param >= 10U)
 8009228:	e008      	b.n	800923c <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	3301      	adds	r3, #1
 800922e:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8009230:	220b      	movs	r2, #11
 8009232:	18bb      	adds	r3, r7, r2
 8009234:	18ba      	adds	r2, r7, r2
 8009236:	7812      	ldrb	r2, [r2, #0]
 8009238:	3a0a      	subs	r2, #10
 800923a:	701a      	strb	r2, [r3, #0]
  while (Param >= 10U)
 800923c:	230b      	movs	r3, #11
 800923e:	18fb      	adds	r3, r7, r3
 8009240:	781b      	ldrb	r3, [r3, #0]
 8009242:	2b09      	cmp	r3, #9
 8009244:	d8f1      	bhi.n	800922a <RTC_ByteToBcd2+0x1c>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	b2db      	uxtb	r3, r3
 800924a:	011b      	lsls	r3, r3, #4
 800924c:	b2da      	uxtb	r2, r3
 800924e:	230b      	movs	r3, #11
 8009250:	18fb      	adds	r3, r7, r3
 8009252:	781b      	ldrb	r3, [r3, #0]
 8009254:	4313      	orrs	r3, r2
 8009256:	b2db      	uxtb	r3, r3
}
 8009258:	0018      	movs	r0, r3
 800925a:	46bd      	mov	sp, r7
 800925c:	b004      	add	sp, #16
 800925e:	bd80      	pop	{r7, pc}

08009260 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8009260:	b580      	push	{r7, lr}
 8009262:	b084      	sub	sp, #16
 8009264:	af00      	add	r7, sp, #0
 8009266:	0002      	movs	r2, r0
 8009268:	1dfb      	adds	r3, r7, #7
 800926a:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 800926c:	1dfb      	adds	r3, r7, #7
 800926e:	781b      	ldrb	r3, [r3, #0]
 8009270:	091b      	lsrs	r3, r3, #4
 8009272:	b2db      	uxtb	r3, r3
 8009274:	001a      	movs	r2, r3
 8009276:	0013      	movs	r3, r2
 8009278:	009b      	lsls	r3, r3, #2
 800927a:	189b      	adds	r3, r3, r2
 800927c:	005b      	lsls	r3, r3, #1
 800927e:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	b2da      	uxtb	r2, r3
 8009284:	1dfb      	adds	r3, r7, #7
 8009286:	781b      	ldrb	r3, [r3, #0]
 8009288:	210f      	movs	r1, #15
 800928a:	400b      	ands	r3, r1
 800928c:	b2db      	uxtb	r3, r3
 800928e:	18d3      	adds	r3, r2, r3
 8009290:	b2db      	uxtb	r3, r3
}
 8009292:	0018      	movs	r0, r3
 8009294:	46bd      	mov	sp, r7
 8009296:	b004      	add	sp, #16
 8009298:	bd80      	pop	{r7, pc}

0800929a <HAL_RTCEx_SetSmoothCalib>:
  *         must be equal to SMOOTHCALIB_PLUSPULSES_RESET and the field
  *         SmoothCalibMinusPulsesValue mut be equal to 0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSmoothCalib(RTC_HandleTypeDef *hrtc, uint32_t SmoothCalibPeriod, uint32_t SmoothCalibPlusPulses, uint32_t SmoothCalibMinusPulsesValue)
{
 800929a:	b580      	push	{r7, lr}
 800929c:	b086      	sub	sp, #24
 800929e:	af00      	add	r7, sp, #0
 80092a0:	60f8      	str	r0, [r7, #12]
 80092a2:	60b9      	str	r1, [r7, #8]
 80092a4:	607a      	str	r2, [r7, #4]
 80092a6:	603b      	str	r3, [r7, #0]
  assert_param(IS_RTC_SMOOTH_CALIB_PERIOD(SmoothCalibPeriod));
  assert_param(IS_RTC_SMOOTH_CALIB_PLUS(SmoothCalibPlusPulses));
  assert_param(IS_RTC_SMOOTH_CALIB_MINUS(SmoothCalibMinusPulsesValue));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	2220      	movs	r2, #32
 80092ac:	5c9b      	ldrb	r3, [r3, r2]
 80092ae:	2b01      	cmp	r3, #1
 80092b0:	d101      	bne.n	80092b6 <HAL_RTCEx_SetSmoothCalib+0x1c>
 80092b2:	2302      	movs	r3, #2
 80092b4:	e04f      	b.n	8009356 <HAL_RTCEx_SetSmoothCalib+0xbc>
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	2220      	movs	r2, #32
 80092ba:	2101      	movs	r1, #1
 80092bc:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	2221      	movs	r2, #33	; 0x21
 80092c2:	2102      	movs	r1, #2
 80092c4:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	22ca      	movs	r2, #202	; 0xca
 80092cc:	625a      	str	r2, [r3, #36]	; 0x24
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	2253      	movs	r2, #83	; 0x53
 80092d4:	625a      	str	r2, [r3, #36]	; 0x24

  /* check if a calibration is pending*/
  if ((hrtc->Instance->ISR & RTC_ISR_RECALPF) != 0U)
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	68da      	ldr	r2, [r3, #12]
 80092dc:	2380      	movs	r3, #128	; 0x80
 80092de:	025b      	lsls	r3, r3, #9
 80092e0:	4013      	ands	r3, r2
 80092e2:	d022      	beq.n	800932a <HAL_RTCEx_SetSmoothCalib+0x90>
  {
    tickstart = HAL_GetTick();
 80092e4:	f7fd f8c2 	bl	800646c <HAL_GetTick>
 80092e8:	0003      	movs	r3, r0
 80092ea:	617b      	str	r3, [r7, #20]

    /* check if a calibration is pending*/
    while ((hrtc->Instance->ISR & RTC_ISR_RECALPF) != 0U)
 80092ec:	e016      	b.n	800931c <HAL_RTCEx_SetSmoothCalib+0x82>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80092ee:	f7fd f8bd 	bl	800646c <HAL_GetTick>
 80092f2:	0002      	movs	r2, r0
 80092f4:	697b      	ldr	r3, [r7, #20]
 80092f6:	1ad2      	subs	r2, r2, r3
 80092f8:	23fa      	movs	r3, #250	; 0xfa
 80092fa:	009b      	lsls	r3, r3, #2
 80092fc:	429a      	cmp	r2, r3
 80092fe:	d90d      	bls.n	800931c <HAL_RTCEx_SetSmoothCalib+0x82>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	22ff      	movs	r2, #255	; 0xff
 8009306:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	2221      	movs	r2, #33	; 0x21
 800930c:	2103      	movs	r1, #3
 800930e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	2220      	movs	r2, #32
 8009314:	2100      	movs	r1, #0
 8009316:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8009318:	2303      	movs	r3, #3
 800931a:	e01c      	b.n	8009356 <HAL_RTCEx_SetSmoothCalib+0xbc>
    while ((hrtc->Instance->ISR & RTC_ISR_RECALPF) != 0U)
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	68da      	ldr	r2, [r3, #12]
 8009322:	2380      	movs	r3, #128	; 0x80
 8009324:	025b      	lsls	r3, r3, #9
 8009326:	4013      	ands	r3, r2
 8009328:	d1e1      	bne.n	80092ee <HAL_RTCEx_SetSmoothCalib+0x54>
      }
    }
  }

  /* Configure the Smooth calibration settings */
  hrtc->Instance->CALR = (uint32_t)((uint32_t)SmoothCalibPeriod | (uint32_t)SmoothCalibPlusPulses | (uint32_t)SmoothCalibMinusPulsesValue);
 800932a:	68ba      	ldr	r2, [r7, #8]
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	431a      	orrs	r2, r3
 8009330:	0011      	movs	r1, r2
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	683a      	ldr	r2, [r7, #0]
 8009338:	430a      	orrs	r2, r1
 800933a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	22ff      	movs	r2, #255	; 0xff
 8009342:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	2221      	movs	r2, #33	; 0x21
 8009348:	2101      	movs	r1, #1
 800934a:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	2220      	movs	r2, #32
 8009350:	2100      	movs	r1, #0
 8009352:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009354:	2300      	movs	r3, #0
}
 8009356:	0018      	movs	r0, r3
 8009358:	46bd      	mov	sp, r7
 800935a:	b006      	add	sp, #24
 800935c:	bd80      	pop	{r7, pc}
	...

08009360 <HAL_RTCEx_SetCalibrationOutPut>:
  *             @arg RTC_CALIBOUTPUT_512HZ: A signal has a regular waveform at 512Hz.
  *             @arg RTC_CALIBOUTPUT_1HZ: A signal has a regular waveform at 1Hz.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetCalibrationOutPut(RTC_HandleTypeDef *hrtc, uint32_t CalibOutput)
{
 8009360:	b580      	push	{r7, lr}
 8009362:	b082      	sub	sp, #8
 8009364:	af00      	add	r7, sp, #0
 8009366:	6078      	str	r0, [r7, #4]
 8009368:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_CALIB_OUTPUT(CalibOutput));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	2220      	movs	r2, #32
 800936e:	5c9b      	ldrb	r3, [r3, r2]
 8009370:	2b01      	cmp	r3, #1
 8009372:	d101      	bne.n	8009378 <HAL_RTCEx_SetCalibrationOutPut+0x18>
 8009374:	2302      	movs	r3, #2
 8009376:	e035      	b.n	80093e4 <HAL_RTCEx_SetCalibrationOutPut+0x84>
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	2220      	movs	r2, #32
 800937c:	2101      	movs	r1, #1
 800937e:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	2221      	movs	r2, #33	; 0x21
 8009384:	2102      	movs	r1, #2
 8009386:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	22ca      	movs	r2, #202	; 0xca
 800938e:	625a      	str	r2, [r3, #36]	; 0x24
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	2253      	movs	r2, #83	; 0x53
 8009396:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear flags before config */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_COSEL;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	689a      	ldr	r2, [r3, #8]
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	4912      	ldr	r1, [pc, #72]	; (80093ec <HAL_RTCEx_SetCalibrationOutPut+0x8c>)
 80093a4:	400a      	ands	r2, r1
 80093a6:	609a      	str	r2, [r3, #8]

  /* Configure the RTC_CR register */
  hrtc->Instance->CR |= (uint32_t)CalibOutput;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	6899      	ldr	r1, [r3, #8]
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	683a      	ldr	r2, [r7, #0]
 80093b4:	430a      	orrs	r2, r1
 80093b6:	609a      	str	r2, [r3, #8]

  __HAL_RTC_CALIBRATION_OUTPUT_ENABLE(hrtc);
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	689a      	ldr	r2, [r3, #8]
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	2180      	movs	r1, #128	; 0x80
 80093c4:	0409      	lsls	r1, r1, #16
 80093c6:	430a      	orrs	r2, r1
 80093c8:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	22ff      	movs	r2, #255	; 0xff
 80093d0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	2221      	movs	r2, #33	; 0x21
 80093d6:	2101      	movs	r1, #1
 80093d8:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	2220      	movs	r2, #32
 80093de:	2100      	movs	r1, #0
 80093e0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80093e2:	2300      	movs	r3, #0
}
 80093e4:	0018      	movs	r0, r3
 80093e6:	46bd      	mov	sp, r7
 80093e8:	b002      	add	sp, #8
 80093ea:	bd80      	pop	{r7, pc}
 80093ec:	fff7ffff 	.word	0xfff7ffff

080093f0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b082      	sub	sp, #8
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d101      	bne.n	8009402 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80093fe:	2301      	movs	r3, #1
 8009400:	e059      	b.n	80094b6 <HAL_SPI_Init+0xc6>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	2200      	movs	r2, #0
 8009406:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	2251      	movs	r2, #81	; 0x51
 800940c:	5c9b      	ldrb	r3, [r3, r2]
 800940e:	b2db      	uxtb	r3, r3
 8009410:	2b00      	cmp	r3, #0
 8009412:	d107      	bne.n	8009424 <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	2250      	movs	r2, #80	; 0x50
 8009418:	2100      	movs	r1, #0
 800941a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	0018      	movs	r0, r3
 8009420:	f7fa fe3a 	bl	8004098 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	2251      	movs	r2, #81	; 0x51
 8009428:	2102      	movs	r1, #2
 800942a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	681a      	ldr	r2, [r3, #0]
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	2140      	movs	r1, #64	; 0x40
 8009438:	438a      	bics	r2, r1
 800943a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	685a      	ldr	r2, [r3, #4]
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	689b      	ldr	r3, [r3, #8]
 8009444:	431a      	orrs	r2, r3
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	68db      	ldr	r3, [r3, #12]
 800944a:	431a      	orrs	r2, r3
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	691b      	ldr	r3, [r3, #16]
 8009450:	431a      	orrs	r2, r3
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	695b      	ldr	r3, [r3, #20]
 8009456:	431a      	orrs	r2, r3
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	6999      	ldr	r1, [r3, #24]
 800945c:	2380      	movs	r3, #128	; 0x80
 800945e:	009b      	lsls	r3, r3, #2
 8009460:	400b      	ands	r3, r1
 8009462:	431a      	orrs	r2, r3
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	69db      	ldr	r3, [r3, #28]
 8009468:	431a      	orrs	r2, r3
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	6a1b      	ldr	r3, [r3, #32]
 800946e:	431a      	orrs	r2, r3
 8009470:	0011      	movs	r1, r2
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	430a      	orrs	r2, r1
 800947c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	699b      	ldr	r3, [r3, #24]
 8009482:	0c1b      	lsrs	r3, r3, #16
 8009484:	2204      	movs	r2, #4
 8009486:	4013      	ands	r3, r2
 8009488:	0019      	movs	r1, r3
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	430a      	orrs	r2, r1
 8009494:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	69da      	ldr	r2, [r3, #28]
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	4907      	ldr	r1, [pc, #28]	; (80094c0 <HAL_SPI_Init+0xd0>)
 80094a2:	400a      	ands	r2, r1
 80094a4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	2200      	movs	r2, #0
 80094aa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	2251      	movs	r2, #81	; 0x51
 80094b0:	2101      	movs	r1, #1
 80094b2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80094b4:	2300      	movs	r3, #0
}
 80094b6:	0018      	movs	r0, r3
 80094b8:	46bd      	mov	sp, r7
 80094ba:	b002      	add	sp, #8
 80094bc:	bd80      	pop	{r7, pc}
 80094be:	46c0      	nop			; (mov r8, r8)
 80094c0:	fffff7ff 	.word	0xfffff7ff

080094c4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80094c4:	b580      	push	{r7, lr}
 80094c6:	b088      	sub	sp, #32
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	60f8      	str	r0, [r7, #12]
 80094cc:	60b9      	str	r1, [r7, #8]
 80094ce:	603b      	str	r3, [r7, #0]
 80094d0:	1dbb      	adds	r3, r7, #6
 80094d2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80094d4:	231f      	movs	r3, #31
 80094d6:	18fb      	adds	r3, r7, r3
 80094d8:	2200      	movs	r2, #0
 80094da:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	2250      	movs	r2, #80	; 0x50
 80094e0:	5c9b      	ldrb	r3, [r3, r2]
 80094e2:	2b01      	cmp	r3, #1
 80094e4:	d101      	bne.n	80094ea <HAL_SPI_Transmit+0x26>
 80094e6:	2302      	movs	r3, #2
 80094e8:	e136      	b.n	8009758 <HAL_SPI_Transmit+0x294>
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	2250      	movs	r2, #80	; 0x50
 80094ee:	2101      	movs	r1, #1
 80094f0:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80094f2:	f7fc ffbb 	bl	800646c <HAL_GetTick>
 80094f6:	0003      	movs	r3, r0
 80094f8:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80094fa:	2316      	movs	r3, #22
 80094fc:	18fb      	adds	r3, r7, r3
 80094fe:	1dba      	adds	r2, r7, #6
 8009500:	8812      	ldrh	r2, [r2, #0]
 8009502:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	2251      	movs	r2, #81	; 0x51
 8009508:	5c9b      	ldrb	r3, [r3, r2]
 800950a:	b2db      	uxtb	r3, r3
 800950c:	2b01      	cmp	r3, #1
 800950e:	d004      	beq.n	800951a <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8009510:	231f      	movs	r3, #31
 8009512:	18fb      	adds	r3, r7, r3
 8009514:	2202      	movs	r2, #2
 8009516:	701a      	strb	r2, [r3, #0]
    goto error;
 8009518:	e113      	b.n	8009742 <HAL_SPI_Transmit+0x27e>
  }

  if ((pData == NULL) || (Size == 0U))
 800951a:	68bb      	ldr	r3, [r7, #8]
 800951c:	2b00      	cmp	r3, #0
 800951e:	d003      	beq.n	8009528 <HAL_SPI_Transmit+0x64>
 8009520:	1dbb      	adds	r3, r7, #6
 8009522:	881b      	ldrh	r3, [r3, #0]
 8009524:	2b00      	cmp	r3, #0
 8009526:	d104      	bne.n	8009532 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8009528:	231f      	movs	r3, #31
 800952a:	18fb      	adds	r3, r7, r3
 800952c:	2201      	movs	r2, #1
 800952e:	701a      	strb	r2, [r3, #0]
    goto error;
 8009530:	e107      	b.n	8009742 <HAL_SPI_Transmit+0x27e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	2251      	movs	r2, #81	; 0x51
 8009536:	2103      	movs	r1, #3
 8009538:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	2200      	movs	r2, #0
 800953e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	68ba      	ldr	r2, [r7, #8]
 8009544:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	1dba      	adds	r2, r7, #6
 800954a:	8812      	ldrh	r2, [r2, #0]
 800954c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	1dba      	adds	r2, r7, #6
 8009552:	8812      	ldrh	r2, [r2, #0]
 8009554:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	2200      	movs	r2, #0
 800955a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	2200      	movs	r2, #0
 8009560:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	2200      	movs	r2, #0
 8009566:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	2200      	movs	r2, #0
 800956c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	2200      	movs	r2, #0
 8009572:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	689a      	ldr	r2, [r3, #8]
 8009578:	2380      	movs	r3, #128	; 0x80
 800957a:	021b      	lsls	r3, r3, #8
 800957c:	429a      	cmp	r2, r3
 800957e:	d108      	bne.n	8009592 <HAL_SPI_Transmit+0xce>
  {
    SPI_1LINE_TX(hspi);
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	681a      	ldr	r2, [r3, #0]
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	2180      	movs	r1, #128	; 0x80
 800958c:	01c9      	lsls	r1, r1, #7
 800958e:	430a      	orrs	r2, r1
 8009590:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	2240      	movs	r2, #64	; 0x40
 800959a:	4013      	ands	r3, r2
 800959c:	2b40      	cmp	r3, #64	; 0x40
 800959e:	d007      	beq.n	80095b0 <HAL_SPI_Transmit+0xec>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	681a      	ldr	r2, [r3, #0]
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	2140      	movs	r1, #64	; 0x40
 80095ac:	430a      	orrs	r2, r1
 80095ae:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	68da      	ldr	r2, [r3, #12]
 80095b4:	2380      	movs	r3, #128	; 0x80
 80095b6:	011b      	lsls	r3, r3, #4
 80095b8:	429a      	cmp	r2, r3
 80095ba:	d14e      	bne.n	800965a <HAL_SPI_Transmit+0x196>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	685b      	ldr	r3, [r3, #4]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d004      	beq.n	80095ce <HAL_SPI_Transmit+0x10a>
 80095c4:	2316      	movs	r3, #22
 80095c6:	18fb      	adds	r3, r7, r3
 80095c8:	881b      	ldrh	r3, [r3, #0]
 80095ca:	2b01      	cmp	r3, #1
 80095cc:	d13f      	bne.n	800964e <HAL_SPI_Transmit+0x18a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095d2:	881a      	ldrh	r2, [r3, #0]
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095de:	1c9a      	adds	r2, r3, #2
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80095e8:	b29b      	uxth	r3, r3
 80095ea:	3b01      	subs	r3, #1
 80095ec:	b29a      	uxth	r2, r3
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80095f2:	e02c      	b.n	800964e <HAL_SPI_Transmit+0x18a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	689b      	ldr	r3, [r3, #8]
 80095fa:	2202      	movs	r2, #2
 80095fc:	4013      	ands	r3, r2
 80095fe:	2b02      	cmp	r3, #2
 8009600:	d112      	bne.n	8009628 <HAL_SPI_Transmit+0x164>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009606:	881a      	ldrh	r2, [r3, #0]
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009612:	1c9a      	adds	r2, r3, #2
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800961c:	b29b      	uxth	r3, r3
 800961e:	3b01      	subs	r3, #1
 8009620:	b29a      	uxth	r2, r3
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	86da      	strh	r2, [r3, #54]	; 0x36
 8009626:	e012      	b.n	800964e <HAL_SPI_Transmit+0x18a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009628:	f7fc ff20 	bl	800646c <HAL_GetTick>
 800962c:	0002      	movs	r2, r0
 800962e:	69bb      	ldr	r3, [r7, #24]
 8009630:	1ad3      	subs	r3, r2, r3
 8009632:	683a      	ldr	r2, [r7, #0]
 8009634:	429a      	cmp	r2, r3
 8009636:	d802      	bhi.n	800963e <HAL_SPI_Transmit+0x17a>
 8009638:	683b      	ldr	r3, [r7, #0]
 800963a:	3301      	adds	r3, #1
 800963c:	d102      	bne.n	8009644 <HAL_SPI_Transmit+0x180>
 800963e:	683b      	ldr	r3, [r7, #0]
 8009640:	2b00      	cmp	r3, #0
 8009642:	d104      	bne.n	800964e <HAL_SPI_Transmit+0x18a>
        {
          errorcode = HAL_TIMEOUT;
 8009644:	231f      	movs	r3, #31
 8009646:	18fb      	adds	r3, r7, r3
 8009648:	2203      	movs	r2, #3
 800964a:	701a      	strb	r2, [r3, #0]
          goto error;
 800964c:	e079      	b.n	8009742 <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009652:	b29b      	uxth	r3, r3
 8009654:	2b00      	cmp	r3, #0
 8009656:	d1cd      	bne.n	80095f4 <HAL_SPI_Transmit+0x130>
 8009658:	e04f      	b.n	80096fa <HAL_SPI_Transmit+0x236>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	685b      	ldr	r3, [r3, #4]
 800965e:	2b00      	cmp	r3, #0
 8009660:	d004      	beq.n	800966c <HAL_SPI_Transmit+0x1a8>
 8009662:	2316      	movs	r3, #22
 8009664:	18fb      	adds	r3, r7, r3
 8009666:	881b      	ldrh	r3, [r3, #0]
 8009668:	2b01      	cmp	r3, #1
 800966a:	d141      	bne.n	80096f0 <HAL_SPI_Transmit+0x22c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	330c      	adds	r3, #12
 8009676:	7812      	ldrb	r2, [r2, #0]
 8009678:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800967e:	1c5a      	adds	r2, r3, #1
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009688:	b29b      	uxth	r3, r3
 800968a:	3b01      	subs	r3, #1
 800968c:	b29a      	uxth	r2, r3
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8009692:	e02d      	b.n	80096f0 <HAL_SPI_Transmit+0x22c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	689b      	ldr	r3, [r3, #8]
 800969a:	2202      	movs	r2, #2
 800969c:	4013      	ands	r3, r2
 800969e:	2b02      	cmp	r3, #2
 80096a0:	d113      	bne.n	80096ca <HAL_SPI_Transmit+0x206>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	330c      	adds	r3, #12
 80096ac:	7812      	ldrb	r2, [r2, #0]
 80096ae:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096b4:	1c5a      	adds	r2, r3, #1
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80096be:	b29b      	uxth	r3, r3
 80096c0:	3b01      	subs	r3, #1
 80096c2:	b29a      	uxth	r2, r3
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	86da      	strh	r2, [r3, #54]	; 0x36
 80096c8:	e012      	b.n	80096f0 <HAL_SPI_Transmit+0x22c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80096ca:	f7fc fecf 	bl	800646c <HAL_GetTick>
 80096ce:	0002      	movs	r2, r0
 80096d0:	69bb      	ldr	r3, [r7, #24]
 80096d2:	1ad3      	subs	r3, r2, r3
 80096d4:	683a      	ldr	r2, [r7, #0]
 80096d6:	429a      	cmp	r2, r3
 80096d8:	d802      	bhi.n	80096e0 <HAL_SPI_Transmit+0x21c>
 80096da:	683b      	ldr	r3, [r7, #0]
 80096dc:	3301      	adds	r3, #1
 80096de:	d102      	bne.n	80096e6 <HAL_SPI_Transmit+0x222>
 80096e0:	683b      	ldr	r3, [r7, #0]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d104      	bne.n	80096f0 <HAL_SPI_Transmit+0x22c>
        {
          errorcode = HAL_TIMEOUT;
 80096e6:	231f      	movs	r3, #31
 80096e8:	18fb      	adds	r3, r7, r3
 80096ea:	2203      	movs	r2, #3
 80096ec:	701a      	strb	r2, [r3, #0]
          goto error;
 80096ee:	e028      	b.n	8009742 <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80096f4:	b29b      	uxth	r3, r3
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d1cc      	bne.n	8009694 <HAL_SPI_Transmit+0x1d0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80096fa:	69ba      	ldr	r2, [r7, #24]
 80096fc:	6839      	ldr	r1, [r7, #0]
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	0018      	movs	r0, r3
 8009702:	f000 fa99 	bl	8009c38 <SPI_EndRxTxTransaction>
 8009706:	1e03      	subs	r3, r0, #0
 8009708:	d002      	beq.n	8009710 <HAL_SPI_Transmit+0x24c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	2220      	movs	r2, #32
 800970e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	689b      	ldr	r3, [r3, #8]
 8009714:	2b00      	cmp	r3, #0
 8009716:	d10a      	bne.n	800972e <HAL_SPI_Transmit+0x26a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009718:	2300      	movs	r3, #0
 800971a:	613b      	str	r3, [r7, #16]
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	68db      	ldr	r3, [r3, #12]
 8009722:	613b      	str	r3, [r7, #16]
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	689b      	ldr	r3, [r3, #8]
 800972a:	613b      	str	r3, [r7, #16]
 800972c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009732:	2b00      	cmp	r3, #0
 8009734:	d004      	beq.n	8009740 <HAL_SPI_Transmit+0x27c>
  {
    errorcode = HAL_ERROR;
 8009736:	231f      	movs	r3, #31
 8009738:	18fb      	adds	r3, r7, r3
 800973a:	2201      	movs	r2, #1
 800973c:	701a      	strb	r2, [r3, #0]
 800973e:	e000      	b.n	8009742 <HAL_SPI_Transmit+0x27e>
  }

error:
 8009740:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	2251      	movs	r2, #81	; 0x51
 8009746:	2101      	movs	r1, #1
 8009748:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	2250      	movs	r2, #80	; 0x50
 800974e:	2100      	movs	r1, #0
 8009750:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8009752:	231f      	movs	r3, #31
 8009754:	18fb      	adds	r3, r7, r3
 8009756:	781b      	ldrb	r3, [r3, #0]
}
 8009758:	0018      	movs	r0, r3
 800975a:	46bd      	mov	sp, r7
 800975c:	b008      	add	sp, #32
 800975e:	bd80      	pop	{r7, pc}

08009760 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8009760:	b580      	push	{r7, lr}
 8009762:	b086      	sub	sp, #24
 8009764:	af00      	add	r7, sp, #0
 8009766:	60f8      	str	r0, [r7, #12]
 8009768:	60b9      	str	r1, [r7, #8]
 800976a:	1dbb      	adds	r3, r7, #6
 800976c:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800976e:	2317      	movs	r3, #23
 8009770:	18fb      	adds	r3, r7, r3
 8009772:	2200      	movs	r2, #0
 8009774:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	2250      	movs	r2, #80	; 0x50
 800977a:	5c9b      	ldrb	r3, [r3, r2]
 800977c:	2b01      	cmp	r3, #1
 800977e:	d101      	bne.n	8009784 <HAL_SPI_Transmit_IT+0x24>
 8009780:	2302      	movs	r3, #2
 8009782:	e072      	b.n	800986a <HAL_SPI_Transmit_IT+0x10a>
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	2250      	movs	r2, #80	; 0x50
 8009788:	2101      	movs	r1, #1
 800978a:	5499      	strb	r1, [r3, r2]

  if ((pData == NULL) || (Size == 0U))
 800978c:	68bb      	ldr	r3, [r7, #8]
 800978e:	2b00      	cmp	r3, #0
 8009790:	d003      	beq.n	800979a <HAL_SPI_Transmit_IT+0x3a>
 8009792:	1dbb      	adds	r3, r7, #6
 8009794:	881b      	ldrh	r3, [r3, #0]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d104      	bne.n	80097a4 <HAL_SPI_Transmit_IT+0x44>
  {
    errorcode = HAL_ERROR;
 800979a:	2317      	movs	r3, #23
 800979c:	18fb      	adds	r3, r7, r3
 800979e:	2201      	movs	r2, #1
 80097a0:	701a      	strb	r2, [r3, #0]
    goto error;
 80097a2:	e05b      	b.n	800985c <HAL_SPI_Transmit_IT+0xfc>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	2251      	movs	r2, #81	; 0x51
 80097a8:	5c9b      	ldrb	r3, [r3, r2]
 80097aa:	b2db      	uxtb	r3, r3
 80097ac:	2b01      	cmp	r3, #1
 80097ae:	d004      	beq.n	80097ba <HAL_SPI_Transmit_IT+0x5a>
  {
    errorcode = HAL_BUSY;
 80097b0:	2317      	movs	r3, #23
 80097b2:	18fb      	adds	r3, r7, r3
 80097b4:	2202      	movs	r2, #2
 80097b6:	701a      	strb	r2, [r3, #0]
    goto error;
 80097b8:	e050      	b.n	800985c <HAL_SPI_Transmit_IT+0xfc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	2251      	movs	r2, #81	; 0x51
 80097be:	2103      	movs	r1, #3
 80097c0:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	2200      	movs	r2, #0
 80097c6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	68ba      	ldr	r2, [r7, #8]
 80097cc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	1dba      	adds	r2, r7, #6
 80097d2:	8812      	ldrh	r2, [r2, #0]
 80097d4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	1dba      	adds	r2, r7, #6
 80097da:	8812      	ldrh	r2, [r2, #0]
 80097dc:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	2200      	movs	r2, #0
 80097e2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	2200      	movs	r2, #0
 80097e8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	2200      	movs	r2, #0
 80097ee:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	2200      	movs	r2, #0
 80097f4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	68db      	ldr	r3, [r3, #12]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d003      	beq.n	8009806 <HAL_SPI_Transmit_IT+0xa6>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	4a1c      	ldr	r2, [pc, #112]	; (8009874 <HAL_SPI_Transmit_IT+0x114>)
 8009802:	645a      	str	r2, [r3, #68]	; 0x44
 8009804:	e002      	b.n	800980c <HAL_SPI_Transmit_IT+0xac>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	4a1b      	ldr	r2, [pc, #108]	; (8009878 <HAL_SPI_Transmit_IT+0x118>)
 800980a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	689a      	ldr	r2, [r3, #8]
 8009810:	2380      	movs	r3, #128	; 0x80
 8009812:	021b      	lsls	r3, r3, #8
 8009814:	429a      	cmp	r2, r3
 8009816:	d108      	bne.n	800982a <HAL_SPI_Transmit_IT+0xca>
  {
    SPI_1LINE_TX(hspi);
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	681a      	ldr	r2, [r3, #0]
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	2180      	movs	r1, #128	; 0x80
 8009824:	01c9      	lsls	r1, r1, #7
 8009826:	430a      	orrs	r2, r1
 8009828:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	685a      	ldr	r2, [r3, #4]
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	21a0      	movs	r1, #160	; 0xa0
 8009836:	430a      	orrs	r2, r1
 8009838:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	2240      	movs	r2, #64	; 0x40
 8009842:	4013      	ands	r3, r2
 8009844:	2b40      	cmp	r3, #64	; 0x40
 8009846:	d008      	beq.n	800985a <HAL_SPI_Transmit_IT+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	681a      	ldr	r2, [r3, #0]
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	2140      	movs	r1, #64	; 0x40
 8009854:	430a      	orrs	r2, r1
 8009856:	601a      	str	r2, [r3, #0]
 8009858:	e000      	b.n	800985c <HAL_SPI_Transmit_IT+0xfc>
  }

error :
 800985a:	46c0      	nop			; (mov r8, r8)
  __HAL_UNLOCK(hspi);
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	2250      	movs	r2, #80	; 0x50
 8009860:	2100      	movs	r1, #0
 8009862:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8009864:	2317      	movs	r3, #23
 8009866:	18fb      	adds	r3, r7, r3
 8009868:	781b      	ldrb	r3, [r3, #0]
}
 800986a:	0018      	movs	r0, r3
 800986c:	46bd      	mov	sp, r7
 800986e:	b006      	add	sp, #24
 8009870:	bd80      	pop	{r7, pc}
 8009872:	46c0      	nop			; (mov r8, r8)
 8009874:	08009b13 	.word	0x08009b13
 8009878:	08009acb 	.word	0x08009acb

0800987c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800987c:	b580      	push	{r7, lr}
 800987e:	b088      	sub	sp, #32
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	685b      	ldr	r3, [r3, #4]
 800988a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	689b      	ldr	r3, [r3, #8]
 8009892:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8009894:	69bb      	ldr	r3, [r7, #24]
 8009896:	099b      	lsrs	r3, r3, #6
 8009898:	001a      	movs	r2, r3
 800989a:	2301      	movs	r3, #1
 800989c:	4013      	ands	r3, r2
 800989e:	d10f      	bne.n	80098c0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80098a0:	69bb      	ldr	r3, [r7, #24]
 80098a2:	2201      	movs	r2, #1
 80098a4:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80098a6:	d00b      	beq.n	80098c0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80098a8:	69fb      	ldr	r3, [r7, #28]
 80098aa:	099b      	lsrs	r3, r3, #6
 80098ac:	001a      	movs	r2, r3
 80098ae:	2301      	movs	r3, #1
 80098b0:	4013      	ands	r3, r2
 80098b2:	d005      	beq.n	80098c0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098b8:	687a      	ldr	r2, [r7, #4]
 80098ba:	0010      	movs	r0, r2
 80098bc:	4798      	blx	r3
    return;
 80098be:	e0d6      	b.n	8009a6e <HAL_SPI_IRQHandler+0x1f2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80098c0:	69bb      	ldr	r3, [r7, #24]
 80098c2:	085b      	lsrs	r3, r3, #1
 80098c4:	001a      	movs	r2, r3
 80098c6:	2301      	movs	r3, #1
 80098c8:	4013      	ands	r3, r2
 80098ca:	d00b      	beq.n	80098e4 <HAL_SPI_IRQHandler+0x68>
 80098cc:	69fb      	ldr	r3, [r7, #28]
 80098ce:	09db      	lsrs	r3, r3, #7
 80098d0:	001a      	movs	r2, r3
 80098d2:	2301      	movs	r3, #1
 80098d4:	4013      	ands	r3, r2
 80098d6:	d005      	beq.n	80098e4 <HAL_SPI_IRQHandler+0x68>
  {
    hspi->TxISR(hspi);
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098dc:	687a      	ldr	r2, [r7, #4]
 80098de:	0010      	movs	r0, r2
 80098e0:	4798      	blx	r3
    return;
 80098e2:	e0c4      	b.n	8009a6e <HAL_SPI_IRQHandler+0x1f2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80098e4:	69bb      	ldr	r3, [r7, #24]
 80098e6:	095b      	lsrs	r3, r3, #5
 80098e8:	001a      	movs	r2, r3
 80098ea:	2301      	movs	r3, #1
 80098ec:	4013      	ands	r3, r2
 80098ee:	d10c      	bne.n	800990a <HAL_SPI_IRQHandler+0x8e>
 80098f0:	69bb      	ldr	r3, [r7, #24]
 80098f2:	099b      	lsrs	r3, r3, #6
 80098f4:	001a      	movs	r2, r3
 80098f6:	2301      	movs	r3, #1
 80098f8:	4013      	ands	r3, r2
 80098fa:	d106      	bne.n	800990a <HAL_SPI_IRQHandler+0x8e>
 80098fc:	69bb      	ldr	r3, [r7, #24]
 80098fe:	0a1b      	lsrs	r3, r3, #8
 8009900:	001a      	movs	r2, r3
 8009902:	2301      	movs	r3, #1
 8009904:	4013      	ands	r3, r2
 8009906:	d100      	bne.n	800990a <HAL_SPI_IRQHandler+0x8e>
 8009908:	e0b1      	b.n	8009a6e <HAL_SPI_IRQHandler+0x1f2>
 800990a:	69fb      	ldr	r3, [r7, #28]
 800990c:	095b      	lsrs	r3, r3, #5
 800990e:	001a      	movs	r2, r3
 8009910:	2301      	movs	r3, #1
 8009912:	4013      	ands	r3, r2
 8009914:	d100      	bne.n	8009918 <HAL_SPI_IRQHandler+0x9c>
 8009916:	e0aa      	b.n	8009a6e <HAL_SPI_IRQHandler+0x1f2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8009918:	69bb      	ldr	r3, [r7, #24]
 800991a:	099b      	lsrs	r3, r3, #6
 800991c:	001a      	movs	r2, r3
 800991e:	2301      	movs	r3, #1
 8009920:	4013      	ands	r3, r2
 8009922:	d023      	beq.n	800996c <HAL_SPI_IRQHandler+0xf0>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	2251      	movs	r2, #81	; 0x51
 8009928:	5c9b      	ldrb	r3, [r3, r2]
 800992a:	b2db      	uxtb	r3, r3
 800992c:	2b03      	cmp	r3, #3
 800992e:	d011      	beq.n	8009954 <HAL_SPI_IRQHandler+0xd8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009934:	2204      	movs	r2, #4
 8009936:	431a      	orrs	r2, r3
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800993c:	2300      	movs	r3, #0
 800993e:	617b      	str	r3, [r7, #20]
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	68db      	ldr	r3, [r3, #12]
 8009946:	617b      	str	r3, [r7, #20]
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	689b      	ldr	r3, [r3, #8]
 800994e:	617b      	str	r3, [r7, #20]
 8009950:	697b      	ldr	r3, [r7, #20]
 8009952:	e00b      	b.n	800996c <HAL_SPI_IRQHandler+0xf0>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009954:	2300      	movs	r3, #0
 8009956:	613b      	str	r3, [r7, #16]
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	68db      	ldr	r3, [r3, #12]
 800995e:	613b      	str	r3, [r7, #16]
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	689b      	ldr	r3, [r3, #8]
 8009966:	613b      	str	r3, [r7, #16]
 8009968:	693b      	ldr	r3, [r7, #16]
        return;
 800996a:	e080      	b.n	8009a6e <HAL_SPI_IRQHandler+0x1f2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800996c:	69bb      	ldr	r3, [r7, #24]
 800996e:	095b      	lsrs	r3, r3, #5
 8009970:	001a      	movs	r2, r3
 8009972:	2301      	movs	r3, #1
 8009974:	4013      	ands	r3, r2
 8009976:	d014      	beq.n	80099a2 <HAL_SPI_IRQHandler+0x126>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800997c:	2201      	movs	r2, #1
 800997e:	431a      	orrs	r2, r3
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009984:	2300      	movs	r3, #0
 8009986:	60fb      	str	r3, [r7, #12]
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	689b      	ldr	r3, [r3, #8]
 800998e:	60fb      	str	r3, [r7, #12]
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	681a      	ldr	r2, [r3, #0]
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	2140      	movs	r1, #64	; 0x40
 800999c:	438a      	bics	r2, r1
 800999e:	601a      	str	r2, [r3, #0]
 80099a0:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80099a2:	69bb      	ldr	r3, [r7, #24]
 80099a4:	0a1b      	lsrs	r3, r3, #8
 80099a6:	001a      	movs	r2, r3
 80099a8:	2301      	movs	r3, #1
 80099aa:	4013      	ands	r3, r2
 80099ac:	d00c      	beq.n	80099c8 <HAL_SPI_IRQHandler+0x14c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099b2:	2208      	movs	r2, #8
 80099b4:	431a      	orrs	r2, r3
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80099ba:	2300      	movs	r3, #0
 80099bc:	60bb      	str	r3, [r7, #8]
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	689b      	ldr	r3, [r3, #8]
 80099c4:	60bb      	str	r3, [r7, #8]
 80099c6:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d04d      	beq.n	8009a6c <HAL_SPI_IRQHandler+0x1f0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	685a      	ldr	r2, [r3, #4]
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	21e0      	movs	r1, #224	; 0xe0
 80099dc:	438a      	bics	r2, r1
 80099de:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	2251      	movs	r2, #81	; 0x51
 80099e4:	2101      	movs	r1, #1
 80099e6:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80099e8:	69fb      	ldr	r3, [r7, #28]
 80099ea:	2202      	movs	r2, #2
 80099ec:	4013      	ands	r3, r2
 80099ee:	d103      	bne.n	80099f8 <HAL_SPI_IRQHandler+0x17c>
 80099f0:	69fb      	ldr	r3, [r7, #28]
 80099f2:	2201      	movs	r2, #1
 80099f4:	4013      	ands	r3, r2
 80099f6:	d032      	beq.n	8009a5e <HAL_SPI_IRQHandler+0x1e2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	685a      	ldr	r2, [r3, #4]
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	2103      	movs	r1, #3
 8009a04:	438a      	bics	r2, r1
 8009a06:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d010      	beq.n	8009a32 <HAL_SPI_IRQHandler+0x1b6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a14:	4a17      	ldr	r2, [pc, #92]	; (8009a74 <HAL_SPI_IRQHandler+0x1f8>)
 8009a16:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a1c:	0018      	movs	r0, r3
 8009a1e:	f7fd fb7b 	bl	8007118 <HAL_DMA_Abort_IT>
 8009a22:	1e03      	subs	r3, r0, #0
 8009a24:	d005      	beq.n	8009a32 <HAL_SPI_IRQHandler+0x1b6>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a2a:	2240      	movs	r2, #64	; 0x40
 8009a2c:	431a      	orrs	r2, r3
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d016      	beq.n	8009a68 <HAL_SPI_IRQHandler+0x1ec>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009a3e:	4a0d      	ldr	r2, [pc, #52]	; (8009a74 <HAL_SPI_IRQHandler+0x1f8>)
 8009a40:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009a46:	0018      	movs	r0, r3
 8009a48:	f7fd fb66 	bl	8007118 <HAL_DMA_Abort_IT>
 8009a4c:	1e03      	subs	r3, r0, #0
 8009a4e:	d00b      	beq.n	8009a68 <HAL_SPI_IRQHandler+0x1ec>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a54:	2240      	movs	r2, #64	; 0x40
 8009a56:	431a      	orrs	r2, r3
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8009a5c:	e004      	b.n	8009a68 <HAL_SPI_IRQHandler+0x1ec>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	0018      	movs	r0, r3
 8009a62:	f000 f809 	bl	8009a78 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8009a66:	e000      	b.n	8009a6a <HAL_SPI_IRQHandler+0x1ee>
        if (hspi->hdmatx != NULL)
 8009a68:	46c0      	nop			; (mov r8, r8)
    return;
 8009a6a:	46c0      	nop			; (mov r8, r8)
 8009a6c:	46c0      	nop			; (mov r8, r8)
  }
}
 8009a6e:	46bd      	mov	sp, r7
 8009a70:	b008      	add	sp, #32
 8009a72:	bd80      	pop	{r7, pc}
 8009a74:	08009aa1 	.word	0x08009aa1

08009a78 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8009a78:	b580      	push	{r7, lr}
 8009a7a:	b082      	sub	sp, #8
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8009a80:	46c0      	nop			; (mov r8, r8)
 8009a82:	46bd      	mov	sp, r7
 8009a84:	b002      	add	sp, #8
 8009a86:	bd80      	pop	{r7, pc}

08009a88 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8009a88:	b580      	push	{r7, lr}
 8009a8a:	b082      	sub	sp, #8
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	2251      	movs	r2, #81	; 0x51
 8009a94:	5c9b      	ldrb	r3, [r3, r2]
 8009a96:	b2db      	uxtb	r3, r3
}
 8009a98:	0018      	movs	r0, r3
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	b002      	add	sp, #8
 8009a9e:	bd80      	pop	{r7, pc}

08009aa0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b084      	sub	sp, #16
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009aac:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	2200      	movs	r2, #0
 8009ab2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	2200      	movs	r2, #0
 8009ab8:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	0018      	movs	r0, r3
 8009abe:	f7ff ffdb 	bl	8009a78 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009ac2:	46c0      	nop			; (mov r8, r8)
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	b004      	add	sp, #16
 8009ac8:	bd80      	pop	{r7, pc}

08009aca <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8009aca:	b580      	push	{r7, lr}
 8009acc:	b082      	sub	sp, #8
 8009ace:	af00      	add	r7, sp, #0
 8009ad0:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	330c      	adds	r3, #12
 8009adc:	7812      	ldrb	r2, [r2, #0]
 8009ade:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ae4:	1c5a      	adds	r2, r3, #1
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009aee:	b29b      	uxth	r3, r3
 8009af0:	3b01      	subs	r3, #1
 8009af2:	b29a      	uxth	r2, r3
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009afc:	b29b      	uxth	r3, r3
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d103      	bne.n	8009b0a <SPI_TxISR_8BIT+0x40>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	0018      	movs	r0, r3
 8009b06:	f000 f8d5 	bl	8009cb4 <SPI_CloseTx_ISR>
  }
}
 8009b0a:	46c0      	nop			; (mov r8, r8)
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	b002      	add	sp, #8
 8009b10:	bd80      	pop	{r7, pc}

08009b12 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8009b12:	b580      	push	{r7, lr}
 8009b14:	b082      	sub	sp, #8
 8009b16:	af00      	add	r7, sp, #0
 8009b18:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b1e:	881a      	ldrh	r2, [r3, #0]
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b2a:	1c9a      	adds	r2, r3, #2
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009b34:	b29b      	uxth	r3, r3
 8009b36:	3b01      	subs	r3, #1
 8009b38:	b29a      	uxth	r2, r3
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009b42:	b29b      	uxth	r3, r3
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d103      	bne.n	8009b50 <SPI_TxISR_16BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	0018      	movs	r0, r3
 8009b4c:	f000 f8b2 	bl	8009cb4 <SPI_CloseTx_ISR>
  }
}
 8009b50:	46c0      	nop			; (mov r8, r8)
 8009b52:	46bd      	mov	sp, r7
 8009b54:	b002      	add	sp, #8
 8009b56:	bd80      	pop	{r7, pc}

08009b58 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009b58:	b580      	push	{r7, lr}
 8009b5a:	b084      	sub	sp, #16
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	60f8      	str	r0, [r7, #12]
 8009b60:	60b9      	str	r1, [r7, #8]
 8009b62:	603b      	str	r3, [r7, #0]
 8009b64:	1dfb      	adds	r3, r7, #7
 8009b66:	701a      	strb	r2, [r3, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009b68:	e050      	b.n	8009c0c <SPI_WaitFlagStateUntilTimeout+0xb4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009b6a:	683b      	ldr	r3, [r7, #0]
 8009b6c:	3301      	adds	r3, #1
 8009b6e:	d04d      	beq.n	8009c0c <SPI_WaitFlagStateUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8009b70:	f7fc fc7c 	bl	800646c <HAL_GetTick>
 8009b74:	0002      	movs	r2, r0
 8009b76:	69bb      	ldr	r3, [r7, #24]
 8009b78:	1ad3      	subs	r3, r2, r3
 8009b7a:	683a      	ldr	r2, [r7, #0]
 8009b7c:	429a      	cmp	r2, r3
 8009b7e:	d902      	bls.n	8009b86 <SPI_WaitFlagStateUntilTimeout+0x2e>
 8009b80:	683b      	ldr	r3, [r7, #0]
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d142      	bne.n	8009c0c <SPI_WaitFlagStateUntilTimeout+0xb4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	685a      	ldr	r2, [r3, #4]
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	21e0      	movs	r1, #224	; 0xe0
 8009b92:	438a      	bics	r2, r1
 8009b94:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	685a      	ldr	r2, [r3, #4]
 8009b9a:	2382      	movs	r3, #130	; 0x82
 8009b9c:	005b      	lsls	r3, r3, #1
 8009b9e:	429a      	cmp	r2, r3
 8009ba0:	d113      	bne.n	8009bca <SPI_WaitFlagStateUntilTimeout+0x72>
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	689a      	ldr	r2, [r3, #8]
 8009ba6:	2380      	movs	r3, #128	; 0x80
 8009ba8:	021b      	lsls	r3, r3, #8
 8009baa:	429a      	cmp	r2, r3
 8009bac:	d005      	beq.n	8009bba <SPI_WaitFlagStateUntilTimeout+0x62>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	689a      	ldr	r2, [r3, #8]
 8009bb2:	2380      	movs	r3, #128	; 0x80
 8009bb4:	00db      	lsls	r3, r3, #3
 8009bb6:	429a      	cmp	r2, r3
 8009bb8:	d107      	bne.n	8009bca <SPI_WaitFlagStateUntilTimeout+0x72>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	681a      	ldr	r2, [r3, #0]
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	2140      	movs	r1, #64	; 0x40
 8009bc6:	438a      	bics	r2, r1
 8009bc8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009bce:	2380      	movs	r3, #128	; 0x80
 8009bd0:	019b      	lsls	r3, r3, #6
 8009bd2:	429a      	cmp	r2, r3
 8009bd4:	d110      	bne.n	8009bf8 <SPI_WaitFlagStateUntilTimeout+0xa0>
        {
          SPI_RESET_CRC(hspi);
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	681a      	ldr	r2, [r3, #0]
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	4914      	ldr	r1, [pc, #80]	; (8009c34 <SPI_WaitFlagStateUntilTimeout+0xdc>)
 8009be2:	400a      	ands	r2, r1
 8009be4:	601a      	str	r2, [r3, #0]
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	681a      	ldr	r2, [r3, #0]
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	2180      	movs	r1, #128	; 0x80
 8009bf2:	0189      	lsls	r1, r1, #6
 8009bf4:	430a      	orrs	r2, r1
 8009bf6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	2251      	movs	r2, #81	; 0x51
 8009bfc:	2101      	movs	r1, #1
 8009bfe:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	2250      	movs	r2, #80	; 0x50
 8009c04:	2100      	movs	r1, #0
 8009c06:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8009c08:	2303      	movs	r3, #3
 8009c0a:	e00f      	b.n	8009c2c <SPI_WaitFlagStateUntilTimeout+0xd4>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	689b      	ldr	r3, [r3, #8]
 8009c12:	68ba      	ldr	r2, [r7, #8]
 8009c14:	4013      	ands	r3, r2
 8009c16:	68ba      	ldr	r2, [r7, #8]
 8009c18:	1ad3      	subs	r3, r2, r3
 8009c1a:	425a      	negs	r2, r3
 8009c1c:	4153      	adcs	r3, r2
 8009c1e:	b2db      	uxtb	r3, r3
 8009c20:	001a      	movs	r2, r3
 8009c22:	1dfb      	adds	r3, r7, #7
 8009c24:	781b      	ldrb	r3, [r3, #0]
 8009c26:	429a      	cmp	r2, r3
 8009c28:	d19f      	bne.n	8009b6a <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8009c2a:	2300      	movs	r3, #0
}
 8009c2c:	0018      	movs	r0, r3
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	b004      	add	sp, #16
 8009c32:	bd80      	pop	{r7, pc}
 8009c34:	ffffdfff 	.word	0xffffdfff

08009c38 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009c38:	b580      	push	{r7, lr}
 8009c3a:	b086      	sub	sp, #24
 8009c3c:	af02      	add	r7, sp, #8
 8009c3e:	60f8      	str	r0, [r7, #12]
 8009c40:	60b9      	str	r1, [r7, #8]
 8009c42:	607a      	str	r2, [r7, #4]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	685a      	ldr	r2, [r3, #4]
 8009c48:	2382      	movs	r3, #130	; 0x82
 8009c4a:	005b      	lsls	r3, r3, #1
 8009c4c:	429a      	cmp	r2, r3
 8009c4e:	d112      	bne.n	8009c76 <SPI_EndRxTxTransaction+0x3e>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009c50:	68ba      	ldr	r2, [r7, #8]
 8009c52:	68f8      	ldr	r0, [r7, #12]
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	9300      	str	r3, [sp, #0]
 8009c58:	0013      	movs	r3, r2
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	2180      	movs	r1, #128	; 0x80
 8009c5e:	f7ff ff7b 	bl	8009b58 <SPI_WaitFlagStateUntilTimeout>
 8009c62:	1e03      	subs	r3, r0, #0
 8009c64:	d020      	beq.n	8009ca8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c6a:	2220      	movs	r2, #32
 8009c6c:	431a      	orrs	r2, r3
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009c72:	2303      	movs	r3, #3
 8009c74:	e019      	b.n	8009caa <SPI_EndRxTxTransaction+0x72>
    }
  }
  else
  {
    /* Control RXNE flag in case of Full-Duplex transfer */
    if (hspi->State == HAL_SPI_STATE_BUSY_TX_RX)
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	2251      	movs	r2, #81	; 0x51
 8009c7a:	5c9b      	ldrb	r3, [r3, r2]
 8009c7c:	b2db      	uxtb	r3, r3
 8009c7e:	2b05      	cmp	r3, #5
 8009c80:	d112      	bne.n	8009ca8 <SPI_EndRxTxTransaction+0x70>
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009c82:	68ba      	ldr	r2, [r7, #8]
 8009c84:	68f8      	ldr	r0, [r7, #12]
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	9300      	str	r3, [sp, #0]
 8009c8a:	0013      	movs	r3, r2
 8009c8c:	2200      	movs	r2, #0
 8009c8e:	2101      	movs	r1, #1
 8009c90:	f7ff ff62 	bl	8009b58 <SPI_WaitFlagStateUntilTimeout>
 8009c94:	1e03      	subs	r3, r0, #0
 8009c96:	d007      	beq.n	8009ca8 <SPI_EndRxTxTransaction+0x70>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c9c:	2220      	movs	r2, #32
 8009c9e:	431a      	orrs	r2, r3
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8009ca4:	2303      	movs	r3, #3
 8009ca6:	e000      	b.n	8009caa <SPI_EndRxTxTransaction+0x72>
      }
    }
  }
  return HAL_OK;
 8009ca8:	2300      	movs	r3, #0
}
 8009caa:	0018      	movs	r0, r3
 8009cac:	46bd      	mov	sp, r7
 8009cae:	b004      	add	sp, #16
 8009cb0:	bd80      	pop	{r7, pc}
	...

08009cb4 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8009cb4:	b580      	push	{r7, lr}
 8009cb6:	b086      	sub	sp, #24
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8009cbc:	4b2d      	ldr	r3, [pc, #180]	; (8009d74 <SPI_CloseTx_ISR+0xc0>)
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	492d      	ldr	r1, [pc, #180]	; (8009d78 <SPI_CloseTx_ISR+0xc4>)
 8009cc2:	0018      	movs	r0, r3
 8009cc4:	f7f6 fa28 	bl	8000118 <__udivsi3>
 8009cc8:	0003      	movs	r3, r0
 8009cca:	001a      	movs	r2, r3
 8009ccc:	2364      	movs	r3, #100	; 0x64
 8009cce:	4353      	muls	r3, r2
 8009cd0:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009cd2:	f7fc fbcb 	bl	800646c <HAL_GetTick>
 8009cd6:	0003      	movs	r3, r0
 8009cd8:	617b      	str	r3, [r7, #20]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8009cda:	693b      	ldr	r3, [r7, #16]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d106      	bne.n	8009cee <SPI_CloseTx_ISR+0x3a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ce4:	2220      	movs	r2, #32
 8009ce6:	431a      	orrs	r2, r3
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009cec:	e008      	b.n	8009d00 <SPI_CloseTx_ISR+0x4c>
    }
    count--;
 8009cee:	693b      	ldr	r3, [r7, #16]
 8009cf0:	3b01      	subs	r3, #1
 8009cf2:	613b      	str	r3, [r7, #16]
  }
  while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	689b      	ldr	r3, [r3, #8]
 8009cfa:	2202      	movs	r2, #2
 8009cfc:	4013      	ands	r3, r2
 8009cfe:	d0ec      	beq.n	8009cda <SPI_CloseTx_ISR+0x26>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	685a      	ldr	r2, [r3, #4]
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	21a0      	movs	r1, #160	; 0xa0
 8009d0c:	438a      	bics	r2, r1
 8009d0e:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8009d10:	697a      	ldr	r2, [r7, #20]
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	2164      	movs	r1, #100	; 0x64
 8009d16:	0018      	movs	r0, r3
 8009d18:	f7ff ff8e 	bl	8009c38 <SPI_EndRxTxTransaction>
 8009d1c:	1e03      	subs	r3, r0, #0
 8009d1e:	d005      	beq.n	8009d2c <SPI_CloseTx_ISR+0x78>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d24:	2220      	movs	r2, #32
 8009d26:	431a      	orrs	r2, r3
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	689b      	ldr	r3, [r3, #8]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d10a      	bne.n	8009d4a <SPI_CloseTx_ISR+0x96>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009d34:	2300      	movs	r3, #0
 8009d36:	60fb      	str	r3, [r7, #12]
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	68db      	ldr	r3, [r3, #12]
 8009d3e:	60fb      	str	r3, [r7, #12]
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	689b      	ldr	r3, [r3, #8]
 8009d46:	60fb      	str	r3, [r7, #12]
 8009d48:	68fb      	ldr	r3, [r7, #12]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	2251      	movs	r2, #81	; 0x51
 8009d4e:	2101      	movs	r1, #1
 8009d50:	5499      	strb	r1, [r3, r2]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d004      	beq.n	8009d64 <SPI_CloseTx_ISR+0xb0>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	0018      	movs	r0, r3
 8009d5e:	f7ff fe8b 	bl	8009a78 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8009d62:	e003      	b.n	8009d6c <SPI_CloseTx_ISR+0xb8>
    HAL_SPI_TxCpltCallback(hspi);
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	0018      	movs	r0, r3
 8009d68:	f7f7 fd38 	bl	80017dc <HAL_SPI_TxCpltCallback>
}
 8009d6c:	46c0      	nop			; (mov r8, r8)
 8009d6e:	46bd      	mov	sp, r7
 8009d70:	b006      	add	sp, #24
 8009d72:	bd80      	pop	{r7, pc}
 8009d74:	20000010 	.word	0x20000010
 8009d78:	00005dc0 	.word	0x00005dc0

08009d7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009d7c:	b580      	push	{r7, lr}
 8009d7e:	b082      	sub	sp, #8
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d101      	bne.n	8009d8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009d8a:	2301      	movs	r3, #1
 8009d8c:	e01e      	b.n	8009dcc <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	2239      	movs	r2, #57	; 0x39
 8009d92:	5c9b      	ldrb	r3, [r3, r2]
 8009d94:	b2db      	uxtb	r3, r3
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d107      	bne.n	8009daa <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	2238      	movs	r2, #56	; 0x38
 8009d9e:	2100      	movs	r1, #0
 8009da0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	0018      	movs	r0, r3
 8009da6:	f7fa f9ef 	bl	8004188 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	2239      	movs	r2, #57	; 0x39
 8009dae:	2102      	movs	r1, #2
 8009db0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681a      	ldr	r2, [r3, #0]
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	3304      	adds	r3, #4
 8009dba:	0019      	movs	r1, r3
 8009dbc:	0010      	movs	r0, r2
 8009dbe:	f000 fc3f 	bl	800a640 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	2239      	movs	r2, #57	; 0x39
 8009dc6:	2101      	movs	r1, #1
 8009dc8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009dca:	2300      	movs	r3, #0
}
 8009dcc:	0018      	movs	r0, r3
 8009dce:	46bd      	mov	sp, r7
 8009dd0:	b002      	add	sp, #8
 8009dd2:	bd80      	pop	{r7, pc}

08009dd4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	b084      	sub	sp, #16
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	2239      	movs	r2, #57	; 0x39
 8009de0:	2102      	movs	r1, #2
 8009de2:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	689b      	ldr	r3, [r3, #8]
 8009dea:	2207      	movs	r2, #7
 8009dec:	4013      	ands	r3, r2
 8009dee:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	2b06      	cmp	r3, #6
 8009df4:	d007      	beq.n	8009e06 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	681a      	ldr	r2, [r3, #0]
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	2101      	movs	r1, #1
 8009e02:	430a      	orrs	r2, r1
 8009e04:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	2239      	movs	r2, #57	; 0x39
 8009e0a:	2101      	movs	r1, #1
 8009e0c:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8009e0e:	2300      	movs	r3, #0
}
 8009e10:	0018      	movs	r0, r3
 8009e12:	46bd      	mov	sp, r7
 8009e14:	b004      	add	sp, #16
 8009e16:	bd80      	pop	{r7, pc}

08009e18 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009e18:	b580      	push	{r7, lr}
 8009e1a:	b084      	sub	sp, #16
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	68da      	ldr	r2, [r3, #12]
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	2101      	movs	r1, #1
 8009e2c:	430a      	orrs	r2, r1
 8009e2e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	689b      	ldr	r3, [r3, #8]
 8009e36:	2207      	movs	r2, #7
 8009e38:	4013      	ands	r3, r2
 8009e3a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	2b06      	cmp	r3, #6
 8009e40:	d007      	beq.n	8009e52 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	681a      	ldr	r2, [r3, #0]
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	2101      	movs	r1, #1
 8009e4e:	430a      	orrs	r2, r1
 8009e50:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009e52:	2300      	movs	r3, #0
}
 8009e54:	0018      	movs	r0, r3
 8009e56:	46bd      	mov	sp, r7
 8009e58:	b004      	add	sp, #16
 8009e5a:	bd80      	pop	{r7, pc}

08009e5c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8009e5c:	b580      	push	{r7, lr}
 8009e5e:	b082      	sub	sp, #8
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	68da      	ldr	r2, [r3, #12]
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	2101      	movs	r1, #1
 8009e70:	438a      	bics	r2, r1
 8009e72:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	6a1b      	ldr	r3, [r3, #32]
 8009e7a:	4a08      	ldr	r2, [pc, #32]	; (8009e9c <HAL_TIM_Base_Stop_IT+0x40>)
 8009e7c:	4013      	ands	r3, r2
 8009e7e:	d107      	bne.n	8009e90 <HAL_TIM_Base_Stop_IT+0x34>
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	681a      	ldr	r2, [r3, #0]
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	2101      	movs	r1, #1
 8009e8c:	438a      	bics	r2, r1
 8009e8e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8009e90:	2300      	movs	r3, #0
}
 8009e92:	0018      	movs	r0, r3
 8009e94:	46bd      	mov	sp, r7
 8009e96:	b002      	add	sp, #8
 8009e98:	bd80      	pop	{r7, pc}
 8009e9a:	46c0      	nop			; (mov r8, r8)
 8009e9c:	00001111 	.word	0x00001111

08009ea0 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8009ea0:	b580      	push	{r7, lr}
 8009ea2:	b082      	sub	sp, #8
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d101      	bne.n	8009eb2 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8009eae:	2301      	movs	r3, #1
 8009eb0:	e01e      	b.n	8009ef0 <HAL_TIM_OC_Init+0x50>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	2239      	movs	r2, #57	; 0x39
 8009eb6:	5c9b      	ldrb	r3, [r3, r2]
 8009eb8:	b2db      	uxtb	r3, r3
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d107      	bne.n	8009ece <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	2238      	movs	r2, #56	; 0x38
 8009ec2:	2100      	movs	r1, #0
 8009ec4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	0018      	movs	r0, r3
 8009eca:	f000 f815 	bl	8009ef8 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	2239      	movs	r2, #57	; 0x39
 8009ed2:	2102      	movs	r1, #2
 8009ed4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681a      	ldr	r2, [r3, #0]
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	3304      	adds	r3, #4
 8009ede:	0019      	movs	r1, r3
 8009ee0:	0010      	movs	r0, r2
 8009ee2:	f000 fbad 	bl	800a640 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	2239      	movs	r2, #57	; 0x39
 8009eea:	2101      	movs	r1, #1
 8009eec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009eee:	2300      	movs	r3, #0
}
 8009ef0:	0018      	movs	r0, r3
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	b002      	add	sp, #8
 8009ef6:	bd80      	pop	{r7, pc}

08009ef8 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	b082      	sub	sp, #8
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8009f00:	46c0      	nop			; (mov r8, r8)
 8009f02:	46bd      	mov	sp, r7
 8009f04:	b002      	add	sp, #8
 8009f06:	bd80      	pop	{r7, pc}

08009f08 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009f08:	b580      	push	{r7, lr}
 8009f0a:	b084      	sub	sp, #16
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]
 8009f10:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8009f12:	683b      	ldr	r3, [r7, #0]
 8009f14:	2b04      	cmp	r3, #4
 8009f16:	d011      	beq.n	8009f3c <HAL_TIM_OC_Start_IT+0x34>
 8009f18:	d802      	bhi.n	8009f20 <HAL_TIM_OC_Start_IT+0x18>
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d005      	beq.n	8009f2a <HAL_TIM_OC_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
      break;
    }

    default:
      break;
 8009f1e:	e028      	b.n	8009f72 <HAL_TIM_OC_Start_IT+0x6a>
  switch (Channel)
 8009f20:	2b08      	cmp	r3, #8
 8009f22:	d014      	beq.n	8009f4e <HAL_TIM_OC_Start_IT+0x46>
 8009f24:	2b0c      	cmp	r3, #12
 8009f26:	d01b      	beq.n	8009f60 <HAL_TIM_OC_Start_IT+0x58>
      break;
 8009f28:	e023      	b.n	8009f72 <HAL_TIM_OC_Start_IT+0x6a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	68da      	ldr	r2, [r3, #12]
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	2102      	movs	r1, #2
 8009f36:	430a      	orrs	r2, r1
 8009f38:	60da      	str	r2, [r3, #12]
      break;
 8009f3a:	e01a      	b.n	8009f72 <HAL_TIM_OC_Start_IT+0x6a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	68da      	ldr	r2, [r3, #12]
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	2104      	movs	r1, #4
 8009f48:	430a      	orrs	r2, r1
 8009f4a:	60da      	str	r2, [r3, #12]
      break;
 8009f4c:	e011      	b.n	8009f72 <HAL_TIM_OC_Start_IT+0x6a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	68da      	ldr	r2, [r3, #12]
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	2108      	movs	r1, #8
 8009f5a:	430a      	orrs	r2, r1
 8009f5c:	60da      	str	r2, [r3, #12]
      break;
 8009f5e:	e008      	b.n	8009f72 <HAL_TIM_OC_Start_IT+0x6a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	68da      	ldr	r2, [r3, #12]
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	2110      	movs	r1, #16
 8009f6c:	430a      	orrs	r2, r1
 8009f6e:	60da      	str	r2, [r3, #12]
      break;
 8009f70:	46c0      	nop			; (mov r8, r8)
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	6839      	ldr	r1, [r7, #0]
 8009f78:	2201      	movs	r2, #1
 8009f7a:	0018      	movs	r0, r3
 8009f7c:	f000 fd5c 	bl	800aa38 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	689b      	ldr	r3, [r3, #8]
 8009f86:	2207      	movs	r2, #7
 8009f88:	4013      	ands	r3, r2
 8009f8a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	2b06      	cmp	r3, #6
 8009f90:	d007      	beq.n	8009fa2 <HAL_TIM_OC_Start_IT+0x9a>
  {
    __HAL_TIM_ENABLE(htim);
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	681a      	ldr	r2, [r3, #0]
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	2101      	movs	r1, #1
 8009f9e:	430a      	orrs	r2, r1
 8009fa0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009fa2:	2300      	movs	r3, #0
}
 8009fa4:	0018      	movs	r0, r3
 8009fa6:	46bd      	mov	sp, r7
 8009fa8:	b004      	add	sp, #16
 8009faa:	bd80      	pop	{r7, pc}

08009fac <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009fac:	b580      	push	{r7, lr}
 8009fae:	b082      	sub	sp, #8
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	6078      	str	r0, [r7, #4]
 8009fb4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8009fb6:	683b      	ldr	r3, [r7, #0]
 8009fb8:	2b04      	cmp	r3, #4
 8009fba:	d011      	beq.n	8009fe0 <HAL_TIM_OC_Stop_IT+0x34>
 8009fbc:	d802      	bhi.n	8009fc4 <HAL_TIM_OC_Stop_IT+0x18>
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d005      	beq.n	8009fce <HAL_TIM_OC_Stop_IT+0x22>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
      break;
    }

    default:
      break;
 8009fc2:	e028      	b.n	800a016 <HAL_TIM_OC_Stop_IT+0x6a>
  switch (Channel)
 8009fc4:	2b08      	cmp	r3, #8
 8009fc6:	d014      	beq.n	8009ff2 <HAL_TIM_OC_Stop_IT+0x46>
 8009fc8:	2b0c      	cmp	r3, #12
 8009fca:	d01b      	beq.n	800a004 <HAL_TIM_OC_Stop_IT+0x58>
      break;
 8009fcc:	e023      	b.n	800a016 <HAL_TIM_OC_Stop_IT+0x6a>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	68da      	ldr	r2, [r3, #12]
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	2102      	movs	r1, #2
 8009fda:	438a      	bics	r2, r1
 8009fdc:	60da      	str	r2, [r3, #12]
      break;
 8009fde:	e01a      	b.n	800a016 <HAL_TIM_OC_Stop_IT+0x6a>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	68da      	ldr	r2, [r3, #12]
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	2104      	movs	r1, #4
 8009fec:	438a      	bics	r2, r1
 8009fee:	60da      	str	r2, [r3, #12]
      break;
 8009ff0:	e011      	b.n	800a016 <HAL_TIM_OC_Stop_IT+0x6a>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	68da      	ldr	r2, [r3, #12]
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	2108      	movs	r1, #8
 8009ffe:	438a      	bics	r2, r1
 800a000:	60da      	str	r2, [r3, #12]
      break;
 800a002:	e008      	b.n	800a016 <HAL_TIM_OC_Stop_IT+0x6a>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	68da      	ldr	r2, [r3, #12]
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	2110      	movs	r1, #16
 800a010:	438a      	bics	r2, r1
 800a012:	60da      	str	r2, [r3, #12]
      break;
 800a014:	46c0      	nop			; (mov r8, r8)
  }

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	6839      	ldr	r1, [r7, #0]
 800a01c:	2200      	movs	r2, #0
 800a01e:	0018      	movs	r0, r3
 800a020:	f000 fd0a 	bl	800aa38 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	6a1b      	ldr	r3, [r3, #32]
 800a02a:	4a08      	ldr	r2, [pc, #32]	; (800a04c <HAL_TIM_OC_Stop_IT+0xa0>)
 800a02c:	4013      	ands	r3, r2
 800a02e:	d107      	bne.n	800a040 <HAL_TIM_OC_Stop_IT+0x94>
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	681a      	ldr	r2, [r3, #0]
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	2101      	movs	r1, #1
 800a03c:	438a      	bics	r2, r1
 800a03e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800a040:	2300      	movs	r3, #0
}
 800a042:	0018      	movs	r0, r3
 800a044:	46bd      	mov	sp, r7
 800a046:	b002      	add	sp, #8
 800a048:	bd80      	pop	{r7, pc}
 800a04a:	46c0      	nop			; (mov r8, r8)
 800a04c:	00001111 	.word	0x00001111

0800a050 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a050:	b580      	push	{r7, lr}
 800a052:	b082      	sub	sp, #8
 800a054:	af00      	add	r7, sp, #0
 800a056:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d101      	bne.n	800a062 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a05e:	2301      	movs	r3, #1
 800a060:	e01e      	b.n	800a0a0 <HAL_TIM_PWM_Init+0x50>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	2239      	movs	r2, #57	; 0x39
 800a066:	5c9b      	ldrb	r3, [r3, r2]
 800a068:	b2db      	uxtb	r3, r3
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d107      	bne.n	800a07e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	2238      	movs	r2, #56	; 0x38
 800a072:	2100      	movs	r1, #0
 800a074:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	0018      	movs	r0, r3
 800a07a:	f000 f815 	bl	800a0a8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	2239      	movs	r2, #57	; 0x39
 800a082:	2102      	movs	r1, #2
 800a084:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681a      	ldr	r2, [r3, #0]
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	3304      	adds	r3, #4
 800a08e:	0019      	movs	r1, r3
 800a090:	0010      	movs	r0, r2
 800a092:	f000 fad5 	bl	800a640 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	2239      	movs	r2, #57	; 0x39
 800a09a:	2101      	movs	r1, #1
 800a09c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a09e:	2300      	movs	r3, #0
}
 800a0a0:	0018      	movs	r0, r3
 800a0a2:	46bd      	mov	sp, r7
 800a0a4:	b002      	add	sp, #8
 800a0a6:	bd80      	pop	{r7, pc}

0800a0a8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a0a8:	b580      	push	{r7, lr}
 800a0aa:	b082      	sub	sp, #8
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a0b0:	46c0      	nop			; (mov r8, r8)
 800a0b2:	46bd      	mov	sp, r7
 800a0b4:	b002      	add	sp, #8
 800a0b6:	bd80      	pop	{r7, pc}

0800a0b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a0b8:	b580      	push	{r7, lr}
 800a0ba:	b082      	sub	sp, #8
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	691b      	ldr	r3, [r3, #16]
 800a0c6:	2202      	movs	r2, #2
 800a0c8:	4013      	ands	r3, r2
 800a0ca:	2b02      	cmp	r3, #2
 800a0cc:	d124      	bne.n	800a118 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	68db      	ldr	r3, [r3, #12]
 800a0d4:	2202      	movs	r2, #2
 800a0d6:	4013      	ands	r3, r2
 800a0d8:	2b02      	cmp	r3, #2
 800a0da:	d11d      	bne.n	800a118 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	2203      	movs	r2, #3
 800a0e2:	4252      	negs	r2, r2
 800a0e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	2201      	movs	r2, #1
 800a0ea:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	699b      	ldr	r3, [r3, #24]
 800a0f2:	2203      	movs	r2, #3
 800a0f4:	4013      	ands	r3, r2
 800a0f6:	d004      	beq.n	800a102 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	0018      	movs	r0, r3
 800a0fc:	f000 fa88 	bl	800a610 <HAL_TIM_IC_CaptureCallback>
 800a100:	e007      	b.n	800a112 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	0018      	movs	r0, r3
 800a106:	f7fa fa19 	bl	800453c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	0018      	movs	r0, r3
 800a10e:	f000 fa87 	bl	800a620 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	2200      	movs	r2, #0
 800a116:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	691b      	ldr	r3, [r3, #16]
 800a11e:	2204      	movs	r2, #4
 800a120:	4013      	ands	r3, r2
 800a122:	2b04      	cmp	r3, #4
 800a124:	d125      	bne.n	800a172 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	68db      	ldr	r3, [r3, #12]
 800a12c:	2204      	movs	r2, #4
 800a12e:	4013      	ands	r3, r2
 800a130:	2b04      	cmp	r3, #4
 800a132:	d11e      	bne.n	800a172 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	2205      	movs	r2, #5
 800a13a:	4252      	negs	r2, r2
 800a13c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	2202      	movs	r2, #2
 800a142:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	699a      	ldr	r2, [r3, #24]
 800a14a:	23c0      	movs	r3, #192	; 0xc0
 800a14c:	009b      	lsls	r3, r3, #2
 800a14e:	4013      	ands	r3, r2
 800a150:	d004      	beq.n	800a15c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	0018      	movs	r0, r3
 800a156:	f000 fa5b 	bl	800a610 <HAL_TIM_IC_CaptureCallback>
 800a15a:	e007      	b.n	800a16c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	0018      	movs	r0, r3
 800a160:	f7fa f9ec 	bl	800453c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	0018      	movs	r0, r3
 800a168:	f000 fa5a 	bl	800a620 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	2200      	movs	r2, #0
 800a170:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	691b      	ldr	r3, [r3, #16]
 800a178:	2208      	movs	r2, #8
 800a17a:	4013      	ands	r3, r2
 800a17c:	2b08      	cmp	r3, #8
 800a17e:	d124      	bne.n	800a1ca <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	68db      	ldr	r3, [r3, #12]
 800a186:	2208      	movs	r2, #8
 800a188:	4013      	ands	r3, r2
 800a18a:	2b08      	cmp	r3, #8
 800a18c:	d11d      	bne.n	800a1ca <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	2209      	movs	r2, #9
 800a194:	4252      	negs	r2, r2
 800a196:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	2204      	movs	r2, #4
 800a19c:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	69db      	ldr	r3, [r3, #28]
 800a1a4:	2203      	movs	r2, #3
 800a1a6:	4013      	ands	r3, r2
 800a1a8:	d004      	beq.n	800a1b4 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	0018      	movs	r0, r3
 800a1ae:	f000 fa2f 	bl	800a610 <HAL_TIM_IC_CaptureCallback>
 800a1b2:	e007      	b.n	800a1c4 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	0018      	movs	r0, r3
 800a1b8:	f7fa f9c0 	bl	800453c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	0018      	movs	r0, r3
 800a1c0:	f000 fa2e 	bl	800a620 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	2200      	movs	r2, #0
 800a1c8:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	691b      	ldr	r3, [r3, #16]
 800a1d0:	2210      	movs	r2, #16
 800a1d2:	4013      	ands	r3, r2
 800a1d4:	2b10      	cmp	r3, #16
 800a1d6:	d125      	bne.n	800a224 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	68db      	ldr	r3, [r3, #12]
 800a1de:	2210      	movs	r2, #16
 800a1e0:	4013      	ands	r3, r2
 800a1e2:	2b10      	cmp	r3, #16
 800a1e4:	d11e      	bne.n	800a224 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	2211      	movs	r2, #17
 800a1ec:	4252      	negs	r2, r2
 800a1ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	2208      	movs	r2, #8
 800a1f4:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	69da      	ldr	r2, [r3, #28]
 800a1fc:	23c0      	movs	r3, #192	; 0xc0
 800a1fe:	009b      	lsls	r3, r3, #2
 800a200:	4013      	ands	r3, r2
 800a202:	d004      	beq.n	800a20e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	0018      	movs	r0, r3
 800a208:	f000 fa02 	bl	800a610 <HAL_TIM_IC_CaptureCallback>
 800a20c:	e007      	b.n	800a21e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	0018      	movs	r0, r3
 800a212:	f7fa f993 	bl	800453c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	0018      	movs	r0, r3
 800a21a:	f000 fa01 	bl	800a620 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	2200      	movs	r2, #0
 800a222:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	691b      	ldr	r3, [r3, #16]
 800a22a:	2201      	movs	r2, #1
 800a22c:	4013      	ands	r3, r2
 800a22e:	2b01      	cmp	r3, #1
 800a230:	d10f      	bne.n	800a252 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	68db      	ldr	r3, [r3, #12]
 800a238:	2201      	movs	r2, #1
 800a23a:	4013      	ands	r3, r2
 800a23c:	2b01      	cmp	r3, #1
 800a23e:	d108      	bne.n	800a252 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	2202      	movs	r2, #2
 800a246:	4252      	negs	r2, r2
 800a248:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	0018      	movs	r0, r3
 800a24e:	f7fa f937 	bl	80044c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	691b      	ldr	r3, [r3, #16]
 800a258:	2240      	movs	r2, #64	; 0x40
 800a25a:	4013      	ands	r3, r2
 800a25c:	2b40      	cmp	r3, #64	; 0x40
 800a25e:	d10f      	bne.n	800a280 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	68db      	ldr	r3, [r3, #12]
 800a266:	2240      	movs	r2, #64	; 0x40
 800a268:	4013      	ands	r3, r2
 800a26a:	2b40      	cmp	r3, #64	; 0x40
 800a26c:	d108      	bne.n	800a280 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	2241      	movs	r2, #65	; 0x41
 800a274:	4252      	negs	r2, r2
 800a276:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	0018      	movs	r0, r3
 800a27c:	f000 f9d8 	bl	800a630 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a280:	46c0      	nop			; (mov r8, r8)
 800a282:	46bd      	mov	sp, r7
 800a284:	b002      	add	sp, #8
 800a286:	bd80      	pop	{r7, pc}

0800a288 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800a288:	b580      	push	{r7, lr}
 800a28a:	b084      	sub	sp, #16
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	60f8      	str	r0, [r7, #12]
 800a290:	60b9      	str	r1, [r7, #8]
 800a292:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	2238      	movs	r2, #56	; 0x38
 800a298:	5c9b      	ldrb	r3, [r3, r2]
 800a29a:	2b01      	cmp	r3, #1
 800a29c:	d101      	bne.n	800a2a2 <HAL_TIM_OC_ConfigChannel+0x1a>
 800a29e:	2302      	movs	r3, #2
 800a2a0:	e03c      	b.n	800a31c <HAL_TIM_OC_ConfigChannel+0x94>
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	2238      	movs	r2, #56	; 0x38
 800a2a6:	2101      	movs	r1, #1
 800a2a8:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	2239      	movs	r2, #57	; 0x39
 800a2ae:	2102      	movs	r1, #2
 800a2b0:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	2b04      	cmp	r3, #4
 800a2b6:	d010      	beq.n	800a2da <HAL_TIM_OC_ConfigChannel+0x52>
 800a2b8:	d802      	bhi.n	800a2c0 <HAL_TIM_OC_ConfigChannel+0x38>
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d005      	beq.n	800a2ca <HAL_TIM_OC_ConfigChannel+0x42>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
      break;
    }

    default:
      break;
 800a2be:	e024      	b.n	800a30a <HAL_TIM_OC_ConfigChannel+0x82>
  switch (Channel)
 800a2c0:	2b08      	cmp	r3, #8
 800a2c2:	d012      	beq.n	800a2ea <HAL_TIM_OC_ConfigChannel+0x62>
 800a2c4:	2b0c      	cmp	r3, #12
 800a2c6:	d018      	beq.n	800a2fa <HAL_TIM_OC_ConfigChannel+0x72>
      break;
 800a2c8:	e01f      	b.n	800a30a <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	68ba      	ldr	r2, [r7, #8]
 800a2d0:	0011      	movs	r1, r2
 800a2d2:	0018      	movs	r0, r3
 800a2d4:	f000 fa12 	bl	800a6fc <TIM_OC1_SetConfig>
      break;
 800a2d8:	e017      	b.n	800a30a <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	68ba      	ldr	r2, [r7, #8]
 800a2e0:	0011      	movs	r1, r2
 800a2e2:	0018      	movs	r0, r3
 800a2e4:	f000 fa46 	bl	800a774 <TIM_OC2_SetConfig>
      break;
 800a2e8:	e00f      	b.n	800a30a <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	68ba      	ldr	r2, [r7, #8]
 800a2f0:	0011      	movs	r1, r2
 800a2f2:	0018      	movs	r0, r3
 800a2f4:	f000 fa80 	bl	800a7f8 <TIM_OC3_SetConfig>
      break;
 800a2f8:	e007      	b.n	800a30a <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	68ba      	ldr	r2, [r7, #8]
 800a300:	0011      	movs	r1, r2
 800a302:	0018      	movs	r0, r3
 800a304:	f000 fab8 	bl	800a878 <TIM_OC4_SetConfig>
      break;
 800a308:	46c0      	nop			; (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	2239      	movs	r2, #57	; 0x39
 800a30e:	2101      	movs	r1, #1
 800a310:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	2238      	movs	r2, #56	; 0x38
 800a316:	2100      	movs	r1, #0
 800a318:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a31a:	2300      	movs	r3, #0
}
 800a31c:	0018      	movs	r0, r3
 800a31e:	46bd      	mov	sp, r7
 800a320:	b004      	add	sp, #16
 800a322:	bd80      	pop	{r7, pc}

0800a324 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a324:	b580      	push	{r7, lr}
 800a326:	b084      	sub	sp, #16
 800a328:	af00      	add	r7, sp, #0
 800a32a:	60f8      	str	r0, [r7, #12]
 800a32c:	60b9      	str	r1, [r7, #8]
 800a32e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	2238      	movs	r2, #56	; 0x38
 800a334:	5c9b      	ldrb	r3, [r3, r2]
 800a336:	2b01      	cmp	r3, #1
 800a338:	d101      	bne.n	800a33e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800a33a:	2302      	movs	r3, #2
 800a33c:	e0a4      	b.n	800a488 <HAL_TIM_PWM_ConfigChannel+0x164>
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	2238      	movs	r2, #56	; 0x38
 800a342:	2101      	movs	r1, #1
 800a344:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	2239      	movs	r2, #57	; 0x39
 800a34a:	2102      	movs	r1, #2
 800a34c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	2b04      	cmp	r3, #4
 800a352:	d029      	beq.n	800a3a8 <HAL_TIM_PWM_ConfigChannel+0x84>
 800a354:	d802      	bhi.n	800a35c <HAL_TIM_PWM_ConfigChannel+0x38>
 800a356:	2b00      	cmp	r3, #0
 800a358:	d005      	beq.n	800a366 <HAL_TIM_PWM_ConfigChannel+0x42>
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
      break;
    }

    default:
      break;
 800a35a:	e08c      	b.n	800a476 <HAL_TIM_PWM_ConfigChannel+0x152>
  switch (Channel)
 800a35c:	2b08      	cmp	r3, #8
 800a35e:	d046      	beq.n	800a3ee <HAL_TIM_PWM_ConfigChannel+0xca>
 800a360:	2b0c      	cmp	r3, #12
 800a362:	d065      	beq.n	800a430 <HAL_TIM_PWM_ConfigChannel+0x10c>
      break;
 800a364:	e087      	b.n	800a476 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	68ba      	ldr	r2, [r7, #8]
 800a36c:	0011      	movs	r1, r2
 800a36e:	0018      	movs	r0, r3
 800a370:	f000 f9c4 	bl	800a6fc <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	699a      	ldr	r2, [r3, #24]
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	2108      	movs	r1, #8
 800a380:	430a      	orrs	r2, r1
 800a382:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	699a      	ldr	r2, [r3, #24]
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	2104      	movs	r1, #4
 800a390:	438a      	bics	r2, r1
 800a392:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	6999      	ldr	r1, [r3, #24]
 800a39a:	68bb      	ldr	r3, [r7, #8]
 800a39c:	68da      	ldr	r2, [r3, #12]
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	430a      	orrs	r2, r1
 800a3a4:	619a      	str	r2, [r3, #24]
      break;
 800a3a6:	e066      	b.n	800a476 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	68ba      	ldr	r2, [r7, #8]
 800a3ae:	0011      	movs	r1, r2
 800a3b0:	0018      	movs	r0, r3
 800a3b2:	f000 f9df 	bl	800a774 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	699a      	ldr	r2, [r3, #24]
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	2180      	movs	r1, #128	; 0x80
 800a3c2:	0109      	lsls	r1, r1, #4
 800a3c4:	430a      	orrs	r2, r1
 800a3c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	699a      	ldr	r2, [r3, #24]
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	492f      	ldr	r1, [pc, #188]	; (800a490 <HAL_TIM_PWM_ConfigChannel+0x16c>)
 800a3d4:	400a      	ands	r2, r1
 800a3d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	6999      	ldr	r1, [r3, #24]
 800a3de:	68bb      	ldr	r3, [r7, #8]
 800a3e0:	68db      	ldr	r3, [r3, #12]
 800a3e2:	021a      	lsls	r2, r3, #8
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	430a      	orrs	r2, r1
 800a3ea:	619a      	str	r2, [r3, #24]
      break;
 800a3ec:	e043      	b.n	800a476 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	68ba      	ldr	r2, [r7, #8]
 800a3f4:	0011      	movs	r1, r2
 800a3f6:	0018      	movs	r0, r3
 800a3f8:	f000 f9fe 	bl	800a7f8 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	69da      	ldr	r2, [r3, #28]
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	2108      	movs	r1, #8
 800a408:	430a      	orrs	r2, r1
 800a40a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	69da      	ldr	r2, [r3, #28]
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	2104      	movs	r1, #4
 800a418:	438a      	bics	r2, r1
 800a41a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	69d9      	ldr	r1, [r3, #28]
 800a422:	68bb      	ldr	r3, [r7, #8]
 800a424:	68da      	ldr	r2, [r3, #12]
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	430a      	orrs	r2, r1
 800a42c:	61da      	str	r2, [r3, #28]
      break;
 800a42e:	e022      	b.n	800a476 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	68ba      	ldr	r2, [r7, #8]
 800a436:	0011      	movs	r1, r2
 800a438:	0018      	movs	r0, r3
 800a43a:	f000 fa1d 	bl	800a878 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	69da      	ldr	r2, [r3, #28]
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	2180      	movs	r1, #128	; 0x80
 800a44a:	0109      	lsls	r1, r1, #4
 800a44c:	430a      	orrs	r2, r1
 800a44e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	69da      	ldr	r2, [r3, #28]
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	490d      	ldr	r1, [pc, #52]	; (800a490 <HAL_TIM_PWM_ConfigChannel+0x16c>)
 800a45c:	400a      	ands	r2, r1
 800a45e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	69d9      	ldr	r1, [r3, #28]
 800a466:	68bb      	ldr	r3, [r7, #8]
 800a468:	68db      	ldr	r3, [r3, #12]
 800a46a:	021a      	lsls	r2, r3, #8
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	430a      	orrs	r2, r1
 800a472:	61da      	str	r2, [r3, #28]
      break;
 800a474:	46c0      	nop			; (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	2239      	movs	r2, #57	; 0x39
 800a47a:	2101      	movs	r1, #1
 800a47c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	2238      	movs	r2, #56	; 0x38
 800a482:	2100      	movs	r1, #0
 800a484:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a486:	2300      	movs	r3, #0
}
 800a488:	0018      	movs	r0, r3
 800a48a:	46bd      	mov	sp, r7
 800a48c:	b004      	add	sp, #16
 800a48e:	bd80      	pop	{r7, pc}
 800a490:	fffffbff 	.word	0xfffffbff

0800a494 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a494:	b580      	push	{r7, lr}
 800a496:	b084      	sub	sp, #16
 800a498:	af00      	add	r7, sp, #0
 800a49a:	6078      	str	r0, [r7, #4]
 800a49c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	2238      	movs	r2, #56	; 0x38
 800a4a2:	5c9b      	ldrb	r3, [r3, r2]
 800a4a4:	2b01      	cmp	r3, #1
 800a4a6:	d101      	bne.n	800a4ac <HAL_TIM_ConfigClockSource+0x18>
 800a4a8:	2302      	movs	r3, #2
 800a4aa:	e0ab      	b.n	800a604 <HAL_TIM_ConfigClockSource+0x170>
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	2238      	movs	r2, #56	; 0x38
 800a4b0:	2101      	movs	r1, #1
 800a4b2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	2239      	movs	r2, #57	; 0x39
 800a4b8:	2102      	movs	r1, #2
 800a4ba:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	689b      	ldr	r3, [r3, #8]
 800a4c2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	2277      	movs	r2, #119	; 0x77
 800a4c8:	4393      	bics	r3, r2
 800a4ca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	4a4f      	ldr	r2, [pc, #316]	; (800a60c <HAL_TIM_ConfigClockSource+0x178>)
 800a4d0:	4013      	ands	r3, r2
 800a4d2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	68fa      	ldr	r2, [r7, #12]
 800a4da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a4dc:	683b      	ldr	r3, [r7, #0]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	2b40      	cmp	r3, #64	; 0x40
 800a4e2:	d100      	bne.n	800a4e6 <HAL_TIM_ConfigClockSource+0x52>
 800a4e4:	e06b      	b.n	800a5be <HAL_TIM_ConfigClockSource+0x12a>
 800a4e6:	d80e      	bhi.n	800a506 <HAL_TIM_ConfigClockSource+0x72>
 800a4e8:	2b10      	cmp	r3, #16
 800a4ea:	d100      	bne.n	800a4ee <HAL_TIM_ConfigClockSource+0x5a>
 800a4ec:	e077      	b.n	800a5de <HAL_TIM_ConfigClockSource+0x14a>
 800a4ee:	d803      	bhi.n	800a4f8 <HAL_TIM_ConfigClockSource+0x64>
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d100      	bne.n	800a4f6 <HAL_TIM_ConfigClockSource+0x62>
 800a4f4:	e073      	b.n	800a5de <HAL_TIM_ConfigClockSource+0x14a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800a4f6:	e07c      	b.n	800a5f2 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 800a4f8:	2b20      	cmp	r3, #32
 800a4fa:	d100      	bne.n	800a4fe <HAL_TIM_ConfigClockSource+0x6a>
 800a4fc:	e06f      	b.n	800a5de <HAL_TIM_ConfigClockSource+0x14a>
 800a4fe:	2b30      	cmp	r3, #48	; 0x30
 800a500:	d100      	bne.n	800a504 <HAL_TIM_ConfigClockSource+0x70>
 800a502:	e06c      	b.n	800a5de <HAL_TIM_ConfigClockSource+0x14a>
      break;
 800a504:	e075      	b.n	800a5f2 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 800a506:	2b70      	cmp	r3, #112	; 0x70
 800a508:	d00e      	beq.n	800a528 <HAL_TIM_ConfigClockSource+0x94>
 800a50a:	d804      	bhi.n	800a516 <HAL_TIM_ConfigClockSource+0x82>
 800a50c:	2b50      	cmp	r3, #80	; 0x50
 800a50e:	d036      	beq.n	800a57e <HAL_TIM_ConfigClockSource+0xea>
 800a510:	2b60      	cmp	r3, #96	; 0x60
 800a512:	d044      	beq.n	800a59e <HAL_TIM_ConfigClockSource+0x10a>
      break;
 800a514:	e06d      	b.n	800a5f2 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 800a516:	2280      	movs	r2, #128	; 0x80
 800a518:	0152      	lsls	r2, r2, #5
 800a51a:	4293      	cmp	r3, r2
 800a51c:	d068      	beq.n	800a5f0 <HAL_TIM_ConfigClockSource+0x15c>
 800a51e:	2280      	movs	r2, #128	; 0x80
 800a520:	0192      	lsls	r2, r2, #6
 800a522:	4293      	cmp	r3, r2
 800a524:	d017      	beq.n	800a556 <HAL_TIM_ConfigClockSource+0xc2>
      break;
 800a526:	e064      	b.n	800a5f2 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	6818      	ldr	r0, [r3, #0]
 800a52c:	683b      	ldr	r3, [r7, #0]
 800a52e:	6899      	ldr	r1, [r3, #8]
 800a530:	683b      	ldr	r3, [r7, #0]
 800a532:	685a      	ldr	r2, [r3, #4]
 800a534:	683b      	ldr	r3, [r7, #0]
 800a536:	68db      	ldr	r3, [r3, #12]
 800a538:	f000 fa5e 	bl	800a9f8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	689b      	ldr	r3, [r3, #8]
 800a542:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	2277      	movs	r2, #119	; 0x77
 800a548:	4313      	orrs	r3, r2
 800a54a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	68fa      	ldr	r2, [r7, #12]
 800a552:	609a      	str	r2, [r3, #8]
      break;
 800a554:	e04d      	b.n	800a5f2 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	6818      	ldr	r0, [r3, #0]
 800a55a:	683b      	ldr	r3, [r7, #0]
 800a55c:	6899      	ldr	r1, [r3, #8]
 800a55e:	683b      	ldr	r3, [r7, #0]
 800a560:	685a      	ldr	r2, [r3, #4]
 800a562:	683b      	ldr	r3, [r7, #0]
 800a564:	68db      	ldr	r3, [r3, #12]
 800a566:	f000 fa47 	bl	800a9f8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	689a      	ldr	r2, [r3, #8]
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	2180      	movs	r1, #128	; 0x80
 800a576:	01c9      	lsls	r1, r1, #7
 800a578:	430a      	orrs	r2, r1
 800a57a:	609a      	str	r2, [r3, #8]
      break;
 800a57c:	e039      	b.n	800a5f2 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	6818      	ldr	r0, [r3, #0]
 800a582:	683b      	ldr	r3, [r7, #0]
 800a584:	6859      	ldr	r1, [r3, #4]
 800a586:	683b      	ldr	r3, [r7, #0]
 800a588:	68db      	ldr	r3, [r3, #12]
 800a58a:	001a      	movs	r2, r3
 800a58c:	f000 f9ba 	bl	800a904 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	2150      	movs	r1, #80	; 0x50
 800a596:	0018      	movs	r0, r3
 800a598:	f000 fa14 	bl	800a9c4 <TIM_ITRx_SetConfig>
      break;
 800a59c:	e029      	b.n	800a5f2 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	6818      	ldr	r0, [r3, #0]
 800a5a2:	683b      	ldr	r3, [r7, #0]
 800a5a4:	6859      	ldr	r1, [r3, #4]
 800a5a6:	683b      	ldr	r3, [r7, #0]
 800a5a8:	68db      	ldr	r3, [r3, #12]
 800a5aa:	001a      	movs	r2, r3
 800a5ac:	f000 f9d8 	bl	800a960 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	2160      	movs	r1, #96	; 0x60
 800a5b6:	0018      	movs	r0, r3
 800a5b8:	f000 fa04 	bl	800a9c4 <TIM_ITRx_SetConfig>
      break;
 800a5bc:	e019      	b.n	800a5f2 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	6818      	ldr	r0, [r3, #0]
 800a5c2:	683b      	ldr	r3, [r7, #0]
 800a5c4:	6859      	ldr	r1, [r3, #4]
 800a5c6:	683b      	ldr	r3, [r7, #0]
 800a5c8:	68db      	ldr	r3, [r3, #12]
 800a5ca:	001a      	movs	r2, r3
 800a5cc:	f000 f99a 	bl	800a904 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	2140      	movs	r1, #64	; 0x40
 800a5d6:	0018      	movs	r0, r3
 800a5d8:	f000 f9f4 	bl	800a9c4 <TIM_ITRx_SetConfig>
      break;
 800a5dc:	e009      	b.n	800a5f2 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	681a      	ldr	r2, [r3, #0]
 800a5e2:	683b      	ldr	r3, [r7, #0]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	0019      	movs	r1, r3
 800a5e8:	0010      	movs	r0, r2
 800a5ea:	f000 f9eb 	bl	800a9c4 <TIM_ITRx_SetConfig>
      break;
 800a5ee:	e000      	b.n	800a5f2 <HAL_TIM_ConfigClockSource+0x15e>
      break;
 800a5f0:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	2239      	movs	r2, #57	; 0x39
 800a5f6:	2101      	movs	r1, #1
 800a5f8:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	2238      	movs	r2, #56	; 0x38
 800a5fe:	2100      	movs	r1, #0
 800a600:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a602:	2300      	movs	r3, #0
}
 800a604:	0018      	movs	r0, r3
 800a606:	46bd      	mov	sp, r7
 800a608:	b004      	add	sp, #16
 800a60a:	bd80      	pop	{r7, pc}
 800a60c:	ffff00ff 	.word	0xffff00ff

0800a610 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a610:	b580      	push	{r7, lr}
 800a612:	b082      	sub	sp, #8
 800a614:	af00      	add	r7, sp, #0
 800a616:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a618:	46c0      	nop			; (mov r8, r8)
 800a61a:	46bd      	mov	sp, r7
 800a61c:	b002      	add	sp, #8
 800a61e:	bd80      	pop	{r7, pc}

0800a620 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a620:	b580      	push	{r7, lr}
 800a622:	b082      	sub	sp, #8
 800a624:	af00      	add	r7, sp, #0
 800a626:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a628:	46c0      	nop			; (mov r8, r8)
 800a62a:	46bd      	mov	sp, r7
 800a62c:	b002      	add	sp, #8
 800a62e:	bd80      	pop	{r7, pc}

0800a630 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a630:	b580      	push	{r7, lr}
 800a632:	b082      	sub	sp, #8
 800a634:	af00      	add	r7, sp, #0
 800a636:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a638:	46c0      	nop			; (mov r8, r8)
 800a63a:	46bd      	mov	sp, r7
 800a63c:	b002      	add	sp, #8
 800a63e:	bd80      	pop	{r7, pc}

0800a640 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a640:	b580      	push	{r7, lr}
 800a642:	b084      	sub	sp, #16
 800a644:	af00      	add	r7, sp, #0
 800a646:	6078      	str	r0, [r7, #4]
 800a648:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a650:	687a      	ldr	r2, [r7, #4]
 800a652:	2380      	movs	r3, #128	; 0x80
 800a654:	05db      	lsls	r3, r3, #23
 800a656:	429a      	cmp	r2, r3
 800a658:	d00b      	beq.n	800a672 <TIM_Base_SetConfig+0x32>
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	4a23      	ldr	r2, [pc, #140]	; (800a6ec <TIM_Base_SetConfig+0xac>)
 800a65e:	4293      	cmp	r3, r2
 800a660:	d007      	beq.n	800a672 <TIM_Base_SetConfig+0x32>
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	4a22      	ldr	r2, [pc, #136]	; (800a6f0 <TIM_Base_SetConfig+0xb0>)
 800a666:	4293      	cmp	r3, r2
 800a668:	d003      	beq.n	800a672 <TIM_Base_SetConfig+0x32>
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	4a21      	ldr	r2, [pc, #132]	; (800a6f4 <TIM_Base_SetConfig+0xb4>)
 800a66e:	4293      	cmp	r3, r2
 800a670:	d108      	bne.n	800a684 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	2270      	movs	r2, #112	; 0x70
 800a676:	4393      	bics	r3, r2
 800a678:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a67a:	683b      	ldr	r3, [r7, #0]
 800a67c:	685b      	ldr	r3, [r3, #4]
 800a67e:	68fa      	ldr	r2, [r7, #12]
 800a680:	4313      	orrs	r3, r2
 800a682:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a684:	687a      	ldr	r2, [r7, #4]
 800a686:	2380      	movs	r3, #128	; 0x80
 800a688:	05db      	lsls	r3, r3, #23
 800a68a:	429a      	cmp	r2, r3
 800a68c:	d00b      	beq.n	800a6a6 <TIM_Base_SetConfig+0x66>
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	4a16      	ldr	r2, [pc, #88]	; (800a6ec <TIM_Base_SetConfig+0xac>)
 800a692:	4293      	cmp	r3, r2
 800a694:	d007      	beq.n	800a6a6 <TIM_Base_SetConfig+0x66>
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	4a15      	ldr	r2, [pc, #84]	; (800a6f0 <TIM_Base_SetConfig+0xb0>)
 800a69a:	4293      	cmp	r3, r2
 800a69c:	d003      	beq.n	800a6a6 <TIM_Base_SetConfig+0x66>
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	4a14      	ldr	r2, [pc, #80]	; (800a6f4 <TIM_Base_SetConfig+0xb4>)
 800a6a2:	4293      	cmp	r3, r2
 800a6a4:	d108      	bne.n	800a6b8 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	4a13      	ldr	r2, [pc, #76]	; (800a6f8 <TIM_Base_SetConfig+0xb8>)
 800a6aa:	4013      	ands	r3, r2
 800a6ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a6ae:	683b      	ldr	r3, [r7, #0]
 800a6b0:	68db      	ldr	r3, [r3, #12]
 800a6b2:	68fa      	ldr	r2, [r7, #12]
 800a6b4:	4313      	orrs	r3, r2
 800a6b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	2280      	movs	r2, #128	; 0x80
 800a6bc:	4393      	bics	r3, r2
 800a6be:	001a      	movs	r2, r3
 800a6c0:	683b      	ldr	r3, [r7, #0]
 800a6c2:	691b      	ldr	r3, [r3, #16]
 800a6c4:	4313      	orrs	r3, r2
 800a6c6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	68fa      	ldr	r2, [r7, #12]
 800a6cc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a6ce:	683b      	ldr	r3, [r7, #0]
 800a6d0:	689a      	ldr	r2, [r3, #8]
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a6d6:	683b      	ldr	r3, [r7, #0]
 800a6d8:	681a      	ldr	r2, [r3, #0]
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	2201      	movs	r2, #1
 800a6e2:	615a      	str	r2, [r3, #20]
}
 800a6e4:	46c0      	nop			; (mov r8, r8)
 800a6e6:	46bd      	mov	sp, r7
 800a6e8:	b004      	add	sp, #16
 800a6ea:	bd80      	pop	{r7, pc}
 800a6ec:	40000400 	.word	0x40000400
 800a6f0:	40010800 	.word	0x40010800
 800a6f4:	40011400 	.word	0x40011400
 800a6f8:	fffffcff 	.word	0xfffffcff

0800a6fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a6fc:	b580      	push	{r7, lr}
 800a6fe:	b086      	sub	sp, #24
 800a700:	af00      	add	r7, sp, #0
 800a702:	6078      	str	r0, [r7, #4]
 800a704:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	6a1b      	ldr	r3, [r3, #32]
 800a70a:	2201      	movs	r2, #1
 800a70c:	4393      	bics	r3, r2
 800a70e:	001a      	movs	r2, r3
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	6a1b      	ldr	r3, [r3, #32]
 800a718:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	685b      	ldr	r3, [r3, #4]
 800a71e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	699b      	ldr	r3, [r3, #24]
 800a724:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	2270      	movs	r2, #112	; 0x70
 800a72a:	4393      	bics	r3, r2
 800a72c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	2203      	movs	r2, #3
 800a732:	4393      	bics	r3, r2
 800a734:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a736:	683b      	ldr	r3, [r7, #0]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	68fa      	ldr	r2, [r7, #12]
 800a73c:	4313      	orrs	r3, r2
 800a73e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a740:	697b      	ldr	r3, [r7, #20]
 800a742:	2202      	movs	r2, #2
 800a744:	4393      	bics	r3, r2
 800a746:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a748:	683b      	ldr	r3, [r7, #0]
 800a74a:	689b      	ldr	r3, [r3, #8]
 800a74c:	697a      	ldr	r2, [r7, #20]
 800a74e:	4313      	orrs	r3, r2
 800a750:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	693a      	ldr	r2, [r7, #16]
 800a756:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	68fa      	ldr	r2, [r7, #12]
 800a75c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a75e:	683b      	ldr	r3, [r7, #0]
 800a760:	685a      	ldr	r2, [r3, #4]
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	697a      	ldr	r2, [r7, #20]
 800a76a:	621a      	str	r2, [r3, #32]
}
 800a76c:	46c0      	nop			; (mov r8, r8)
 800a76e:	46bd      	mov	sp, r7
 800a770:	b006      	add	sp, #24
 800a772:	bd80      	pop	{r7, pc}

0800a774 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a774:	b580      	push	{r7, lr}
 800a776:	b086      	sub	sp, #24
 800a778:	af00      	add	r7, sp, #0
 800a77a:	6078      	str	r0, [r7, #4]
 800a77c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	6a1b      	ldr	r3, [r3, #32]
 800a782:	2210      	movs	r2, #16
 800a784:	4393      	bics	r3, r2
 800a786:	001a      	movs	r2, r3
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	6a1b      	ldr	r3, [r3, #32]
 800a790:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	685b      	ldr	r3, [r3, #4]
 800a796:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	699b      	ldr	r3, [r3, #24]
 800a79c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	4a13      	ldr	r2, [pc, #76]	; (800a7f0 <TIM_OC2_SetConfig+0x7c>)
 800a7a2:	4013      	ands	r3, r2
 800a7a4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	4a12      	ldr	r2, [pc, #72]	; (800a7f4 <TIM_OC2_SetConfig+0x80>)
 800a7aa:	4013      	ands	r3, r2
 800a7ac:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a7ae:	683b      	ldr	r3, [r7, #0]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	021b      	lsls	r3, r3, #8
 800a7b4:	68fa      	ldr	r2, [r7, #12]
 800a7b6:	4313      	orrs	r3, r2
 800a7b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a7ba:	697b      	ldr	r3, [r7, #20]
 800a7bc:	2220      	movs	r2, #32
 800a7be:	4393      	bics	r3, r2
 800a7c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a7c2:	683b      	ldr	r3, [r7, #0]
 800a7c4:	689b      	ldr	r3, [r3, #8]
 800a7c6:	011b      	lsls	r3, r3, #4
 800a7c8:	697a      	ldr	r2, [r7, #20]
 800a7ca:	4313      	orrs	r3, r2
 800a7cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	693a      	ldr	r2, [r7, #16]
 800a7d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	68fa      	ldr	r2, [r7, #12]
 800a7d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a7da:	683b      	ldr	r3, [r7, #0]
 800a7dc:	685a      	ldr	r2, [r3, #4]
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	697a      	ldr	r2, [r7, #20]
 800a7e6:	621a      	str	r2, [r3, #32]
}
 800a7e8:	46c0      	nop			; (mov r8, r8)
 800a7ea:	46bd      	mov	sp, r7
 800a7ec:	b006      	add	sp, #24
 800a7ee:	bd80      	pop	{r7, pc}
 800a7f0:	ffff8fff 	.word	0xffff8fff
 800a7f4:	fffffcff 	.word	0xfffffcff

0800a7f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a7f8:	b580      	push	{r7, lr}
 800a7fa:	b086      	sub	sp, #24
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	6078      	str	r0, [r7, #4]
 800a800:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	6a1b      	ldr	r3, [r3, #32]
 800a806:	4a1a      	ldr	r2, [pc, #104]	; (800a870 <TIM_OC3_SetConfig+0x78>)
 800a808:	401a      	ands	r2, r3
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	6a1b      	ldr	r3, [r3, #32]
 800a812:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	685b      	ldr	r3, [r3, #4]
 800a818:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	69db      	ldr	r3, [r3, #28]
 800a81e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	2270      	movs	r2, #112	; 0x70
 800a824:	4393      	bics	r3, r2
 800a826:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	2203      	movs	r2, #3
 800a82c:	4393      	bics	r3, r2
 800a82e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a830:	683b      	ldr	r3, [r7, #0]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	68fa      	ldr	r2, [r7, #12]
 800a836:	4313      	orrs	r3, r2
 800a838:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a83a:	697b      	ldr	r3, [r7, #20]
 800a83c:	4a0d      	ldr	r2, [pc, #52]	; (800a874 <TIM_OC3_SetConfig+0x7c>)
 800a83e:	4013      	ands	r3, r2
 800a840:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a842:	683b      	ldr	r3, [r7, #0]
 800a844:	689b      	ldr	r3, [r3, #8]
 800a846:	021b      	lsls	r3, r3, #8
 800a848:	697a      	ldr	r2, [r7, #20]
 800a84a:	4313      	orrs	r3, r2
 800a84c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	693a      	ldr	r2, [r7, #16]
 800a852:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	68fa      	ldr	r2, [r7, #12]
 800a858:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a85a:	683b      	ldr	r3, [r7, #0]
 800a85c:	685a      	ldr	r2, [r3, #4]
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	697a      	ldr	r2, [r7, #20]
 800a866:	621a      	str	r2, [r3, #32]
}
 800a868:	46c0      	nop			; (mov r8, r8)
 800a86a:	46bd      	mov	sp, r7
 800a86c:	b006      	add	sp, #24
 800a86e:	bd80      	pop	{r7, pc}
 800a870:	fffffeff 	.word	0xfffffeff
 800a874:	fffffdff 	.word	0xfffffdff

0800a878 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a878:	b580      	push	{r7, lr}
 800a87a:	b086      	sub	sp, #24
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	6078      	str	r0, [r7, #4]
 800a880:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	6a1b      	ldr	r3, [r3, #32]
 800a886:	4a1b      	ldr	r2, [pc, #108]	; (800a8f4 <TIM_OC4_SetConfig+0x7c>)
 800a888:	401a      	ands	r2, r3
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	6a1b      	ldr	r3, [r3, #32]
 800a892:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	685b      	ldr	r3, [r3, #4]
 800a898:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	69db      	ldr	r3, [r3, #28]
 800a89e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	4a15      	ldr	r2, [pc, #84]	; (800a8f8 <TIM_OC4_SetConfig+0x80>)
 800a8a4:	4013      	ands	r3, r2
 800a8a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	4a14      	ldr	r2, [pc, #80]	; (800a8fc <TIM_OC4_SetConfig+0x84>)
 800a8ac:	4013      	ands	r3, r2
 800a8ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a8b0:	683b      	ldr	r3, [r7, #0]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	021b      	lsls	r3, r3, #8
 800a8b6:	68fa      	ldr	r2, [r7, #12]
 800a8b8:	4313      	orrs	r3, r2
 800a8ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a8bc:	697b      	ldr	r3, [r7, #20]
 800a8be:	4a10      	ldr	r2, [pc, #64]	; (800a900 <TIM_OC4_SetConfig+0x88>)
 800a8c0:	4013      	ands	r3, r2
 800a8c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a8c4:	683b      	ldr	r3, [r7, #0]
 800a8c6:	689b      	ldr	r3, [r3, #8]
 800a8c8:	031b      	lsls	r3, r3, #12
 800a8ca:	697a      	ldr	r2, [r7, #20]
 800a8cc:	4313      	orrs	r3, r2
 800a8ce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	693a      	ldr	r2, [r7, #16]
 800a8d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	68fa      	ldr	r2, [r7, #12]
 800a8da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a8dc:	683b      	ldr	r3, [r7, #0]
 800a8de:	685a      	ldr	r2, [r3, #4]
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	697a      	ldr	r2, [r7, #20]
 800a8e8:	621a      	str	r2, [r3, #32]
}
 800a8ea:	46c0      	nop			; (mov r8, r8)
 800a8ec:	46bd      	mov	sp, r7
 800a8ee:	b006      	add	sp, #24
 800a8f0:	bd80      	pop	{r7, pc}
 800a8f2:	46c0      	nop			; (mov r8, r8)
 800a8f4:	ffffefff 	.word	0xffffefff
 800a8f8:	ffff8fff 	.word	0xffff8fff
 800a8fc:	fffffcff 	.word	0xfffffcff
 800a900:	ffffdfff 	.word	0xffffdfff

0800a904 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a904:	b580      	push	{r7, lr}
 800a906:	b086      	sub	sp, #24
 800a908:	af00      	add	r7, sp, #0
 800a90a:	60f8      	str	r0, [r7, #12]
 800a90c:	60b9      	str	r1, [r7, #8]
 800a90e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	6a1b      	ldr	r3, [r3, #32]
 800a914:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	6a1b      	ldr	r3, [r3, #32]
 800a91a:	2201      	movs	r2, #1
 800a91c:	4393      	bics	r3, r2
 800a91e:	001a      	movs	r2, r3
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	699b      	ldr	r3, [r3, #24]
 800a928:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a92a:	693b      	ldr	r3, [r7, #16]
 800a92c:	22f0      	movs	r2, #240	; 0xf0
 800a92e:	4393      	bics	r3, r2
 800a930:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	011b      	lsls	r3, r3, #4
 800a936:	693a      	ldr	r2, [r7, #16]
 800a938:	4313      	orrs	r3, r2
 800a93a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a93c:	697b      	ldr	r3, [r7, #20]
 800a93e:	220a      	movs	r2, #10
 800a940:	4393      	bics	r3, r2
 800a942:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a944:	697a      	ldr	r2, [r7, #20]
 800a946:	68bb      	ldr	r3, [r7, #8]
 800a948:	4313      	orrs	r3, r2
 800a94a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	693a      	ldr	r2, [r7, #16]
 800a950:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	697a      	ldr	r2, [r7, #20]
 800a956:	621a      	str	r2, [r3, #32]
}
 800a958:	46c0      	nop			; (mov r8, r8)
 800a95a:	46bd      	mov	sp, r7
 800a95c:	b006      	add	sp, #24
 800a95e:	bd80      	pop	{r7, pc}

0800a960 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a960:	b580      	push	{r7, lr}
 800a962:	b086      	sub	sp, #24
 800a964:	af00      	add	r7, sp, #0
 800a966:	60f8      	str	r0, [r7, #12]
 800a968:	60b9      	str	r1, [r7, #8]
 800a96a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	6a1b      	ldr	r3, [r3, #32]
 800a970:	2210      	movs	r2, #16
 800a972:	4393      	bics	r3, r2
 800a974:	001a      	movs	r2, r3
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	699b      	ldr	r3, [r3, #24]
 800a97e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	6a1b      	ldr	r3, [r3, #32]
 800a984:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a986:	697b      	ldr	r3, [r7, #20]
 800a988:	4a0d      	ldr	r2, [pc, #52]	; (800a9c0 <TIM_TI2_ConfigInputStage+0x60>)
 800a98a:	4013      	ands	r3, r2
 800a98c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	031b      	lsls	r3, r3, #12
 800a992:	697a      	ldr	r2, [r7, #20]
 800a994:	4313      	orrs	r3, r2
 800a996:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a998:	693b      	ldr	r3, [r7, #16]
 800a99a:	22a0      	movs	r2, #160	; 0xa0
 800a99c:	4393      	bics	r3, r2
 800a99e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a9a0:	68bb      	ldr	r3, [r7, #8]
 800a9a2:	011b      	lsls	r3, r3, #4
 800a9a4:	693a      	ldr	r2, [r7, #16]
 800a9a6:	4313      	orrs	r3, r2
 800a9a8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	697a      	ldr	r2, [r7, #20]
 800a9ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	693a      	ldr	r2, [r7, #16]
 800a9b4:	621a      	str	r2, [r3, #32]
}
 800a9b6:	46c0      	nop			; (mov r8, r8)
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	b006      	add	sp, #24
 800a9bc:	bd80      	pop	{r7, pc}
 800a9be:	46c0      	nop			; (mov r8, r8)
 800a9c0:	ffff0fff 	.word	0xffff0fff

0800a9c4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a9c4:	b580      	push	{r7, lr}
 800a9c6:	b084      	sub	sp, #16
 800a9c8:	af00      	add	r7, sp, #0
 800a9ca:	6078      	str	r0, [r7, #4]
 800a9cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	689b      	ldr	r3, [r3, #8]
 800a9d2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	2270      	movs	r2, #112	; 0x70
 800a9d8:	4393      	bics	r3, r2
 800a9da:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a9dc:	683a      	ldr	r2, [r7, #0]
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	4313      	orrs	r3, r2
 800a9e2:	2207      	movs	r2, #7
 800a9e4:	4313      	orrs	r3, r2
 800a9e6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	68fa      	ldr	r2, [r7, #12]
 800a9ec:	609a      	str	r2, [r3, #8]
}
 800a9ee:	46c0      	nop			; (mov r8, r8)
 800a9f0:	46bd      	mov	sp, r7
 800a9f2:	b004      	add	sp, #16
 800a9f4:	bd80      	pop	{r7, pc}
	...

0800a9f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a9f8:	b580      	push	{r7, lr}
 800a9fa:	b086      	sub	sp, #24
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	60f8      	str	r0, [r7, #12]
 800aa00:	60b9      	str	r1, [r7, #8]
 800aa02:	607a      	str	r2, [r7, #4]
 800aa04:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	689b      	ldr	r3, [r3, #8]
 800aa0a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800aa0c:	697b      	ldr	r3, [r7, #20]
 800aa0e:	4a09      	ldr	r2, [pc, #36]	; (800aa34 <TIM_ETR_SetConfig+0x3c>)
 800aa10:	4013      	ands	r3, r2
 800aa12:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800aa14:	683b      	ldr	r3, [r7, #0]
 800aa16:	021a      	lsls	r2, r3, #8
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	431a      	orrs	r2, r3
 800aa1c:	68bb      	ldr	r3, [r7, #8]
 800aa1e:	4313      	orrs	r3, r2
 800aa20:	697a      	ldr	r2, [r7, #20]
 800aa22:	4313      	orrs	r3, r2
 800aa24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	697a      	ldr	r2, [r7, #20]
 800aa2a:	609a      	str	r2, [r3, #8]
}
 800aa2c:	46c0      	nop			; (mov r8, r8)
 800aa2e:	46bd      	mov	sp, r7
 800aa30:	b006      	add	sp, #24
 800aa32:	bd80      	pop	{r7, pc}
 800aa34:	ffff00ff 	.word	0xffff00ff

0800aa38 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800aa38:	b580      	push	{r7, lr}
 800aa3a:	b086      	sub	sp, #24
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	60f8      	str	r0, [r7, #12]
 800aa40:	60b9      	str	r1, [r7, #8]
 800aa42:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800aa44:	68bb      	ldr	r3, [r7, #8]
 800aa46:	221f      	movs	r2, #31
 800aa48:	4013      	ands	r3, r2
 800aa4a:	2201      	movs	r2, #1
 800aa4c:	409a      	lsls	r2, r3
 800aa4e:	0013      	movs	r3, r2
 800aa50:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	6a1b      	ldr	r3, [r3, #32]
 800aa56:	697a      	ldr	r2, [r7, #20]
 800aa58:	43d2      	mvns	r2, r2
 800aa5a:	401a      	ands	r2, r3
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	6a1a      	ldr	r2, [r3, #32]
 800aa64:	68bb      	ldr	r3, [r7, #8]
 800aa66:	211f      	movs	r1, #31
 800aa68:	400b      	ands	r3, r1
 800aa6a:	6879      	ldr	r1, [r7, #4]
 800aa6c:	4099      	lsls	r1, r3
 800aa6e:	000b      	movs	r3, r1
 800aa70:	431a      	orrs	r2, r3
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	621a      	str	r2, [r3, #32]
}
 800aa76:	46c0      	nop			; (mov r8, r8)
 800aa78:	46bd      	mov	sp, r7
 800aa7a:	b006      	add	sp, #24
 800aa7c:	bd80      	pop	{r7, pc}

0800aa7e <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800aa7e:	b580      	push	{r7, lr}
 800aa80:	b084      	sub	sp, #16
 800aa82:	af00      	add	r7, sp, #0
 800aa84:	6078      	str	r0, [r7, #4]
 800aa86:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	2238      	movs	r2, #56	; 0x38
 800aa8c:	5c9b      	ldrb	r3, [r3, r2]
 800aa8e:	2b01      	cmp	r3, #1
 800aa90:	d101      	bne.n	800aa96 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800aa92:	2302      	movs	r3, #2
 800aa94:	e032      	b.n	800aafc <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	2238      	movs	r2, #56	; 0x38
 800aa9a:	2101      	movs	r1, #1
 800aa9c:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	2239      	movs	r2, #57	; 0x39
 800aaa2:	2102      	movs	r1, #2
 800aaa4:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	685b      	ldr	r3, [r3, #4]
 800aaac:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	689b      	ldr	r3, [r3, #8]
 800aab4:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	2270      	movs	r2, #112	; 0x70
 800aaba:	4393      	bics	r3, r2
 800aabc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800aabe:	683b      	ldr	r3, [r7, #0]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	68fa      	ldr	r2, [r7, #12]
 800aac4:	4313      	orrs	r3, r2
 800aac6:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800aac8:	68bb      	ldr	r3, [r7, #8]
 800aaca:	2280      	movs	r2, #128	; 0x80
 800aacc:	4393      	bics	r3, r2
 800aace:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800aad0:	683b      	ldr	r3, [r7, #0]
 800aad2:	685b      	ldr	r3, [r3, #4]
 800aad4:	68ba      	ldr	r2, [r7, #8]
 800aad6:	4313      	orrs	r3, r2
 800aad8:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	68fa      	ldr	r2, [r7, #12]
 800aae0:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	68ba      	ldr	r2, [r7, #8]
 800aae8:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	2239      	movs	r2, #57	; 0x39
 800aaee:	2101      	movs	r1, #1
 800aaf0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	2238      	movs	r2, #56	; 0x38
 800aaf6:	2100      	movs	r1, #0
 800aaf8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800aafa:	2300      	movs	r3, #0
}
 800aafc:	0018      	movs	r0, r3
 800aafe:	46bd      	mov	sp, r7
 800ab00:	b004      	add	sp, #16
 800ab02:	bd80      	pop	{r7, pc}

0800ab04 <HAL_TIMEx_RemapConfig>:
  @endif
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 800ab04:	b580      	push	{r7, lr}
 800ab06:	b082      	sub	sp, #8
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	6078      	str	r0, [r7, #4]
 800ab0c:	6039      	str	r1, [r7, #0]
  __HAL_LOCK(htim);
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	2238      	movs	r2, #56	; 0x38
 800ab12:	5c9b      	ldrb	r3, [r3, r2]
 800ab14:	2b01      	cmp	r3, #1
 800ab16:	d101      	bne.n	800ab1c <HAL_TIMEx_RemapConfig+0x18>
 800ab18:	2302      	movs	r3, #2
 800ab1a:	e00c      	b.n	800ab36 <HAL_TIMEx_RemapConfig+0x32>
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	2238      	movs	r2, #56	; 0x38
 800ab20:	2101      	movs	r1, #1
 800ab22:	5499      	strb	r1, [r3, r2]

  /* Check parameters */
  assert_param(IS_TIM_REMAP(htim->Instance, Remap));

  /* Set the Timer remapping configuration */
  WRITE_REG(htim->Instance->OR, Remap);
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	683a      	ldr	r2, [r7, #0]
 800ab2a:	651a      	str	r2, [r3, #80]	; 0x50

  __HAL_UNLOCK(htim);
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	2238      	movs	r2, #56	; 0x38
 800ab30:	2100      	movs	r1, #0
 800ab32:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800ab34:	2300      	movs	r3, #0
}
 800ab36:	0018      	movs	r0, r3
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	b002      	add	sp, #8
 800ab3c:	bd80      	pop	{r7, pc}
	...

0800ab40 <calloc>:
 800ab40:	b510      	push	{r4, lr}
 800ab42:	4b03      	ldr	r3, [pc, #12]	; (800ab50 <calloc+0x10>)
 800ab44:	000a      	movs	r2, r1
 800ab46:	0001      	movs	r1, r0
 800ab48:	6818      	ldr	r0, [r3, #0]
 800ab4a:	f000 f83e 	bl	800abca <_calloc_r>
 800ab4e:	bd10      	pop	{r4, pc}
 800ab50:	2000006c 	.word	0x2000006c

0800ab54 <__errno>:
 800ab54:	4b01      	ldr	r3, [pc, #4]	; (800ab5c <__errno+0x8>)
 800ab56:	6818      	ldr	r0, [r3, #0]
 800ab58:	4770      	bx	lr
 800ab5a:	46c0      	nop			; (mov r8, r8)
 800ab5c:	2000006c 	.word	0x2000006c

0800ab60 <__libc_init_array>:
 800ab60:	b570      	push	{r4, r5, r6, lr}
 800ab62:	2600      	movs	r6, #0
 800ab64:	4d0c      	ldr	r5, [pc, #48]	; (800ab98 <__libc_init_array+0x38>)
 800ab66:	4c0d      	ldr	r4, [pc, #52]	; (800ab9c <__libc_init_array+0x3c>)
 800ab68:	1b64      	subs	r4, r4, r5
 800ab6a:	10a4      	asrs	r4, r4, #2
 800ab6c:	42a6      	cmp	r6, r4
 800ab6e:	d109      	bne.n	800ab84 <__libc_init_array+0x24>
 800ab70:	2600      	movs	r6, #0
 800ab72:	f000 fc37 	bl	800b3e4 <_init>
 800ab76:	4d0a      	ldr	r5, [pc, #40]	; (800aba0 <__libc_init_array+0x40>)
 800ab78:	4c0a      	ldr	r4, [pc, #40]	; (800aba4 <__libc_init_array+0x44>)
 800ab7a:	1b64      	subs	r4, r4, r5
 800ab7c:	10a4      	asrs	r4, r4, #2
 800ab7e:	42a6      	cmp	r6, r4
 800ab80:	d105      	bne.n	800ab8e <__libc_init_array+0x2e>
 800ab82:	bd70      	pop	{r4, r5, r6, pc}
 800ab84:	00b3      	lsls	r3, r6, #2
 800ab86:	58eb      	ldr	r3, [r5, r3]
 800ab88:	4798      	blx	r3
 800ab8a:	3601      	adds	r6, #1
 800ab8c:	e7ee      	b.n	800ab6c <__libc_init_array+0xc>
 800ab8e:	00b3      	lsls	r3, r6, #2
 800ab90:	58eb      	ldr	r3, [r5, r3]
 800ab92:	4798      	blx	r3
 800ab94:	3601      	adds	r6, #1
 800ab96:	e7f2      	b.n	800ab7e <__libc_init_array+0x1e>
 800ab98:	0800bf9c 	.word	0x0800bf9c
 800ab9c:	0800bf9c 	.word	0x0800bf9c
 800aba0:	0800bf9c 	.word	0x0800bf9c
 800aba4:	0800bfa0 	.word	0x0800bfa0

0800aba8 <memcpy>:
 800aba8:	2300      	movs	r3, #0
 800abaa:	b510      	push	{r4, lr}
 800abac:	429a      	cmp	r2, r3
 800abae:	d100      	bne.n	800abb2 <memcpy+0xa>
 800abb0:	bd10      	pop	{r4, pc}
 800abb2:	5ccc      	ldrb	r4, [r1, r3]
 800abb4:	54c4      	strb	r4, [r0, r3]
 800abb6:	3301      	adds	r3, #1
 800abb8:	e7f8      	b.n	800abac <memcpy+0x4>

0800abba <memset>:
 800abba:	0003      	movs	r3, r0
 800abbc:	1812      	adds	r2, r2, r0
 800abbe:	4293      	cmp	r3, r2
 800abc0:	d100      	bne.n	800abc4 <memset+0xa>
 800abc2:	4770      	bx	lr
 800abc4:	7019      	strb	r1, [r3, #0]
 800abc6:	3301      	adds	r3, #1
 800abc8:	e7f9      	b.n	800abbe <memset+0x4>

0800abca <_calloc_r>:
 800abca:	434a      	muls	r2, r1
 800abcc:	b570      	push	{r4, r5, r6, lr}
 800abce:	0011      	movs	r1, r2
 800abd0:	0014      	movs	r4, r2
 800abd2:	f000 f809 	bl	800abe8 <_malloc_r>
 800abd6:	1e05      	subs	r5, r0, #0
 800abd8:	d003      	beq.n	800abe2 <_calloc_r+0x18>
 800abda:	0022      	movs	r2, r4
 800abdc:	2100      	movs	r1, #0
 800abde:	f7ff ffec 	bl	800abba <memset>
 800abe2:	0028      	movs	r0, r5
 800abe4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800abe8 <_malloc_r>:
 800abe8:	2303      	movs	r3, #3
 800abea:	b570      	push	{r4, r5, r6, lr}
 800abec:	1ccd      	adds	r5, r1, #3
 800abee:	439d      	bics	r5, r3
 800abf0:	3508      	adds	r5, #8
 800abf2:	0006      	movs	r6, r0
 800abf4:	2d0c      	cmp	r5, #12
 800abf6:	d21e      	bcs.n	800ac36 <_malloc_r+0x4e>
 800abf8:	250c      	movs	r5, #12
 800abfa:	42a9      	cmp	r1, r5
 800abfc:	d81d      	bhi.n	800ac3a <_malloc_r+0x52>
 800abfe:	0030      	movs	r0, r6
 800ac00:	f000 f882 	bl	800ad08 <__malloc_lock>
 800ac04:	4a25      	ldr	r2, [pc, #148]	; (800ac9c <_malloc_r+0xb4>)
 800ac06:	6814      	ldr	r4, [r2, #0]
 800ac08:	0021      	movs	r1, r4
 800ac0a:	2900      	cmp	r1, #0
 800ac0c:	d119      	bne.n	800ac42 <_malloc_r+0x5a>
 800ac0e:	4c24      	ldr	r4, [pc, #144]	; (800aca0 <_malloc_r+0xb8>)
 800ac10:	6823      	ldr	r3, [r4, #0]
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d103      	bne.n	800ac1e <_malloc_r+0x36>
 800ac16:	0030      	movs	r0, r6
 800ac18:	f000 f844 	bl	800aca4 <_sbrk_r>
 800ac1c:	6020      	str	r0, [r4, #0]
 800ac1e:	0029      	movs	r1, r5
 800ac20:	0030      	movs	r0, r6
 800ac22:	f000 f83f 	bl	800aca4 <_sbrk_r>
 800ac26:	1c43      	adds	r3, r0, #1
 800ac28:	d12b      	bne.n	800ac82 <_malloc_r+0x9a>
 800ac2a:	230c      	movs	r3, #12
 800ac2c:	0030      	movs	r0, r6
 800ac2e:	6033      	str	r3, [r6, #0]
 800ac30:	f000 f86b 	bl	800ad0a <__malloc_unlock>
 800ac34:	e003      	b.n	800ac3e <_malloc_r+0x56>
 800ac36:	2d00      	cmp	r5, #0
 800ac38:	dadf      	bge.n	800abfa <_malloc_r+0x12>
 800ac3a:	230c      	movs	r3, #12
 800ac3c:	6033      	str	r3, [r6, #0]
 800ac3e:	2000      	movs	r0, #0
 800ac40:	bd70      	pop	{r4, r5, r6, pc}
 800ac42:	680b      	ldr	r3, [r1, #0]
 800ac44:	1b5b      	subs	r3, r3, r5
 800ac46:	d419      	bmi.n	800ac7c <_malloc_r+0x94>
 800ac48:	2b0b      	cmp	r3, #11
 800ac4a:	d903      	bls.n	800ac54 <_malloc_r+0x6c>
 800ac4c:	600b      	str	r3, [r1, #0]
 800ac4e:	18cc      	adds	r4, r1, r3
 800ac50:	6025      	str	r5, [r4, #0]
 800ac52:	e003      	b.n	800ac5c <_malloc_r+0x74>
 800ac54:	684b      	ldr	r3, [r1, #4]
 800ac56:	428c      	cmp	r4, r1
 800ac58:	d10d      	bne.n	800ac76 <_malloc_r+0x8e>
 800ac5a:	6013      	str	r3, [r2, #0]
 800ac5c:	0030      	movs	r0, r6
 800ac5e:	f000 f854 	bl	800ad0a <__malloc_unlock>
 800ac62:	0020      	movs	r0, r4
 800ac64:	2207      	movs	r2, #7
 800ac66:	300b      	adds	r0, #11
 800ac68:	1d23      	adds	r3, r4, #4
 800ac6a:	4390      	bics	r0, r2
 800ac6c:	1ac3      	subs	r3, r0, r3
 800ac6e:	d0e7      	beq.n	800ac40 <_malloc_r+0x58>
 800ac70:	425a      	negs	r2, r3
 800ac72:	50e2      	str	r2, [r4, r3]
 800ac74:	e7e4      	b.n	800ac40 <_malloc_r+0x58>
 800ac76:	6063      	str	r3, [r4, #4]
 800ac78:	000c      	movs	r4, r1
 800ac7a:	e7ef      	b.n	800ac5c <_malloc_r+0x74>
 800ac7c:	000c      	movs	r4, r1
 800ac7e:	6849      	ldr	r1, [r1, #4]
 800ac80:	e7c3      	b.n	800ac0a <_malloc_r+0x22>
 800ac82:	2303      	movs	r3, #3
 800ac84:	1cc4      	adds	r4, r0, #3
 800ac86:	439c      	bics	r4, r3
 800ac88:	42a0      	cmp	r0, r4
 800ac8a:	d0e1      	beq.n	800ac50 <_malloc_r+0x68>
 800ac8c:	1a21      	subs	r1, r4, r0
 800ac8e:	0030      	movs	r0, r6
 800ac90:	f000 f808 	bl	800aca4 <_sbrk_r>
 800ac94:	1c43      	adds	r3, r0, #1
 800ac96:	d1db      	bne.n	800ac50 <_malloc_r+0x68>
 800ac98:	e7c7      	b.n	800ac2a <_malloc_r+0x42>
 800ac9a:	46c0      	nop			; (mov r8, r8)
 800ac9c:	20000138 	.word	0x20000138
 800aca0:	2000013c 	.word	0x2000013c

0800aca4 <_sbrk_r>:
 800aca4:	2300      	movs	r3, #0
 800aca6:	b570      	push	{r4, r5, r6, lr}
 800aca8:	4c06      	ldr	r4, [pc, #24]	; (800acc4 <_sbrk_r+0x20>)
 800acaa:	0005      	movs	r5, r0
 800acac:	0008      	movs	r0, r1
 800acae:	6023      	str	r3, [r4, #0]
 800acb0:	f7f9 fb9c 	bl	80043ec <_sbrk>
 800acb4:	1c43      	adds	r3, r0, #1
 800acb6:	d103      	bne.n	800acc0 <_sbrk_r+0x1c>
 800acb8:	6823      	ldr	r3, [r4, #0]
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d000      	beq.n	800acc0 <_sbrk_r+0x1c>
 800acbe:	602b      	str	r3, [r5, #0]
 800acc0:	bd70      	pop	{r4, r5, r6, pc}
 800acc2:	46c0      	nop			; (mov r8, r8)
 800acc4:	200003a4 	.word	0x200003a4

0800acc8 <siprintf>:
 800acc8:	b40e      	push	{r1, r2, r3}
 800acca:	b500      	push	{lr}
 800accc:	490b      	ldr	r1, [pc, #44]	; (800acfc <siprintf+0x34>)
 800acce:	b09c      	sub	sp, #112	; 0x70
 800acd0:	ab1d      	add	r3, sp, #116	; 0x74
 800acd2:	9002      	str	r0, [sp, #8]
 800acd4:	9006      	str	r0, [sp, #24]
 800acd6:	9107      	str	r1, [sp, #28]
 800acd8:	9104      	str	r1, [sp, #16]
 800acda:	4809      	ldr	r0, [pc, #36]	; (800ad00 <siprintf+0x38>)
 800acdc:	4909      	ldr	r1, [pc, #36]	; (800ad04 <siprintf+0x3c>)
 800acde:	cb04      	ldmia	r3!, {r2}
 800ace0:	9105      	str	r1, [sp, #20]
 800ace2:	6800      	ldr	r0, [r0, #0]
 800ace4:	a902      	add	r1, sp, #8
 800ace6:	9301      	str	r3, [sp, #4]
 800ace8:	f000 f872 	bl	800add0 <_svfiprintf_r>
 800acec:	2300      	movs	r3, #0
 800acee:	9a02      	ldr	r2, [sp, #8]
 800acf0:	7013      	strb	r3, [r2, #0]
 800acf2:	b01c      	add	sp, #112	; 0x70
 800acf4:	bc08      	pop	{r3}
 800acf6:	b003      	add	sp, #12
 800acf8:	4718      	bx	r3
 800acfa:	46c0      	nop			; (mov r8, r8)
 800acfc:	7fffffff 	.word	0x7fffffff
 800ad00:	2000006c 	.word	0x2000006c
 800ad04:	ffff0208 	.word	0xffff0208

0800ad08 <__malloc_lock>:
 800ad08:	4770      	bx	lr

0800ad0a <__malloc_unlock>:
 800ad0a:	4770      	bx	lr

0800ad0c <__ssputs_r>:
 800ad0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ad0e:	688e      	ldr	r6, [r1, #8]
 800ad10:	b085      	sub	sp, #20
 800ad12:	0007      	movs	r7, r0
 800ad14:	000c      	movs	r4, r1
 800ad16:	9203      	str	r2, [sp, #12]
 800ad18:	9301      	str	r3, [sp, #4]
 800ad1a:	429e      	cmp	r6, r3
 800ad1c:	d83c      	bhi.n	800ad98 <__ssputs_r+0x8c>
 800ad1e:	2390      	movs	r3, #144	; 0x90
 800ad20:	898a      	ldrh	r2, [r1, #12]
 800ad22:	00db      	lsls	r3, r3, #3
 800ad24:	421a      	tst	r2, r3
 800ad26:	d034      	beq.n	800ad92 <__ssputs_r+0x86>
 800ad28:	2503      	movs	r5, #3
 800ad2a:	6909      	ldr	r1, [r1, #16]
 800ad2c:	6823      	ldr	r3, [r4, #0]
 800ad2e:	1a5b      	subs	r3, r3, r1
 800ad30:	9302      	str	r3, [sp, #8]
 800ad32:	6963      	ldr	r3, [r4, #20]
 800ad34:	9802      	ldr	r0, [sp, #8]
 800ad36:	435d      	muls	r5, r3
 800ad38:	0feb      	lsrs	r3, r5, #31
 800ad3a:	195d      	adds	r5, r3, r5
 800ad3c:	9b01      	ldr	r3, [sp, #4]
 800ad3e:	106d      	asrs	r5, r5, #1
 800ad40:	3301      	adds	r3, #1
 800ad42:	181b      	adds	r3, r3, r0
 800ad44:	42ab      	cmp	r3, r5
 800ad46:	d900      	bls.n	800ad4a <__ssputs_r+0x3e>
 800ad48:	001d      	movs	r5, r3
 800ad4a:	0553      	lsls	r3, r2, #21
 800ad4c:	d532      	bpl.n	800adb4 <__ssputs_r+0xa8>
 800ad4e:	0029      	movs	r1, r5
 800ad50:	0038      	movs	r0, r7
 800ad52:	f7ff ff49 	bl	800abe8 <_malloc_r>
 800ad56:	1e06      	subs	r6, r0, #0
 800ad58:	d109      	bne.n	800ad6e <__ssputs_r+0x62>
 800ad5a:	230c      	movs	r3, #12
 800ad5c:	603b      	str	r3, [r7, #0]
 800ad5e:	2340      	movs	r3, #64	; 0x40
 800ad60:	2001      	movs	r0, #1
 800ad62:	89a2      	ldrh	r2, [r4, #12]
 800ad64:	4240      	negs	r0, r0
 800ad66:	4313      	orrs	r3, r2
 800ad68:	81a3      	strh	r3, [r4, #12]
 800ad6a:	b005      	add	sp, #20
 800ad6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad6e:	9a02      	ldr	r2, [sp, #8]
 800ad70:	6921      	ldr	r1, [r4, #16]
 800ad72:	f7ff ff19 	bl	800aba8 <memcpy>
 800ad76:	89a3      	ldrh	r3, [r4, #12]
 800ad78:	4a14      	ldr	r2, [pc, #80]	; (800adcc <__ssputs_r+0xc0>)
 800ad7a:	401a      	ands	r2, r3
 800ad7c:	2380      	movs	r3, #128	; 0x80
 800ad7e:	4313      	orrs	r3, r2
 800ad80:	81a3      	strh	r3, [r4, #12]
 800ad82:	9b02      	ldr	r3, [sp, #8]
 800ad84:	6126      	str	r6, [r4, #16]
 800ad86:	18f6      	adds	r6, r6, r3
 800ad88:	6026      	str	r6, [r4, #0]
 800ad8a:	6165      	str	r5, [r4, #20]
 800ad8c:	9e01      	ldr	r6, [sp, #4]
 800ad8e:	1aed      	subs	r5, r5, r3
 800ad90:	60a5      	str	r5, [r4, #8]
 800ad92:	9b01      	ldr	r3, [sp, #4]
 800ad94:	429e      	cmp	r6, r3
 800ad96:	d900      	bls.n	800ad9a <__ssputs_r+0x8e>
 800ad98:	9e01      	ldr	r6, [sp, #4]
 800ad9a:	0032      	movs	r2, r6
 800ad9c:	9903      	ldr	r1, [sp, #12]
 800ad9e:	6820      	ldr	r0, [r4, #0]
 800ada0:	f000 fa95 	bl	800b2ce <memmove>
 800ada4:	68a3      	ldr	r3, [r4, #8]
 800ada6:	2000      	movs	r0, #0
 800ada8:	1b9b      	subs	r3, r3, r6
 800adaa:	60a3      	str	r3, [r4, #8]
 800adac:	6823      	ldr	r3, [r4, #0]
 800adae:	199e      	adds	r6, r3, r6
 800adb0:	6026      	str	r6, [r4, #0]
 800adb2:	e7da      	b.n	800ad6a <__ssputs_r+0x5e>
 800adb4:	002a      	movs	r2, r5
 800adb6:	0038      	movs	r0, r7
 800adb8:	f000 fae6 	bl	800b388 <_realloc_r>
 800adbc:	1e06      	subs	r6, r0, #0
 800adbe:	d1e0      	bne.n	800ad82 <__ssputs_r+0x76>
 800adc0:	6921      	ldr	r1, [r4, #16]
 800adc2:	0038      	movs	r0, r7
 800adc4:	f000 fa96 	bl	800b2f4 <_free_r>
 800adc8:	e7c7      	b.n	800ad5a <__ssputs_r+0x4e>
 800adca:	46c0      	nop			; (mov r8, r8)
 800adcc:	fffffb7f 	.word	0xfffffb7f

0800add0 <_svfiprintf_r>:
 800add0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800add2:	b0a1      	sub	sp, #132	; 0x84
 800add4:	9003      	str	r0, [sp, #12]
 800add6:	001d      	movs	r5, r3
 800add8:	898b      	ldrh	r3, [r1, #12]
 800adda:	000f      	movs	r7, r1
 800addc:	0016      	movs	r6, r2
 800adde:	061b      	lsls	r3, r3, #24
 800ade0:	d511      	bpl.n	800ae06 <_svfiprintf_r+0x36>
 800ade2:	690b      	ldr	r3, [r1, #16]
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d10e      	bne.n	800ae06 <_svfiprintf_r+0x36>
 800ade8:	2140      	movs	r1, #64	; 0x40
 800adea:	f7ff fefd 	bl	800abe8 <_malloc_r>
 800adee:	6038      	str	r0, [r7, #0]
 800adf0:	6138      	str	r0, [r7, #16]
 800adf2:	2800      	cmp	r0, #0
 800adf4:	d105      	bne.n	800ae02 <_svfiprintf_r+0x32>
 800adf6:	230c      	movs	r3, #12
 800adf8:	9a03      	ldr	r2, [sp, #12]
 800adfa:	3801      	subs	r0, #1
 800adfc:	6013      	str	r3, [r2, #0]
 800adfe:	b021      	add	sp, #132	; 0x84
 800ae00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae02:	2340      	movs	r3, #64	; 0x40
 800ae04:	617b      	str	r3, [r7, #20]
 800ae06:	2300      	movs	r3, #0
 800ae08:	ac08      	add	r4, sp, #32
 800ae0a:	6163      	str	r3, [r4, #20]
 800ae0c:	3320      	adds	r3, #32
 800ae0e:	7663      	strb	r3, [r4, #25]
 800ae10:	3310      	adds	r3, #16
 800ae12:	76a3      	strb	r3, [r4, #26]
 800ae14:	9507      	str	r5, [sp, #28]
 800ae16:	0035      	movs	r5, r6
 800ae18:	782b      	ldrb	r3, [r5, #0]
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d001      	beq.n	800ae22 <_svfiprintf_r+0x52>
 800ae1e:	2b25      	cmp	r3, #37	; 0x25
 800ae20:	d146      	bne.n	800aeb0 <_svfiprintf_r+0xe0>
 800ae22:	1bab      	subs	r3, r5, r6
 800ae24:	9305      	str	r3, [sp, #20]
 800ae26:	d00c      	beq.n	800ae42 <_svfiprintf_r+0x72>
 800ae28:	0032      	movs	r2, r6
 800ae2a:	0039      	movs	r1, r7
 800ae2c:	9803      	ldr	r0, [sp, #12]
 800ae2e:	f7ff ff6d 	bl	800ad0c <__ssputs_r>
 800ae32:	1c43      	adds	r3, r0, #1
 800ae34:	d100      	bne.n	800ae38 <_svfiprintf_r+0x68>
 800ae36:	e0ae      	b.n	800af96 <_svfiprintf_r+0x1c6>
 800ae38:	6962      	ldr	r2, [r4, #20]
 800ae3a:	9b05      	ldr	r3, [sp, #20]
 800ae3c:	4694      	mov	ip, r2
 800ae3e:	4463      	add	r3, ip
 800ae40:	6163      	str	r3, [r4, #20]
 800ae42:	782b      	ldrb	r3, [r5, #0]
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d100      	bne.n	800ae4a <_svfiprintf_r+0x7a>
 800ae48:	e0a5      	b.n	800af96 <_svfiprintf_r+0x1c6>
 800ae4a:	2201      	movs	r2, #1
 800ae4c:	2300      	movs	r3, #0
 800ae4e:	4252      	negs	r2, r2
 800ae50:	6062      	str	r2, [r4, #4]
 800ae52:	a904      	add	r1, sp, #16
 800ae54:	3254      	adds	r2, #84	; 0x54
 800ae56:	1852      	adds	r2, r2, r1
 800ae58:	1c6e      	adds	r6, r5, #1
 800ae5a:	6023      	str	r3, [r4, #0]
 800ae5c:	60e3      	str	r3, [r4, #12]
 800ae5e:	60a3      	str	r3, [r4, #8]
 800ae60:	7013      	strb	r3, [r2, #0]
 800ae62:	65a3      	str	r3, [r4, #88]	; 0x58
 800ae64:	7831      	ldrb	r1, [r6, #0]
 800ae66:	2205      	movs	r2, #5
 800ae68:	4853      	ldr	r0, [pc, #332]	; (800afb8 <_svfiprintf_r+0x1e8>)
 800ae6a:	f000 fa25 	bl	800b2b8 <memchr>
 800ae6e:	1c75      	adds	r5, r6, #1
 800ae70:	2800      	cmp	r0, #0
 800ae72:	d11f      	bne.n	800aeb4 <_svfiprintf_r+0xe4>
 800ae74:	6822      	ldr	r2, [r4, #0]
 800ae76:	06d3      	lsls	r3, r2, #27
 800ae78:	d504      	bpl.n	800ae84 <_svfiprintf_r+0xb4>
 800ae7a:	2353      	movs	r3, #83	; 0x53
 800ae7c:	a904      	add	r1, sp, #16
 800ae7e:	185b      	adds	r3, r3, r1
 800ae80:	2120      	movs	r1, #32
 800ae82:	7019      	strb	r1, [r3, #0]
 800ae84:	0713      	lsls	r3, r2, #28
 800ae86:	d504      	bpl.n	800ae92 <_svfiprintf_r+0xc2>
 800ae88:	2353      	movs	r3, #83	; 0x53
 800ae8a:	a904      	add	r1, sp, #16
 800ae8c:	185b      	adds	r3, r3, r1
 800ae8e:	212b      	movs	r1, #43	; 0x2b
 800ae90:	7019      	strb	r1, [r3, #0]
 800ae92:	7833      	ldrb	r3, [r6, #0]
 800ae94:	2b2a      	cmp	r3, #42	; 0x2a
 800ae96:	d016      	beq.n	800aec6 <_svfiprintf_r+0xf6>
 800ae98:	0035      	movs	r5, r6
 800ae9a:	2100      	movs	r1, #0
 800ae9c:	200a      	movs	r0, #10
 800ae9e:	68e3      	ldr	r3, [r4, #12]
 800aea0:	782a      	ldrb	r2, [r5, #0]
 800aea2:	1c6e      	adds	r6, r5, #1
 800aea4:	3a30      	subs	r2, #48	; 0x30
 800aea6:	2a09      	cmp	r2, #9
 800aea8:	d94e      	bls.n	800af48 <_svfiprintf_r+0x178>
 800aeaa:	2900      	cmp	r1, #0
 800aeac:	d018      	beq.n	800aee0 <_svfiprintf_r+0x110>
 800aeae:	e010      	b.n	800aed2 <_svfiprintf_r+0x102>
 800aeb0:	3501      	adds	r5, #1
 800aeb2:	e7b1      	b.n	800ae18 <_svfiprintf_r+0x48>
 800aeb4:	4b40      	ldr	r3, [pc, #256]	; (800afb8 <_svfiprintf_r+0x1e8>)
 800aeb6:	6822      	ldr	r2, [r4, #0]
 800aeb8:	1ac0      	subs	r0, r0, r3
 800aeba:	2301      	movs	r3, #1
 800aebc:	4083      	lsls	r3, r0
 800aebe:	4313      	orrs	r3, r2
 800aec0:	6023      	str	r3, [r4, #0]
 800aec2:	002e      	movs	r6, r5
 800aec4:	e7ce      	b.n	800ae64 <_svfiprintf_r+0x94>
 800aec6:	9b07      	ldr	r3, [sp, #28]
 800aec8:	1d19      	adds	r1, r3, #4
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	9107      	str	r1, [sp, #28]
 800aece:	2b00      	cmp	r3, #0
 800aed0:	db01      	blt.n	800aed6 <_svfiprintf_r+0x106>
 800aed2:	930b      	str	r3, [sp, #44]	; 0x2c
 800aed4:	e004      	b.n	800aee0 <_svfiprintf_r+0x110>
 800aed6:	425b      	negs	r3, r3
 800aed8:	60e3      	str	r3, [r4, #12]
 800aeda:	2302      	movs	r3, #2
 800aedc:	4313      	orrs	r3, r2
 800aede:	6023      	str	r3, [r4, #0]
 800aee0:	782b      	ldrb	r3, [r5, #0]
 800aee2:	2b2e      	cmp	r3, #46	; 0x2e
 800aee4:	d10a      	bne.n	800aefc <_svfiprintf_r+0x12c>
 800aee6:	786b      	ldrb	r3, [r5, #1]
 800aee8:	2b2a      	cmp	r3, #42	; 0x2a
 800aeea:	d135      	bne.n	800af58 <_svfiprintf_r+0x188>
 800aeec:	9b07      	ldr	r3, [sp, #28]
 800aeee:	3502      	adds	r5, #2
 800aef0:	1d1a      	adds	r2, r3, #4
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	9207      	str	r2, [sp, #28]
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	db2b      	blt.n	800af52 <_svfiprintf_r+0x182>
 800aefa:	9309      	str	r3, [sp, #36]	; 0x24
 800aefc:	4e2f      	ldr	r6, [pc, #188]	; (800afbc <_svfiprintf_r+0x1ec>)
 800aefe:	7829      	ldrb	r1, [r5, #0]
 800af00:	2203      	movs	r2, #3
 800af02:	0030      	movs	r0, r6
 800af04:	f000 f9d8 	bl	800b2b8 <memchr>
 800af08:	2800      	cmp	r0, #0
 800af0a:	d006      	beq.n	800af1a <_svfiprintf_r+0x14a>
 800af0c:	2340      	movs	r3, #64	; 0x40
 800af0e:	1b80      	subs	r0, r0, r6
 800af10:	4083      	lsls	r3, r0
 800af12:	6822      	ldr	r2, [r4, #0]
 800af14:	3501      	adds	r5, #1
 800af16:	4313      	orrs	r3, r2
 800af18:	6023      	str	r3, [r4, #0]
 800af1a:	7829      	ldrb	r1, [r5, #0]
 800af1c:	2206      	movs	r2, #6
 800af1e:	4828      	ldr	r0, [pc, #160]	; (800afc0 <_svfiprintf_r+0x1f0>)
 800af20:	1c6e      	adds	r6, r5, #1
 800af22:	7621      	strb	r1, [r4, #24]
 800af24:	f000 f9c8 	bl	800b2b8 <memchr>
 800af28:	2800      	cmp	r0, #0
 800af2a:	d03c      	beq.n	800afa6 <_svfiprintf_r+0x1d6>
 800af2c:	4b25      	ldr	r3, [pc, #148]	; (800afc4 <_svfiprintf_r+0x1f4>)
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d125      	bne.n	800af7e <_svfiprintf_r+0x1ae>
 800af32:	2207      	movs	r2, #7
 800af34:	9b07      	ldr	r3, [sp, #28]
 800af36:	3307      	adds	r3, #7
 800af38:	4393      	bics	r3, r2
 800af3a:	3308      	adds	r3, #8
 800af3c:	9307      	str	r3, [sp, #28]
 800af3e:	6963      	ldr	r3, [r4, #20]
 800af40:	9a04      	ldr	r2, [sp, #16]
 800af42:	189b      	adds	r3, r3, r2
 800af44:	6163      	str	r3, [r4, #20]
 800af46:	e766      	b.n	800ae16 <_svfiprintf_r+0x46>
 800af48:	4343      	muls	r3, r0
 800af4a:	2101      	movs	r1, #1
 800af4c:	189b      	adds	r3, r3, r2
 800af4e:	0035      	movs	r5, r6
 800af50:	e7a6      	b.n	800aea0 <_svfiprintf_r+0xd0>
 800af52:	2301      	movs	r3, #1
 800af54:	425b      	negs	r3, r3
 800af56:	e7d0      	b.n	800aefa <_svfiprintf_r+0x12a>
 800af58:	2300      	movs	r3, #0
 800af5a:	200a      	movs	r0, #10
 800af5c:	001a      	movs	r2, r3
 800af5e:	3501      	adds	r5, #1
 800af60:	6063      	str	r3, [r4, #4]
 800af62:	7829      	ldrb	r1, [r5, #0]
 800af64:	1c6e      	adds	r6, r5, #1
 800af66:	3930      	subs	r1, #48	; 0x30
 800af68:	2909      	cmp	r1, #9
 800af6a:	d903      	bls.n	800af74 <_svfiprintf_r+0x1a4>
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d0c5      	beq.n	800aefc <_svfiprintf_r+0x12c>
 800af70:	9209      	str	r2, [sp, #36]	; 0x24
 800af72:	e7c3      	b.n	800aefc <_svfiprintf_r+0x12c>
 800af74:	4342      	muls	r2, r0
 800af76:	2301      	movs	r3, #1
 800af78:	1852      	adds	r2, r2, r1
 800af7a:	0035      	movs	r5, r6
 800af7c:	e7f1      	b.n	800af62 <_svfiprintf_r+0x192>
 800af7e:	ab07      	add	r3, sp, #28
 800af80:	9300      	str	r3, [sp, #0]
 800af82:	003a      	movs	r2, r7
 800af84:	4b10      	ldr	r3, [pc, #64]	; (800afc8 <_svfiprintf_r+0x1f8>)
 800af86:	0021      	movs	r1, r4
 800af88:	9803      	ldr	r0, [sp, #12]
 800af8a:	e000      	b.n	800af8e <_svfiprintf_r+0x1be>
 800af8c:	bf00      	nop
 800af8e:	9004      	str	r0, [sp, #16]
 800af90:	9b04      	ldr	r3, [sp, #16]
 800af92:	3301      	adds	r3, #1
 800af94:	d1d3      	bne.n	800af3e <_svfiprintf_r+0x16e>
 800af96:	89bb      	ldrh	r3, [r7, #12]
 800af98:	980d      	ldr	r0, [sp, #52]	; 0x34
 800af9a:	065b      	lsls	r3, r3, #25
 800af9c:	d400      	bmi.n	800afa0 <_svfiprintf_r+0x1d0>
 800af9e:	e72e      	b.n	800adfe <_svfiprintf_r+0x2e>
 800afa0:	2001      	movs	r0, #1
 800afa2:	4240      	negs	r0, r0
 800afa4:	e72b      	b.n	800adfe <_svfiprintf_r+0x2e>
 800afa6:	ab07      	add	r3, sp, #28
 800afa8:	9300      	str	r3, [sp, #0]
 800afaa:	003a      	movs	r2, r7
 800afac:	4b06      	ldr	r3, [pc, #24]	; (800afc8 <_svfiprintf_r+0x1f8>)
 800afae:	0021      	movs	r1, r4
 800afb0:	9803      	ldr	r0, [sp, #12]
 800afb2:	f000 f879 	bl	800b0a8 <_printf_i>
 800afb6:	e7ea      	b.n	800af8e <_svfiprintf_r+0x1be>
 800afb8:	0800bf68 	.word	0x0800bf68
 800afbc:	0800bf6e 	.word	0x0800bf6e
 800afc0:	0800bf72 	.word	0x0800bf72
 800afc4:	00000000 	.word	0x00000000
 800afc8:	0800ad0d 	.word	0x0800ad0d

0800afcc <_printf_common>:
 800afcc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800afce:	0015      	movs	r5, r2
 800afd0:	9301      	str	r3, [sp, #4]
 800afd2:	688a      	ldr	r2, [r1, #8]
 800afd4:	690b      	ldr	r3, [r1, #16]
 800afd6:	9000      	str	r0, [sp, #0]
 800afd8:	000c      	movs	r4, r1
 800afda:	4293      	cmp	r3, r2
 800afdc:	da00      	bge.n	800afe0 <_printf_common+0x14>
 800afde:	0013      	movs	r3, r2
 800afe0:	0022      	movs	r2, r4
 800afe2:	602b      	str	r3, [r5, #0]
 800afe4:	3243      	adds	r2, #67	; 0x43
 800afe6:	7812      	ldrb	r2, [r2, #0]
 800afe8:	2a00      	cmp	r2, #0
 800afea:	d001      	beq.n	800aff0 <_printf_common+0x24>
 800afec:	3301      	adds	r3, #1
 800afee:	602b      	str	r3, [r5, #0]
 800aff0:	6823      	ldr	r3, [r4, #0]
 800aff2:	069b      	lsls	r3, r3, #26
 800aff4:	d502      	bpl.n	800affc <_printf_common+0x30>
 800aff6:	682b      	ldr	r3, [r5, #0]
 800aff8:	3302      	adds	r3, #2
 800affa:	602b      	str	r3, [r5, #0]
 800affc:	2706      	movs	r7, #6
 800affe:	6823      	ldr	r3, [r4, #0]
 800b000:	401f      	ands	r7, r3
 800b002:	d027      	beq.n	800b054 <_printf_common+0x88>
 800b004:	0023      	movs	r3, r4
 800b006:	3343      	adds	r3, #67	; 0x43
 800b008:	781b      	ldrb	r3, [r3, #0]
 800b00a:	1e5a      	subs	r2, r3, #1
 800b00c:	4193      	sbcs	r3, r2
 800b00e:	6822      	ldr	r2, [r4, #0]
 800b010:	0692      	lsls	r2, r2, #26
 800b012:	d430      	bmi.n	800b076 <_printf_common+0xaa>
 800b014:	0022      	movs	r2, r4
 800b016:	9901      	ldr	r1, [sp, #4]
 800b018:	3243      	adds	r2, #67	; 0x43
 800b01a:	9800      	ldr	r0, [sp, #0]
 800b01c:	9e08      	ldr	r6, [sp, #32]
 800b01e:	47b0      	blx	r6
 800b020:	1c43      	adds	r3, r0, #1
 800b022:	d025      	beq.n	800b070 <_printf_common+0xa4>
 800b024:	2306      	movs	r3, #6
 800b026:	6820      	ldr	r0, [r4, #0]
 800b028:	682a      	ldr	r2, [r5, #0]
 800b02a:	68e1      	ldr	r1, [r4, #12]
 800b02c:	4003      	ands	r3, r0
 800b02e:	2500      	movs	r5, #0
 800b030:	2b04      	cmp	r3, #4
 800b032:	d103      	bne.n	800b03c <_printf_common+0x70>
 800b034:	1a8d      	subs	r5, r1, r2
 800b036:	43eb      	mvns	r3, r5
 800b038:	17db      	asrs	r3, r3, #31
 800b03a:	401d      	ands	r5, r3
 800b03c:	68a3      	ldr	r3, [r4, #8]
 800b03e:	6922      	ldr	r2, [r4, #16]
 800b040:	4293      	cmp	r3, r2
 800b042:	dd01      	ble.n	800b048 <_printf_common+0x7c>
 800b044:	1a9b      	subs	r3, r3, r2
 800b046:	18ed      	adds	r5, r5, r3
 800b048:	2700      	movs	r7, #0
 800b04a:	42bd      	cmp	r5, r7
 800b04c:	d120      	bne.n	800b090 <_printf_common+0xc4>
 800b04e:	2000      	movs	r0, #0
 800b050:	e010      	b.n	800b074 <_printf_common+0xa8>
 800b052:	3701      	adds	r7, #1
 800b054:	68e3      	ldr	r3, [r4, #12]
 800b056:	682a      	ldr	r2, [r5, #0]
 800b058:	1a9b      	subs	r3, r3, r2
 800b05a:	42bb      	cmp	r3, r7
 800b05c:	ddd2      	ble.n	800b004 <_printf_common+0x38>
 800b05e:	0022      	movs	r2, r4
 800b060:	2301      	movs	r3, #1
 800b062:	3219      	adds	r2, #25
 800b064:	9901      	ldr	r1, [sp, #4]
 800b066:	9800      	ldr	r0, [sp, #0]
 800b068:	9e08      	ldr	r6, [sp, #32]
 800b06a:	47b0      	blx	r6
 800b06c:	1c43      	adds	r3, r0, #1
 800b06e:	d1f0      	bne.n	800b052 <_printf_common+0x86>
 800b070:	2001      	movs	r0, #1
 800b072:	4240      	negs	r0, r0
 800b074:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b076:	2030      	movs	r0, #48	; 0x30
 800b078:	18e1      	adds	r1, r4, r3
 800b07a:	3143      	adds	r1, #67	; 0x43
 800b07c:	7008      	strb	r0, [r1, #0]
 800b07e:	0021      	movs	r1, r4
 800b080:	1c5a      	adds	r2, r3, #1
 800b082:	3145      	adds	r1, #69	; 0x45
 800b084:	7809      	ldrb	r1, [r1, #0]
 800b086:	18a2      	adds	r2, r4, r2
 800b088:	3243      	adds	r2, #67	; 0x43
 800b08a:	3302      	adds	r3, #2
 800b08c:	7011      	strb	r1, [r2, #0]
 800b08e:	e7c1      	b.n	800b014 <_printf_common+0x48>
 800b090:	0022      	movs	r2, r4
 800b092:	2301      	movs	r3, #1
 800b094:	321a      	adds	r2, #26
 800b096:	9901      	ldr	r1, [sp, #4]
 800b098:	9800      	ldr	r0, [sp, #0]
 800b09a:	9e08      	ldr	r6, [sp, #32]
 800b09c:	47b0      	blx	r6
 800b09e:	1c43      	adds	r3, r0, #1
 800b0a0:	d0e6      	beq.n	800b070 <_printf_common+0xa4>
 800b0a2:	3701      	adds	r7, #1
 800b0a4:	e7d1      	b.n	800b04a <_printf_common+0x7e>
	...

0800b0a8 <_printf_i>:
 800b0a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b0aa:	b089      	sub	sp, #36	; 0x24
 800b0ac:	9204      	str	r2, [sp, #16]
 800b0ae:	000a      	movs	r2, r1
 800b0b0:	3243      	adds	r2, #67	; 0x43
 800b0b2:	9305      	str	r3, [sp, #20]
 800b0b4:	9003      	str	r0, [sp, #12]
 800b0b6:	9202      	str	r2, [sp, #8]
 800b0b8:	7e0a      	ldrb	r2, [r1, #24]
 800b0ba:	000c      	movs	r4, r1
 800b0bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b0be:	2a6e      	cmp	r2, #110	; 0x6e
 800b0c0:	d100      	bne.n	800b0c4 <_printf_i+0x1c>
 800b0c2:	e086      	b.n	800b1d2 <_printf_i+0x12a>
 800b0c4:	d81f      	bhi.n	800b106 <_printf_i+0x5e>
 800b0c6:	2a63      	cmp	r2, #99	; 0x63
 800b0c8:	d033      	beq.n	800b132 <_printf_i+0x8a>
 800b0ca:	d808      	bhi.n	800b0de <_printf_i+0x36>
 800b0cc:	2a00      	cmp	r2, #0
 800b0ce:	d100      	bne.n	800b0d2 <_printf_i+0x2a>
 800b0d0:	e08c      	b.n	800b1ec <_printf_i+0x144>
 800b0d2:	2a58      	cmp	r2, #88	; 0x58
 800b0d4:	d04d      	beq.n	800b172 <_printf_i+0xca>
 800b0d6:	0025      	movs	r5, r4
 800b0d8:	3542      	adds	r5, #66	; 0x42
 800b0da:	702a      	strb	r2, [r5, #0]
 800b0dc:	e030      	b.n	800b140 <_printf_i+0x98>
 800b0de:	2a64      	cmp	r2, #100	; 0x64
 800b0e0:	d001      	beq.n	800b0e6 <_printf_i+0x3e>
 800b0e2:	2a69      	cmp	r2, #105	; 0x69
 800b0e4:	d1f7      	bne.n	800b0d6 <_printf_i+0x2e>
 800b0e6:	6819      	ldr	r1, [r3, #0]
 800b0e8:	6825      	ldr	r5, [r4, #0]
 800b0ea:	1d0a      	adds	r2, r1, #4
 800b0ec:	0628      	lsls	r0, r5, #24
 800b0ee:	d529      	bpl.n	800b144 <_printf_i+0x9c>
 800b0f0:	6808      	ldr	r0, [r1, #0]
 800b0f2:	601a      	str	r2, [r3, #0]
 800b0f4:	2800      	cmp	r0, #0
 800b0f6:	da03      	bge.n	800b100 <_printf_i+0x58>
 800b0f8:	232d      	movs	r3, #45	; 0x2d
 800b0fa:	9a02      	ldr	r2, [sp, #8]
 800b0fc:	4240      	negs	r0, r0
 800b0fe:	7013      	strb	r3, [r2, #0]
 800b100:	4e6b      	ldr	r6, [pc, #428]	; (800b2b0 <_printf_i+0x208>)
 800b102:	270a      	movs	r7, #10
 800b104:	e04f      	b.n	800b1a6 <_printf_i+0xfe>
 800b106:	2a73      	cmp	r2, #115	; 0x73
 800b108:	d074      	beq.n	800b1f4 <_printf_i+0x14c>
 800b10a:	d808      	bhi.n	800b11e <_printf_i+0x76>
 800b10c:	2a6f      	cmp	r2, #111	; 0x6f
 800b10e:	d01f      	beq.n	800b150 <_printf_i+0xa8>
 800b110:	2a70      	cmp	r2, #112	; 0x70
 800b112:	d1e0      	bne.n	800b0d6 <_printf_i+0x2e>
 800b114:	2220      	movs	r2, #32
 800b116:	6809      	ldr	r1, [r1, #0]
 800b118:	430a      	orrs	r2, r1
 800b11a:	6022      	str	r2, [r4, #0]
 800b11c:	e003      	b.n	800b126 <_printf_i+0x7e>
 800b11e:	2a75      	cmp	r2, #117	; 0x75
 800b120:	d016      	beq.n	800b150 <_printf_i+0xa8>
 800b122:	2a78      	cmp	r2, #120	; 0x78
 800b124:	d1d7      	bne.n	800b0d6 <_printf_i+0x2e>
 800b126:	0022      	movs	r2, r4
 800b128:	2178      	movs	r1, #120	; 0x78
 800b12a:	3245      	adds	r2, #69	; 0x45
 800b12c:	7011      	strb	r1, [r2, #0]
 800b12e:	4e61      	ldr	r6, [pc, #388]	; (800b2b4 <_printf_i+0x20c>)
 800b130:	e022      	b.n	800b178 <_printf_i+0xd0>
 800b132:	0025      	movs	r5, r4
 800b134:	681a      	ldr	r2, [r3, #0]
 800b136:	3542      	adds	r5, #66	; 0x42
 800b138:	1d11      	adds	r1, r2, #4
 800b13a:	6019      	str	r1, [r3, #0]
 800b13c:	6813      	ldr	r3, [r2, #0]
 800b13e:	702b      	strb	r3, [r5, #0]
 800b140:	2301      	movs	r3, #1
 800b142:	e065      	b.n	800b210 <_printf_i+0x168>
 800b144:	6808      	ldr	r0, [r1, #0]
 800b146:	601a      	str	r2, [r3, #0]
 800b148:	0669      	lsls	r1, r5, #25
 800b14a:	d5d3      	bpl.n	800b0f4 <_printf_i+0x4c>
 800b14c:	b200      	sxth	r0, r0
 800b14e:	e7d1      	b.n	800b0f4 <_printf_i+0x4c>
 800b150:	6819      	ldr	r1, [r3, #0]
 800b152:	6825      	ldr	r5, [r4, #0]
 800b154:	1d08      	adds	r0, r1, #4
 800b156:	6018      	str	r0, [r3, #0]
 800b158:	6808      	ldr	r0, [r1, #0]
 800b15a:	062e      	lsls	r6, r5, #24
 800b15c:	d505      	bpl.n	800b16a <_printf_i+0xc2>
 800b15e:	4e54      	ldr	r6, [pc, #336]	; (800b2b0 <_printf_i+0x208>)
 800b160:	2708      	movs	r7, #8
 800b162:	2a6f      	cmp	r2, #111	; 0x6f
 800b164:	d01b      	beq.n	800b19e <_printf_i+0xf6>
 800b166:	270a      	movs	r7, #10
 800b168:	e019      	b.n	800b19e <_printf_i+0xf6>
 800b16a:	066d      	lsls	r5, r5, #25
 800b16c:	d5f7      	bpl.n	800b15e <_printf_i+0xb6>
 800b16e:	b280      	uxth	r0, r0
 800b170:	e7f5      	b.n	800b15e <_printf_i+0xb6>
 800b172:	3145      	adds	r1, #69	; 0x45
 800b174:	4e4e      	ldr	r6, [pc, #312]	; (800b2b0 <_printf_i+0x208>)
 800b176:	700a      	strb	r2, [r1, #0]
 800b178:	6818      	ldr	r0, [r3, #0]
 800b17a:	6822      	ldr	r2, [r4, #0]
 800b17c:	1d01      	adds	r1, r0, #4
 800b17e:	6800      	ldr	r0, [r0, #0]
 800b180:	6019      	str	r1, [r3, #0]
 800b182:	0615      	lsls	r5, r2, #24
 800b184:	d521      	bpl.n	800b1ca <_printf_i+0x122>
 800b186:	07d3      	lsls	r3, r2, #31
 800b188:	d502      	bpl.n	800b190 <_printf_i+0xe8>
 800b18a:	2320      	movs	r3, #32
 800b18c:	431a      	orrs	r2, r3
 800b18e:	6022      	str	r2, [r4, #0]
 800b190:	2710      	movs	r7, #16
 800b192:	2800      	cmp	r0, #0
 800b194:	d103      	bne.n	800b19e <_printf_i+0xf6>
 800b196:	2320      	movs	r3, #32
 800b198:	6822      	ldr	r2, [r4, #0]
 800b19a:	439a      	bics	r2, r3
 800b19c:	6022      	str	r2, [r4, #0]
 800b19e:	0023      	movs	r3, r4
 800b1a0:	2200      	movs	r2, #0
 800b1a2:	3343      	adds	r3, #67	; 0x43
 800b1a4:	701a      	strb	r2, [r3, #0]
 800b1a6:	6863      	ldr	r3, [r4, #4]
 800b1a8:	60a3      	str	r3, [r4, #8]
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	db58      	blt.n	800b260 <_printf_i+0x1b8>
 800b1ae:	2204      	movs	r2, #4
 800b1b0:	6821      	ldr	r1, [r4, #0]
 800b1b2:	4391      	bics	r1, r2
 800b1b4:	6021      	str	r1, [r4, #0]
 800b1b6:	2800      	cmp	r0, #0
 800b1b8:	d154      	bne.n	800b264 <_printf_i+0x1bc>
 800b1ba:	9d02      	ldr	r5, [sp, #8]
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d05a      	beq.n	800b276 <_printf_i+0x1ce>
 800b1c0:	0025      	movs	r5, r4
 800b1c2:	7833      	ldrb	r3, [r6, #0]
 800b1c4:	3542      	adds	r5, #66	; 0x42
 800b1c6:	702b      	strb	r3, [r5, #0]
 800b1c8:	e055      	b.n	800b276 <_printf_i+0x1ce>
 800b1ca:	0655      	lsls	r5, r2, #25
 800b1cc:	d5db      	bpl.n	800b186 <_printf_i+0xde>
 800b1ce:	b280      	uxth	r0, r0
 800b1d0:	e7d9      	b.n	800b186 <_printf_i+0xde>
 800b1d2:	681a      	ldr	r2, [r3, #0]
 800b1d4:	680d      	ldr	r5, [r1, #0]
 800b1d6:	1d10      	adds	r0, r2, #4
 800b1d8:	6949      	ldr	r1, [r1, #20]
 800b1da:	6018      	str	r0, [r3, #0]
 800b1dc:	6813      	ldr	r3, [r2, #0]
 800b1de:	062e      	lsls	r6, r5, #24
 800b1e0:	d501      	bpl.n	800b1e6 <_printf_i+0x13e>
 800b1e2:	6019      	str	r1, [r3, #0]
 800b1e4:	e002      	b.n	800b1ec <_printf_i+0x144>
 800b1e6:	066d      	lsls	r5, r5, #25
 800b1e8:	d5fb      	bpl.n	800b1e2 <_printf_i+0x13a>
 800b1ea:	8019      	strh	r1, [r3, #0]
 800b1ec:	2300      	movs	r3, #0
 800b1ee:	9d02      	ldr	r5, [sp, #8]
 800b1f0:	6123      	str	r3, [r4, #16]
 800b1f2:	e04f      	b.n	800b294 <_printf_i+0x1ec>
 800b1f4:	681a      	ldr	r2, [r3, #0]
 800b1f6:	1d11      	adds	r1, r2, #4
 800b1f8:	6019      	str	r1, [r3, #0]
 800b1fa:	6815      	ldr	r5, [r2, #0]
 800b1fc:	2100      	movs	r1, #0
 800b1fe:	6862      	ldr	r2, [r4, #4]
 800b200:	0028      	movs	r0, r5
 800b202:	f000 f859 	bl	800b2b8 <memchr>
 800b206:	2800      	cmp	r0, #0
 800b208:	d001      	beq.n	800b20e <_printf_i+0x166>
 800b20a:	1b40      	subs	r0, r0, r5
 800b20c:	6060      	str	r0, [r4, #4]
 800b20e:	6863      	ldr	r3, [r4, #4]
 800b210:	6123      	str	r3, [r4, #16]
 800b212:	2300      	movs	r3, #0
 800b214:	9a02      	ldr	r2, [sp, #8]
 800b216:	7013      	strb	r3, [r2, #0]
 800b218:	e03c      	b.n	800b294 <_printf_i+0x1ec>
 800b21a:	6923      	ldr	r3, [r4, #16]
 800b21c:	002a      	movs	r2, r5
 800b21e:	9904      	ldr	r1, [sp, #16]
 800b220:	9803      	ldr	r0, [sp, #12]
 800b222:	9d05      	ldr	r5, [sp, #20]
 800b224:	47a8      	blx	r5
 800b226:	1c43      	adds	r3, r0, #1
 800b228:	d03e      	beq.n	800b2a8 <_printf_i+0x200>
 800b22a:	6823      	ldr	r3, [r4, #0]
 800b22c:	079b      	lsls	r3, r3, #30
 800b22e:	d415      	bmi.n	800b25c <_printf_i+0x1b4>
 800b230:	9b07      	ldr	r3, [sp, #28]
 800b232:	68e0      	ldr	r0, [r4, #12]
 800b234:	4298      	cmp	r0, r3
 800b236:	da39      	bge.n	800b2ac <_printf_i+0x204>
 800b238:	0018      	movs	r0, r3
 800b23a:	e037      	b.n	800b2ac <_printf_i+0x204>
 800b23c:	0022      	movs	r2, r4
 800b23e:	2301      	movs	r3, #1
 800b240:	3219      	adds	r2, #25
 800b242:	9904      	ldr	r1, [sp, #16]
 800b244:	9803      	ldr	r0, [sp, #12]
 800b246:	9e05      	ldr	r6, [sp, #20]
 800b248:	47b0      	blx	r6
 800b24a:	1c43      	adds	r3, r0, #1
 800b24c:	d02c      	beq.n	800b2a8 <_printf_i+0x200>
 800b24e:	3501      	adds	r5, #1
 800b250:	68e3      	ldr	r3, [r4, #12]
 800b252:	9a07      	ldr	r2, [sp, #28]
 800b254:	1a9b      	subs	r3, r3, r2
 800b256:	42ab      	cmp	r3, r5
 800b258:	dcf0      	bgt.n	800b23c <_printf_i+0x194>
 800b25a:	e7e9      	b.n	800b230 <_printf_i+0x188>
 800b25c:	2500      	movs	r5, #0
 800b25e:	e7f7      	b.n	800b250 <_printf_i+0x1a8>
 800b260:	2800      	cmp	r0, #0
 800b262:	d0ad      	beq.n	800b1c0 <_printf_i+0x118>
 800b264:	9d02      	ldr	r5, [sp, #8]
 800b266:	0039      	movs	r1, r7
 800b268:	f7f4 ffdc 	bl	8000224 <__aeabi_uidivmod>
 800b26c:	5c73      	ldrb	r3, [r6, r1]
 800b26e:	3d01      	subs	r5, #1
 800b270:	702b      	strb	r3, [r5, #0]
 800b272:	2800      	cmp	r0, #0
 800b274:	d1f7      	bne.n	800b266 <_printf_i+0x1be>
 800b276:	2f08      	cmp	r7, #8
 800b278:	d109      	bne.n	800b28e <_printf_i+0x1e6>
 800b27a:	6823      	ldr	r3, [r4, #0]
 800b27c:	07db      	lsls	r3, r3, #31
 800b27e:	d506      	bpl.n	800b28e <_printf_i+0x1e6>
 800b280:	6863      	ldr	r3, [r4, #4]
 800b282:	6922      	ldr	r2, [r4, #16]
 800b284:	4293      	cmp	r3, r2
 800b286:	dc02      	bgt.n	800b28e <_printf_i+0x1e6>
 800b288:	2330      	movs	r3, #48	; 0x30
 800b28a:	3d01      	subs	r5, #1
 800b28c:	702b      	strb	r3, [r5, #0]
 800b28e:	9b02      	ldr	r3, [sp, #8]
 800b290:	1b5b      	subs	r3, r3, r5
 800b292:	6123      	str	r3, [r4, #16]
 800b294:	9b05      	ldr	r3, [sp, #20]
 800b296:	aa07      	add	r2, sp, #28
 800b298:	9300      	str	r3, [sp, #0]
 800b29a:	0021      	movs	r1, r4
 800b29c:	9b04      	ldr	r3, [sp, #16]
 800b29e:	9803      	ldr	r0, [sp, #12]
 800b2a0:	f7ff fe94 	bl	800afcc <_printf_common>
 800b2a4:	1c43      	adds	r3, r0, #1
 800b2a6:	d1b8      	bne.n	800b21a <_printf_i+0x172>
 800b2a8:	2001      	movs	r0, #1
 800b2aa:	4240      	negs	r0, r0
 800b2ac:	b009      	add	sp, #36	; 0x24
 800b2ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b2b0:	0800bf79 	.word	0x0800bf79
 800b2b4:	0800bf8a 	.word	0x0800bf8a

0800b2b8 <memchr>:
 800b2b8:	b2c9      	uxtb	r1, r1
 800b2ba:	1882      	adds	r2, r0, r2
 800b2bc:	4290      	cmp	r0, r2
 800b2be:	d101      	bne.n	800b2c4 <memchr+0xc>
 800b2c0:	2000      	movs	r0, #0
 800b2c2:	4770      	bx	lr
 800b2c4:	7803      	ldrb	r3, [r0, #0]
 800b2c6:	428b      	cmp	r3, r1
 800b2c8:	d0fb      	beq.n	800b2c2 <memchr+0xa>
 800b2ca:	3001      	adds	r0, #1
 800b2cc:	e7f6      	b.n	800b2bc <memchr+0x4>

0800b2ce <memmove>:
 800b2ce:	b510      	push	{r4, lr}
 800b2d0:	4288      	cmp	r0, r1
 800b2d2:	d902      	bls.n	800b2da <memmove+0xc>
 800b2d4:	188b      	adds	r3, r1, r2
 800b2d6:	4298      	cmp	r0, r3
 800b2d8:	d303      	bcc.n	800b2e2 <memmove+0x14>
 800b2da:	2300      	movs	r3, #0
 800b2dc:	e007      	b.n	800b2ee <memmove+0x20>
 800b2de:	5c8b      	ldrb	r3, [r1, r2]
 800b2e0:	5483      	strb	r3, [r0, r2]
 800b2e2:	3a01      	subs	r2, #1
 800b2e4:	d2fb      	bcs.n	800b2de <memmove+0x10>
 800b2e6:	bd10      	pop	{r4, pc}
 800b2e8:	5ccc      	ldrb	r4, [r1, r3]
 800b2ea:	54c4      	strb	r4, [r0, r3]
 800b2ec:	3301      	adds	r3, #1
 800b2ee:	429a      	cmp	r2, r3
 800b2f0:	d1fa      	bne.n	800b2e8 <memmove+0x1a>
 800b2f2:	e7f8      	b.n	800b2e6 <memmove+0x18>

0800b2f4 <_free_r>:
 800b2f4:	b570      	push	{r4, r5, r6, lr}
 800b2f6:	0005      	movs	r5, r0
 800b2f8:	2900      	cmp	r1, #0
 800b2fa:	d010      	beq.n	800b31e <_free_r+0x2a>
 800b2fc:	1f0c      	subs	r4, r1, #4
 800b2fe:	6823      	ldr	r3, [r4, #0]
 800b300:	2b00      	cmp	r3, #0
 800b302:	da00      	bge.n	800b306 <_free_r+0x12>
 800b304:	18e4      	adds	r4, r4, r3
 800b306:	0028      	movs	r0, r5
 800b308:	f7ff fcfe 	bl	800ad08 <__malloc_lock>
 800b30c:	4a1d      	ldr	r2, [pc, #116]	; (800b384 <_free_r+0x90>)
 800b30e:	6813      	ldr	r3, [r2, #0]
 800b310:	2b00      	cmp	r3, #0
 800b312:	d105      	bne.n	800b320 <_free_r+0x2c>
 800b314:	6063      	str	r3, [r4, #4]
 800b316:	6014      	str	r4, [r2, #0]
 800b318:	0028      	movs	r0, r5
 800b31a:	f7ff fcf6 	bl	800ad0a <__malloc_unlock>
 800b31e:	bd70      	pop	{r4, r5, r6, pc}
 800b320:	42a3      	cmp	r3, r4
 800b322:	d909      	bls.n	800b338 <_free_r+0x44>
 800b324:	6821      	ldr	r1, [r4, #0]
 800b326:	1860      	adds	r0, r4, r1
 800b328:	4283      	cmp	r3, r0
 800b32a:	d1f3      	bne.n	800b314 <_free_r+0x20>
 800b32c:	6818      	ldr	r0, [r3, #0]
 800b32e:	685b      	ldr	r3, [r3, #4]
 800b330:	1841      	adds	r1, r0, r1
 800b332:	6021      	str	r1, [r4, #0]
 800b334:	e7ee      	b.n	800b314 <_free_r+0x20>
 800b336:	0013      	movs	r3, r2
 800b338:	685a      	ldr	r2, [r3, #4]
 800b33a:	2a00      	cmp	r2, #0
 800b33c:	d001      	beq.n	800b342 <_free_r+0x4e>
 800b33e:	42a2      	cmp	r2, r4
 800b340:	d9f9      	bls.n	800b336 <_free_r+0x42>
 800b342:	6819      	ldr	r1, [r3, #0]
 800b344:	1858      	adds	r0, r3, r1
 800b346:	42a0      	cmp	r0, r4
 800b348:	d10b      	bne.n	800b362 <_free_r+0x6e>
 800b34a:	6820      	ldr	r0, [r4, #0]
 800b34c:	1809      	adds	r1, r1, r0
 800b34e:	1858      	adds	r0, r3, r1
 800b350:	6019      	str	r1, [r3, #0]
 800b352:	4282      	cmp	r2, r0
 800b354:	d1e0      	bne.n	800b318 <_free_r+0x24>
 800b356:	6810      	ldr	r0, [r2, #0]
 800b358:	6852      	ldr	r2, [r2, #4]
 800b35a:	1841      	adds	r1, r0, r1
 800b35c:	6019      	str	r1, [r3, #0]
 800b35e:	605a      	str	r2, [r3, #4]
 800b360:	e7da      	b.n	800b318 <_free_r+0x24>
 800b362:	42a0      	cmp	r0, r4
 800b364:	d902      	bls.n	800b36c <_free_r+0x78>
 800b366:	230c      	movs	r3, #12
 800b368:	602b      	str	r3, [r5, #0]
 800b36a:	e7d5      	b.n	800b318 <_free_r+0x24>
 800b36c:	6821      	ldr	r1, [r4, #0]
 800b36e:	1860      	adds	r0, r4, r1
 800b370:	4282      	cmp	r2, r0
 800b372:	d103      	bne.n	800b37c <_free_r+0x88>
 800b374:	6810      	ldr	r0, [r2, #0]
 800b376:	6852      	ldr	r2, [r2, #4]
 800b378:	1841      	adds	r1, r0, r1
 800b37a:	6021      	str	r1, [r4, #0]
 800b37c:	6062      	str	r2, [r4, #4]
 800b37e:	605c      	str	r4, [r3, #4]
 800b380:	e7ca      	b.n	800b318 <_free_r+0x24>
 800b382:	46c0      	nop			; (mov r8, r8)
 800b384:	20000138 	.word	0x20000138

0800b388 <_realloc_r>:
 800b388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b38a:	0007      	movs	r7, r0
 800b38c:	000d      	movs	r5, r1
 800b38e:	0016      	movs	r6, r2
 800b390:	2900      	cmp	r1, #0
 800b392:	d105      	bne.n	800b3a0 <_realloc_r+0x18>
 800b394:	0011      	movs	r1, r2
 800b396:	f7ff fc27 	bl	800abe8 <_malloc_r>
 800b39a:	0004      	movs	r4, r0
 800b39c:	0020      	movs	r0, r4
 800b39e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b3a0:	2a00      	cmp	r2, #0
 800b3a2:	d103      	bne.n	800b3ac <_realloc_r+0x24>
 800b3a4:	f7ff ffa6 	bl	800b2f4 <_free_r>
 800b3a8:	0034      	movs	r4, r6
 800b3aa:	e7f7      	b.n	800b39c <_realloc_r+0x14>
 800b3ac:	f000 f812 	bl	800b3d4 <_malloc_usable_size_r>
 800b3b0:	002c      	movs	r4, r5
 800b3b2:	42b0      	cmp	r0, r6
 800b3b4:	d2f2      	bcs.n	800b39c <_realloc_r+0x14>
 800b3b6:	0031      	movs	r1, r6
 800b3b8:	0038      	movs	r0, r7
 800b3ba:	f7ff fc15 	bl	800abe8 <_malloc_r>
 800b3be:	1e04      	subs	r4, r0, #0
 800b3c0:	d0ec      	beq.n	800b39c <_realloc_r+0x14>
 800b3c2:	0029      	movs	r1, r5
 800b3c4:	0032      	movs	r2, r6
 800b3c6:	f7ff fbef 	bl	800aba8 <memcpy>
 800b3ca:	0029      	movs	r1, r5
 800b3cc:	0038      	movs	r0, r7
 800b3ce:	f7ff ff91 	bl	800b2f4 <_free_r>
 800b3d2:	e7e3      	b.n	800b39c <_realloc_r+0x14>

0800b3d4 <_malloc_usable_size_r>:
 800b3d4:	1f0b      	subs	r3, r1, #4
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	1f18      	subs	r0, r3, #4
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	da01      	bge.n	800b3e2 <_malloc_usable_size_r+0xe>
 800b3de:	580b      	ldr	r3, [r1, r0]
 800b3e0:	18c0      	adds	r0, r0, r3
 800b3e2:	4770      	bx	lr

0800b3e4 <_init>:
 800b3e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3e6:	46c0      	nop			; (mov r8, r8)
 800b3e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b3ea:	bc08      	pop	{r3}
 800b3ec:	469e      	mov	lr, r3
 800b3ee:	4770      	bx	lr

0800b3f0 <_fini>:
 800b3f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3f2:	46c0      	nop			; (mov r8, r8)
 800b3f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b3f6:	bc08      	pop	{r3}
 800b3f8:	469e      	mov	lr, r3
 800b3fa:	4770      	bx	lr
