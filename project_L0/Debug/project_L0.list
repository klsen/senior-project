
project_L0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c100  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c68  0800c1c0  0800c1c0  0001c1c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ce28  0800ce28  000200d8  2**0
                  CONTENTS
  4 .ARM          00000000  0800ce28  0800ce28  000200d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ce28  0800ce28  000200d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ce28  0800ce28  0001ce28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ce2c  0800ce2c  0001ce2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d8  20000000  0800ce30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005dc  200000d8  0800cf08  000200d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006b4  0800cf08  000206b4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d057  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003840  00000000  00000000  0003d157  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001530  00000000  00000000  00040998  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001360  00000000  00000000  00041ec8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018bf6  00000000  00000000  00043228  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000134ed  00000000  00000000  0005be1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008f596  00000000  00000000  0006f30b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000fe8a1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000050f4  00000000  00000000  000fe91c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200000d8 	.word	0x200000d8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800c1a8 	.word	0x0800c1a8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200000dc 	.word	0x200000dc
 8000104:	0800c1a8 	.word	0x0800c1a8

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f8f0 	bl	8000400 <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__divsi3>:
 800022c:	4603      	mov	r3, r0
 800022e:	430b      	orrs	r3, r1
 8000230:	d47f      	bmi.n	8000332 <__divsi3+0x106>
 8000232:	2200      	movs	r2, #0
 8000234:	0843      	lsrs	r3, r0, #1
 8000236:	428b      	cmp	r3, r1
 8000238:	d374      	bcc.n	8000324 <__divsi3+0xf8>
 800023a:	0903      	lsrs	r3, r0, #4
 800023c:	428b      	cmp	r3, r1
 800023e:	d35f      	bcc.n	8000300 <__divsi3+0xd4>
 8000240:	0a03      	lsrs	r3, r0, #8
 8000242:	428b      	cmp	r3, r1
 8000244:	d344      	bcc.n	80002d0 <__divsi3+0xa4>
 8000246:	0b03      	lsrs	r3, r0, #12
 8000248:	428b      	cmp	r3, r1
 800024a:	d328      	bcc.n	800029e <__divsi3+0x72>
 800024c:	0c03      	lsrs	r3, r0, #16
 800024e:	428b      	cmp	r3, r1
 8000250:	d30d      	bcc.n	800026e <__divsi3+0x42>
 8000252:	22ff      	movs	r2, #255	; 0xff
 8000254:	0209      	lsls	r1, r1, #8
 8000256:	ba12      	rev	r2, r2
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d302      	bcc.n	8000264 <__divsi3+0x38>
 800025e:	1212      	asrs	r2, r2, #8
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	d065      	beq.n	8000330 <__divsi3+0x104>
 8000264:	0b03      	lsrs	r3, r0, #12
 8000266:	428b      	cmp	r3, r1
 8000268:	d319      	bcc.n	800029e <__divsi3+0x72>
 800026a:	e000      	b.n	800026e <__divsi3+0x42>
 800026c:	0a09      	lsrs	r1, r1, #8
 800026e:	0bc3      	lsrs	r3, r0, #15
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x4c>
 8000274:	03cb      	lsls	r3, r1, #15
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b83      	lsrs	r3, r0, #14
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x58>
 8000280:	038b      	lsls	r3, r1, #14
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b43      	lsrs	r3, r0, #13
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x64>
 800028c:	034b      	lsls	r3, r1, #13
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b03      	lsrs	r3, r0, #12
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x70>
 8000298:	030b      	lsls	r3, r1, #12
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0ac3      	lsrs	r3, r0, #11
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x7c>
 80002a4:	02cb      	lsls	r3, r1, #11
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a83      	lsrs	r3, r0, #10
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x88>
 80002b0:	028b      	lsls	r3, r1, #10
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a43      	lsrs	r3, r0, #9
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x94>
 80002bc:	024b      	lsls	r3, r1, #9
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a03      	lsrs	r3, r0, #8
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0xa0>
 80002c8:	020b      	lsls	r3, r1, #8
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	d2cd      	bcs.n	800026c <__divsi3+0x40>
 80002d0:	09c3      	lsrs	r3, r0, #7
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xae>
 80002d6:	01cb      	lsls	r3, r1, #7
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0983      	lsrs	r3, r0, #6
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xba>
 80002e2:	018b      	lsls	r3, r1, #6
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0943      	lsrs	r3, r0, #5
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xc6>
 80002ee:	014b      	lsls	r3, r1, #5
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0903      	lsrs	r3, r0, #4
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xd2>
 80002fa:	010b      	lsls	r3, r1, #4
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	08c3      	lsrs	r3, r0, #3
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xde>
 8000306:	00cb      	lsls	r3, r1, #3
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0883      	lsrs	r3, r0, #2
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xea>
 8000312:	008b      	lsls	r3, r1, #2
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0843      	lsrs	r3, r0, #1
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xf6>
 800031e:	004b      	lsls	r3, r1, #1
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	1a41      	subs	r1, r0, r1
 8000326:	d200      	bcs.n	800032a <__divsi3+0xfe>
 8000328:	4601      	mov	r1, r0
 800032a:	4152      	adcs	r2, r2
 800032c:	4610      	mov	r0, r2
 800032e:	4770      	bx	lr
 8000330:	e05d      	b.n	80003ee <__divsi3+0x1c2>
 8000332:	0fca      	lsrs	r2, r1, #31
 8000334:	d000      	beq.n	8000338 <__divsi3+0x10c>
 8000336:	4249      	negs	r1, r1
 8000338:	1003      	asrs	r3, r0, #32
 800033a:	d300      	bcc.n	800033e <__divsi3+0x112>
 800033c:	4240      	negs	r0, r0
 800033e:	4053      	eors	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	469c      	mov	ip, r3
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d32d      	bcc.n	80003a6 <__divsi3+0x17a>
 800034a:	0a03      	lsrs	r3, r0, #8
 800034c:	428b      	cmp	r3, r1
 800034e:	d312      	bcc.n	8000376 <__divsi3+0x14a>
 8000350:	22fc      	movs	r2, #252	; 0xfc
 8000352:	0189      	lsls	r1, r1, #6
 8000354:	ba12      	rev	r2, r2
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d30c      	bcc.n	8000376 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d308      	bcc.n	8000376 <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	1192      	asrs	r2, r2, #6
 8000368:	428b      	cmp	r3, r1
 800036a:	d304      	bcc.n	8000376 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	d03a      	beq.n	80003e6 <__divsi3+0x1ba>
 8000370:	1192      	asrs	r2, r2, #6
 8000372:	e000      	b.n	8000376 <__divsi3+0x14a>
 8000374:	0989      	lsrs	r1, r1, #6
 8000376:	09c3      	lsrs	r3, r0, #7
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x154>
 800037c:	01cb      	lsls	r3, r1, #7
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0983      	lsrs	r3, r0, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x160>
 8000388:	018b      	lsls	r3, r1, #6
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0943      	lsrs	r3, r0, #5
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x16c>
 8000394:	014b      	lsls	r3, r1, #5
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0903      	lsrs	r3, r0, #4
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x178>
 80003a0:	010b      	lsls	r3, r1, #4
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	08c3      	lsrs	r3, r0, #3
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x184>
 80003ac:	00cb      	lsls	r3, r1, #3
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0883      	lsrs	r3, r0, #2
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x190>
 80003b8:	008b      	lsls	r3, r1, #2
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	d2d9      	bcs.n	8000374 <__divsi3+0x148>
 80003c0:	0843      	lsrs	r3, r0, #1
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d301      	bcc.n	80003ca <__divsi3+0x19e>
 80003c6:	004b      	lsls	r3, r1, #1
 80003c8:	1ac0      	subs	r0, r0, r3
 80003ca:	4152      	adcs	r2, r2
 80003cc:	1a41      	subs	r1, r0, r1
 80003ce:	d200      	bcs.n	80003d2 <__divsi3+0x1a6>
 80003d0:	4601      	mov	r1, r0
 80003d2:	4663      	mov	r3, ip
 80003d4:	4152      	adcs	r2, r2
 80003d6:	105b      	asrs	r3, r3, #1
 80003d8:	4610      	mov	r0, r2
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x1b4>
 80003dc:	4240      	negs	r0, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d500      	bpl.n	80003e4 <__divsi3+0x1b8>
 80003e2:	4249      	negs	r1, r1
 80003e4:	4770      	bx	lr
 80003e6:	4663      	mov	r3, ip
 80003e8:	105b      	asrs	r3, r3, #1
 80003ea:	d300      	bcc.n	80003ee <__divsi3+0x1c2>
 80003ec:	4240      	negs	r0, r0
 80003ee:	b501      	push	{r0, lr}
 80003f0:	2000      	movs	r0, #0
 80003f2:	f000 f805 	bl	8000400 <__aeabi_idiv0>
 80003f6:	bd02      	pop	{r1, pc}

080003f8 <__aeabi_idivmod>:
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d0f8      	beq.n	80003ee <__divsi3+0x1c2>
 80003fc:	e716      	b.n	800022c <__divsi3>
 80003fe:	4770      	bx	lr

08000400 <__aeabi_idiv0>:
 8000400:	4770      	bx	lr
 8000402:	46c0      	nop			; (mov r8, r8)

08000404 <__aeabi_cfrcmple>:
 8000404:	4684      	mov	ip, r0
 8000406:	1c08      	adds	r0, r1, #0
 8000408:	4661      	mov	r1, ip
 800040a:	e7ff      	b.n	800040c <__aeabi_cfcmpeq>

0800040c <__aeabi_cfcmpeq>:
 800040c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800040e:	f000 f9d3 	bl	80007b8 <__lesf2>
 8000412:	2800      	cmp	r0, #0
 8000414:	d401      	bmi.n	800041a <__aeabi_cfcmpeq+0xe>
 8000416:	2100      	movs	r1, #0
 8000418:	42c8      	cmn	r0, r1
 800041a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800041c <__aeabi_fcmpeq>:
 800041c:	b510      	push	{r4, lr}
 800041e:	f000 f955 	bl	80006cc <__eqsf2>
 8000422:	4240      	negs	r0, r0
 8000424:	3001      	adds	r0, #1
 8000426:	bd10      	pop	{r4, pc}

08000428 <__aeabi_fcmplt>:
 8000428:	b510      	push	{r4, lr}
 800042a:	f000 f9c5 	bl	80007b8 <__lesf2>
 800042e:	2800      	cmp	r0, #0
 8000430:	db01      	blt.n	8000436 <__aeabi_fcmplt+0xe>
 8000432:	2000      	movs	r0, #0
 8000434:	bd10      	pop	{r4, pc}
 8000436:	2001      	movs	r0, #1
 8000438:	bd10      	pop	{r4, pc}
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_fcmple>:
 800043c:	b510      	push	{r4, lr}
 800043e:	f000 f9bb 	bl	80007b8 <__lesf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	dd01      	ble.n	800044a <__aeabi_fcmple+0xe>
 8000446:	2000      	movs	r0, #0
 8000448:	bd10      	pop	{r4, pc}
 800044a:	2001      	movs	r0, #1
 800044c:	bd10      	pop	{r4, pc}
 800044e:	46c0      	nop			; (mov r8, r8)

08000450 <__aeabi_fcmpgt>:
 8000450:	b510      	push	{r4, lr}
 8000452:	f000 f963 	bl	800071c <__gesf2>
 8000456:	2800      	cmp	r0, #0
 8000458:	dc01      	bgt.n	800045e <__aeabi_fcmpgt+0xe>
 800045a:	2000      	movs	r0, #0
 800045c:	bd10      	pop	{r4, pc}
 800045e:	2001      	movs	r0, #1
 8000460:	bd10      	pop	{r4, pc}
 8000462:	46c0      	nop			; (mov r8, r8)

08000464 <__aeabi_fcmpge>:
 8000464:	b510      	push	{r4, lr}
 8000466:	f000 f959 	bl	800071c <__gesf2>
 800046a:	2800      	cmp	r0, #0
 800046c:	da01      	bge.n	8000472 <__aeabi_fcmpge+0xe>
 800046e:	2000      	movs	r0, #0
 8000470:	bd10      	pop	{r4, pc}
 8000472:	2001      	movs	r0, #1
 8000474:	bd10      	pop	{r4, pc}
 8000476:	46c0      	nop			; (mov r8, r8)

08000478 <__aeabi_f2uiz>:
 8000478:	219e      	movs	r1, #158	; 0x9e
 800047a:	b510      	push	{r4, lr}
 800047c:	05c9      	lsls	r1, r1, #23
 800047e:	1c04      	adds	r4, r0, #0
 8000480:	f7ff fff0 	bl	8000464 <__aeabi_fcmpge>
 8000484:	2800      	cmp	r0, #0
 8000486:	d103      	bne.n	8000490 <__aeabi_f2uiz+0x18>
 8000488:	1c20      	adds	r0, r4, #0
 800048a:	f000 fcdb 	bl	8000e44 <__aeabi_f2iz>
 800048e:	bd10      	pop	{r4, pc}
 8000490:	219e      	movs	r1, #158	; 0x9e
 8000492:	1c20      	adds	r0, r4, #0
 8000494:	05c9      	lsls	r1, r1, #23
 8000496:	f000 fb11 	bl	8000abc <__aeabi_fsub>
 800049a:	f000 fcd3 	bl	8000e44 <__aeabi_f2iz>
 800049e:	2380      	movs	r3, #128	; 0x80
 80004a0:	061b      	lsls	r3, r3, #24
 80004a2:	469c      	mov	ip, r3
 80004a4:	4460      	add	r0, ip
 80004a6:	e7f2      	b.n	800048e <__aeabi_f2uiz+0x16>

080004a8 <__aeabi_fdiv>:
 80004a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004aa:	4657      	mov	r7, sl
 80004ac:	464e      	mov	r6, r9
 80004ae:	4645      	mov	r5, r8
 80004b0:	46de      	mov	lr, fp
 80004b2:	0244      	lsls	r4, r0, #9
 80004b4:	b5e0      	push	{r5, r6, r7, lr}
 80004b6:	0046      	lsls	r6, r0, #1
 80004b8:	4688      	mov	r8, r1
 80004ba:	0a64      	lsrs	r4, r4, #9
 80004bc:	0e36      	lsrs	r6, r6, #24
 80004be:	0fc7      	lsrs	r7, r0, #31
 80004c0:	2e00      	cmp	r6, #0
 80004c2:	d063      	beq.n	800058c <__aeabi_fdiv+0xe4>
 80004c4:	2eff      	cmp	r6, #255	; 0xff
 80004c6:	d024      	beq.n	8000512 <__aeabi_fdiv+0x6a>
 80004c8:	2380      	movs	r3, #128	; 0x80
 80004ca:	00e4      	lsls	r4, r4, #3
 80004cc:	04db      	lsls	r3, r3, #19
 80004ce:	431c      	orrs	r4, r3
 80004d0:	2300      	movs	r3, #0
 80004d2:	4699      	mov	r9, r3
 80004d4:	469b      	mov	fp, r3
 80004d6:	3e7f      	subs	r6, #127	; 0x7f
 80004d8:	4643      	mov	r3, r8
 80004da:	4642      	mov	r2, r8
 80004dc:	025d      	lsls	r5, r3, #9
 80004de:	0fd2      	lsrs	r2, r2, #31
 80004e0:	005b      	lsls	r3, r3, #1
 80004e2:	0a6d      	lsrs	r5, r5, #9
 80004e4:	0e1b      	lsrs	r3, r3, #24
 80004e6:	4690      	mov	r8, r2
 80004e8:	4692      	mov	sl, r2
 80004ea:	d065      	beq.n	80005b8 <__aeabi_fdiv+0x110>
 80004ec:	2bff      	cmp	r3, #255	; 0xff
 80004ee:	d055      	beq.n	800059c <__aeabi_fdiv+0xf4>
 80004f0:	2280      	movs	r2, #128	; 0x80
 80004f2:	2100      	movs	r1, #0
 80004f4:	00ed      	lsls	r5, r5, #3
 80004f6:	04d2      	lsls	r2, r2, #19
 80004f8:	3b7f      	subs	r3, #127	; 0x7f
 80004fa:	4315      	orrs	r5, r2
 80004fc:	1af6      	subs	r6, r6, r3
 80004fe:	4643      	mov	r3, r8
 8000500:	464a      	mov	r2, r9
 8000502:	407b      	eors	r3, r7
 8000504:	2a0f      	cmp	r2, #15
 8000506:	d900      	bls.n	800050a <__aeabi_fdiv+0x62>
 8000508:	e08d      	b.n	8000626 <__aeabi_fdiv+0x17e>
 800050a:	486d      	ldr	r0, [pc, #436]	; (80006c0 <__aeabi_fdiv+0x218>)
 800050c:	0092      	lsls	r2, r2, #2
 800050e:	5882      	ldr	r2, [r0, r2]
 8000510:	4697      	mov	pc, r2
 8000512:	2c00      	cmp	r4, #0
 8000514:	d154      	bne.n	80005c0 <__aeabi_fdiv+0x118>
 8000516:	2308      	movs	r3, #8
 8000518:	4699      	mov	r9, r3
 800051a:	3b06      	subs	r3, #6
 800051c:	26ff      	movs	r6, #255	; 0xff
 800051e:	469b      	mov	fp, r3
 8000520:	e7da      	b.n	80004d8 <__aeabi_fdiv+0x30>
 8000522:	2500      	movs	r5, #0
 8000524:	4653      	mov	r3, sl
 8000526:	2902      	cmp	r1, #2
 8000528:	d01b      	beq.n	8000562 <__aeabi_fdiv+0xba>
 800052a:	2903      	cmp	r1, #3
 800052c:	d100      	bne.n	8000530 <__aeabi_fdiv+0x88>
 800052e:	e0bf      	b.n	80006b0 <__aeabi_fdiv+0x208>
 8000530:	2901      	cmp	r1, #1
 8000532:	d028      	beq.n	8000586 <__aeabi_fdiv+0xde>
 8000534:	0030      	movs	r0, r6
 8000536:	307f      	adds	r0, #127	; 0x7f
 8000538:	2800      	cmp	r0, #0
 800053a:	dd20      	ble.n	800057e <__aeabi_fdiv+0xd6>
 800053c:	076a      	lsls	r2, r5, #29
 800053e:	d004      	beq.n	800054a <__aeabi_fdiv+0xa2>
 8000540:	220f      	movs	r2, #15
 8000542:	402a      	ands	r2, r5
 8000544:	2a04      	cmp	r2, #4
 8000546:	d000      	beq.n	800054a <__aeabi_fdiv+0xa2>
 8000548:	3504      	adds	r5, #4
 800054a:	012a      	lsls	r2, r5, #4
 800054c:	d503      	bpl.n	8000556 <__aeabi_fdiv+0xae>
 800054e:	0030      	movs	r0, r6
 8000550:	4a5c      	ldr	r2, [pc, #368]	; (80006c4 <__aeabi_fdiv+0x21c>)
 8000552:	3080      	adds	r0, #128	; 0x80
 8000554:	4015      	ands	r5, r2
 8000556:	28fe      	cmp	r0, #254	; 0xfe
 8000558:	dc03      	bgt.n	8000562 <__aeabi_fdiv+0xba>
 800055a:	01ac      	lsls	r4, r5, #6
 800055c:	0a64      	lsrs	r4, r4, #9
 800055e:	b2c2      	uxtb	r2, r0
 8000560:	e001      	b.n	8000566 <__aeabi_fdiv+0xbe>
 8000562:	22ff      	movs	r2, #255	; 0xff
 8000564:	2400      	movs	r4, #0
 8000566:	0264      	lsls	r4, r4, #9
 8000568:	05d2      	lsls	r2, r2, #23
 800056a:	0a60      	lsrs	r0, r4, #9
 800056c:	07db      	lsls	r3, r3, #31
 800056e:	4310      	orrs	r0, r2
 8000570:	4318      	orrs	r0, r3
 8000572:	bc3c      	pop	{r2, r3, r4, r5}
 8000574:	4690      	mov	r8, r2
 8000576:	4699      	mov	r9, r3
 8000578:	46a2      	mov	sl, r4
 800057a:	46ab      	mov	fp, r5
 800057c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800057e:	2201      	movs	r2, #1
 8000580:	1a10      	subs	r0, r2, r0
 8000582:	281b      	cmp	r0, #27
 8000584:	dd7c      	ble.n	8000680 <__aeabi_fdiv+0x1d8>
 8000586:	2200      	movs	r2, #0
 8000588:	2400      	movs	r4, #0
 800058a:	e7ec      	b.n	8000566 <__aeabi_fdiv+0xbe>
 800058c:	2c00      	cmp	r4, #0
 800058e:	d11d      	bne.n	80005cc <__aeabi_fdiv+0x124>
 8000590:	2304      	movs	r3, #4
 8000592:	4699      	mov	r9, r3
 8000594:	3b03      	subs	r3, #3
 8000596:	2600      	movs	r6, #0
 8000598:	469b      	mov	fp, r3
 800059a:	e79d      	b.n	80004d8 <__aeabi_fdiv+0x30>
 800059c:	3eff      	subs	r6, #255	; 0xff
 800059e:	2d00      	cmp	r5, #0
 80005a0:	d120      	bne.n	80005e4 <__aeabi_fdiv+0x13c>
 80005a2:	2102      	movs	r1, #2
 80005a4:	4643      	mov	r3, r8
 80005a6:	464a      	mov	r2, r9
 80005a8:	407b      	eors	r3, r7
 80005aa:	430a      	orrs	r2, r1
 80005ac:	2a0f      	cmp	r2, #15
 80005ae:	d8d8      	bhi.n	8000562 <__aeabi_fdiv+0xba>
 80005b0:	4845      	ldr	r0, [pc, #276]	; (80006c8 <__aeabi_fdiv+0x220>)
 80005b2:	0092      	lsls	r2, r2, #2
 80005b4:	5882      	ldr	r2, [r0, r2]
 80005b6:	4697      	mov	pc, r2
 80005b8:	2d00      	cmp	r5, #0
 80005ba:	d119      	bne.n	80005f0 <__aeabi_fdiv+0x148>
 80005bc:	2101      	movs	r1, #1
 80005be:	e7f1      	b.n	80005a4 <__aeabi_fdiv+0xfc>
 80005c0:	230c      	movs	r3, #12
 80005c2:	4699      	mov	r9, r3
 80005c4:	3b09      	subs	r3, #9
 80005c6:	26ff      	movs	r6, #255	; 0xff
 80005c8:	469b      	mov	fp, r3
 80005ca:	e785      	b.n	80004d8 <__aeabi_fdiv+0x30>
 80005cc:	0020      	movs	r0, r4
 80005ce:	f001 fafd 	bl	8001bcc <__clzsi2>
 80005d2:	2676      	movs	r6, #118	; 0x76
 80005d4:	1f43      	subs	r3, r0, #5
 80005d6:	409c      	lsls	r4, r3
 80005d8:	2300      	movs	r3, #0
 80005da:	4276      	negs	r6, r6
 80005dc:	1a36      	subs	r6, r6, r0
 80005de:	4699      	mov	r9, r3
 80005e0:	469b      	mov	fp, r3
 80005e2:	e779      	b.n	80004d8 <__aeabi_fdiv+0x30>
 80005e4:	464a      	mov	r2, r9
 80005e6:	2303      	movs	r3, #3
 80005e8:	431a      	orrs	r2, r3
 80005ea:	4691      	mov	r9, r2
 80005ec:	2103      	movs	r1, #3
 80005ee:	e786      	b.n	80004fe <__aeabi_fdiv+0x56>
 80005f0:	0028      	movs	r0, r5
 80005f2:	f001 faeb 	bl	8001bcc <__clzsi2>
 80005f6:	1f43      	subs	r3, r0, #5
 80005f8:	1836      	adds	r6, r6, r0
 80005fa:	409d      	lsls	r5, r3
 80005fc:	3676      	adds	r6, #118	; 0x76
 80005fe:	2100      	movs	r1, #0
 8000600:	e77d      	b.n	80004fe <__aeabi_fdiv+0x56>
 8000602:	2480      	movs	r4, #128	; 0x80
 8000604:	2300      	movs	r3, #0
 8000606:	03e4      	lsls	r4, r4, #15
 8000608:	22ff      	movs	r2, #255	; 0xff
 800060a:	e7ac      	b.n	8000566 <__aeabi_fdiv+0xbe>
 800060c:	2500      	movs	r5, #0
 800060e:	2380      	movs	r3, #128	; 0x80
 8000610:	03db      	lsls	r3, r3, #15
 8000612:	421c      	tst	r4, r3
 8000614:	d028      	beq.n	8000668 <__aeabi_fdiv+0x1c0>
 8000616:	421d      	tst	r5, r3
 8000618:	d126      	bne.n	8000668 <__aeabi_fdiv+0x1c0>
 800061a:	432b      	orrs	r3, r5
 800061c:	025c      	lsls	r4, r3, #9
 800061e:	0a64      	lsrs	r4, r4, #9
 8000620:	4643      	mov	r3, r8
 8000622:	22ff      	movs	r2, #255	; 0xff
 8000624:	e79f      	b.n	8000566 <__aeabi_fdiv+0xbe>
 8000626:	0162      	lsls	r2, r4, #5
 8000628:	016c      	lsls	r4, r5, #5
 800062a:	42a2      	cmp	r2, r4
 800062c:	d224      	bcs.n	8000678 <__aeabi_fdiv+0x1d0>
 800062e:	211b      	movs	r1, #27
 8000630:	2500      	movs	r5, #0
 8000632:	3e01      	subs	r6, #1
 8000634:	2701      	movs	r7, #1
 8000636:	0010      	movs	r0, r2
 8000638:	006d      	lsls	r5, r5, #1
 800063a:	0052      	lsls	r2, r2, #1
 800063c:	2800      	cmp	r0, #0
 800063e:	db01      	blt.n	8000644 <__aeabi_fdiv+0x19c>
 8000640:	4294      	cmp	r4, r2
 8000642:	d801      	bhi.n	8000648 <__aeabi_fdiv+0x1a0>
 8000644:	1b12      	subs	r2, r2, r4
 8000646:	433d      	orrs	r5, r7
 8000648:	3901      	subs	r1, #1
 800064a:	2900      	cmp	r1, #0
 800064c:	d1f3      	bne.n	8000636 <__aeabi_fdiv+0x18e>
 800064e:	0014      	movs	r4, r2
 8000650:	1e62      	subs	r2, r4, #1
 8000652:	4194      	sbcs	r4, r2
 8000654:	4325      	orrs	r5, r4
 8000656:	e76d      	b.n	8000534 <__aeabi_fdiv+0x8c>
 8000658:	46ba      	mov	sl, r7
 800065a:	4659      	mov	r1, fp
 800065c:	0025      	movs	r5, r4
 800065e:	4653      	mov	r3, sl
 8000660:	2902      	cmp	r1, #2
 8000662:	d000      	beq.n	8000666 <__aeabi_fdiv+0x1be>
 8000664:	e761      	b.n	800052a <__aeabi_fdiv+0x82>
 8000666:	e77c      	b.n	8000562 <__aeabi_fdiv+0xba>
 8000668:	2380      	movs	r3, #128	; 0x80
 800066a:	03db      	lsls	r3, r3, #15
 800066c:	431c      	orrs	r4, r3
 800066e:	0264      	lsls	r4, r4, #9
 8000670:	0a64      	lsrs	r4, r4, #9
 8000672:	003b      	movs	r3, r7
 8000674:	22ff      	movs	r2, #255	; 0xff
 8000676:	e776      	b.n	8000566 <__aeabi_fdiv+0xbe>
 8000678:	1b12      	subs	r2, r2, r4
 800067a:	211a      	movs	r1, #26
 800067c:	2501      	movs	r5, #1
 800067e:	e7d9      	b.n	8000634 <__aeabi_fdiv+0x18c>
 8000680:	369e      	adds	r6, #158	; 0x9e
 8000682:	002a      	movs	r2, r5
 8000684:	40b5      	lsls	r5, r6
 8000686:	002c      	movs	r4, r5
 8000688:	40c2      	lsrs	r2, r0
 800068a:	1e65      	subs	r5, r4, #1
 800068c:	41ac      	sbcs	r4, r5
 800068e:	4314      	orrs	r4, r2
 8000690:	0762      	lsls	r2, r4, #29
 8000692:	d004      	beq.n	800069e <__aeabi_fdiv+0x1f6>
 8000694:	220f      	movs	r2, #15
 8000696:	4022      	ands	r2, r4
 8000698:	2a04      	cmp	r2, #4
 800069a:	d000      	beq.n	800069e <__aeabi_fdiv+0x1f6>
 800069c:	3404      	adds	r4, #4
 800069e:	0162      	lsls	r2, r4, #5
 80006a0:	d403      	bmi.n	80006aa <__aeabi_fdiv+0x202>
 80006a2:	01a4      	lsls	r4, r4, #6
 80006a4:	0a64      	lsrs	r4, r4, #9
 80006a6:	2200      	movs	r2, #0
 80006a8:	e75d      	b.n	8000566 <__aeabi_fdiv+0xbe>
 80006aa:	2201      	movs	r2, #1
 80006ac:	2400      	movs	r4, #0
 80006ae:	e75a      	b.n	8000566 <__aeabi_fdiv+0xbe>
 80006b0:	2480      	movs	r4, #128	; 0x80
 80006b2:	03e4      	lsls	r4, r4, #15
 80006b4:	432c      	orrs	r4, r5
 80006b6:	0264      	lsls	r4, r4, #9
 80006b8:	0a64      	lsrs	r4, r4, #9
 80006ba:	22ff      	movs	r2, #255	; 0xff
 80006bc:	e753      	b.n	8000566 <__aeabi_fdiv+0xbe>
 80006be:	46c0      	nop			; (mov r8, r8)
 80006c0:	0800c440 	.word	0x0800c440
 80006c4:	f7ffffff 	.word	0xf7ffffff
 80006c8:	0800c480 	.word	0x0800c480

080006cc <__eqsf2>:
 80006cc:	b570      	push	{r4, r5, r6, lr}
 80006ce:	0042      	lsls	r2, r0, #1
 80006d0:	024e      	lsls	r6, r1, #9
 80006d2:	004c      	lsls	r4, r1, #1
 80006d4:	0245      	lsls	r5, r0, #9
 80006d6:	0a6d      	lsrs	r5, r5, #9
 80006d8:	0e12      	lsrs	r2, r2, #24
 80006da:	0fc3      	lsrs	r3, r0, #31
 80006dc:	0a76      	lsrs	r6, r6, #9
 80006de:	0e24      	lsrs	r4, r4, #24
 80006e0:	0fc9      	lsrs	r1, r1, #31
 80006e2:	2aff      	cmp	r2, #255	; 0xff
 80006e4:	d00f      	beq.n	8000706 <__eqsf2+0x3a>
 80006e6:	2cff      	cmp	r4, #255	; 0xff
 80006e8:	d011      	beq.n	800070e <__eqsf2+0x42>
 80006ea:	2001      	movs	r0, #1
 80006ec:	42a2      	cmp	r2, r4
 80006ee:	d000      	beq.n	80006f2 <__eqsf2+0x26>
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	42b5      	cmp	r5, r6
 80006f4:	d1fc      	bne.n	80006f0 <__eqsf2+0x24>
 80006f6:	428b      	cmp	r3, r1
 80006f8:	d00d      	beq.n	8000716 <__eqsf2+0x4a>
 80006fa:	2a00      	cmp	r2, #0
 80006fc:	d1f8      	bne.n	80006f0 <__eqsf2+0x24>
 80006fe:	0028      	movs	r0, r5
 8000700:	1e45      	subs	r5, r0, #1
 8000702:	41a8      	sbcs	r0, r5
 8000704:	e7f4      	b.n	80006f0 <__eqsf2+0x24>
 8000706:	2001      	movs	r0, #1
 8000708:	2d00      	cmp	r5, #0
 800070a:	d1f1      	bne.n	80006f0 <__eqsf2+0x24>
 800070c:	e7eb      	b.n	80006e6 <__eqsf2+0x1a>
 800070e:	2001      	movs	r0, #1
 8000710:	2e00      	cmp	r6, #0
 8000712:	d1ed      	bne.n	80006f0 <__eqsf2+0x24>
 8000714:	e7e9      	b.n	80006ea <__eqsf2+0x1e>
 8000716:	2000      	movs	r0, #0
 8000718:	e7ea      	b.n	80006f0 <__eqsf2+0x24>
 800071a:	46c0      	nop			; (mov r8, r8)

0800071c <__gesf2>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	004a      	lsls	r2, r1, #1
 8000720:	024e      	lsls	r6, r1, #9
 8000722:	0245      	lsls	r5, r0, #9
 8000724:	0044      	lsls	r4, r0, #1
 8000726:	0a6d      	lsrs	r5, r5, #9
 8000728:	0e24      	lsrs	r4, r4, #24
 800072a:	0fc3      	lsrs	r3, r0, #31
 800072c:	0a76      	lsrs	r6, r6, #9
 800072e:	0e12      	lsrs	r2, r2, #24
 8000730:	0fc9      	lsrs	r1, r1, #31
 8000732:	2cff      	cmp	r4, #255	; 0xff
 8000734:	d015      	beq.n	8000762 <__gesf2+0x46>
 8000736:	2aff      	cmp	r2, #255	; 0xff
 8000738:	d00e      	beq.n	8000758 <__gesf2+0x3c>
 800073a:	2c00      	cmp	r4, #0
 800073c:	d115      	bne.n	800076a <__gesf2+0x4e>
 800073e:	2a00      	cmp	r2, #0
 8000740:	d101      	bne.n	8000746 <__gesf2+0x2a>
 8000742:	2e00      	cmp	r6, #0
 8000744:	d01c      	beq.n	8000780 <__gesf2+0x64>
 8000746:	2d00      	cmp	r5, #0
 8000748:	d014      	beq.n	8000774 <__gesf2+0x58>
 800074a:	428b      	cmp	r3, r1
 800074c:	d027      	beq.n	800079e <__gesf2+0x82>
 800074e:	2002      	movs	r0, #2
 8000750:	3b01      	subs	r3, #1
 8000752:	4018      	ands	r0, r3
 8000754:	3801      	subs	r0, #1
 8000756:	bd70      	pop	{r4, r5, r6, pc}
 8000758:	2e00      	cmp	r6, #0
 800075a:	d0ee      	beq.n	800073a <__gesf2+0x1e>
 800075c:	2002      	movs	r0, #2
 800075e:	4240      	negs	r0, r0
 8000760:	e7f9      	b.n	8000756 <__gesf2+0x3a>
 8000762:	2d00      	cmp	r5, #0
 8000764:	d1fa      	bne.n	800075c <__gesf2+0x40>
 8000766:	2aff      	cmp	r2, #255	; 0xff
 8000768:	d00e      	beq.n	8000788 <__gesf2+0x6c>
 800076a:	2a00      	cmp	r2, #0
 800076c:	d10e      	bne.n	800078c <__gesf2+0x70>
 800076e:	2e00      	cmp	r6, #0
 8000770:	d0ed      	beq.n	800074e <__gesf2+0x32>
 8000772:	e00b      	b.n	800078c <__gesf2+0x70>
 8000774:	2301      	movs	r3, #1
 8000776:	3901      	subs	r1, #1
 8000778:	4399      	bics	r1, r3
 800077a:	0008      	movs	r0, r1
 800077c:	3001      	adds	r0, #1
 800077e:	e7ea      	b.n	8000756 <__gesf2+0x3a>
 8000780:	2000      	movs	r0, #0
 8000782:	2d00      	cmp	r5, #0
 8000784:	d0e7      	beq.n	8000756 <__gesf2+0x3a>
 8000786:	e7e2      	b.n	800074e <__gesf2+0x32>
 8000788:	2e00      	cmp	r6, #0
 800078a:	d1e7      	bne.n	800075c <__gesf2+0x40>
 800078c:	428b      	cmp	r3, r1
 800078e:	d1de      	bne.n	800074e <__gesf2+0x32>
 8000790:	4294      	cmp	r4, r2
 8000792:	dd05      	ble.n	80007a0 <__gesf2+0x84>
 8000794:	2102      	movs	r1, #2
 8000796:	1e58      	subs	r0, r3, #1
 8000798:	4008      	ands	r0, r1
 800079a:	3801      	subs	r0, #1
 800079c:	e7db      	b.n	8000756 <__gesf2+0x3a>
 800079e:	2400      	movs	r4, #0
 80007a0:	42a2      	cmp	r2, r4
 80007a2:	dc04      	bgt.n	80007ae <__gesf2+0x92>
 80007a4:	42b5      	cmp	r5, r6
 80007a6:	d8d2      	bhi.n	800074e <__gesf2+0x32>
 80007a8:	2000      	movs	r0, #0
 80007aa:	42b5      	cmp	r5, r6
 80007ac:	d2d3      	bcs.n	8000756 <__gesf2+0x3a>
 80007ae:	1e58      	subs	r0, r3, #1
 80007b0:	2301      	movs	r3, #1
 80007b2:	4398      	bics	r0, r3
 80007b4:	3001      	adds	r0, #1
 80007b6:	e7ce      	b.n	8000756 <__gesf2+0x3a>

080007b8 <__lesf2>:
 80007b8:	b530      	push	{r4, r5, lr}
 80007ba:	0042      	lsls	r2, r0, #1
 80007bc:	0244      	lsls	r4, r0, #9
 80007be:	024d      	lsls	r5, r1, #9
 80007c0:	0fc3      	lsrs	r3, r0, #31
 80007c2:	0048      	lsls	r0, r1, #1
 80007c4:	0a64      	lsrs	r4, r4, #9
 80007c6:	0e12      	lsrs	r2, r2, #24
 80007c8:	0a6d      	lsrs	r5, r5, #9
 80007ca:	0e00      	lsrs	r0, r0, #24
 80007cc:	0fc9      	lsrs	r1, r1, #31
 80007ce:	2aff      	cmp	r2, #255	; 0xff
 80007d0:	d012      	beq.n	80007f8 <__lesf2+0x40>
 80007d2:	28ff      	cmp	r0, #255	; 0xff
 80007d4:	d00c      	beq.n	80007f0 <__lesf2+0x38>
 80007d6:	2a00      	cmp	r2, #0
 80007d8:	d112      	bne.n	8000800 <__lesf2+0x48>
 80007da:	2800      	cmp	r0, #0
 80007dc:	d119      	bne.n	8000812 <__lesf2+0x5a>
 80007de:	2d00      	cmp	r5, #0
 80007e0:	d117      	bne.n	8000812 <__lesf2+0x5a>
 80007e2:	2c00      	cmp	r4, #0
 80007e4:	d02b      	beq.n	800083e <__lesf2+0x86>
 80007e6:	2002      	movs	r0, #2
 80007e8:	3b01      	subs	r3, #1
 80007ea:	4018      	ands	r0, r3
 80007ec:	3801      	subs	r0, #1
 80007ee:	e026      	b.n	800083e <__lesf2+0x86>
 80007f0:	2d00      	cmp	r5, #0
 80007f2:	d0f0      	beq.n	80007d6 <__lesf2+0x1e>
 80007f4:	2002      	movs	r0, #2
 80007f6:	e022      	b.n	800083e <__lesf2+0x86>
 80007f8:	2c00      	cmp	r4, #0
 80007fa:	d1fb      	bne.n	80007f4 <__lesf2+0x3c>
 80007fc:	28ff      	cmp	r0, #255	; 0xff
 80007fe:	d01f      	beq.n	8000840 <__lesf2+0x88>
 8000800:	2800      	cmp	r0, #0
 8000802:	d11f      	bne.n	8000844 <__lesf2+0x8c>
 8000804:	2d00      	cmp	r5, #0
 8000806:	d11d      	bne.n	8000844 <__lesf2+0x8c>
 8000808:	2002      	movs	r0, #2
 800080a:	3b01      	subs	r3, #1
 800080c:	4018      	ands	r0, r3
 800080e:	3801      	subs	r0, #1
 8000810:	e015      	b.n	800083e <__lesf2+0x86>
 8000812:	2c00      	cmp	r4, #0
 8000814:	d00e      	beq.n	8000834 <__lesf2+0x7c>
 8000816:	428b      	cmp	r3, r1
 8000818:	d1e5      	bne.n	80007e6 <__lesf2+0x2e>
 800081a:	2200      	movs	r2, #0
 800081c:	4290      	cmp	r0, r2
 800081e:	dc04      	bgt.n	800082a <__lesf2+0x72>
 8000820:	42ac      	cmp	r4, r5
 8000822:	d8e0      	bhi.n	80007e6 <__lesf2+0x2e>
 8000824:	2000      	movs	r0, #0
 8000826:	42ac      	cmp	r4, r5
 8000828:	d209      	bcs.n	800083e <__lesf2+0x86>
 800082a:	1e58      	subs	r0, r3, #1
 800082c:	2301      	movs	r3, #1
 800082e:	4398      	bics	r0, r3
 8000830:	3001      	adds	r0, #1
 8000832:	e004      	b.n	800083e <__lesf2+0x86>
 8000834:	2301      	movs	r3, #1
 8000836:	3901      	subs	r1, #1
 8000838:	4399      	bics	r1, r3
 800083a:	0008      	movs	r0, r1
 800083c:	3001      	adds	r0, #1
 800083e:	bd30      	pop	{r4, r5, pc}
 8000840:	2d00      	cmp	r5, #0
 8000842:	d1d7      	bne.n	80007f4 <__lesf2+0x3c>
 8000844:	428b      	cmp	r3, r1
 8000846:	d1ce      	bne.n	80007e6 <__lesf2+0x2e>
 8000848:	4282      	cmp	r2, r0
 800084a:	dde7      	ble.n	800081c <__lesf2+0x64>
 800084c:	2102      	movs	r1, #2
 800084e:	1e58      	subs	r0, r3, #1
 8000850:	4008      	ands	r0, r1
 8000852:	3801      	subs	r0, #1
 8000854:	e7f3      	b.n	800083e <__lesf2+0x86>
 8000856:	46c0      	nop			; (mov r8, r8)

08000858 <__aeabi_fmul>:
 8000858:	b5f0      	push	{r4, r5, r6, r7, lr}
 800085a:	464e      	mov	r6, r9
 800085c:	4657      	mov	r7, sl
 800085e:	4645      	mov	r5, r8
 8000860:	46de      	mov	lr, fp
 8000862:	b5e0      	push	{r5, r6, r7, lr}
 8000864:	0243      	lsls	r3, r0, #9
 8000866:	0a5b      	lsrs	r3, r3, #9
 8000868:	0045      	lsls	r5, r0, #1
 800086a:	b083      	sub	sp, #12
 800086c:	1c0f      	adds	r7, r1, #0
 800086e:	4699      	mov	r9, r3
 8000870:	0e2d      	lsrs	r5, r5, #24
 8000872:	0fc6      	lsrs	r6, r0, #31
 8000874:	2d00      	cmp	r5, #0
 8000876:	d057      	beq.n	8000928 <__aeabi_fmul+0xd0>
 8000878:	2dff      	cmp	r5, #255	; 0xff
 800087a:	d024      	beq.n	80008c6 <__aeabi_fmul+0x6e>
 800087c:	2080      	movs	r0, #128	; 0x80
 800087e:	00db      	lsls	r3, r3, #3
 8000880:	04c0      	lsls	r0, r0, #19
 8000882:	4318      	orrs	r0, r3
 8000884:	2300      	movs	r3, #0
 8000886:	4681      	mov	r9, r0
 8000888:	469a      	mov	sl, r3
 800088a:	469b      	mov	fp, r3
 800088c:	3d7f      	subs	r5, #127	; 0x7f
 800088e:	027c      	lsls	r4, r7, #9
 8000890:	007a      	lsls	r2, r7, #1
 8000892:	0ffb      	lsrs	r3, r7, #31
 8000894:	0a64      	lsrs	r4, r4, #9
 8000896:	0e12      	lsrs	r2, r2, #24
 8000898:	4698      	mov	r8, r3
 800089a:	d023      	beq.n	80008e4 <__aeabi_fmul+0x8c>
 800089c:	2aff      	cmp	r2, #255	; 0xff
 800089e:	d04b      	beq.n	8000938 <__aeabi_fmul+0xe0>
 80008a0:	00e3      	lsls	r3, r4, #3
 80008a2:	2480      	movs	r4, #128	; 0x80
 80008a4:	2000      	movs	r0, #0
 80008a6:	04e4      	lsls	r4, r4, #19
 80008a8:	3a7f      	subs	r2, #127	; 0x7f
 80008aa:	431c      	orrs	r4, r3
 80008ac:	18ad      	adds	r5, r5, r2
 80008ae:	1c6b      	adds	r3, r5, #1
 80008b0:	4647      	mov	r7, r8
 80008b2:	9301      	str	r3, [sp, #4]
 80008b4:	4653      	mov	r3, sl
 80008b6:	4077      	eors	r7, r6
 80008b8:	003a      	movs	r2, r7
 80008ba:	2b0f      	cmp	r3, #15
 80008bc:	d848      	bhi.n	8000950 <__aeabi_fmul+0xf8>
 80008be:	497d      	ldr	r1, [pc, #500]	; (8000ab4 <__aeabi_fmul+0x25c>)
 80008c0:	009b      	lsls	r3, r3, #2
 80008c2:	58cb      	ldr	r3, [r1, r3]
 80008c4:	469f      	mov	pc, r3
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d000      	beq.n	80008cc <__aeabi_fmul+0x74>
 80008ca:	e085      	b.n	80009d8 <__aeabi_fmul+0x180>
 80008cc:	3308      	adds	r3, #8
 80008ce:	469a      	mov	sl, r3
 80008d0:	3b06      	subs	r3, #6
 80008d2:	469b      	mov	fp, r3
 80008d4:	027c      	lsls	r4, r7, #9
 80008d6:	007a      	lsls	r2, r7, #1
 80008d8:	0ffb      	lsrs	r3, r7, #31
 80008da:	25ff      	movs	r5, #255	; 0xff
 80008dc:	0a64      	lsrs	r4, r4, #9
 80008de:	0e12      	lsrs	r2, r2, #24
 80008e0:	4698      	mov	r8, r3
 80008e2:	d1db      	bne.n	800089c <__aeabi_fmul+0x44>
 80008e4:	2c00      	cmp	r4, #0
 80008e6:	d000      	beq.n	80008ea <__aeabi_fmul+0x92>
 80008e8:	e090      	b.n	8000a0c <__aeabi_fmul+0x1b4>
 80008ea:	4652      	mov	r2, sl
 80008ec:	2301      	movs	r3, #1
 80008ee:	431a      	orrs	r2, r3
 80008f0:	4692      	mov	sl, r2
 80008f2:	2001      	movs	r0, #1
 80008f4:	e7db      	b.n	80008ae <__aeabi_fmul+0x56>
 80008f6:	464c      	mov	r4, r9
 80008f8:	4658      	mov	r0, fp
 80008fa:	0017      	movs	r7, r2
 80008fc:	2802      	cmp	r0, #2
 80008fe:	d024      	beq.n	800094a <__aeabi_fmul+0xf2>
 8000900:	2803      	cmp	r0, #3
 8000902:	d100      	bne.n	8000906 <__aeabi_fmul+0xae>
 8000904:	e0cf      	b.n	8000aa6 <__aeabi_fmul+0x24e>
 8000906:	2200      	movs	r2, #0
 8000908:	2300      	movs	r3, #0
 800090a:	2801      	cmp	r0, #1
 800090c:	d14d      	bne.n	80009aa <__aeabi_fmul+0x152>
 800090e:	0258      	lsls	r0, r3, #9
 8000910:	05d2      	lsls	r2, r2, #23
 8000912:	0a40      	lsrs	r0, r0, #9
 8000914:	07ff      	lsls	r7, r7, #31
 8000916:	4310      	orrs	r0, r2
 8000918:	4338      	orrs	r0, r7
 800091a:	b003      	add	sp, #12
 800091c:	bc3c      	pop	{r2, r3, r4, r5}
 800091e:	4690      	mov	r8, r2
 8000920:	4699      	mov	r9, r3
 8000922:	46a2      	mov	sl, r4
 8000924:	46ab      	mov	fp, r5
 8000926:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000928:	2b00      	cmp	r3, #0
 800092a:	d15b      	bne.n	80009e4 <__aeabi_fmul+0x18c>
 800092c:	2304      	movs	r3, #4
 800092e:	469a      	mov	sl, r3
 8000930:	3b03      	subs	r3, #3
 8000932:	2500      	movs	r5, #0
 8000934:	469b      	mov	fp, r3
 8000936:	e7aa      	b.n	800088e <__aeabi_fmul+0x36>
 8000938:	35ff      	adds	r5, #255	; 0xff
 800093a:	2c00      	cmp	r4, #0
 800093c:	d160      	bne.n	8000a00 <__aeabi_fmul+0x1a8>
 800093e:	4652      	mov	r2, sl
 8000940:	2302      	movs	r3, #2
 8000942:	431a      	orrs	r2, r3
 8000944:	4692      	mov	sl, r2
 8000946:	2002      	movs	r0, #2
 8000948:	e7b1      	b.n	80008ae <__aeabi_fmul+0x56>
 800094a:	22ff      	movs	r2, #255	; 0xff
 800094c:	2300      	movs	r3, #0
 800094e:	e7de      	b.n	800090e <__aeabi_fmul+0xb6>
 8000950:	464b      	mov	r3, r9
 8000952:	0c1b      	lsrs	r3, r3, #16
 8000954:	469c      	mov	ip, r3
 8000956:	464b      	mov	r3, r9
 8000958:	0426      	lsls	r6, r4, #16
 800095a:	0c36      	lsrs	r6, r6, #16
 800095c:	0418      	lsls	r0, r3, #16
 800095e:	4661      	mov	r1, ip
 8000960:	0033      	movs	r3, r6
 8000962:	0c22      	lsrs	r2, r4, #16
 8000964:	4664      	mov	r4, ip
 8000966:	0c00      	lsrs	r0, r0, #16
 8000968:	4343      	muls	r3, r0
 800096a:	434e      	muls	r6, r1
 800096c:	4350      	muls	r0, r2
 800096e:	4354      	muls	r4, r2
 8000970:	1980      	adds	r0, r0, r6
 8000972:	0c1a      	lsrs	r2, r3, #16
 8000974:	1812      	adds	r2, r2, r0
 8000976:	4296      	cmp	r6, r2
 8000978:	d903      	bls.n	8000982 <__aeabi_fmul+0x12a>
 800097a:	2180      	movs	r1, #128	; 0x80
 800097c:	0249      	lsls	r1, r1, #9
 800097e:	468c      	mov	ip, r1
 8000980:	4464      	add	r4, ip
 8000982:	041b      	lsls	r3, r3, #16
 8000984:	0c1b      	lsrs	r3, r3, #16
 8000986:	0410      	lsls	r0, r2, #16
 8000988:	18c0      	adds	r0, r0, r3
 800098a:	0183      	lsls	r3, r0, #6
 800098c:	1e5e      	subs	r6, r3, #1
 800098e:	41b3      	sbcs	r3, r6
 8000990:	0e80      	lsrs	r0, r0, #26
 8000992:	4318      	orrs	r0, r3
 8000994:	0c13      	lsrs	r3, r2, #16
 8000996:	191b      	adds	r3, r3, r4
 8000998:	019b      	lsls	r3, r3, #6
 800099a:	4303      	orrs	r3, r0
 800099c:	001c      	movs	r4, r3
 800099e:	0123      	lsls	r3, r4, #4
 80009a0:	d579      	bpl.n	8000a96 <__aeabi_fmul+0x23e>
 80009a2:	2301      	movs	r3, #1
 80009a4:	0862      	lsrs	r2, r4, #1
 80009a6:	401c      	ands	r4, r3
 80009a8:	4314      	orrs	r4, r2
 80009aa:	9a01      	ldr	r2, [sp, #4]
 80009ac:	327f      	adds	r2, #127	; 0x7f
 80009ae:	2a00      	cmp	r2, #0
 80009b0:	dd4d      	ble.n	8000a4e <__aeabi_fmul+0x1f6>
 80009b2:	0763      	lsls	r3, r4, #29
 80009b4:	d004      	beq.n	80009c0 <__aeabi_fmul+0x168>
 80009b6:	230f      	movs	r3, #15
 80009b8:	4023      	ands	r3, r4
 80009ba:	2b04      	cmp	r3, #4
 80009bc:	d000      	beq.n	80009c0 <__aeabi_fmul+0x168>
 80009be:	3404      	adds	r4, #4
 80009c0:	0123      	lsls	r3, r4, #4
 80009c2:	d503      	bpl.n	80009cc <__aeabi_fmul+0x174>
 80009c4:	4b3c      	ldr	r3, [pc, #240]	; (8000ab8 <__aeabi_fmul+0x260>)
 80009c6:	9a01      	ldr	r2, [sp, #4]
 80009c8:	401c      	ands	r4, r3
 80009ca:	3280      	adds	r2, #128	; 0x80
 80009cc:	2afe      	cmp	r2, #254	; 0xfe
 80009ce:	dcbc      	bgt.n	800094a <__aeabi_fmul+0xf2>
 80009d0:	01a3      	lsls	r3, r4, #6
 80009d2:	0a5b      	lsrs	r3, r3, #9
 80009d4:	b2d2      	uxtb	r2, r2
 80009d6:	e79a      	b.n	800090e <__aeabi_fmul+0xb6>
 80009d8:	230c      	movs	r3, #12
 80009da:	469a      	mov	sl, r3
 80009dc:	3b09      	subs	r3, #9
 80009de:	25ff      	movs	r5, #255	; 0xff
 80009e0:	469b      	mov	fp, r3
 80009e2:	e754      	b.n	800088e <__aeabi_fmul+0x36>
 80009e4:	0018      	movs	r0, r3
 80009e6:	f001 f8f1 	bl	8001bcc <__clzsi2>
 80009ea:	464a      	mov	r2, r9
 80009ec:	1f43      	subs	r3, r0, #5
 80009ee:	2576      	movs	r5, #118	; 0x76
 80009f0:	409a      	lsls	r2, r3
 80009f2:	2300      	movs	r3, #0
 80009f4:	426d      	negs	r5, r5
 80009f6:	4691      	mov	r9, r2
 80009f8:	1a2d      	subs	r5, r5, r0
 80009fa:	469a      	mov	sl, r3
 80009fc:	469b      	mov	fp, r3
 80009fe:	e746      	b.n	800088e <__aeabi_fmul+0x36>
 8000a00:	4652      	mov	r2, sl
 8000a02:	2303      	movs	r3, #3
 8000a04:	431a      	orrs	r2, r3
 8000a06:	4692      	mov	sl, r2
 8000a08:	2003      	movs	r0, #3
 8000a0a:	e750      	b.n	80008ae <__aeabi_fmul+0x56>
 8000a0c:	0020      	movs	r0, r4
 8000a0e:	f001 f8dd 	bl	8001bcc <__clzsi2>
 8000a12:	1f43      	subs	r3, r0, #5
 8000a14:	1a2d      	subs	r5, r5, r0
 8000a16:	409c      	lsls	r4, r3
 8000a18:	3d76      	subs	r5, #118	; 0x76
 8000a1a:	2000      	movs	r0, #0
 8000a1c:	e747      	b.n	80008ae <__aeabi_fmul+0x56>
 8000a1e:	2380      	movs	r3, #128	; 0x80
 8000a20:	2700      	movs	r7, #0
 8000a22:	03db      	lsls	r3, r3, #15
 8000a24:	22ff      	movs	r2, #255	; 0xff
 8000a26:	e772      	b.n	800090e <__aeabi_fmul+0xb6>
 8000a28:	4642      	mov	r2, r8
 8000a2a:	e766      	b.n	80008fa <__aeabi_fmul+0xa2>
 8000a2c:	464c      	mov	r4, r9
 8000a2e:	0032      	movs	r2, r6
 8000a30:	4658      	mov	r0, fp
 8000a32:	e762      	b.n	80008fa <__aeabi_fmul+0xa2>
 8000a34:	2380      	movs	r3, #128	; 0x80
 8000a36:	464a      	mov	r2, r9
 8000a38:	03db      	lsls	r3, r3, #15
 8000a3a:	421a      	tst	r2, r3
 8000a3c:	d022      	beq.n	8000a84 <__aeabi_fmul+0x22c>
 8000a3e:	421c      	tst	r4, r3
 8000a40:	d120      	bne.n	8000a84 <__aeabi_fmul+0x22c>
 8000a42:	4323      	orrs	r3, r4
 8000a44:	025b      	lsls	r3, r3, #9
 8000a46:	0a5b      	lsrs	r3, r3, #9
 8000a48:	4647      	mov	r7, r8
 8000a4a:	22ff      	movs	r2, #255	; 0xff
 8000a4c:	e75f      	b.n	800090e <__aeabi_fmul+0xb6>
 8000a4e:	2301      	movs	r3, #1
 8000a50:	1a9a      	subs	r2, r3, r2
 8000a52:	2a1b      	cmp	r2, #27
 8000a54:	dc21      	bgt.n	8000a9a <__aeabi_fmul+0x242>
 8000a56:	0023      	movs	r3, r4
 8000a58:	9901      	ldr	r1, [sp, #4]
 8000a5a:	40d3      	lsrs	r3, r2
 8000a5c:	319e      	adds	r1, #158	; 0x9e
 8000a5e:	408c      	lsls	r4, r1
 8000a60:	001a      	movs	r2, r3
 8000a62:	0023      	movs	r3, r4
 8000a64:	1e5c      	subs	r4, r3, #1
 8000a66:	41a3      	sbcs	r3, r4
 8000a68:	4313      	orrs	r3, r2
 8000a6a:	075a      	lsls	r2, r3, #29
 8000a6c:	d004      	beq.n	8000a78 <__aeabi_fmul+0x220>
 8000a6e:	220f      	movs	r2, #15
 8000a70:	401a      	ands	r2, r3
 8000a72:	2a04      	cmp	r2, #4
 8000a74:	d000      	beq.n	8000a78 <__aeabi_fmul+0x220>
 8000a76:	3304      	adds	r3, #4
 8000a78:	015a      	lsls	r2, r3, #5
 8000a7a:	d411      	bmi.n	8000aa0 <__aeabi_fmul+0x248>
 8000a7c:	019b      	lsls	r3, r3, #6
 8000a7e:	0a5b      	lsrs	r3, r3, #9
 8000a80:	2200      	movs	r2, #0
 8000a82:	e744      	b.n	800090e <__aeabi_fmul+0xb6>
 8000a84:	2380      	movs	r3, #128	; 0x80
 8000a86:	464a      	mov	r2, r9
 8000a88:	03db      	lsls	r3, r3, #15
 8000a8a:	4313      	orrs	r3, r2
 8000a8c:	025b      	lsls	r3, r3, #9
 8000a8e:	0a5b      	lsrs	r3, r3, #9
 8000a90:	0037      	movs	r7, r6
 8000a92:	22ff      	movs	r2, #255	; 0xff
 8000a94:	e73b      	b.n	800090e <__aeabi_fmul+0xb6>
 8000a96:	9501      	str	r5, [sp, #4]
 8000a98:	e787      	b.n	80009aa <__aeabi_fmul+0x152>
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	e736      	b.n	800090e <__aeabi_fmul+0xb6>
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	e733      	b.n	800090e <__aeabi_fmul+0xb6>
 8000aa6:	2380      	movs	r3, #128	; 0x80
 8000aa8:	03db      	lsls	r3, r3, #15
 8000aaa:	4323      	orrs	r3, r4
 8000aac:	025b      	lsls	r3, r3, #9
 8000aae:	0a5b      	lsrs	r3, r3, #9
 8000ab0:	22ff      	movs	r2, #255	; 0xff
 8000ab2:	e72c      	b.n	800090e <__aeabi_fmul+0xb6>
 8000ab4:	0800c4c0 	.word	0x0800c4c0
 8000ab8:	f7ffffff 	.word	0xf7ffffff

08000abc <__aeabi_fsub>:
 8000abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000abe:	4647      	mov	r7, r8
 8000ac0:	46ce      	mov	lr, r9
 8000ac2:	0044      	lsls	r4, r0, #1
 8000ac4:	0fc2      	lsrs	r2, r0, #31
 8000ac6:	b580      	push	{r7, lr}
 8000ac8:	0247      	lsls	r7, r0, #9
 8000aca:	0248      	lsls	r0, r1, #9
 8000acc:	0a40      	lsrs	r0, r0, #9
 8000ace:	4684      	mov	ip, r0
 8000ad0:	4666      	mov	r6, ip
 8000ad2:	0048      	lsls	r0, r1, #1
 8000ad4:	0a7f      	lsrs	r7, r7, #9
 8000ad6:	0e24      	lsrs	r4, r4, #24
 8000ad8:	00f6      	lsls	r6, r6, #3
 8000ada:	0025      	movs	r5, r4
 8000adc:	4690      	mov	r8, r2
 8000ade:	00fb      	lsls	r3, r7, #3
 8000ae0:	0e00      	lsrs	r0, r0, #24
 8000ae2:	0fc9      	lsrs	r1, r1, #31
 8000ae4:	46b1      	mov	r9, r6
 8000ae6:	28ff      	cmp	r0, #255	; 0xff
 8000ae8:	d100      	bne.n	8000aec <__aeabi_fsub+0x30>
 8000aea:	e085      	b.n	8000bf8 <__aeabi_fsub+0x13c>
 8000aec:	2601      	movs	r6, #1
 8000aee:	4071      	eors	r1, r6
 8000af0:	1a26      	subs	r6, r4, r0
 8000af2:	4291      	cmp	r1, r2
 8000af4:	d057      	beq.n	8000ba6 <__aeabi_fsub+0xea>
 8000af6:	2e00      	cmp	r6, #0
 8000af8:	dd43      	ble.n	8000b82 <__aeabi_fsub+0xc6>
 8000afa:	2800      	cmp	r0, #0
 8000afc:	d000      	beq.n	8000b00 <__aeabi_fsub+0x44>
 8000afe:	e07f      	b.n	8000c00 <__aeabi_fsub+0x144>
 8000b00:	4649      	mov	r1, r9
 8000b02:	2900      	cmp	r1, #0
 8000b04:	d100      	bne.n	8000b08 <__aeabi_fsub+0x4c>
 8000b06:	e0aa      	b.n	8000c5e <__aeabi_fsub+0x1a2>
 8000b08:	3e01      	subs	r6, #1
 8000b0a:	2e00      	cmp	r6, #0
 8000b0c:	d000      	beq.n	8000b10 <__aeabi_fsub+0x54>
 8000b0e:	e0f7      	b.n	8000d00 <__aeabi_fsub+0x244>
 8000b10:	1a5b      	subs	r3, r3, r1
 8000b12:	015a      	lsls	r2, r3, #5
 8000b14:	d400      	bmi.n	8000b18 <__aeabi_fsub+0x5c>
 8000b16:	e08b      	b.n	8000c30 <__aeabi_fsub+0x174>
 8000b18:	019b      	lsls	r3, r3, #6
 8000b1a:	099c      	lsrs	r4, r3, #6
 8000b1c:	0020      	movs	r0, r4
 8000b1e:	f001 f855 	bl	8001bcc <__clzsi2>
 8000b22:	3805      	subs	r0, #5
 8000b24:	4084      	lsls	r4, r0
 8000b26:	4285      	cmp	r5, r0
 8000b28:	dd00      	ble.n	8000b2c <__aeabi_fsub+0x70>
 8000b2a:	e0d3      	b.n	8000cd4 <__aeabi_fsub+0x218>
 8000b2c:	1b45      	subs	r5, r0, r5
 8000b2e:	0023      	movs	r3, r4
 8000b30:	2020      	movs	r0, #32
 8000b32:	3501      	adds	r5, #1
 8000b34:	40eb      	lsrs	r3, r5
 8000b36:	1b45      	subs	r5, r0, r5
 8000b38:	40ac      	lsls	r4, r5
 8000b3a:	1e62      	subs	r2, r4, #1
 8000b3c:	4194      	sbcs	r4, r2
 8000b3e:	4323      	orrs	r3, r4
 8000b40:	2407      	movs	r4, #7
 8000b42:	2500      	movs	r5, #0
 8000b44:	401c      	ands	r4, r3
 8000b46:	2201      	movs	r2, #1
 8000b48:	4641      	mov	r1, r8
 8000b4a:	400a      	ands	r2, r1
 8000b4c:	2c00      	cmp	r4, #0
 8000b4e:	d004      	beq.n	8000b5a <__aeabi_fsub+0x9e>
 8000b50:	210f      	movs	r1, #15
 8000b52:	4019      	ands	r1, r3
 8000b54:	2904      	cmp	r1, #4
 8000b56:	d000      	beq.n	8000b5a <__aeabi_fsub+0x9e>
 8000b58:	3304      	adds	r3, #4
 8000b5a:	0159      	lsls	r1, r3, #5
 8000b5c:	d400      	bmi.n	8000b60 <__aeabi_fsub+0xa4>
 8000b5e:	e080      	b.n	8000c62 <__aeabi_fsub+0x1a6>
 8000b60:	3501      	adds	r5, #1
 8000b62:	b2ec      	uxtb	r4, r5
 8000b64:	2dff      	cmp	r5, #255	; 0xff
 8000b66:	d000      	beq.n	8000b6a <__aeabi_fsub+0xae>
 8000b68:	e0a3      	b.n	8000cb2 <__aeabi_fsub+0x1f6>
 8000b6a:	24ff      	movs	r4, #255	; 0xff
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	025b      	lsls	r3, r3, #9
 8000b70:	05e4      	lsls	r4, r4, #23
 8000b72:	0a58      	lsrs	r0, r3, #9
 8000b74:	07d2      	lsls	r2, r2, #31
 8000b76:	4320      	orrs	r0, r4
 8000b78:	4310      	orrs	r0, r2
 8000b7a:	bc0c      	pop	{r2, r3}
 8000b7c:	4690      	mov	r8, r2
 8000b7e:	4699      	mov	r9, r3
 8000b80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000b82:	2e00      	cmp	r6, #0
 8000b84:	d174      	bne.n	8000c70 <__aeabi_fsub+0x1b4>
 8000b86:	1c60      	adds	r0, r4, #1
 8000b88:	b2c0      	uxtb	r0, r0
 8000b8a:	2801      	cmp	r0, #1
 8000b8c:	dc00      	bgt.n	8000b90 <__aeabi_fsub+0xd4>
 8000b8e:	e0a7      	b.n	8000ce0 <__aeabi_fsub+0x224>
 8000b90:	464a      	mov	r2, r9
 8000b92:	1a9c      	subs	r4, r3, r2
 8000b94:	0162      	lsls	r2, r4, #5
 8000b96:	d500      	bpl.n	8000b9a <__aeabi_fsub+0xde>
 8000b98:	e0b6      	b.n	8000d08 <__aeabi_fsub+0x24c>
 8000b9a:	2c00      	cmp	r4, #0
 8000b9c:	d1be      	bne.n	8000b1c <__aeabi_fsub+0x60>
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	2400      	movs	r4, #0
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	e7e3      	b.n	8000b6e <__aeabi_fsub+0xb2>
 8000ba6:	2e00      	cmp	r6, #0
 8000ba8:	dc00      	bgt.n	8000bac <__aeabi_fsub+0xf0>
 8000baa:	e085      	b.n	8000cb8 <__aeabi_fsub+0x1fc>
 8000bac:	2800      	cmp	r0, #0
 8000bae:	d046      	beq.n	8000c3e <__aeabi_fsub+0x182>
 8000bb0:	2cff      	cmp	r4, #255	; 0xff
 8000bb2:	d049      	beq.n	8000c48 <__aeabi_fsub+0x18c>
 8000bb4:	2280      	movs	r2, #128	; 0x80
 8000bb6:	4648      	mov	r0, r9
 8000bb8:	04d2      	lsls	r2, r2, #19
 8000bba:	4310      	orrs	r0, r2
 8000bbc:	4681      	mov	r9, r0
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	2e1b      	cmp	r6, #27
 8000bc2:	dc09      	bgt.n	8000bd8 <__aeabi_fsub+0x11c>
 8000bc4:	2020      	movs	r0, #32
 8000bc6:	464c      	mov	r4, r9
 8000bc8:	1b80      	subs	r0, r0, r6
 8000bca:	4084      	lsls	r4, r0
 8000bcc:	464a      	mov	r2, r9
 8000bce:	0020      	movs	r0, r4
 8000bd0:	40f2      	lsrs	r2, r6
 8000bd2:	1e44      	subs	r4, r0, #1
 8000bd4:	41a0      	sbcs	r0, r4
 8000bd6:	4302      	orrs	r2, r0
 8000bd8:	189b      	adds	r3, r3, r2
 8000bda:	015a      	lsls	r2, r3, #5
 8000bdc:	d528      	bpl.n	8000c30 <__aeabi_fsub+0x174>
 8000bde:	3501      	adds	r5, #1
 8000be0:	2dff      	cmp	r5, #255	; 0xff
 8000be2:	d100      	bne.n	8000be6 <__aeabi_fsub+0x12a>
 8000be4:	e0a8      	b.n	8000d38 <__aeabi_fsub+0x27c>
 8000be6:	2201      	movs	r2, #1
 8000be8:	2407      	movs	r4, #7
 8000bea:	4994      	ldr	r1, [pc, #592]	; (8000e3c <__aeabi_fsub+0x380>)
 8000bec:	401a      	ands	r2, r3
 8000bee:	085b      	lsrs	r3, r3, #1
 8000bf0:	400b      	ands	r3, r1
 8000bf2:	4313      	orrs	r3, r2
 8000bf4:	401c      	ands	r4, r3
 8000bf6:	e7a6      	b.n	8000b46 <__aeabi_fsub+0x8a>
 8000bf8:	2e00      	cmp	r6, #0
 8000bfa:	d000      	beq.n	8000bfe <__aeabi_fsub+0x142>
 8000bfc:	e778      	b.n	8000af0 <__aeabi_fsub+0x34>
 8000bfe:	e775      	b.n	8000aec <__aeabi_fsub+0x30>
 8000c00:	2cff      	cmp	r4, #255	; 0xff
 8000c02:	d054      	beq.n	8000cae <__aeabi_fsub+0x1f2>
 8000c04:	2280      	movs	r2, #128	; 0x80
 8000c06:	4649      	mov	r1, r9
 8000c08:	04d2      	lsls	r2, r2, #19
 8000c0a:	4311      	orrs	r1, r2
 8000c0c:	4689      	mov	r9, r1
 8000c0e:	2201      	movs	r2, #1
 8000c10:	2e1b      	cmp	r6, #27
 8000c12:	dc09      	bgt.n	8000c28 <__aeabi_fsub+0x16c>
 8000c14:	2120      	movs	r1, #32
 8000c16:	4648      	mov	r0, r9
 8000c18:	1b89      	subs	r1, r1, r6
 8000c1a:	4088      	lsls	r0, r1
 8000c1c:	464a      	mov	r2, r9
 8000c1e:	0001      	movs	r1, r0
 8000c20:	40f2      	lsrs	r2, r6
 8000c22:	1e48      	subs	r0, r1, #1
 8000c24:	4181      	sbcs	r1, r0
 8000c26:	430a      	orrs	r2, r1
 8000c28:	1a9b      	subs	r3, r3, r2
 8000c2a:	015a      	lsls	r2, r3, #5
 8000c2c:	d500      	bpl.n	8000c30 <__aeabi_fsub+0x174>
 8000c2e:	e773      	b.n	8000b18 <__aeabi_fsub+0x5c>
 8000c30:	2201      	movs	r2, #1
 8000c32:	4641      	mov	r1, r8
 8000c34:	400a      	ands	r2, r1
 8000c36:	0759      	lsls	r1, r3, #29
 8000c38:	d000      	beq.n	8000c3c <__aeabi_fsub+0x180>
 8000c3a:	e789      	b.n	8000b50 <__aeabi_fsub+0x94>
 8000c3c:	e011      	b.n	8000c62 <__aeabi_fsub+0x1a6>
 8000c3e:	4648      	mov	r0, r9
 8000c40:	2800      	cmp	r0, #0
 8000c42:	d158      	bne.n	8000cf6 <__aeabi_fsub+0x23a>
 8000c44:	2cff      	cmp	r4, #255	; 0xff
 8000c46:	d10c      	bne.n	8000c62 <__aeabi_fsub+0x1a6>
 8000c48:	08db      	lsrs	r3, r3, #3
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d100      	bne.n	8000c50 <__aeabi_fsub+0x194>
 8000c4e:	e78c      	b.n	8000b6a <__aeabi_fsub+0xae>
 8000c50:	2080      	movs	r0, #128	; 0x80
 8000c52:	03c0      	lsls	r0, r0, #15
 8000c54:	4303      	orrs	r3, r0
 8000c56:	025b      	lsls	r3, r3, #9
 8000c58:	0a5b      	lsrs	r3, r3, #9
 8000c5a:	24ff      	movs	r4, #255	; 0xff
 8000c5c:	e787      	b.n	8000b6e <__aeabi_fsub+0xb2>
 8000c5e:	2cff      	cmp	r4, #255	; 0xff
 8000c60:	d025      	beq.n	8000cae <__aeabi_fsub+0x1f2>
 8000c62:	08db      	lsrs	r3, r3, #3
 8000c64:	2dff      	cmp	r5, #255	; 0xff
 8000c66:	d0f0      	beq.n	8000c4a <__aeabi_fsub+0x18e>
 8000c68:	025b      	lsls	r3, r3, #9
 8000c6a:	0a5b      	lsrs	r3, r3, #9
 8000c6c:	b2ec      	uxtb	r4, r5
 8000c6e:	e77e      	b.n	8000b6e <__aeabi_fsub+0xb2>
 8000c70:	2c00      	cmp	r4, #0
 8000c72:	d04d      	beq.n	8000d10 <__aeabi_fsub+0x254>
 8000c74:	28ff      	cmp	r0, #255	; 0xff
 8000c76:	d018      	beq.n	8000caa <__aeabi_fsub+0x1ee>
 8000c78:	2480      	movs	r4, #128	; 0x80
 8000c7a:	04e4      	lsls	r4, r4, #19
 8000c7c:	4272      	negs	r2, r6
 8000c7e:	4323      	orrs	r3, r4
 8000c80:	2a1b      	cmp	r2, #27
 8000c82:	dd00      	ble.n	8000c86 <__aeabi_fsub+0x1ca>
 8000c84:	e0c4      	b.n	8000e10 <__aeabi_fsub+0x354>
 8000c86:	001c      	movs	r4, r3
 8000c88:	2520      	movs	r5, #32
 8000c8a:	40d4      	lsrs	r4, r2
 8000c8c:	1aaa      	subs	r2, r5, r2
 8000c8e:	4093      	lsls	r3, r2
 8000c90:	1e5a      	subs	r2, r3, #1
 8000c92:	4193      	sbcs	r3, r2
 8000c94:	4323      	orrs	r3, r4
 8000c96:	464a      	mov	r2, r9
 8000c98:	0005      	movs	r5, r0
 8000c9a:	1ad3      	subs	r3, r2, r3
 8000c9c:	4688      	mov	r8, r1
 8000c9e:	e738      	b.n	8000b12 <__aeabi_fsub+0x56>
 8000ca0:	1c72      	adds	r2, r6, #1
 8000ca2:	d0f8      	beq.n	8000c96 <__aeabi_fsub+0x1da>
 8000ca4:	43f2      	mvns	r2, r6
 8000ca6:	28ff      	cmp	r0, #255	; 0xff
 8000ca8:	d1ea      	bne.n	8000c80 <__aeabi_fsub+0x1c4>
 8000caa:	000a      	movs	r2, r1
 8000cac:	464b      	mov	r3, r9
 8000cae:	25ff      	movs	r5, #255	; 0xff
 8000cb0:	e7d7      	b.n	8000c62 <__aeabi_fsub+0x1a6>
 8000cb2:	019b      	lsls	r3, r3, #6
 8000cb4:	0a5b      	lsrs	r3, r3, #9
 8000cb6:	e75a      	b.n	8000b6e <__aeabi_fsub+0xb2>
 8000cb8:	2e00      	cmp	r6, #0
 8000cba:	d141      	bne.n	8000d40 <__aeabi_fsub+0x284>
 8000cbc:	1c65      	adds	r5, r4, #1
 8000cbe:	b2e9      	uxtb	r1, r5
 8000cc0:	2901      	cmp	r1, #1
 8000cc2:	dd45      	ble.n	8000d50 <__aeabi_fsub+0x294>
 8000cc4:	2dff      	cmp	r5, #255	; 0xff
 8000cc6:	d100      	bne.n	8000cca <__aeabi_fsub+0x20e>
 8000cc8:	e74f      	b.n	8000b6a <__aeabi_fsub+0xae>
 8000cca:	2407      	movs	r4, #7
 8000ccc:	444b      	add	r3, r9
 8000cce:	085b      	lsrs	r3, r3, #1
 8000cd0:	401c      	ands	r4, r3
 8000cd2:	e738      	b.n	8000b46 <__aeabi_fsub+0x8a>
 8000cd4:	2207      	movs	r2, #7
 8000cd6:	4b5a      	ldr	r3, [pc, #360]	; (8000e40 <__aeabi_fsub+0x384>)
 8000cd8:	1a2d      	subs	r5, r5, r0
 8000cda:	4023      	ands	r3, r4
 8000cdc:	4014      	ands	r4, r2
 8000cde:	e732      	b.n	8000b46 <__aeabi_fsub+0x8a>
 8000ce0:	2c00      	cmp	r4, #0
 8000ce2:	d11d      	bne.n	8000d20 <__aeabi_fsub+0x264>
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d17a      	bne.n	8000dde <__aeabi_fsub+0x322>
 8000ce8:	464b      	mov	r3, r9
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d100      	bne.n	8000cf0 <__aeabi_fsub+0x234>
 8000cee:	e091      	b.n	8000e14 <__aeabi_fsub+0x358>
 8000cf0:	000a      	movs	r2, r1
 8000cf2:	2500      	movs	r5, #0
 8000cf4:	e7b5      	b.n	8000c62 <__aeabi_fsub+0x1a6>
 8000cf6:	3e01      	subs	r6, #1
 8000cf8:	2e00      	cmp	r6, #0
 8000cfa:	d119      	bne.n	8000d30 <__aeabi_fsub+0x274>
 8000cfc:	444b      	add	r3, r9
 8000cfe:	e76c      	b.n	8000bda <__aeabi_fsub+0x11e>
 8000d00:	2cff      	cmp	r4, #255	; 0xff
 8000d02:	d184      	bne.n	8000c0e <__aeabi_fsub+0x152>
 8000d04:	25ff      	movs	r5, #255	; 0xff
 8000d06:	e7ac      	b.n	8000c62 <__aeabi_fsub+0x1a6>
 8000d08:	464a      	mov	r2, r9
 8000d0a:	4688      	mov	r8, r1
 8000d0c:	1ad4      	subs	r4, r2, r3
 8000d0e:	e705      	b.n	8000b1c <__aeabi_fsub+0x60>
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d1c5      	bne.n	8000ca0 <__aeabi_fsub+0x1e4>
 8000d14:	000a      	movs	r2, r1
 8000d16:	28ff      	cmp	r0, #255	; 0xff
 8000d18:	d0c8      	beq.n	8000cac <__aeabi_fsub+0x1f0>
 8000d1a:	0005      	movs	r5, r0
 8000d1c:	464b      	mov	r3, r9
 8000d1e:	e7a0      	b.n	8000c62 <__aeabi_fsub+0x1a6>
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d149      	bne.n	8000db8 <__aeabi_fsub+0x2fc>
 8000d24:	464b      	mov	r3, r9
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d077      	beq.n	8000e1a <__aeabi_fsub+0x35e>
 8000d2a:	000a      	movs	r2, r1
 8000d2c:	25ff      	movs	r5, #255	; 0xff
 8000d2e:	e798      	b.n	8000c62 <__aeabi_fsub+0x1a6>
 8000d30:	2cff      	cmp	r4, #255	; 0xff
 8000d32:	d000      	beq.n	8000d36 <__aeabi_fsub+0x27a>
 8000d34:	e743      	b.n	8000bbe <__aeabi_fsub+0x102>
 8000d36:	e787      	b.n	8000c48 <__aeabi_fsub+0x18c>
 8000d38:	000a      	movs	r2, r1
 8000d3a:	24ff      	movs	r4, #255	; 0xff
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	e716      	b.n	8000b6e <__aeabi_fsub+0xb2>
 8000d40:	2c00      	cmp	r4, #0
 8000d42:	d115      	bne.n	8000d70 <__aeabi_fsub+0x2b4>
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d157      	bne.n	8000df8 <__aeabi_fsub+0x33c>
 8000d48:	28ff      	cmp	r0, #255	; 0xff
 8000d4a:	d1e6      	bne.n	8000d1a <__aeabi_fsub+0x25e>
 8000d4c:	464b      	mov	r3, r9
 8000d4e:	e77b      	b.n	8000c48 <__aeabi_fsub+0x18c>
 8000d50:	2c00      	cmp	r4, #0
 8000d52:	d120      	bne.n	8000d96 <__aeabi_fsub+0x2da>
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d057      	beq.n	8000e08 <__aeabi_fsub+0x34c>
 8000d58:	4649      	mov	r1, r9
 8000d5a:	2900      	cmp	r1, #0
 8000d5c:	d053      	beq.n	8000e06 <__aeabi_fsub+0x34a>
 8000d5e:	444b      	add	r3, r9
 8000d60:	015a      	lsls	r2, r3, #5
 8000d62:	d568      	bpl.n	8000e36 <__aeabi_fsub+0x37a>
 8000d64:	2407      	movs	r4, #7
 8000d66:	4a36      	ldr	r2, [pc, #216]	; (8000e40 <__aeabi_fsub+0x384>)
 8000d68:	401c      	ands	r4, r3
 8000d6a:	2501      	movs	r5, #1
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	e6ea      	b.n	8000b46 <__aeabi_fsub+0x8a>
 8000d70:	28ff      	cmp	r0, #255	; 0xff
 8000d72:	d0eb      	beq.n	8000d4c <__aeabi_fsub+0x290>
 8000d74:	2280      	movs	r2, #128	; 0x80
 8000d76:	04d2      	lsls	r2, r2, #19
 8000d78:	4276      	negs	r6, r6
 8000d7a:	4313      	orrs	r3, r2
 8000d7c:	2e1b      	cmp	r6, #27
 8000d7e:	dc53      	bgt.n	8000e28 <__aeabi_fsub+0x36c>
 8000d80:	2520      	movs	r5, #32
 8000d82:	1bad      	subs	r5, r5, r6
 8000d84:	001a      	movs	r2, r3
 8000d86:	40ab      	lsls	r3, r5
 8000d88:	40f2      	lsrs	r2, r6
 8000d8a:	1e5c      	subs	r4, r3, #1
 8000d8c:	41a3      	sbcs	r3, r4
 8000d8e:	4313      	orrs	r3, r2
 8000d90:	444b      	add	r3, r9
 8000d92:	0005      	movs	r5, r0
 8000d94:	e721      	b.n	8000bda <__aeabi_fsub+0x11e>
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d0d8      	beq.n	8000d4c <__aeabi_fsub+0x290>
 8000d9a:	4649      	mov	r1, r9
 8000d9c:	2900      	cmp	r1, #0
 8000d9e:	d100      	bne.n	8000da2 <__aeabi_fsub+0x2e6>
 8000da0:	e752      	b.n	8000c48 <__aeabi_fsub+0x18c>
 8000da2:	2180      	movs	r1, #128	; 0x80
 8000da4:	03c9      	lsls	r1, r1, #15
 8000da6:	420f      	tst	r7, r1
 8000da8:	d100      	bne.n	8000dac <__aeabi_fsub+0x2f0>
 8000daa:	e74d      	b.n	8000c48 <__aeabi_fsub+0x18c>
 8000dac:	4660      	mov	r0, ip
 8000dae:	4208      	tst	r0, r1
 8000db0:	d000      	beq.n	8000db4 <__aeabi_fsub+0x2f8>
 8000db2:	e749      	b.n	8000c48 <__aeabi_fsub+0x18c>
 8000db4:	464b      	mov	r3, r9
 8000db6:	e747      	b.n	8000c48 <__aeabi_fsub+0x18c>
 8000db8:	4648      	mov	r0, r9
 8000dba:	25ff      	movs	r5, #255	; 0xff
 8000dbc:	2800      	cmp	r0, #0
 8000dbe:	d100      	bne.n	8000dc2 <__aeabi_fsub+0x306>
 8000dc0:	e74f      	b.n	8000c62 <__aeabi_fsub+0x1a6>
 8000dc2:	2280      	movs	r2, #128	; 0x80
 8000dc4:	03d2      	lsls	r2, r2, #15
 8000dc6:	4217      	tst	r7, r2
 8000dc8:	d004      	beq.n	8000dd4 <__aeabi_fsub+0x318>
 8000dca:	4660      	mov	r0, ip
 8000dcc:	4210      	tst	r0, r2
 8000dce:	d101      	bne.n	8000dd4 <__aeabi_fsub+0x318>
 8000dd0:	464b      	mov	r3, r9
 8000dd2:	4688      	mov	r8, r1
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	4641      	mov	r1, r8
 8000dd8:	25ff      	movs	r5, #255	; 0xff
 8000dda:	400a      	ands	r2, r1
 8000ddc:	e741      	b.n	8000c62 <__aeabi_fsub+0x1a6>
 8000dde:	4648      	mov	r0, r9
 8000de0:	2800      	cmp	r0, #0
 8000de2:	d01f      	beq.n	8000e24 <__aeabi_fsub+0x368>
 8000de4:	1a1a      	subs	r2, r3, r0
 8000de6:	0150      	lsls	r0, r2, #5
 8000de8:	d520      	bpl.n	8000e2c <__aeabi_fsub+0x370>
 8000dea:	464a      	mov	r2, r9
 8000dec:	2407      	movs	r4, #7
 8000dee:	1ad3      	subs	r3, r2, r3
 8000df0:	401c      	ands	r4, r3
 8000df2:	4688      	mov	r8, r1
 8000df4:	2500      	movs	r5, #0
 8000df6:	e6a6      	b.n	8000b46 <__aeabi_fsub+0x8a>
 8000df8:	1c74      	adds	r4, r6, #1
 8000dfa:	d0c9      	beq.n	8000d90 <__aeabi_fsub+0x2d4>
 8000dfc:	43f6      	mvns	r6, r6
 8000dfe:	28ff      	cmp	r0, #255	; 0xff
 8000e00:	d1bc      	bne.n	8000d7c <__aeabi_fsub+0x2c0>
 8000e02:	464b      	mov	r3, r9
 8000e04:	e720      	b.n	8000c48 <__aeabi_fsub+0x18c>
 8000e06:	4699      	mov	r9, r3
 8000e08:	464b      	mov	r3, r9
 8000e0a:	2500      	movs	r5, #0
 8000e0c:	08db      	lsrs	r3, r3, #3
 8000e0e:	e72b      	b.n	8000c68 <__aeabi_fsub+0x1ac>
 8000e10:	2301      	movs	r3, #1
 8000e12:	e740      	b.n	8000c96 <__aeabi_fsub+0x1da>
 8000e14:	2200      	movs	r2, #0
 8000e16:	2300      	movs	r3, #0
 8000e18:	e6a9      	b.n	8000b6e <__aeabi_fsub+0xb2>
 8000e1a:	2380      	movs	r3, #128	; 0x80
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	03db      	lsls	r3, r3, #15
 8000e20:	24ff      	movs	r4, #255	; 0xff
 8000e22:	e6a4      	b.n	8000b6e <__aeabi_fsub+0xb2>
 8000e24:	2500      	movs	r5, #0
 8000e26:	e71c      	b.n	8000c62 <__aeabi_fsub+0x1a6>
 8000e28:	2301      	movs	r3, #1
 8000e2a:	e7b1      	b.n	8000d90 <__aeabi_fsub+0x2d4>
 8000e2c:	2a00      	cmp	r2, #0
 8000e2e:	d0f1      	beq.n	8000e14 <__aeabi_fsub+0x358>
 8000e30:	0013      	movs	r3, r2
 8000e32:	2500      	movs	r5, #0
 8000e34:	e6fc      	b.n	8000c30 <__aeabi_fsub+0x174>
 8000e36:	2500      	movs	r5, #0
 8000e38:	e6fa      	b.n	8000c30 <__aeabi_fsub+0x174>
 8000e3a:	46c0      	nop			; (mov r8, r8)
 8000e3c:	7dffffff 	.word	0x7dffffff
 8000e40:	fbffffff 	.word	0xfbffffff

08000e44 <__aeabi_f2iz>:
 8000e44:	0241      	lsls	r1, r0, #9
 8000e46:	0042      	lsls	r2, r0, #1
 8000e48:	0fc3      	lsrs	r3, r0, #31
 8000e4a:	0a49      	lsrs	r1, r1, #9
 8000e4c:	0e12      	lsrs	r2, r2, #24
 8000e4e:	2000      	movs	r0, #0
 8000e50:	2a7e      	cmp	r2, #126	; 0x7e
 8000e52:	d90d      	bls.n	8000e70 <__aeabi_f2iz+0x2c>
 8000e54:	2a9d      	cmp	r2, #157	; 0x9d
 8000e56:	d80c      	bhi.n	8000e72 <__aeabi_f2iz+0x2e>
 8000e58:	2080      	movs	r0, #128	; 0x80
 8000e5a:	0400      	lsls	r0, r0, #16
 8000e5c:	4301      	orrs	r1, r0
 8000e5e:	2a95      	cmp	r2, #149	; 0x95
 8000e60:	dc0a      	bgt.n	8000e78 <__aeabi_f2iz+0x34>
 8000e62:	2096      	movs	r0, #150	; 0x96
 8000e64:	1a82      	subs	r2, r0, r2
 8000e66:	40d1      	lsrs	r1, r2
 8000e68:	4248      	negs	r0, r1
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d100      	bne.n	8000e70 <__aeabi_f2iz+0x2c>
 8000e6e:	0008      	movs	r0, r1
 8000e70:	4770      	bx	lr
 8000e72:	4a03      	ldr	r2, [pc, #12]	; (8000e80 <__aeabi_f2iz+0x3c>)
 8000e74:	1898      	adds	r0, r3, r2
 8000e76:	e7fb      	b.n	8000e70 <__aeabi_f2iz+0x2c>
 8000e78:	3a96      	subs	r2, #150	; 0x96
 8000e7a:	4091      	lsls	r1, r2
 8000e7c:	e7f4      	b.n	8000e68 <__aeabi_f2iz+0x24>
 8000e7e:	46c0      	nop			; (mov r8, r8)
 8000e80:	7fffffff 	.word	0x7fffffff

08000e84 <__aeabi_ui2f>:
 8000e84:	b570      	push	{r4, r5, r6, lr}
 8000e86:	1e04      	subs	r4, r0, #0
 8000e88:	d034      	beq.n	8000ef4 <__aeabi_ui2f+0x70>
 8000e8a:	f000 fe9f 	bl	8001bcc <__clzsi2>
 8000e8e:	229e      	movs	r2, #158	; 0x9e
 8000e90:	1a12      	subs	r2, r2, r0
 8000e92:	2a96      	cmp	r2, #150	; 0x96
 8000e94:	dc07      	bgt.n	8000ea6 <__aeabi_ui2f+0x22>
 8000e96:	b2d2      	uxtb	r2, r2
 8000e98:	2808      	cmp	r0, #8
 8000e9a:	dd2e      	ble.n	8000efa <__aeabi_ui2f+0x76>
 8000e9c:	3808      	subs	r0, #8
 8000e9e:	4084      	lsls	r4, r0
 8000ea0:	0260      	lsls	r0, r4, #9
 8000ea2:	0a40      	lsrs	r0, r0, #9
 8000ea4:	e021      	b.n	8000eea <__aeabi_ui2f+0x66>
 8000ea6:	2a99      	cmp	r2, #153	; 0x99
 8000ea8:	dd09      	ble.n	8000ebe <__aeabi_ui2f+0x3a>
 8000eaa:	0003      	movs	r3, r0
 8000eac:	0021      	movs	r1, r4
 8000eae:	331b      	adds	r3, #27
 8000eb0:	4099      	lsls	r1, r3
 8000eb2:	1e4b      	subs	r3, r1, #1
 8000eb4:	4199      	sbcs	r1, r3
 8000eb6:	2305      	movs	r3, #5
 8000eb8:	1a1b      	subs	r3, r3, r0
 8000eba:	40dc      	lsrs	r4, r3
 8000ebc:	430c      	orrs	r4, r1
 8000ebe:	2805      	cmp	r0, #5
 8000ec0:	dd01      	ble.n	8000ec6 <__aeabi_ui2f+0x42>
 8000ec2:	1f43      	subs	r3, r0, #5
 8000ec4:	409c      	lsls	r4, r3
 8000ec6:	0023      	movs	r3, r4
 8000ec8:	490d      	ldr	r1, [pc, #52]	; (8000f00 <__aeabi_ui2f+0x7c>)
 8000eca:	400b      	ands	r3, r1
 8000ecc:	0765      	lsls	r5, r4, #29
 8000ece:	d009      	beq.n	8000ee4 <__aeabi_ui2f+0x60>
 8000ed0:	250f      	movs	r5, #15
 8000ed2:	402c      	ands	r4, r5
 8000ed4:	2c04      	cmp	r4, #4
 8000ed6:	d005      	beq.n	8000ee4 <__aeabi_ui2f+0x60>
 8000ed8:	3304      	adds	r3, #4
 8000eda:	015c      	lsls	r4, r3, #5
 8000edc:	d502      	bpl.n	8000ee4 <__aeabi_ui2f+0x60>
 8000ede:	229f      	movs	r2, #159	; 0x9f
 8000ee0:	400b      	ands	r3, r1
 8000ee2:	1a12      	subs	r2, r2, r0
 8000ee4:	019b      	lsls	r3, r3, #6
 8000ee6:	0a58      	lsrs	r0, r3, #9
 8000ee8:	b2d2      	uxtb	r2, r2
 8000eea:	0240      	lsls	r0, r0, #9
 8000eec:	05d2      	lsls	r2, r2, #23
 8000eee:	0a40      	lsrs	r0, r0, #9
 8000ef0:	4310      	orrs	r0, r2
 8000ef2:	bd70      	pop	{r4, r5, r6, pc}
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	2000      	movs	r0, #0
 8000ef8:	e7f7      	b.n	8000eea <__aeabi_ui2f+0x66>
 8000efa:	0260      	lsls	r0, r4, #9
 8000efc:	0a40      	lsrs	r0, r0, #9
 8000efe:	e7f4      	b.n	8000eea <__aeabi_ui2f+0x66>
 8000f00:	fbffffff 	.word	0xfbffffff

08000f04 <__aeabi_ddiv>:
 8000f04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f06:	4657      	mov	r7, sl
 8000f08:	46de      	mov	lr, fp
 8000f0a:	464e      	mov	r6, r9
 8000f0c:	4645      	mov	r5, r8
 8000f0e:	b5e0      	push	{r5, r6, r7, lr}
 8000f10:	4683      	mov	fp, r0
 8000f12:	0007      	movs	r7, r0
 8000f14:	030e      	lsls	r6, r1, #12
 8000f16:	0048      	lsls	r0, r1, #1
 8000f18:	b085      	sub	sp, #20
 8000f1a:	4692      	mov	sl, r2
 8000f1c:	001c      	movs	r4, r3
 8000f1e:	0b36      	lsrs	r6, r6, #12
 8000f20:	0d40      	lsrs	r0, r0, #21
 8000f22:	0fcd      	lsrs	r5, r1, #31
 8000f24:	2800      	cmp	r0, #0
 8000f26:	d100      	bne.n	8000f2a <__aeabi_ddiv+0x26>
 8000f28:	e09d      	b.n	8001066 <__aeabi_ddiv+0x162>
 8000f2a:	4b95      	ldr	r3, [pc, #596]	; (8001180 <__aeabi_ddiv+0x27c>)
 8000f2c:	4298      	cmp	r0, r3
 8000f2e:	d039      	beq.n	8000fa4 <__aeabi_ddiv+0xa0>
 8000f30:	2380      	movs	r3, #128	; 0x80
 8000f32:	00f6      	lsls	r6, r6, #3
 8000f34:	041b      	lsls	r3, r3, #16
 8000f36:	431e      	orrs	r6, r3
 8000f38:	4a92      	ldr	r2, [pc, #584]	; (8001184 <__aeabi_ddiv+0x280>)
 8000f3a:	0f7b      	lsrs	r3, r7, #29
 8000f3c:	4333      	orrs	r3, r6
 8000f3e:	4699      	mov	r9, r3
 8000f40:	4694      	mov	ip, r2
 8000f42:	0003      	movs	r3, r0
 8000f44:	4463      	add	r3, ip
 8000f46:	9300      	str	r3, [sp, #0]
 8000f48:	2300      	movs	r3, #0
 8000f4a:	2600      	movs	r6, #0
 8000f4c:	00ff      	lsls	r7, r7, #3
 8000f4e:	9302      	str	r3, [sp, #8]
 8000f50:	0323      	lsls	r3, r4, #12
 8000f52:	0b1b      	lsrs	r3, r3, #12
 8000f54:	4698      	mov	r8, r3
 8000f56:	0063      	lsls	r3, r4, #1
 8000f58:	0fe4      	lsrs	r4, r4, #31
 8000f5a:	4652      	mov	r2, sl
 8000f5c:	0d5b      	lsrs	r3, r3, #21
 8000f5e:	9401      	str	r4, [sp, #4]
 8000f60:	d100      	bne.n	8000f64 <__aeabi_ddiv+0x60>
 8000f62:	e0b3      	b.n	80010cc <__aeabi_ddiv+0x1c8>
 8000f64:	4986      	ldr	r1, [pc, #536]	; (8001180 <__aeabi_ddiv+0x27c>)
 8000f66:	428b      	cmp	r3, r1
 8000f68:	d100      	bne.n	8000f6c <__aeabi_ddiv+0x68>
 8000f6a:	e09e      	b.n	80010aa <__aeabi_ddiv+0x1a6>
 8000f6c:	4642      	mov	r2, r8
 8000f6e:	00d1      	lsls	r1, r2, #3
 8000f70:	2280      	movs	r2, #128	; 0x80
 8000f72:	0412      	lsls	r2, r2, #16
 8000f74:	430a      	orrs	r2, r1
 8000f76:	4651      	mov	r1, sl
 8000f78:	0f49      	lsrs	r1, r1, #29
 8000f7a:	4311      	orrs	r1, r2
 8000f7c:	468b      	mov	fp, r1
 8000f7e:	4981      	ldr	r1, [pc, #516]	; (8001184 <__aeabi_ddiv+0x280>)
 8000f80:	4652      	mov	r2, sl
 8000f82:	468c      	mov	ip, r1
 8000f84:	9900      	ldr	r1, [sp, #0]
 8000f86:	4463      	add	r3, ip
 8000f88:	1acb      	subs	r3, r1, r3
 8000f8a:	2100      	movs	r1, #0
 8000f8c:	00d2      	lsls	r2, r2, #3
 8000f8e:	9300      	str	r3, [sp, #0]
 8000f90:	002b      	movs	r3, r5
 8000f92:	4063      	eors	r3, r4
 8000f94:	469a      	mov	sl, r3
 8000f96:	2e0f      	cmp	r6, #15
 8000f98:	d900      	bls.n	8000f9c <__aeabi_ddiv+0x98>
 8000f9a:	e105      	b.n	80011a8 <__aeabi_ddiv+0x2a4>
 8000f9c:	4b7a      	ldr	r3, [pc, #488]	; (8001188 <__aeabi_ddiv+0x284>)
 8000f9e:	00b6      	lsls	r6, r6, #2
 8000fa0:	599b      	ldr	r3, [r3, r6]
 8000fa2:	469f      	mov	pc, r3
 8000fa4:	465b      	mov	r3, fp
 8000fa6:	4333      	orrs	r3, r6
 8000fa8:	4699      	mov	r9, r3
 8000faa:	d000      	beq.n	8000fae <__aeabi_ddiv+0xaa>
 8000fac:	e0b8      	b.n	8001120 <__aeabi_ddiv+0x21c>
 8000fae:	2302      	movs	r3, #2
 8000fb0:	2608      	movs	r6, #8
 8000fb2:	2700      	movs	r7, #0
 8000fb4:	9000      	str	r0, [sp, #0]
 8000fb6:	9302      	str	r3, [sp, #8]
 8000fb8:	e7ca      	b.n	8000f50 <__aeabi_ddiv+0x4c>
 8000fba:	46cb      	mov	fp, r9
 8000fbc:	003a      	movs	r2, r7
 8000fbe:	9902      	ldr	r1, [sp, #8]
 8000fc0:	9501      	str	r5, [sp, #4]
 8000fc2:	9b01      	ldr	r3, [sp, #4]
 8000fc4:	469a      	mov	sl, r3
 8000fc6:	2902      	cmp	r1, #2
 8000fc8:	d027      	beq.n	800101a <__aeabi_ddiv+0x116>
 8000fca:	2903      	cmp	r1, #3
 8000fcc:	d100      	bne.n	8000fd0 <__aeabi_ddiv+0xcc>
 8000fce:	e280      	b.n	80014d2 <__aeabi_ddiv+0x5ce>
 8000fd0:	2901      	cmp	r1, #1
 8000fd2:	d044      	beq.n	800105e <__aeabi_ddiv+0x15a>
 8000fd4:	496d      	ldr	r1, [pc, #436]	; (800118c <__aeabi_ddiv+0x288>)
 8000fd6:	9b00      	ldr	r3, [sp, #0]
 8000fd8:	468c      	mov	ip, r1
 8000fda:	4463      	add	r3, ip
 8000fdc:	001c      	movs	r4, r3
 8000fde:	2c00      	cmp	r4, #0
 8000fe0:	dd38      	ble.n	8001054 <__aeabi_ddiv+0x150>
 8000fe2:	0753      	lsls	r3, r2, #29
 8000fe4:	d000      	beq.n	8000fe8 <__aeabi_ddiv+0xe4>
 8000fe6:	e213      	b.n	8001410 <__aeabi_ddiv+0x50c>
 8000fe8:	08d2      	lsrs	r2, r2, #3
 8000fea:	465b      	mov	r3, fp
 8000fec:	01db      	lsls	r3, r3, #7
 8000fee:	d509      	bpl.n	8001004 <__aeabi_ddiv+0x100>
 8000ff0:	4659      	mov	r1, fp
 8000ff2:	4b67      	ldr	r3, [pc, #412]	; (8001190 <__aeabi_ddiv+0x28c>)
 8000ff4:	4019      	ands	r1, r3
 8000ff6:	468b      	mov	fp, r1
 8000ff8:	2180      	movs	r1, #128	; 0x80
 8000ffa:	00c9      	lsls	r1, r1, #3
 8000ffc:	468c      	mov	ip, r1
 8000ffe:	9b00      	ldr	r3, [sp, #0]
 8001000:	4463      	add	r3, ip
 8001002:	001c      	movs	r4, r3
 8001004:	4b63      	ldr	r3, [pc, #396]	; (8001194 <__aeabi_ddiv+0x290>)
 8001006:	429c      	cmp	r4, r3
 8001008:	dc07      	bgt.n	800101a <__aeabi_ddiv+0x116>
 800100a:	465b      	mov	r3, fp
 800100c:	0564      	lsls	r4, r4, #21
 800100e:	075f      	lsls	r7, r3, #29
 8001010:	025b      	lsls	r3, r3, #9
 8001012:	4317      	orrs	r7, r2
 8001014:	0b1b      	lsrs	r3, r3, #12
 8001016:	0d62      	lsrs	r2, r4, #21
 8001018:	e002      	b.n	8001020 <__aeabi_ddiv+0x11c>
 800101a:	2300      	movs	r3, #0
 800101c:	2700      	movs	r7, #0
 800101e:	4a58      	ldr	r2, [pc, #352]	; (8001180 <__aeabi_ddiv+0x27c>)
 8001020:	2100      	movs	r1, #0
 8001022:	031b      	lsls	r3, r3, #12
 8001024:	0b1c      	lsrs	r4, r3, #12
 8001026:	0d0b      	lsrs	r3, r1, #20
 8001028:	051b      	lsls	r3, r3, #20
 800102a:	4323      	orrs	r3, r4
 800102c:	0514      	lsls	r4, r2, #20
 800102e:	4a5a      	ldr	r2, [pc, #360]	; (8001198 <__aeabi_ddiv+0x294>)
 8001030:	0038      	movs	r0, r7
 8001032:	4013      	ands	r3, r2
 8001034:	431c      	orrs	r4, r3
 8001036:	4653      	mov	r3, sl
 8001038:	0064      	lsls	r4, r4, #1
 800103a:	07db      	lsls	r3, r3, #31
 800103c:	0864      	lsrs	r4, r4, #1
 800103e:	431c      	orrs	r4, r3
 8001040:	0021      	movs	r1, r4
 8001042:	b005      	add	sp, #20
 8001044:	bc3c      	pop	{r2, r3, r4, r5}
 8001046:	4690      	mov	r8, r2
 8001048:	4699      	mov	r9, r3
 800104a:	46a2      	mov	sl, r4
 800104c:	46ab      	mov	fp, r5
 800104e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001050:	2201      	movs	r2, #1
 8001052:	4252      	negs	r2, r2
 8001054:	2301      	movs	r3, #1
 8001056:	1b1b      	subs	r3, r3, r4
 8001058:	2b38      	cmp	r3, #56	; 0x38
 800105a:	dc00      	bgt.n	800105e <__aeabi_ddiv+0x15a>
 800105c:	e1ad      	b.n	80013ba <__aeabi_ddiv+0x4b6>
 800105e:	2200      	movs	r2, #0
 8001060:	2300      	movs	r3, #0
 8001062:	2700      	movs	r7, #0
 8001064:	e7dc      	b.n	8001020 <__aeabi_ddiv+0x11c>
 8001066:	465b      	mov	r3, fp
 8001068:	4333      	orrs	r3, r6
 800106a:	4699      	mov	r9, r3
 800106c:	d05e      	beq.n	800112c <__aeabi_ddiv+0x228>
 800106e:	2e00      	cmp	r6, #0
 8001070:	d100      	bne.n	8001074 <__aeabi_ddiv+0x170>
 8001072:	e18a      	b.n	800138a <__aeabi_ddiv+0x486>
 8001074:	0030      	movs	r0, r6
 8001076:	f000 fda9 	bl	8001bcc <__clzsi2>
 800107a:	0003      	movs	r3, r0
 800107c:	3b0b      	subs	r3, #11
 800107e:	2b1c      	cmp	r3, #28
 8001080:	dd00      	ble.n	8001084 <__aeabi_ddiv+0x180>
 8001082:	e17b      	b.n	800137c <__aeabi_ddiv+0x478>
 8001084:	221d      	movs	r2, #29
 8001086:	1ad3      	subs	r3, r2, r3
 8001088:	465a      	mov	r2, fp
 800108a:	0001      	movs	r1, r0
 800108c:	40da      	lsrs	r2, r3
 800108e:	3908      	subs	r1, #8
 8001090:	408e      	lsls	r6, r1
 8001092:	0013      	movs	r3, r2
 8001094:	465f      	mov	r7, fp
 8001096:	4333      	orrs	r3, r6
 8001098:	4699      	mov	r9, r3
 800109a:	408f      	lsls	r7, r1
 800109c:	4b3f      	ldr	r3, [pc, #252]	; (800119c <__aeabi_ddiv+0x298>)
 800109e:	2600      	movs	r6, #0
 80010a0:	1a1b      	subs	r3, r3, r0
 80010a2:	9300      	str	r3, [sp, #0]
 80010a4:	2300      	movs	r3, #0
 80010a6:	9302      	str	r3, [sp, #8]
 80010a8:	e752      	b.n	8000f50 <__aeabi_ddiv+0x4c>
 80010aa:	4641      	mov	r1, r8
 80010ac:	4653      	mov	r3, sl
 80010ae:	430b      	orrs	r3, r1
 80010b0:	493b      	ldr	r1, [pc, #236]	; (80011a0 <__aeabi_ddiv+0x29c>)
 80010b2:	469b      	mov	fp, r3
 80010b4:	468c      	mov	ip, r1
 80010b6:	9b00      	ldr	r3, [sp, #0]
 80010b8:	4463      	add	r3, ip
 80010ba:	9300      	str	r3, [sp, #0]
 80010bc:	465b      	mov	r3, fp
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d13b      	bne.n	800113a <__aeabi_ddiv+0x236>
 80010c2:	2302      	movs	r3, #2
 80010c4:	2200      	movs	r2, #0
 80010c6:	431e      	orrs	r6, r3
 80010c8:	2102      	movs	r1, #2
 80010ca:	e761      	b.n	8000f90 <__aeabi_ddiv+0x8c>
 80010cc:	4643      	mov	r3, r8
 80010ce:	4313      	orrs	r3, r2
 80010d0:	469b      	mov	fp, r3
 80010d2:	d037      	beq.n	8001144 <__aeabi_ddiv+0x240>
 80010d4:	4643      	mov	r3, r8
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d100      	bne.n	80010dc <__aeabi_ddiv+0x1d8>
 80010da:	e162      	b.n	80013a2 <__aeabi_ddiv+0x49e>
 80010dc:	4640      	mov	r0, r8
 80010de:	f000 fd75 	bl	8001bcc <__clzsi2>
 80010e2:	0003      	movs	r3, r0
 80010e4:	3b0b      	subs	r3, #11
 80010e6:	2b1c      	cmp	r3, #28
 80010e8:	dd00      	ble.n	80010ec <__aeabi_ddiv+0x1e8>
 80010ea:	e153      	b.n	8001394 <__aeabi_ddiv+0x490>
 80010ec:	0002      	movs	r2, r0
 80010ee:	4641      	mov	r1, r8
 80010f0:	3a08      	subs	r2, #8
 80010f2:	4091      	lsls	r1, r2
 80010f4:	4688      	mov	r8, r1
 80010f6:	211d      	movs	r1, #29
 80010f8:	1acb      	subs	r3, r1, r3
 80010fa:	4651      	mov	r1, sl
 80010fc:	40d9      	lsrs	r1, r3
 80010fe:	000b      	movs	r3, r1
 8001100:	4641      	mov	r1, r8
 8001102:	430b      	orrs	r3, r1
 8001104:	469b      	mov	fp, r3
 8001106:	4653      	mov	r3, sl
 8001108:	4093      	lsls	r3, r2
 800110a:	001a      	movs	r2, r3
 800110c:	9b00      	ldr	r3, [sp, #0]
 800110e:	4925      	ldr	r1, [pc, #148]	; (80011a4 <__aeabi_ddiv+0x2a0>)
 8001110:	469c      	mov	ip, r3
 8001112:	4460      	add	r0, ip
 8001114:	0003      	movs	r3, r0
 8001116:	468c      	mov	ip, r1
 8001118:	4463      	add	r3, ip
 800111a:	9300      	str	r3, [sp, #0]
 800111c:	2100      	movs	r1, #0
 800111e:	e737      	b.n	8000f90 <__aeabi_ddiv+0x8c>
 8001120:	2303      	movs	r3, #3
 8001122:	46b1      	mov	r9, r6
 8001124:	9000      	str	r0, [sp, #0]
 8001126:	260c      	movs	r6, #12
 8001128:	9302      	str	r3, [sp, #8]
 800112a:	e711      	b.n	8000f50 <__aeabi_ddiv+0x4c>
 800112c:	2300      	movs	r3, #0
 800112e:	9300      	str	r3, [sp, #0]
 8001130:	3301      	adds	r3, #1
 8001132:	2604      	movs	r6, #4
 8001134:	2700      	movs	r7, #0
 8001136:	9302      	str	r3, [sp, #8]
 8001138:	e70a      	b.n	8000f50 <__aeabi_ddiv+0x4c>
 800113a:	2303      	movs	r3, #3
 800113c:	46c3      	mov	fp, r8
 800113e:	431e      	orrs	r6, r3
 8001140:	2103      	movs	r1, #3
 8001142:	e725      	b.n	8000f90 <__aeabi_ddiv+0x8c>
 8001144:	3301      	adds	r3, #1
 8001146:	431e      	orrs	r6, r3
 8001148:	2200      	movs	r2, #0
 800114a:	2101      	movs	r1, #1
 800114c:	e720      	b.n	8000f90 <__aeabi_ddiv+0x8c>
 800114e:	2300      	movs	r3, #0
 8001150:	469a      	mov	sl, r3
 8001152:	2380      	movs	r3, #128	; 0x80
 8001154:	2700      	movs	r7, #0
 8001156:	031b      	lsls	r3, r3, #12
 8001158:	4a09      	ldr	r2, [pc, #36]	; (8001180 <__aeabi_ddiv+0x27c>)
 800115a:	e761      	b.n	8001020 <__aeabi_ddiv+0x11c>
 800115c:	2380      	movs	r3, #128	; 0x80
 800115e:	4649      	mov	r1, r9
 8001160:	031b      	lsls	r3, r3, #12
 8001162:	4219      	tst	r1, r3
 8001164:	d100      	bne.n	8001168 <__aeabi_ddiv+0x264>
 8001166:	e0e2      	b.n	800132e <__aeabi_ddiv+0x42a>
 8001168:	4659      	mov	r1, fp
 800116a:	4219      	tst	r1, r3
 800116c:	d000      	beq.n	8001170 <__aeabi_ddiv+0x26c>
 800116e:	e0de      	b.n	800132e <__aeabi_ddiv+0x42a>
 8001170:	430b      	orrs	r3, r1
 8001172:	031b      	lsls	r3, r3, #12
 8001174:	0017      	movs	r7, r2
 8001176:	0b1b      	lsrs	r3, r3, #12
 8001178:	46a2      	mov	sl, r4
 800117a:	4a01      	ldr	r2, [pc, #4]	; (8001180 <__aeabi_ddiv+0x27c>)
 800117c:	e750      	b.n	8001020 <__aeabi_ddiv+0x11c>
 800117e:	46c0      	nop			; (mov r8, r8)
 8001180:	000007ff 	.word	0x000007ff
 8001184:	fffffc01 	.word	0xfffffc01
 8001188:	0800c500 	.word	0x0800c500
 800118c:	000003ff 	.word	0x000003ff
 8001190:	feffffff 	.word	0xfeffffff
 8001194:	000007fe 	.word	0x000007fe
 8001198:	800fffff 	.word	0x800fffff
 800119c:	fffffc0d 	.word	0xfffffc0d
 80011a0:	fffff801 	.word	0xfffff801
 80011a4:	000003f3 	.word	0x000003f3
 80011a8:	45d9      	cmp	r9, fp
 80011aa:	d900      	bls.n	80011ae <__aeabi_ddiv+0x2aa>
 80011ac:	e0cb      	b.n	8001346 <__aeabi_ddiv+0x442>
 80011ae:	d100      	bne.n	80011b2 <__aeabi_ddiv+0x2ae>
 80011b0:	e0c6      	b.n	8001340 <__aeabi_ddiv+0x43c>
 80011b2:	003c      	movs	r4, r7
 80011b4:	4648      	mov	r0, r9
 80011b6:	2700      	movs	r7, #0
 80011b8:	9b00      	ldr	r3, [sp, #0]
 80011ba:	3b01      	subs	r3, #1
 80011bc:	9300      	str	r3, [sp, #0]
 80011be:	465b      	mov	r3, fp
 80011c0:	0e16      	lsrs	r6, r2, #24
 80011c2:	021b      	lsls	r3, r3, #8
 80011c4:	431e      	orrs	r6, r3
 80011c6:	0213      	lsls	r3, r2, #8
 80011c8:	4698      	mov	r8, r3
 80011ca:	0433      	lsls	r3, r6, #16
 80011cc:	0c1b      	lsrs	r3, r3, #16
 80011ce:	4699      	mov	r9, r3
 80011d0:	0c31      	lsrs	r1, r6, #16
 80011d2:	9101      	str	r1, [sp, #4]
 80011d4:	f7ff f826 	bl	8000224 <__aeabi_uidivmod>
 80011d8:	464a      	mov	r2, r9
 80011da:	4342      	muls	r2, r0
 80011dc:	040b      	lsls	r3, r1, #16
 80011de:	0c21      	lsrs	r1, r4, #16
 80011e0:	0005      	movs	r5, r0
 80011e2:	4319      	orrs	r1, r3
 80011e4:	428a      	cmp	r2, r1
 80011e6:	d907      	bls.n	80011f8 <__aeabi_ddiv+0x2f4>
 80011e8:	1989      	adds	r1, r1, r6
 80011ea:	3d01      	subs	r5, #1
 80011ec:	428e      	cmp	r6, r1
 80011ee:	d803      	bhi.n	80011f8 <__aeabi_ddiv+0x2f4>
 80011f0:	428a      	cmp	r2, r1
 80011f2:	d901      	bls.n	80011f8 <__aeabi_ddiv+0x2f4>
 80011f4:	1e85      	subs	r5, r0, #2
 80011f6:	1989      	adds	r1, r1, r6
 80011f8:	1a88      	subs	r0, r1, r2
 80011fa:	9901      	ldr	r1, [sp, #4]
 80011fc:	f7ff f812 	bl	8000224 <__aeabi_uidivmod>
 8001200:	0409      	lsls	r1, r1, #16
 8001202:	468c      	mov	ip, r1
 8001204:	464a      	mov	r2, r9
 8001206:	0421      	lsls	r1, r4, #16
 8001208:	4664      	mov	r4, ip
 800120a:	4342      	muls	r2, r0
 800120c:	0c09      	lsrs	r1, r1, #16
 800120e:	0003      	movs	r3, r0
 8001210:	4321      	orrs	r1, r4
 8001212:	428a      	cmp	r2, r1
 8001214:	d904      	bls.n	8001220 <__aeabi_ddiv+0x31c>
 8001216:	1989      	adds	r1, r1, r6
 8001218:	3b01      	subs	r3, #1
 800121a:	428e      	cmp	r6, r1
 800121c:	d800      	bhi.n	8001220 <__aeabi_ddiv+0x31c>
 800121e:	e0f1      	b.n	8001404 <__aeabi_ddiv+0x500>
 8001220:	042d      	lsls	r5, r5, #16
 8001222:	431d      	orrs	r5, r3
 8001224:	46ab      	mov	fp, r5
 8001226:	4643      	mov	r3, r8
 8001228:	1a89      	subs	r1, r1, r2
 800122a:	4642      	mov	r2, r8
 800122c:	0c28      	lsrs	r0, r5, #16
 800122e:	0412      	lsls	r2, r2, #16
 8001230:	0c1d      	lsrs	r5, r3, #16
 8001232:	465b      	mov	r3, fp
 8001234:	0c14      	lsrs	r4, r2, #16
 8001236:	0022      	movs	r2, r4
 8001238:	041b      	lsls	r3, r3, #16
 800123a:	0c1b      	lsrs	r3, r3, #16
 800123c:	435a      	muls	r2, r3
 800123e:	9403      	str	r4, [sp, #12]
 8001240:	436b      	muls	r3, r5
 8001242:	4344      	muls	r4, r0
 8001244:	9502      	str	r5, [sp, #8]
 8001246:	4368      	muls	r0, r5
 8001248:	191b      	adds	r3, r3, r4
 800124a:	0c15      	lsrs	r5, r2, #16
 800124c:	18eb      	adds	r3, r5, r3
 800124e:	429c      	cmp	r4, r3
 8001250:	d903      	bls.n	800125a <__aeabi_ddiv+0x356>
 8001252:	2480      	movs	r4, #128	; 0x80
 8001254:	0264      	lsls	r4, r4, #9
 8001256:	46a4      	mov	ip, r4
 8001258:	4460      	add	r0, ip
 800125a:	0c1c      	lsrs	r4, r3, #16
 800125c:	0415      	lsls	r5, r2, #16
 800125e:	041b      	lsls	r3, r3, #16
 8001260:	0c2d      	lsrs	r5, r5, #16
 8001262:	1820      	adds	r0, r4, r0
 8001264:	195d      	adds	r5, r3, r5
 8001266:	4281      	cmp	r1, r0
 8001268:	d377      	bcc.n	800135a <__aeabi_ddiv+0x456>
 800126a:	d073      	beq.n	8001354 <__aeabi_ddiv+0x450>
 800126c:	1a0c      	subs	r4, r1, r0
 800126e:	4aa2      	ldr	r2, [pc, #648]	; (80014f8 <__aeabi_ddiv+0x5f4>)
 8001270:	1b7d      	subs	r5, r7, r5
 8001272:	42af      	cmp	r7, r5
 8001274:	41bf      	sbcs	r7, r7
 8001276:	4694      	mov	ip, r2
 8001278:	9b00      	ldr	r3, [sp, #0]
 800127a:	427f      	negs	r7, r7
 800127c:	4463      	add	r3, ip
 800127e:	1be0      	subs	r0, r4, r7
 8001280:	001c      	movs	r4, r3
 8001282:	4286      	cmp	r6, r0
 8001284:	d100      	bne.n	8001288 <__aeabi_ddiv+0x384>
 8001286:	e0db      	b.n	8001440 <__aeabi_ddiv+0x53c>
 8001288:	9901      	ldr	r1, [sp, #4]
 800128a:	f7fe ffcb 	bl	8000224 <__aeabi_uidivmod>
 800128e:	464a      	mov	r2, r9
 8001290:	4342      	muls	r2, r0
 8001292:	040b      	lsls	r3, r1, #16
 8001294:	0c29      	lsrs	r1, r5, #16
 8001296:	0007      	movs	r7, r0
 8001298:	4319      	orrs	r1, r3
 800129a:	428a      	cmp	r2, r1
 800129c:	d907      	bls.n	80012ae <__aeabi_ddiv+0x3aa>
 800129e:	1989      	adds	r1, r1, r6
 80012a0:	3f01      	subs	r7, #1
 80012a2:	428e      	cmp	r6, r1
 80012a4:	d803      	bhi.n	80012ae <__aeabi_ddiv+0x3aa>
 80012a6:	428a      	cmp	r2, r1
 80012a8:	d901      	bls.n	80012ae <__aeabi_ddiv+0x3aa>
 80012aa:	1e87      	subs	r7, r0, #2
 80012ac:	1989      	adds	r1, r1, r6
 80012ae:	1a88      	subs	r0, r1, r2
 80012b0:	9901      	ldr	r1, [sp, #4]
 80012b2:	f7fe ffb7 	bl	8000224 <__aeabi_uidivmod>
 80012b6:	0409      	lsls	r1, r1, #16
 80012b8:	464a      	mov	r2, r9
 80012ba:	4689      	mov	r9, r1
 80012bc:	0429      	lsls	r1, r5, #16
 80012be:	464d      	mov	r5, r9
 80012c0:	4342      	muls	r2, r0
 80012c2:	0c09      	lsrs	r1, r1, #16
 80012c4:	0003      	movs	r3, r0
 80012c6:	4329      	orrs	r1, r5
 80012c8:	428a      	cmp	r2, r1
 80012ca:	d907      	bls.n	80012dc <__aeabi_ddiv+0x3d8>
 80012cc:	1989      	adds	r1, r1, r6
 80012ce:	3b01      	subs	r3, #1
 80012d0:	428e      	cmp	r6, r1
 80012d2:	d803      	bhi.n	80012dc <__aeabi_ddiv+0x3d8>
 80012d4:	428a      	cmp	r2, r1
 80012d6:	d901      	bls.n	80012dc <__aeabi_ddiv+0x3d8>
 80012d8:	1e83      	subs	r3, r0, #2
 80012da:	1989      	adds	r1, r1, r6
 80012dc:	043f      	lsls	r7, r7, #16
 80012de:	1a89      	subs	r1, r1, r2
 80012e0:	003a      	movs	r2, r7
 80012e2:	9f03      	ldr	r7, [sp, #12]
 80012e4:	431a      	orrs	r2, r3
 80012e6:	0038      	movs	r0, r7
 80012e8:	0413      	lsls	r3, r2, #16
 80012ea:	0c1b      	lsrs	r3, r3, #16
 80012ec:	4358      	muls	r0, r3
 80012ee:	4681      	mov	r9, r0
 80012f0:	9802      	ldr	r0, [sp, #8]
 80012f2:	0c15      	lsrs	r5, r2, #16
 80012f4:	436f      	muls	r7, r5
 80012f6:	4343      	muls	r3, r0
 80012f8:	4345      	muls	r5, r0
 80012fa:	4648      	mov	r0, r9
 80012fc:	0c00      	lsrs	r0, r0, #16
 80012fe:	4684      	mov	ip, r0
 8001300:	19db      	adds	r3, r3, r7
 8001302:	4463      	add	r3, ip
 8001304:	429f      	cmp	r7, r3
 8001306:	d903      	bls.n	8001310 <__aeabi_ddiv+0x40c>
 8001308:	2080      	movs	r0, #128	; 0x80
 800130a:	0240      	lsls	r0, r0, #9
 800130c:	4684      	mov	ip, r0
 800130e:	4465      	add	r5, ip
 8001310:	4648      	mov	r0, r9
 8001312:	0c1f      	lsrs	r7, r3, #16
 8001314:	0400      	lsls	r0, r0, #16
 8001316:	041b      	lsls	r3, r3, #16
 8001318:	0c00      	lsrs	r0, r0, #16
 800131a:	197d      	adds	r5, r7, r5
 800131c:	1818      	adds	r0, r3, r0
 800131e:	42a9      	cmp	r1, r5
 8001320:	d200      	bcs.n	8001324 <__aeabi_ddiv+0x420>
 8001322:	e084      	b.n	800142e <__aeabi_ddiv+0x52a>
 8001324:	d100      	bne.n	8001328 <__aeabi_ddiv+0x424>
 8001326:	e07f      	b.n	8001428 <__aeabi_ddiv+0x524>
 8001328:	2301      	movs	r3, #1
 800132a:	431a      	orrs	r2, r3
 800132c:	e657      	b.n	8000fde <__aeabi_ddiv+0xda>
 800132e:	2380      	movs	r3, #128	; 0x80
 8001330:	464a      	mov	r2, r9
 8001332:	031b      	lsls	r3, r3, #12
 8001334:	4313      	orrs	r3, r2
 8001336:	031b      	lsls	r3, r3, #12
 8001338:	0b1b      	lsrs	r3, r3, #12
 800133a:	46aa      	mov	sl, r5
 800133c:	4a6f      	ldr	r2, [pc, #444]	; (80014fc <__aeabi_ddiv+0x5f8>)
 800133e:	e66f      	b.n	8001020 <__aeabi_ddiv+0x11c>
 8001340:	42ba      	cmp	r2, r7
 8001342:	d900      	bls.n	8001346 <__aeabi_ddiv+0x442>
 8001344:	e735      	b.n	80011b2 <__aeabi_ddiv+0x2ae>
 8001346:	464b      	mov	r3, r9
 8001348:	07dc      	lsls	r4, r3, #31
 800134a:	0858      	lsrs	r0, r3, #1
 800134c:	087b      	lsrs	r3, r7, #1
 800134e:	431c      	orrs	r4, r3
 8001350:	07ff      	lsls	r7, r7, #31
 8001352:	e734      	b.n	80011be <__aeabi_ddiv+0x2ba>
 8001354:	2400      	movs	r4, #0
 8001356:	42af      	cmp	r7, r5
 8001358:	d289      	bcs.n	800126e <__aeabi_ddiv+0x36a>
 800135a:	4447      	add	r7, r8
 800135c:	4547      	cmp	r7, r8
 800135e:	41a4      	sbcs	r4, r4
 8001360:	465b      	mov	r3, fp
 8001362:	4264      	negs	r4, r4
 8001364:	19a4      	adds	r4, r4, r6
 8001366:	1864      	adds	r4, r4, r1
 8001368:	3b01      	subs	r3, #1
 800136a:	42a6      	cmp	r6, r4
 800136c:	d21e      	bcs.n	80013ac <__aeabi_ddiv+0x4a8>
 800136e:	42a0      	cmp	r0, r4
 8001370:	d86d      	bhi.n	800144e <__aeabi_ddiv+0x54a>
 8001372:	d100      	bne.n	8001376 <__aeabi_ddiv+0x472>
 8001374:	e0b6      	b.n	80014e4 <__aeabi_ddiv+0x5e0>
 8001376:	1a24      	subs	r4, r4, r0
 8001378:	469b      	mov	fp, r3
 800137a:	e778      	b.n	800126e <__aeabi_ddiv+0x36a>
 800137c:	0003      	movs	r3, r0
 800137e:	465a      	mov	r2, fp
 8001380:	3b28      	subs	r3, #40	; 0x28
 8001382:	409a      	lsls	r2, r3
 8001384:	2700      	movs	r7, #0
 8001386:	4691      	mov	r9, r2
 8001388:	e688      	b.n	800109c <__aeabi_ddiv+0x198>
 800138a:	4658      	mov	r0, fp
 800138c:	f000 fc1e 	bl	8001bcc <__clzsi2>
 8001390:	3020      	adds	r0, #32
 8001392:	e672      	b.n	800107a <__aeabi_ddiv+0x176>
 8001394:	0003      	movs	r3, r0
 8001396:	4652      	mov	r2, sl
 8001398:	3b28      	subs	r3, #40	; 0x28
 800139a:	409a      	lsls	r2, r3
 800139c:	4693      	mov	fp, r2
 800139e:	2200      	movs	r2, #0
 80013a0:	e6b4      	b.n	800110c <__aeabi_ddiv+0x208>
 80013a2:	4650      	mov	r0, sl
 80013a4:	f000 fc12 	bl	8001bcc <__clzsi2>
 80013a8:	3020      	adds	r0, #32
 80013aa:	e69a      	b.n	80010e2 <__aeabi_ddiv+0x1de>
 80013ac:	42a6      	cmp	r6, r4
 80013ae:	d1e2      	bne.n	8001376 <__aeabi_ddiv+0x472>
 80013b0:	45b8      	cmp	r8, r7
 80013b2:	d9dc      	bls.n	800136e <__aeabi_ddiv+0x46a>
 80013b4:	1a34      	subs	r4, r6, r0
 80013b6:	469b      	mov	fp, r3
 80013b8:	e759      	b.n	800126e <__aeabi_ddiv+0x36a>
 80013ba:	2b1f      	cmp	r3, #31
 80013bc:	dc65      	bgt.n	800148a <__aeabi_ddiv+0x586>
 80013be:	4c50      	ldr	r4, [pc, #320]	; (8001500 <__aeabi_ddiv+0x5fc>)
 80013c0:	9900      	ldr	r1, [sp, #0]
 80013c2:	46a4      	mov	ip, r4
 80013c4:	465c      	mov	r4, fp
 80013c6:	4461      	add	r1, ip
 80013c8:	0008      	movs	r0, r1
 80013ca:	408c      	lsls	r4, r1
 80013cc:	0011      	movs	r1, r2
 80013ce:	4082      	lsls	r2, r0
 80013d0:	40d9      	lsrs	r1, r3
 80013d2:	1e50      	subs	r0, r2, #1
 80013d4:	4182      	sbcs	r2, r0
 80013d6:	430c      	orrs	r4, r1
 80013d8:	4314      	orrs	r4, r2
 80013da:	465a      	mov	r2, fp
 80013dc:	40da      	lsrs	r2, r3
 80013de:	0013      	movs	r3, r2
 80013e0:	0762      	lsls	r2, r4, #29
 80013e2:	d009      	beq.n	80013f8 <__aeabi_ddiv+0x4f4>
 80013e4:	220f      	movs	r2, #15
 80013e6:	4022      	ands	r2, r4
 80013e8:	2a04      	cmp	r2, #4
 80013ea:	d005      	beq.n	80013f8 <__aeabi_ddiv+0x4f4>
 80013ec:	0022      	movs	r2, r4
 80013ee:	1d14      	adds	r4, r2, #4
 80013f0:	4294      	cmp	r4, r2
 80013f2:	4189      	sbcs	r1, r1
 80013f4:	4249      	negs	r1, r1
 80013f6:	185b      	adds	r3, r3, r1
 80013f8:	021a      	lsls	r2, r3, #8
 80013fa:	d562      	bpl.n	80014c2 <__aeabi_ddiv+0x5be>
 80013fc:	2201      	movs	r2, #1
 80013fe:	2300      	movs	r3, #0
 8001400:	2700      	movs	r7, #0
 8001402:	e60d      	b.n	8001020 <__aeabi_ddiv+0x11c>
 8001404:	428a      	cmp	r2, r1
 8001406:	d800      	bhi.n	800140a <__aeabi_ddiv+0x506>
 8001408:	e70a      	b.n	8001220 <__aeabi_ddiv+0x31c>
 800140a:	1e83      	subs	r3, r0, #2
 800140c:	1989      	adds	r1, r1, r6
 800140e:	e707      	b.n	8001220 <__aeabi_ddiv+0x31c>
 8001410:	230f      	movs	r3, #15
 8001412:	4013      	ands	r3, r2
 8001414:	2b04      	cmp	r3, #4
 8001416:	d100      	bne.n	800141a <__aeabi_ddiv+0x516>
 8001418:	e5e6      	b.n	8000fe8 <__aeabi_ddiv+0xe4>
 800141a:	1d17      	adds	r7, r2, #4
 800141c:	4297      	cmp	r7, r2
 800141e:	4192      	sbcs	r2, r2
 8001420:	4253      	negs	r3, r2
 8001422:	449b      	add	fp, r3
 8001424:	08fa      	lsrs	r2, r7, #3
 8001426:	e5e0      	b.n	8000fea <__aeabi_ddiv+0xe6>
 8001428:	2800      	cmp	r0, #0
 800142a:	d100      	bne.n	800142e <__aeabi_ddiv+0x52a>
 800142c:	e5d7      	b.n	8000fde <__aeabi_ddiv+0xda>
 800142e:	1871      	adds	r1, r6, r1
 8001430:	1e53      	subs	r3, r2, #1
 8001432:	42b1      	cmp	r1, r6
 8001434:	d327      	bcc.n	8001486 <__aeabi_ddiv+0x582>
 8001436:	42a9      	cmp	r1, r5
 8001438:	d315      	bcc.n	8001466 <__aeabi_ddiv+0x562>
 800143a:	d058      	beq.n	80014ee <__aeabi_ddiv+0x5ea>
 800143c:	001a      	movs	r2, r3
 800143e:	e773      	b.n	8001328 <__aeabi_ddiv+0x424>
 8001440:	2b00      	cmp	r3, #0
 8001442:	dc00      	bgt.n	8001446 <__aeabi_ddiv+0x542>
 8001444:	e604      	b.n	8001050 <__aeabi_ddiv+0x14c>
 8001446:	2301      	movs	r3, #1
 8001448:	2200      	movs	r2, #0
 800144a:	449b      	add	fp, r3
 800144c:	e5cd      	b.n	8000fea <__aeabi_ddiv+0xe6>
 800144e:	2302      	movs	r3, #2
 8001450:	4447      	add	r7, r8
 8001452:	4547      	cmp	r7, r8
 8001454:	4189      	sbcs	r1, r1
 8001456:	425b      	negs	r3, r3
 8001458:	469c      	mov	ip, r3
 800145a:	4249      	negs	r1, r1
 800145c:	1989      	adds	r1, r1, r6
 800145e:	190c      	adds	r4, r1, r4
 8001460:	44e3      	add	fp, ip
 8001462:	1a24      	subs	r4, r4, r0
 8001464:	e703      	b.n	800126e <__aeabi_ddiv+0x36a>
 8001466:	4643      	mov	r3, r8
 8001468:	005f      	lsls	r7, r3, #1
 800146a:	4547      	cmp	r7, r8
 800146c:	419b      	sbcs	r3, r3
 800146e:	46b8      	mov	r8, r7
 8001470:	425b      	negs	r3, r3
 8001472:	199e      	adds	r6, r3, r6
 8001474:	3a02      	subs	r2, #2
 8001476:	1989      	adds	r1, r1, r6
 8001478:	42a9      	cmp	r1, r5
 800147a:	d000      	beq.n	800147e <__aeabi_ddiv+0x57a>
 800147c:	e754      	b.n	8001328 <__aeabi_ddiv+0x424>
 800147e:	4540      	cmp	r0, r8
 8001480:	d000      	beq.n	8001484 <__aeabi_ddiv+0x580>
 8001482:	e751      	b.n	8001328 <__aeabi_ddiv+0x424>
 8001484:	e5ab      	b.n	8000fde <__aeabi_ddiv+0xda>
 8001486:	001a      	movs	r2, r3
 8001488:	e7f6      	b.n	8001478 <__aeabi_ddiv+0x574>
 800148a:	211f      	movs	r1, #31
 800148c:	465f      	mov	r7, fp
 800148e:	4249      	negs	r1, r1
 8001490:	1b0c      	subs	r4, r1, r4
 8001492:	40e7      	lsrs	r7, r4
 8001494:	2b20      	cmp	r3, #32
 8001496:	d007      	beq.n	80014a8 <__aeabi_ddiv+0x5a4>
 8001498:	491a      	ldr	r1, [pc, #104]	; (8001504 <__aeabi_ddiv+0x600>)
 800149a:	9b00      	ldr	r3, [sp, #0]
 800149c:	468c      	mov	ip, r1
 800149e:	4463      	add	r3, ip
 80014a0:	0018      	movs	r0, r3
 80014a2:	465b      	mov	r3, fp
 80014a4:	4083      	lsls	r3, r0
 80014a6:	431a      	orrs	r2, r3
 80014a8:	1e50      	subs	r0, r2, #1
 80014aa:	4182      	sbcs	r2, r0
 80014ac:	433a      	orrs	r2, r7
 80014ae:	2707      	movs	r7, #7
 80014b0:	2300      	movs	r3, #0
 80014b2:	4017      	ands	r7, r2
 80014b4:	d009      	beq.n	80014ca <__aeabi_ddiv+0x5c6>
 80014b6:	210f      	movs	r1, #15
 80014b8:	2300      	movs	r3, #0
 80014ba:	4011      	ands	r1, r2
 80014bc:	0014      	movs	r4, r2
 80014be:	2904      	cmp	r1, #4
 80014c0:	d195      	bne.n	80013ee <__aeabi_ddiv+0x4ea>
 80014c2:	0022      	movs	r2, r4
 80014c4:	075f      	lsls	r7, r3, #29
 80014c6:	025b      	lsls	r3, r3, #9
 80014c8:	0b1b      	lsrs	r3, r3, #12
 80014ca:	08d2      	lsrs	r2, r2, #3
 80014cc:	4317      	orrs	r7, r2
 80014ce:	2200      	movs	r2, #0
 80014d0:	e5a6      	b.n	8001020 <__aeabi_ddiv+0x11c>
 80014d2:	2380      	movs	r3, #128	; 0x80
 80014d4:	4659      	mov	r1, fp
 80014d6:	031b      	lsls	r3, r3, #12
 80014d8:	430b      	orrs	r3, r1
 80014da:	031b      	lsls	r3, r3, #12
 80014dc:	0017      	movs	r7, r2
 80014de:	0b1b      	lsrs	r3, r3, #12
 80014e0:	4a06      	ldr	r2, [pc, #24]	; (80014fc <__aeabi_ddiv+0x5f8>)
 80014e2:	e59d      	b.n	8001020 <__aeabi_ddiv+0x11c>
 80014e4:	42bd      	cmp	r5, r7
 80014e6:	d8b2      	bhi.n	800144e <__aeabi_ddiv+0x54a>
 80014e8:	469b      	mov	fp, r3
 80014ea:	2400      	movs	r4, #0
 80014ec:	e6bf      	b.n	800126e <__aeabi_ddiv+0x36a>
 80014ee:	4580      	cmp	r8, r0
 80014f0:	d3b9      	bcc.n	8001466 <__aeabi_ddiv+0x562>
 80014f2:	001a      	movs	r2, r3
 80014f4:	e7c3      	b.n	800147e <__aeabi_ddiv+0x57a>
 80014f6:	46c0      	nop			; (mov r8, r8)
 80014f8:	000003ff 	.word	0x000003ff
 80014fc:	000007ff 	.word	0x000007ff
 8001500:	0000041e 	.word	0x0000041e
 8001504:	0000043e 	.word	0x0000043e

08001508 <__aeabi_dmul>:
 8001508:	b5f0      	push	{r4, r5, r6, r7, lr}
 800150a:	4657      	mov	r7, sl
 800150c:	46de      	mov	lr, fp
 800150e:	464e      	mov	r6, r9
 8001510:	4645      	mov	r5, r8
 8001512:	b5e0      	push	{r5, r6, r7, lr}
 8001514:	4683      	mov	fp, r0
 8001516:	0006      	movs	r6, r0
 8001518:	030f      	lsls	r7, r1, #12
 800151a:	0048      	lsls	r0, r1, #1
 800151c:	b087      	sub	sp, #28
 800151e:	4692      	mov	sl, r2
 8001520:	001d      	movs	r5, r3
 8001522:	0b3f      	lsrs	r7, r7, #12
 8001524:	0d40      	lsrs	r0, r0, #21
 8001526:	0fcc      	lsrs	r4, r1, #31
 8001528:	2800      	cmp	r0, #0
 800152a:	d100      	bne.n	800152e <__aeabi_dmul+0x26>
 800152c:	e06f      	b.n	800160e <__aeabi_dmul+0x106>
 800152e:	4bde      	ldr	r3, [pc, #888]	; (80018a8 <__aeabi_dmul+0x3a0>)
 8001530:	4298      	cmp	r0, r3
 8001532:	d038      	beq.n	80015a6 <__aeabi_dmul+0x9e>
 8001534:	2380      	movs	r3, #128	; 0x80
 8001536:	00ff      	lsls	r7, r7, #3
 8001538:	041b      	lsls	r3, r3, #16
 800153a:	431f      	orrs	r7, r3
 800153c:	0f73      	lsrs	r3, r6, #29
 800153e:	433b      	orrs	r3, r7
 8001540:	9301      	str	r3, [sp, #4]
 8001542:	4bda      	ldr	r3, [pc, #872]	; (80018ac <__aeabi_dmul+0x3a4>)
 8001544:	2700      	movs	r7, #0
 8001546:	4699      	mov	r9, r3
 8001548:	2300      	movs	r3, #0
 800154a:	469b      	mov	fp, r3
 800154c:	00f6      	lsls	r6, r6, #3
 800154e:	4481      	add	r9, r0
 8001550:	032b      	lsls	r3, r5, #12
 8001552:	0069      	lsls	r1, r5, #1
 8001554:	0b1b      	lsrs	r3, r3, #12
 8001556:	4652      	mov	r2, sl
 8001558:	4698      	mov	r8, r3
 800155a:	0d49      	lsrs	r1, r1, #21
 800155c:	0fed      	lsrs	r5, r5, #31
 800155e:	2900      	cmp	r1, #0
 8001560:	d100      	bne.n	8001564 <__aeabi_dmul+0x5c>
 8001562:	e085      	b.n	8001670 <__aeabi_dmul+0x168>
 8001564:	4bd0      	ldr	r3, [pc, #832]	; (80018a8 <__aeabi_dmul+0x3a0>)
 8001566:	4299      	cmp	r1, r3
 8001568:	d100      	bne.n	800156c <__aeabi_dmul+0x64>
 800156a:	e073      	b.n	8001654 <__aeabi_dmul+0x14c>
 800156c:	4643      	mov	r3, r8
 800156e:	00da      	lsls	r2, r3, #3
 8001570:	2380      	movs	r3, #128	; 0x80
 8001572:	041b      	lsls	r3, r3, #16
 8001574:	4313      	orrs	r3, r2
 8001576:	4652      	mov	r2, sl
 8001578:	48cc      	ldr	r0, [pc, #816]	; (80018ac <__aeabi_dmul+0x3a4>)
 800157a:	0f52      	lsrs	r2, r2, #29
 800157c:	4684      	mov	ip, r0
 800157e:	4313      	orrs	r3, r2
 8001580:	4652      	mov	r2, sl
 8001582:	2000      	movs	r0, #0
 8001584:	4461      	add	r1, ip
 8001586:	00d2      	lsls	r2, r2, #3
 8001588:	4489      	add	r9, r1
 800158a:	0021      	movs	r1, r4
 800158c:	4069      	eors	r1, r5
 800158e:	9100      	str	r1, [sp, #0]
 8001590:	468c      	mov	ip, r1
 8001592:	2101      	movs	r1, #1
 8001594:	4449      	add	r1, r9
 8001596:	468a      	mov	sl, r1
 8001598:	2f0f      	cmp	r7, #15
 800159a:	d900      	bls.n	800159e <__aeabi_dmul+0x96>
 800159c:	e090      	b.n	80016c0 <__aeabi_dmul+0x1b8>
 800159e:	49c4      	ldr	r1, [pc, #784]	; (80018b0 <__aeabi_dmul+0x3a8>)
 80015a0:	00bf      	lsls	r7, r7, #2
 80015a2:	59cf      	ldr	r7, [r1, r7]
 80015a4:	46bf      	mov	pc, r7
 80015a6:	465b      	mov	r3, fp
 80015a8:	433b      	orrs	r3, r7
 80015aa:	9301      	str	r3, [sp, #4]
 80015ac:	d000      	beq.n	80015b0 <__aeabi_dmul+0xa8>
 80015ae:	e16a      	b.n	8001886 <__aeabi_dmul+0x37e>
 80015b0:	2302      	movs	r3, #2
 80015b2:	2708      	movs	r7, #8
 80015b4:	2600      	movs	r6, #0
 80015b6:	4681      	mov	r9, r0
 80015b8:	469b      	mov	fp, r3
 80015ba:	e7c9      	b.n	8001550 <__aeabi_dmul+0x48>
 80015bc:	0032      	movs	r2, r6
 80015be:	4658      	mov	r0, fp
 80015c0:	9b01      	ldr	r3, [sp, #4]
 80015c2:	4661      	mov	r1, ip
 80015c4:	9100      	str	r1, [sp, #0]
 80015c6:	2802      	cmp	r0, #2
 80015c8:	d100      	bne.n	80015cc <__aeabi_dmul+0xc4>
 80015ca:	e075      	b.n	80016b8 <__aeabi_dmul+0x1b0>
 80015cc:	2803      	cmp	r0, #3
 80015ce:	d100      	bne.n	80015d2 <__aeabi_dmul+0xca>
 80015d0:	e1fe      	b.n	80019d0 <__aeabi_dmul+0x4c8>
 80015d2:	2801      	cmp	r0, #1
 80015d4:	d000      	beq.n	80015d8 <__aeabi_dmul+0xd0>
 80015d6:	e12c      	b.n	8001832 <__aeabi_dmul+0x32a>
 80015d8:	2300      	movs	r3, #0
 80015da:	2700      	movs	r7, #0
 80015dc:	2600      	movs	r6, #0
 80015de:	2500      	movs	r5, #0
 80015e0:	033f      	lsls	r7, r7, #12
 80015e2:	0d2a      	lsrs	r2, r5, #20
 80015e4:	0b3f      	lsrs	r7, r7, #12
 80015e6:	48b3      	ldr	r0, [pc, #716]	; (80018b4 <__aeabi_dmul+0x3ac>)
 80015e8:	0512      	lsls	r2, r2, #20
 80015ea:	433a      	orrs	r2, r7
 80015ec:	4002      	ands	r2, r0
 80015ee:	051b      	lsls	r3, r3, #20
 80015f0:	4313      	orrs	r3, r2
 80015f2:	9a00      	ldr	r2, [sp, #0]
 80015f4:	005b      	lsls	r3, r3, #1
 80015f6:	07d1      	lsls	r1, r2, #31
 80015f8:	085b      	lsrs	r3, r3, #1
 80015fa:	430b      	orrs	r3, r1
 80015fc:	0030      	movs	r0, r6
 80015fe:	0019      	movs	r1, r3
 8001600:	b007      	add	sp, #28
 8001602:	bc3c      	pop	{r2, r3, r4, r5}
 8001604:	4690      	mov	r8, r2
 8001606:	4699      	mov	r9, r3
 8001608:	46a2      	mov	sl, r4
 800160a:	46ab      	mov	fp, r5
 800160c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800160e:	465b      	mov	r3, fp
 8001610:	433b      	orrs	r3, r7
 8001612:	9301      	str	r3, [sp, #4]
 8001614:	d100      	bne.n	8001618 <__aeabi_dmul+0x110>
 8001616:	e12f      	b.n	8001878 <__aeabi_dmul+0x370>
 8001618:	2f00      	cmp	r7, #0
 800161a:	d100      	bne.n	800161e <__aeabi_dmul+0x116>
 800161c:	e1a5      	b.n	800196a <__aeabi_dmul+0x462>
 800161e:	0038      	movs	r0, r7
 8001620:	f000 fad4 	bl	8001bcc <__clzsi2>
 8001624:	0003      	movs	r3, r0
 8001626:	3b0b      	subs	r3, #11
 8001628:	2b1c      	cmp	r3, #28
 800162a:	dd00      	ble.n	800162e <__aeabi_dmul+0x126>
 800162c:	e196      	b.n	800195c <__aeabi_dmul+0x454>
 800162e:	221d      	movs	r2, #29
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	465a      	mov	r2, fp
 8001634:	0001      	movs	r1, r0
 8001636:	40da      	lsrs	r2, r3
 8001638:	465e      	mov	r6, fp
 800163a:	3908      	subs	r1, #8
 800163c:	408f      	lsls	r7, r1
 800163e:	0013      	movs	r3, r2
 8001640:	408e      	lsls	r6, r1
 8001642:	433b      	orrs	r3, r7
 8001644:	9301      	str	r3, [sp, #4]
 8001646:	4b9c      	ldr	r3, [pc, #624]	; (80018b8 <__aeabi_dmul+0x3b0>)
 8001648:	2700      	movs	r7, #0
 800164a:	1a1b      	subs	r3, r3, r0
 800164c:	4699      	mov	r9, r3
 800164e:	2300      	movs	r3, #0
 8001650:	469b      	mov	fp, r3
 8001652:	e77d      	b.n	8001550 <__aeabi_dmul+0x48>
 8001654:	4641      	mov	r1, r8
 8001656:	4653      	mov	r3, sl
 8001658:	430b      	orrs	r3, r1
 800165a:	4993      	ldr	r1, [pc, #588]	; (80018a8 <__aeabi_dmul+0x3a0>)
 800165c:	468c      	mov	ip, r1
 800165e:	44e1      	add	r9, ip
 8001660:	2b00      	cmp	r3, #0
 8001662:	d000      	beq.n	8001666 <__aeabi_dmul+0x15e>
 8001664:	e11a      	b.n	800189c <__aeabi_dmul+0x394>
 8001666:	2202      	movs	r2, #2
 8001668:	2002      	movs	r0, #2
 800166a:	4317      	orrs	r7, r2
 800166c:	2200      	movs	r2, #0
 800166e:	e78c      	b.n	800158a <__aeabi_dmul+0x82>
 8001670:	4313      	orrs	r3, r2
 8001672:	d100      	bne.n	8001676 <__aeabi_dmul+0x16e>
 8001674:	e10d      	b.n	8001892 <__aeabi_dmul+0x38a>
 8001676:	4643      	mov	r3, r8
 8001678:	2b00      	cmp	r3, #0
 800167a:	d100      	bne.n	800167e <__aeabi_dmul+0x176>
 800167c:	e181      	b.n	8001982 <__aeabi_dmul+0x47a>
 800167e:	4640      	mov	r0, r8
 8001680:	f000 faa4 	bl	8001bcc <__clzsi2>
 8001684:	0002      	movs	r2, r0
 8001686:	3a0b      	subs	r2, #11
 8001688:	2a1c      	cmp	r2, #28
 800168a:	dd00      	ble.n	800168e <__aeabi_dmul+0x186>
 800168c:	e172      	b.n	8001974 <__aeabi_dmul+0x46c>
 800168e:	0001      	movs	r1, r0
 8001690:	4643      	mov	r3, r8
 8001692:	3908      	subs	r1, #8
 8001694:	408b      	lsls	r3, r1
 8001696:	4698      	mov	r8, r3
 8001698:	231d      	movs	r3, #29
 800169a:	1a9a      	subs	r2, r3, r2
 800169c:	4653      	mov	r3, sl
 800169e:	40d3      	lsrs	r3, r2
 80016a0:	001a      	movs	r2, r3
 80016a2:	4643      	mov	r3, r8
 80016a4:	4313      	orrs	r3, r2
 80016a6:	4652      	mov	r2, sl
 80016a8:	408a      	lsls	r2, r1
 80016aa:	4649      	mov	r1, r9
 80016ac:	1a08      	subs	r0, r1, r0
 80016ae:	4982      	ldr	r1, [pc, #520]	; (80018b8 <__aeabi_dmul+0x3b0>)
 80016b0:	4689      	mov	r9, r1
 80016b2:	4481      	add	r9, r0
 80016b4:	2000      	movs	r0, #0
 80016b6:	e768      	b.n	800158a <__aeabi_dmul+0x82>
 80016b8:	4b7b      	ldr	r3, [pc, #492]	; (80018a8 <__aeabi_dmul+0x3a0>)
 80016ba:	2700      	movs	r7, #0
 80016bc:	2600      	movs	r6, #0
 80016be:	e78e      	b.n	80015de <__aeabi_dmul+0xd6>
 80016c0:	0c14      	lsrs	r4, r2, #16
 80016c2:	0412      	lsls	r2, r2, #16
 80016c4:	0c12      	lsrs	r2, r2, #16
 80016c6:	0011      	movs	r1, r2
 80016c8:	0c37      	lsrs	r7, r6, #16
 80016ca:	0436      	lsls	r6, r6, #16
 80016cc:	0c35      	lsrs	r5, r6, #16
 80016ce:	4379      	muls	r1, r7
 80016d0:	0028      	movs	r0, r5
 80016d2:	468c      	mov	ip, r1
 80016d4:	002e      	movs	r6, r5
 80016d6:	4360      	muls	r0, r4
 80016d8:	4460      	add	r0, ip
 80016da:	4683      	mov	fp, r0
 80016dc:	4356      	muls	r6, r2
 80016de:	0021      	movs	r1, r4
 80016e0:	0c30      	lsrs	r0, r6, #16
 80016e2:	4680      	mov	r8, r0
 80016e4:	4658      	mov	r0, fp
 80016e6:	4379      	muls	r1, r7
 80016e8:	4440      	add	r0, r8
 80016ea:	9102      	str	r1, [sp, #8]
 80016ec:	4584      	cmp	ip, r0
 80016ee:	d906      	bls.n	80016fe <__aeabi_dmul+0x1f6>
 80016f0:	4688      	mov	r8, r1
 80016f2:	2180      	movs	r1, #128	; 0x80
 80016f4:	0249      	lsls	r1, r1, #9
 80016f6:	468c      	mov	ip, r1
 80016f8:	44e0      	add	r8, ip
 80016fa:	4641      	mov	r1, r8
 80016fc:	9102      	str	r1, [sp, #8]
 80016fe:	0436      	lsls	r6, r6, #16
 8001700:	0c01      	lsrs	r1, r0, #16
 8001702:	0c36      	lsrs	r6, r6, #16
 8001704:	0400      	lsls	r0, r0, #16
 8001706:	468b      	mov	fp, r1
 8001708:	1981      	adds	r1, r0, r6
 800170a:	0c1e      	lsrs	r6, r3, #16
 800170c:	041b      	lsls	r3, r3, #16
 800170e:	0c1b      	lsrs	r3, r3, #16
 8001710:	9103      	str	r1, [sp, #12]
 8001712:	0019      	movs	r1, r3
 8001714:	4379      	muls	r1, r7
 8001716:	468c      	mov	ip, r1
 8001718:	0028      	movs	r0, r5
 800171a:	4375      	muls	r5, r6
 800171c:	4465      	add	r5, ip
 800171e:	46a8      	mov	r8, r5
 8001720:	4358      	muls	r0, r3
 8001722:	0c05      	lsrs	r5, r0, #16
 8001724:	4445      	add	r5, r8
 8001726:	4377      	muls	r7, r6
 8001728:	42a9      	cmp	r1, r5
 800172a:	d903      	bls.n	8001734 <__aeabi_dmul+0x22c>
 800172c:	2180      	movs	r1, #128	; 0x80
 800172e:	0249      	lsls	r1, r1, #9
 8001730:	468c      	mov	ip, r1
 8001732:	4467      	add	r7, ip
 8001734:	0c29      	lsrs	r1, r5, #16
 8001736:	468c      	mov	ip, r1
 8001738:	0039      	movs	r1, r7
 800173a:	0400      	lsls	r0, r0, #16
 800173c:	0c00      	lsrs	r0, r0, #16
 800173e:	042d      	lsls	r5, r5, #16
 8001740:	182d      	adds	r5, r5, r0
 8001742:	4461      	add	r1, ip
 8001744:	44ab      	add	fp, r5
 8001746:	9105      	str	r1, [sp, #20]
 8001748:	4659      	mov	r1, fp
 800174a:	9104      	str	r1, [sp, #16]
 800174c:	9901      	ldr	r1, [sp, #4]
 800174e:	040f      	lsls	r7, r1, #16
 8001750:	0c3f      	lsrs	r7, r7, #16
 8001752:	0c08      	lsrs	r0, r1, #16
 8001754:	0039      	movs	r1, r7
 8001756:	4351      	muls	r1, r2
 8001758:	4342      	muls	r2, r0
 800175a:	4690      	mov	r8, r2
 800175c:	0002      	movs	r2, r0
 800175e:	468c      	mov	ip, r1
 8001760:	0c09      	lsrs	r1, r1, #16
 8001762:	468b      	mov	fp, r1
 8001764:	4362      	muls	r2, r4
 8001766:	437c      	muls	r4, r7
 8001768:	4444      	add	r4, r8
 800176a:	445c      	add	r4, fp
 800176c:	45a0      	cmp	r8, r4
 800176e:	d903      	bls.n	8001778 <__aeabi_dmul+0x270>
 8001770:	2180      	movs	r1, #128	; 0x80
 8001772:	0249      	lsls	r1, r1, #9
 8001774:	4688      	mov	r8, r1
 8001776:	4442      	add	r2, r8
 8001778:	0c21      	lsrs	r1, r4, #16
 800177a:	4688      	mov	r8, r1
 800177c:	4661      	mov	r1, ip
 800177e:	0409      	lsls	r1, r1, #16
 8001780:	0c09      	lsrs	r1, r1, #16
 8001782:	468c      	mov	ip, r1
 8001784:	0039      	movs	r1, r7
 8001786:	4359      	muls	r1, r3
 8001788:	4343      	muls	r3, r0
 800178a:	4370      	muls	r0, r6
 800178c:	437e      	muls	r6, r7
 800178e:	0c0f      	lsrs	r7, r1, #16
 8001790:	18f6      	adds	r6, r6, r3
 8001792:	0424      	lsls	r4, r4, #16
 8001794:	19be      	adds	r6, r7, r6
 8001796:	4464      	add	r4, ip
 8001798:	4442      	add	r2, r8
 800179a:	468c      	mov	ip, r1
 800179c:	42b3      	cmp	r3, r6
 800179e:	d903      	bls.n	80017a8 <__aeabi_dmul+0x2a0>
 80017a0:	2380      	movs	r3, #128	; 0x80
 80017a2:	025b      	lsls	r3, r3, #9
 80017a4:	4698      	mov	r8, r3
 80017a6:	4440      	add	r0, r8
 80017a8:	9b02      	ldr	r3, [sp, #8]
 80017aa:	4661      	mov	r1, ip
 80017ac:	4698      	mov	r8, r3
 80017ae:	9b04      	ldr	r3, [sp, #16]
 80017b0:	0437      	lsls	r7, r6, #16
 80017b2:	4443      	add	r3, r8
 80017b4:	469b      	mov	fp, r3
 80017b6:	45ab      	cmp	fp, r5
 80017b8:	41ad      	sbcs	r5, r5
 80017ba:	426b      	negs	r3, r5
 80017bc:	040d      	lsls	r5, r1, #16
 80017be:	9905      	ldr	r1, [sp, #20]
 80017c0:	0c2d      	lsrs	r5, r5, #16
 80017c2:	468c      	mov	ip, r1
 80017c4:	197f      	adds	r7, r7, r5
 80017c6:	4467      	add	r7, ip
 80017c8:	18fd      	adds	r5, r7, r3
 80017ca:	46a8      	mov	r8, r5
 80017cc:	465d      	mov	r5, fp
 80017ce:	192d      	adds	r5, r5, r4
 80017d0:	42a5      	cmp	r5, r4
 80017d2:	41a4      	sbcs	r4, r4
 80017d4:	4693      	mov	fp, r2
 80017d6:	4264      	negs	r4, r4
 80017d8:	46a4      	mov	ip, r4
 80017da:	44c3      	add	fp, r8
 80017dc:	44dc      	add	ip, fp
 80017de:	428f      	cmp	r7, r1
 80017e0:	41bf      	sbcs	r7, r7
 80017e2:	4598      	cmp	r8, r3
 80017e4:	419b      	sbcs	r3, r3
 80017e6:	4593      	cmp	fp, r2
 80017e8:	4192      	sbcs	r2, r2
 80017ea:	45a4      	cmp	ip, r4
 80017ec:	41a4      	sbcs	r4, r4
 80017ee:	425b      	negs	r3, r3
 80017f0:	427f      	negs	r7, r7
 80017f2:	431f      	orrs	r7, r3
 80017f4:	0c36      	lsrs	r6, r6, #16
 80017f6:	4252      	negs	r2, r2
 80017f8:	4264      	negs	r4, r4
 80017fa:	19bf      	adds	r7, r7, r6
 80017fc:	4322      	orrs	r2, r4
 80017fe:	18bf      	adds	r7, r7, r2
 8001800:	4662      	mov	r2, ip
 8001802:	1838      	adds	r0, r7, r0
 8001804:	0243      	lsls	r3, r0, #9
 8001806:	0dd2      	lsrs	r2, r2, #23
 8001808:	9903      	ldr	r1, [sp, #12]
 800180a:	4313      	orrs	r3, r2
 800180c:	026a      	lsls	r2, r5, #9
 800180e:	430a      	orrs	r2, r1
 8001810:	1e50      	subs	r0, r2, #1
 8001812:	4182      	sbcs	r2, r0
 8001814:	4661      	mov	r1, ip
 8001816:	0ded      	lsrs	r5, r5, #23
 8001818:	432a      	orrs	r2, r5
 800181a:	024e      	lsls	r6, r1, #9
 800181c:	4332      	orrs	r2, r6
 800181e:	01d9      	lsls	r1, r3, #7
 8001820:	d400      	bmi.n	8001824 <__aeabi_dmul+0x31c>
 8001822:	e0b3      	b.n	800198c <__aeabi_dmul+0x484>
 8001824:	2601      	movs	r6, #1
 8001826:	0850      	lsrs	r0, r2, #1
 8001828:	4032      	ands	r2, r6
 800182a:	4302      	orrs	r2, r0
 800182c:	07de      	lsls	r6, r3, #31
 800182e:	4332      	orrs	r2, r6
 8001830:	085b      	lsrs	r3, r3, #1
 8001832:	4c22      	ldr	r4, [pc, #136]	; (80018bc <__aeabi_dmul+0x3b4>)
 8001834:	4454      	add	r4, sl
 8001836:	2c00      	cmp	r4, #0
 8001838:	dd62      	ble.n	8001900 <__aeabi_dmul+0x3f8>
 800183a:	0751      	lsls	r1, r2, #29
 800183c:	d009      	beq.n	8001852 <__aeabi_dmul+0x34a>
 800183e:	200f      	movs	r0, #15
 8001840:	4010      	ands	r0, r2
 8001842:	2804      	cmp	r0, #4
 8001844:	d005      	beq.n	8001852 <__aeabi_dmul+0x34a>
 8001846:	1d10      	adds	r0, r2, #4
 8001848:	4290      	cmp	r0, r2
 800184a:	4192      	sbcs	r2, r2
 800184c:	4252      	negs	r2, r2
 800184e:	189b      	adds	r3, r3, r2
 8001850:	0002      	movs	r2, r0
 8001852:	01d9      	lsls	r1, r3, #7
 8001854:	d504      	bpl.n	8001860 <__aeabi_dmul+0x358>
 8001856:	2480      	movs	r4, #128	; 0x80
 8001858:	4819      	ldr	r0, [pc, #100]	; (80018c0 <__aeabi_dmul+0x3b8>)
 800185a:	00e4      	lsls	r4, r4, #3
 800185c:	4003      	ands	r3, r0
 800185e:	4454      	add	r4, sl
 8001860:	4818      	ldr	r0, [pc, #96]	; (80018c4 <__aeabi_dmul+0x3bc>)
 8001862:	4284      	cmp	r4, r0
 8001864:	dd00      	ble.n	8001868 <__aeabi_dmul+0x360>
 8001866:	e727      	b.n	80016b8 <__aeabi_dmul+0x1b0>
 8001868:	075e      	lsls	r6, r3, #29
 800186a:	025b      	lsls	r3, r3, #9
 800186c:	08d2      	lsrs	r2, r2, #3
 800186e:	0b1f      	lsrs	r7, r3, #12
 8001870:	0563      	lsls	r3, r4, #21
 8001872:	4316      	orrs	r6, r2
 8001874:	0d5b      	lsrs	r3, r3, #21
 8001876:	e6b2      	b.n	80015de <__aeabi_dmul+0xd6>
 8001878:	2300      	movs	r3, #0
 800187a:	4699      	mov	r9, r3
 800187c:	3301      	adds	r3, #1
 800187e:	2704      	movs	r7, #4
 8001880:	2600      	movs	r6, #0
 8001882:	469b      	mov	fp, r3
 8001884:	e664      	b.n	8001550 <__aeabi_dmul+0x48>
 8001886:	2303      	movs	r3, #3
 8001888:	9701      	str	r7, [sp, #4]
 800188a:	4681      	mov	r9, r0
 800188c:	270c      	movs	r7, #12
 800188e:	469b      	mov	fp, r3
 8001890:	e65e      	b.n	8001550 <__aeabi_dmul+0x48>
 8001892:	2201      	movs	r2, #1
 8001894:	2001      	movs	r0, #1
 8001896:	4317      	orrs	r7, r2
 8001898:	2200      	movs	r2, #0
 800189a:	e676      	b.n	800158a <__aeabi_dmul+0x82>
 800189c:	2303      	movs	r3, #3
 800189e:	2003      	movs	r0, #3
 80018a0:	431f      	orrs	r7, r3
 80018a2:	4643      	mov	r3, r8
 80018a4:	e671      	b.n	800158a <__aeabi_dmul+0x82>
 80018a6:	46c0      	nop			; (mov r8, r8)
 80018a8:	000007ff 	.word	0x000007ff
 80018ac:	fffffc01 	.word	0xfffffc01
 80018b0:	0800c540 	.word	0x0800c540
 80018b4:	800fffff 	.word	0x800fffff
 80018b8:	fffffc0d 	.word	0xfffffc0d
 80018bc:	000003ff 	.word	0x000003ff
 80018c0:	feffffff 	.word	0xfeffffff
 80018c4:	000007fe 	.word	0x000007fe
 80018c8:	2300      	movs	r3, #0
 80018ca:	2780      	movs	r7, #128	; 0x80
 80018cc:	9300      	str	r3, [sp, #0]
 80018ce:	033f      	lsls	r7, r7, #12
 80018d0:	2600      	movs	r6, #0
 80018d2:	4b43      	ldr	r3, [pc, #268]	; (80019e0 <__aeabi_dmul+0x4d8>)
 80018d4:	e683      	b.n	80015de <__aeabi_dmul+0xd6>
 80018d6:	9b01      	ldr	r3, [sp, #4]
 80018d8:	0032      	movs	r2, r6
 80018da:	46a4      	mov	ip, r4
 80018dc:	4658      	mov	r0, fp
 80018de:	e670      	b.n	80015c2 <__aeabi_dmul+0xba>
 80018e0:	46ac      	mov	ip, r5
 80018e2:	e66e      	b.n	80015c2 <__aeabi_dmul+0xba>
 80018e4:	2780      	movs	r7, #128	; 0x80
 80018e6:	9901      	ldr	r1, [sp, #4]
 80018e8:	033f      	lsls	r7, r7, #12
 80018ea:	4239      	tst	r1, r7
 80018ec:	d02d      	beq.n	800194a <__aeabi_dmul+0x442>
 80018ee:	423b      	tst	r3, r7
 80018f0:	d12b      	bne.n	800194a <__aeabi_dmul+0x442>
 80018f2:	431f      	orrs	r7, r3
 80018f4:	033f      	lsls	r7, r7, #12
 80018f6:	0b3f      	lsrs	r7, r7, #12
 80018f8:	9500      	str	r5, [sp, #0]
 80018fa:	0016      	movs	r6, r2
 80018fc:	4b38      	ldr	r3, [pc, #224]	; (80019e0 <__aeabi_dmul+0x4d8>)
 80018fe:	e66e      	b.n	80015de <__aeabi_dmul+0xd6>
 8001900:	2501      	movs	r5, #1
 8001902:	1b2d      	subs	r5, r5, r4
 8001904:	2d38      	cmp	r5, #56	; 0x38
 8001906:	dd00      	ble.n	800190a <__aeabi_dmul+0x402>
 8001908:	e666      	b.n	80015d8 <__aeabi_dmul+0xd0>
 800190a:	2d1f      	cmp	r5, #31
 800190c:	dc40      	bgt.n	8001990 <__aeabi_dmul+0x488>
 800190e:	4835      	ldr	r0, [pc, #212]	; (80019e4 <__aeabi_dmul+0x4dc>)
 8001910:	001c      	movs	r4, r3
 8001912:	4450      	add	r0, sl
 8001914:	0016      	movs	r6, r2
 8001916:	4082      	lsls	r2, r0
 8001918:	4084      	lsls	r4, r0
 800191a:	40ee      	lsrs	r6, r5
 800191c:	1e50      	subs	r0, r2, #1
 800191e:	4182      	sbcs	r2, r0
 8001920:	4334      	orrs	r4, r6
 8001922:	4314      	orrs	r4, r2
 8001924:	40eb      	lsrs	r3, r5
 8001926:	0762      	lsls	r2, r4, #29
 8001928:	d009      	beq.n	800193e <__aeabi_dmul+0x436>
 800192a:	220f      	movs	r2, #15
 800192c:	4022      	ands	r2, r4
 800192e:	2a04      	cmp	r2, #4
 8001930:	d005      	beq.n	800193e <__aeabi_dmul+0x436>
 8001932:	0022      	movs	r2, r4
 8001934:	1d14      	adds	r4, r2, #4
 8001936:	4294      	cmp	r4, r2
 8001938:	4180      	sbcs	r0, r0
 800193a:	4240      	negs	r0, r0
 800193c:	181b      	adds	r3, r3, r0
 800193e:	021a      	lsls	r2, r3, #8
 8001940:	d53e      	bpl.n	80019c0 <__aeabi_dmul+0x4b8>
 8001942:	2301      	movs	r3, #1
 8001944:	2700      	movs	r7, #0
 8001946:	2600      	movs	r6, #0
 8001948:	e649      	b.n	80015de <__aeabi_dmul+0xd6>
 800194a:	2780      	movs	r7, #128	; 0x80
 800194c:	9b01      	ldr	r3, [sp, #4]
 800194e:	033f      	lsls	r7, r7, #12
 8001950:	431f      	orrs	r7, r3
 8001952:	033f      	lsls	r7, r7, #12
 8001954:	0b3f      	lsrs	r7, r7, #12
 8001956:	9400      	str	r4, [sp, #0]
 8001958:	4b21      	ldr	r3, [pc, #132]	; (80019e0 <__aeabi_dmul+0x4d8>)
 800195a:	e640      	b.n	80015de <__aeabi_dmul+0xd6>
 800195c:	0003      	movs	r3, r0
 800195e:	465a      	mov	r2, fp
 8001960:	3b28      	subs	r3, #40	; 0x28
 8001962:	409a      	lsls	r2, r3
 8001964:	2600      	movs	r6, #0
 8001966:	9201      	str	r2, [sp, #4]
 8001968:	e66d      	b.n	8001646 <__aeabi_dmul+0x13e>
 800196a:	4658      	mov	r0, fp
 800196c:	f000 f92e 	bl	8001bcc <__clzsi2>
 8001970:	3020      	adds	r0, #32
 8001972:	e657      	b.n	8001624 <__aeabi_dmul+0x11c>
 8001974:	0003      	movs	r3, r0
 8001976:	4652      	mov	r2, sl
 8001978:	3b28      	subs	r3, #40	; 0x28
 800197a:	409a      	lsls	r2, r3
 800197c:	0013      	movs	r3, r2
 800197e:	2200      	movs	r2, #0
 8001980:	e693      	b.n	80016aa <__aeabi_dmul+0x1a2>
 8001982:	4650      	mov	r0, sl
 8001984:	f000 f922 	bl	8001bcc <__clzsi2>
 8001988:	3020      	adds	r0, #32
 800198a:	e67b      	b.n	8001684 <__aeabi_dmul+0x17c>
 800198c:	46ca      	mov	sl, r9
 800198e:	e750      	b.n	8001832 <__aeabi_dmul+0x32a>
 8001990:	201f      	movs	r0, #31
 8001992:	001e      	movs	r6, r3
 8001994:	4240      	negs	r0, r0
 8001996:	1b04      	subs	r4, r0, r4
 8001998:	40e6      	lsrs	r6, r4
 800199a:	2d20      	cmp	r5, #32
 800199c:	d003      	beq.n	80019a6 <__aeabi_dmul+0x49e>
 800199e:	4c12      	ldr	r4, [pc, #72]	; (80019e8 <__aeabi_dmul+0x4e0>)
 80019a0:	4454      	add	r4, sl
 80019a2:	40a3      	lsls	r3, r4
 80019a4:	431a      	orrs	r2, r3
 80019a6:	1e50      	subs	r0, r2, #1
 80019a8:	4182      	sbcs	r2, r0
 80019aa:	4332      	orrs	r2, r6
 80019ac:	2607      	movs	r6, #7
 80019ae:	2700      	movs	r7, #0
 80019b0:	4016      	ands	r6, r2
 80019b2:	d009      	beq.n	80019c8 <__aeabi_dmul+0x4c0>
 80019b4:	200f      	movs	r0, #15
 80019b6:	2300      	movs	r3, #0
 80019b8:	4010      	ands	r0, r2
 80019ba:	0014      	movs	r4, r2
 80019bc:	2804      	cmp	r0, #4
 80019be:	d1b9      	bne.n	8001934 <__aeabi_dmul+0x42c>
 80019c0:	0022      	movs	r2, r4
 80019c2:	075e      	lsls	r6, r3, #29
 80019c4:	025b      	lsls	r3, r3, #9
 80019c6:	0b1f      	lsrs	r7, r3, #12
 80019c8:	08d2      	lsrs	r2, r2, #3
 80019ca:	4316      	orrs	r6, r2
 80019cc:	2300      	movs	r3, #0
 80019ce:	e606      	b.n	80015de <__aeabi_dmul+0xd6>
 80019d0:	2780      	movs	r7, #128	; 0x80
 80019d2:	033f      	lsls	r7, r7, #12
 80019d4:	431f      	orrs	r7, r3
 80019d6:	033f      	lsls	r7, r7, #12
 80019d8:	0b3f      	lsrs	r7, r7, #12
 80019da:	0016      	movs	r6, r2
 80019dc:	4b00      	ldr	r3, [pc, #0]	; (80019e0 <__aeabi_dmul+0x4d8>)
 80019de:	e5fe      	b.n	80015de <__aeabi_dmul+0xd6>
 80019e0:	000007ff 	.word	0x000007ff
 80019e4:	0000041e 	.word	0x0000041e
 80019e8:	0000043e 	.word	0x0000043e

080019ec <__aeabi_i2d>:
 80019ec:	b570      	push	{r4, r5, r6, lr}
 80019ee:	2800      	cmp	r0, #0
 80019f0:	d02d      	beq.n	8001a4e <__aeabi_i2d+0x62>
 80019f2:	17c3      	asrs	r3, r0, #31
 80019f4:	18c5      	adds	r5, r0, r3
 80019f6:	405d      	eors	r5, r3
 80019f8:	0fc4      	lsrs	r4, r0, #31
 80019fa:	0028      	movs	r0, r5
 80019fc:	f000 f8e6 	bl	8001bcc <__clzsi2>
 8001a00:	4b15      	ldr	r3, [pc, #84]	; (8001a58 <__aeabi_i2d+0x6c>)
 8001a02:	1a1b      	subs	r3, r3, r0
 8001a04:	055b      	lsls	r3, r3, #21
 8001a06:	0d5b      	lsrs	r3, r3, #21
 8001a08:	280a      	cmp	r0, #10
 8001a0a:	dd15      	ble.n	8001a38 <__aeabi_i2d+0x4c>
 8001a0c:	380b      	subs	r0, #11
 8001a0e:	4085      	lsls	r5, r0
 8001a10:	2200      	movs	r2, #0
 8001a12:	032d      	lsls	r5, r5, #12
 8001a14:	0b2d      	lsrs	r5, r5, #12
 8001a16:	2100      	movs	r1, #0
 8001a18:	0010      	movs	r0, r2
 8001a1a:	032d      	lsls	r5, r5, #12
 8001a1c:	0d0a      	lsrs	r2, r1, #20
 8001a1e:	0b2d      	lsrs	r5, r5, #12
 8001a20:	0512      	lsls	r2, r2, #20
 8001a22:	432a      	orrs	r2, r5
 8001a24:	4d0d      	ldr	r5, [pc, #52]	; (8001a5c <__aeabi_i2d+0x70>)
 8001a26:	051b      	lsls	r3, r3, #20
 8001a28:	402a      	ands	r2, r5
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	005b      	lsls	r3, r3, #1
 8001a2e:	07e4      	lsls	r4, r4, #31
 8001a30:	085b      	lsrs	r3, r3, #1
 8001a32:	4323      	orrs	r3, r4
 8001a34:	0019      	movs	r1, r3
 8001a36:	bd70      	pop	{r4, r5, r6, pc}
 8001a38:	0002      	movs	r2, r0
 8001a3a:	0029      	movs	r1, r5
 8001a3c:	3215      	adds	r2, #21
 8001a3e:	4091      	lsls	r1, r2
 8001a40:	000a      	movs	r2, r1
 8001a42:	210b      	movs	r1, #11
 8001a44:	1a08      	subs	r0, r1, r0
 8001a46:	40c5      	lsrs	r5, r0
 8001a48:	032d      	lsls	r5, r5, #12
 8001a4a:	0b2d      	lsrs	r5, r5, #12
 8001a4c:	e7e3      	b.n	8001a16 <__aeabi_i2d+0x2a>
 8001a4e:	2400      	movs	r4, #0
 8001a50:	2300      	movs	r3, #0
 8001a52:	2500      	movs	r5, #0
 8001a54:	2200      	movs	r2, #0
 8001a56:	e7de      	b.n	8001a16 <__aeabi_i2d+0x2a>
 8001a58:	0000041e 	.word	0x0000041e
 8001a5c:	800fffff 	.word	0x800fffff

08001a60 <__aeabi_ui2d>:
 8001a60:	b510      	push	{r4, lr}
 8001a62:	1e04      	subs	r4, r0, #0
 8001a64:	d025      	beq.n	8001ab2 <__aeabi_ui2d+0x52>
 8001a66:	f000 f8b1 	bl	8001bcc <__clzsi2>
 8001a6a:	4b14      	ldr	r3, [pc, #80]	; (8001abc <__aeabi_ui2d+0x5c>)
 8001a6c:	1a1b      	subs	r3, r3, r0
 8001a6e:	055b      	lsls	r3, r3, #21
 8001a70:	0d5b      	lsrs	r3, r3, #21
 8001a72:	280a      	cmp	r0, #10
 8001a74:	dd12      	ble.n	8001a9c <__aeabi_ui2d+0x3c>
 8001a76:	380b      	subs	r0, #11
 8001a78:	4084      	lsls	r4, r0
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	0324      	lsls	r4, r4, #12
 8001a7e:	0b24      	lsrs	r4, r4, #12
 8001a80:	2100      	movs	r1, #0
 8001a82:	0010      	movs	r0, r2
 8001a84:	0324      	lsls	r4, r4, #12
 8001a86:	0d0a      	lsrs	r2, r1, #20
 8001a88:	0b24      	lsrs	r4, r4, #12
 8001a8a:	0512      	lsls	r2, r2, #20
 8001a8c:	4322      	orrs	r2, r4
 8001a8e:	4c0c      	ldr	r4, [pc, #48]	; (8001ac0 <__aeabi_ui2d+0x60>)
 8001a90:	051b      	lsls	r3, r3, #20
 8001a92:	4022      	ands	r2, r4
 8001a94:	4313      	orrs	r3, r2
 8001a96:	005b      	lsls	r3, r3, #1
 8001a98:	0859      	lsrs	r1, r3, #1
 8001a9a:	bd10      	pop	{r4, pc}
 8001a9c:	0002      	movs	r2, r0
 8001a9e:	0021      	movs	r1, r4
 8001aa0:	3215      	adds	r2, #21
 8001aa2:	4091      	lsls	r1, r2
 8001aa4:	000a      	movs	r2, r1
 8001aa6:	210b      	movs	r1, #11
 8001aa8:	1a08      	subs	r0, r1, r0
 8001aaa:	40c4      	lsrs	r4, r0
 8001aac:	0324      	lsls	r4, r4, #12
 8001aae:	0b24      	lsrs	r4, r4, #12
 8001ab0:	e7e6      	b.n	8001a80 <__aeabi_ui2d+0x20>
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	2400      	movs	r4, #0
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	e7e2      	b.n	8001a80 <__aeabi_ui2d+0x20>
 8001aba:	46c0      	nop			; (mov r8, r8)
 8001abc:	0000041e 	.word	0x0000041e
 8001ac0:	800fffff 	.word	0x800fffff

08001ac4 <__aeabi_d2f>:
 8001ac4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ac6:	004c      	lsls	r4, r1, #1
 8001ac8:	0d64      	lsrs	r4, r4, #21
 8001aca:	030b      	lsls	r3, r1, #12
 8001acc:	1c62      	adds	r2, r4, #1
 8001ace:	0a5b      	lsrs	r3, r3, #9
 8001ad0:	0f46      	lsrs	r6, r0, #29
 8001ad2:	0552      	lsls	r2, r2, #21
 8001ad4:	0fc9      	lsrs	r1, r1, #31
 8001ad6:	431e      	orrs	r6, r3
 8001ad8:	00c5      	lsls	r5, r0, #3
 8001ada:	0d52      	lsrs	r2, r2, #21
 8001adc:	2a01      	cmp	r2, #1
 8001ade:	dd29      	ble.n	8001b34 <__aeabi_d2f+0x70>
 8001ae0:	4b37      	ldr	r3, [pc, #220]	; (8001bc0 <__aeabi_d2f+0xfc>)
 8001ae2:	18e7      	adds	r7, r4, r3
 8001ae4:	2ffe      	cmp	r7, #254	; 0xfe
 8001ae6:	dc1c      	bgt.n	8001b22 <__aeabi_d2f+0x5e>
 8001ae8:	2f00      	cmp	r7, #0
 8001aea:	dd3b      	ble.n	8001b64 <__aeabi_d2f+0xa0>
 8001aec:	0180      	lsls	r0, r0, #6
 8001aee:	1e43      	subs	r3, r0, #1
 8001af0:	4198      	sbcs	r0, r3
 8001af2:	2207      	movs	r2, #7
 8001af4:	00f3      	lsls	r3, r6, #3
 8001af6:	0f6d      	lsrs	r5, r5, #29
 8001af8:	4303      	orrs	r3, r0
 8001afa:	432b      	orrs	r3, r5
 8001afc:	401a      	ands	r2, r3
 8001afe:	2a00      	cmp	r2, #0
 8001b00:	d004      	beq.n	8001b0c <__aeabi_d2f+0x48>
 8001b02:	220f      	movs	r2, #15
 8001b04:	401a      	ands	r2, r3
 8001b06:	2a04      	cmp	r2, #4
 8001b08:	d000      	beq.n	8001b0c <__aeabi_d2f+0x48>
 8001b0a:	3304      	adds	r3, #4
 8001b0c:	2280      	movs	r2, #128	; 0x80
 8001b0e:	04d2      	lsls	r2, r2, #19
 8001b10:	401a      	ands	r2, r3
 8001b12:	d024      	beq.n	8001b5e <__aeabi_d2f+0x9a>
 8001b14:	3701      	adds	r7, #1
 8001b16:	b2fa      	uxtb	r2, r7
 8001b18:	2fff      	cmp	r7, #255	; 0xff
 8001b1a:	d002      	beq.n	8001b22 <__aeabi_d2f+0x5e>
 8001b1c:	019b      	lsls	r3, r3, #6
 8001b1e:	0a58      	lsrs	r0, r3, #9
 8001b20:	e001      	b.n	8001b26 <__aeabi_d2f+0x62>
 8001b22:	22ff      	movs	r2, #255	; 0xff
 8001b24:	2000      	movs	r0, #0
 8001b26:	0240      	lsls	r0, r0, #9
 8001b28:	05d2      	lsls	r2, r2, #23
 8001b2a:	0a40      	lsrs	r0, r0, #9
 8001b2c:	07c9      	lsls	r1, r1, #31
 8001b2e:	4310      	orrs	r0, r2
 8001b30:	4308      	orrs	r0, r1
 8001b32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b34:	4335      	orrs	r5, r6
 8001b36:	2c00      	cmp	r4, #0
 8001b38:	d104      	bne.n	8001b44 <__aeabi_d2f+0x80>
 8001b3a:	2d00      	cmp	r5, #0
 8001b3c:	d10a      	bne.n	8001b54 <__aeabi_d2f+0x90>
 8001b3e:	2200      	movs	r2, #0
 8001b40:	2000      	movs	r0, #0
 8001b42:	e7f0      	b.n	8001b26 <__aeabi_d2f+0x62>
 8001b44:	2d00      	cmp	r5, #0
 8001b46:	d0ec      	beq.n	8001b22 <__aeabi_d2f+0x5e>
 8001b48:	2080      	movs	r0, #128	; 0x80
 8001b4a:	03c0      	lsls	r0, r0, #15
 8001b4c:	4330      	orrs	r0, r6
 8001b4e:	22ff      	movs	r2, #255	; 0xff
 8001b50:	e7e9      	b.n	8001b26 <__aeabi_d2f+0x62>
 8001b52:	2400      	movs	r4, #0
 8001b54:	2300      	movs	r3, #0
 8001b56:	025b      	lsls	r3, r3, #9
 8001b58:	0a58      	lsrs	r0, r3, #9
 8001b5a:	b2e2      	uxtb	r2, r4
 8001b5c:	e7e3      	b.n	8001b26 <__aeabi_d2f+0x62>
 8001b5e:	08db      	lsrs	r3, r3, #3
 8001b60:	003c      	movs	r4, r7
 8001b62:	e7f8      	b.n	8001b56 <__aeabi_d2f+0x92>
 8001b64:	003b      	movs	r3, r7
 8001b66:	3317      	adds	r3, #23
 8001b68:	dbf3      	blt.n	8001b52 <__aeabi_d2f+0x8e>
 8001b6a:	2380      	movs	r3, #128	; 0x80
 8001b6c:	041b      	lsls	r3, r3, #16
 8001b6e:	4333      	orrs	r3, r6
 8001b70:	261e      	movs	r6, #30
 8001b72:	1bf6      	subs	r6, r6, r7
 8001b74:	2e1f      	cmp	r6, #31
 8001b76:	dd14      	ble.n	8001ba2 <__aeabi_d2f+0xde>
 8001b78:	2202      	movs	r2, #2
 8001b7a:	4252      	negs	r2, r2
 8001b7c:	1bd7      	subs	r7, r2, r7
 8001b7e:	001a      	movs	r2, r3
 8001b80:	40fa      	lsrs	r2, r7
 8001b82:	0017      	movs	r7, r2
 8001b84:	2e20      	cmp	r6, #32
 8001b86:	d004      	beq.n	8001b92 <__aeabi_d2f+0xce>
 8001b88:	4a0e      	ldr	r2, [pc, #56]	; (8001bc4 <__aeabi_d2f+0x100>)
 8001b8a:	4694      	mov	ip, r2
 8001b8c:	4464      	add	r4, ip
 8001b8e:	40a3      	lsls	r3, r4
 8001b90:	431d      	orrs	r5, r3
 8001b92:	002b      	movs	r3, r5
 8001b94:	1e5d      	subs	r5, r3, #1
 8001b96:	41ab      	sbcs	r3, r5
 8001b98:	2207      	movs	r2, #7
 8001b9a:	433b      	orrs	r3, r7
 8001b9c:	401a      	ands	r2, r3
 8001b9e:	2700      	movs	r7, #0
 8001ba0:	e7ad      	b.n	8001afe <__aeabi_d2f+0x3a>
 8001ba2:	4a09      	ldr	r2, [pc, #36]	; (8001bc8 <__aeabi_d2f+0x104>)
 8001ba4:	0028      	movs	r0, r5
 8001ba6:	18a2      	adds	r2, r4, r2
 8001ba8:	4095      	lsls	r5, r2
 8001baa:	4093      	lsls	r3, r2
 8001bac:	1e6c      	subs	r4, r5, #1
 8001bae:	41a5      	sbcs	r5, r4
 8001bb0:	40f0      	lsrs	r0, r6
 8001bb2:	2207      	movs	r2, #7
 8001bb4:	432b      	orrs	r3, r5
 8001bb6:	4303      	orrs	r3, r0
 8001bb8:	401a      	ands	r2, r3
 8001bba:	2700      	movs	r7, #0
 8001bbc:	e79f      	b.n	8001afe <__aeabi_d2f+0x3a>
 8001bbe:	46c0      	nop			; (mov r8, r8)
 8001bc0:	fffffc80 	.word	0xfffffc80
 8001bc4:	fffffca2 	.word	0xfffffca2
 8001bc8:	fffffc82 	.word	0xfffffc82

08001bcc <__clzsi2>:
 8001bcc:	211c      	movs	r1, #28
 8001bce:	2301      	movs	r3, #1
 8001bd0:	041b      	lsls	r3, r3, #16
 8001bd2:	4298      	cmp	r0, r3
 8001bd4:	d301      	bcc.n	8001bda <__clzsi2+0xe>
 8001bd6:	0c00      	lsrs	r0, r0, #16
 8001bd8:	3910      	subs	r1, #16
 8001bda:	0a1b      	lsrs	r3, r3, #8
 8001bdc:	4298      	cmp	r0, r3
 8001bde:	d301      	bcc.n	8001be4 <__clzsi2+0x18>
 8001be0:	0a00      	lsrs	r0, r0, #8
 8001be2:	3908      	subs	r1, #8
 8001be4:	091b      	lsrs	r3, r3, #4
 8001be6:	4298      	cmp	r0, r3
 8001be8:	d301      	bcc.n	8001bee <__clzsi2+0x22>
 8001bea:	0900      	lsrs	r0, r0, #4
 8001bec:	3904      	subs	r1, #4
 8001bee:	a202      	add	r2, pc, #8	; (adr r2, 8001bf8 <__clzsi2+0x2c>)
 8001bf0:	5c10      	ldrb	r0, [r2, r0]
 8001bf2:	1840      	adds	r0, r0, r1
 8001bf4:	4770      	bx	lr
 8001bf6:	46c0      	nop			; (mov r8, r8)
 8001bf8:	02020304 	.word	0x02020304
 8001bfc:	01010101 	.word	0x01010101
	...

08001c08 <SPI_DC_LOW>:
static uint16_t pixelColor;		// for use in DMA functions

// ---- lower level functions ----
void SPI_CS_LOW() {HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);}
void SPI_CS_HIGH() {HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);}
void SPI_DC_LOW() {HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);}
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	2380      	movs	r3, #128	; 0x80
 8001c0e:	01db      	lsls	r3, r3, #7
 8001c10:	4803      	ldr	r0, [pc, #12]	; (8001c20 <SPI_DC_LOW+0x18>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	0019      	movs	r1, r3
 8001c16:	f006 fa67 	bl	80080e8 <HAL_GPIO_WritePin>
 8001c1a:	46c0      	nop			; (mov r8, r8)
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	50000400 	.word	0x50000400

08001c24 <SPI_DC_HIGH>:
void SPI_DC_HIGH() {HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);}
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	2380      	movs	r3, #128	; 0x80
 8001c2a:	01db      	lsls	r3, r3, #7
 8001c2c:	4803      	ldr	r0, [pc, #12]	; (8001c3c <SPI_DC_HIGH+0x18>)
 8001c2e:	2201      	movs	r2, #1
 8001c30:	0019      	movs	r1, r3
 8001c32:	f006 fa59 	bl	80080e8 <HAL_GPIO_WritePin>
 8001c36:	46c0      	nop			; (mov r8, r8)
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	50000400 	.word	0x50000400

08001c40 <sendCommand>:

void sendCommand(uint8_t cmd, uint8_t *args, uint16_t numArgs, SPI_HandleTypeDef *hspi) {
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b084      	sub	sp, #16
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	60b9      	str	r1, [r7, #8]
 8001c48:	0011      	movs	r1, r2
 8001c4a:	607b      	str	r3, [r7, #4]
 8001c4c:	230f      	movs	r3, #15
 8001c4e:	18fb      	adds	r3, r7, r3
 8001c50:	1c02      	adds	r2, r0, #0
 8001c52:	701a      	strb	r2, [r3, #0]
 8001c54:	230c      	movs	r3, #12
 8001c56:	18fb      	adds	r3, r7, r3
 8001c58:	1c0a      	adds	r2, r1, #0
 8001c5a:	801a      	strh	r2, [r3, #0]
	while (HAL_SPI_GetState(hspi) == HAL_SPI_STATE_BUSY_TX);		// block next transfer request while DMA transfer is ongoing
 8001c5c:	46c0      	nop			; (mov r8, r8)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	0018      	movs	r0, r3
 8001c62:	f008 fd01 	bl	800a668 <HAL_SPI_GetState>
 8001c66:	0003      	movs	r3, r0
 8001c68:	2b03      	cmp	r3, #3
 8001c6a:	d0f8      	beq.n	8001c5e <sendCommand+0x1e>
//	SPI_CS_LOW();	// chip select

	SPI_DC_LOW();	// command mode
 8001c6c:	f7ff ffcc 	bl	8001c08 <SPI_DC_LOW>
	HAL_SPI_Transmit(hspi, &cmd, 1, 1000);	// not using DMA bc it's only 1 byte
 8001c70:	23fa      	movs	r3, #250	; 0xfa
 8001c72:	009b      	lsls	r3, r3, #2
 8001c74:	220f      	movs	r2, #15
 8001c76:	18b9      	adds	r1, r7, r2
 8001c78:	6878      	ldr	r0, [r7, #4]
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	f008 f94e 	bl	8009f1c <HAL_SPI_Transmit>

	SPI_DC_HIGH();	// data mode
 8001c80:	f7ff ffd0 	bl	8001c24 <SPI_DC_HIGH>
	if (numArgs) {
 8001c84:	230c      	movs	r3, #12
 8001c86:	18fb      	adds	r3, r7, r3
 8001c88:	881b      	ldrh	r3, [r3, #0]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d007      	beq.n	8001c9e <sendCommand+0x5e>
		HAL_SPI_Transmit_IT(hspi, args, numArgs);
 8001c8e:	230c      	movs	r3, #12
 8001c90:	18fb      	adds	r3, r7, r3
 8001c92:	881a      	ldrh	r2, [r3, #0]
 8001c94:	68b9      	ldr	r1, [r7, #8]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	0018      	movs	r0, r3
 8001c9a:	f008 fa8d 	bl	800a1b8 <HAL_SPI_Transmit_IT>
	}
}
 8001c9e:	46c0      	nop			; (mov r8, r8)
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	b004      	add	sp, #16
 8001ca4:	bd80      	pop	{r7, pc}
	...

08001ca8 <sendColor>:

// no need to double pixel count since we're going into 16-bit mode
void sendColor(uint16_t color, uint16_t numPixels, SPI_HandleTypeDef *hspi) {
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b084      	sub	sp, #16
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	603a      	str	r2, [r7, #0]
 8001cb0:	1dbb      	adds	r3, r7, #6
 8001cb2:	1c02      	adds	r2, r0, #0
 8001cb4:	801a      	strh	r2, [r3, #0]
 8001cb6:	1d3b      	adds	r3, r7, #4
 8001cb8:	1c0a      	adds	r2, r1, #0
 8001cba:	801a      	strh	r2, [r3, #0]
	SPI_DC_LOW();
 8001cbc:	f7ff ffa4 	bl	8001c08 <SPI_DC_LOW>
	uint8_t cmd = ST77XX_RAMWR;
 8001cc0:	210f      	movs	r1, #15
 8001cc2:	187b      	adds	r3, r7, r1
 8001cc4:	222c      	movs	r2, #44	; 0x2c
 8001cc6:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit_IT(hspi, &cmd, 1);
 8001cc8:	1879      	adds	r1, r7, r1
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	2201      	movs	r2, #1
 8001cce:	0018      	movs	r0, r3
 8001cd0:	f008 fa72 	bl	800a1b8 <HAL_SPI_Transmit_IT>
	SPI_DC_HIGH();
 8001cd4:	f7ff ffa6 	bl	8001c24 <SPI_DC_HIGH>

	pixelColor = color;
 8001cd8:	4b13      	ldr	r3, [pc, #76]	; (8001d28 <sendColor+0x80>)
 8001cda:	1dba      	adds	r2, r7, #6
 8001cdc:	8812      	ldrh	r2, [r2, #0]
 8001cde:	801a      	strh	r2, [r3, #0]
	__HAL_SPI_DISABLE(hspi);
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	2140      	movs	r1, #64	; 0x40
 8001cec:	438a      	bics	r2, r1
 8001cee:	601a      	str	r2, [r3, #0]
	SET_BIT(hspi->Instance->CR1, SPI_CR1_DFF);
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	2180      	movs	r1, #128	; 0x80
 8001cfc:	0109      	lsls	r1, r1, #4
 8001cfe:	430a      	orrs	r2, r1
 8001d00:	601a      	str	r2, [r3, #0]
	__HAL_SPI_ENABLE(hspi);
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	2140      	movs	r1, #64	; 0x40
 8001d0e:	430a      	orrs	r2, r1
 8001d10:	601a      	str	r2, [r3, #0]
	HAL_SPI_Transmit_DMA(hspi, &pixelColor, numPixels);
 8001d12:	1d3b      	adds	r3, r7, #4
 8001d14:	881a      	ldrh	r2, [r3, #0]
 8001d16:	4904      	ldr	r1, [pc, #16]	; (8001d28 <sendColor+0x80>)
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	0018      	movs	r0, r3
 8001d1c:	f008 fada 	bl	800a2d4 <HAL_SPI_Transmit_DMA>
}
 8001d20:	46c0      	nop			; (mov r8, r8)
 8001d22:	46bd      	mov	sp, r7
 8001d24:	b004      	add	sp, #16
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	200000fc 	.word	0x200000fc

08001d2c <HAL_SPI_TxCpltCallback>:

// using only for sending data, but not commands
// dont send request when transfer is ongoing
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
//	if (HAL_GPIO_ReadPin(CS_PORT, CS_PIN) == GPIO_PIN_RESET) SPI_CS_HIGH();	// chip select disable
	__HAL_SPI_DISABLE(hspi);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	2140      	movs	r1, #64	; 0x40
 8001d40:	438a      	bics	r2, r1
 8001d42:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_DFF);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4907      	ldr	r1, [pc, #28]	; (8001d6c <HAL_SPI_TxCpltCallback+0x40>)
 8001d50:	400a      	ands	r2, r1
 8001d52:	601a      	str	r2, [r3, #0]
	__HAL_SPI_ENABLE(hspi);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	2140      	movs	r1, #64	; 0x40
 8001d60:	430a      	orrs	r2, r1
 8001d62:	601a      	str	r2, [r3, #0]
}
 8001d64:	46c0      	nop			; (mov r8, r8)
 8001d66:	46bd      	mov	sp, r7
 8001d68:	b002      	add	sp, #8
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	fffff7ff 	.word	0xfffff7ff

08001d70 <displayInit>:

// array parser heavily based on Adafruit library code
void displayInit(uint8_t *args, SPI_HandleTypeDef *hspi) {
 8001d70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d72:	b085      	sub	sp, #20
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
 8001d78:	6039      	str	r1, [r7, #0]
	uint8_t  numCommands, cmd, numArgs;
	uint16_t ms;
	uint8_t index = 0;
 8001d7a:	220b      	movs	r2, #11
 8001d7c:	0011      	movs	r1, r2
 8001d7e:	18bb      	adds	r3, r7, r2
 8001d80:	2200      	movs	r2, #0
 8001d82:	701a      	strb	r2, [r3, #0]
	uint8_t data;

	numCommands = args[index++];			// Number of commands to follow
 8001d84:	000a      	movs	r2, r1
 8001d86:	18bb      	adds	r3, r7, r2
 8001d88:	781b      	ldrb	r3, [r3, #0]
 8001d8a:	18ba      	adds	r2, r7, r2
 8001d8c:	1c59      	adds	r1, r3, #1
 8001d8e:	7011      	strb	r1, [r2, #0]
 8001d90:	001a      	movs	r2, r3
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	189a      	adds	r2, r3, r2
 8001d96:	230f      	movs	r3, #15
 8001d98:	18fb      	adds	r3, r7, r3
 8001d9a:	7812      	ldrb	r2, [r2, #0]
 8001d9c:	701a      	strb	r2, [r3, #0]
	while(numCommands--) {					// For each command...
 8001d9e:	e05e      	b.n	8001e5e <displayInit+0xee>
		cmd = args[index++];				// Read command
 8001da0:	200b      	movs	r0, #11
 8001da2:	183b      	adds	r3, r7, r0
 8001da4:	781b      	ldrb	r3, [r3, #0]
 8001da6:	183a      	adds	r2, r7, r0
 8001da8:	1c59      	adds	r1, r3, #1
 8001daa:	7011      	strb	r1, [r2, #0]
 8001dac:	001a      	movs	r2, r3
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	189a      	adds	r2, r3, r2
 8001db2:	230a      	movs	r3, #10
 8001db4:	18fb      	adds	r3, r7, r3
 8001db6:	7812      	ldrb	r2, [r2, #0]
 8001db8:	701a      	strb	r2, [r3, #0]
		numArgs  = args[index++];			// Number of args to follow
 8001dba:	183b      	adds	r3, r7, r0
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	183a      	adds	r2, r7, r0
 8001dc0:	1c59      	adds	r1, r3, #1
 8001dc2:	7011      	strb	r1, [r2, #0]
 8001dc4:	001a      	movs	r2, r3
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	189a      	adds	r2, r3, r2
 8001dca:	2609      	movs	r6, #9
 8001dcc:	19bb      	adds	r3, r7, r6
 8001dce:	7812      	ldrb	r2, [r2, #0]
 8001dd0:	701a      	strb	r2, [r3, #0]
		ms       = numArgs & ST_CMD_DELAY;	// If hibit set, delay follows args
 8001dd2:	19bb      	adds	r3, r7, r6
 8001dd4:	781b      	ldrb	r3, [r3, #0]
 8001dd6:	b29a      	uxth	r2, r3
 8001dd8:	210c      	movs	r1, #12
 8001dda:	187b      	adds	r3, r7, r1
 8001ddc:	2180      	movs	r1, #128	; 0x80
 8001dde:	400a      	ands	r2, r1
 8001de0:	801a      	strh	r2, [r3, #0]
		numArgs &= ~ST_CMD_DELAY;			// Mask out delay bit
 8001de2:	19bb      	adds	r3, r7, r6
 8001de4:	19ba      	adds	r2, r7, r6
 8001de6:	7812      	ldrb	r2, [r2, #0]
 8001de8:	217f      	movs	r1, #127	; 0x7f
 8001dea:	400a      	ands	r2, r1
 8001dec:	701a      	strb	r2, [r3, #0]
		sendCommand(cmd, &args[index], numArgs, hspi);
 8001dee:	0005      	movs	r5, r0
 8001df0:	183b      	adds	r3, r7, r0
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	687a      	ldr	r2, [r7, #4]
 8001df6:	18d1      	adds	r1, r2, r3
 8001df8:	19bb      	adds	r3, r7, r6
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	b29a      	uxth	r2, r3
 8001dfe:	683c      	ldr	r4, [r7, #0]
 8001e00:	230a      	movs	r3, #10
 8001e02:	18fb      	adds	r3, r7, r3
 8001e04:	7818      	ldrb	r0, [r3, #0]
 8001e06:	0023      	movs	r3, r4
 8001e08:	f7ff ff1a 	bl	8001c40 <sendCommand>
		index += numArgs;
 8001e0c:	0028      	movs	r0, r5
 8001e0e:	183b      	adds	r3, r7, r0
 8001e10:	1839      	adds	r1, r7, r0
 8001e12:	19ba      	adds	r2, r7, r6
 8001e14:	7809      	ldrb	r1, [r1, #0]
 8001e16:	7812      	ldrb	r2, [r2, #0]
 8001e18:	188a      	adds	r2, r1, r2
 8001e1a:	701a      	strb	r2, [r3, #0]

		if(ms) {
 8001e1c:	210c      	movs	r1, #12
 8001e1e:	187b      	adds	r3, r7, r1
 8001e20:	881b      	ldrh	r3, [r3, #0]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d01b      	beq.n	8001e5e <displayInit+0xee>
			ms = args[index++];			// Read post-command delay time (ms)
 8001e26:	220b      	movs	r2, #11
 8001e28:	18bb      	adds	r3, r7, r2
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	18ba      	adds	r2, r7, r2
 8001e2e:	1c59      	adds	r1, r3, #1
 8001e30:	7011      	strb	r1, [r2, #0]
 8001e32:	001a      	movs	r2, r3
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	189b      	adds	r3, r3, r2
 8001e38:	781a      	ldrb	r2, [r3, #0]
 8001e3a:	210c      	movs	r1, #12
 8001e3c:	187b      	adds	r3, r7, r1
 8001e3e:	801a      	strh	r2, [r3, #0]
			if(ms == 255) ms = 500;		// If 255, delay for 500 ms
 8001e40:	187b      	adds	r3, r7, r1
 8001e42:	881b      	ldrh	r3, [r3, #0]
 8001e44:	2bff      	cmp	r3, #255	; 0xff
 8001e46:	d104      	bne.n	8001e52 <displayInit+0xe2>
 8001e48:	230c      	movs	r3, #12
 8001e4a:	18fb      	adds	r3, r7, r3
 8001e4c:	22fa      	movs	r2, #250	; 0xfa
 8001e4e:	0052      	lsls	r2, r2, #1
 8001e50:	801a      	strh	r2, [r3, #0]
			HAL_Delay(ms);
 8001e52:	230c      	movs	r3, #12
 8001e54:	18fb      	adds	r3, r7, r3
 8001e56:	881b      	ldrh	r3, [r3, #0]
 8001e58:	0018      	movs	r0, r3
 8001e5a:	f004 ff51 	bl	8006d00 <HAL_Delay>
	while(numCommands--) {					// For each command...
 8001e5e:	220f      	movs	r2, #15
 8001e60:	18bb      	adds	r3, r7, r2
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	18ba      	adds	r2, r7, r2
 8001e66:	1e59      	subs	r1, r3, #1
 8001e68:	7011      	strb	r1, [r2, #0]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d198      	bne.n	8001da0 <displayInit+0x30>
		}
	}

	data = 0xC0;
 8001e6e:	2108      	movs	r1, #8
 8001e70:	187b      	adds	r3, r7, r1
 8001e72:	22c0      	movs	r2, #192	; 0xc0
 8001e74:	701a      	strb	r2, [r3, #0]
	sendCommand(ST77XX_MADCTL, &data, 1, hspi);
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	1879      	adds	r1, r7, r1
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	2036      	movs	r0, #54	; 0x36
 8001e7e:	f7ff fedf 	bl	8001c40 <sendCommand>
}
 8001e82:	46c0      	nop			; (mov r8, r8)
 8001e84:	46bd      	mov	sp, r7
 8001e86:	b005      	add	sp, #20
 8001e88:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001e8c <TFT_startup>:

void TFT_startup(SPI_HandleTypeDef *hspi) {
 8001e8c:	b590      	push	{r4, r7, lr}
 8001e8e:	b0a3      	sub	sp, #140	; 0x8c
 8001e90:	af02      	add	r7, sp, #8
 8001e92:	6078      	str	r0, [r7, #4]
	// array pulled from Adafruit's library for ST7735R driver
	uint8_t initCommands[] = {
 8001e94:	240c      	movs	r4, #12
 8001e96:	193a      	adds	r2, r7, r4
 8001e98:	4b14      	ldr	r3, [pc, #80]	; (8001eec <TFT_startup+0x60>)
 8001e9a:	0010      	movs	r0, r2
 8001e9c:	0019      	movs	r1, r3
 8001e9e:	2371      	movs	r3, #113	; 0x71
 8001ea0:	001a      	movs	r2, r3
 8001ea2:	f009 fd63 	bl	800b96c <memcpy>
			10,                         //     10 ms delay
		ST77XX_DISPON,    ST_CMD_DELAY, //  4: Main screen turn on, no args w/delay
			100	                        //     100 ms delay
	};

	displayInit(initCommands, hspi);
 8001ea6:	687a      	ldr	r2, [r7, #4]
 8001ea8:	193b      	adds	r3, r7, r4
 8001eaa:	0011      	movs	r1, r2
 8001eac:	0018      	movs	r0, r3
 8001eae:	f7ff ff5f 	bl	8001d70 <displayInit>
	setAddrWindow(0, 0, WIDTH, HEIGHT, hspi);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	9300      	str	r3, [sp, #0]
 8001eb6:	23a0      	movs	r3, #160	; 0xa0
 8001eb8:	2280      	movs	r2, #128	; 0x80
 8001eba:	2100      	movs	r1, #0
 8001ebc:	2000      	movs	r0, #0
 8001ebe:	f000 f821 	bl	8001f04 <setAddrWindow>

	// set the global variables
	cursorX = 0;
 8001ec2:	4b0b      	ldr	r3, [pc, #44]	; (8001ef0 <TFT_startup+0x64>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	701a      	strb	r2, [r3, #0]
	cursorY = 0;
 8001ec8:	4b0a      	ldr	r3, [pc, #40]	; (8001ef4 <TFT_startup+0x68>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	701a      	strb	r2, [r3, #0]
	textSize = 1;
 8001ece:	4b0a      	ldr	r3, [pc, #40]	; (8001ef8 <TFT_startup+0x6c>)
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	701a      	strb	r2, [r3, #0]
	textColor = ST77XX_BLACK;
 8001ed4:	4b09      	ldr	r3, [pc, #36]	; (8001efc <TFT_startup+0x70>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	801a      	strh	r2, [r3, #0]
	bg = ST77XX_WHITE;
 8001eda:	4b09      	ldr	r3, [pc, #36]	; (8001f00 <TFT_startup+0x74>)
 8001edc:	2201      	movs	r2, #1
 8001ede:	4252      	negs	r2, r2
 8001ee0:	801a      	strh	r2, [r3, #0]
}
 8001ee2:	46c0      	nop			; (mov r8, r8)
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	b021      	add	sp, #132	; 0x84
 8001ee8:	bd90      	pop	{r4, r7, pc}
 8001eea:	46c0      	nop			; (mov r8, r8)
 8001eec:	0800c1c0 	.word	0x0800c1c0
 8001ef0:	200000f4 	.word	0x200000f4
 8001ef4:	200000f5 	.word	0x200000f5
 8001ef8:	200000f6 	.word	0x200000f6
 8001efc:	200000f8 	.word	0x200000f8
 8001f00:	200000fa 	.word	0x200000fa

08001f04 <setAddrWindow>:

// draw something: set addr window -> write to ram memory
// sets specific area on display to write pixels to
// x and y for upper left corner, w for width, h for height
void setAddrWindow(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SPI_HandleTypeDef *hspi) {
 8001f04:	b5b0      	push	{r4, r5, r7, lr}
 8001f06:	b084      	sub	sp, #16
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	0005      	movs	r5, r0
 8001f0c:	000c      	movs	r4, r1
 8001f0e:	0010      	movs	r0, r2
 8001f10:	0019      	movs	r1, r3
 8001f12:	1dbb      	adds	r3, r7, #6
 8001f14:	1c2a      	adds	r2, r5, #0
 8001f16:	801a      	strh	r2, [r3, #0]
 8001f18:	1d3b      	adds	r3, r7, #4
 8001f1a:	1c22      	adds	r2, r4, #0
 8001f1c:	801a      	strh	r2, [r3, #0]
 8001f1e:	1cbb      	adds	r3, r7, #2
 8001f20:	1c02      	adds	r2, r0, #0
 8001f22:	801a      	strh	r2, [r3, #0]
 8001f24:	003b      	movs	r3, r7
 8001f26:	1c0a      	adds	r2, r1, #0
 8001f28:	801a      	strh	r2, [r3, #0]
	// building 32-bit window args
	uint8_t temp[4];
	temp[0] = (x & (0xFF00)) >> 8;
 8001f2a:	1dbb      	adds	r3, r7, #6
 8001f2c:	881b      	ldrh	r3, [r3, #0]
 8001f2e:	0a1b      	lsrs	r3, r3, #8
 8001f30:	b29b      	uxth	r3, r3
 8001f32:	b2da      	uxtb	r2, r3
 8001f34:	210c      	movs	r1, #12
 8001f36:	187b      	adds	r3, r7, r1
 8001f38:	701a      	strb	r2, [r3, #0]
	temp[1] = x & (0xFF);
 8001f3a:	1dbb      	adds	r3, r7, #6
 8001f3c:	881b      	ldrh	r3, [r3, #0]
 8001f3e:	b2da      	uxtb	r2, r3
 8001f40:	187b      	adds	r3, r7, r1
 8001f42:	705a      	strb	r2, [r3, #1]
	temp[2] = ((x+w-1) & (0xFF00)) >> 8;
 8001f44:	1dbb      	adds	r3, r7, #6
 8001f46:	881a      	ldrh	r2, [r3, #0]
 8001f48:	1cbb      	adds	r3, r7, #2
 8001f4a:	881b      	ldrh	r3, [r3, #0]
 8001f4c:	18d3      	adds	r3, r2, r3
 8001f4e:	3b01      	subs	r3, #1
 8001f50:	121b      	asrs	r3, r3, #8
 8001f52:	b2da      	uxtb	r2, r3
 8001f54:	187b      	adds	r3, r7, r1
 8001f56:	709a      	strb	r2, [r3, #2]
	temp[3] = (x+w-1) & (0xFF);
 8001f58:	1dbb      	adds	r3, r7, #6
 8001f5a:	881b      	ldrh	r3, [r3, #0]
 8001f5c:	b2da      	uxtb	r2, r3
 8001f5e:	1cbb      	adds	r3, r7, #2
 8001f60:	881b      	ldrh	r3, [r3, #0]
 8001f62:	b2db      	uxtb	r3, r3
 8001f64:	18d3      	adds	r3, r2, r3
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	3b01      	subs	r3, #1
 8001f6a:	b2da      	uxtb	r2, r3
 8001f6c:	187b      	adds	r3, r7, r1
 8001f6e:	70da      	strb	r2, [r3, #3]
	sendCommand(ST77XX_CASET, temp, 4, hspi);
 8001f70:	6a3b      	ldr	r3, [r7, #32]
 8001f72:	000c      	movs	r4, r1
 8001f74:	1879      	adds	r1, r7, r1
 8001f76:	2204      	movs	r2, #4
 8001f78:	202a      	movs	r0, #42	; 0x2a
 8001f7a:	f7ff fe61 	bl	8001c40 <sendCommand>

	temp[0] = (y & (0xFF00)) >> 8;
 8001f7e:	1d3b      	adds	r3, r7, #4
 8001f80:	881b      	ldrh	r3, [r3, #0]
 8001f82:	0a1b      	lsrs	r3, r3, #8
 8001f84:	b29b      	uxth	r3, r3
 8001f86:	b2da      	uxtb	r2, r3
 8001f88:	0021      	movs	r1, r4
 8001f8a:	187b      	adds	r3, r7, r1
 8001f8c:	701a      	strb	r2, [r3, #0]
	temp[1] = y & (0xFF);
 8001f8e:	1d3b      	adds	r3, r7, #4
 8001f90:	881b      	ldrh	r3, [r3, #0]
 8001f92:	b2da      	uxtb	r2, r3
 8001f94:	187b      	adds	r3, r7, r1
 8001f96:	705a      	strb	r2, [r3, #1]
	temp[2] = ((y+h-1) & (0xFF00)) >> 8;
 8001f98:	1d3b      	adds	r3, r7, #4
 8001f9a:	881a      	ldrh	r2, [r3, #0]
 8001f9c:	003b      	movs	r3, r7
 8001f9e:	881b      	ldrh	r3, [r3, #0]
 8001fa0:	18d3      	adds	r3, r2, r3
 8001fa2:	3b01      	subs	r3, #1
 8001fa4:	121b      	asrs	r3, r3, #8
 8001fa6:	b2da      	uxtb	r2, r3
 8001fa8:	187b      	adds	r3, r7, r1
 8001faa:	709a      	strb	r2, [r3, #2]
	temp[3] = (y+h-1) & (0x00FF);
 8001fac:	1d3b      	adds	r3, r7, #4
 8001fae:	881b      	ldrh	r3, [r3, #0]
 8001fb0:	b2da      	uxtb	r2, r3
 8001fb2:	003b      	movs	r3, r7
 8001fb4:	881b      	ldrh	r3, [r3, #0]
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	18d3      	adds	r3, r2, r3
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	3b01      	subs	r3, #1
 8001fbe:	b2da      	uxtb	r2, r3
 8001fc0:	187b      	adds	r3, r7, r1
 8001fc2:	70da      	strb	r2, [r3, #3]
	sendCommand(ST77XX_RASET, temp, 4, hspi);
 8001fc4:	6a3b      	ldr	r3, [r7, #32]
 8001fc6:	1879      	adds	r1, r7, r1
 8001fc8:	2204      	movs	r2, #4
 8001fca:	202b      	movs	r0, #43	; 0x2b
 8001fcc:	f7ff fe38 	bl	8001c40 <sendCommand>
}
 8001fd0:	46c0      	nop			; (mov r8, r8)
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	b004      	add	sp, #16
 8001fd6:	bdb0      	pop	{r4, r5, r7, pc}

08001fd8 <turnDisplayOn>:

// sends turn on/off command
void turnDisplayOn(SPI_HandleTypeDef *hspi) {sendCommand(ST77XX_DISPON, NULL, 0, hspi);}
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	2100      	movs	r1, #0
 8001fe6:	2029      	movs	r0, #41	; 0x29
 8001fe8:	f7ff fe2a 	bl	8001c40 <sendCommand>
 8001fec:	46c0      	nop			; (mov r8, r8)
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	b002      	add	sp, #8
 8001ff2:	bd80      	pop	{r7, pc}

08001ff4 <colorFixer>:
// 8-bit spi bus wants msb first; in array, lowest index is sent first
// because ARM is little-endian
//   for 16-bit value, it sends lower byte before upper byte
//   resulting in device thinking lower byte is upper byte
// this switches byte order around
uint16_t colorFixer(uint16_t color) {
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b084      	sub	sp, #16
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	0002      	movs	r2, r0
 8001ffc:	1dbb      	adds	r3, r7, #6
 8001ffe:	801a      	strh	r2, [r3, #0]
	uint8_t a = color & 0xFF;
 8002000:	210f      	movs	r1, #15
 8002002:	187b      	adds	r3, r7, r1
 8002004:	1dba      	adds	r2, r7, #6
 8002006:	8812      	ldrh	r2, [r2, #0]
 8002008:	701a      	strb	r2, [r3, #0]
	uint8_t b = (color & 0xFF00) >> 8;
 800200a:	1dbb      	adds	r3, r7, #6
 800200c:	881b      	ldrh	r3, [r3, #0]
 800200e:	0a1b      	lsrs	r3, r3, #8
 8002010:	b29a      	uxth	r2, r3
 8002012:	200e      	movs	r0, #14
 8002014:	183b      	adds	r3, r7, r0
 8002016:	701a      	strb	r2, [r3, #0]
	uint16_t ret = (a << 8) | b;
 8002018:	187b      	adds	r3, r7, r1
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	021b      	lsls	r3, r3, #8
 800201e:	b21a      	sxth	r2, r3
 8002020:	183b      	adds	r3, r7, r0
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	b21b      	sxth	r3, r3
 8002026:	4313      	orrs	r3, r2
 8002028:	b21a      	sxth	r2, r3
 800202a:	210c      	movs	r1, #12
 800202c:	187b      	adds	r3, r7, r1
 800202e:	801a      	strh	r2, [r3, #0]

	return ret;
 8002030:	187b      	adds	r3, r7, r1
 8002032:	881b      	ldrh	r3, [r3, #0]
}
 8002034:	0018      	movs	r0, r3
 8002036:	46bd      	mov	sp, r7
 8002038:	b004      	add	sp, #16
 800203a:	bd80      	pop	{r7, pc}

0800203c <drawHLine>:
	setAddrWindow(x, y, 1, 1, hspi);
	sendColor(color, 1, hspi);
}

// draw a horizontal line. coordinates are for left point
void drawHLine(uint8_t x, uint8_t y, uint8_t size, uint16_t color, SPI_HandleTypeDef *hspi) {
 800203c:	b5b0      	push	{r4, r5, r7, lr}
 800203e:	b084      	sub	sp, #16
 8002040:	af02      	add	r7, sp, #8
 8002042:	0005      	movs	r5, r0
 8002044:	000c      	movs	r4, r1
 8002046:	0010      	movs	r0, r2
 8002048:	0019      	movs	r1, r3
 800204a:	1dfb      	adds	r3, r7, #7
 800204c:	1c2a      	adds	r2, r5, #0
 800204e:	701a      	strb	r2, [r3, #0]
 8002050:	1dbb      	adds	r3, r7, #6
 8002052:	1c22      	adds	r2, r4, #0
 8002054:	701a      	strb	r2, [r3, #0]
 8002056:	1d7b      	adds	r3, r7, #5
 8002058:	1c02      	adds	r2, r0, #0
 800205a:	701a      	strb	r2, [r3, #0]
 800205c:	1cbb      	adds	r3, r7, #2
 800205e:	1c0a      	adds	r2, r1, #0
 8002060:	801a      	strh	r2, [r3, #0]
	// bounds checking
	if (x < 0) x = 0;						// don't set x out of bounds
	if (x > WIDTH) x = WIDTH;
 8002062:	1dfb      	adds	r3, r7, #7
 8002064:	781b      	ldrb	r3, [r3, #0]
 8002066:	2b80      	cmp	r3, #128	; 0x80
 8002068:	d902      	bls.n	8002070 <drawHLine+0x34>
 800206a:	1dfb      	adds	r3, r7, #7
 800206c:	2280      	movs	r2, #128	; 0x80
 800206e:	701a      	strb	r2, [r3, #0]
	if (x+size > WIDTH) size = WIDTH-x;		// don't set size so line draws out of bounds
 8002070:	1dfb      	adds	r3, r7, #7
 8002072:	781a      	ldrb	r2, [r3, #0]
 8002074:	1d7b      	adds	r3, r7, #5
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	18d3      	adds	r3, r2, r3
 800207a:	2b80      	cmp	r3, #128	; 0x80
 800207c:	dd06      	ble.n	800208c <drawHLine+0x50>
 800207e:	1d7b      	adds	r3, r7, #5
 8002080:	1dfa      	adds	r2, r7, #7
 8002082:	7812      	ldrb	r2, [r2, #0]
 8002084:	2180      	movs	r1, #128	; 0x80
 8002086:	4249      	negs	r1, r1
 8002088:	1a8a      	subs	r2, r1, r2
 800208a:	701a      	strb	r2, [r3, #0]
	if (x+size < 0) size = 0-x;
	if ((y > HEIGHT) || (y < 0)) return;	// don't draw if y is out of bounds
 800208c:	1dbb      	adds	r3, r7, #6
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	2ba0      	cmp	r3, #160	; 0xa0
 8002092:	d817      	bhi.n	80020c4 <drawHLine+0x88>

	setAddrWindow(x, y, size, 1, hspi);
 8002094:	1dfb      	adds	r3, r7, #7
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	b298      	uxth	r0, r3
 800209a:	1dbb      	adds	r3, r7, #6
 800209c:	781b      	ldrb	r3, [r3, #0]
 800209e:	b299      	uxth	r1, r3
 80020a0:	1d7b      	adds	r3, r7, #5
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	b29a      	uxth	r2, r3
 80020a6:	69bb      	ldr	r3, [r7, #24]
 80020a8:	9300      	str	r3, [sp, #0]
 80020aa:	2301      	movs	r3, #1
 80020ac:	f7ff ff2a 	bl	8001f04 <setAddrWindow>
	sendColor(color, size, hspi);
 80020b0:	1d7b      	adds	r3, r7, #5
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	b299      	uxth	r1, r3
 80020b6:	69ba      	ldr	r2, [r7, #24]
 80020b8:	1cbb      	adds	r3, r7, #2
 80020ba:	881b      	ldrh	r3, [r3, #0]
 80020bc:	0018      	movs	r0, r3
 80020be:	f7ff fdf3 	bl	8001ca8 <sendColor>
 80020c2:	e000      	b.n	80020c6 <drawHLine+0x8a>
	if ((y > HEIGHT) || (y < 0)) return;	// don't draw if y is out of bounds
 80020c4:	46c0      	nop			; (mov r8, r8)
}
 80020c6:	46bd      	mov	sp, r7
 80020c8:	b002      	add	sp, #8
 80020ca:	bdb0      	pop	{r4, r5, r7, pc}

080020cc <drawVLine>:

// draws a vertical line. coordinates are for top point
void drawVLine(uint8_t x, uint8_t y, uint8_t size, uint16_t color, SPI_HandleTypeDef *hspi) {
 80020cc:	b5b0      	push	{r4, r5, r7, lr}
 80020ce:	b084      	sub	sp, #16
 80020d0:	af02      	add	r7, sp, #8
 80020d2:	0005      	movs	r5, r0
 80020d4:	000c      	movs	r4, r1
 80020d6:	0010      	movs	r0, r2
 80020d8:	0019      	movs	r1, r3
 80020da:	1dfb      	adds	r3, r7, #7
 80020dc:	1c2a      	adds	r2, r5, #0
 80020de:	701a      	strb	r2, [r3, #0]
 80020e0:	1dbb      	adds	r3, r7, #6
 80020e2:	1c22      	adds	r2, r4, #0
 80020e4:	701a      	strb	r2, [r3, #0]
 80020e6:	1d7b      	adds	r3, r7, #5
 80020e8:	1c02      	adds	r2, r0, #0
 80020ea:	701a      	strb	r2, [r3, #0]
 80020ec:	1cbb      	adds	r3, r7, #2
 80020ee:	1c0a      	adds	r2, r1, #0
 80020f0:	801a      	strh	r2, [r3, #0]
	// bounds checking
	if (y < 0) y = 0;						// don't set y out of bounds
	if (y > HEIGHT) y = HEIGHT;
 80020f2:	1dbb      	adds	r3, r7, #6
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	2ba0      	cmp	r3, #160	; 0xa0
 80020f8:	d902      	bls.n	8002100 <drawVLine+0x34>
 80020fa:	1dbb      	adds	r3, r7, #6
 80020fc:	22a0      	movs	r2, #160	; 0xa0
 80020fe:	701a      	strb	r2, [r3, #0]
	if (y+size > HEIGHT) size = HEIGHT-y;	// don't set size so line draws out of bounds
 8002100:	1dbb      	adds	r3, r7, #6
 8002102:	781a      	ldrb	r2, [r3, #0]
 8002104:	1d7b      	adds	r3, r7, #5
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	18d3      	adds	r3, r2, r3
 800210a:	2ba0      	cmp	r3, #160	; 0xa0
 800210c:	dd06      	ble.n	800211c <drawVLine+0x50>
 800210e:	1d7b      	adds	r3, r7, #5
 8002110:	1dba      	adds	r2, r7, #6
 8002112:	7812      	ldrb	r2, [r2, #0]
 8002114:	2160      	movs	r1, #96	; 0x60
 8002116:	4249      	negs	r1, r1
 8002118:	1a8a      	subs	r2, r1, r2
 800211a:	701a      	strb	r2, [r3, #0]
	if (y+size < 0) size = 0-y;
	if ((x > WIDTH) || (x < 0)) return;		// don't draw if x is out of bounds
 800211c:	1dfb      	adds	r3, r7, #7
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	2b80      	cmp	r3, #128	; 0x80
 8002122:	d818      	bhi.n	8002156 <drawVLine+0x8a>

	setAddrWindow(x, y, 1, size, hspi);
 8002124:	1dfb      	adds	r3, r7, #7
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	b298      	uxth	r0, r3
 800212a:	1dbb      	adds	r3, r7, #6
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	b299      	uxth	r1, r3
 8002130:	1d7b      	adds	r3, r7, #5
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	b29a      	uxth	r2, r3
 8002136:	69bb      	ldr	r3, [r7, #24]
 8002138:	9300      	str	r3, [sp, #0]
 800213a:	0013      	movs	r3, r2
 800213c:	2201      	movs	r2, #1
 800213e:	f7ff fee1 	bl	8001f04 <setAddrWindow>
	sendColor(color, size, hspi);
 8002142:	1d7b      	adds	r3, r7, #5
 8002144:	781b      	ldrb	r3, [r3, #0]
 8002146:	b299      	uxth	r1, r3
 8002148:	69ba      	ldr	r2, [r7, #24]
 800214a:	1cbb      	adds	r3, r7, #2
 800214c:	881b      	ldrh	r3, [r3, #0]
 800214e:	0018      	movs	r0, r3
 8002150:	f7ff fdaa 	bl	8001ca8 <sendColor>
 8002154:	e000      	b.n	8002158 <drawVLine+0x8c>
	if ((x > WIDTH) || (x < 0)) return;		// don't draw if x is out of bounds
 8002156:	46c0      	nop			; (mov r8, r8)
}
 8002158:	46bd      	mov	sp, r7
 800215a:	b002      	add	sp, #8
 800215c:	bdb0      	pop	{r4, r5, r7, pc}

0800215e <drawBuffer>:

// draws on a specific region with input 16-bit buffer
void drawBuffer(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t *buffer, uint16_t bufferSize, SPI_HandleTypeDef *hspi) {
 800215e:	b5b0      	push	{r4, r5, r7, lr}
 8002160:	b084      	sub	sp, #16
 8002162:	af02      	add	r7, sp, #8
 8002164:	0005      	movs	r5, r0
 8002166:	000c      	movs	r4, r1
 8002168:	0010      	movs	r0, r2
 800216a:	0019      	movs	r1, r3
 800216c:	1dfb      	adds	r3, r7, #7
 800216e:	1c2a      	adds	r2, r5, #0
 8002170:	701a      	strb	r2, [r3, #0]
 8002172:	1dbb      	adds	r3, r7, #6
 8002174:	1c22      	adds	r2, r4, #0
 8002176:	701a      	strb	r2, [r3, #0]
 8002178:	1d7b      	adds	r3, r7, #5
 800217a:	1c02      	adds	r2, r0, #0
 800217c:	701a      	strb	r2, [r3, #0]
 800217e:	1d3b      	adds	r3, r7, #4
 8002180:	1c0a      	adds	r2, r1, #0
 8002182:	701a      	strb	r2, [r3, #0]
	if (x+w > WIDTH || y+h > HEIGHT) return;
 8002184:	1dfb      	adds	r3, r7, #7
 8002186:	781a      	ldrb	r2, [r3, #0]
 8002188:	1d7b      	adds	r3, r7, #5
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	18d3      	adds	r3, r2, r3
 800218e:	2b80      	cmp	r3, #128	; 0x80
 8002190:	dc29      	bgt.n	80021e6 <drawBuffer+0x88>
 8002192:	1dbb      	adds	r3, r7, #6
 8002194:	781a      	ldrb	r2, [r3, #0]
 8002196:	1d3b      	adds	r3, r7, #4
 8002198:	781b      	ldrb	r3, [r3, #0]
 800219a:	18d3      	adds	r3, r2, r3
 800219c:	2ba0      	cmp	r3, #160	; 0xa0
 800219e:	dc22      	bgt.n	80021e6 <drawBuffer+0x88>

	// also don't call this with buffer size too big bc there's not enough ram for all pixels of display
	if (bufferSize > 10240) return;			// about 1/2 of total system ram
 80021a0:	231c      	movs	r3, #28
 80021a2:	18fb      	adds	r3, r7, r3
 80021a4:	881a      	ldrh	r2, [r3, #0]
 80021a6:	23a0      	movs	r3, #160	; 0xa0
 80021a8:	019b      	lsls	r3, r3, #6
 80021aa:	429a      	cmp	r2, r3
 80021ac:	d81d      	bhi.n	80021ea <drawBuffer+0x8c>

	setAddrWindow(x, y, w, h, hspi);
 80021ae:	1dfb      	adds	r3, r7, #7
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	b298      	uxth	r0, r3
 80021b4:	1dbb      	adds	r3, r7, #6
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	b299      	uxth	r1, r3
 80021ba:	1d7b      	adds	r3, r7, #5
 80021bc:	781b      	ldrb	r3, [r3, #0]
 80021be:	b29a      	uxth	r2, r3
 80021c0:	1d3b      	adds	r3, r7, #4
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	b29c      	uxth	r4, r3
 80021c6:	6a3b      	ldr	r3, [r7, #32]
 80021c8:	9300      	str	r3, [sp, #0]
 80021ca:	0023      	movs	r3, r4
 80021cc:	f7ff fe9a 	bl	8001f04 <setAddrWindow>
	sendCommand(ST77XX_RAMWR, buffer, bufferSize*2, hspi);
 80021d0:	231c      	movs	r3, #28
 80021d2:	18fb      	adds	r3, r7, r3
 80021d4:	881b      	ldrh	r3, [r3, #0]
 80021d6:	18db      	adds	r3, r3, r3
 80021d8:	b29a      	uxth	r2, r3
 80021da:	6a3b      	ldr	r3, [r7, #32]
 80021dc:	69b9      	ldr	r1, [r7, #24]
 80021de:	202c      	movs	r0, #44	; 0x2c
 80021e0:	f7ff fd2e 	bl	8001c40 <sendCommand>
 80021e4:	e002      	b.n	80021ec <drawBuffer+0x8e>
	if (x+w > WIDTH || y+h > HEIGHT) return;
 80021e6:	46c0      	nop			; (mov r8, r8)
 80021e8:	e000      	b.n	80021ec <drawBuffer+0x8e>
	if (bufferSize > 10240) return;			// about 1/2 of total system ram
 80021ea:	46c0      	nop			; (mov r8, r8)
}
 80021ec:	46bd      	mov	sp, r7
 80021ee:	b002      	add	sp, #8
 80021f0:	bdb0      	pop	{r4, r5, r7, pc}

080021f2 <drawRect>:
		}
	}
}

// draw an empty rectangle
void drawRect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint16_t color, SPI_HandleTypeDef *hspi) {
 80021f2:	b5b0      	push	{r4, r5, r7, lr}
 80021f4:	b084      	sub	sp, #16
 80021f6:	af02      	add	r7, sp, #8
 80021f8:	0005      	movs	r5, r0
 80021fa:	000c      	movs	r4, r1
 80021fc:	0010      	movs	r0, r2
 80021fe:	0019      	movs	r1, r3
 8002200:	1dfb      	adds	r3, r7, #7
 8002202:	1c2a      	adds	r2, r5, #0
 8002204:	701a      	strb	r2, [r3, #0]
 8002206:	1dbb      	adds	r3, r7, #6
 8002208:	1c22      	adds	r2, r4, #0
 800220a:	701a      	strb	r2, [r3, #0]
 800220c:	1d7b      	adds	r3, r7, #5
 800220e:	1c02      	adds	r2, r0, #0
 8002210:	701a      	strb	r2, [r3, #0]
 8002212:	1d3b      	adds	r3, r7, #4
 8002214:	1c0a      	adds	r2, r1, #0
 8002216:	701a      	strb	r2, [r3, #0]
	drawHLine(x, y, w, color, hspi);
 8002218:	2518      	movs	r5, #24
 800221a:	197b      	adds	r3, r7, r5
 800221c:	881c      	ldrh	r4, [r3, #0]
 800221e:	1d7b      	adds	r3, r7, #5
 8002220:	781a      	ldrb	r2, [r3, #0]
 8002222:	1dbb      	adds	r3, r7, #6
 8002224:	7819      	ldrb	r1, [r3, #0]
 8002226:	1dfb      	adds	r3, r7, #7
 8002228:	7818      	ldrb	r0, [r3, #0]
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	9300      	str	r3, [sp, #0]
 800222e:	0023      	movs	r3, r4
 8002230:	f7ff ff04 	bl	800203c <drawHLine>
	drawHLine(x, y+h-1, w, color, hspi);
 8002234:	1dba      	adds	r2, r7, #6
 8002236:	1d3b      	adds	r3, r7, #4
 8002238:	7812      	ldrb	r2, [r2, #0]
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	18d3      	adds	r3, r2, r3
 800223e:	b2db      	uxtb	r3, r3
 8002240:	3b01      	subs	r3, #1
 8002242:	b2d9      	uxtb	r1, r3
 8002244:	197b      	adds	r3, r7, r5
 8002246:	881c      	ldrh	r4, [r3, #0]
 8002248:	1d7b      	adds	r3, r7, #5
 800224a:	781a      	ldrb	r2, [r3, #0]
 800224c:	1dfb      	adds	r3, r7, #7
 800224e:	7818      	ldrb	r0, [r3, #0]
 8002250:	69fb      	ldr	r3, [r7, #28]
 8002252:	9300      	str	r3, [sp, #0]
 8002254:	0023      	movs	r3, r4
 8002256:	f7ff fef1 	bl	800203c <drawHLine>
	drawVLine(x, y, h, color, hspi);
 800225a:	197b      	adds	r3, r7, r5
 800225c:	881c      	ldrh	r4, [r3, #0]
 800225e:	1d3b      	adds	r3, r7, #4
 8002260:	781a      	ldrb	r2, [r3, #0]
 8002262:	1dbb      	adds	r3, r7, #6
 8002264:	7819      	ldrb	r1, [r3, #0]
 8002266:	1dfb      	adds	r3, r7, #7
 8002268:	7818      	ldrb	r0, [r3, #0]
 800226a:	69fb      	ldr	r3, [r7, #28]
 800226c:	9300      	str	r3, [sp, #0]
 800226e:	0023      	movs	r3, r4
 8002270:	f7ff ff2c 	bl	80020cc <drawVLine>
	drawVLine(x+w-1, y, h, color, hspi);
 8002274:	1dfa      	adds	r2, r7, #7
 8002276:	1d7b      	adds	r3, r7, #5
 8002278:	7812      	ldrb	r2, [r2, #0]
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	18d3      	adds	r3, r2, r3
 800227e:	b2db      	uxtb	r3, r3
 8002280:	3b01      	subs	r3, #1
 8002282:	b2d8      	uxtb	r0, r3
 8002284:	197b      	adds	r3, r7, r5
 8002286:	881c      	ldrh	r4, [r3, #0]
 8002288:	1d3b      	adds	r3, r7, #4
 800228a:	781a      	ldrb	r2, [r3, #0]
 800228c:	1dbb      	adds	r3, r7, #6
 800228e:	7819      	ldrb	r1, [r3, #0]
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	9300      	str	r3, [sp, #0]
 8002294:	0023      	movs	r3, r4
 8002296:	f7ff ff19 	bl	80020cc <drawVLine>
}
 800229a:	46c0      	nop			; (mov r8, r8)
 800229c:	46bd      	mov	sp, r7
 800229e:	b002      	add	sp, #8
 80022a0:	bdb0      	pop	{r4, r5, r7, pc}

080022a2 <fillRect>:

// draw a filled rectangle
void fillRect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint16_t color, SPI_HandleTypeDef *hspi) {
 80022a2:	b5b0      	push	{r4, r5, r7, lr}
 80022a4:	b084      	sub	sp, #16
 80022a6:	af02      	add	r7, sp, #8
 80022a8:	0005      	movs	r5, r0
 80022aa:	000c      	movs	r4, r1
 80022ac:	0010      	movs	r0, r2
 80022ae:	0019      	movs	r1, r3
 80022b0:	1dfb      	adds	r3, r7, #7
 80022b2:	1c2a      	adds	r2, r5, #0
 80022b4:	701a      	strb	r2, [r3, #0]
 80022b6:	1dbb      	adds	r3, r7, #6
 80022b8:	1c22      	adds	r2, r4, #0
 80022ba:	701a      	strb	r2, [r3, #0]
 80022bc:	1d7b      	adds	r3, r7, #5
 80022be:	1c02      	adds	r2, r0, #0
 80022c0:	701a      	strb	r2, [r3, #0]
 80022c2:	1d3b      	adds	r3, r7, #4
 80022c4:	1c0a      	adds	r2, r1, #0
 80022c6:	701a      	strb	r2, [r3, #0]
	setAddrWindow(x, y, w, h, hspi);
 80022c8:	1dfb      	adds	r3, r7, #7
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	b298      	uxth	r0, r3
 80022ce:	1dbb      	adds	r3, r7, #6
 80022d0:	781b      	ldrb	r3, [r3, #0]
 80022d2:	b299      	uxth	r1, r3
 80022d4:	1d7b      	adds	r3, r7, #5
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	b29a      	uxth	r2, r3
 80022da:	1d3b      	adds	r3, r7, #4
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	b29c      	uxth	r4, r3
 80022e0:	69fb      	ldr	r3, [r7, #28]
 80022e2:	9300      	str	r3, [sp, #0]
 80022e4:	0023      	movs	r3, r4
 80022e6:	f7ff fe0d 	bl	8001f04 <setAddrWindow>
	sendColor(color, w*h, hspi);
 80022ea:	1d7b      	adds	r3, r7, #5
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	b29b      	uxth	r3, r3
 80022f0:	1d3a      	adds	r2, r7, #4
 80022f2:	7812      	ldrb	r2, [r2, #0]
 80022f4:	b292      	uxth	r2, r2
 80022f6:	4353      	muls	r3, r2
 80022f8:	b299      	uxth	r1, r3
 80022fa:	69fa      	ldr	r2, [r7, #28]
 80022fc:	2318      	movs	r3, #24
 80022fe:	18fb      	adds	r3, r7, r3
 8002300:	881b      	ldrh	r3, [r3, #0]
 8002302:	0018      	movs	r0, r3
 8002304:	f7ff fcd0 	bl	8001ca8 <sendColor>
//	for (int i = 0; i < h; i++) {
//		drawHLine(x, y+i, w, color, hspi);
//	}
}
 8002308:	46c0      	nop			; (mov r8, r8)
 800230a:	46bd      	mov	sp, r7
 800230c:	b002      	add	sp, #8
 800230e:	bdb0      	pop	{r4, r5, r7, pc}

08002310 <fillScreen>:

// a big rectangle, but for the whole screen
void fillScreen(uint16_t color, SPI_HandleTypeDef *hspi) {
 8002310:	b590      	push	{r4, r7, lr}
 8002312:	b087      	sub	sp, #28
 8002314:	af02      	add	r7, sp, #8
 8002316:	0002      	movs	r2, r0
 8002318:	6039      	str	r1, [r7, #0]
 800231a:	1dbb      	adds	r3, r7, #6
 800231c:	801a      	strh	r2, [r3, #0]
//	setAddrWindow(0, 0, WIDTH, HEIGHT, hspi);
//	sendColor(color, WIDTH*HEIGHT, hspi);

	int i, k;
	static int j;
	uint16_t colors[4] = {ST77XX_BLUE, ST77XX_RED, ST77XX_BLACK, ST77XX_WHITE};
 800231e:	2108      	movs	r1, #8
 8002320:	187b      	adds	r3, r7, r1
 8002322:	4a11      	ldr	r2, [pc, #68]	; (8002368 <fillScreen+0x58>)
 8002324:	ca11      	ldmia	r2!, {r0, r4}
 8002326:	c311      	stmia	r3!, {r0, r4}
	fillRect(0, 0, WIDTH, HEIGHT, colors[j], hspi);
 8002328:	4b10      	ldr	r3, [pc, #64]	; (800236c <fillScreen+0x5c>)
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	187b      	adds	r3, r7, r1
 800232e:	0052      	lsls	r2, r2, #1
 8002330:	5ad3      	ldrh	r3, [r2, r3]
 8002332:	683a      	ldr	r2, [r7, #0]
 8002334:	9201      	str	r2, [sp, #4]
 8002336:	9300      	str	r3, [sp, #0]
 8002338:	23a0      	movs	r3, #160	; 0xa0
 800233a:	2280      	movs	r2, #128	; 0x80
 800233c:	2100      	movs	r1, #0
 800233e:	2000      	movs	r0, #0
 8002340:	f7ff ffaf 	bl	80022a2 <fillRect>
//	for (i = 0; i < HEIGHT; i++) {
//		for (k = 0; k < WIDTH; k++) {
//			drawPixel(k, i, colors[j], hspi);
//		}
//	}
	j = (j+1)%4;
 8002344:	4b09      	ldr	r3, [pc, #36]	; (800236c <fillScreen+0x5c>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	3301      	adds	r3, #1
 800234a:	4a09      	ldr	r2, [pc, #36]	; (8002370 <fillScreen+0x60>)
 800234c:	4013      	ands	r3, r2
 800234e:	d504      	bpl.n	800235a <fillScreen+0x4a>
 8002350:	3b01      	subs	r3, #1
 8002352:	2204      	movs	r2, #4
 8002354:	4252      	negs	r2, r2
 8002356:	4313      	orrs	r3, r2
 8002358:	3301      	adds	r3, #1
 800235a:	001a      	movs	r2, r3
 800235c:	4b03      	ldr	r3, [pc, #12]	; (800236c <fillScreen+0x5c>)
 800235e:	601a      	str	r2, [r3, #0]
}
 8002360:	46c0      	nop			; (mov r8, r8)
 8002362:	46bd      	mov	sp, r7
 8002364:	b005      	add	sp, #20
 8002366:	bd90      	pop	{r4, r7, pc}
 8002368:	0800c234 	.word	0x0800c234
 800236c:	20000100 	.word	0x20000100
 8002370:	80000003 	.word	0x80000003

08002374 <clearScreen>:

void clearScreen(uint16_t backgroundColor, SPI_HandleTypeDef *hspi) {
 8002374:	b580      	push	{r7, lr}
 8002376:	b082      	sub	sp, #8
 8002378:	af00      	add	r7, sp, #0
 800237a:	0002      	movs	r2, r0
 800237c:	6039      	str	r1, [r7, #0]
 800237e:	1dbb      	adds	r3, r7, #6
 8002380:	801a      	strh	r2, [r3, #0]
	bg = backgroundColor;
 8002382:	4b07      	ldr	r3, [pc, #28]	; (80023a0 <clearScreen+0x2c>)
 8002384:	1dba      	adds	r2, r7, #6
 8002386:	8812      	ldrh	r2, [r2, #0]
 8002388:	801a      	strh	r2, [r3, #0]
	fillScreen(backgroundColor, hspi);
 800238a:	683a      	ldr	r2, [r7, #0]
 800238c:	1dbb      	adds	r3, r7, #6
 800238e:	881b      	ldrh	r3, [r3, #0]
 8002390:	0011      	movs	r1, r2
 8002392:	0018      	movs	r0, r3
 8002394:	f7ff ffbc 	bl	8002310 <fillScreen>
}
 8002398:	46c0      	nop			; (mov r8, r8)
 800239a:	46bd      	mov	sp, r7
 800239c:	b002      	add	sp, #8
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	200000fa 	.word	0x200000fa

080023a4 <drawChar>:
// ---- end of basic shapes and lines ----

// ---- text functions ----
// draw a character. based on 6x8 font, but scalable
// instead of drawing pixel by pixel, function builds a buffer first and then sends
void drawChar(uint8_t ch, SPI_HandleTypeDef *hspi) {
 80023a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023a6:	b095      	sub	sp, #84	; 0x54
 80023a8:	af04      	add	r7, sp, #16
 80023aa:	61b9      	str	r1, [r7, #24]
 80023ac:	221f      	movs	r2, #31
 80023ae:	18ba      	adds	r2, r7, r2
 80023b0:	1c01      	adds	r1, r0, #0
 80023b2:	7011      	strb	r1, [r2, #0]
 80023b4:	466a      	mov	r2, sp
 80023b6:	607a      	str	r2, [r7, #4]
	uint16_t bufferSize = 6*8*textSize*textSize;
 80023b8:	4abe      	ldr	r2, [pc, #760]	; (80026b4 <drawChar+0x310>)
 80023ba:	7812      	ldrb	r2, [r2, #0]
 80023bc:	b292      	uxth	r2, r2
 80023be:	49bd      	ldr	r1, [pc, #756]	; (80026b4 <drawChar+0x310>)
 80023c0:	7809      	ldrb	r1, [r1, #0]
 80023c2:	b289      	uxth	r1, r1
 80023c4:	434a      	muls	r2, r1
 80023c6:	b291      	uxth	r1, r2
 80023c8:	221a      	movs	r2, #26
 80023ca:	2018      	movs	r0, #24
 80023cc:	4684      	mov	ip, r0
 80023ce:	44bc      	add	ip, r7
 80023d0:	4462      	add	r2, ip
 80023d2:	2030      	movs	r0, #48	; 0x30
 80023d4:	4341      	muls	r1, r0
 80023d6:	8011      	strh	r1, [r2, #0]
	uint16_t buffer[bufferSize];
 80023d8:	221a      	movs	r2, #26
 80023da:	2118      	movs	r1, #24
 80023dc:	468c      	mov	ip, r1
 80023de:	44bc      	add	ip, r7
 80023e0:	4462      	add	r2, ip
 80023e2:	8812      	ldrh	r2, [r2, #0]
 80023e4:	0011      	movs	r1, r2
 80023e6:	3901      	subs	r1, #1
 80023e8:	62f9      	str	r1, [r7, #44]	; 0x2c
 80023ea:	613a      	str	r2, [r7, #16]
 80023ec:	2100      	movs	r1, #0
 80023ee:	6179      	str	r1, [r7, #20]
 80023f0:	6939      	ldr	r1, [r7, #16]
 80023f2:	0f09      	lsrs	r1, r1, #28
 80023f4:	6978      	ldr	r0, [r7, #20]
 80023f6:	0106      	lsls	r6, r0, #4
 80023f8:	430e      	orrs	r6, r1
 80023fa:	6939      	ldr	r1, [r7, #16]
 80023fc:	010d      	lsls	r5, r1, #4
 80023fe:	60ba      	str	r2, [r7, #8]
 8002400:	2100      	movs	r1, #0
 8002402:	60f9      	str	r1, [r7, #12]
 8002404:	68bd      	ldr	r5, [r7, #8]
 8002406:	68fe      	ldr	r6, [r7, #12]
 8002408:	0029      	movs	r1, r5
 800240a:	0f09      	lsrs	r1, r1, #28
 800240c:	0030      	movs	r0, r6
 800240e:	0104      	lsls	r4, r0, #4
 8002410:	430c      	orrs	r4, r1
 8002412:	0029      	movs	r1, r5
 8002414:	010b      	lsls	r3, r1, #4
 8002416:	0013      	movs	r3, r2
 8002418:	005b      	lsls	r3, r3, #1
 800241a:	3301      	adds	r3, #1
 800241c:	3307      	adds	r3, #7
 800241e:	08db      	lsrs	r3, r3, #3
 8002420:	00db      	lsls	r3, r3, #3
 8002422:	466a      	mov	r2, sp
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	469d      	mov	sp, r3
 8002428:	ab04      	add	r3, sp, #16
 800242a:	3301      	adds	r3, #1
 800242c:	085b      	lsrs	r3, r3, #1
 800242e:	005b      	lsls	r3, r3, #1
 8002430:	62bb      	str	r3, [r7, #40]	; 0x28
	int16_t rowOffset, address;

	// Char bitmap = 5 columns
	for (int8_t i=0; i<5; i++) {
 8002432:	2325      	movs	r3, #37	; 0x25
 8002434:	2218      	movs	r2, #24
 8002436:	4694      	mov	ip, r2
 8002438:	44bc      	add	ip, r7
 800243a:	4463      	add	r3, ip
 800243c:	2200      	movs	r2, #0
 800243e:	701a      	strb	r2, [r3, #0]
 8002440:	e1f4      	b.n	800282c <drawChar+0x488>
		uint8_t line = font[ch*5+i];
 8002442:	231f      	movs	r3, #31
 8002444:	18fb      	adds	r3, r7, r3
 8002446:	781a      	ldrb	r2, [r3, #0]
 8002448:	0013      	movs	r3, r2
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	189a      	adds	r2, r3, r2
 800244e:	2325      	movs	r3, #37	; 0x25
 8002450:	2118      	movs	r1, #24
 8002452:	468c      	mov	ip, r1
 8002454:	44bc      	add	ip, r7
 8002456:	4463      	add	r3, ip
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	b25b      	sxtb	r3, r3
 800245c:	18d2      	adds	r2, r2, r3
 800245e:	2324      	movs	r3, #36	; 0x24
 8002460:	2118      	movs	r1, #24
 8002462:	468c      	mov	ip, r1
 8002464:	44bc      	add	ip, r7
 8002466:	4463      	add	r3, ip
 8002468:	4993      	ldr	r1, [pc, #588]	; (80026b8 <drawChar+0x314>)
 800246a:	5c8a      	ldrb	r2, [r1, r2]
 800246c:	701a      	strb	r2, [r3, #0]
		for (int8_t j=0; j<8; j++, line >>= 1) {
 800246e:	2323      	movs	r3, #35	; 0x23
 8002470:	2218      	movs	r2, #24
 8002472:	4694      	mov	ip, r2
 8002474:	44bc      	add	ip, r7
 8002476:	4463      	add	r3, ip
 8002478:	2200      	movs	r2, #0
 800247a:	701a      	strb	r2, [r3, #0]
 800247c:	e1c0      	b.n	8002800 <drawChar+0x45c>
			// draw character pixel
			if (line & 1) {
 800247e:	2324      	movs	r3, #36	; 0x24
 8002480:	2218      	movs	r2, #24
 8002482:	4694      	mov	ip, r2
 8002484:	44bc      	add	ip, r7
 8002486:	4463      	add	r3, ip
 8002488:	781b      	ldrb	r3, [r3, #0]
 800248a:	2201      	movs	r2, #1
 800248c:	4013      	ands	r3, r2
 800248e:	d100      	bne.n	8002492 <drawChar+0xee>
 8002490:	e0c8      	b.n	8002624 <drawChar+0x280>
				if (textSize == 1) {
 8002492:	4b88      	ldr	r3, [pc, #544]	; (80026b4 <drawChar+0x310>)
 8002494:	781b      	ldrb	r3, [r3, #0]
 8002496:	2b01      	cmp	r3, #1
 8002498:	d11c      	bne.n	80024d4 <drawChar+0x130>
					buffer[i+j*6] = colorFixer(textColor);
 800249a:	4b88      	ldr	r3, [pc, #544]	; (80026bc <drawChar+0x318>)
 800249c:	8818      	ldrh	r0, [r3, #0]
 800249e:	2325      	movs	r3, #37	; 0x25
 80024a0:	2218      	movs	r2, #24
 80024a2:	4694      	mov	ip, r2
 80024a4:	44bc      	add	ip, r7
 80024a6:	4463      	add	r3, ip
 80024a8:	2100      	movs	r1, #0
 80024aa:	5659      	ldrsb	r1, [r3, r1]
 80024ac:	2323      	movs	r3, #35	; 0x23
 80024ae:	2218      	movs	r2, #24
 80024b0:	4694      	mov	ip, r2
 80024b2:	44bc      	add	ip, r7
 80024b4:	4463      	add	r3, ip
 80024b6:	2200      	movs	r2, #0
 80024b8:	569a      	ldrsb	r2, [r3, r2]
 80024ba:	0013      	movs	r3, r2
 80024bc:	005b      	lsls	r3, r3, #1
 80024be:	189b      	adds	r3, r3, r2
 80024c0:	005b      	lsls	r3, r3, #1
 80024c2:	18cc      	adds	r4, r1, r3
 80024c4:	f7ff fd96 	bl	8001ff4 <colorFixer>
 80024c8:	0003      	movs	r3, r0
 80024ca:	0019      	movs	r1, r3
 80024cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024ce:	0062      	lsls	r2, r4, #1
 80024d0:	52d1      	strh	r1, [r2, r3]
 80024d2:	e17f      	b.n	80027d4 <drawChar+0x430>
				}
				else {
					// indexing scheme for textSize > 1
					for (int8_t k = 0; k < textSize; k++) {
 80024d4:	2322      	movs	r3, #34	; 0x22
 80024d6:	2218      	movs	r2, #24
 80024d8:	4694      	mov	ip, r2
 80024da:	44bc      	add	ip, r7
 80024dc:	4463      	add	r3, ip
 80024de:	2200      	movs	r2, #0
 80024e0:	701a      	strb	r2, [r3, #0]
 80024e2:	e092      	b.n	800260a <drawChar+0x266>
						rowOffset = textSize*6;
 80024e4:	4b73      	ldr	r3, [pc, #460]	; (80026b4 <drawChar+0x310>)
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	b29b      	uxth	r3, r3
 80024ea:	1c1a      	adds	r2, r3, #0
 80024ec:	1c13      	adds	r3, r2, #0
 80024ee:	18db      	adds	r3, r3, r3
 80024f0:	189b      	adds	r3, r3, r2
 80024f2:	18db      	adds	r3, r3, r3
 80024f4:	b29a      	uxth	r2, r3
 80024f6:	2326      	movs	r3, #38	; 0x26
 80024f8:	2118      	movs	r1, #24
 80024fa:	468c      	mov	ip, r1
 80024fc:	44bc      	add	ip, r7
 80024fe:	4463      	add	r3, ip
 8002500:	801a      	strh	r2, [r3, #0]
						for (int8_t l = 0; l < textSize; l++) {
 8002502:	2321      	movs	r3, #33	; 0x21
 8002504:	2218      	movs	r2, #24
 8002506:	4694      	mov	ip, r2
 8002508:	44bc      	add	ip, r7
 800250a:	4463      	add	r3, ip
 800250c:	2200      	movs	r2, #0
 800250e:	701a      	strb	r2, [r3, #0]
 8002510:	e064      	b.n	80025dc <drawChar+0x238>
							address = (textSize*textSize*j*6)+(i*textSize);
 8002512:	4b68      	ldr	r3, [pc, #416]	; (80026b4 <drawChar+0x310>)
 8002514:	781b      	ldrb	r3, [r3, #0]
 8002516:	b29b      	uxth	r3, r3
 8002518:	4a66      	ldr	r2, [pc, #408]	; (80026b4 <drawChar+0x310>)
 800251a:	7812      	ldrb	r2, [r2, #0]
 800251c:	b292      	uxth	r2, r2
 800251e:	4353      	muls	r3, r2
 8002520:	b29b      	uxth	r3, r3
 8002522:	2223      	movs	r2, #35	; 0x23
 8002524:	2118      	movs	r1, #24
 8002526:	468c      	mov	ip, r1
 8002528:	44bc      	add	ip, r7
 800252a:	4462      	add	r2, ip
 800252c:	7812      	ldrb	r2, [r2, #0]
 800252e:	b252      	sxtb	r2, r2
 8002530:	b292      	uxth	r2, r2
 8002532:	4353      	muls	r3, r2
 8002534:	b29b      	uxth	r3, r3
 8002536:	1c1a      	adds	r2, r3, #0
 8002538:	1c13      	adds	r3, r2, #0
 800253a:	18db      	adds	r3, r3, r3
 800253c:	189b      	adds	r3, r3, r2
 800253e:	18db      	adds	r3, r3, r3
 8002540:	b29a      	uxth	r2, r3
 8002542:	2325      	movs	r3, #37	; 0x25
 8002544:	2118      	movs	r1, #24
 8002546:	468c      	mov	ip, r1
 8002548:	44bc      	add	ip, r7
 800254a:	4463      	add	r3, ip
 800254c:	781b      	ldrb	r3, [r3, #0]
 800254e:	b25b      	sxtb	r3, r3
 8002550:	b29b      	uxth	r3, r3
 8002552:	4958      	ldr	r1, [pc, #352]	; (80026b4 <drawChar+0x310>)
 8002554:	7809      	ldrb	r1, [r1, #0]
 8002556:	b289      	uxth	r1, r1
 8002558:	434b      	muls	r3, r1
 800255a:	b29b      	uxth	r3, r3
 800255c:	18d3      	adds	r3, r2, r3
 800255e:	b29a      	uxth	r2, r3
 8002560:	210e      	movs	r1, #14
 8002562:	2018      	movs	r0, #24
 8002564:	183b      	adds	r3, r7, r0
 8002566:	185b      	adds	r3, r3, r1
 8002568:	801a      	strh	r2, [r3, #0]
							address += rowOffset*k+l;
 800256a:	2322      	movs	r3, #34	; 0x22
 800256c:	2218      	movs	r2, #24
 800256e:	4694      	mov	ip, r2
 8002570:	44bc      	add	ip, r7
 8002572:	4463      	add	r3, ip
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	b25b      	sxtb	r3, r3
 8002578:	b29b      	uxth	r3, r3
 800257a:	2226      	movs	r2, #38	; 0x26
 800257c:	2418      	movs	r4, #24
 800257e:	46a4      	mov	ip, r4
 8002580:	44bc      	add	ip, r7
 8002582:	4462      	add	r2, ip
 8002584:	8812      	ldrh	r2, [r2, #0]
 8002586:	4353      	muls	r3, r2
 8002588:	b29a      	uxth	r2, r3
 800258a:	2521      	movs	r5, #33	; 0x21
 800258c:	183b      	adds	r3, r7, r0
 800258e:	195b      	adds	r3, r3, r5
 8002590:	781b      	ldrb	r3, [r3, #0]
 8002592:	b25b      	sxtb	r3, r3
 8002594:	b29b      	uxth	r3, r3
 8002596:	18d3      	adds	r3, r2, r3
 8002598:	b29a      	uxth	r2, r3
 800259a:	183b      	adds	r3, r7, r0
 800259c:	185b      	adds	r3, r3, r1
 800259e:	881b      	ldrh	r3, [r3, #0]
 80025a0:	18d3      	adds	r3, r2, r3
 80025a2:	b29a      	uxth	r2, r3
 80025a4:	183b      	adds	r3, r7, r0
 80025a6:	185b      	adds	r3, r3, r1
 80025a8:	801a      	strh	r2, [r3, #0]
							buffer[address] = colorFixer(textColor);
 80025aa:	4b44      	ldr	r3, [pc, #272]	; (80026bc <drawChar+0x318>)
 80025ac:	881a      	ldrh	r2, [r3, #0]
 80025ae:	0006      	movs	r6, r0
 80025b0:	183b      	adds	r3, r7, r0
 80025b2:	185b      	adds	r3, r3, r1
 80025b4:	2400      	movs	r4, #0
 80025b6:	5f1c      	ldrsh	r4, [r3, r4]
 80025b8:	0010      	movs	r0, r2
 80025ba:	f7ff fd1b 	bl	8001ff4 <colorFixer>
 80025be:	0003      	movs	r3, r0
 80025c0:	0019      	movs	r1, r3
 80025c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025c4:	0062      	lsls	r2, r4, #1
 80025c6:	52d1      	strh	r1, [r2, r3]
						for (int8_t l = 0; l < textSize; l++) {
 80025c8:	19bb      	adds	r3, r7, r6
 80025ca:	195b      	adds	r3, r3, r5
 80025cc:	781b      	ldrb	r3, [r3, #0]
 80025ce:	b25b      	sxtb	r3, r3
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	3301      	adds	r3, #1
 80025d4:	b2da      	uxtb	r2, r3
 80025d6:	19bb      	adds	r3, r7, r6
 80025d8:	195b      	adds	r3, r3, r5
 80025da:	701a      	strb	r2, [r3, #0]
 80025dc:	2321      	movs	r3, #33	; 0x21
 80025de:	2218      	movs	r2, #24
 80025e0:	4694      	mov	ip, r2
 80025e2:	44bc      	add	ip, r7
 80025e4:	4463      	add	r3, ip
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	b25b      	sxtb	r3, r3
 80025ea:	4a32      	ldr	r2, [pc, #200]	; (80026b4 <drawChar+0x310>)
 80025ec:	7812      	ldrb	r2, [r2, #0]
 80025ee:	4293      	cmp	r3, r2
 80025f0:	db8f      	blt.n	8002512 <drawChar+0x16e>
					for (int8_t k = 0; k < textSize; k++) {
 80025f2:	2122      	movs	r1, #34	; 0x22
 80025f4:	2018      	movs	r0, #24
 80025f6:	183b      	adds	r3, r7, r0
 80025f8:	185b      	adds	r3, r3, r1
 80025fa:	781b      	ldrb	r3, [r3, #0]
 80025fc:	b25b      	sxtb	r3, r3
 80025fe:	b2db      	uxtb	r3, r3
 8002600:	3301      	adds	r3, #1
 8002602:	b2da      	uxtb	r2, r3
 8002604:	183b      	adds	r3, r7, r0
 8002606:	185b      	adds	r3, r3, r1
 8002608:	701a      	strb	r2, [r3, #0]
 800260a:	2322      	movs	r3, #34	; 0x22
 800260c:	2218      	movs	r2, #24
 800260e:	4694      	mov	ip, r2
 8002610:	44bc      	add	ip, r7
 8002612:	4463      	add	r3, ip
 8002614:	781b      	ldrb	r3, [r3, #0]
 8002616:	b25b      	sxtb	r3, r3
 8002618:	4a26      	ldr	r2, [pc, #152]	; (80026b4 <drawChar+0x310>)
 800261a:	7812      	ldrb	r2, [r2, #0]
 800261c:	4293      	cmp	r3, r2
 800261e:	da00      	bge.n	8002622 <drawChar+0x27e>
 8002620:	e760      	b.n	80024e4 <drawChar+0x140>
 8002622:	e0d7      	b.n	80027d4 <drawChar+0x430>
						}
					}
				}
			}
			// draw text background
			else if (bg != textColor) {
 8002624:	4b26      	ldr	r3, [pc, #152]	; (80026c0 <drawChar+0x31c>)
 8002626:	881a      	ldrh	r2, [r3, #0]
 8002628:	4b24      	ldr	r3, [pc, #144]	; (80026bc <drawChar+0x318>)
 800262a:	881b      	ldrh	r3, [r3, #0]
 800262c:	429a      	cmp	r2, r3
 800262e:	d100      	bne.n	8002632 <drawChar+0x28e>
 8002630:	e0d0      	b.n	80027d4 <drawChar+0x430>
				if (textSize == 1) {
 8002632:	4b20      	ldr	r3, [pc, #128]	; (80026b4 <drawChar+0x310>)
 8002634:	781b      	ldrb	r3, [r3, #0]
 8002636:	2b01      	cmp	r3, #1
 8002638:	d11c      	bne.n	8002674 <drawChar+0x2d0>
					buffer[i+j*6] = colorFixer(bg);
 800263a:	4b21      	ldr	r3, [pc, #132]	; (80026c0 <drawChar+0x31c>)
 800263c:	8818      	ldrh	r0, [r3, #0]
 800263e:	2325      	movs	r3, #37	; 0x25
 8002640:	2218      	movs	r2, #24
 8002642:	4694      	mov	ip, r2
 8002644:	44bc      	add	ip, r7
 8002646:	4463      	add	r3, ip
 8002648:	2100      	movs	r1, #0
 800264a:	5659      	ldrsb	r1, [r3, r1]
 800264c:	2323      	movs	r3, #35	; 0x23
 800264e:	2218      	movs	r2, #24
 8002650:	4694      	mov	ip, r2
 8002652:	44bc      	add	ip, r7
 8002654:	4463      	add	r3, ip
 8002656:	2200      	movs	r2, #0
 8002658:	569a      	ldrsb	r2, [r3, r2]
 800265a:	0013      	movs	r3, r2
 800265c:	005b      	lsls	r3, r3, #1
 800265e:	189b      	adds	r3, r3, r2
 8002660:	005b      	lsls	r3, r3, #1
 8002662:	18cc      	adds	r4, r1, r3
 8002664:	f7ff fcc6 	bl	8001ff4 <colorFixer>
 8002668:	0003      	movs	r3, r0
 800266a:	0019      	movs	r1, r3
 800266c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800266e:	0062      	lsls	r2, r4, #1
 8002670:	52d1      	strh	r1, [r2, r3]
 8002672:	e0af      	b.n	80027d4 <drawChar+0x430>
				}
				else {
					for (int8_t k = 0; k < textSize; k++) {
 8002674:	2320      	movs	r3, #32
 8002676:	2218      	movs	r2, #24
 8002678:	4694      	mov	ip, r2
 800267a:	44bc      	add	ip, r7
 800267c:	4463      	add	r3, ip
 800267e:	2200      	movs	r2, #0
 8002680:	701a      	strb	r2, [r3, #0]
 8002682:	e09b      	b.n	80027bc <drawChar+0x418>
						rowOffset = textSize*6;
 8002684:	4b0b      	ldr	r3, [pc, #44]	; (80026b4 <drawChar+0x310>)
 8002686:	781b      	ldrb	r3, [r3, #0]
 8002688:	b29b      	uxth	r3, r3
 800268a:	1c1a      	adds	r2, r3, #0
 800268c:	1c13      	adds	r3, r2, #0
 800268e:	18db      	adds	r3, r3, r3
 8002690:	189b      	adds	r3, r3, r2
 8002692:	18db      	adds	r3, r3, r3
 8002694:	b29a      	uxth	r2, r3
 8002696:	2326      	movs	r3, #38	; 0x26
 8002698:	2118      	movs	r1, #24
 800269a:	468c      	mov	ip, r1
 800269c:	44bc      	add	ip, r7
 800269e:	4463      	add	r3, ip
 80026a0:	801a      	strh	r2, [r3, #0]
						for (int8_t l = 0; l < textSize; l++) {
 80026a2:	231f      	movs	r3, #31
 80026a4:	2218      	movs	r2, #24
 80026a6:	4694      	mov	ip, r2
 80026a8:	44bc      	add	ip, r7
 80026aa:	4463      	add	r3, ip
 80026ac:	2200      	movs	r2, #0
 80026ae:	701a      	strb	r2, [r3, #0]
 80026b0:	e06d      	b.n	800278e <drawChar+0x3ea>
 80026b2:	46c0      	nop			; (mov r8, r8)
 80026b4:	200000f6 	.word	0x200000f6
 80026b8:	0800c84c 	.word	0x0800c84c
 80026bc:	200000f8 	.word	0x200000f8
 80026c0:	200000fa 	.word	0x200000fa
							address = (textSize*textSize*j*6)+(i*textSize);
 80026c4:	4bda      	ldr	r3, [pc, #872]	; (8002a30 <drawChar+0x68c>)
 80026c6:	781b      	ldrb	r3, [r3, #0]
 80026c8:	b29b      	uxth	r3, r3
 80026ca:	4ad9      	ldr	r2, [pc, #868]	; (8002a30 <drawChar+0x68c>)
 80026cc:	7812      	ldrb	r2, [r2, #0]
 80026ce:	b292      	uxth	r2, r2
 80026d0:	4353      	muls	r3, r2
 80026d2:	b29b      	uxth	r3, r3
 80026d4:	2223      	movs	r2, #35	; 0x23
 80026d6:	2118      	movs	r1, #24
 80026d8:	468c      	mov	ip, r1
 80026da:	44bc      	add	ip, r7
 80026dc:	4462      	add	r2, ip
 80026de:	7812      	ldrb	r2, [r2, #0]
 80026e0:	b252      	sxtb	r2, r2
 80026e2:	b292      	uxth	r2, r2
 80026e4:	4353      	muls	r3, r2
 80026e6:	b29b      	uxth	r3, r3
 80026e8:	1c1a      	adds	r2, r3, #0
 80026ea:	1c13      	adds	r3, r2, #0
 80026ec:	18db      	adds	r3, r3, r3
 80026ee:	189b      	adds	r3, r3, r2
 80026f0:	18db      	adds	r3, r3, r3
 80026f2:	b29a      	uxth	r2, r3
 80026f4:	2325      	movs	r3, #37	; 0x25
 80026f6:	2118      	movs	r1, #24
 80026f8:	468c      	mov	ip, r1
 80026fa:	44bc      	add	ip, r7
 80026fc:	4463      	add	r3, ip
 80026fe:	781b      	ldrb	r3, [r3, #0]
 8002700:	b25b      	sxtb	r3, r3
 8002702:	b29b      	uxth	r3, r3
 8002704:	49ca      	ldr	r1, [pc, #808]	; (8002a30 <drawChar+0x68c>)
 8002706:	7809      	ldrb	r1, [r1, #0]
 8002708:	b289      	uxth	r1, r1
 800270a:	434b      	muls	r3, r1
 800270c:	b29b      	uxth	r3, r3
 800270e:	18d3      	adds	r3, r2, r3
 8002710:	b29a      	uxth	r2, r3
 8002712:	210e      	movs	r1, #14
 8002714:	2018      	movs	r0, #24
 8002716:	183b      	adds	r3, r7, r0
 8002718:	185b      	adds	r3, r3, r1
 800271a:	801a      	strh	r2, [r3, #0]
							address += rowOffset*k+l;
 800271c:	2320      	movs	r3, #32
 800271e:	2218      	movs	r2, #24
 8002720:	4694      	mov	ip, r2
 8002722:	44bc      	add	ip, r7
 8002724:	4463      	add	r3, ip
 8002726:	781b      	ldrb	r3, [r3, #0]
 8002728:	b25b      	sxtb	r3, r3
 800272a:	b29b      	uxth	r3, r3
 800272c:	2226      	movs	r2, #38	; 0x26
 800272e:	2418      	movs	r4, #24
 8002730:	46a4      	mov	ip, r4
 8002732:	44bc      	add	ip, r7
 8002734:	4462      	add	r2, ip
 8002736:	8812      	ldrh	r2, [r2, #0]
 8002738:	4353      	muls	r3, r2
 800273a:	b29a      	uxth	r2, r3
 800273c:	251f      	movs	r5, #31
 800273e:	183b      	adds	r3, r7, r0
 8002740:	195b      	adds	r3, r3, r5
 8002742:	781b      	ldrb	r3, [r3, #0]
 8002744:	b25b      	sxtb	r3, r3
 8002746:	b29b      	uxth	r3, r3
 8002748:	18d3      	adds	r3, r2, r3
 800274a:	b29a      	uxth	r2, r3
 800274c:	183b      	adds	r3, r7, r0
 800274e:	185b      	adds	r3, r3, r1
 8002750:	881b      	ldrh	r3, [r3, #0]
 8002752:	18d3      	adds	r3, r2, r3
 8002754:	b29a      	uxth	r2, r3
 8002756:	183b      	adds	r3, r7, r0
 8002758:	185b      	adds	r3, r3, r1
 800275a:	801a      	strh	r2, [r3, #0]
							buffer[address] = colorFixer(bg);
 800275c:	4bb5      	ldr	r3, [pc, #724]	; (8002a34 <drawChar+0x690>)
 800275e:	881a      	ldrh	r2, [r3, #0]
 8002760:	0006      	movs	r6, r0
 8002762:	183b      	adds	r3, r7, r0
 8002764:	185b      	adds	r3, r3, r1
 8002766:	2400      	movs	r4, #0
 8002768:	5f1c      	ldrsh	r4, [r3, r4]
 800276a:	0010      	movs	r0, r2
 800276c:	f7ff fc42 	bl	8001ff4 <colorFixer>
 8002770:	0003      	movs	r3, r0
 8002772:	0019      	movs	r1, r3
 8002774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002776:	0062      	lsls	r2, r4, #1
 8002778:	52d1      	strh	r1, [r2, r3]
						for (int8_t l = 0; l < textSize; l++) {
 800277a:	19bb      	adds	r3, r7, r6
 800277c:	195b      	adds	r3, r3, r5
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	b25b      	sxtb	r3, r3
 8002782:	b2db      	uxtb	r3, r3
 8002784:	3301      	adds	r3, #1
 8002786:	b2da      	uxtb	r2, r3
 8002788:	19bb      	adds	r3, r7, r6
 800278a:	195b      	adds	r3, r3, r5
 800278c:	701a      	strb	r2, [r3, #0]
 800278e:	231f      	movs	r3, #31
 8002790:	2218      	movs	r2, #24
 8002792:	4694      	mov	ip, r2
 8002794:	44bc      	add	ip, r7
 8002796:	4463      	add	r3, ip
 8002798:	781b      	ldrb	r3, [r3, #0]
 800279a:	b25b      	sxtb	r3, r3
 800279c:	4aa4      	ldr	r2, [pc, #656]	; (8002a30 <drawChar+0x68c>)
 800279e:	7812      	ldrb	r2, [r2, #0]
 80027a0:	4293      	cmp	r3, r2
 80027a2:	db8f      	blt.n	80026c4 <drawChar+0x320>
					for (int8_t k = 0; k < textSize; k++) {
 80027a4:	2120      	movs	r1, #32
 80027a6:	2018      	movs	r0, #24
 80027a8:	183b      	adds	r3, r7, r0
 80027aa:	185b      	adds	r3, r3, r1
 80027ac:	781b      	ldrb	r3, [r3, #0]
 80027ae:	b25b      	sxtb	r3, r3
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	3301      	adds	r3, #1
 80027b4:	b2da      	uxtb	r2, r3
 80027b6:	183b      	adds	r3, r7, r0
 80027b8:	185b      	adds	r3, r3, r1
 80027ba:	701a      	strb	r2, [r3, #0]
 80027bc:	2320      	movs	r3, #32
 80027be:	2218      	movs	r2, #24
 80027c0:	4694      	mov	ip, r2
 80027c2:	44bc      	add	ip, r7
 80027c4:	4463      	add	r3, ip
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	b25b      	sxtb	r3, r3
 80027ca:	4a99      	ldr	r2, [pc, #612]	; (8002a30 <drawChar+0x68c>)
 80027cc:	7812      	ldrb	r2, [r2, #0]
 80027ce:	4293      	cmp	r3, r2
 80027d0:	da00      	bge.n	80027d4 <drawChar+0x430>
 80027d2:	e757      	b.n	8002684 <drawChar+0x2e0>
		for (int8_t j=0; j<8; j++, line >>= 1) {
 80027d4:	2123      	movs	r1, #35	; 0x23
 80027d6:	2018      	movs	r0, #24
 80027d8:	183b      	adds	r3, r7, r0
 80027da:	185b      	adds	r3, r3, r1
 80027dc:	781b      	ldrb	r3, [r3, #0]
 80027de:	b25b      	sxtb	r3, r3
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	3301      	adds	r3, #1
 80027e4:	b2da      	uxtb	r2, r3
 80027e6:	183b      	adds	r3, r7, r0
 80027e8:	185b      	adds	r3, r3, r1
 80027ea:	701a      	strb	r2, [r3, #0]
 80027ec:	2224      	movs	r2, #36	; 0x24
 80027ee:	183b      	adds	r3, r7, r0
 80027f0:	189b      	adds	r3, r3, r2
 80027f2:	2118      	movs	r1, #24
 80027f4:	468c      	mov	ip, r1
 80027f6:	44bc      	add	ip, r7
 80027f8:	4462      	add	r2, ip
 80027fa:	7812      	ldrb	r2, [r2, #0]
 80027fc:	0852      	lsrs	r2, r2, #1
 80027fe:	701a      	strb	r2, [r3, #0]
 8002800:	2323      	movs	r3, #35	; 0x23
 8002802:	2218      	movs	r2, #24
 8002804:	4694      	mov	ip, r2
 8002806:	44bc      	add	ip, r7
 8002808:	4463      	add	r3, ip
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	b25b      	sxtb	r3, r3
 800280e:	2b07      	cmp	r3, #7
 8002810:	dc00      	bgt.n	8002814 <drawChar+0x470>
 8002812:	e634      	b.n	800247e <drawChar+0xda>
	for (int8_t i=0; i<5; i++) {
 8002814:	2125      	movs	r1, #37	; 0x25
 8002816:	2018      	movs	r0, #24
 8002818:	183b      	adds	r3, r7, r0
 800281a:	185b      	adds	r3, r3, r1
 800281c:	781b      	ldrb	r3, [r3, #0]
 800281e:	b25b      	sxtb	r3, r3
 8002820:	b2db      	uxtb	r3, r3
 8002822:	3301      	adds	r3, #1
 8002824:	b2da      	uxtb	r2, r3
 8002826:	183b      	adds	r3, r7, r0
 8002828:	185b      	adds	r3, r3, r1
 800282a:	701a      	strb	r2, [r3, #0]
 800282c:	2325      	movs	r3, #37	; 0x25
 800282e:	2218      	movs	r2, #24
 8002830:	4694      	mov	ip, r2
 8002832:	44bc      	add	ip, r7
 8002834:	4463      	add	r3, ip
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	b25b      	sxtb	r3, r3
 800283a:	2b04      	cmp	r3, #4
 800283c:	dc00      	bgt.n	8002840 <drawChar+0x49c>
 800283e:	e600      	b.n	8002442 <drawChar+0x9e>
		}
	}

	// If opaque, draw vertical line for last column
	// for character 1px kerning
	if (bg != textColor) {
 8002840:	4b7c      	ldr	r3, [pc, #496]	; (8002a34 <drawChar+0x690>)
 8002842:	881a      	ldrh	r2, [r3, #0]
 8002844:	4b7c      	ldr	r3, [pc, #496]	; (8002a38 <drawChar+0x694>)
 8002846:	881b      	ldrh	r3, [r3, #0]
 8002848:	429a      	cmp	r2, r3
 800284a:	d100      	bne.n	800284e <drawChar+0x4aa>
 800284c:	e0ca      	b.n	80029e4 <drawChar+0x640>
		for (int8_t j = 0; j < 8; j++) {
 800284e:	231e      	movs	r3, #30
 8002850:	2218      	movs	r2, #24
 8002852:	4694      	mov	ip, r2
 8002854:	44bc      	add	ip, r7
 8002856:	4463      	add	r3, ip
 8002858:	2200      	movs	r2, #0
 800285a:	701a      	strb	r2, [r3, #0]
 800285c:	e0b8      	b.n	80029d0 <drawChar+0x62c>
			if (textSize == 1) {
 800285e:	4b74      	ldr	r3, [pc, #464]	; (8002a30 <drawChar+0x68c>)
 8002860:	781b      	ldrb	r3, [r3, #0]
 8002862:	2b01      	cmp	r3, #1
 8002864:	d116      	bne.n	8002894 <drawChar+0x4f0>
				buffer[5+j*6] = colorFixer(bg);
 8002866:	4b73      	ldr	r3, [pc, #460]	; (8002a34 <drawChar+0x690>)
 8002868:	8819      	ldrh	r1, [r3, #0]
 800286a:	231e      	movs	r3, #30
 800286c:	2218      	movs	r2, #24
 800286e:	4694      	mov	ip, r2
 8002870:	44bc      	add	ip, r7
 8002872:	4463      	add	r3, ip
 8002874:	2200      	movs	r2, #0
 8002876:	569a      	ldrsb	r2, [r3, r2]
 8002878:	0013      	movs	r3, r2
 800287a:	005b      	lsls	r3, r3, #1
 800287c:	189b      	adds	r3, r3, r2
 800287e:	005b      	lsls	r3, r3, #1
 8002880:	1d5c      	adds	r4, r3, #5
 8002882:	0008      	movs	r0, r1
 8002884:	f7ff fbb6 	bl	8001ff4 <colorFixer>
 8002888:	0003      	movs	r3, r0
 800288a:	0019      	movs	r1, r3
 800288c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800288e:	0062      	lsls	r2, r4, #1
 8002890:	52d1      	strh	r1, [r2, r3]
 8002892:	e091      	b.n	80029b8 <drawChar+0x614>
			}
			else {
				for (int8_t k = 0; k < textSize; k++) {
 8002894:	231d      	movs	r3, #29
 8002896:	2218      	movs	r2, #24
 8002898:	4694      	mov	ip, r2
 800289a:	44bc      	add	ip, r7
 800289c:	4463      	add	r3, ip
 800289e:	2200      	movs	r2, #0
 80028a0:	701a      	strb	r2, [r3, #0]
 80028a2:	e07d      	b.n	80029a0 <drawChar+0x5fc>
					for (int8_t l = 0; l < textSize; l++) {
 80028a4:	231c      	movs	r3, #28
 80028a6:	2218      	movs	r2, #24
 80028a8:	4694      	mov	ip, r2
 80028aa:	44bc      	add	ip, r7
 80028ac:	4463      	add	r3, ip
 80028ae:	2200      	movs	r2, #0
 80028b0:	701a      	strb	r2, [r3, #0]
 80028b2:	e05e      	b.n	8002972 <drawChar+0x5ce>
						address = (textSize*textSize*j*6)+(5*textSize);
 80028b4:	4b5e      	ldr	r3, [pc, #376]	; (8002a30 <drawChar+0x68c>)
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	b29b      	uxth	r3, r3
 80028ba:	4a5d      	ldr	r2, [pc, #372]	; (8002a30 <drawChar+0x68c>)
 80028bc:	7812      	ldrb	r2, [r2, #0]
 80028be:	b292      	uxth	r2, r2
 80028c0:	4353      	muls	r3, r2
 80028c2:	b29b      	uxth	r3, r3
 80028c4:	221e      	movs	r2, #30
 80028c6:	2118      	movs	r1, #24
 80028c8:	468c      	mov	ip, r1
 80028ca:	44bc      	add	ip, r7
 80028cc:	4462      	add	r2, ip
 80028ce:	7812      	ldrb	r2, [r2, #0]
 80028d0:	b252      	sxtb	r2, r2
 80028d2:	b292      	uxth	r2, r2
 80028d4:	4353      	muls	r3, r2
 80028d6:	b29b      	uxth	r3, r3
 80028d8:	1c1a      	adds	r2, r3, #0
 80028da:	1c13      	adds	r3, r2, #0
 80028dc:	18db      	adds	r3, r3, r3
 80028de:	189b      	adds	r3, r3, r2
 80028e0:	18db      	adds	r3, r3, r3
 80028e2:	b29a      	uxth	r2, r3
 80028e4:	4b52      	ldr	r3, [pc, #328]	; (8002a30 <drawChar+0x68c>)
 80028e6:	781b      	ldrb	r3, [r3, #0]
 80028e8:	b29b      	uxth	r3, r3
 80028ea:	1c19      	adds	r1, r3, #0
 80028ec:	0089      	lsls	r1, r1, #2
 80028ee:	18cb      	adds	r3, r1, r3
 80028f0:	b29b      	uxth	r3, r3
 80028f2:	18d3      	adds	r3, r2, r3
 80028f4:	b29a      	uxth	r2, r3
 80028f6:	210e      	movs	r1, #14
 80028f8:	2018      	movs	r0, #24
 80028fa:	183b      	adds	r3, r7, r0
 80028fc:	185b      	adds	r3, r3, r1
 80028fe:	801a      	strh	r2, [r3, #0]
						address += rowOffset*k+l;
 8002900:	231d      	movs	r3, #29
 8002902:	2218      	movs	r2, #24
 8002904:	4694      	mov	ip, r2
 8002906:	44bc      	add	ip, r7
 8002908:	4463      	add	r3, ip
 800290a:	781b      	ldrb	r3, [r3, #0]
 800290c:	b25b      	sxtb	r3, r3
 800290e:	b29b      	uxth	r3, r3
 8002910:	2226      	movs	r2, #38	; 0x26
 8002912:	2418      	movs	r4, #24
 8002914:	46a4      	mov	ip, r4
 8002916:	44bc      	add	ip, r7
 8002918:	4462      	add	r2, ip
 800291a:	8812      	ldrh	r2, [r2, #0]
 800291c:	4353      	muls	r3, r2
 800291e:	b29a      	uxth	r2, r3
 8002920:	251c      	movs	r5, #28
 8002922:	183b      	adds	r3, r7, r0
 8002924:	195b      	adds	r3, r3, r5
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	b25b      	sxtb	r3, r3
 800292a:	b29b      	uxth	r3, r3
 800292c:	18d3      	adds	r3, r2, r3
 800292e:	b29a      	uxth	r2, r3
 8002930:	183b      	adds	r3, r7, r0
 8002932:	185b      	adds	r3, r3, r1
 8002934:	881b      	ldrh	r3, [r3, #0]
 8002936:	18d3      	adds	r3, r2, r3
 8002938:	b29a      	uxth	r2, r3
 800293a:	183b      	adds	r3, r7, r0
 800293c:	185b      	adds	r3, r3, r1
 800293e:	801a      	strh	r2, [r3, #0]
						buffer[address] = colorFixer(bg);
 8002940:	4b3c      	ldr	r3, [pc, #240]	; (8002a34 <drawChar+0x690>)
 8002942:	881a      	ldrh	r2, [r3, #0]
 8002944:	0006      	movs	r6, r0
 8002946:	183b      	adds	r3, r7, r0
 8002948:	185b      	adds	r3, r3, r1
 800294a:	2400      	movs	r4, #0
 800294c:	5f1c      	ldrsh	r4, [r3, r4]
 800294e:	0010      	movs	r0, r2
 8002950:	f7ff fb50 	bl	8001ff4 <colorFixer>
 8002954:	0003      	movs	r3, r0
 8002956:	0019      	movs	r1, r3
 8002958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800295a:	0062      	lsls	r2, r4, #1
 800295c:	52d1      	strh	r1, [r2, r3]
					for (int8_t l = 0; l < textSize; l++) {
 800295e:	19bb      	adds	r3, r7, r6
 8002960:	195b      	adds	r3, r3, r5
 8002962:	781b      	ldrb	r3, [r3, #0]
 8002964:	b25b      	sxtb	r3, r3
 8002966:	b2db      	uxtb	r3, r3
 8002968:	3301      	adds	r3, #1
 800296a:	b2da      	uxtb	r2, r3
 800296c:	19bb      	adds	r3, r7, r6
 800296e:	195b      	adds	r3, r3, r5
 8002970:	701a      	strb	r2, [r3, #0]
 8002972:	231c      	movs	r3, #28
 8002974:	2218      	movs	r2, #24
 8002976:	4694      	mov	ip, r2
 8002978:	44bc      	add	ip, r7
 800297a:	4463      	add	r3, ip
 800297c:	781b      	ldrb	r3, [r3, #0]
 800297e:	b25b      	sxtb	r3, r3
 8002980:	4a2b      	ldr	r2, [pc, #172]	; (8002a30 <drawChar+0x68c>)
 8002982:	7812      	ldrb	r2, [r2, #0]
 8002984:	4293      	cmp	r3, r2
 8002986:	db95      	blt.n	80028b4 <drawChar+0x510>
				for (int8_t k = 0; k < textSize; k++) {
 8002988:	211d      	movs	r1, #29
 800298a:	2018      	movs	r0, #24
 800298c:	183b      	adds	r3, r7, r0
 800298e:	185b      	adds	r3, r3, r1
 8002990:	781b      	ldrb	r3, [r3, #0]
 8002992:	b25b      	sxtb	r3, r3
 8002994:	b2db      	uxtb	r3, r3
 8002996:	3301      	adds	r3, #1
 8002998:	b2da      	uxtb	r2, r3
 800299a:	183b      	adds	r3, r7, r0
 800299c:	185b      	adds	r3, r3, r1
 800299e:	701a      	strb	r2, [r3, #0]
 80029a0:	231d      	movs	r3, #29
 80029a2:	2218      	movs	r2, #24
 80029a4:	4694      	mov	ip, r2
 80029a6:	44bc      	add	ip, r7
 80029a8:	4463      	add	r3, ip
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	b25b      	sxtb	r3, r3
 80029ae:	4a20      	ldr	r2, [pc, #128]	; (8002a30 <drawChar+0x68c>)
 80029b0:	7812      	ldrb	r2, [r2, #0]
 80029b2:	4293      	cmp	r3, r2
 80029b4:	da00      	bge.n	80029b8 <drawChar+0x614>
 80029b6:	e775      	b.n	80028a4 <drawChar+0x500>
		for (int8_t j = 0; j < 8; j++) {
 80029b8:	211e      	movs	r1, #30
 80029ba:	2018      	movs	r0, #24
 80029bc:	183b      	adds	r3, r7, r0
 80029be:	185b      	adds	r3, r3, r1
 80029c0:	781b      	ldrb	r3, [r3, #0]
 80029c2:	b25b      	sxtb	r3, r3
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	3301      	adds	r3, #1
 80029c8:	b2da      	uxtb	r2, r3
 80029ca:	183b      	adds	r3, r7, r0
 80029cc:	185b      	adds	r3, r3, r1
 80029ce:	701a      	strb	r2, [r3, #0]
 80029d0:	231e      	movs	r3, #30
 80029d2:	2218      	movs	r2, #24
 80029d4:	4694      	mov	ip, r2
 80029d6:	44bc      	add	ip, r7
 80029d8:	4463      	add	r3, ip
 80029da:	781b      	ldrb	r3, [r3, #0]
 80029dc:	b25b      	sxtb	r3, r3
 80029de:	2b07      	cmp	r3, #7
 80029e0:	dc00      	bgt.n	80029e4 <drawChar+0x640>
 80029e2:	e73c      	b.n	800285e <drawChar+0x4ba>
				}
			}
		}
	}

	drawBuffer(cursorX, cursorY, 6*textSize, 8*textSize, buffer, bufferSize, hspi);
 80029e4:	4b15      	ldr	r3, [pc, #84]	; (8002a3c <drawChar+0x698>)
 80029e6:	7818      	ldrb	r0, [r3, #0]
 80029e8:	4b15      	ldr	r3, [pc, #84]	; (8002a40 <drawChar+0x69c>)
 80029ea:	7819      	ldrb	r1, [r3, #0]
 80029ec:	4b10      	ldr	r3, [pc, #64]	; (8002a30 <drawChar+0x68c>)
 80029ee:	781b      	ldrb	r3, [r3, #0]
 80029f0:	1c1a      	adds	r2, r3, #0
 80029f2:	1c13      	adds	r3, r2, #0
 80029f4:	18db      	adds	r3, r3, r3
 80029f6:	189b      	adds	r3, r3, r2
 80029f8:	18db      	adds	r3, r3, r3
 80029fa:	b2dc      	uxtb	r4, r3
 80029fc:	4b0c      	ldr	r3, [pc, #48]	; (8002a30 <drawChar+0x68c>)
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	00db      	lsls	r3, r3, #3
 8002a02:	b2dd      	uxtb	r5, r3
 8002a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a06:	69ba      	ldr	r2, [r7, #24]
 8002a08:	9202      	str	r2, [sp, #8]
 8002a0a:	221a      	movs	r2, #26
 8002a0c:	2618      	movs	r6, #24
 8002a0e:	46b4      	mov	ip, r6
 8002a10:	44bc      	add	ip, r7
 8002a12:	4462      	add	r2, ip
 8002a14:	8812      	ldrh	r2, [r2, #0]
 8002a16:	9201      	str	r2, [sp, #4]
 8002a18:	9300      	str	r3, [sp, #0]
 8002a1a:	002b      	movs	r3, r5
 8002a1c:	0022      	movs	r2, r4
 8002a1e:	f7ff fb9e 	bl	800215e <drawBuffer>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	469d      	mov	sp, r3
}
 8002a26:	46c0      	nop			; (mov r8, r8)
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	b011      	add	sp, #68	; 0x44
 8002a2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a2e:	46c0      	nop			; (mov r8, r8)
 8002a30:	200000f6 	.word	0x200000f6
 8002a34:	200000fa 	.word	0x200000fa
 8002a38:	200000f8 	.word	0x200000f8
 8002a3c:	200000f4 	.word	0x200000f4
 8002a40:	200000f5 	.word	0x200000f5

08002a44 <drawText>:

// draws character strings
void drawText(const char *str, SPI_HandleTypeDef *hspi) {
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b084      	sub	sp, #16
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
 8002a4c:	6039      	str	r1, [r7, #0]
	for (int i = 0; str[i] != '\0'; i++) {
 8002a4e:	2300      	movs	r3, #0
 8002a50:	60fb      	str	r3, [r7, #12]
 8002a52:	e01d      	b.n	8002a90 <drawText+0x4c>
		drawChar(str[i], hspi);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	687a      	ldr	r2, [r7, #4]
 8002a58:	18d3      	adds	r3, r2, r3
 8002a5a:	781b      	ldrb	r3, [r3, #0]
 8002a5c:	683a      	ldr	r2, [r7, #0]
 8002a5e:	0011      	movs	r1, r2
 8002a60:	0018      	movs	r0, r3
 8002a62:	f7ff fc9f 	bl	80023a4 <drawChar>

		// moves cursor on every character print so it's not printed to the same place
		setCursor(cursorX+textSize*6, cursorY);
 8002a66:	4b0f      	ldr	r3, [pc, #60]	; (8002aa4 <drawText+0x60>)
 8002a68:	781b      	ldrb	r3, [r3, #0]
 8002a6a:	1c1a      	adds	r2, r3, #0
 8002a6c:	1c13      	adds	r3, r2, #0
 8002a6e:	18db      	adds	r3, r3, r3
 8002a70:	189b      	adds	r3, r3, r2
 8002a72:	18db      	adds	r3, r3, r3
 8002a74:	b2da      	uxtb	r2, r3
 8002a76:	4b0c      	ldr	r3, [pc, #48]	; (8002aa8 <drawText+0x64>)
 8002a78:	781b      	ldrb	r3, [r3, #0]
 8002a7a:	18d3      	adds	r3, r2, r3
 8002a7c:	b2da      	uxtb	r2, r3
 8002a7e:	4b0b      	ldr	r3, [pc, #44]	; (8002aac <drawText+0x68>)
 8002a80:	781b      	ldrb	r3, [r3, #0]
 8002a82:	0019      	movs	r1, r3
 8002a84:	0010      	movs	r0, r2
 8002a86:	f000 f9c5 	bl	8002e14 <setCursor>
	for (int i = 0; str[i] != '\0'; i++) {
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	3301      	adds	r3, #1
 8002a8e:	60fb      	str	r3, [r7, #12]
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	687a      	ldr	r2, [r7, #4]
 8002a94:	18d3      	adds	r3, r2, r3
 8002a96:	781b      	ldrb	r3, [r3, #0]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d1db      	bne.n	8002a54 <drawText+0x10>
	}
}
 8002a9c:	46c0      	nop			; (mov r8, r8)
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	b004      	add	sp, #16
 8002aa2:	bd80      	pop	{r7, pc}
 8002aa4:	200000f6 	.word	0x200000f6
 8002aa8:	200000f4 	.word	0x200000f4
 8002aac:	200000f5 	.word	0x200000f5

08002ab0 <drawTextAt>:

// drawText, but coordinates as arguments. coordinates are for upper left bound
void drawTextAt(uint8_t x, uint8_t y, const char *str, SPI_HandleTypeDef *hspi) {
 8002ab0:	b590      	push	{r4, r7, lr}
 8002ab2:	b087      	sub	sp, #28
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	60ba      	str	r2, [r7, #8]
 8002ab8:	607b      	str	r3, [r7, #4]
 8002aba:	240f      	movs	r4, #15
 8002abc:	193b      	adds	r3, r7, r4
 8002abe:	1c02      	adds	r2, r0, #0
 8002ac0:	701a      	strb	r2, [r3, #0]
 8002ac2:	200e      	movs	r0, #14
 8002ac4:	183b      	adds	r3, r7, r0
 8002ac6:	1c0a      	adds	r2, r1, #0
 8002ac8:	701a      	strb	r2, [r3, #0]
	// add text wrap
	int i = 0;
 8002aca:	2300      	movs	r3, #0
 8002acc:	617b      	str	r3, [r7, #20]
	setCursor(x,y);
 8002ace:	183b      	adds	r3, r7, r0
 8002ad0:	781a      	ldrb	r2, [r3, #0]
 8002ad2:	193b      	adds	r3, r7, r4
 8002ad4:	781b      	ldrb	r3, [r3, #0]
 8002ad6:	0011      	movs	r1, r2
 8002ad8:	0018      	movs	r0, r3
 8002ada:	f000 f99b 	bl	8002e14 <setCursor>
	for (i = 0; str[i] != '\0'; i++) {
 8002ade:	2300      	movs	r3, #0
 8002ae0:	617b      	str	r3, [r7, #20]
 8002ae2:	e01d      	b.n	8002b20 <drawTextAt+0x70>
		drawChar(str[i], hspi);
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	68ba      	ldr	r2, [r7, #8]
 8002ae8:	18d3      	adds	r3, r2, r3
 8002aea:	781b      	ldrb	r3, [r3, #0]
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	0011      	movs	r1, r2
 8002af0:	0018      	movs	r0, r3
 8002af2:	f7ff fc57 	bl	80023a4 <drawChar>
		setCursor(cursorX+textSize*6, cursorY);
 8002af6:	4b0f      	ldr	r3, [pc, #60]	; (8002b34 <drawTextAt+0x84>)
 8002af8:	781b      	ldrb	r3, [r3, #0]
 8002afa:	1c1a      	adds	r2, r3, #0
 8002afc:	1c13      	adds	r3, r2, #0
 8002afe:	18db      	adds	r3, r3, r3
 8002b00:	189b      	adds	r3, r3, r2
 8002b02:	18db      	adds	r3, r3, r3
 8002b04:	b2da      	uxtb	r2, r3
 8002b06:	4b0c      	ldr	r3, [pc, #48]	; (8002b38 <drawTextAt+0x88>)
 8002b08:	781b      	ldrb	r3, [r3, #0]
 8002b0a:	18d3      	adds	r3, r2, r3
 8002b0c:	b2da      	uxtb	r2, r3
 8002b0e:	4b0b      	ldr	r3, [pc, #44]	; (8002b3c <drawTextAt+0x8c>)
 8002b10:	781b      	ldrb	r3, [r3, #0]
 8002b12:	0019      	movs	r1, r3
 8002b14:	0010      	movs	r0, r2
 8002b16:	f000 f97d 	bl	8002e14 <setCursor>
	for (i = 0; str[i] != '\0'; i++) {
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	3301      	adds	r3, #1
 8002b1e:	617b      	str	r3, [r7, #20]
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	68ba      	ldr	r2, [r7, #8]
 8002b24:	18d3      	adds	r3, r2, r3
 8002b26:	781b      	ldrb	r3, [r3, #0]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d1db      	bne.n	8002ae4 <drawTextAt+0x34>
	}
}
 8002b2c:	46c0      	nop			; (mov r8, r8)
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	b007      	add	sp, #28
 8002b32:	bd90      	pop	{r4, r7, pc}
 8002b34:	200000f6 	.word	0x200000f6
 8002b38:	200000f4 	.word	0x200000f4
 8002b3c:	200000f5 	.word	0x200000f5

08002b40 <drawCenteredText>:

// draws text centered on an x coordinate. y is upper bound of box
void drawCenteredText(uint8_t x_center, uint8_t y, const char *str, SPI_HandleTypeDef *hspi) {
 8002b40:	b590      	push	{r4, r7, lr}
 8002b42:	b089      	sub	sp, #36	; 0x24
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	60ba      	str	r2, [r7, #8]
 8002b48:	607b      	str	r3, [r7, #4]
 8002b4a:	230f      	movs	r3, #15
 8002b4c:	18fb      	adds	r3, r7, r3
 8002b4e:	1c02      	adds	r2, r0, #0
 8002b50:	701a      	strb	r2, [r3, #0]
 8002b52:	240e      	movs	r4, #14
 8002b54:	193b      	adds	r3, r7, r4
 8002b56:	1c0a      	adds	r2, r1, #0
 8002b58:	701a      	strb	r2, [r3, #0]
	uint8_t strSize = strlen(str);
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	0018      	movs	r0, r3
 8002b5e:	f7fd fad3 	bl	8000108 <strlen>
 8002b62:	0002      	movs	r2, r0
 8002b64:	231f      	movs	r3, #31
 8002b66:	18fb      	adds	r3, r7, r3
 8002b68:	701a      	strb	r2, [r3, #0]
	// bounds checking. text box needed to print text should not end up out of bounds
	// also calculating what bounds of text box should be
	if (y+textSize*8 > HEIGHT) return;
 8002b6a:	193b      	adds	r3, r7, r4
 8002b6c:	781a      	ldrb	r2, [r3, #0]
 8002b6e:	4b24      	ldr	r3, [pc, #144]	; (8002c00 <drawCenteredText+0xc0>)
 8002b70:	781b      	ldrb	r3, [r3, #0]
 8002b72:	00db      	lsls	r3, r3, #3
 8002b74:	18d3      	adds	r3, r2, r3
 8002b76:	2ba0      	cmp	r3, #160	; 0xa0
 8002b78:	dc3a      	bgt.n	8002bf0 <drawCenteredText+0xb0>
	int leftBound = x_center-(strSize*textSize*6)/2;
 8002b7a:	230f      	movs	r3, #15
 8002b7c:	18fb      	adds	r3, r7, r3
 8002b7e:	7819      	ldrb	r1, [r3, #0]
 8002b80:	231f      	movs	r3, #31
 8002b82:	18fb      	adds	r3, r7, r3
 8002b84:	781b      	ldrb	r3, [r3, #0]
 8002b86:	4a1e      	ldr	r2, [pc, #120]	; (8002c00 <drawCenteredText+0xc0>)
 8002b88:	7812      	ldrb	r2, [r2, #0]
 8002b8a:	435a      	muls	r2, r3
 8002b8c:	0013      	movs	r3, r2
 8002b8e:	005b      	lsls	r3, r3, #1
 8002b90:	189b      	adds	r3, r3, r2
 8002b92:	005b      	lsls	r3, r3, #1
 8002b94:	d500      	bpl.n	8002b98 <drawCenteredText+0x58>
 8002b96:	3301      	adds	r3, #1
 8002b98:	105b      	asrs	r3, r3, #1
 8002b9a:	425b      	negs	r3, r3
 8002b9c:	18cb      	adds	r3, r1, r3
 8002b9e:	61bb      	str	r3, [r7, #24]
	int rightBound = x_center+(strSize*textSize*6)/2;
 8002ba0:	230f      	movs	r3, #15
 8002ba2:	18fb      	adds	r3, r7, r3
 8002ba4:	7819      	ldrb	r1, [r3, #0]
 8002ba6:	231f      	movs	r3, #31
 8002ba8:	18fb      	adds	r3, r7, r3
 8002baa:	781b      	ldrb	r3, [r3, #0]
 8002bac:	4a14      	ldr	r2, [pc, #80]	; (8002c00 <drawCenteredText+0xc0>)
 8002bae:	7812      	ldrb	r2, [r2, #0]
 8002bb0:	435a      	muls	r2, r3
 8002bb2:	0013      	movs	r3, r2
 8002bb4:	005b      	lsls	r3, r3, #1
 8002bb6:	189b      	adds	r3, r3, r2
 8002bb8:	005b      	lsls	r3, r3, #1
 8002bba:	d500      	bpl.n	8002bbe <drawCenteredText+0x7e>
 8002bbc:	3301      	adds	r3, #1
 8002bbe:	105b      	asrs	r3, r3, #1
 8002bc0:	18cb      	adds	r3, r1, r3
 8002bc2:	617b      	str	r3, [r7, #20]
	if (leftBound < 0) return;
 8002bc4:	69bb      	ldr	r3, [r7, #24]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	db14      	blt.n	8002bf4 <drawCenteredText+0xb4>
	if (rightBound > WIDTH) return;
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	2b80      	cmp	r3, #128	; 0x80
 8002bce:	dc13      	bgt.n	8002bf8 <drawCenteredText+0xb8>

	setCursor(leftBound, y);
 8002bd0:	69bb      	ldr	r3, [r7, #24]
 8002bd2:	b2da      	uxtb	r2, r3
 8002bd4:	230e      	movs	r3, #14
 8002bd6:	18fb      	adds	r3, r7, r3
 8002bd8:	781b      	ldrb	r3, [r3, #0]
 8002bda:	0019      	movs	r1, r3
 8002bdc:	0010      	movs	r0, r2
 8002bde:	f000 f919 	bl	8002e14 <setCursor>
	drawText(str, hspi);
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	0011      	movs	r1, r2
 8002be8:	0018      	movs	r0, r3
 8002bea:	f7ff ff2b 	bl	8002a44 <drawText>
 8002bee:	e004      	b.n	8002bfa <drawCenteredText+0xba>
	if (y+textSize*8 > HEIGHT) return;
 8002bf0:	46c0      	nop			; (mov r8, r8)
 8002bf2:	e002      	b.n	8002bfa <drawCenteredText+0xba>
	if (leftBound < 0) return;
 8002bf4:	46c0      	nop			; (mov r8, r8)
 8002bf6:	e000      	b.n	8002bfa <drawCenteredText+0xba>
	if (rightBound > WIDTH) return;
 8002bf8:	46c0      	nop			; (mov r8, r8)
}
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	b009      	add	sp, #36	; 0x24
 8002bfe:	bd90      	pop	{r4, r7, pc}
 8002c00:	200000f6 	.word	0x200000f6

08002c04 <drawCenteredTextWithPadding>:

// drawCenteredText, but background is filled to left and right of box
// used for cases where you're printing strings to the same place, but they have different sizes
void drawCenteredTextWithPadding(uint8_t x_center, uint8_t y, uint8_t maxLength, const char *str, SPI_HandleTypeDef *hspi) {
 8002c04:	b5b0      	push	{r4, r5, r7, lr}
 8002c06:	b088      	sub	sp, #32
 8002c08:	af02      	add	r7, sp, #8
 8002c0a:	0004      	movs	r4, r0
 8002c0c:	0008      	movs	r0, r1
 8002c0e:	0011      	movs	r1, r2
 8002c10:	603b      	str	r3, [r7, #0]
 8002c12:	1dfb      	adds	r3, r7, #7
 8002c14:	1c22      	adds	r2, r4, #0
 8002c16:	701a      	strb	r2, [r3, #0]
 8002c18:	1dbb      	adds	r3, r7, #6
 8002c1a:	1c02      	adds	r2, r0, #0
 8002c1c:	701a      	strb	r2, [r3, #0]
 8002c1e:	1d7b      	adds	r3, r7, #5
 8002c20:	1c0a      	adds	r2, r1, #0
 8002c22:	701a      	strb	r2, [r3, #0]
	// bounds checking. text box needed to print text should not end up out of bounds
	if (y+textSize*8 > HEIGHT) return;
 8002c24:	1dbb      	adds	r3, r7, #6
 8002c26:	781a      	ldrb	r2, [r3, #0]
 8002c28:	4b60      	ldr	r3, [pc, #384]	; (8002dac <drawCenteredTextWithPadding+0x1a8>)
 8002c2a:	781b      	ldrb	r3, [r3, #0]
 8002c2c:	00db      	lsls	r3, r3, #3
 8002c2e:	18d3      	adds	r3, r2, r3
 8002c30:	2ba0      	cmp	r3, #160	; 0xa0
 8002c32:	dd00      	ble.n	8002c36 <drawCenteredTextWithPadding+0x32>
 8002c34:	e0af      	b.n	8002d96 <drawCenteredTextWithPadding+0x192>
	int leftBound = x_center-(maxLength*textSize*6)/2;
 8002c36:	1dfb      	adds	r3, r7, #7
 8002c38:	7819      	ldrb	r1, [r3, #0]
 8002c3a:	1d7b      	adds	r3, r7, #5
 8002c3c:	781b      	ldrb	r3, [r3, #0]
 8002c3e:	4a5b      	ldr	r2, [pc, #364]	; (8002dac <drawCenteredTextWithPadding+0x1a8>)
 8002c40:	7812      	ldrb	r2, [r2, #0]
 8002c42:	435a      	muls	r2, r3
 8002c44:	0013      	movs	r3, r2
 8002c46:	005b      	lsls	r3, r3, #1
 8002c48:	189b      	adds	r3, r3, r2
 8002c4a:	005b      	lsls	r3, r3, #1
 8002c4c:	d500      	bpl.n	8002c50 <drawCenteredTextWithPadding+0x4c>
 8002c4e:	3301      	adds	r3, #1
 8002c50:	105b      	asrs	r3, r3, #1
 8002c52:	425b      	negs	r3, r3
 8002c54:	18cb      	adds	r3, r1, r3
 8002c56:	617b      	str	r3, [r7, #20]
	int rightBound = x_center+(maxLength*textSize*6)/2;
 8002c58:	1dfb      	adds	r3, r7, #7
 8002c5a:	7819      	ldrb	r1, [r3, #0]
 8002c5c:	1d7b      	adds	r3, r7, #5
 8002c5e:	781b      	ldrb	r3, [r3, #0]
 8002c60:	4a52      	ldr	r2, [pc, #328]	; (8002dac <drawCenteredTextWithPadding+0x1a8>)
 8002c62:	7812      	ldrb	r2, [r2, #0]
 8002c64:	435a      	muls	r2, r3
 8002c66:	0013      	movs	r3, r2
 8002c68:	005b      	lsls	r3, r3, #1
 8002c6a:	189b      	adds	r3, r3, r2
 8002c6c:	005b      	lsls	r3, r3, #1
 8002c6e:	d500      	bpl.n	8002c72 <drawCenteredTextWithPadding+0x6e>
 8002c70:	3301      	adds	r3, #1
 8002c72:	105b      	asrs	r3, r3, #1
 8002c74:	18cb      	adds	r3, r1, r3
 8002c76:	613b      	str	r3, [r7, #16]
	if (leftBound < 0) return;
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	da00      	bge.n	8002c80 <drawCenteredTextWithPadding+0x7c>
 8002c7e:	e08c      	b.n	8002d9a <drawCenteredTextWithPadding+0x196>
	if (rightBound > WIDTH) return;
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	2b80      	cmp	r3, #128	; 0x80
 8002c84:	dd00      	ble.n	8002c88 <drawCenteredTextWithPadding+0x84>
 8002c86:	e08a      	b.n	8002d9e <drawCenteredTextWithPadding+0x19a>

	uint8_t strSize = strlen(str);
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	0018      	movs	r0, r3
 8002c8c:	f7fd fa3c 	bl	8000108 <strlen>
 8002c90:	0002      	movs	r2, r0
 8002c92:	210f      	movs	r1, #15
 8002c94:	187b      	adds	r3, r7, r1
 8002c96:	701a      	strb	r2, [r3, #0]
	if (maxLength < strSize) return;		// size should not be greater than max
 8002c98:	1d7a      	adds	r2, r7, #5
 8002c9a:	187b      	adds	r3, r7, r1
 8002c9c:	7812      	ldrb	r2, [r2, #0]
 8002c9e:	781b      	ldrb	r3, [r3, #0]
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d200      	bcs.n	8002ca6 <drawCenteredTextWithPadding+0xa2>
 8002ca4:	e07d      	b.n	8002da2 <drawCenteredTextWithPadding+0x19e>

	// draw left and right padding
	uint8_t diff = maxLength-strSize;
 8002ca6:	240e      	movs	r4, #14
 8002ca8:	193b      	adds	r3, r7, r4
 8002caa:	1d79      	adds	r1, r7, #5
 8002cac:	220f      	movs	r2, #15
 8002cae:	18ba      	adds	r2, r7, r2
 8002cb0:	7809      	ldrb	r1, [r1, #0]
 8002cb2:	7812      	ldrb	r2, [r2, #0]
 8002cb4:	1a8a      	subs	r2, r1, r2
 8002cb6:	701a      	strb	r2, [r3, #0]
	fillRect(leftBound, y, diff*textSize*6/2, textSize*8, bg, hspi);		// math out of order to accomodate diff/2 being a non-int
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	b2d8      	uxtb	r0, r3
 8002cbc:	193b      	adds	r3, r7, r4
 8002cbe:	781b      	ldrb	r3, [r3, #0]
 8002cc0:	4a3a      	ldr	r2, [pc, #232]	; (8002dac <drawCenteredTextWithPadding+0x1a8>)
 8002cc2:	7812      	ldrb	r2, [r2, #0]
 8002cc4:	435a      	muls	r2, r3
 8002cc6:	0013      	movs	r3, r2
 8002cc8:	005b      	lsls	r3, r3, #1
 8002cca:	189b      	adds	r3, r3, r2
 8002ccc:	005b      	lsls	r3, r3, #1
 8002cce:	d500      	bpl.n	8002cd2 <drawCenteredTextWithPadding+0xce>
 8002cd0:	3301      	adds	r3, #1
 8002cd2:	105b      	asrs	r3, r3, #1
 8002cd4:	b2dc      	uxtb	r4, r3
 8002cd6:	4b35      	ldr	r3, [pc, #212]	; (8002dac <drawCenteredTextWithPadding+0x1a8>)
 8002cd8:	781b      	ldrb	r3, [r3, #0]
 8002cda:	00db      	lsls	r3, r3, #3
 8002cdc:	b2dd      	uxtb	r5, r3
 8002cde:	4b34      	ldr	r3, [pc, #208]	; (8002db0 <drawCenteredTextWithPadding+0x1ac>)
 8002ce0:	881b      	ldrh	r3, [r3, #0]
 8002ce2:	1dba      	adds	r2, r7, #6
 8002ce4:	7811      	ldrb	r1, [r2, #0]
 8002ce6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ce8:	9201      	str	r2, [sp, #4]
 8002cea:	9300      	str	r3, [sp, #0]
 8002cec:	002b      	movs	r3, r5
 8002cee:	0022      	movs	r2, r4
 8002cf0:	f7ff fad7 	bl	80022a2 <fillRect>
	fillRect(rightBound-diff*textSize*6/2, y, diff*textSize*6/2, textSize*8, bg, hspi);
 8002cf4:	230e      	movs	r3, #14
 8002cf6:	18fb      	adds	r3, r7, r3
 8002cf8:	781b      	ldrb	r3, [r3, #0]
 8002cfa:	4a2c      	ldr	r2, [pc, #176]	; (8002dac <drawCenteredTextWithPadding+0x1a8>)
 8002cfc:	7812      	ldrb	r2, [r2, #0]
 8002cfe:	435a      	muls	r2, r3
 8002d00:	0013      	movs	r3, r2
 8002d02:	005b      	lsls	r3, r3, #1
 8002d04:	189b      	adds	r3, r3, r2
 8002d06:	005b      	lsls	r3, r3, #1
 8002d08:	d500      	bpl.n	8002d0c <drawCenteredTextWithPadding+0x108>
 8002d0a:	3301      	adds	r3, #1
 8002d0c:	105b      	asrs	r3, r3, #1
 8002d0e:	425b      	negs	r3, r3
 8002d10:	b2da      	uxtb	r2, r3
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	18d3      	adds	r3, r2, r3
 8002d18:	b2d8      	uxtb	r0, r3
 8002d1a:	230e      	movs	r3, #14
 8002d1c:	18fb      	adds	r3, r7, r3
 8002d1e:	781b      	ldrb	r3, [r3, #0]
 8002d20:	4a22      	ldr	r2, [pc, #136]	; (8002dac <drawCenteredTextWithPadding+0x1a8>)
 8002d22:	7812      	ldrb	r2, [r2, #0]
 8002d24:	435a      	muls	r2, r3
 8002d26:	0013      	movs	r3, r2
 8002d28:	005b      	lsls	r3, r3, #1
 8002d2a:	189b      	adds	r3, r3, r2
 8002d2c:	005b      	lsls	r3, r3, #1
 8002d2e:	d500      	bpl.n	8002d32 <drawCenteredTextWithPadding+0x12e>
 8002d30:	3301      	adds	r3, #1
 8002d32:	105b      	asrs	r3, r3, #1
 8002d34:	b2dc      	uxtb	r4, r3
 8002d36:	4b1d      	ldr	r3, [pc, #116]	; (8002dac <drawCenteredTextWithPadding+0x1a8>)
 8002d38:	781b      	ldrb	r3, [r3, #0]
 8002d3a:	00db      	lsls	r3, r3, #3
 8002d3c:	b2dd      	uxtb	r5, r3
 8002d3e:	4b1c      	ldr	r3, [pc, #112]	; (8002db0 <drawCenteredTextWithPadding+0x1ac>)
 8002d40:	881b      	ldrh	r3, [r3, #0]
 8002d42:	1dba      	adds	r2, r7, #6
 8002d44:	7811      	ldrb	r1, [r2, #0]
 8002d46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d48:	9201      	str	r2, [sp, #4]
 8002d4a:	9300      	str	r3, [sp, #0]
 8002d4c:	002b      	movs	r3, r5
 8002d4e:	0022      	movs	r2, r4
 8002d50:	f7ff faa7 	bl	80022a2 <fillRect>

	int textLeftBound = x_center-(strSize*textSize*6)/2;
 8002d54:	1dfb      	adds	r3, r7, #7
 8002d56:	7819      	ldrb	r1, [r3, #0]
 8002d58:	230f      	movs	r3, #15
 8002d5a:	18fb      	adds	r3, r7, r3
 8002d5c:	781b      	ldrb	r3, [r3, #0]
 8002d5e:	4a13      	ldr	r2, [pc, #76]	; (8002dac <drawCenteredTextWithPadding+0x1a8>)
 8002d60:	7812      	ldrb	r2, [r2, #0]
 8002d62:	435a      	muls	r2, r3
 8002d64:	0013      	movs	r3, r2
 8002d66:	005b      	lsls	r3, r3, #1
 8002d68:	189b      	adds	r3, r3, r2
 8002d6a:	005b      	lsls	r3, r3, #1
 8002d6c:	d500      	bpl.n	8002d70 <drawCenteredTextWithPadding+0x16c>
 8002d6e:	3301      	adds	r3, #1
 8002d70:	105b      	asrs	r3, r3, #1
 8002d72:	425b      	negs	r3, r3
 8002d74:	18cb      	adds	r3, r1, r3
 8002d76:	60bb      	str	r3, [r7, #8]
	setCursor(textLeftBound, y);
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	b2da      	uxtb	r2, r3
 8002d7c:	1dbb      	adds	r3, r7, #6
 8002d7e:	781b      	ldrb	r3, [r3, #0]
 8002d80:	0019      	movs	r1, r3
 8002d82:	0010      	movs	r0, r2
 8002d84:	f000 f846 	bl	8002e14 <setCursor>
	drawText(str, hspi);
 8002d88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	0011      	movs	r1, r2
 8002d8e:	0018      	movs	r0, r3
 8002d90:	f7ff fe58 	bl	8002a44 <drawText>
 8002d94:	e006      	b.n	8002da4 <drawCenteredTextWithPadding+0x1a0>
	if (y+textSize*8 > HEIGHT) return;
 8002d96:	46c0      	nop			; (mov r8, r8)
 8002d98:	e004      	b.n	8002da4 <drawCenteredTextWithPadding+0x1a0>
	if (leftBound < 0) return;
 8002d9a:	46c0      	nop			; (mov r8, r8)
 8002d9c:	e002      	b.n	8002da4 <drawCenteredTextWithPadding+0x1a0>
	if (rightBound > WIDTH) return;
 8002d9e:	46c0      	nop			; (mov r8, r8)
 8002da0:	e000      	b.n	8002da4 <drawCenteredTextWithPadding+0x1a0>
	if (maxLength < strSize) return;		// size should not be greater than max
 8002da2:	46c0      	nop			; (mov r8, r8)
}
 8002da4:	46bd      	mov	sp, r7
 8002da6:	b006      	add	sp, #24
 8002da8:	bdb0      	pop	{r4, r5, r7, pc}
 8002daa:	46c0      	nop			; (mov r8, r8)
 8002dac:	200000f6 	.word	0x200000f6
 8002db0:	200000fa 	.word	0x200000fa

08002db4 <clearTextLine>:

// clear a line of text. y gives upper bound of text box
void clearTextLine(uint8_t y, SPI_HandleTypeDef *hspi) {
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b084      	sub	sp, #16
 8002db8:	af02      	add	r7, sp, #8
 8002dba:	0002      	movs	r2, r0
 8002dbc:	6039      	str	r1, [r7, #0]
 8002dbe:	1dfb      	adds	r3, r7, #7
 8002dc0:	701a      	strb	r2, [r3, #0]
	fillRect(0, y, WIDTH, textSize*8, bg, hspi);
 8002dc2:	4b0a      	ldr	r3, [pc, #40]	; (8002dec <clearTextLine+0x38>)
 8002dc4:	781b      	ldrb	r3, [r3, #0]
 8002dc6:	00db      	lsls	r3, r3, #3
 8002dc8:	b2d8      	uxtb	r0, r3
 8002dca:	4b09      	ldr	r3, [pc, #36]	; (8002df0 <clearTextLine+0x3c>)
 8002dcc:	881b      	ldrh	r3, [r3, #0]
 8002dce:	1dfa      	adds	r2, r7, #7
 8002dd0:	7811      	ldrb	r1, [r2, #0]
 8002dd2:	683a      	ldr	r2, [r7, #0]
 8002dd4:	9201      	str	r2, [sp, #4]
 8002dd6:	9300      	str	r3, [sp, #0]
 8002dd8:	0003      	movs	r3, r0
 8002dda:	2280      	movs	r2, #128	; 0x80
 8002ddc:	2000      	movs	r0, #0
 8002dde:	f7ff fa60 	bl	80022a2 <fillRect>
}
 8002de2:	46c0      	nop			; (mov r8, r8)
 8002de4:	46bd      	mov	sp, r7
 8002de6:	b002      	add	sp, #8
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	46c0      	nop			; (mov r8, r8)
 8002dec:	200000f6 	.word	0x200000f6
 8002df0:	200000fa 	.word	0x200000fa

08002df4 <setBackgroundColor>:

// ---- getters and setters ----
// sets static variables
void setBackgroundColor(uint16_t color) {bg = color;}
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b082      	sub	sp, #8
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	0002      	movs	r2, r0
 8002dfc:	1dbb      	adds	r3, r7, #6
 8002dfe:	801a      	strh	r2, [r3, #0]
 8002e00:	4b03      	ldr	r3, [pc, #12]	; (8002e10 <setBackgroundColor+0x1c>)
 8002e02:	1dba      	adds	r2, r7, #6
 8002e04:	8812      	ldrh	r2, [r2, #0]
 8002e06:	801a      	strh	r2, [r3, #0]
 8002e08:	46c0      	nop			; (mov r8, r8)
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	b002      	add	sp, #8
 8002e0e:	bd80      	pop	{r7, pc}
 8002e10:	200000fa 	.word	0x200000fa

08002e14 <setCursor>:

void setCursor(uint8_t x, uint8_t y) {
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b082      	sub	sp, #8
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	0002      	movs	r2, r0
 8002e1c:	1dfb      	adds	r3, r7, #7
 8002e1e:	701a      	strb	r2, [r3, #0]
 8002e20:	1dbb      	adds	r3, r7, #6
 8002e22:	1c0a      	adds	r2, r1, #0
 8002e24:	701a      	strb	r2, [r3, #0]
	cursorX = x;
 8002e26:	4b06      	ldr	r3, [pc, #24]	; (8002e40 <setCursor+0x2c>)
 8002e28:	1dfa      	adds	r2, r7, #7
 8002e2a:	7812      	ldrb	r2, [r2, #0]
 8002e2c:	701a      	strb	r2, [r3, #0]
	cursorY = y;
 8002e2e:	4b05      	ldr	r3, [pc, #20]	; (8002e44 <setCursor+0x30>)
 8002e30:	1dba      	adds	r2, r7, #6
 8002e32:	7812      	ldrb	r2, [r2, #0]
 8002e34:	701a      	strb	r2, [r3, #0]
}
 8002e36:	46c0      	nop			; (mov r8, r8)
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	b002      	add	sp, #8
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	46c0      	nop			; (mov r8, r8)
 8002e40:	200000f4 	.word	0x200000f4
 8002e44:	200000f5 	.word	0x200000f5

08002e48 <setTextSize>:

void setTextSize(uint8_t size) {textSize = size;}
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b082      	sub	sp, #8
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	0002      	movs	r2, r0
 8002e50:	1dfb      	adds	r3, r7, #7
 8002e52:	701a      	strb	r2, [r3, #0]
 8002e54:	4b03      	ldr	r3, [pc, #12]	; (8002e64 <setTextSize+0x1c>)
 8002e56:	1dfa      	adds	r2, r7, #7
 8002e58:	7812      	ldrb	r2, [r2, #0]
 8002e5a:	701a      	strb	r2, [r3, #0]
 8002e5c:	46c0      	nop			; (mov r8, r8)
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	b002      	add	sp, #8
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	200000f6 	.word	0x200000f6

08002e68 <setTextColor>:

void setTextColor(uint16_t color) {textColor = color;}
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b082      	sub	sp, #8
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	0002      	movs	r2, r0
 8002e70:	1dbb      	adds	r3, r7, #6
 8002e72:	801a      	strh	r2, [r3, #0]
 8002e74:	4b03      	ldr	r3, [pc, #12]	; (8002e84 <setTextColor+0x1c>)
 8002e76:	1dba      	adds	r2, r7, #6
 8002e78:	8812      	ldrh	r2, [r2, #0]
 8002e7a:	801a      	strh	r2, [r3, #0]
 8002e7c:	46c0      	nop			; (mov r8, r8)
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	b002      	add	sp, #8
 8002e82:	bd80      	pop	{r7, pc}
 8002e84:	200000f8 	.word	0x200000f8

08002e88 <batteryManager>:

static const float batteryCapacity[];
static uint16_t batteryCapacityArraySize = 179;

// spi used to turn display on/off and drawing battery graphic
void batteryManager(ADC_HandleTypeDef *hadc, SPI_HandleTypeDef *hspi, TIM_HandleTypeDef *timerStopwatchTim, TIM_HandleTypeDef *backlightTim) {
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b084      	sub	sp, #16
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	60f8      	str	r0, [r7, #12]
 8002e90:	60b9      	str	r1, [r7, #8]
 8002e92:	607a      	str	r2, [r7, #4]
 8002e94:	603b      	str	r3, [r7, #0]
	if (canSampleBattery) {
 8002e96:	4b0d      	ldr	r3, [pc, #52]	; (8002ecc <batteryManager+0x44>)
 8002e98:	781b      	ldrb	r3, [r3, #0]
 8002e9a:	b2db      	uxtb	r3, r3
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d011      	beq.n	8002ec4 <batteryManager+0x3c>
		canSampleBattery = 0;
 8002ea0:	4b0a      	ldr	r3, [pc, #40]	; (8002ecc <batteryManager+0x44>)
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	701a      	strb	r2, [r3, #0]

		battPercentage = getBatteryPercentage(hadc);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	0018      	movs	r0, r3
 8002eaa:	f000 f813 	bl	8002ed4 <getBatteryPercentage>
 8002eae:	0003      	movs	r3, r0
 8002eb0:	001a      	movs	r2, r3
 8002eb2:	4b07      	ldr	r3, [pc, #28]	; (8002ed0 <batteryManager+0x48>)
 8002eb4:	801a      	strh	r2, [r3, #0]
//			}
//			HAL_GPIO_WritePin(POWER_SUPPLY_ENABLE_PORT, POWER_SUPPLY_ENABLE_PIN, GPIO_PIN_SET);
//			bState = batteryNormal;
//		}

		drawBattery(battPercentage, hspi);
 8002eb6:	4b06      	ldr	r3, [pc, #24]	; (8002ed0 <batteryManager+0x48>)
 8002eb8:	881b      	ldrh	r3, [r3, #0]
 8002eba:	68ba      	ldr	r2, [r7, #8]
 8002ebc:	0011      	movs	r1, r2
 8002ebe:	0018      	movs	r0, r3
 8002ec0:	f003 fbb2 	bl	8006628 <drawBattery>
	}
}
 8002ec4:	46c0      	nop			; (mov r8, r8)
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	b004      	add	sp, #16
 8002eca:	bd80      	pop	{r7, pc}
 8002ecc:	2000014e 	.word	0x2000014e
 8002ed0:	2000014c 	.word	0x2000014c

08002ed4 <getBatteryPercentage>:
	setDisplayBacklight(100, backlightTim);
	runTimerStopwatchBase(timerStopwatchTim);
}

// should return a number from 0-100
uint16_t getBatteryPercentage(ADC_HandleTypeDef *hadc) {
 8002ed4:	b5b0      	push	{r4, r5, r7, lr}
 8002ed6:	b086      	sub	sp, #24
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
	float v, temp;
	uint8_t index;

	// enable adc voltage divider for measurements, disable after
	HAL_GPIO_WritePin(ADC_DIVIDER_PORT, ADC_DIVIDER_PIN, GPIO_PIN_SET);
 8002edc:	23a0      	movs	r3, #160	; 0xa0
 8002ede:	05db      	lsls	r3, r3, #23
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	2102      	movs	r1, #2
 8002ee4:	0018      	movs	r0, r3
 8002ee6:	f005 f8ff 	bl	80080e8 <HAL_GPIO_WritePin>
	HAL_ADC_Start(hadc);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	0018      	movs	r0, r3
 8002eee:	f004 f8ab 	bl	8007048 <HAL_ADC_Start>

	HAL_ADC_PollForConversion(hadc, HAL_MAX_DELAY);
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	425a      	negs	r2, r3
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	0011      	movs	r1, r2
 8002efa:	0018      	movs	r0, r3
 8002efc:	f004 f938 	bl	8007170 <HAL_ADC_PollForConversion>
	v = 3.3*HAL_ADC_GetValue(hadc)/(0xFFF);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	0018      	movs	r0, r3
 8002f04:	f004 f9ca 	bl	800729c <HAL_ADC_GetValue>
 8002f08:	0003      	movs	r3, r0
 8002f0a:	0018      	movs	r0, r3
 8002f0c:	f7fe fda8 	bl	8001a60 <__aeabi_ui2d>
 8002f10:	4a2c      	ldr	r2, [pc, #176]	; (8002fc4 <getBatteryPercentage+0xf0>)
 8002f12:	4b2d      	ldr	r3, [pc, #180]	; (8002fc8 <getBatteryPercentage+0xf4>)
 8002f14:	f7fe faf8 	bl	8001508 <__aeabi_dmul>
 8002f18:	0003      	movs	r3, r0
 8002f1a:	000c      	movs	r4, r1
 8002f1c:	0018      	movs	r0, r3
 8002f1e:	0021      	movs	r1, r4
 8002f20:	2200      	movs	r2, #0
 8002f22:	4b2a      	ldr	r3, [pc, #168]	; (8002fcc <getBatteryPercentage+0xf8>)
 8002f24:	f7fd ffee 	bl	8000f04 <__aeabi_ddiv>
 8002f28:	0003      	movs	r3, r0
 8002f2a:	000c      	movs	r4, r1
 8002f2c:	0018      	movs	r0, r3
 8002f2e:	0021      	movs	r1, r4
 8002f30:	f7fe fdc8 	bl	8001ac4 <__aeabi_d2f>
 8002f34:	1c03      	adds	r3, r0, #0
 8002f36:	617b      	str	r3, [r7, #20]

	HAL_ADC_Stop(hadc);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	0018      	movs	r0, r3
 8002f3c:	f004 f8d8 	bl	80070f0 <HAL_ADC_Stop>
	HAL_GPIO_WritePin(ADC_DIVIDER_PORT, ADC_DIVIDER_PIN, GPIO_PIN_RESET);
 8002f40:	23a0      	movs	r3, #160	; 0xa0
 8002f42:	05db      	lsls	r3, r3, #23
 8002f44:	2200      	movs	r2, #0
 8002f46:	2102      	movs	r1, #2
 8002f48:	0018      	movs	r0, r3
 8002f4a:	f005 f8cd 	bl	80080e8 <HAL_GPIO_WritePin>
//	return v*10;

	// trying to look only for 4.0-3.4. anything above 4.0 is 100%, anything below 3.4 is 0%
	// scaled voltages (3.3/4.2) at 3.1429-2.6714
	// indices at 2-153. have to scale and flip to go from 100-0 since 2->100%
	index = search(v);
 8002f4e:	2513      	movs	r5, #19
 8002f50:	197c      	adds	r4, r7, r5
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	1c18      	adds	r0, r3, #0
 8002f56:	f000 f841 	bl	8002fdc <search>
 8002f5a:	0003      	movs	r3, r0
 8002f5c:	7023      	strb	r3, [r4, #0]
	if (index < 2) return 100;
 8002f5e:	197b      	adds	r3, r7, r5
 8002f60:	781b      	ldrb	r3, [r3, #0]
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d801      	bhi.n	8002f6a <getBatteryPercentage+0x96>
 8002f66:	2364      	movs	r3, #100	; 0x64
 8002f68:	e028      	b.n	8002fbc <getBatteryPercentage+0xe8>
	else if (index >= 153) return 0;
 8002f6a:	2313      	movs	r3, #19
 8002f6c:	18fb      	adds	r3, r7, r3
 8002f6e:	781b      	ldrb	r3, [r3, #0]
 8002f70:	2b98      	cmp	r3, #152	; 0x98
 8002f72:	d901      	bls.n	8002f78 <getBatteryPercentage+0xa4>
 8002f74:	2300      	movs	r3, #0
 8002f76:	e021      	b.n	8002fbc <getBatteryPercentage+0xe8>
	else {
		index -= 2;
 8002f78:	2113      	movs	r1, #19
 8002f7a:	187b      	adds	r3, r7, r1
 8002f7c:	187a      	adds	r2, r7, r1
 8002f7e:	7812      	ldrb	r2, [r2, #0]
 8002f80:	3a02      	subs	r2, #2
 8002f82:	701a      	strb	r2, [r3, #0]
		temp = index*(100.0/(153-2));
 8002f84:	187b      	adds	r3, r7, r1
 8002f86:	781b      	ldrb	r3, [r3, #0]
 8002f88:	0018      	movs	r0, r3
 8002f8a:	f7fe fd2f 	bl	80019ec <__aeabi_i2d>
 8002f8e:	4a10      	ldr	r2, [pc, #64]	; (8002fd0 <getBatteryPercentage+0xfc>)
 8002f90:	4b10      	ldr	r3, [pc, #64]	; (8002fd4 <getBatteryPercentage+0x100>)
 8002f92:	f7fe fab9 	bl	8001508 <__aeabi_dmul>
 8002f96:	0003      	movs	r3, r0
 8002f98:	000c      	movs	r4, r1
 8002f9a:	0018      	movs	r0, r3
 8002f9c:	0021      	movs	r1, r4
 8002f9e:	f7fe fd91 	bl	8001ac4 <__aeabi_d2f>
 8002fa2:	1c03      	adds	r3, r0, #0
 8002fa4:	60fb      	str	r3, [r7, #12]
		temp = 100-temp;
 8002fa6:	68f9      	ldr	r1, [r7, #12]
 8002fa8:	480b      	ldr	r0, [pc, #44]	; (8002fd8 <getBatteryPercentage+0x104>)
 8002faa:	f7fd fd87 	bl	8000abc <__aeabi_fsub>
 8002fae:	1c03      	adds	r3, r0, #0
 8002fb0:	60fb      	str	r3, [r7, #12]
		return temp;
 8002fb2:	68f8      	ldr	r0, [r7, #12]
 8002fb4:	f7fd fa60 	bl	8000478 <__aeabi_f2uiz>
 8002fb8:	0003      	movs	r3, r0
 8002fba:	b29b      	uxth	r3, r3
	}
}
 8002fbc:	0018      	movs	r0, r3
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	b006      	add	sp, #24
 8002fc2:	bdb0      	pop	{r4, r5, r7, pc}
 8002fc4:	66666666 	.word	0x66666666
 8002fc8:	400a6666 	.word	0x400a6666
 8002fcc:	40affe00 	.word	0x40affe00
 8002fd0:	6254c4aa 	.word	0x6254c4aa
 8002fd4:	3fe5312a 	.word	0x3fe5312a
 8002fd8:	42c80000 	.word	0x42c80000

08002fdc <search>:

// should return index in array
uint8_t search(float val) {
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b084      	sub	sp, #16
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
	// O(n) lookup. array is only size=179.
	uint8_t i;
	for (i = 0; i < batteryCapacityArraySize; i++) {
 8002fe4:	230f      	movs	r3, #15
 8002fe6:	18fb      	adds	r3, r7, r3
 8002fe8:	2200      	movs	r2, #0
 8002fea:	701a      	strb	r2, [r3, #0]
 8002fec:	e015      	b.n	800301a <search+0x3e>
		if (val > batteryCapacity[i]) return i;
 8002fee:	230f      	movs	r3, #15
 8002ff0:	18fb      	adds	r3, r7, r3
 8002ff2:	781a      	ldrb	r2, [r3, #0]
 8002ff4:	4b10      	ldr	r3, [pc, #64]	; (8003038 <search+0x5c>)
 8002ff6:	0092      	lsls	r2, r2, #2
 8002ff8:	58d3      	ldr	r3, [r2, r3]
 8002ffa:	1c19      	adds	r1, r3, #0
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	f7fd fa27 	bl	8000450 <__aeabi_fcmpgt>
 8003002:	1e03      	subs	r3, r0, #0
 8003004:	d003      	beq.n	800300e <search+0x32>
 8003006:	230f      	movs	r3, #15
 8003008:	18fb      	adds	r3, r7, r3
 800300a:	781b      	ldrb	r3, [r3, #0]
 800300c:	e010      	b.n	8003030 <search+0x54>
	for (i = 0; i < batteryCapacityArraySize; i++) {
 800300e:	210f      	movs	r1, #15
 8003010:	187b      	adds	r3, r7, r1
 8003012:	781a      	ldrb	r2, [r3, #0]
 8003014:	187b      	adds	r3, r7, r1
 8003016:	3201      	adds	r2, #1
 8003018:	701a      	strb	r2, [r3, #0]
 800301a:	230f      	movs	r3, #15
 800301c:	18fb      	adds	r3, r7, r3
 800301e:	781b      	ldrb	r3, [r3, #0]
 8003020:	b29a      	uxth	r2, r3
 8003022:	4b06      	ldr	r3, [pc, #24]	; (800303c <search+0x60>)
 8003024:	881b      	ldrh	r3, [r3, #0]
 8003026:	429a      	cmp	r2, r3
 8003028:	d3e1      	bcc.n	8002fee <search+0x12>
	}
	return batteryCapacityArraySize;
 800302a:	4b04      	ldr	r3, [pc, #16]	; (800303c <search+0x60>)
 800302c:	881b      	ldrh	r3, [r3, #0]
 800302e:	b2db      	uxtb	r3, r3
}
 8003030:	0018      	movs	r0, r3
 8003032:	46bd      	mov	sp, r7
 8003034:	b004      	add	sp, #16
 8003036:	bd80      	pop	{r7, pc}
 8003038:	0800c580 	.word	0x0800c580
 800303c:	20000000 	.word	0x20000000

08003040 <setTime>:

static uint16_t century = 20;		// holds upper 2 digits of year that RTC doesn't hold
// ---- RTC setters ----
// set rtc time. uses personal struct as arg
// assumes t's fields are aleady set to something or not null
void setTime(struct times *t, RTC_HandleTypeDef *hrtc) {
 8003040:	b590      	push	{r4, r7, lr}
 8003042:	b089      	sub	sp, #36	; 0x24
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
 8003048:	6039      	str	r1, [r7, #0]
	RTC_TimeTypeDef stime = {0};
 800304a:	210c      	movs	r1, #12
 800304c:	000c      	movs	r4, r1
 800304e:	187b      	adds	r3, r7, r1
 8003050:	0018      	movs	r0, r3
 8003052:	2314      	movs	r3, #20
 8003054:	001a      	movs	r2, r3
 8003056:	2100      	movs	r1, #0
 8003058:	f008 fc91 	bl	800b97e <memset>

	stime.Hours = t->hr;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	781a      	ldrb	r2, [r3, #0]
 8003060:	0021      	movs	r1, r4
 8003062:	187b      	adds	r3, r7, r1
 8003064:	701a      	strb	r2, [r3, #0]
	stime.Minutes = t->min;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	785a      	ldrb	r2, [r3, #1]
 800306a:	187b      	adds	r3, r7, r1
 800306c:	705a      	strb	r2, [r3, #1]
	stime.Seconds = t->sec;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	789a      	ldrb	r2, [r3, #2]
 8003072:	187b      	adds	r3, r7, r1
 8003074:	709a      	strb	r2, [r3, #2]

	stime.TimeFormat = RTC_HOURFORMAT_24;
 8003076:	187b      	adds	r3, r7, r1
 8003078:	2200      	movs	r2, #0
 800307a:	70da      	strb	r2, [r3, #3]

	// not really using
	stime.SubSeconds = 0;
 800307c:	187b      	adds	r3, r7, r1
 800307e:	2200      	movs	r2, #0
 8003080:	605a      	str	r2, [r3, #4]
	stime.SecondFraction = 0;
 8003082:	187b      	adds	r3, r7, r1
 8003084:	2200      	movs	r2, #0
 8003086:	609a      	str	r2, [r3, #8]
	stime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003088:	187b      	adds	r3, r7, r1
 800308a:	2200      	movs	r2, #0
 800308c:	60da      	str	r2, [r3, #12]
	stime.StoreOperation = RTC_STOREOPERATION_SET;
 800308e:	187b      	adds	r3, r7, r1
 8003090:	2280      	movs	r2, #128	; 0x80
 8003092:	02d2      	lsls	r2, r2, #11
 8003094:	611a      	str	r2, [r3, #16]

	HAL_RTC_SetTime(hrtc, &stime, RTC_FORMAT_BIN);
 8003096:	1879      	adds	r1, r7, r1
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	2200      	movs	r2, #0
 800309c:	0018      	movs	r0, r3
 800309e:	f006 f983 	bl	80093a8 <HAL_RTC_SetTime>
}
 80030a2:	46c0      	nop			; (mov r8, r8)
 80030a4:	46bd      	mov	sp, r7
 80030a6:	b009      	add	sp, #36	; 0x24
 80030a8:	bd90      	pop	{r4, r7, pc}
	...

080030ac <setDate>:

// set rtc date. uses personal struct as arg
// assumes struct has values
void setDate(struct dates *d, RTC_HandleTypeDef *hrtc) {
 80030ac:	b590      	push	{r4, r7, lr}
 80030ae:	b085      	sub	sp, #20
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
 80030b4:	6039      	str	r1, [r7, #0]
	RTC_DateTypeDef sdate = {0};
 80030b6:	240c      	movs	r4, #12
 80030b8:	193b      	adds	r3, r7, r4
 80030ba:	2200      	movs	r2, #0
 80030bc:	601a      	str	r2, [r3, #0]

	sdate.Month = d->month;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	789a      	ldrb	r2, [r3, #2]
 80030c2:	193b      	adds	r3, r7, r4
 80030c4:	705a      	strb	r2, [r3, #1]
	sdate.Date = d->date;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	78da      	ldrb	r2, [r3, #3]
 80030ca:	193b      	adds	r3, r7, r4
 80030cc:	709a      	strb	r2, [r3, #2]
	sdate.Year = d->yr % 100; 		// set only between 0-99. limitation of RTC
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	881b      	ldrh	r3, [r3, #0]
 80030d2:	2164      	movs	r1, #100	; 0x64
 80030d4:	0018      	movs	r0, r3
 80030d6:	f7fd f8a5 	bl	8000224 <__aeabi_uidivmod>
 80030da:	000b      	movs	r3, r1
 80030dc:	b29b      	uxth	r3, r3
 80030de:	b2da      	uxtb	r2, r3
 80030e0:	193b      	adds	r3, r7, r4
 80030e2:	70da      	strb	r2, [r3, #3]
	century = d->yr / 100;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	881b      	ldrh	r3, [r3, #0]
 80030e8:	2164      	movs	r1, #100	; 0x64
 80030ea:	0018      	movs	r0, r3
 80030ec:	f7fd f814 	bl	8000118 <__udivsi3>
 80030f0:	0003      	movs	r3, r0
 80030f2:	b29a      	uxth	r2, r3
 80030f4:	4b0c      	ldr	r3, [pc, #48]	; (8003128 <setDate+0x7c>)
 80030f6:	801a      	strh	r2, [r3, #0]

	sdate.WeekDay = weekdayCalculator(d->yr, d->month, d->date);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	8818      	ldrh	r0, [r3, #0]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	7899      	ldrb	r1, [r3, #2]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	78db      	ldrb	r3, [r3, #3]
 8003104:	001a      	movs	r2, r3
 8003106:	f000 fb3f 	bl	8003788 <weekdayCalculator>
 800310a:	0003      	movs	r3, r0
 800310c:	001a      	movs	r2, r3
 800310e:	193b      	adds	r3, r7, r4
 8003110:	701a      	strb	r2, [r3, #0]

	HAL_RTC_SetDate(hrtc, &sdate, RTC_FORMAT_BIN);
 8003112:	1939      	adds	r1, r7, r4
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	2200      	movs	r2, #0
 8003118:	0018      	movs	r0, r3
 800311a:	f006 fa65 	bl	80095e8 <HAL_RTC_SetDate>
}
 800311e:	46c0      	nop			; (mov r8, r8)
 8003120:	46bd      	mov	sp, r7
 8003122:	b005      	add	sp, #20
 8003124:	bd90      	pop	{r4, r7, pc}
 8003126:	46c0      	nop			; (mov r8, r8)
 8003128:	20000002 	.word	0x20000002

0800312c <setDateTime>:

void setDateTime(struct dates *d, struct times *t, RTC_HandleTypeDef *hrtc) {
 800312c:	b580      	push	{r7, lr}
 800312e:	b084      	sub	sp, #16
 8003130:	af00      	add	r7, sp, #0
 8003132:	60f8      	str	r0, [r7, #12]
 8003134:	60b9      	str	r1, [r7, #8]
 8003136:	607a      	str	r2, [r7, #4]
	setDate(d, hrtc);
 8003138:	687a      	ldr	r2, [r7, #4]
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	0011      	movs	r1, r2
 800313e:	0018      	movs	r0, r3
 8003140:	f7ff ffb4 	bl	80030ac <setDate>
	setTime(t, hrtc);
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	0011      	movs	r1, r2
 800314a:	0018      	movs	r0, r3
 800314c:	f7ff ff78 	bl	8003040 <setTime>
}
 8003150:	46c0      	nop			; (mov r8, r8)
 8003152:	46bd      	mov	sp, r7
 8003154:	b004      	add	sp, #16
 8003156:	bd80      	pop	{r7, pc}

08003158 <setAlarm>:

// for time of day+week
void setAlarm(struct alarmTimes *a, RTC_HandleTypeDef *hrtc) {
 8003158:	b5b0      	push	{r4, r5, r7, lr}
 800315a:	b092      	sub	sp, #72	; 0x48
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
 8003160:	6039      	str	r1, [r7, #0]
	RTC_AlarmTypeDef salarm = {0};
 8003162:	2520      	movs	r5, #32
 8003164:	197b      	adds	r3, r7, r5
 8003166:	0018      	movs	r0, r3
 8003168:	2328      	movs	r3, #40	; 0x28
 800316a:	001a      	movs	r2, r3
 800316c:	2100      	movs	r1, #0
 800316e:	f008 fc06 	bl	800b97e <memset>
	RTC_TimeTypeDef salarmtime = {0};
 8003172:	210c      	movs	r1, #12
 8003174:	000c      	movs	r4, r1
 8003176:	187b      	adds	r3, r7, r1
 8003178:	0018      	movs	r0, r3
 800317a:	2314      	movs	r3, #20
 800317c:	001a      	movs	r2, r3
 800317e:	2100      	movs	r1, #0
 8003180:	f008 fbfd 	bl	800b97e <memset>

	salarmtime.Hours = a->hr;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	781a      	ldrb	r2, [r3, #0]
 8003188:	0021      	movs	r1, r4
 800318a:	187b      	adds	r3, r7, r1
 800318c:	701a      	strb	r2, [r3, #0]
	salarmtime.Minutes = a->min;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	785a      	ldrb	r2, [r3, #1]
 8003192:	187b      	adds	r3, r7, r1
 8003194:	705a      	strb	r2, [r3, #1]
	salarmtime.Seconds = a->sec;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	789a      	ldrb	r2, [r3, #2]
 800319a:	187b      	adds	r3, r7, r1
 800319c:	709a      	strb	r2, [r3, #2]

	salarmtime.TimeFormat = RTC_HOURFORMAT_24;
 800319e:	187b      	adds	r3, r7, r1
 80031a0:	2200      	movs	r2, #0
 80031a2:	70da      	strb	r2, [r3, #3]
	salarmtime.SubSeconds = 0;
 80031a4:	187b      	adds	r3, r7, r1
 80031a6:	2200      	movs	r2, #0
 80031a8:	605a      	str	r2, [r3, #4]
	salarmtime.SecondFraction = 0;
 80031aa:	187b      	adds	r3, r7, r1
 80031ac:	2200      	movs	r2, #0
 80031ae:	609a      	str	r2, [r3, #8]
	salarmtime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80031b0:	187b      	adds	r3, r7, r1
 80031b2:	2200      	movs	r2, #0
 80031b4:	60da      	str	r2, [r3, #12]
	salarmtime.StoreOperation = RTC_STOREOPERATION_RESET;
 80031b6:	187b      	adds	r3, r7, r1
 80031b8:	2200      	movs	r2, #0
 80031ba:	611a      	str	r2, [r3, #16]

	salarm.AlarmTime = salarmtime;
 80031bc:	197b      	adds	r3, r7, r5
 80031be:	187a      	adds	r2, r7, r1
 80031c0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80031c2:	c313      	stmia	r3!, {r0, r1, r4}
 80031c4:	ca03      	ldmia	r2!, {r0, r1}
 80031c6:	c303      	stmia	r3!, {r0, r1}
	salarm.AlarmMask = RTC_ALARMMASK_NONE;		// allows comparison for all fields (sec, min, hour, weekday)
 80031c8:	197b      	adds	r3, r7, r5
 80031ca:	2200      	movs	r2, #0
 80031cc:	615a      	str	r2, [r3, #20]
	salarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80031ce:	197b      	adds	r3, r7, r5
 80031d0:	2200      	movs	r2, #0
 80031d2:	619a      	str	r2, [r3, #24]
	salarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_WEEKDAY;
 80031d4:	197b      	adds	r3, r7, r5
 80031d6:	2280      	movs	r2, #128	; 0x80
 80031d8:	05d2      	lsls	r2, r2, #23
 80031da:	61da      	str	r2, [r3, #28]
	salarm.AlarmDateWeekDay = a->weekday;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	78d9      	ldrb	r1, [r3, #3]
 80031e0:	197b      	adds	r3, r7, r5
 80031e2:	2220      	movs	r2, #32
 80031e4:	5499      	strb	r1, [r3, r2]
	salarm.Alarm = RTC_ALARM_A;
 80031e6:	197b      	adds	r3, r7, r5
 80031e8:	2280      	movs	r2, #128	; 0x80
 80031ea:	0052      	lsls	r2, r2, #1
 80031ec:	625a      	str	r2, [r3, #36]	; 0x24

	HAL_RTC_SetAlarm_IT(hrtc, &salarm, RTC_FORMAT_BIN);
 80031ee:	1979      	adds	r1, r7, r5
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	2200      	movs	r2, #0
 80031f4:	0018      	movs	r0, r3
 80031f6:	f006 faf3 	bl	80097e0 <HAL_RTC_SetAlarm_IT>
}
 80031fa:	46c0      	nop			; (mov r8, r8)
 80031fc:	46bd      	mov	sp, r7
 80031fe:	b012      	add	sp, #72	; 0x48
 8003200:	bdb0      	pop	{r4, r5, r7, pc}
	...

08003204 <setClockAlarm>:

// set an alarm for the next second for triggering display updates
void setClockAlarm(RTC_HandleTypeDef *hrtc) {
 8003204:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003206:	b097      	sub	sp, #92	; 0x5c
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
	RTC_AlarmTypeDef salarm = {0};
 800320c:	232c      	movs	r3, #44	; 0x2c
 800320e:	18fb      	adds	r3, r7, r3
 8003210:	0018      	movs	r0, r3
 8003212:	2328      	movs	r3, #40	; 0x28
 8003214:	001a      	movs	r2, r3
 8003216:	2100      	movs	r1, #0
 8003218:	f008 fbb1 	bl	800b97e <memset>
	RTC_TimeTypeDef salarmtime = {0};
 800321c:	2318      	movs	r3, #24
 800321e:	18fb      	adds	r3, r7, r3
 8003220:	0018      	movs	r0, r3
 8003222:	2314      	movs	r3, #20
 8003224:	001a      	movs	r2, r3
 8003226:	2100      	movs	r1, #0
 8003228:	f008 fba9 	bl	800b97e <memset>

	// pull current time
	struct dates currentDate = {0};
 800322c:	2410      	movs	r4, #16
 800322e:	193b      	adds	r3, r7, r4
 8003230:	0018      	movs	r0, r3
 8003232:	2306      	movs	r3, #6
 8003234:	001a      	movs	r2, r3
 8003236:	2100      	movs	r1, #0
 8003238:	f008 fba1 	bl	800b97e <memset>
	struct times currentTime = {0};
 800323c:	250c      	movs	r5, #12
 800323e:	197b      	adds	r3, r7, r5
 8003240:	0018      	movs	r0, r3
 8003242:	2303      	movs	r3, #3
 8003244:	001a      	movs	r2, r3
 8003246:	2100      	movs	r1, #0
 8003248:	f008 fb99 	bl	800b97e <memset>
	getDateTime(&currentDate, &currentTime, hrtc);
 800324c:	687a      	ldr	r2, [r7, #4]
 800324e:	1979      	adds	r1, r7, r5
 8003250:	193b      	adds	r3, r7, r4
 8003252:	0018      	movs	r0, r3
 8003254:	f000 f9aa 	bl	80035ac <getDateTime>

	// start setting alarm
	struct alarmTimes a = {0};
 8003258:	2308      	movs	r3, #8
 800325a:	18fb      	adds	r3, r7, r3
 800325c:	2200      	movs	r2, #0
 800325e:	601a      	str	r2, [r3, #0]
	uint8_t s,m,h,w;
	// set for only 1/min on low battery mode
//	bState = batteryLow;
	if (bState == batteryLow || bState == batteryReallyLow) {
 8003260:	4ba1      	ldr	r3, [pc, #644]	; (80034e8 <setClockAlarm+0x2e4>)
 8003262:	781b      	ldrb	r3, [r3, #0]
 8003264:	2b01      	cmp	r3, #1
 8003266:	d003      	beq.n	8003270 <setClockAlarm+0x6c>
 8003268:	4b9f      	ldr	r3, [pc, #636]	; (80034e8 <setClockAlarm+0x2e4>)
 800326a:	781b      	ldrb	r3, [r3, #0]
 800326c:	2b02      	cmp	r3, #2
 800326e:	d164      	bne.n	800333a <setClockAlarm+0x136>
		s = currentTime.sec;
 8003270:	2157      	movs	r1, #87	; 0x57
 8003272:	187b      	adds	r3, r7, r1
 8003274:	250c      	movs	r5, #12
 8003276:	197a      	adds	r2, r7, r5
 8003278:	7892      	ldrb	r2, [r2, #2]
 800327a:	701a      	strb	r2, [r3, #0]
		m = currentTime.min + s/60 + 1;
 800327c:	197b      	adds	r3, r7, r5
 800327e:	785c      	ldrb	r4, [r3, #1]
 8003280:	187b      	adds	r3, r7, r1
 8003282:	781b      	ldrb	r3, [r3, #0]
 8003284:	213c      	movs	r1, #60	; 0x3c
 8003286:	0018      	movs	r0, r3
 8003288:	f7fc ff46 	bl	8000118 <__udivsi3>
 800328c:	0003      	movs	r3, r0
 800328e:	b2db      	uxtb	r3, r3
 8003290:	18e3      	adds	r3, r4, r3
 8003292:	b2da      	uxtb	r2, r3
 8003294:	2156      	movs	r1, #86	; 0x56
 8003296:	187b      	adds	r3, r7, r1
 8003298:	3201      	adds	r2, #1
 800329a:	701a      	strb	r2, [r3, #0]
		h = currentTime.hr + m/60;
 800329c:	197b      	adds	r3, r7, r5
 800329e:	781c      	ldrb	r4, [r3, #0]
 80032a0:	187b      	adds	r3, r7, r1
 80032a2:	781b      	ldrb	r3, [r3, #0]
 80032a4:	213c      	movs	r1, #60	; 0x3c
 80032a6:	0018      	movs	r0, r3
 80032a8:	f7fc ff36 	bl	8000118 <__udivsi3>
 80032ac:	0003      	movs	r3, r0
 80032ae:	b2da      	uxtb	r2, r3
 80032b0:	2155      	movs	r1, #85	; 0x55
 80032b2:	187b      	adds	r3, r7, r1
 80032b4:	18a2      	adds	r2, r4, r2
 80032b6:	701a      	strb	r2, [r3, #0]
		w = currentDate.weekday + h/24;
 80032b8:	2310      	movs	r3, #16
 80032ba:	18fb      	adds	r3, r7, r3
 80032bc:	791c      	ldrb	r4, [r3, #4]
 80032be:	187b      	adds	r3, r7, r1
 80032c0:	781b      	ldrb	r3, [r3, #0]
 80032c2:	2118      	movs	r1, #24
 80032c4:	0018      	movs	r0, r3
 80032c6:	f7fc ff27 	bl	8000118 <__udivsi3>
 80032ca:	0003      	movs	r3, r0
 80032cc:	b2da      	uxtb	r2, r3
 80032ce:	2354      	movs	r3, #84	; 0x54
 80032d0:	18fb      	adds	r3, r7, r3
 80032d2:	18a2      	adds	r2, r4, r2
 80032d4:	701a      	strb	r2, [r3, #0]

		// for transitioning between centuries
		if (currentTime.min == 59 &&
 80032d6:	197b      	adds	r3, r7, r5
 80032d8:	785b      	ldrb	r3, [r3, #1]
 80032da:	2b3b      	cmp	r3, #59	; 0x3b
 80032dc:	d000      	beq.n	80032e0 <setClockAlarm+0xdc>
 80032de:	e091      	b.n	8003404 <setClockAlarm+0x200>
			currentTime.hr == 23 &&
 80032e0:	230c      	movs	r3, #12
 80032e2:	18fb      	adds	r3, r7, r3
 80032e4:	781b      	ldrb	r3, [r3, #0]
		if (currentTime.min == 59 &&
 80032e6:	2b17      	cmp	r3, #23
 80032e8:	d000      	beq.n	80032ec <setClockAlarm+0xe8>
 80032ea:	e08b      	b.n	8003404 <setClockAlarm+0x200>
			currentDate.yr % 100 == 99 &&
 80032ec:	2310      	movs	r3, #16
 80032ee:	18fb      	adds	r3, r7, r3
 80032f0:	881b      	ldrh	r3, [r3, #0]
 80032f2:	2164      	movs	r1, #100	; 0x64
 80032f4:	0018      	movs	r0, r3
 80032f6:	f7fc ff95 	bl	8000224 <__aeabi_uidivmod>
 80032fa:	000b      	movs	r3, r1
 80032fc:	b29b      	uxth	r3, r3
			currentTime.hr == 23 &&
 80032fe:	2b63      	cmp	r3, #99	; 0x63
 8003300:	d000      	beq.n	8003304 <setClockAlarm+0x100>
 8003302:	e07f      	b.n	8003404 <setClockAlarm+0x200>
			currentDate.month == 12 &&
 8003304:	2310      	movs	r3, #16
 8003306:	18fb      	adds	r3, r7, r3
 8003308:	789b      	ldrb	r3, [r3, #2]
			currentDate.yr % 100 == 99 &&
 800330a:	2b0c      	cmp	r3, #12
 800330c:	d000      	beq.n	8003310 <setClockAlarm+0x10c>
 800330e:	e079      	b.n	8003404 <setClockAlarm+0x200>
			currentDate.date == maxDaysInMonth(currentDate.month, currentDate.yr)) {
 8003310:	2110      	movs	r1, #16
 8003312:	187b      	adds	r3, r7, r1
 8003314:	78dc      	ldrb	r4, [r3, #3]
 8003316:	187b      	adds	r3, r7, r1
 8003318:	789a      	ldrb	r2, [r3, #2]
 800331a:	187b      	adds	r3, r7, r1
 800331c:	881b      	ldrh	r3, [r3, #0]
 800331e:	0019      	movs	r1, r3
 8003320:	0010      	movs	r0, r2
 8003322:	f000 fa85 	bl	8003830 <maxDaysInMonth>
 8003326:	0003      	movs	r3, r0
			currentDate.month == 12 &&
 8003328:	429c      	cmp	r4, r3
 800332a:	d16b      	bne.n	8003404 <setClockAlarm+0x200>
			century++;
 800332c:	4b6f      	ldr	r3, [pc, #444]	; (80034ec <setClockAlarm+0x2e8>)
 800332e:	881b      	ldrh	r3, [r3, #0]
 8003330:	3301      	adds	r3, #1
 8003332:	b29a      	uxth	r2, r3
 8003334:	4b6d      	ldr	r3, [pc, #436]	; (80034ec <setClockAlarm+0x2e8>)
 8003336:	801a      	strh	r2, [r3, #0]
		if (currentTime.min == 59 &&
 8003338:	e064      	b.n	8003404 <setClockAlarm+0x200>
		}
	}
	// else set 1/s
	else {
		s = currentTime.sec + 1;
 800333a:	250c      	movs	r5, #12
 800333c:	197b      	adds	r3, r7, r5
 800333e:	789a      	ldrb	r2, [r3, #2]
 8003340:	2157      	movs	r1, #87	; 0x57
 8003342:	187b      	adds	r3, r7, r1
 8003344:	3201      	adds	r2, #1
 8003346:	701a      	strb	r2, [r3, #0]
		m = currentTime.min + s/60;
 8003348:	197b      	adds	r3, r7, r5
 800334a:	785c      	ldrb	r4, [r3, #1]
 800334c:	187b      	adds	r3, r7, r1
 800334e:	781b      	ldrb	r3, [r3, #0]
 8003350:	213c      	movs	r1, #60	; 0x3c
 8003352:	0018      	movs	r0, r3
 8003354:	f7fc fee0 	bl	8000118 <__udivsi3>
 8003358:	0003      	movs	r3, r0
 800335a:	b2da      	uxtb	r2, r3
 800335c:	2156      	movs	r1, #86	; 0x56
 800335e:	187b      	adds	r3, r7, r1
 8003360:	18a2      	adds	r2, r4, r2
 8003362:	701a      	strb	r2, [r3, #0]
		h = currentTime.hr + m/60;
 8003364:	197b      	adds	r3, r7, r5
 8003366:	781c      	ldrb	r4, [r3, #0]
 8003368:	187b      	adds	r3, r7, r1
 800336a:	781b      	ldrb	r3, [r3, #0]
 800336c:	213c      	movs	r1, #60	; 0x3c
 800336e:	0018      	movs	r0, r3
 8003370:	f7fc fed2 	bl	8000118 <__udivsi3>
 8003374:	0003      	movs	r3, r0
 8003376:	b2da      	uxtb	r2, r3
 8003378:	2155      	movs	r1, #85	; 0x55
 800337a:	187b      	adds	r3, r7, r1
 800337c:	18a2      	adds	r2, r4, r2
 800337e:	701a      	strb	r2, [r3, #0]
		w = currentDate.weekday + h/24;
 8003380:	2310      	movs	r3, #16
 8003382:	18fb      	adds	r3, r7, r3
 8003384:	791c      	ldrb	r4, [r3, #4]
 8003386:	187b      	adds	r3, r7, r1
 8003388:	781b      	ldrb	r3, [r3, #0]
 800338a:	2118      	movs	r1, #24
 800338c:	0018      	movs	r0, r3
 800338e:	f7fc fec3 	bl	8000118 <__udivsi3>
 8003392:	0003      	movs	r3, r0
 8003394:	b2da      	uxtb	r2, r3
 8003396:	2354      	movs	r3, #84	; 0x54
 8003398:	18fb      	adds	r3, r7, r3
 800339a:	18a2      	adds	r2, r4, r2
 800339c:	701a      	strb	r2, [r3, #0]

		// for transitioning between centuries
		if (currentTime.sec == 59 &&			// need to check for second
 800339e:	197b      	adds	r3, r7, r5
 80033a0:	789b      	ldrb	r3, [r3, #2]
 80033a2:	2b3b      	cmp	r3, #59	; 0x3b
 80033a4:	d12f      	bne.n	8003406 <setClockAlarm+0x202>
			currentTime.min == 59 &&
 80033a6:	230c      	movs	r3, #12
 80033a8:	18fb      	adds	r3, r7, r3
 80033aa:	785b      	ldrb	r3, [r3, #1]
		if (currentTime.sec == 59 &&			// need to check for second
 80033ac:	2b3b      	cmp	r3, #59	; 0x3b
 80033ae:	d12a      	bne.n	8003406 <setClockAlarm+0x202>
			currentTime.hr == 23 &&
 80033b0:	230c      	movs	r3, #12
 80033b2:	18fb      	adds	r3, r7, r3
 80033b4:	781b      	ldrb	r3, [r3, #0]
			currentTime.min == 59 &&
 80033b6:	2b17      	cmp	r3, #23
 80033b8:	d125      	bne.n	8003406 <setClockAlarm+0x202>
			currentDate.yr % 100 == 99 &&
 80033ba:	2310      	movs	r3, #16
 80033bc:	18fb      	adds	r3, r7, r3
 80033be:	881b      	ldrh	r3, [r3, #0]
 80033c0:	2164      	movs	r1, #100	; 0x64
 80033c2:	0018      	movs	r0, r3
 80033c4:	f7fc ff2e 	bl	8000224 <__aeabi_uidivmod>
 80033c8:	000b      	movs	r3, r1
 80033ca:	b29b      	uxth	r3, r3
			currentTime.hr == 23 &&
 80033cc:	2b63      	cmp	r3, #99	; 0x63
 80033ce:	d11a      	bne.n	8003406 <setClockAlarm+0x202>
			currentDate.month == 12 &&
 80033d0:	2310      	movs	r3, #16
 80033d2:	18fb      	adds	r3, r7, r3
 80033d4:	789b      	ldrb	r3, [r3, #2]
			currentDate.yr % 100 == 99 &&
 80033d6:	2b0c      	cmp	r3, #12
 80033d8:	d115      	bne.n	8003406 <setClockAlarm+0x202>
			currentDate.date == maxDaysInMonth(currentDate.month, currentDate.yr)) {
 80033da:	2110      	movs	r1, #16
 80033dc:	187b      	adds	r3, r7, r1
 80033de:	78dc      	ldrb	r4, [r3, #3]
 80033e0:	187b      	adds	r3, r7, r1
 80033e2:	789a      	ldrb	r2, [r3, #2]
 80033e4:	187b      	adds	r3, r7, r1
 80033e6:	881b      	ldrh	r3, [r3, #0]
 80033e8:	0019      	movs	r1, r3
 80033ea:	0010      	movs	r0, r2
 80033ec:	f000 fa20 	bl	8003830 <maxDaysInMonth>
 80033f0:	0003      	movs	r3, r0
			currentDate.month == 12 &&
 80033f2:	429c      	cmp	r4, r3
 80033f4:	d107      	bne.n	8003406 <setClockAlarm+0x202>
			century++;
 80033f6:	4b3d      	ldr	r3, [pc, #244]	; (80034ec <setClockAlarm+0x2e8>)
 80033f8:	881b      	ldrh	r3, [r3, #0]
 80033fa:	3301      	adds	r3, #1
 80033fc:	b29a      	uxth	r2, r3
 80033fe:	4b3b      	ldr	r3, [pc, #236]	; (80034ec <setClockAlarm+0x2e8>)
 8003400:	801a      	strh	r2, [r3, #0]
 8003402:	e000      	b.n	8003406 <setClockAlarm+0x202>
		if (currentTime.min == 59 &&
 8003404:	46c0      	nop			; (mov r8, r8)
		}
	}
	a.sec = s % 60;
 8003406:	2357      	movs	r3, #87	; 0x57
 8003408:	18fb      	adds	r3, r7, r3
 800340a:	781b      	ldrb	r3, [r3, #0]
 800340c:	213c      	movs	r1, #60	; 0x3c
 800340e:	0018      	movs	r0, r3
 8003410:	f7fc ff08 	bl	8000224 <__aeabi_uidivmod>
 8003414:	000b      	movs	r3, r1
 8003416:	b2da      	uxtb	r2, r3
 8003418:	2408      	movs	r4, #8
 800341a:	193b      	adds	r3, r7, r4
 800341c:	709a      	strb	r2, [r3, #2]
	a.min = m % 60;
 800341e:	2356      	movs	r3, #86	; 0x56
 8003420:	18fb      	adds	r3, r7, r3
 8003422:	781b      	ldrb	r3, [r3, #0]
 8003424:	213c      	movs	r1, #60	; 0x3c
 8003426:	0018      	movs	r0, r3
 8003428:	f7fc fefc 	bl	8000224 <__aeabi_uidivmod>
 800342c:	000b      	movs	r3, r1
 800342e:	b2da      	uxtb	r2, r3
 8003430:	193b      	adds	r3, r7, r4
 8003432:	705a      	strb	r2, [r3, #1]
	a.hr = h % 24;
 8003434:	2355      	movs	r3, #85	; 0x55
 8003436:	18fb      	adds	r3, r7, r3
 8003438:	781b      	ldrb	r3, [r3, #0]
 800343a:	2118      	movs	r1, #24
 800343c:	0018      	movs	r0, r3
 800343e:	f7fc fef1 	bl	8000224 <__aeabi_uidivmod>
 8003442:	000b      	movs	r3, r1
 8003444:	b2da      	uxtb	r2, r3
 8003446:	193b      	adds	r3, r7, r4
 8003448:	701a      	strb	r2, [r3, #0]
	a.weekday = (w-1) % 7 + 1;
 800344a:	2354      	movs	r3, #84	; 0x54
 800344c:	18fb      	adds	r3, r7, r3
 800344e:	781b      	ldrb	r3, [r3, #0]
 8003450:	3b01      	subs	r3, #1
 8003452:	2107      	movs	r1, #7
 8003454:	0018      	movs	r0, r3
 8003456:	f7fc ffcf 	bl	80003f8 <__aeabi_idivmod>
 800345a:	000b      	movs	r3, r1
 800345c:	b2db      	uxtb	r3, r3
 800345e:	3301      	adds	r3, #1
 8003460:	b2da      	uxtb	r2, r3
 8003462:	0020      	movs	r0, r4
 8003464:	183b      	adds	r3, r7, r0
 8003466:	70da      	strb	r2, [r3, #3]

	salarmtime.Hours = a.hr;
 8003468:	183b      	adds	r3, r7, r0
 800346a:	781a      	ldrb	r2, [r3, #0]
 800346c:	2118      	movs	r1, #24
 800346e:	187b      	adds	r3, r7, r1
 8003470:	701a      	strb	r2, [r3, #0]
	salarmtime.Minutes = a.min;
 8003472:	183b      	adds	r3, r7, r0
 8003474:	785a      	ldrb	r2, [r3, #1]
 8003476:	187b      	adds	r3, r7, r1
 8003478:	705a      	strb	r2, [r3, #1]
	salarmtime.Seconds = a.sec;
 800347a:	183b      	adds	r3, r7, r0
 800347c:	789a      	ldrb	r2, [r3, #2]
 800347e:	187b      	adds	r3, r7, r1
 8003480:	709a      	strb	r2, [r3, #2]
	salarmtime.TimeFormat = RTC_HOURFORMAT_24;
 8003482:	187b      	adds	r3, r7, r1
 8003484:	2200      	movs	r2, #0
 8003486:	70da      	strb	r2, [r3, #3]
	salarmtime.SubSeconds = 0;
 8003488:	187b      	adds	r3, r7, r1
 800348a:	2200      	movs	r2, #0
 800348c:	605a      	str	r2, [r3, #4]
	salarmtime.SecondFraction = 0;
 800348e:	187b      	adds	r3, r7, r1
 8003490:	2200      	movs	r2, #0
 8003492:	609a      	str	r2, [r3, #8]
	salarmtime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003494:	187b      	adds	r3, r7, r1
 8003496:	2200      	movs	r2, #0
 8003498:	60da      	str	r2, [r3, #12]
	salarmtime.StoreOperation = RTC_STOREOPERATION_RESET;
 800349a:	187b      	adds	r3, r7, r1
 800349c:	2200      	movs	r2, #0
 800349e:	611a      	str	r2, [r3, #16]

	salarm.AlarmTime = salarmtime;
 80034a0:	242c      	movs	r4, #44	; 0x2c
 80034a2:	193b      	adds	r3, r7, r4
 80034a4:	187a      	adds	r2, r7, r1
 80034a6:	ca62      	ldmia	r2!, {r1, r5, r6}
 80034a8:	c362      	stmia	r3!, {r1, r5, r6}
 80034aa:	ca22      	ldmia	r2!, {r1, r5}
 80034ac:	c322      	stmia	r3!, {r1, r5}
	salarm.AlarmMask = RTC_ALARMMASK_NONE;
 80034ae:	193b      	adds	r3, r7, r4
 80034b0:	2200      	movs	r2, #0
 80034b2:	615a      	str	r2, [r3, #20]
	salarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80034b4:	193b      	adds	r3, r7, r4
 80034b6:	2200      	movs	r2, #0
 80034b8:	619a      	str	r2, [r3, #24]
	salarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_WEEKDAY;
 80034ba:	193b      	adds	r3, r7, r4
 80034bc:	2280      	movs	r2, #128	; 0x80
 80034be:	05d2      	lsls	r2, r2, #23
 80034c0:	61da      	str	r2, [r3, #28]
	salarm.AlarmDateWeekDay = a.weekday;
 80034c2:	183b      	adds	r3, r7, r0
 80034c4:	78d9      	ldrb	r1, [r3, #3]
 80034c6:	193b      	adds	r3, r7, r4
 80034c8:	2220      	movs	r2, #32
 80034ca:	5499      	strb	r1, [r3, r2]
	salarm.Alarm = RTC_ALARM_B;
 80034cc:	193b      	adds	r3, r7, r4
 80034ce:	2280      	movs	r2, #128	; 0x80
 80034d0:	0092      	lsls	r2, r2, #2
 80034d2:	625a      	str	r2, [r3, #36]	; 0x24

	// do nothing until done
	HAL_RTC_SetAlarm_IT(hrtc, &salarm, RTC_FORMAT_BIN);
 80034d4:	1939      	adds	r1, r7, r4
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2200      	movs	r2, #0
 80034da:	0018      	movs	r0, r3
 80034dc:	f006 f980 	bl	80097e0 <HAL_RTC_SetAlarm_IT>
}
 80034e0:	46c0      	nop			; (mov r8, r8)
 80034e2:	46bd      	mov	sp, r7
 80034e4:	b017      	add	sp, #92	; 0x5c
 80034e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80034e8:	2000015d 	.word	0x2000015d
 80034ec:	20000002 	.word	0x20000002

080034f0 <clearClockAlarm>:

void clearClockAlarm(RTC_HandleTypeDef *hrtc) {
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b082      	sub	sp, #8
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
	HAL_RTC_DeactivateAlarm(hrtc, RTC_ALARM_B);
 80034f8:	2380      	movs	r3, #128	; 0x80
 80034fa:	009a      	lsls	r2, r3, #2
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	0011      	movs	r1, r2
 8003500:	0018      	movs	r0, r3
 8003502:	f006 fab9 	bl	8009a78 <HAL_RTC_DeactivateAlarm>
}
 8003506:	46c0      	nop			; (mov r8, r8)
 8003508:	46bd      	mov	sp, r7
 800350a:	b002      	add	sp, #8
 800350c:	bd80      	pop	{r7, pc}
	...

08003510 <HAL_RTC_AlarmAEventCallback>:
// ---- end of RTC setters ----

// ---- callbacks for interrupts ----
// used for alarm function in project
// meant to send signal to use motor
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 8003510:	b580      	push	{r7, lr}
 8003512:	b082      	sub	sp, #8
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LED1_PORT, LED1_PIN);
 8003518:	23a0      	movs	r3, #160	; 0xa0
 800351a:	05db      	lsls	r3, r3, #23
 800351c:	2120      	movs	r1, #32
 800351e:	0018      	movs	r0, r3
 8003520:	f004 fdff 	bl	8008122 <HAL_GPIO_TogglePin>
	isAlarmDone = 1;
 8003524:	4b04      	ldr	r3, [pc, #16]	; (8003538 <HAL_RTC_AlarmAEventCallback+0x28>)
 8003526:	2201      	movs	r2, #1
 8003528:	701a      	strb	r2, [r3, #0]
	updateFace.alarm = 1;
 800352a:	4b04      	ldr	r3, [pc, #16]	; (800353c <HAL_RTC_AlarmAEventCallback+0x2c>)
 800352c:	2201      	movs	r2, #1
 800352e:	709a      	strb	r2, [r3, #2]
}
 8003530:	46c0      	nop			; (mov r8, r8)
 8003532:	46bd      	mov	sp, r7
 8003534:	b002      	add	sp, #8
 8003536:	bd80      	pop	{r7, pc}
 8003538:	2000014f 	.word	0x2000014f
 800353c:	20000150 	.word	0x20000150

08003540 <HAL_RTCEx_AlarmBEventCallback>:

// used to trigger display refresh every second. used because then it's synchronous with RTC updates
void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc) {
 8003540:	b580      	push	{r7, lr}
 8003542:	b082      	sub	sp, #8
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
	updateFace.clock = 1;
 8003548:	4b05      	ldr	r3, [pc, #20]	; (8003560 <HAL_RTCEx_AlarmBEventCallback+0x20>)
 800354a:	2201      	movs	r2, #1
 800354c:	701a      	strb	r2, [r3, #0]
	setClockAlarm(hrtc);		// set something for next second
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	0018      	movs	r0, r3
 8003552:	f7ff fe57 	bl	8003204 <setClockAlarm>
}
 8003556:	46c0      	nop			; (mov r8, r8)
 8003558:	46bd      	mov	sp, r7
 800355a:	b002      	add	sp, #8
 800355c:	bd80      	pop	{r7, pc}
 800355e:	46c0      	nop			; (mov r8, r8)
 8003560:	20000150 	.word	0x20000150

08003564 <getTime>:
// ---- end of callbacks ----

// ---- RTC getters ----
void getTime(struct times *t, RTC_HandleTypeDef *hrtc) {
 8003564:	b590      	push	{r4, r7, lr}
 8003566:	b089      	sub	sp, #36	; 0x24
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
 800356c:	6039      	str	r1, [r7, #0]
	RTC_TimeTypeDef stime;

	// programming manual says to read time after date. something shadow registers.
	// not done automatically in HAL
	HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN);
 800356e:	210c      	movs	r1, #12
 8003570:	000c      	movs	r4, r1
 8003572:	1879      	adds	r1, r7, r1
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	2200      	movs	r2, #0
 8003578:	0018      	movs	r0, r3
 800357a:	f005 ffd9 	bl	8009530 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(hrtc, NULL, RTC_FORMAT_BIN);
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	2200      	movs	r2, #0
 8003582:	2100      	movs	r1, #0
 8003584:	0018      	movs	r0, r3
 8003586:	f006 f8dd 	bl	8009744 <HAL_RTC_GetDate>

	t->hr = stime.Hours;
 800358a:	0021      	movs	r1, r4
 800358c:	187b      	adds	r3, r7, r1
 800358e:	781a      	ldrb	r2, [r3, #0]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	701a      	strb	r2, [r3, #0]
	t->min = stime.Minutes;
 8003594:	187b      	adds	r3, r7, r1
 8003596:	785a      	ldrb	r2, [r3, #1]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	705a      	strb	r2, [r3, #1]
	t->sec = stime.Seconds;
 800359c:	187b      	adds	r3, r7, r1
 800359e:	789a      	ldrb	r2, [r3, #2]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	709a      	strb	r2, [r3, #2]
}
 80035a4:	46c0      	nop			; (mov r8, r8)
 80035a6:	46bd      	mov	sp, r7
 80035a8:	b009      	add	sp, #36	; 0x24
 80035aa:	bd90      	pop	{r4, r7, pc}

080035ac <getDateTime>:
	d->date = sdate.Date;
	d->weekday = sdate.WeekDay;
}

// not using getDate and getTime for possible efficiency
void getDateTime(struct dates *d, struct times *t, RTC_HandleTypeDef *hrtc) {
 80035ac:	b5b0      	push	{r4, r5, r7, lr}
 80035ae:	b08a      	sub	sp, #40	; 0x28
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	60f8      	str	r0, [r7, #12]
 80035b4:	60b9      	str	r1, [r7, #8]
 80035b6:	607a      	str	r2, [r7, #4]
	RTC_DateTypeDef sdate;
	RTC_TimeTypeDef stime;

	// programming manual says to read time after date. something shadow registers.
	// not done automatically in HAL
	HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN);
 80035b8:	2510      	movs	r5, #16
 80035ba:	1979      	adds	r1, r7, r5
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2200      	movs	r2, #0
 80035c0:	0018      	movs	r0, r3
 80035c2:	f005 ffb5 	bl	8009530 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(hrtc, &sdate, RTC_FORMAT_BIN);
 80035c6:	2124      	movs	r1, #36	; 0x24
 80035c8:	000c      	movs	r4, r1
 80035ca:	1879      	adds	r1, r7, r1
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2200      	movs	r2, #0
 80035d0:	0018      	movs	r0, r3
 80035d2:	f006 f8b7 	bl	8009744 <HAL_RTC_GetDate>

	// pulls last 2 digits from RTC and upper 2 digits from static variable
	d->yr = century*100 + sdate.Year;
 80035d6:	4b14      	ldr	r3, [pc, #80]	; (8003628 <getDateTime+0x7c>)
 80035d8:	881b      	ldrh	r3, [r3, #0]
 80035da:	2264      	movs	r2, #100	; 0x64
 80035dc:	4353      	muls	r3, r2
 80035de:	b29a      	uxth	r2, r3
 80035e0:	0021      	movs	r1, r4
 80035e2:	187b      	adds	r3, r7, r1
 80035e4:	78db      	ldrb	r3, [r3, #3]
 80035e6:	b29b      	uxth	r3, r3
 80035e8:	18d3      	adds	r3, r2, r3
 80035ea:	b29a      	uxth	r2, r3
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	801a      	strh	r2, [r3, #0]
	d->month = sdate.Month;
 80035f0:	187b      	adds	r3, r7, r1
 80035f2:	785a      	ldrb	r2, [r3, #1]
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	709a      	strb	r2, [r3, #2]
	d->date = sdate.Date;
 80035f8:	187b      	adds	r3, r7, r1
 80035fa:	789a      	ldrb	r2, [r3, #2]
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	70da      	strb	r2, [r3, #3]
	d->weekday = sdate.WeekDay;
 8003600:	187b      	adds	r3, r7, r1
 8003602:	781a      	ldrb	r2, [r3, #0]
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	711a      	strb	r2, [r3, #4]

	t->hr = stime.Hours;
 8003608:	197b      	adds	r3, r7, r5
 800360a:	781a      	ldrb	r2, [r3, #0]
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	701a      	strb	r2, [r3, #0]
	t->min = stime.Minutes;
 8003610:	197b      	adds	r3, r7, r5
 8003612:	785a      	ldrb	r2, [r3, #1]
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	705a      	strb	r2, [r3, #1]
	t->sec = stime.Seconds;
 8003618:	197b      	adds	r3, r7, r5
 800361a:	789a      	ldrb	r2, [r3, #2]
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	709a      	strb	r2, [r3, #2]
}
 8003620:	46c0      	nop			; (mov r8, r8)
 8003622:	46bd      	mov	sp, r7
 8003624:	b00a      	add	sp, #40	; 0x28
 8003626:	bdb0      	pop	{r4, r5, r7, pc}
 8003628:	20000002 	.word	0x20000002

0800362c <setRTCCalibration>:
// ---- end of RTC getters ----

// ---- RTC calibration function ----
// calibVal should be given in drift/day in seconds
// calibration output on PC13
void setRTCCalibration(int calibVal, RTC_HandleTypeDef *hrtc) {
 800362c:	b580      	push	{r7, lr}
 800362e:	b084      	sub	sp, #16
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
 8003634:	6039      	str	r1, [r7, #0]
	uint16_t calm = 0;
 8003636:	230e      	movs	r3, #14
 8003638:	18fb      	adds	r3, r7, r3
 800363a:	2200      	movs	r2, #0
 800363c:	801a      	strh	r2, [r3, #0]
	uint32_t temp;

	if (calibVal == 0) return;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d048      	beq.n	80036d6 <setRTCCalibration+0xaa>
	else if (calibVal < 0) {		// drift offset is negative. need to slow rtc down
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2b00      	cmp	r3, #0
 8003648:	da20      	bge.n	800368c <setRTCCalibration+0x60>
		if (calibVal <= -42) {		// bounds checking. just set to max
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	3329      	adds	r3, #41	; 0x29
 800364e:	da06      	bge.n	800365e <setRTCCalibration+0x32>
			HAL_RTCEx_SetSmoothCalib(hrtc, RTC_SMOOTHCALIB_PERIOD_32SEC, RTC_SMOOTHCALIB_PLUSPULSES_RESET, 0x1FF);
 8003650:	4b23      	ldr	r3, [pc, #140]	; (80036e0 <setRTCCalibration+0xb4>)
 8003652:	6838      	ldr	r0, [r7, #0]
 8003654:	2200      	movs	r2, #0
 8003656:	2100      	movs	r1, #0
 8003658:	f006 fb93 	bl	8009d82 <HAL_RTCEx_SetSmoothCalib>
 800365c:	e03c      	b.n	80036d8 <setRTCCalibration+0xac>
		}
		else {
			// math for setting CALM 9-bit register in RTC. formula in notes and in L0 programming reference manual
			temp = -calibVal*32768*32/86400;		// possible overflow when doing math, so reordering
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	0013      	movs	r3, r2
 8003662:	031b      	lsls	r3, r3, #12
 8003664:	1a9b      	subs	r3, r3, r2
 8003666:	051b      	lsls	r3, r3, #20
 8003668:	491e      	ldr	r1, [pc, #120]	; (80036e4 <setRTCCalibration+0xb8>)
 800366a:	0018      	movs	r0, r3
 800366c:	f7fc fdde 	bl	800022c <__divsi3>
 8003670:	0003      	movs	r3, r0
 8003672:	60bb      	str	r3, [r7, #8]
			calm = temp;
 8003674:	210e      	movs	r1, #14
 8003676:	187b      	adds	r3, r7, r1
 8003678:	68ba      	ldr	r2, [r7, #8]
 800367a:	801a      	strh	r2, [r3, #0]
			HAL_RTCEx_SetSmoothCalib(hrtc, RTC_SMOOTHCALIB_PERIOD_32SEC, RTC_SMOOTHCALIB_PLUSPULSES_RESET, calm);
 800367c:	187b      	adds	r3, r7, r1
 800367e:	881b      	ldrh	r3, [r3, #0]
 8003680:	6838      	ldr	r0, [r7, #0]
 8003682:	2200      	movs	r2, #0
 8003684:	2100      	movs	r1, #0
 8003686:	f006 fb7c 	bl	8009d82 <HAL_RTCEx_SetSmoothCalib>
 800368a:	e025      	b.n	80036d8 <setRTCCalibration+0xac>
		}
	}
	else {
		if (calibVal >= 42) { 		// drift offset is positive. need to speed rtc up
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2b29      	cmp	r3, #41	; 0x29
 8003690:	dd07      	ble.n	80036a2 <setRTCCalibration+0x76>
			HAL_RTCEx_SetSmoothCalib(hrtc, RTC_SMOOTHCALIB_PERIOD_32SEC, RTC_SMOOTHCALIB_PLUSPULSES_SET, 0);
 8003692:	2380      	movs	r3, #128	; 0x80
 8003694:	021a      	lsls	r2, r3, #8
 8003696:	6838      	ldr	r0, [r7, #0]
 8003698:	2300      	movs	r3, #0
 800369a:	2100      	movs	r1, #0
 800369c:	f006 fb71 	bl	8009d82 <HAL_RTCEx_SetSmoothCalib>
 80036a0:	e01a      	b.n	80036d8 <setRTCCalibration+0xac>
		}
		else {
			// math
			temp = 512-(calibVal*32768*32/86400);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	051b      	lsls	r3, r3, #20
 80036a6:	4910      	ldr	r1, [pc, #64]	; (80036e8 <setRTCCalibration+0xbc>)
 80036a8:	0018      	movs	r0, r3
 80036aa:	f7fc fdbf 	bl	800022c <__divsi3>
 80036ae:	0003      	movs	r3, r0
 80036b0:	2280      	movs	r2, #128	; 0x80
 80036b2:	0092      	lsls	r2, r2, #2
 80036b4:	4694      	mov	ip, r2
 80036b6:	4463      	add	r3, ip
 80036b8:	60bb      	str	r3, [r7, #8]
			calm = temp;
 80036ba:	210e      	movs	r1, #14
 80036bc:	187b      	adds	r3, r7, r1
 80036be:	68ba      	ldr	r2, [r7, #8]
 80036c0:	801a      	strh	r2, [r3, #0]
			HAL_RTCEx_SetSmoothCalib(hrtc, RTC_SMOOTHCALIB_PERIOD_32SEC, RTC_SMOOTHCALIB_PLUSPULSES_SET, calm);
 80036c2:	187b      	adds	r3, r7, r1
 80036c4:	8819      	ldrh	r1, [r3, #0]
 80036c6:	2380      	movs	r3, #128	; 0x80
 80036c8:	021a      	lsls	r2, r3, #8
 80036ca:	6838      	ldr	r0, [r7, #0]
 80036cc:	000b      	movs	r3, r1
 80036ce:	2100      	movs	r1, #0
 80036d0:	f006 fb57 	bl	8009d82 <HAL_RTCEx_SetSmoothCalib>
 80036d4:	e000      	b.n	80036d8 <setRTCCalibration+0xac>
	if (calibVal == 0) return;
 80036d6:	46c0      	nop			; (mov r8, r8)
		}
	}
}
 80036d8:	46bd      	mov	sp, r7
 80036da:	b004      	add	sp, #16
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	46c0      	nop			; (mov r8, r8)
 80036e0:	000001ff 	.word	0x000001ff
 80036e4:	00015180 	.word	0x00015180
 80036e8:	fffeae80 	.word	0xfffeae80

080036ec <timeToSeconds>:
// ---- end of RTC calibration function ----

// ---- converters and calculators ----
uint32_t timeToSeconds(struct times *t) {
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b082      	sub	sp, #8
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
	return t->sec + t->min*60 + t->hr*3600;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	789b      	ldrb	r3, [r3, #2]
 80036f8:	0019      	movs	r1, r3
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	785b      	ldrb	r3, [r3, #1]
 80036fe:	001a      	movs	r2, r3
 8003700:	0013      	movs	r3, r2
 8003702:	011b      	lsls	r3, r3, #4
 8003704:	1a9b      	subs	r3, r3, r2
 8003706:	009b      	lsls	r3, r3, #2
 8003708:	18c9      	adds	r1, r1, r3
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	781b      	ldrb	r3, [r3, #0]
 800370e:	001a      	movs	r2, r3
 8003710:	0013      	movs	r3, r2
 8003712:	011b      	lsls	r3, r3, #4
 8003714:	1a9b      	subs	r3, r3, r2
 8003716:	011a      	lsls	r2, r3, #4
 8003718:	1ad2      	subs	r2, r2, r3
 800371a:	0113      	lsls	r3, r2, #4
 800371c:	001a      	movs	r2, r3
 800371e:	0013      	movs	r3, r2
 8003720:	18cb      	adds	r3, r1, r3
}
 8003722:	0018      	movs	r0, r3
 8003724:	46bd      	mov	sp, r7
 8003726:	b002      	add	sp, #8
 8003728:	bd80      	pop	{r7, pc}

0800372a <secondsToTime>:

void secondsToTime(struct times *t, uint32_t seconds) {
 800372a:	b580      	push	{r7, lr}
 800372c:	b082      	sub	sp, #8
 800372e:	af00      	add	r7, sp, #0
 8003730:	6078      	str	r0, [r7, #4]
 8003732:	6039      	str	r1, [r7, #0]
	t->hr = seconds / 3600;
 8003734:	683a      	ldr	r2, [r7, #0]
 8003736:	23e1      	movs	r3, #225	; 0xe1
 8003738:	0119      	lsls	r1, r3, #4
 800373a:	0010      	movs	r0, r2
 800373c:	f7fc fcec 	bl	8000118 <__udivsi3>
 8003740:	0003      	movs	r3, r0
 8003742:	b2da      	uxtb	r2, r3
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	701a      	strb	r2, [r3, #0]
	seconds %= 3600;
 8003748:	683a      	ldr	r2, [r7, #0]
 800374a:	23e1      	movs	r3, #225	; 0xe1
 800374c:	0119      	lsls	r1, r3, #4
 800374e:	0010      	movs	r0, r2
 8003750:	f7fc fd68 	bl	8000224 <__aeabi_uidivmod>
 8003754:	000b      	movs	r3, r1
 8003756:	603b      	str	r3, [r7, #0]
	t->min = seconds / 60;
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	213c      	movs	r1, #60	; 0x3c
 800375c:	0018      	movs	r0, r3
 800375e:	f7fc fcdb 	bl	8000118 <__udivsi3>
 8003762:	0003      	movs	r3, r0
 8003764:	b2da      	uxtb	r2, r3
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	705a      	strb	r2, [r3, #1]
	seconds %= 60;
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	213c      	movs	r1, #60	; 0x3c
 800376e:	0018      	movs	r0, r3
 8003770:	f7fc fd58 	bl	8000224 <__aeabi_uidivmod>
 8003774:	000b      	movs	r3, r1
 8003776:	603b      	str	r3, [r7, #0]
	t->sec = seconds;
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	b2da      	uxtb	r2, r3
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	709a      	strb	r2, [r3, #2]
}
 8003780:	46c0      	nop			; (mov r8, r8)
 8003782:	46bd      	mov	sp, r7
 8003784:	b002      	add	sp, #8
 8003786:	bd80      	pop	{r7, pc}

08003788 <weekdayCalculator>:
 * weekdays is 0-6, with 0 being sunday. hal uses 1=monday, 7=sunday - just call with % 7 to integrate with hal
 * months given in 1-12, with 1 being january. hal uses the same setup
 * rtc represents years with last 2 digits only. make sure year has all 4 numbers
 * should be accurate for any gregorian date
 */
uint8_t weekdayCalculator(uint16_t year, uint8_t month, uint8_t day) {
 8003788:	b590      	push	{r4, r7, lr}
 800378a:	b085      	sub	sp, #20
 800378c:	af00      	add	r7, sp, #0
 800378e:	0004      	movs	r4, r0
 8003790:	0008      	movs	r0, r1
 8003792:	0011      	movs	r1, r2
 8003794:	1dbb      	adds	r3, r7, #6
 8003796:	1c22      	adds	r2, r4, #0
 8003798:	801a      	strh	r2, [r3, #0]
 800379a:	1d7b      	adds	r3, r7, #5
 800379c:	1c02      	adds	r2, r0, #0
 800379e:	701a      	strb	r2, [r3, #0]
 80037a0:	1d3b      	adds	r3, r7, #4
 80037a2:	1c0a      	adds	r2, r1, #0
 80037a4:	701a      	strb	r2, [r3, #0]
	static uint8_t table[] = {0, 3, 2, 5, 0, 3, 5, 1, 4, 6, 2, 4};
	if (month < 3) year--;
 80037a6:	1d7b      	adds	r3, r7, #5
 80037a8:	781b      	ldrb	r3, [r3, #0]
 80037aa:	2b02      	cmp	r3, #2
 80037ac:	d804      	bhi.n	80037b8 <weekdayCalculator+0x30>
 80037ae:	1dbb      	adds	r3, r7, #6
 80037b0:	881a      	ldrh	r2, [r3, #0]
 80037b2:	1dbb      	adds	r3, r7, #6
 80037b4:	3a01      	subs	r2, #1
 80037b6:	801a      	strh	r2, [r3, #0]
	uint16_t temp = (year + year/4 - year/100 + year/400 + table[month-1] + day) % 7;
 80037b8:	1dbb      	adds	r3, r7, #6
 80037ba:	881b      	ldrh	r3, [r3, #0]
 80037bc:	1dba      	adds	r2, r7, #6
 80037be:	8812      	ldrh	r2, [r2, #0]
 80037c0:	0892      	lsrs	r2, r2, #2
 80037c2:	b292      	uxth	r2, r2
 80037c4:	189c      	adds	r4, r3, r2
 80037c6:	1dbb      	adds	r3, r7, #6
 80037c8:	881b      	ldrh	r3, [r3, #0]
 80037ca:	2164      	movs	r1, #100	; 0x64
 80037cc:	0018      	movs	r0, r3
 80037ce:	f7fc fca3 	bl	8000118 <__udivsi3>
 80037d2:	0003      	movs	r3, r0
 80037d4:	b29b      	uxth	r3, r3
 80037d6:	1ae4      	subs	r4, r4, r3
 80037d8:	1dbb      	adds	r3, r7, #6
 80037da:	881a      	ldrh	r2, [r3, #0]
 80037dc:	23c8      	movs	r3, #200	; 0xc8
 80037de:	0059      	lsls	r1, r3, #1
 80037e0:	0010      	movs	r0, r2
 80037e2:	f7fc fc99 	bl	8000118 <__udivsi3>
 80037e6:	0003      	movs	r3, r0
 80037e8:	b29b      	uxth	r3, r3
 80037ea:	18e3      	adds	r3, r4, r3
 80037ec:	1d7a      	adds	r2, r7, #5
 80037ee:	7812      	ldrb	r2, [r2, #0]
 80037f0:	3a01      	subs	r2, #1
 80037f2:	490e      	ldr	r1, [pc, #56]	; (800382c <weekdayCalculator+0xa4>)
 80037f4:	5c8a      	ldrb	r2, [r1, r2]
 80037f6:	189a      	adds	r2, r3, r2
 80037f8:	1d3b      	adds	r3, r7, #4
 80037fa:	781b      	ldrb	r3, [r3, #0]
 80037fc:	18d3      	adds	r3, r2, r3
 80037fe:	2107      	movs	r1, #7
 8003800:	0018      	movs	r0, r3
 8003802:	f7fc fdf9 	bl	80003f8 <__aeabi_idivmod>
 8003806:	000b      	movs	r3, r1
 8003808:	001a      	movs	r2, r3
 800380a:	210e      	movs	r1, #14
 800380c:	187b      	adds	r3, r7, r1
 800380e:	801a      	strh	r2, [r3, #0]
	if (temp == 0) return RTC_WEEKDAY_SUNDAY;
 8003810:	187b      	adds	r3, r7, r1
 8003812:	881b      	ldrh	r3, [r3, #0]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d101      	bne.n	800381c <weekdayCalculator+0x94>
 8003818:	2307      	movs	r3, #7
 800381a:	e003      	b.n	8003824 <weekdayCalculator+0x9c>
	else return temp;
 800381c:	230e      	movs	r3, #14
 800381e:	18fb      	adds	r3, r7, r3
 8003820:	881b      	ldrh	r3, [r3, #0]
 8003822:	b2db      	uxtb	r3, r3
}
 8003824:	0018      	movs	r0, r3
 8003826:	46bd      	mov	sp, r7
 8003828:	b005      	add	sp, #20
 800382a:	bd90      	pop	{r4, r7, pc}
 800382c:	20000004 	.word	0x20000004

08003830 <maxDaysInMonth>:

// calculator for number of days in a month given a month and accounting for leap years
// assumes month is 1-12, 1=january, 12=december
uint8_t maxDaysInMonth(uint8_t month, uint16_t year) {
 8003830:	b580      	push	{r7, lr}
 8003832:	b082      	sub	sp, #8
 8003834:	af00      	add	r7, sp, #0
 8003836:	0002      	movs	r2, r0
 8003838:	1dfb      	adds	r3, r7, #7
 800383a:	701a      	strb	r2, [r3, #0]
 800383c:	1d3b      	adds	r3, r7, #4
 800383e:	1c0a      	adds	r2, r1, #0
 8003840:	801a      	strh	r2, [r3, #0]
	if (month == 0 || month > 12) return 0;		// bounds checking
 8003842:	1dfb      	adds	r3, r7, #7
 8003844:	781b      	ldrb	r3, [r3, #0]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d003      	beq.n	8003852 <maxDaysInMonth+0x22>
 800384a:	1dfb      	adds	r3, r7, #7
 800384c:	781b      	ldrb	r3, [r3, #0]
 800384e:	2b0c      	cmp	r3, #12
 8003850:	d901      	bls.n	8003856 <maxDaysInMonth+0x26>
 8003852:	2300      	movs	r3, #0
 8003854:	e052      	b.n	80038fc <maxDaysInMonth+0xcc>

	// not using built-in defines, because they're in BCD
	if (month == 1  ||		// january
 8003856:	1dfb      	adds	r3, r7, #7
 8003858:	781b      	ldrb	r3, [r3, #0]
 800385a:	2b01      	cmp	r3, #1
 800385c:	d017      	beq.n	800388e <maxDaysInMonth+0x5e>
 800385e:	1dfb      	adds	r3, r7, #7
 8003860:	781b      	ldrb	r3, [r3, #0]
 8003862:	2b03      	cmp	r3, #3
 8003864:	d013      	beq.n	800388e <maxDaysInMonth+0x5e>
		month == 3  ||		// march
 8003866:	1dfb      	adds	r3, r7, #7
 8003868:	781b      	ldrb	r3, [r3, #0]
 800386a:	2b05      	cmp	r3, #5
 800386c:	d00f      	beq.n	800388e <maxDaysInMonth+0x5e>
		month == 5  ||		// may
 800386e:	1dfb      	adds	r3, r7, #7
 8003870:	781b      	ldrb	r3, [r3, #0]
 8003872:	2b07      	cmp	r3, #7
 8003874:	d00b      	beq.n	800388e <maxDaysInMonth+0x5e>
		month == 7  ||		// july
 8003876:	1dfb      	adds	r3, r7, #7
 8003878:	781b      	ldrb	r3, [r3, #0]
 800387a:	2b08      	cmp	r3, #8
 800387c:	d007      	beq.n	800388e <maxDaysInMonth+0x5e>
		month == 8  ||		// august
 800387e:	1dfb      	adds	r3, r7, #7
 8003880:	781b      	ldrb	r3, [r3, #0]
 8003882:	2b0a      	cmp	r3, #10
 8003884:	d003      	beq.n	800388e <maxDaysInMonth+0x5e>
		month == 10 ||		// october
 8003886:	1dfb      	adds	r3, r7, #7
 8003888:	781b      	ldrb	r3, [r3, #0]
 800388a:	2b0c      	cmp	r3, #12
 800388c:	d101      	bne.n	8003892 <maxDaysInMonth+0x62>
		month == 12) {		// december
		return 31;
 800388e:	231f      	movs	r3, #31
 8003890:	e034      	b.n	80038fc <maxDaysInMonth+0xcc>
	}
	else if (month == 4 ||	// april
 8003892:	1dfb      	adds	r3, r7, #7
 8003894:	781b      	ldrb	r3, [r3, #0]
 8003896:	2b04      	cmp	r3, #4
 8003898:	d00b      	beq.n	80038b2 <maxDaysInMonth+0x82>
 800389a:	1dfb      	adds	r3, r7, #7
 800389c:	781b      	ldrb	r3, [r3, #0]
 800389e:	2b06      	cmp	r3, #6
 80038a0:	d007      	beq.n	80038b2 <maxDaysInMonth+0x82>
			 month == 6 ||	// june
 80038a2:	1dfb      	adds	r3, r7, #7
 80038a4:	781b      	ldrb	r3, [r3, #0]
 80038a6:	2b09      	cmp	r3, #9
 80038a8:	d003      	beq.n	80038b2 <maxDaysInMonth+0x82>
			 month == 9 ||	// september
 80038aa:	1dfb      	adds	r3, r7, #7
 80038ac:	781b      	ldrb	r3, [r3, #0]
 80038ae:	2b0b      	cmp	r3, #11
 80038b0:	d101      	bne.n	80038b6 <maxDaysInMonth+0x86>
			 month == 11) {	// november
		return 30;
 80038b2:	231e      	movs	r3, #30
 80038b4:	e022      	b.n	80038fc <maxDaysInMonth+0xcc>
	}

	// february/leap year calculator
	// leap year for every 4th year, but every 100th year is not a leap year except on every 400th year
	// ex. 2020 is a leap year, 2100 is not a leap year, 2000 is a leap year.
	else if (year % 400 == 0) return 29;
 80038b6:	1d3b      	adds	r3, r7, #4
 80038b8:	881a      	ldrh	r2, [r3, #0]
 80038ba:	23c8      	movs	r3, #200	; 0xc8
 80038bc:	0059      	lsls	r1, r3, #1
 80038be:	0010      	movs	r0, r2
 80038c0:	f7fc fcb0 	bl	8000224 <__aeabi_uidivmod>
 80038c4:	000b      	movs	r3, r1
 80038c6:	b29b      	uxth	r3, r3
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d101      	bne.n	80038d0 <maxDaysInMonth+0xa0>
 80038cc:	231d      	movs	r3, #29
 80038ce:	e015      	b.n	80038fc <maxDaysInMonth+0xcc>
	else if (year % 100 == 0) return 28;
 80038d0:	1d3b      	adds	r3, r7, #4
 80038d2:	881b      	ldrh	r3, [r3, #0]
 80038d4:	2164      	movs	r1, #100	; 0x64
 80038d6:	0018      	movs	r0, r3
 80038d8:	f7fc fca4 	bl	8000224 <__aeabi_uidivmod>
 80038dc:	000b      	movs	r3, r1
 80038de:	b29b      	uxth	r3, r3
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d101      	bne.n	80038e8 <maxDaysInMonth+0xb8>
 80038e4:	231c      	movs	r3, #28
 80038e6:	e009      	b.n	80038fc <maxDaysInMonth+0xcc>
	else if (year % 4 == 0) return 29;
 80038e8:	1d3b      	adds	r3, r7, #4
 80038ea:	881b      	ldrh	r3, [r3, #0]
 80038ec:	2203      	movs	r2, #3
 80038ee:	4013      	ands	r3, r2
 80038f0:	b29b      	uxth	r3, r3
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d101      	bne.n	80038fa <maxDaysInMonth+0xca>
 80038f6:	231d      	movs	r3, #29
 80038f8:	e000      	b.n	80038fc <maxDaysInMonth+0xcc>
	else return 28;
 80038fa:	231c      	movs	r3, #28
}
 80038fc:	0018      	movs	r0, r3
 80038fe:	46bd      	mov	sp, r7
 8003900:	b002      	add	sp, #8
 8003902:	bd80      	pop	{r7, pc}

08003904 <stopMode>:
	setClockAlarm(&hrtc);
	setDisplayBacklight(50, &htim3);
//	HAL_GPIO_WritePin(LED1_PORT, LED1_PIN, GPIO_PIN_SET);					// basically measuring wake time (assuming only clock)
}

void stopMode() {
 8003904:	b580      	push	{r7, lr}
 8003906:	af00      	add	r7, sp, #0
//	HAL_GPIO_WritePin(LED2_PORT, LED2_PIN, GPIO_PIN_RESET);
	stopDisplayBacklight(&htim3);
 8003908:	4b0b      	ldr	r3, [pc, #44]	; (8003938 <stopMode+0x34>)
 800390a:	0018      	movs	r0, r3
 800390c:	f001 fb70 	bl	8004ff0 <stopDisplayBacklight>
	clearClockAlarm(&hrtc);
 8003910:	4b0a      	ldr	r3, [pc, #40]	; (800393c <stopMode+0x38>)
 8003912:	0018      	movs	r0, r3
 8003914:	f7ff fdec 	bl	80034f0 <clearClockAlarm>
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8003918:	4b09      	ldr	r3, [pc, #36]	; (8003940 <stopMode+0x3c>)
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	4b08      	ldr	r3, [pc, #32]	; (8003940 <stopMode+0x3c>)
 800391e:	2104      	movs	r1, #4
 8003920:	430a      	orrs	r2, r1
 8003922:	601a      	str	r2, [r3, #0]
//	HAL_PWR_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFI);
	HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8003924:	2101      	movs	r1, #1
 8003926:	2001      	movs	r0, #1
 8003928:	f004 fd7a 	bl	8008420 <HAL_PWR_EnterSTOPMode>
//	HAL_GPIO_WritePin(LED2_PORT, LED2_PIN, GPIO_PIN_SET);					// basically measuring wake time (assuming only clock)
	exitStopMode();
 800392c:	f000 f80a 	bl	8003944 <exitStopMode>
}
 8003930:	46c0      	nop			; (mov r8, r8)
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}
 8003936:	46c0      	nop			; (mov r8, r8)
 8003938:	20000200 	.word	0x20000200
 800393c:	20000278 	.word	0x20000278
 8003940:	40007000 	.word	0x40007000

08003944 <exitStopMode>:

void exitStopMode() {
 8003944:	b580      	push	{r7, lr}
 8003946:	af00      	add	r7, sp, #0
	HAL_Init();
 8003948:	f003 f96a 	bl	8006c20 <HAL_Init>
	SystemClock_Config();
 800394c:	f000 f8b8 	bl	8003ac0 <SystemClock_Config>
	MX_GPIO_Init();
 8003950:	f000 fd36 	bl	80043c0 <MX_GPIO_Init>
	MX_ADC_Init();
 8003954:	f000 f93c 	bl	8003bd0 <MX_ADC_Init>
//	MX_RTC_Init();
	MX_TIM21_Init();
 8003958:	f000 fbc6 	bl	80040e8 <MX_TIM21_Init>
	MX_TIM22_Init();
 800395c:	f000 fc5c 	bl	8004218 <MX_TIM22_Init>
	MX_TIM2_Init();
 8003960:	f000 fa6e 	bl	8003e40 <MX_TIM2_Init>
	MX_TIM6_Init();
 8003964:	f000 fb84 	bl	8004070 <MX_TIM6_Init>
	MX_TIM3_Init();
 8003968:	f000 faf8 	bl	8003f5c <MX_TIM3_Init>
	MX_SPI2_Init();
 800396c:	f000 fa30 	bl	8003dd0 <MX_SPI2_Init>
	MX_USB_PCD_Init();
 8003970:	f000 fce2 	bl	8004338 <MX_USB_PCD_Init>
	HAL_SuspendTick();
 8003974:	f003 f9e6 	bl	8006d44 <HAL_SuspendTick>
//	setRTCCalibration(-8, &hrtc);
//	TFT_startup(&hspi2);
	turnDisplayOn(&hspi2);
 8003978:	4b09      	ldr	r3, [pc, #36]	; (80039a0 <exitStopMode+0x5c>)
 800397a:	0018      	movs	r0, r3
 800397c:	f7fe fb2c 	bl	8001fd8 <turnDisplayOn>
//	clearScreen(ST77XX_BLACK, &hspi2);
//	initFace();
	setClockAlarm(&hrtc);
 8003980:	4b08      	ldr	r3, [pc, #32]	; (80039a4 <exitStopMode+0x60>)
 8003982:	0018      	movs	r0, r3
 8003984:	f7ff fc3e 	bl	8003204 <setClockAlarm>
	runADCSampler(&htim22);
 8003988:	4b07      	ldr	r3, [pc, #28]	; (80039a8 <exitStopMode+0x64>)
 800398a:	0018      	movs	r0, r3
 800398c:	f001 fa88 	bl	8004ea0 <runADCSampler>
	setDisplayBacklight(50, &htim3);
 8003990:	4b06      	ldr	r3, [pc, #24]	; (80039ac <exitStopMode+0x68>)
 8003992:	0019      	movs	r1, r3
 8003994:	2032      	movs	r0, #50	; 0x32
 8003996:	f001 fadf 	bl	8004f58 <setDisplayBacklight>
}
 800399a:	46c0      	nop			; (mov r8, r8)
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}
 80039a0:	200001a8 	.word	0x200001a8
 80039a4:	20000278 	.word	0x20000278
 80039a8:	2000023c 	.word	0x2000023c
 80039ac:	20000200 	.word	0x20000200

080039b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80039b0:	b590      	push	{r4, r7, lr}
 80039b2:	b083      	sub	sp, #12
 80039b4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80039b6:	f003 f933 	bl	8006c20 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80039ba:	f000 f881 	bl	8003ac0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80039be:	f000 fcff 	bl	80043c0 <MX_GPIO_Init>
  MX_DMA_Init();
 80039c2:	f000 fcdf 	bl	8004384 <MX_DMA_Init>
  MX_ADC_Init();
 80039c6:	f000 f903 	bl	8003bd0 <MX_ADC_Init>
  MX_RTC_Init();
 80039ca:	f000 f965 	bl	8003c98 <MX_RTC_Init>
  MX_TIM21_Init();
 80039ce:	f000 fb8b 	bl	80040e8 <MX_TIM21_Init>
  MX_TIM22_Init();
 80039d2:	f000 fc21 	bl	8004218 <MX_TIM22_Init>
  MX_TIM2_Init();
 80039d6:	f000 fa33 	bl	8003e40 <MX_TIM2_Init>
  MX_TIM6_Init();
 80039da:	f000 fb49 	bl	8004070 <MX_TIM6_Init>
  MX_TIM3_Init();
 80039de:	f000 fabd 	bl	8003f5c <MX_TIM3_Init>
  MX_SPI2_Init();
 80039e2:	f000 f9f5 	bl	8003dd0 <MX_SPI2_Init>
  MX_USB_PCD_Init();
 80039e6:	f000 fca7 	bl	8004338 <MX_USB_PCD_Init>
  /* USER CODE BEGIN 2 */
	// rtc software calibration
	setRTCCalibration(-8, &hrtc);
 80039ea:	4a2b      	ldr	r2, [pc, #172]	; (8003a98 <main+0xe8>)
 80039ec:	2308      	movs	r3, #8
 80039ee:	425b      	negs	r3, r3
 80039f0:	0011      	movs	r1, r2
 80039f2:	0018      	movs	r0, r3
 80039f4:	f7ff fe1a 	bl	800362c <setRTCCalibration>
//	HAL_SuspendTick();					// disable systick. unused anyway (bad practice?)

  	// initialization for display
	TFT_startup(&hspi2);
 80039f8:	4b28      	ldr	r3, [pc, #160]	; (8003a9c <main+0xec>)
 80039fa:	0018      	movs	r0, r3
 80039fc:	f7fe fa46 	bl	8001e8c <TFT_startup>
	fillRect(0, 0, WIDTH, HEIGHT, ST77XX_ORANGE, &hspi2);
 8003a00:	4b26      	ldr	r3, [pc, #152]	; (8003a9c <main+0xec>)
 8003a02:	9301      	str	r3, [sp, #4]
 8003a04:	23fc      	movs	r3, #252	; 0xfc
 8003a06:	021b      	lsls	r3, r3, #8
 8003a08:	9300      	str	r3, [sp, #0]
 8003a0a:	23a0      	movs	r3, #160	; 0xa0
 8003a0c:	2280      	movs	r2, #128	; 0x80
 8003a0e:	2100      	movs	r1, #0
 8003a10:	2000      	movs	r0, #0
 8003a12:	f7fe fc46 	bl	80022a2 <fillRect>
//	clearScreen(ST77XX_BLACK, &hspi2);

	// initialization for ui and hardware
	initFace();
 8003a16:	f003 f8a3 	bl	8006b60 <initFace>
	setClockAlarm(&hrtc);
 8003a1a:	4b1f      	ldr	r3, [pc, #124]	; (8003a98 <main+0xe8>)
 8003a1c:	0018      	movs	r0, r3
 8003a1e:	f7ff fbf1 	bl	8003204 <setClockAlarm>
	runADCSampler(&htim22);
 8003a22:	4b1f      	ldr	r3, [pc, #124]	; (8003aa0 <main+0xf0>)
 8003a24:	0018      	movs	r0, r3
 8003a26:	f001 fa3b 	bl	8004ea0 <runADCSampler>
	setDisplayBacklight(50, &htim3);
 8003a2a:	4b1e      	ldr	r3, [pc, #120]	; (8003aa4 <main+0xf4>)
 8003a2c:	0019      	movs	r1, r3
 8003a2e:	2032      	movs	r0, #50	; 0x32
 8003a30:	f001 fa92 	bl	8004f58 <setDisplayBacklight>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//		lineTest(&hspi2);
//		charTest(&hspi2);
		updateState(&hrtc, &htim21, &htim2, &htim6, &hspi2);
 8003a34:	4c1c      	ldr	r4, [pc, #112]	; (8003aa8 <main+0xf8>)
 8003a36:	4a1d      	ldr	r2, [pc, #116]	; (8003aac <main+0xfc>)
 8003a38:	491d      	ldr	r1, [pc, #116]	; (8003ab0 <main+0x100>)
 8003a3a:	4817      	ldr	r0, [pc, #92]	; (8003a98 <main+0xe8>)
 8003a3c:	4b17      	ldr	r3, [pc, #92]	; (8003a9c <main+0xec>)
 8003a3e:	9300      	str	r3, [sp, #0]
 8003a40:	0023      	movs	r3, r4
 8003a42:	f001 fb0f 	bl	8005064 <updateState>
		updateDisplay(&hrtc, &hspi2);
 8003a46:	4a15      	ldr	r2, [pc, #84]	; (8003a9c <main+0xec>)
 8003a48:	4b13      	ldr	r3, [pc, #76]	; (8003a98 <main+0xe8>)
 8003a4a:	0011      	movs	r1, r2
 8003a4c:	0018      	movs	r0, r3
 8003a4e:	f002 f921 	bl	8005c94 <updateDisplay>

		batteryManager(&hadc, &hspi2, &htim21, &htim3);
 8003a52:	4b14      	ldr	r3, [pc, #80]	; (8003aa4 <main+0xf4>)
 8003a54:	4a16      	ldr	r2, [pc, #88]	; (8003ab0 <main+0x100>)
 8003a56:	4911      	ldr	r1, [pc, #68]	; (8003a9c <main+0xec>)
 8003a58:	4816      	ldr	r0, [pc, #88]	; (8003ab4 <main+0x104>)
 8003a5a:	f7ff fa15 	bl	8002e88 <batteryManager>

		if (isTimerDone || isAlarmDone) {
 8003a5e:	4b16      	ldr	r3, [pc, #88]	; (8003ab8 <main+0x108>)
 8003a60:	781b      	ldrb	r3, [r3, #0]
 8003a62:	b2db      	uxtb	r3, r3
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d104      	bne.n	8003a72 <main+0xc2>
 8003a68:	4b14      	ldr	r3, [pc, #80]	; (8003abc <main+0x10c>)
 8003a6a:	781b      	ldrb	r3, [r3, #0]
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d0e0      	beq.n	8003a34 <main+0x84>
			runMotor(&htim2);
 8003a72:	4b0e      	ldr	r3, [pc, #56]	; (8003aac <main+0xfc>)
 8003a74:	0018      	movs	r0, r3
 8003a76:	f001 fa25 	bl	8004ec4 <runMotor>
			updateDisplay(&hrtc, &hspi2);
 8003a7a:	4a08      	ldr	r2, [pc, #32]	; (8003a9c <main+0xec>)
 8003a7c:	4b06      	ldr	r3, [pc, #24]	; (8003a98 <main+0xe8>)
 8003a7e:	0011      	movs	r1, r2
 8003a80:	0018      	movs	r0, r3
 8003a82:	f002 f907 	bl	8005c94 <updateDisplay>
			isTimerDone = isAlarmDone = 0;
 8003a86:	2100      	movs	r1, #0
 8003a88:	4b0c      	ldr	r3, [pc, #48]	; (8003abc <main+0x10c>)
 8003a8a:	1c0a      	adds	r2, r1, #0
 8003a8c:	701a      	strb	r2, [r3, #0]
 8003a8e:	4b0a      	ldr	r3, [pc, #40]	; (8003ab8 <main+0x108>)
 8003a90:	1c0a      	adds	r2, r1, #0
 8003a92:	701a      	strb	r2, [r3, #0]
		updateState(&hrtc, &htim21, &htim2, &htim6, &hspi2);
 8003a94:	e7ce      	b.n	8003a34 <main+0x84>
 8003a96:	46c0      	nop			; (mov r8, r8)
 8003a98:	20000278 	.word	0x20000278
 8003a9c:	200001a8 	.word	0x200001a8
 8003aa0:	2000023c 	.word	0x2000023c
 8003aa4:	20000200 	.word	0x20000200
 8003aa8:	20000160 	.word	0x20000160
 8003aac:	2000029c 	.word	0x2000029c
 8003ab0:	20000670 	.word	0x20000670
 8003ab4:	20000614 	.word	0x20000614
 8003ab8:	2000015c 	.word	0x2000015c
 8003abc:	2000014f 	.word	0x2000014f

08003ac0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003ac0:	b590      	push	{r4, r7, lr}
 8003ac2:	b09f      	sub	sp, #124	; 0x7c
 8003ac4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003ac6:	2440      	movs	r4, #64	; 0x40
 8003ac8:	193b      	adds	r3, r7, r4
 8003aca:	0018      	movs	r0, r3
 8003acc:	2338      	movs	r3, #56	; 0x38
 8003ace:	001a      	movs	r2, r3
 8003ad0:	2100      	movs	r1, #0
 8003ad2:	f007 ff54 	bl	800b97e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003ad6:	232c      	movs	r3, #44	; 0x2c
 8003ad8:	18fb      	adds	r3, r7, r3
 8003ada:	0018      	movs	r0, r3
 8003adc:	2314      	movs	r3, #20
 8003ade:	001a      	movs	r2, r3
 8003ae0:	2100      	movs	r1, #0
 8003ae2:	f007 ff4c 	bl	800b97e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003ae6:	1d3b      	adds	r3, r7, #4
 8003ae8:	0018      	movs	r0, r3
 8003aea:	2328      	movs	r3, #40	; 0x28
 8003aec:	001a      	movs	r2, r3
 8003aee:	2100      	movs	r1, #0
 8003af0:	f007 ff45 	bl	800b97e <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003af4:	4b33      	ldr	r3, [pc, #204]	; (8003bc4 <SystemClock_Config+0x104>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a33      	ldr	r2, [pc, #204]	; (8003bc8 <SystemClock_Config+0x108>)
 8003afa:	401a      	ands	r2, r3
 8003afc:	4b31      	ldr	r3, [pc, #196]	; (8003bc4 <SystemClock_Config+0x104>)
 8003afe:	2180      	movs	r1, #128	; 0x80
 8003b00:	0109      	lsls	r1, r1, #4
 8003b02:	430a      	orrs	r2, r1
 8003b04:	601a      	str	r2, [r3, #0]
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8003b06:	f004 fc7d 	bl	8008404 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8003b0a:	4b30      	ldr	r3, [pc, #192]	; (8003bcc <SystemClock_Config+0x10c>)
 8003b0c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003b0e:	4b2f      	ldr	r3, [pc, #188]	; (8003bcc <SystemClock_Config+0x10c>)
 8003b10:	492d      	ldr	r1, [pc, #180]	; (8003bc8 <SystemClock_Config+0x108>)
 8003b12:	400a      	ands	r2, r1
 8003b14:	651a      	str	r2, [r3, #80]	; 0x50
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 8003b16:	193b      	adds	r3, r7, r4
 8003b18:	2226      	movs	r2, #38	; 0x26
 8003b1a:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8003b1c:	193b      	adds	r3, r7, r4
 8003b1e:	2280      	movs	r2, #128	; 0x80
 8003b20:	0052      	lsls	r2, r2, #1
 8003b22:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003b24:	0021      	movs	r1, r4
 8003b26:	187b      	adds	r3, r7, r1
 8003b28:	2201      	movs	r2, #1
 8003b2a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003b2c:	187b      	adds	r3, r7, r1
 8003b2e:	2210      	movs	r2, #16
 8003b30:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8003b32:	187b      	adds	r3, r7, r1
 8003b34:	2201      	movs	r2, #1
 8003b36:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003b38:	187b      	adds	r3, r7, r1
 8003b3a:	2202      	movs	r2, #2
 8003b3c:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003b3e:	187b      	adds	r3, r7, r1
 8003b40:	2200      	movs	r2, #0
 8003b42:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8003b44:	187b      	adds	r3, r7, r1
 8003b46:	2280      	movs	r2, #128	; 0x80
 8003b48:	02d2      	lsls	r2, r2, #11
 8003b4a:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8003b4c:	187b      	adds	r3, r7, r1
 8003b4e:	2280      	movs	r2, #128	; 0x80
 8003b50:	03d2      	lsls	r2, r2, #15
 8003b52:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003b54:	187b      	adds	r3, r7, r1
 8003b56:	0018      	movs	r0, r3
 8003b58:	f004 fc96 	bl	8008488 <HAL_RCC_OscConfig>
 8003b5c:	1e03      	subs	r3, r0, #0
 8003b5e:	d001      	beq.n	8003b64 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8003b60:	f000 fce8 	bl	8004534 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003b64:	212c      	movs	r1, #44	; 0x2c
 8003b66:	187b      	adds	r3, r7, r1
 8003b68:	220f      	movs	r2, #15
 8003b6a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003b6c:	187b      	adds	r3, r7, r1
 8003b6e:	2203      	movs	r2, #3
 8003b70:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003b72:	187b      	adds	r3, r7, r1
 8003b74:	2200      	movs	r2, #0
 8003b76:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003b78:	187b      	adds	r3, r7, r1
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003b7e:	187b      	adds	r3, r7, r1
 8003b80:	2200      	movs	r2, #0
 8003b82:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003b84:	187b      	adds	r3, r7, r1
 8003b86:	2101      	movs	r1, #1
 8003b88:	0018      	movs	r0, r3
 8003b8a:	f005 f84d 	bl	8008c28 <HAL_RCC_ClockConfig>
 8003b8e:	1e03      	subs	r3, r0, #0
 8003b90:	d001      	beq.n	8003b96 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8003b92:	f000 fccf 	bl	8004534 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USB;
 8003b96:	1d3b      	adds	r3, r7, #4
 8003b98:	2260      	movs	r2, #96	; 0x60
 8003b9a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003b9c:	1d3b      	adds	r3, r7, #4
 8003b9e:	2280      	movs	r2, #128	; 0x80
 8003ba0:	0252      	lsls	r2, r2, #9
 8003ba2:	605a      	str	r2, [r3, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8003ba4:	1d3b      	adds	r3, r7, #4
 8003ba6:	2280      	movs	r2, #128	; 0x80
 8003ba8:	04d2      	lsls	r2, r2, #19
 8003baa:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003bac:	1d3b      	adds	r3, r7, #4
 8003bae:	0018      	movs	r0, r3
 8003bb0:	f005 f9e8 	bl	8008f84 <HAL_RCCEx_PeriphCLKConfig>
 8003bb4:	1e03      	subs	r3, r0, #0
 8003bb6:	d001      	beq.n	8003bbc <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8003bb8:	f000 fcbc 	bl	8004534 <Error_Handler>
  }
}
 8003bbc:	46c0      	nop			; (mov r8, r8)
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	b01f      	add	sp, #124	; 0x7c
 8003bc2:	bd90      	pop	{r4, r7, pc}
 8003bc4:	40007000 	.word	0x40007000
 8003bc8:	ffffe7ff 	.word	0xffffe7ff
 8003bcc:	40021000 	.word	0x40021000

08003bd0 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b082      	sub	sp, #8
 8003bd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003bd6:	003b      	movs	r3, r7
 8003bd8:	0018      	movs	r0, r3
 8003bda:	2308      	movs	r3, #8
 8003bdc:	001a      	movs	r2, r3
 8003bde:	2100      	movs	r1, #0
 8003be0:	f007 fecd 	bl	800b97e <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8003be4:	4b2a      	ldr	r3, [pc, #168]	; (8003c90 <MX_ADC_Init+0xc0>)
 8003be6:	4a2b      	ldr	r2, [pc, #172]	; (8003c94 <MX_ADC_Init+0xc4>)
 8003be8:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8003bea:	4b29      	ldr	r3, [pc, #164]	; (8003c90 <MX_ADC_Init+0xc0>)
 8003bec:	2200      	movs	r2, #0
 8003bee:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8003bf0:	4b27      	ldr	r3, [pc, #156]	; (8003c90 <MX_ADC_Init+0xc0>)
 8003bf2:	2280      	movs	r2, #128	; 0x80
 8003bf4:	05d2      	lsls	r2, r2, #23
 8003bf6:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8003bf8:	4b25      	ldr	r3, [pc, #148]	; (8003c90 <MX_ADC_Init+0xc0>)
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_79CYCLES_5;
 8003bfe:	4b24      	ldr	r3, [pc, #144]	; (8003c90 <MX_ADC_Init+0xc0>)
 8003c00:	2206      	movs	r2, #6
 8003c02:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8003c04:	4b22      	ldr	r3, [pc, #136]	; (8003c90 <MX_ADC_Init+0xc0>)
 8003c06:	2201      	movs	r2, #1
 8003c08:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003c0a:	4b21      	ldr	r3, [pc, #132]	; (8003c90 <MX_ADC_Init+0xc0>)
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8003c10:	4b1f      	ldr	r3, [pc, #124]	; (8003c90 <MX_ADC_Init+0xc0>)
 8003c12:	2220      	movs	r2, #32
 8003c14:	2100      	movs	r1, #0
 8003c16:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8003c18:	4b1d      	ldr	r3, [pc, #116]	; (8003c90 <MX_ADC_Init+0xc0>)
 8003c1a:	2221      	movs	r2, #33	; 0x21
 8003c1c:	2100      	movs	r1, #0
 8003c1e:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003c20:	4b1b      	ldr	r3, [pc, #108]	; (8003c90 <MX_ADC_Init+0xc0>)
 8003c22:	2200      	movs	r2, #0
 8003c24:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003c26:	4b1a      	ldr	r3, [pc, #104]	; (8003c90 <MX_ADC_Init+0xc0>)
 8003c28:	22c2      	movs	r2, #194	; 0xc2
 8003c2a:	32ff      	adds	r2, #255	; 0xff
 8003c2c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8003c2e:	4b18      	ldr	r3, [pc, #96]	; (8003c90 <MX_ADC_Init+0xc0>)
 8003c30:	222c      	movs	r2, #44	; 0x2c
 8003c32:	2100      	movs	r1, #0
 8003c34:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003c36:	4b16      	ldr	r3, [pc, #88]	; (8003c90 <MX_ADC_Init+0xc0>)
 8003c38:	2204      	movs	r2, #4
 8003c3a:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003c3c:	4b14      	ldr	r3, [pc, #80]	; (8003c90 <MX_ADC_Init+0xc0>)
 8003c3e:	2200      	movs	r2, #0
 8003c40:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8003c42:	4b13      	ldr	r3, [pc, #76]	; (8003c90 <MX_ADC_Init+0xc0>)
 8003c44:	2200      	movs	r2, #0
 8003c46:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8003c48:	4b11      	ldr	r3, [pc, #68]	; (8003c90 <MX_ADC_Init+0xc0>)
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8003c4e:	4b10      	ldr	r3, [pc, #64]	; (8003c90 <MX_ADC_Init+0xc0>)
 8003c50:	2200      	movs	r2, #0
 8003c52:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8003c54:	4b0e      	ldr	r3, [pc, #56]	; (8003c90 <MX_ADC_Init+0xc0>)
 8003c56:	0018      	movs	r0, r3
 8003c58:	f003 f882 	bl	8006d60 <HAL_ADC_Init>
 8003c5c:	1e03      	subs	r3, r0, #0
 8003c5e:	d001      	beq.n	8003c64 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8003c60:	f000 fc68 	bl	8004534 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8003c64:	003b      	movs	r3, r7
 8003c66:	2201      	movs	r2, #1
 8003c68:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8003c6a:	003b      	movs	r3, r7
 8003c6c:	2280      	movs	r2, #128	; 0x80
 8003c6e:	0152      	lsls	r2, r2, #5
 8003c70:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003c72:	003a      	movs	r2, r7
 8003c74:	4b06      	ldr	r3, [pc, #24]	; (8003c90 <MX_ADC_Init+0xc0>)
 8003c76:	0011      	movs	r1, r2
 8003c78:	0018      	movs	r0, r3
 8003c7a:	f003 fbef 	bl	800745c <HAL_ADC_ConfigChannel>
 8003c7e:	1e03      	subs	r3, r0, #0
 8003c80:	d001      	beq.n	8003c86 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8003c82:	f000 fc57 	bl	8004534 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8003c86:	46c0      	nop			; (mov r8, r8)
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	b002      	add	sp, #8
 8003c8c:	bd80      	pop	{r7, pc}
 8003c8e:	46c0      	nop			; (mov r8, r8)
 8003c90:	20000614 	.word	0x20000614
 8003c94:	40012400 	.word	0x40012400

08003c98 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b090      	sub	sp, #64	; 0x40
 8003c9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8003c9e:	232c      	movs	r3, #44	; 0x2c
 8003ca0:	18fb      	adds	r3, r7, r3
 8003ca2:	0018      	movs	r0, r3
 8003ca4:	2314      	movs	r3, #20
 8003ca6:	001a      	movs	r2, r3
 8003ca8:	2100      	movs	r1, #0
 8003caa:	f007 fe68 	bl	800b97e <memset>
  RTC_DateTypeDef sDate = {0};
 8003cae:	2328      	movs	r3, #40	; 0x28
 8003cb0:	18fb      	adds	r3, r7, r3
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 8003cb6:	003b      	movs	r3, r7
 8003cb8:	0018      	movs	r0, r3
 8003cba:	2328      	movs	r3, #40	; 0x28
 8003cbc:	001a      	movs	r2, r3
 8003cbe:	2100      	movs	r1, #0
 8003cc0:	f007 fe5d 	bl	800b97e <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003cc4:	4b40      	ldr	r3, [pc, #256]	; (8003dc8 <MX_RTC_Init+0x130>)
 8003cc6:	4a41      	ldr	r2, [pc, #260]	; (8003dcc <MX_RTC_Init+0x134>)
 8003cc8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003cca:	4b3f      	ldr	r3, [pc, #252]	; (8003dc8 <MX_RTC_Init+0x130>)
 8003ccc:	2200      	movs	r2, #0
 8003cce:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8003cd0:	4b3d      	ldr	r3, [pc, #244]	; (8003dc8 <MX_RTC_Init+0x130>)
 8003cd2:	227f      	movs	r2, #127	; 0x7f
 8003cd4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8003cd6:	4b3c      	ldr	r3, [pc, #240]	; (8003dc8 <MX_RTC_Init+0x130>)
 8003cd8:	22ff      	movs	r2, #255	; 0xff
 8003cda:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003cdc:	4b3a      	ldr	r3, [pc, #232]	; (8003dc8 <MX_RTC_Init+0x130>)
 8003cde:	2200      	movs	r2, #0
 8003ce0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8003ce2:	4b39      	ldr	r3, [pc, #228]	; (8003dc8 <MX_RTC_Init+0x130>)
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003ce8:	4b37      	ldr	r3, [pc, #220]	; (8003dc8 <MX_RTC_Init+0x130>)
 8003cea:	2200      	movs	r2, #0
 8003cec:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003cee:	4b36      	ldr	r3, [pc, #216]	; (8003dc8 <MX_RTC_Init+0x130>)
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003cf4:	4b34      	ldr	r3, [pc, #208]	; (8003dc8 <MX_RTC_Init+0x130>)
 8003cf6:	0018      	movs	r0, r3
 8003cf8:	f005 fab8 	bl	800926c <HAL_RTC_Init>
 8003cfc:	1e03      	subs	r3, r0, #0
 8003cfe:	d001      	beq.n	8003d04 <MX_RTC_Init+0x6c>
  {
    Error_Handler();
 8003d00:	f000 fc18 	bl	8004534 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8003d04:	212c      	movs	r1, #44	; 0x2c
 8003d06:	187b      	adds	r3, r7, r1
 8003d08:	2200      	movs	r2, #0
 8003d0a:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0;
 8003d0c:	187b      	adds	r3, r7, r1
 8003d0e:	2200      	movs	r2, #0
 8003d10:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 8003d12:	187b      	adds	r3, r7, r1
 8003d14:	2200      	movs	r2, #0
 8003d16:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003d18:	187b      	adds	r3, r7, r1
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003d1e:	187b      	adds	r3, r7, r1
 8003d20:	2200      	movs	r2, #0
 8003d22:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8003d24:	1879      	adds	r1, r7, r1
 8003d26:	4b28      	ldr	r3, [pc, #160]	; (8003dc8 <MX_RTC_Init+0x130>)
 8003d28:	2200      	movs	r2, #0
 8003d2a:	0018      	movs	r0, r3
 8003d2c:	f005 fb3c 	bl	80093a8 <HAL_RTC_SetTime>
 8003d30:	1e03      	subs	r3, r0, #0
 8003d32:	d001      	beq.n	8003d38 <MX_RTC_Init+0xa0>
  {
    Error_Handler();
 8003d34:	f000 fbfe 	bl	8004534 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SUNDAY;
 8003d38:	2128      	movs	r1, #40	; 0x28
 8003d3a:	187b      	adds	r3, r7, r1
 8003d3c:	2207      	movs	r2, #7
 8003d3e:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_DECEMBER;
 8003d40:	187b      	adds	r3, r7, r1
 8003d42:	2212      	movs	r2, #18
 8003d44:	705a      	strb	r2, [r3, #1]
  sDate.Date = 1;
 8003d46:	187b      	adds	r3, r7, r1
 8003d48:	2201      	movs	r2, #1
 8003d4a:	709a      	strb	r2, [r3, #2]
  sDate.Year = 19;
 8003d4c:	187b      	adds	r3, r7, r1
 8003d4e:	2213      	movs	r2, #19
 8003d50:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8003d52:	1879      	adds	r1, r7, r1
 8003d54:	4b1c      	ldr	r3, [pc, #112]	; (8003dc8 <MX_RTC_Init+0x130>)
 8003d56:	2200      	movs	r2, #0
 8003d58:	0018      	movs	r0, r3
 8003d5a:	f005 fc45 	bl	80095e8 <HAL_RTC_SetDate>
 8003d5e:	1e03      	subs	r3, r0, #0
 8003d60:	d001      	beq.n	8003d66 <MX_RTC_Init+0xce>
  {
    Error_Handler();
 8003d62:	f000 fbe7 	bl	8004534 <Error_Handler>
  }
  /** Enable the Alarm B
  */
  sAlarm.AlarmTime.Hours = 0;
 8003d66:	003b      	movs	r3, r7
 8003d68:	2200      	movs	r2, #0
 8003d6a:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0;
 8003d6c:	003b      	movs	r3, r7
 8003d6e:	2200      	movs	r2, #0
 8003d70:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0;
 8003d72:	003b      	movs	r3, r7
 8003d74:	2200      	movs	r2, #0
 8003d76:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 8003d78:	003b      	movs	r3, r7
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003d7e:	003b      	movs	r3, r7
 8003d80:	2200      	movs	r2, #0
 8003d82:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003d84:	003b      	movs	r3, r7
 8003d86:	2200      	movs	r2, #0
 8003d88:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8003d8a:	003b      	movs	r3, r7
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8003d90:	003b      	movs	r3, r7
 8003d92:	2200      	movs	r2, #0
 8003d94:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8003d96:	003b      	movs	r3, r7
 8003d98:	2200      	movs	r2, #0
 8003d9a:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 1;
 8003d9c:	003b      	movs	r3, r7
 8003d9e:	2220      	movs	r2, #32
 8003da0:	2101      	movs	r1, #1
 8003da2:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_B;
 8003da4:	003b      	movs	r3, r7
 8003da6:	2280      	movs	r2, #128	; 0x80
 8003da8:	0092      	lsls	r2, r2, #2
 8003daa:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8003dac:	0039      	movs	r1, r7
 8003dae:	4b06      	ldr	r3, [pc, #24]	; (8003dc8 <MX_RTC_Init+0x130>)
 8003db0:	2200      	movs	r2, #0
 8003db2:	0018      	movs	r0, r3
 8003db4:	f005 fd14 	bl	80097e0 <HAL_RTC_SetAlarm_IT>
 8003db8:	1e03      	subs	r3, r0, #0
 8003dba:	d001      	beq.n	8003dc0 <MX_RTC_Init+0x128>
  {
    Error_Handler();
 8003dbc:	f000 fbba 	bl	8004534 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8003dc0:	46c0      	nop			; (mov r8, r8)
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	b010      	add	sp, #64	; 0x40
 8003dc6:	bd80      	pop	{r7, pc}
 8003dc8:	20000278 	.word	0x20000278
 8003dcc:	40002800 	.word	0x40002800

08003dd0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8003dd4:	4b18      	ldr	r3, [pc, #96]	; (8003e38 <MX_SPI2_Init+0x68>)
 8003dd6:	4a19      	ldr	r2, [pc, #100]	; (8003e3c <MX_SPI2_Init+0x6c>)
 8003dd8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003dda:	4b17      	ldr	r3, [pc, #92]	; (8003e38 <MX_SPI2_Init+0x68>)
 8003ddc:	2282      	movs	r2, #130	; 0x82
 8003dde:	0052      	lsls	r2, r2, #1
 8003de0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003de2:	4b15      	ldr	r3, [pc, #84]	; (8003e38 <MX_SPI2_Init+0x68>)
 8003de4:	2200      	movs	r2, #0
 8003de6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003de8:	4b13      	ldr	r3, [pc, #76]	; (8003e38 <MX_SPI2_Init+0x68>)
 8003dea:	2200      	movs	r2, #0
 8003dec:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003dee:	4b12      	ldr	r3, [pc, #72]	; (8003e38 <MX_SPI2_Init+0x68>)
 8003df0:	2200      	movs	r2, #0
 8003df2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003df4:	4b10      	ldr	r3, [pc, #64]	; (8003e38 <MX_SPI2_Init+0x68>)
 8003df6:	2200      	movs	r2, #0
 8003df8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8003dfa:	4b0f      	ldr	r3, [pc, #60]	; (8003e38 <MX_SPI2_Init+0x68>)
 8003dfc:	2280      	movs	r2, #128	; 0x80
 8003dfe:	02d2      	lsls	r2, r2, #11
 8003e00:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003e02:	4b0d      	ldr	r3, [pc, #52]	; (8003e38 <MX_SPI2_Init+0x68>)
 8003e04:	2200      	movs	r2, #0
 8003e06:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003e08:	4b0b      	ldr	r3, [pc, #44]	; (8003e38 <MX_SPI2_Init+0x68>)
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003e0e:	4b0a      	ldr	r3, [pc, #40]	; (8003e38 <MX_SPI2_Init+0x68>)
 8003e10:	2200      	movs	r2, #0
 8003e12:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e14:	4b08      	ldr	r3, [pc, #32]	; (8003e38 <MX_SPI2_Init+0x68>)
 8003e16:	2200      	movs	r2, #0
 8003e18:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8003e1a:	4b07      	ldr	r3, [pc, #28]	; (8003e38 <MX_SPI2_Init+0x68>)
 8003e1c:	2207      	movs	r2, #7
 8003e1e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003e20:	4b05      	ldr	r3, [pc, #20]	; (8003e38 <MX_SPI2_Init+0x68>)
 8003e22:	0018      	movs	r0, r3
 8003e24:	f006 f810 	bl	8009e48 <HAL_SPI_Init>
 8003e28:	1e03      	subs	r3, r0, #0
 8003e2a:	d001      	beq.n	8003e30 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8003e2c:	f000 fb82 	bl	8004534 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003e30:	46c0      	nop			; (mov r8, r8)
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}
 8003e36:	46c0      	nop			; (mov r8, r8)
 8003e38:	200001a8 	.word	0x200001a8
 8003e3c:	40003800 	.word	0x40003800

08003e40 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b08a      	sub	sp, #40	; 0x28
 8003e44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003e46:	2318      	movs	r3, #24
 8003e48:	18fb      	adds	r3, r7, r3
 8003e4a:	0018      	movs	r0, r3
 8003e4c:	2310      	movs	r3, #16
 8003e4e:	001a      	movs	r2, r3
 8003e50:	2100      	movs	r1, #0
 8003e52:	f007 fd94 	bl	800b97e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003e56:	2310      	movs	r3, #16
 8003e58:	18fb      	adds	r3, r7, r3
 8003e5a:	0018      	movs	r0, r3
 8003e5c:	2308      	movs	r3, #8
 8003e5e:	001a      	movs	r2, r3
 8003e60:	2100      	movs	r1, #0
 8003e62:	f007 fd8c 	bl	800b97e <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003e66:	003b      	movs	r3, r7
 8003e68:	0018      	movs	r0, r3
 8003e6a:	2310      	movs	r3, #16
 8003e6c:	001a      	movs	r2, r3
 8003e6e:	2100      	movs	r1, #0
 8003e70:	f007 fd85 	bl	800b97e <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003e74:	4b37      	ldr	r3, [pc, #220]	; (8003f54 <MX_TIM2_Init+0x114>)
 8003e76:	2280      	movs	r2, #128	; 0x80
 8003e78:	05d2      	lsls	r2, r2, #23
 8003e7a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003e7c:	4b35      	ldr	r3, [pc, #212]	; (8003f54 <MX_TIM2_Init+0x114>)
 8003e7e:	2200      	movs	r2, #0
 8003e80:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e82:	4b34      	ldr	r3, [pc, #208]	; (8003f54 <MX_TIM2_Init+0x114>)
 8003e84:	2200      	movs	r2, #0
 8003e86:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0x3FFF;
 8003e88:	4b32      	ldr	r3, [pc, #200]	; (8003f54 <MX_TIM2_Init+0x114>)
 8003e8a:	4a33      	ldr	r2, [pc, #204]	; (8003f58 <MX_TIM2_Init+0x118>)
 8003e8c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e8e:	4b31      	ldr	r3, [pc, #196]	; (8003f54 <MX_TIM2_Init+0x114>)
 8003e90:	2200      	movs	r2, #0
 8003e92:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e94:	4b2f      	ldr	r3, [pc, #188]	; (8003f54 <MX_TIM2_Init+0x114>)
 8003e96:	2200      	movs	r2, #0
 8003e98:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003e9a:	4b2e      	ldr	r3, [pc, #184]	; (8003f54 <MX_TIM2_Init+0x114>)
 8003e9c:	0018      	movs	r0, r3
 8003e9e:	f006 fde3 	bl	800aa68 <HAL_TIM_Base_Init>
 8003ea2:	1e03      	subs	r3, r0, #0
 8003ea4:	d001      	beq.n	8003eaa <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8003ea6:	f000 fb45 	bl	8004534 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 8003eaa:	2118      	movs	r1, #24
 8003eac:	187b      	adds	r3, r7, r1
 8003eae:	2280      	movs	r2, #128	; 0x80
 8003eb0:	0192      	lsls	r2, r2, #6
 8003eb2:	601a      	str	r2, [r3, #0]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 8003eb4:	187b      	adds	r3, r7, r1
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	605a      	str	r2, [r3, #4]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 8003eba:	187b      	adds	r3, r7, r1
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	609a      	str	r2, [r3, #8]
  sClockSourceConfig.ClockFilter = 0;
 8003ec0:	187b      	adds	r3, r7, r1
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003ec6:	187a      	adds	r2, r7, r1
 8003ec8:	4b22      	ldr	r3, [pc, #136]	; (8003f54 <MX_TIM2_Init+0x114>)
 8003eca:	0011      	movs	r1, r2
 8003ecc:	0018      	movs	r0, r3
 8003ece:	f007 f97d 	bl	800b1cc <HAL_TIM_ConfigClockSource>
 8003ed2:	1e03      	subs	r3, r0, #0
 8003ed4:	d001      	beq.n	8003eda <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8003ed6:	f000 fb2d 	bl	8004534 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8003eda:	4b1e      	ldr	r3, [pc, #120]	; (8003f54 <MX_TIM2_Init+0x114>)
 8003edc:	0018      	movs	r0, r3
 8003ede:	f006 fe33 	bl	800ab48 <HAL_TIM_OC_Init>
 8003ee2:	1e03      	subs	r3, r0, #0
 8003ee4:	d001      	beq.n	8003eea <MX_TIM2_Init+0xaa>
  {
    Error_Handler();
 8003ee6:	f000 fb25 	bl	8004534 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003eea:	2110      	movs	r1, #16
 8003eec:	187b      	adds	r3, r7, r1
 8003eee:	2200      	movs	r2, #0
 8003ef0:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ef2:	187b      	adds	r3, r7, r1
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003ef8:	187a      	adds	r2, r7, r1
 8003efa:	4b16      	ldr	r3, [pc, #88]	; (8003f54 <MX_TIM2_Init+0x114>)
 8003efc:	0011      	movs	r1, r2
 8003efe:	0018      	movs	r0, r3
 8003f00:	f007 fc59 	bl	800b7b6 <HAL_TIMEx_MasterConfigSynchronization>
 8003f04:	1e03      	subs	r3, r0, #0
 8003f06:	d001      	beq.n	8003f0c <MX_TIM2_Init+0xcc>
  {
    Error_Handler();
 8003f08:	f000 fb14 	bl	8004534 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim2, TIM2_ETR_LSE) != HAL_OK)
 8003f0c:	4b11      	ldr	r3, [pc, #68]	; (8003f54 <MX_TIM2_Init+0x114>)
 8003f0e:	2105      	movs	r1, #5
 8003f10:	0018      	movs	r0, r3
 8003f12:	f007 fc93 	bl	800b83c <HAL_TIMEx_RemapConfig>
 8003f16:	1e03      	subs	r3, r0, #0
 8003f18:	d001      	beq.n	8003f1e <MX_TIM2_Init+0xde>
  {
    Error_Handler();
 8003f1a:	f000 fb0b 	bl	8004534 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8003f1e:	003b      	movs	r3, r7
 8003f20:	2200      	movs	r2, #0
 8003f22:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8003f24:	003b      	movs	r3, r7
 8003f26:	2200      	movs	r2, #0
 8003f28:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003f2a:	003b      	movs	r3, r7
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003f30:	003b      	movs	r3, r7
 8003f32:	2200      	movs	r2, #0
 8003f34:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003f36:	0039      	movs	r1, r7
 8003f38:	4b06      	ldr	r3, [pc, #24]	; (8003f54 <MX_TIM2_Init+0x114>)
 8003f3a:	2204      	movs	r2, #4
 8003f3c:	0018      	movs	r0, r3
 8003f3e:	f007 f83f 	bl	800afc0 <HAL_TIM_OC_ConfigChannel>
 8003f42:	1e03      	subs	r3, r0, #0
 8003f44:	d001      	beq.n	8003f4a <MX_TIM2_Init+0x10a>
  {
    Error_Handler();
 8003f46:	f000 faf5 	bl	8004534 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003f4a:	46c0      	nop			; (mov r8, r8)
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	b00a      	add	sp, #40	; 0x28
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	46c0      	nop			; (mov r8, r8)
 8003f54:	2000029c 	.word	0x2000029c
 8003f58:	00003fff 	.word	0x00003fff

08003f5c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b08a      	sub	sp, #40	; 0x28
 8003f60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003f62:	2318      	movs	r3, #24
 8003f64:	18fb      	adds	r3, r7, r3
 8003f66:	0018      	movs	r0, r3
 8003f68:	2310      	movs	r3, #16
 8003f6a:	001a      	movs	r2, r3
 8003f6c:	2100      	movs	r1, #0
 8003f6e:	f007 fd06 	bl	800b97e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f72:	2310      	movs	r3, #16
 8003f74:	18fb      	adds	r3, r7, r3
 8003f76:	0018      	movs	r0, r3
 8003f78:	2308      	movs	r3, #8
 8003f7a:	001a      	movs	r2, r3
 8003f7c:	2100      	movs	r1, #0
 8003f7e:	f007 fcfe 	bl	800b97e <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003f82:	003b      	movs	r3, r7
 8003f84:	0018      	movs	r0, r3
 8003f86:	2310      	movs	r3, #16
 8003f88:	001a      	movs	r2, r3
 8003f8a:	2100      	movs	r1, #0
 8003f8c:	f007 fcf7 	bl	800b97e <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003f90:	4b34      	ldr	r3, [pc, #208]	; (8004064 <MX_TIM3_Init+0x108>)
 8003f92:	4a35      	ldr	r2, [pc, #212]	; (8004068 <MX_TIM3_Init+0x10c>)
 8003f94:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003f96:	4b33      	ldr	r3, [pc, #204]	; (8004064 <MX_TIM3_Init+0x108>)
 8003f98:	2200      	movs	r2, #0
 8003f9a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f9c:	4b31      	ldr	r3, [pc, #196]	; (8004064 <MX_TIM3_Init+0x108>)
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xFFFF;
 8003fa2:	4b30      	ldr	r3, [pc, #192]	; (8004064 <MX_TIM3_Init+0x108>)
 8003fa4:	4a31      	ldr	r2, [pc, #196]	; (800406c <MX_TIM3_Init+0x110>)
 8003fa6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003fa8:	4b2e      	ldr	r3, [pc, #184]	; (8004064 <MX_TIM3_Init+0x108>)
 8003faa:	2200      	movs	r2, #0
 8003fac:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003fae:	4b2d      	ldr	r3, [pc, #180]	; (8004064 <MX_TIM3_Init+0x108>)
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003fb4:	4b2b      	ldr	r3, [pc, #172]	; (8004064 <MX_TIM3_Init+0x108>)
 8003fb6:	0018      	movs	r0, r3
 8003fb8:	f006 fd56 	bl	800aa68 <HAL_TIM_Base_Init>
 8003fbc:	1e03      	subs	r3, r0, #0
 8003fbe:	d001      	beq.n	8003fc4 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8003fc0:	f000 fab8 	bl	8004534 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003fc4:	2118      	movs	r1, #24
 8003fc6:	187b      	adds	r3, r7, r1
 8003fc8:	2280      	movs	r2, #128	; 0x80
 8003fca:	0152      	lsls	r2, r2, #5
 8003fcc:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003fce:	187a      	adds	r2, r7, r1
 8003fd0:	4b24      	ldr	r3, [pc, #144]	; (8004064 <MX_TIM3_Init+0x108>)
 8003fd2:	0011      	movs	r1, r2
 8003fd4:	0018      	movs	r0, r3
 8003fd6:	f007 f8f9 	bl	800b1cc <HAL_TIM_ConfigClockSource>
 8003fda:	1e03      	subs	r3, r0, #0
 8003fdc:	d001      	beq.n	8003fe2 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8003fde:	f000 faa9 	bl	8004534 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003fe2:	4b20      	ldr	r3, [pc, #128]	; (8004064 <MX_TIM3_Init+0x108>)
 8003fe4:	0018      	movs	r0, r3
 8003fe6:	f006 fe87 	bl	800acf8 <HAL_TIM_PWM_Init>
 8003fea:	1e03      	subs	r3, r0, #0
 8003fec:	d001      	beq.n	8003ff2 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8003fee:	f000 faa1 	bl	8004534 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ff2:	2110      	movs	r1, #16
 8003ff4:	187b      	adds	r3, r7, r1
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ffa:	187b      	adds	r3, r7, r1
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004000:	187a      	adds	r2, r7, r1
 8004002:	4b18      	ldr	r3, [pc, #96]	; (8004064 <MX_TIM3_Init+0x108>)
 8004004:	0011      	movs	r1, r2
 8004006:	0018      	movs	r0, r3
 8004008:	f007 fbd5 	bl	800b7b6 <HAL_TIMEx_MasterConfigSynchronization>
 800400c:	1e03      	subs	r3, r0, #0
 800400e:	d001      	beq.n	8004014 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8004010:	f000 fa90 	bl	8004534 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004014:	003b      	movs	r3, r7
 8004016:	2260      	movs	r2, #96	; 0x60
 8004018:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800401a:	003b      	movs	r3, r7
 800401c:	2200      	movs	r2, #0
 800401e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004020:	003b      	movs	r3, r7
 8004022:	2200      	movs	r2, #0
 8004024:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004026:	003b      	movs	r3, r7
 8004028:	2200      	movs	r2, #0
 800402a:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800402c:	0039      	movs	r1, r7
 800402e:	4b0d      	ldr	r3, [pc, #52]	; (8004064 <MX_TIM3_Init+0x108>)
 8004030:	2200      	movs	r2, #0
 8004032:	0018      	movs	r0, r3
 8004034:	f007 f812 	bl	800b05c <HAL_TIM_PWM_ConfigChannel>
 8004038:	1e03      	subs	r3, r0, #0
 800403a:	d001      	beq.n	8004040 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 800403c:	f000 fa7a 	bl	8004534 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim3, TIM3_TI1_GPIO) != HAL_OK)
 8004040:	4b08      	ldr	r3, [pc, #32]	; (8004064 <MX_TIM3_Init+0x108>)
 8004042:	2104      	movs	r1, #4
 8004044:	0018      	movs	r0, r3
 8004046:	f007 fbf9 	bl	800b83c <HAL_TIMEx_RemapConfig>
 800404a:	1e03      	subs	r3, r0, #0
 800404c:	d001      	beq.n	8004052 <MX_TIM3_Init+0xf6>
  {
    Error_Handler();
 800404e:	f000 fa71 	bl	8004534 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8004052:	4b04      	ldr	r3, [pc, #16]	; (8004064 <MX_TIM3_Init+0x108>)
 8004054:	0018      	movs	r0, r3
 8004056:	f000 fbcf 	bl	80047f8 <HAL_TIM_MspPostInit>

}
 800405a:	46c0      	nop			; (mov r8, r8)
 800405c:	46bd      	mov	sp, r7
 800405e:	b00a      	add	sp, #40	; 0x28
 8004060:	bd80      	pop	{r7, pc}
 8004062:	46c0      	nop			; (mov r8, r8)
 8004064:	20000200 	.word	0x20000200
 8004068:	40000400 	.word	0x40000400
 800406c:	0000ffff 	.word	0x0000ffff

08004070 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b082      	sub	sp, #8
 8004074:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004076:	003b      	movs	r3, r7
 8004078:	0018      	movs	r0, r3
 800407a:	2308      	movs	r3, #8
 800407c:	001a      	movs	r2, r3
 800407e:	2100      	movs	r1, #0
 8004080:	f007 fc7d 	bl	800b97e <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8004084:	4b15      	ldr	r3, [pc, #84]	; (80040dc <MX_TIM6_Init+0x6c>)
 8004086:	4a16      	ldr	r2, [pc, #88]	; (80040e0 <MX_TIM6_Init+0x70>)
 8004088:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0x40;
 800408a:	4b14      	ldr	r3, [pc, #80]	; (80040dc <MX_TIM6_Init+0x6c>)
 800408c:	2240      	movs	r2, #64	; 0x40
 800408e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004090:	4b12      	ldr	r3, [pc, #72]	; (80040dc <MX_TIM6_Init+0x6c>)
 8004092:	2200      	movs	r2, #0
 8004094:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8004096:	4b11      	ldr	r3, [pc, #68]	; (80040dc <MX_TIM6_Init+0x6c>)
 8004098:	4a12      	ldr	r2, [pc, #72]	; (80040e4 <MX_TIM6_Init+0x74>)
 800409a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800409c:	4b0f      	ldr	r3, [pc, #60]	; (80040dc <MX_TIM6_Init+0x6c>)
 800409e:	2200      	movs	r2, #0
 80040a0:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80040a2:	4b0e      	ldr	r3, [pc, #56]	; (80040dc <MX_TIM6_Init+0x6c>)
 80040a4:	0018      	movs	r0, r3
 80040a6:	f006 fcdf 	bl	800aa68 <HAL_TIM_Base_Init>
 80040aa:	1e03      	subs	r3, r0, #0
 80040ac:	d001      	beq.n	80040b2 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80040ae:	f000 fa41 	bl	8004534 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80040b2:	003b      	movs	r3, r7
 80040b4:	2200      	movs	r2, #0
 80040b6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80040b8:	003b      	movs	r3, r7
 80040ba:	2200      	movs	r2, #0
 80040bc:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80040be:	003a      	movs	r2, r7
 80040c0:	4b06      	ldr	r3, [pc, #24]	; (80040dc <MX_TIM6_Init+0x6c>)
 80040c2:	0011      	movs	r1, r2
 80040c4:	0018      	movs	r0, r3
 80040c6:	f007 fb76 	bl	800b7b6 <HAL_TIMEx_MasterConfigSynchronization>
 80040ca:	1e03      	subs	r3, r0, #0
 80040cc:	d001      	beq.n	80040d2 <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 80040ce:	f000 fa31 	bl	8004534 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80040d2:	46c0      	nop			; (mov r8, r8)
 80040d4:	46bd      	mov	sp, r7
 80040d6:	b002      	add	sp, #8
 80040d8:	bd80      	pop	{r7, pc}
 80040da:	46c0      	nop			; (mov r8, r8)
 80040dc:	20000160 	.word	0x20000160
 80040e0:	40001000 	.word	0x40001000
 80040e4:	0000ffff 	.word	0x0000ffff

080040e8 <MX_TIM21_Init>:
  * @brief TIM21 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM21_Init(void)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b08a      	sub	sp, #40	; 0x28
 80040ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM21_Init 0 */

  /* USER CODE END TIM21_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80040ee:	2318      	movs	r3, #24
 80040f0:	18fb      	adds	r3, r7, r3
 80040f2:	0018      	movs	r0, r3
 80040f4:	2310      	movs	r3, #16
 80040f6:	001a      	movs	r2, r3
 80040f8:	2100      	movs	r1, #0
 80040fa:	f007 fc40 	bl	800b97e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80040fe:	2310      	movs	r3, #16
 8004100:	18fb      	adds	r3, r7, r3
 8004102:	0018      	movs	r0, r3
 8004104:	2308      	movs	r3, #8
 8004106:	001a      	movs	r2, r3
 8004108:	2100      	movs	r1, #0
 800410a:	f007 fc38 	bl	800b97e <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800410e:	003b      	movs	r3, r7
 8004110:	0018      	movs	r0, r3
 8004112:	2310      	movs	r3, #16
 8004114:	001a      	movs	r2, r3
 8004116:	2100      	movs	r1, #0
 8004118:	f007 fc31 	bl	800b97e <memset>

  /* USER CODE BEGIN TIM21_Init 1 */

  /* USER CODE END TIM21_Init 1 */
  htim21.Instance = TIM21;
 800411c:	4b3b      	ldr	r3, [pc, #236]	; (800420c <MX_TIM21_Init+0x124>)
 800411e:	4a3c      	ldr	r2, [pc, #240]	; (8004210 <MX_TIM21_Init+0x128>)
 8004120:	601a      	str	r2, [r3, #0]
  htim21.Init.Prescaler = 0;
 8004122:	4b3a      	ldr	r3, [pc, #232]	; (800420c <MX_TIM21_Init+0x124>)
 8004124:	2200      	movs	r2, #0
 8004126:	605a      	str	r2, [r3, #4]
  htim21.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004128:	4b38      	ldr	r3, [pc, #224]	; (800420c <MX_TIM21_Init+0x124>)
 800412a:	2200      	movs	r2, #0
 800412c:	609a      	str	r2, [r3, #8]
  htim21.Init.Period = 0x7FFF;
 800412e:	4b37      	ldr	r3, [pc, #220]	; (800420c <MX_TIM21_Init+0x124>)
 8004130:	4a38      	ldr	r2, [pc, #224]	; (8004214 <MX_TIM21_Init+0x12c>)
 8004132:	60da      	str	r2, [r3, #12]
  htim21.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004134:	4b35      	ldr	r3, [pc, #212]	; (800420c <MX_TIM21_Init+0x124>)
 8004136:	2200      	movs	r2, #0
 8004138:	611a      	str	r2, [r3, #16]
  htim21.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800413a:	4b34      	ldr	r3, [pc, #208]	; (800420c <MX_TIM21_Init+0x124>)
 800413c:	2200      	movs	r2, #0
 800413e:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim21) != HAL_OK)
 8004140:	4b32      	ldr	r3, [pc, #200]	; (800420c <MX_TIM21_Init+0x124>)
 8004142:	0018      	movs	r0, r3
 8004144:	f006 fc90 	bl	800aa68 <HAL_TIM_Base_Init>
 8004148:	1e03      	subs	r3, r0, #0
 800414a:	d001      	beq.n	8004150 <MX_TIM21_Init+0x68>
  {
    Error_Handler();
 800414c:	f000 f9f2 	bl	8004534 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 8004150:	2118      	movs	r1, #24
 8004152:	187b      	adds	r3, r7, r1
 8004154:	2280      	movs	r2, #128	; 0x80
 8004156:	0192      	lsls	r2, r2, #6
 8004158:	601a      	str	r2, [r3, #0]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 800415a:	187b      	adds	r3, r7, r1
 800415c:	2200      	movs	r2, #0
 800415e:	605a      	str	r2, [r3, #4]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 8004160:	187b      	adds	r3, r7, r1
 8004162:	2200      	movs	r2, #0
 8004164:	609a      	str	r2, [r3, #8]
  sClockSourceConfig.ClockFilter = 0;
 8004166:	187b      	adds	r3, r7, r1
 8004168:	2200      	movs	r2, #0
 800416a:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_ConfigClockSource(&htim21, &sClockSourceConfig) != HAL_OK)
 800416c:	187a      	adds	r2, r7, r1
 800416e:	4b27      	ldr	r3, [pc, #156]	; (800420c <MX_TIM21_Init+0x124>)
 8004170:	0011      	movs	r1, r2
 8004172:	0018      	movs	r0, r3
 8004174:	f007 f82a 	bl	800b1cc <HAL_TIM_ConfigClockSource>
 8004178:	1e03      	subs	r3, r0, #0
 800417a:	d001      	beq.n	8004180 <MX_TIM21_Init+0x98>
  {
    Error_Handler();
 800417c:	f000 f9da 	bl	8004534 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim21) != HAL_OK)
 8004180:	4b22      	ldr	r3, [pc, #136]	; (800420c <MX_TIM21_Init+0x124>)
 8004182:	0018      	movs	r0, r3
 8004184:	f006 fce0 	bl	800ab48 <HAL_TIM_OC_Init>
 8004188:	1e03      	subs	r3, r0, #0
 800418a:	d001      	beq.n	8004190 <MX_TIM21_Init+0xa8>
  {
    Error_Handler();
 800418c:	f000 f9d2 	bl	8004534 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004190:	2110      	movs	r1, #16
 8004192:	187b      	adds	r3, r7, r1
 8004194:	2200      	movs	r2, #0
 8004196:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004198:	187b      	adds	r3, r7, r1
 800419a:	2200      	movs	r2, #0
 800419c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim21, &sMasterConfig) != HAL_OK)
 800419e:	187a      	adds	r2, r7, r1
 80041a0:	4b1a      	ldr	r3, [pc, #104]	; (800420c <MX_TIM21_Init+0x124>)
 80041a2:	0011      	movs	r1, r2
 80041a4:	0018      	movs	r0, r3
 80041a6:	f007 fb06 	bl	800b7b6 <HAL_TIMEx_MasterConfigSynchronization>
 80041aa:	1e03      	subs	r3, r0, #0
 80041ac:	d001      	beq.n	80041b2 <MX_TIM21_Init+0xca>
  {
    Error_Handler();
 80041ae:	f000 f9c1 	bl	8004534 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim21, TIM21_ETR_LSE) != HAL_OK)
 80041b2:	4b16      	ldr	r3, [pc, #88]	; (800420c <MX_TIM21_Init+0x124>)
 80041b4:	2103      	movs	r1, #3
 80041b6:	0018      	movs	r0, r3
 80041b8:	f007 fb40 	bl	800b83c <HAL_TIMEx_RemapConfig>
 80041bc:	1e03      	subs	r3, r0, #0
 80041be:	d001      	beq.n	80041c4 <MX_TIM21_Init+0xdc>
  {
    Error_Handler();
 80041c0:	f000 f9b8 	bl	8004534 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80041c4:	003b      	movs	r3, r7
 80041c6:	2200      	movs	r2, #0
 80041c8:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80041ca:	003b      	movs	r3, r7
 80041cc:	2200      	movs	r2, #0
 80041ce:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80041d0:	003b      	movs	r3, r7
 80041d2:	2200      	movs	r2, #0
 80041d4:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80041d6:	003b      	movs	r3, r7
 80041d8:	2200      	movs	r2, #0
 80041da:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_OC_ConfigChannel(&htim21, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80041dc:	0039      	movs	r1, r7
 80041de:	4b0b      	ldr	r3, [pc, #44]	; (800420c <MX_TIM21_Init+0x124>)
 80041e0:	2200      	movs	r2, #0
 80041e2:	0018      	movs	r0, r3
 80041e4:	f006 feec 	bl	800afc0 <HAL_TIM_OC_ConfigChannel>
 80041e8:	1e03      	subs	r3, r0, #0
 80041ea:	d001      	beq.n	80041f0 <MX_TIM21_Init+0x108>
  {
    Error_Handler();
 80041ec:	f000 f9a2 	bl	8004534 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim21, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80041f0:	0039      	movs	r1, r7
 80041f2:	4b06      	ldr	r3, [pc, #24]	; (800420c <MX_TIM21_Init+0x124>)
 80041f4:	2204      	movs	r2, #4
 80041f6:	0018      	movs	r0, r3
 80041f8:	f006 fee2 	bl	800afc0 <HAL_TIM_OC_ConfigChannel>
 80041fc:	1e03      	subs	r3, r0, #0
 80041fe:	d001      	beq.n	8004204 <MX_TIM21_Init+0x11c>
  {
    Error_Handler();
 8004200:	f000 f998 	bl	8004534 <Error_Handler>
  }
  /* USER CODE BEGIN TIM21_Init 2 */

  /* USER CODE END TIM21_Init 2 */

}
 8004204:	46c0      	nop			; (mov r8, r8)
 8004206:	46bd      	mov	sp, r7
 8004208:	b00a      	add	sp, #40	; 0x28
 800420a:	bd80      	pop	{r7, pc}
 800420c:	20000670 	.word	0x20000670
 8004210:	40010800 	.word	0x40010800
 8004214:	00007fff 	.word	0x00007fff

08004218 <MX_TIM22_Init>:
  * @brief TIM22 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM22_Init(void)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b08a      	sub	sp, #40	; 0x28
 800421c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM22_Init 0 */

  /* USER CODE END TIM22_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800421e:	2318      	movs	r3, #24
 8004220:	18fb      	adds	r3, r7, r3
 8004222:	0018      	movs	r0, r3
 8004224:	2310      	movs	r3, #16
 8004226:	001a      	movs	r2, r3
 8004228:	2100      	movs	r1, #0
 800422a:	f007 fba8 	bl	800b97e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800422e:	2310      	movs	r3, #16
 8004230:	18fb      	adds	r3, r7, r3
 8004232:	0018      	movs	r0, r3
 8004234:	2308      	movs	r3, #8
 8004236:	001a      	movs	r2, r3
 8004238:	2100      	movs	r1, #0
 800423a:	f007 fba0 	bl	800b97e <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800423e:	003b      	movs	r3, r7
 8004240:	0018      	movs	r0, r3
 8004242:	2310      	movs	r3, #16
 8004244:	001a      	movs	r2, r3
 8004246:	2100      	movs	r1, #0
 8004248:	f007 fb99 	bl	800b97e <memset>

  /* USER CODE BEGIN TIM22_Init 1 */

  /* USER CODE END TIM22_Init 1 */
  htim22.Instance = TIM22;
 800424c:	4b37      	ldr	r3, [pc, #220]	; (800432c <MX_TIM22_Init+0x114>)
 800424e:	4a38      	ldr	r2, [pc, #224]	; (8004330 <MX_TIM22_Init+0x118>)
 8004250:	601a      	str	r2, [r3, #0]
  htim22.Init.Prescaler = 0x400;
 8004252:	4b36      	ldr	r3, [pc, #216]	; (800432c <MX_TIM22_Init+0x114>)
 8004254:	2280      	movs	r2, #128	; 0x80
 8004256:	00d2      	lsls	r2, r2, #3
 8004258:	605a      	str	r2, [r3, #4]
  htim22.Init.CounterMode = TIM_COUNTERMODE_UP;
 800425a:	4b34      	ldr	r3, [pc, #208]	; (800432c <MX_TIM22_Init+0x114>)
 800425c:	2200      	movs	r2, #0
 800425e:	609a      	str	r2, [r3, #8]
  htim22.Init.Period = 1919;
 8004260:	4b32      	ldr	r3, [pc, #200]	; (800432c <MX_TIM22_Init+0x114>)
 8004262:	4a34      	ldr	r2, [pc, #208]	; (8004334 <MX_TIM22_Init+0x11c>)
 8004264:	60da      	str	r2, [r3, #12]
  htim22.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004266:	4b31      	ldr	r3, [pc, #196]	; (800432c <MX_TIM22_Init+0x114>)
 8004268:	2200      	movs	r2, #0
 800426a:	611a      	str	r2, [r3, #16]
  htim22.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800426c:	4b2f      	ldr	r3, [pc, #188]	; (800432c <MX_TIM22_Init+0x114>)
 800426e:	2200      	movs	r2, #0
 8004270:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim22) != HAL_OK)
 8004272:	4b2e      	ldr	r3, [pc, #184]	; (800432c <MX_TIM22_Init+0x114>)
 8004274:	0018      	movs	r0, r3
 8004276:	f006 fbf7 	bl	800aa68 <HAL_TIM_Base_Init>
 800427a:	1e03      	subs	r3, r0, #0
 800427c:	d001      	beq.n	8004282 <MX_TIM22_Init+0x6a>
  {
    Error_Handler();
 800427e:	f000 f959 	bl	8004534 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 8004282:	2118      	movs	r1, #24
 8004284:	187b      	adds	r3, r7, r1
 8004286:	2280      	movs	r2, #128	; 0x80
 8004288:	0192      	lsls	r2, r2, #6
 800428a:	601a      	str	r2, [r3, #0]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 800428c:	187b      	adds	r3, r7, r1
 800428e:	2200      	movs	r2, #0
 8004290:	605a      	str	r2, [r3, #4]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 8004292:	187b      	adds	r3, r7, r1
 8004294:	2200      	movs	r2, #0
 8004296:	609a      	str	r2, [r3, #8]
  sClockSourceConfig.ClockFilter = 0;
 8004298:	187b      	adds	r3, r7, r1
 800429a:	2200      	movs	r2, #0
 800429c:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_ConfigClockSource(&htim22, &sClockSourceConfig) != HAL_OK)
 800429e:	187a      	adds	r2, r7, r1
 80042a0:	4b22      	ldr	r3, [pc, #136]	; (800432c <MX_TIM22_Init+0x114>)
 80042a2:	0011      	movs	r1, r2
 80042a4:	0018      	movs	r0, r3
 80042a6:	f006 ff91 	bl	800b1cc <HAL_TIM_ConfigClockSource>
 80042aa:	1e03      	subs	r3, r0, #0
 80042ac:	d001      	beq.n	80042b2 <MX_TIM22_Init+0x9a>
  {
    Error_Handler();
 80042ae:	f000 f941 	bl	8004534 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim22) != HAL_OK)
 80042b2:	4b1e      	ldr	r3, [pc, #120]	; (800432c <MX_TIM22_Init+0x114>)
 80042b4:	0018      	movs	r0, r3
 80042b6:	f006 fc47 	bl	800ab48 <HAL_TIM_OC_Init>
 80042ba:	1e03      	subs	r3, r0, #0
 80042bc:	d001      	beq.n	80042c2 <MX_TIM22_Init+0xaa>
  {
    Error_Handler();
 80042be:	f000 f939 	bl	8004534 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80042c2:	2110      	movs	r1, #16
 80042c4:	187b      	adds	r3, r7, r1
 80042c6:	2200      	movs	r2, #0
 80042c8:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80042ca:	187b      	adds	r3, r7, r1
 80042cc:	2200      	movs	r2, #0
 80042ce:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim22, &sMasterConfig) != HAL_OK)
 80042d0:	187a      	adds	r2, r7, r1
 80042d2:	4b16      	ldr	r3, [pc, #88]	; (800432c <MX_TIM22_Init+0x114>)
 80042d4:	0011      	movs	r1, r2
 80042d6:	0018      	movs	r0, r3
 80042d8:	f007 fa6d 	bl	800b7b6 <HAL_TIMEx_MasterConfigSynchronization>
 80042dc:	1e03      	subs	r3, r0, #0
 80042de:	d001      	beq.n	80042e4 <MX_TIM22_Init+0xcc>
  {
    Error_Handler();
 80042e0:	f000 f928 	bl	8004534 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim22, TIM22_ETR_LSE) != HAL_OK)
 80042e4:	4b11      	ldr	r3, [pc, #68]	; (800432c <MX_TIM22_Init+0x114>)
 80042e6:	2103      	movs	r1, #3
 80042e8:	0018      	movs	r0, r3
 80042ea:	f007 faa7 	bl	800b83c <HAL_TIMEx_RemapConfig>
 80042ee:	1e03      	subs	r3, r0, #0
 80042f0:	d001      	beq.n	80042f6 <MX_TIM22_Init+0xde>
  {
    Error_Handler();
 80042f2:	f000 f91f 	bl	8004534 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80042f6:	003b      	movs	r3, r7
 80042f8:	2200      	movs	r2, #0
 80042fa:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80042fc:	003b      	movs	r3, r7
 80042fe:	2200      	movs	r2, #0
 8004300:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004302:	003b      	movs	r3, r7
 8004304:	2200      	movs	r2, #0
 8004306:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004308:	003b      	movs	r3, r7
 800430a:	2200      	movs	r2, #0
 800430c:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_OC_ConfigChannel(&htim22, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800430e:	0039      	movs	r1, r7
 8004310:	4b06      	ldr	r3, [pc, #24]	; (800432c <MX_TIM22_Init+0x114>)
 8004312:	2200      	movs	r2, #0
 8004314:	0018      	movs	r0, r3
 8004316:	f006 fe53 	bl	800afc0 <HAL_TIM_OC_ConfigChannel>
 800431a:	1e03      	subs	r3, r0, #0
 800431c:	d001      	beq.n	8004322 <MX_TIM22_Init+0x10a>
  {
    Error_Handler();
 800431e:	f000 f909 	bl	8004534 <Error_Handler>
  }
  /* USER CODE BEGIN TIM22_Init 2 */

  /* USER CODE END TIM22_Init 2 */

}
 8004322:	46c0      	nop			; (mov r8, r8)
 8004324:	46bd      	mov	sp, r7
 8004326:	b00a      	add	sp, #40	; 0x28
 8004328:	bd80      	pop	{r7, pc}
 800432a:	46c0      	nop			; (mov r8, r8)
 800432c:	2000023c 	.word	0x2000023c
 8004330:	40011400 	.word	0x40011400
 8004334:	0000077f 	.word	0x0000077f

08004338 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 800433c:	4b0f      	ldr	r3, [pc, #60]	; (800437c <MX_USB_PCD_Init+0x44>)
 800433e:	4a10      	ldr	r2, [pc, #64]	; (8004380 <MX_USB_PCD_Init+0x48>)
 8004340:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8004342:	4b0e      	ldr	r3, [pc, #56]	; (800437c <MX_USB_PCD_Init+0x44>)
 8004344:	2208      	movs	r2, #8
 8004346:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8004348:	4b0c      	ldr	r3, [pc, #48]	; (800437c <MX_USB_PCD_Init+0x44>)
 800434a:	2202      	movs	r2, #2
 800434c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800434e:	4b0b      	ldr	r3, [pc, #44]	; (800437c <MX_USB_PCD_Init+0x44>)
 8004350:	2202      	movs	r2, #2
 8004352:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8004354:	4b09      	ldr	r3, [pc, #36]	; (800437c <MX_USB_PCD_Init+0x44>)
 8004356:	2200      	movs	r2, #0
 8004358:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800435a:	4b08      	ldr	r3, [pc, #32]	; (800437c <MX_USB_PCD_Init+0x44>)
 800435c:	2200      	movs	r2, #0
 800435e:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8004360:	4b06      	ldr	r3, [pc, #24]	; (800437c <MX_USB_PCD_Init+0x44>)
 8004362:	2200      	movs	r2, #0
 8004364:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8004366:	4b05      	ldr	r3, [pc, #20]	; (800437c <MX_USB_PCD_Init+0x44>)
 8004368:	0018      	movs	r0, r3
 800436a:	f003 ff11 	bl	8008190 <HAL_PCD_Init>
 800436e:	1e03      	subs	r3, r0, #0
 8004370:	d001      	beq.n	8004376 <MX_USB_PCD_Init+0x3e>
  {
    Error_Handler();
 8004372:	f000 f8df 	bl	8004534 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8004376:	46c0      	nop			; (mov r8, r8)
 8004378:	46bd      	mov	sp, r7
 800437a:	bd80      	pop	{r7, pc}
 800437c:	20000320 	.word	0x20000320
 8004380:	40005c00 	.word	0x40005c00

08004384 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b082      	sub	sp, #8
 8004388:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800438a:	4b0c      	ldr	r3, [pc, #48]	; (80043bc <MX_DMA_Init+0x38>)
 800438c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800438e:	4b0b      	ldr	r3, [pc, #44]	; (80043bc <MX_DMA_Init+0x38>)
 8004390:	2101      	movs	r1, #1
 8004392:	430a      	orrs	r2, r1
 8004394:	631a      	str	r2, [r3, #48]	; 0x30
 8004396:	4b09      	ldr	r3, [pc, #36]	; (80043bc <MX_DMA_Init+0x38>)
 8004398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800439a:	2201      	movs	r2, #1
 800439c:	4013      	ands	r3, r2
 800439e:	607b      	str	r3, [r7, #4]
 80043a0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 80043a2:	2200      	movs	r2, #0
 80043a4:	2100      	movs	r1, #0
 80043a6:	200b      	movs	r0, #11
 80043a8:	f003 fadc 	bl	8007964 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 80043ac:	200b      	movs	r0, #11
 80043ae:	f003 faee 	bl	800798e <HAL_NVIC_EnableIRQ>

}
 80043b2:	46c0      	nop			; (mov r8, r8)
 80043b4:	46bd      	mov	sp, r7
 80043b6:	b002      	add	sp, #8
 80043b8:	bd80      	pop	{r7, pc}
 80043ba:	46c0      	nop			; (mov r8, r8)
 80043bc:	40021000 	.word	0x40021000

080043c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80043c0:	b590      	push	{r4, r7, lr}
 80043c2:	b089      	sub	sp, #36	; 0x24
 80043c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043c6:	240c      	movs	r4, #12
 80043c8:	193b      	adds	r3, r7, r4
 80043ca:	0018      	movs	r0, r3
 80043cc:	2314      	movs	r3, #20
 80043ce:	001a      	movs	r2, r3
 80043d0:	2100      	movs	r1, #0
 80043d2:	f007 fad4 	bl	800b97e <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80043d6:	4b52      	ldr	r3, [pc, #328]	; (8004520 <MX_GPIO_Init+0x160>)
 80043d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043da:	4b51      	ldr	r3, [pc, #324]	; (8004520 <MX_GPIO_Init+0x160>)
 80043dc:	2104      	movs	r1, #4
 80043de:	430a      	orrs	r2, r1
 80043e0:	62da      	str	r2, [r3, #44]	; 0x2c
 80043e2:	4b4f      	ldr	r3, [pc, #316]	; (8004520 <MX_GPIO_Init+0x160>)
 80043e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043e6:	2204      	movs	r2, #4
 80043e8:	4013      	ands	r3, r2
 80043ea:	60bb      	str	r3, [r7, #8]
 80043ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80043ee:	4b4c      	ldr	r3, [pc, #304]	; (8004520 <MX_GPIO_Init+0x160>)
 80043f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043f2:	4b4b      	ldr	r3, [pc, #300]	; (8004520 <MX_GPIO_Init+0x160>)
 80043f4:	2101      	movs	r1, #1
 80043f6:	430a      	orrs	r2, r1
 80043f8:	62da      	str	r2, [r3, #44]	; 0x2c
 80043fa:	4b49      	ldr	r3, [pc, #292]	; (8004520 <MX_GPIO_Init+0x160>)
 80043fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043fe:	2201      	movs	r2, #1
 8004400:	4013      	ands	r3, r2
 8004402:	607b      	str	r3, [r7, #4]
 8004404:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004406:	4b46      	ldr	r3, [pc, #280]	; (8004520 <MX_GPIO_Init+0x160>)
 8004408:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800440a:	4b45      	ldr	r3, [pc, #276]	; (8004520 <MX_GPIO_Init+0x160>)
 800440c:	2102      	movs	r1, #2
 800440e:	430a      	orrs	r2, r1
 8004410:	62da      	str	r2, [r3, #44]	; 0x2c
 8004412:	4b43      	ldr	r3, [pc, #268]	; (8004520 <MX_GPIO_Init+0x160>)
 8004414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004416:	2202      	movs	r2, #2
 8004418:	4013      	ands	r3, r2
 800441a:	603b      	str	r3, [r7, #0]
 800441c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ADC_DIV_EN_Pin|MOTOR_EN_Pin|LED1_Pin|LED2_Pin
 800441e:	23a0      	movs	r3, #160	; 0xa0
 8004420:	05db      	lsls	r3, r3, #23
 8004422:	2200      	movs	r2, #0
 8004424:	21f2      	movs	r1, #242	; 0xf2
 8004426:	0018      	movs	r0, r3
 8004428:	f003 fe5e 	bl	80080e8 <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PS_EN_GPIO_Port, PS_EN_Pin, GPIO_PIN_SET);
 800442c:	23a0      	movs	r3, #160	; 0xa0
 800442e:	05db      	lsls	r3, r3, #23
 8004430:	2201      	movs	r2, #1
 8004432:	2104      	movs	r1, #4
 8004434:	0018      	movs	r0, r3
 8004436:	f003 fe57 	bl	80080e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 800443a:	2380      	movs	r3, #128	; 0x80
 800443c:	01db      	lsls	r3, r3, #7
 800443e:	4839      	ldr	r0, [pc, #228]	; (8004524 <MX_GPIO_Init+0x164>)
 8004440:	2200      	movs	r2, #0
 8004442:	0019      	movs	r1, r3
 8004444:	f003 fe50 	bl	80080e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_SET);
 8004448:	4b37      	ldr	r3, [pc, #220]	; (8004528 <MX_GPIO_Init+0x168>)
 800444a:	2201      	movs	r2, #1
 800444c:	2180      	movs	r1, #128	; 0x80
 800444e:	0018      	movs	r0, r3
 8004450:	f003 fe4a 	bl	80080e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ADC_DIV_EN_Pin PS_EN_Pin MOTOR_EN_Pin LED1_Pin
                           LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = ADC_DIV_EN_Pin|PS_EN_Pin|MOTOR_EN_Pin|LED1_Pin
 8004454:	193b      	adds	r3, r7, r4
 8004456:	22f6      	movs	r2, #246	; 0xf6
 8004458:	601a      	str	r2, [r3, #0]
                          |LED2_Pin|LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800445a:	193b      	adds	r3, r7, r4
 800445c:	2201      	movs	r2, #1
 800445e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004460:	193b      	adds	r3, r7, r4
 8004462:	2200      	movs	r2, #0
 8004464:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004466:	193b      	adds	r3, r7, r4
 8004468:	2200      	movs	r2, #0
 800446a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800446c:	193a      	adds	r2, r7, r4
 800446e:	23a0      	movs	r3, #160	; 0xa0
 8004470:	05db      	lsls	r3, r3, #23
 8004472:	0011      	movs	r1, r2
 8004474:	0018      	movs	r0, r3
 8004476:	f003 fcb9 	bl	8007dec <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11;
 800447a:	193b      	adds	r3, r7, r4
 800447c:	4a2b      	ldr	r2, [pc, #172]	; (800452c <MX_GPIO_Init+0x16c>)
 800447e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004480:	193b      	adds	r3, r7, r4
 8004482:	4a2b      	ldr	r2, [pc, #172]	; (8004530 <MX_GPIO_Init+0x170>)
 8004484:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004486:	193b      	adds	r3, r7, r4
 8004488:	2200      	movs	r2, #0
 800448a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800448c:	193b      	adds	r3, r7, r4
 800448e:	4a25      	ldr	r2, [pc, #148]	; (8004524 <MX_GPIO_Init+0x164>)
 8004490:	0019      	movs	r1, r3
 8004492:	0010      	movs	r0, r2
 8004494:	f003 fcaa 	bl	8007dec <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DC_Pin */
  GPIO_InitStruct.Pin = LCD_DC_Pin;
 8004498:	0021      	movs	r1, r4
 800449a:	187b      	adds	r3, r7, r1
 800449c:	2280      	movs	r2, #128	; 0x80
 800449e:	01d2      	lsls	r2, r2, #7
 80044a0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80044a2:	187b      	adds	r3, r7, r1
 80044a4:	2201      	movs	r2, #1
 80044a6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044a8:	187b      	adds	r3, r7, r1
 80044aa:	2200      	movs	r2, #0
 80044ac:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044ae:	187b      	adds	r3, r7, r1
 80044b0:	2203      	movs	r2, #3
 80044b2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LCD_DC_GPIO_Port, &GPIO_InitStruct);
 80044b4:	000c      	movs	r4, r1
 80044b6:	187b      	adds	r3, r7, r1
 80044b8:	4a1a      	ldr	r2, [pc, #104]	; (8004524 <MX_GPIO_Init+0x164>)
 80044ba:	0019      	movs	r1, r3
 80044bc:	0010      	movs	r0, r2
 80044be:	f003 fc95 	bl	8007dec <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_RESET_Pin */
  GPIO_InitStruct.Pin = LCD_RESET_Pin;
 80044c2:	0021      	movs	r1, r4
 80044c4:	187b      	adds	r3, r7, r1
 80044c6:	2280      	movs	r2, #128	; 0x80
 80044c8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80044ca:	187b      	adds	r3, r7, r1
 80044cc:	2201      	movs	r2, #1
 80044ce:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044d0:	187b      	adds	r3, r7, r1
 80044d2:	2200      	movs	r2, #0
 80044d4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044d6:	187b      	adds	r3, r7, r1
 80044d8:	2200      	movs	r2, #0
 80044da:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
 80044dc:	187b      	adds	r3, r7, r1
 80044de:	4a12      	ldr	r2, [pc, #72]	; (8004528 <MX_GPIO_Init+0x168>)
 80044e0:	0019      	movs	r1, r3
 80044e2:	0010      	movs	r0, r2
 80044e4:	f003 fc82 	bl	8007dec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 80044e8:	2200      	movs	r2, #0
 80044ea:	2100      	movs	r1, #0
 80044ec:	2005      	movs	r0, #5
 80044ee:	f003 fa39 	bl	8007964 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 80044f2:	2005      	movs	r0, #5
 80044f4:	f003 fa4b 	bl	800798e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 80044f8:	2200      	movs	r2, #0
 80044fa:	2100      	movs	r1, #0
 80044fc:	2006      	movs	r0, #6
 80044fe:	f003 fa31 	bl	8007964 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8004502:	2006      	movs	r0, #6
 8004504:	f003 fa43 	bl	800798e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8004508:	2200      	movs	r2, #0
 800450a:	2100      	movs	r1, #0
 800450c:	2007      	movs	r0, #7
 800450e:	f003 fa29 	bl	8007964 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8004512:	2007      	movs	r0, #7
 8004514:	f003 fa3b 	bl	800798e <HAL_NVIC_EnableIRQ>

}
 8004518:	46c0      	nop			; (mov r8, r8)
 800451a:	46bd      	mov	sp, r7
 800451c:	b009      	add	sp, #36	; 0x24
 800451e:	bd90      	pop	{r4, r7, pc}
 8004520:	40021000 	.word	0x40021000
 8004524:	50000400 	.word	0x50000400
 8004528:	50000800 	.word	0x50000800
 800452c:	00000c06 	.word	0x00000c06
 8004530:	10110000 	.word	0x10110000

08004534 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004538:	46c0      	nop			; (mov r8, r8)
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}
	...

08004540 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004544:	4b07      	ldr	r3, [pc, #28]	; (8004564 <HAL_MspInit+0x24>)
 8004546:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004548:	4b06      	ldr	r3, [pc, #24]	; (8004564 <HAL_MspInit+0x24>)
 800454a:	2101      	movs	r1, #1
 800454c:	430a      	orrs	r2, r1
 800454e:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8004550:	4b04      	ldr	r3, [pc, #16]	; (8004564 <HAL_MspInit+0x24>)
 8004552:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004554:	4b03      	ldr	r3, [pc, #12]	; (8004564 <HAL_MspInit+0x24>)
 8004556:	2180      	movs	r1, #128	; 0x80
 8004558:	0549      	lsls	r1, r1, #21
 800455a:	430a      	orrs	r2, r1
 800455c:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800455e:	46c0      	nop			; (mov r8, r8)
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}
 8004564:	40021000 	.word	0x40021000

08004568 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b088      	sub	sp, #32
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004570:	230c      	movs	r3, #12
 8004572:	18fb      	adds	r3, r7, r3
 8004574:	0018      	movs	r0, r3
 8004576:	2314      	movs	r3, #20
 8004578:	001a      	movs	r2, r3
 800457a:	2100      	movs	r1, #0
 800457c:	f007 f9ff 	bl	800b97e <memset>
  if(hadc->Instance==ADC1)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a19      	ldr	r2, [pc, #100]	; (80045ec <HAL_ADC_MspInit+0x84>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d12b      	bne.n	80045e2 <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800458a:	4b19      	ldr	r3, [pc, #100]	; (80045f0 <HAL_ADC_MspInit+0x88>)
 800458c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800458e:	4b18      	ldr	r3, [pc, #96]	; (80045f0 <HAL_ADC_MspInit+0x88>)
 8004590:	2180      	movs	r1, #128	; 0x80
 8004592:	0089      	lsls	r1, r1, #2
 8004594:	430a      	orrs	r2, r1
 8004596:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004598:	4b15      	ldr	r3, [pc, #84]	; (80045f0 <HAL_ADC_MspInit+0x88>)
 800459a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800459c:	4b14      	ldr	r3, [pc, #80]	; (80045f0 <HAL_ADC_MspInit+0x88>)
 800459e:	2101      	movs	r1, #1
 80045a0:	430a      	orrs	r2, r1
 80045a2:	62da      	str	r2, [r3, #44]	; 0x2c
 80045a4:	4b12      	ldr	r3, [pc, #72]	; (80045f0 <HAL_ADC_MspInit+0x88>)
 80045a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a8:	2201      	movs	r2, #1
 80045aa:	4013      	ands	r3, r2
 80045ac:	60bb      	str	r3, [r7, #8]
 80045ae:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80045b0:	210c      	movs	r1, #12
 80045b2:	187b      	adds	r3, r7, r1
 80045b4:	2201      	movs	r2, #1
 80045b6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80045b8:	187b      	adds	r3, r7, r1
 80045ba:	2203      	movs	r2, #3
 80045bc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045be:	187b      	adds	r3, r7, r1
 80045c0:	2200      	movs	r2, #0
 80045c2:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045c4:	187a      	adds	r2, r7, r1
 80045c6:	23a0      	movs	r3, #160	; 0xa0
 80045c8:	05db      	lsls	r3, r3, #23
 80045ca:	0011      	movs	r1, r2
 80045cc:	0018      	movs	r0, r3
 80045ce:	f003 fc0d 	bl	8007dec <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 0, 0);
 80045d2:	2200      	movs	r2, #0
 80045d4:	2100      	movs	r1, #0
 80045d6:	200c      	movs	r0, #12
 80045d8:	f003 f9c4 	bl	8007964 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 80045dc:	200c      	movs	r0, #12
 80045de:	f003 f9d6 	bl	800798e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80045e2:	46c0      	nop			; (mov r8, r8)
 80045e4:	46bd      	mov	sp, r7
 80045e6:	b008      	add	sp, #32
 80045e8:	bd80      	pop	{r7, pc}
 80045ea:	46c0      	nop			; (mov r8, r8)
 80045ec:	40012400 	.word	0x40012400
 80045f0:	40021000 	.word	0x40021000

080045f4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b082      	sub	sp, #8
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a0a      	ldr	r2, [pc, #40]	; (800462c <HAL_RTC_MspInit+0x38>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d10e      	bne.n	8004624 <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004606:	4b0a      	ldr	r3, [pc, #40]	; (8004630 <HAL_RTC_MspInit+0x3c>)
 8004608:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800460a:	4b09      	ldr	r3, [pc, #36]	; (8004630 <HAL_RTC_MspInit+0x3c>)
 800460c:	2180      	movs	r1, #128	; 0x80
 800460e:	02c9      	lsls	r1, r1, #11
 8004610:	430a      	orrs	r2, r1
 8004612:	651a      	str	r2, [r3, #80]	; 0x50
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8004614:	2200      	movs	r2, #0
 8004616:	2100      	movs	r1, #0
 8004618:	2002      	movs	r0, #2
 800461a:	f003 f9a3 	bl	8007964 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 800461e:	2002      	movs	r0, #2
 8004620:	f003 f9b5 	bl	800798e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8004624:	46c0      	nop			; (mov r8, r8)
 8004626:	46bd      	mov	sp, r7
 8004628:	b002      	add	sp, #8
 800462a:	bd80      	pop	{r7, pc}
 800462c:	40002800 	.word	0x40002800
 8004630:	40021000 	.word	0x40021000

08004634 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b088      	sub	sp, #32
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800463c:	230c      	movs	r3, #12
 800463e:	18fb      	adds	r3, r7, r3
 8004640:	0018      	movs	r0, r3
 8004642:	2314      	movs	r3, #20
 8004644:	001a      	movs	r2, r3
 8004646:	2100      	movs	r1, #0
 8004648:	f007 f999 	bl	800b97e <memset>
  if(hspi->Instance==SPI2)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a31      	ldr	r2, [pc, #196]	; (8004718 <HAL_SPI_MspInit+0xe4>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d15c      	bne.n	8004710 <HAL_SPI_MspInit+0xdc>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004656:	4b31      	ldr	r3, [pc, #196]	; (800471c <HAL_SPI_MspInit+0xe8>)
 8004658:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800465a:	4b30      	ldr	r3, [pc, #192]	; (800471c <HAL_SPI_MspInit+0xe8>)
 800465c:	2180      	movs	r1, #128	; 0x80
 800465e:	01c9      	lsls	r1, r1, #7
 8004660:	430a      	orrs	r2, r1
 8004662:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004664:	4b2d      	ldr	r3, [pc, #180]	; (800471c <HAL_SPI_MspInit+0xe8>)
 8004666:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004668:	4b2c      	ldr	r3, [pc, #176]	; (800471c <HAL_SPI_MspInit+0xe8>)
 800466a:	2102      	movs	r1, #2
 800466c:	430a      	orrs	r2, r1
 800466e:	62da      	str	r2, [r3, #44]	; 0x2c
 8004670:	4b2a      	ldr	r3, [pc, #168]	; (800471c <HAL_SPI_MspInit+0xe8>)
 8004672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004674:	2202      	movs	r2, #2
 8004676:	4013      	ands	r3, r2
 8004678:	60bb      	str	r3, [r7, #8]
 800467a:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 800467c:	210c      	movs	r1, #12
 800467e:	187b      	adds	r3, r7, r1
 8004680:	22b0      	movs	r2, #176	; 0xb0
 8004682:	0212      	lsls	r2, r2, #8
 8004684:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004686:	187b      	adds	r3, r7, r1
 8004688:	2202      	movs	r2, #2
 800468a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800468c:	187b      	adds	r3, r7, r1
 800468e:	2200      	movs	r2, #0
 8004690:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004692:	187b      	adds	r3, r7, r1
 8004694:	2203      	movs	r2, #3
 8004696:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8004698:	187b      	adds	r3, r7, r1
 800469a:	2200      	movs	r2, #0
 800469c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800469e:	187b      	adds	r3, r7, r1
 80046a0:	4a1f      	ldr	r2, [pc, #124]	; (8004720 <HAL_SPI_MspInit+0xec>)
 80046a2:	0019      	movs	r1, r3
 80046a4:	0010      	movs	r0, r2
 80046a6:	f003 fba1 	bl	8007dec <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel5;
 80046aa:	4b1e      	ldr	r3, [pc, #120]	; (8004724 <HAL_SPI_MspInit+0xf0>)
 80046ac:	4a1e      	ldr	r2, [pc, #120]	; (8004728 <HAL_SPI_MspInit+0xf4>)
 80046ae:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_2;
 80046b0:	4b1c      	ldr	r3, [pc, #112]	; (8004724 <HAL_SPI_MspInit+0xf0>)
 80046b2:	2202      	movs	r2, #2
 80046b4:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80046b6:	4b1b      	ldr	r3, [pc, #108]	; (8004724 <HAL_SPI_MspInit+0xf0>)
 80046b8:	2210      	movs	r2, #16
 80046ba:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80046bc:	4b19      	ldr	r3, [pc, #100]	; (8004724 <HAL_SPI_MspInit+0xf0>)
 80046be:	2200      	movs	r2, #0
 80046c0:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_DISABLE;
 80046c2:	4b18      	ldr	r3, [pc, #96]	; (8004724 <HAL_SPI_MspInit+0xf0>)
 80046c4:	2200      	movs	r2, #0
 80046c6:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80046c8:	4b16      	ldr	r3, [pc, #88]	; (8004724 <HAL_SPI_MspInit+0xf0>)
 80046ca:	2280      	movs	r2, #128	; 0x80
 80046cc:	0052      	lsls	r2, r2, #1
 80046ce:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80046d0:	4b14      	ldr	r3, [pc, #80]	; (8004724 <HAL_SPI_MspInit+0xf0>)
 80046d2:	2280      	movs	r2, #128	; 0x80
 80046d4:	00d2      	lsls	r2, r2, #3
 80046d6:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 80046d8:	4b12      	ldr	r3, [pc, #72]	; (8004724 <HAL_SPI_MspInit+0xf0>)
 80046da:	2200      	movs	r2, #0
 80046dc:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80046de:	4b11      	ldr	r3, [pc, #68]	; (8004724 <HAL_SPI_MspInit+0xf0>)
 80046e0:	2200      	movs	r2, #0
 80046e2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80046e4:	4b0f      	ldr	r3, [pc, #60]	; (8004724 <HAL_SPI_MspInit+0xf0>)
 80046e6:	0018      	movs	r0, r3
 80046e8:	f003 f97e 	bl	80079e8 <HAL_DMA_Init>
 80046ec:	1e03      	subs	r3, r0, #0
 80046ee:	d001      	beq.n	80046f4 <HAL_SPI_MspInit+0xc0>
    {
      Error_Handler();
 80046f0:	f7ff ff20 	bl	8004534 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	4a0b      	ldr	r2, [pc, #44]	; (8004724 <HAL_SPI_MspInit+0xf0>)
 80046f8:	649a      	str	r2, [r3, #72]	; 0x48
 80046fa:	4b0a      	ldr	r3, [pc, #40]	; (8004724 <HAL_SPI_MspInit+0xf0>)
 80046fc:	687a      	ldr	r2, [r7, #4]
 80046fe:	629a      	str	r2, [r3, #40]	; 0x28

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8004700:	2200      	movs	r2, #0
 8004702:	2100      	movs	r1, #0
 8004704:	201a      	movs	r0, #26
 8004706:	f003 f92d 	bl	8007964 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800470a:	201a      	movs	r0, #26
 800470c:	f003 f93f 	bl	800798e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8004710:	46c0      	nop			; (mov r8, r8)
 8004712:	46bd      	mov	sp, r7
 8004714:	b008      	add	sp, #32
 8004716:	bd80      	pop	{r7, pc}
 8004718:	40003800 	.word	0x40003800
 800471c:	40021000 	.word	0x40021000
 8004720:	50000400 	.word	0x50000400
 8004724:	200002d8 	.word	0x200002d8
 8004728:	40020058 	.word	0x40020058

0800472c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b082      	sub	sp, #8
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681a      	ldr	r2, [r3, #0]
 8004738:	2380      	movs	r3, #128	; 0x80
 800473a:	05db      	lsls	r3, r3, #23
 800473c:	429a      	cmp	r2, r3
 800473e:	d10e      	bne.n	800475e <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004740:	4b28      	ldr	r3, [pc, #160]	; (80047e4 <HAL_TIM_Base_MspInit+0xb8>)
 8004742:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004744:	4b27      	ldr	r3, [pc, #156]	; (80047e4 <HAL_TIM_Base_MspInit+0xb8>)
 8004746:	2101      	movs	r1, #1
 8004748:	430a      	orrs	r2, r1
 800474a:	639a      	str	r2, [r3, #56]	; 0x38
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800474c:	2200      	movs	r2, #0
 800474e:	2100      	movs	r1, #0
 8004750:	200f      	movs	r0, #15
 8004752:	f003 f907 	bl	8007964 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004756:	200f      	movs	r0, #15
 8004758:	f003 f919 	bl	800798e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM22_MspInit 1 */

  /* USER CODE END TIM22_MspInit 1 */
  }

}
 800475c:	e03e      	b.n	80047dc <HAL_TIM_Base_MspInit+0xb0>
  else if(htim_base->Instance==TIM3)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a21      	ldr	r2, [pc, #132]	; (80047e8 <HAL_TIM_Base_MspInit+0xbc>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d106      	bne.n	8004776 <HAL_TIM_Base_MspInit+0x4a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004768:	4b1e      	ldr	r3, [pc, #120]	; (80047e4 <HAL_TIM_Base_MspInit+0xb8>)
 800476a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800476c:	4b1d      	ldr	r3, [pc, #116]	; (80047e4 <HAL_TIM_Base_MspInit+0xb8>)
 800476e:	2102      	movs	r1, #2
 8004770:	430a      	orrs	r2, r1
 8004772:	639a      	str	r2, [r3, #56]	; 0x38
}
 8004774:	e032      	b.n	80047dc <HAL_TIM_Base_MspInit+0xb0>
  else if(htim_base->Instance==TIM6)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a1c      	ldr	r2, [pc, #112]	; (80047ec <HAL_TIM_Base_MspInit+0xc0>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d106      	bne.n	800478e <HAL_TIM_Base_MspInit+0x62>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004780:	4b18      	ldr	r3, [pc, #96]	; (80047e4 <HAL_TIM_Base_MspInit+0xb8>)
 8004782:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004784:	4b17      	ldr	r3, [pc, #92]	; (80047e4 <HAL_TIM_Base_MspInit+0xb8>)
 8004786:	2110      	movs	r1, #16
 8004788:	430a      	orrs	r2, r1
 800478a:	639a      	str	r2, [r3, #56]	; 0x38
}
 800478c:	e026      	b.n	80047dc <HAL_TIM_Base_MspInit+0xb0>
  else if(htim_base->Instance==TIM21)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a17      	ldr	r2, [pc, #92]	; (80047f0 <HAL_TIM_Base_MspInit+0xc4>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d10e      	bne.n	80047b6 <HAL_TIM_Base_MspInit+0x8a>
    __HAL_RCC_TIM21_CLK_ENABLE();
 8004798:	4b12      	ldr	r3, [pc, #72]	; (80047e4 <HAL_TIM_Base_MspInit+0xb8>)
 800479a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800479c:	4b11      	ldr	r3, [pc, #68]	; (80047e4 <HAL_TIM_Base_MspInit+0xb8>)
 800479e:	2104      	movs	r1, #4
 80047a0:	430a      	orrs	r2, r1
 80047a2:	635a      	str	r2, [r3, #52]	; 0x34
    HAL_NVIC_SetPriority(TIM21_IRQn, 0, 0);
 80047a4:	2200      	movs	r2, #0
 80047a6:	2100      	movs	r1, #0
 80047a8:	2014      	movs	r0, #20
 80047aa:	f003 f8db 	bl	8007964 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM21_IRQn);
 80047ae:	2014      	movs	r0, #20
 80047b0:	f003 f8ed 	bl	800798e <HAL_NVIC_EnableIRQ>
}
 80047b4:	e012      	b.n	80047dc <HAL_TIM_Base_MspInit+0xb0>
  else if(htim_base->Instance==TIM22)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a0e      	ldr	r2, [pc, #56]	; (80047f4 <HAL_TIM_Base_MspInit+0xc8>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d10d      	bne.n	80047dc <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM22_CLK_ENABLE();
 80047c0:	4b08      	ldr	r3, [pc, #32]	; (80047e4 <HAL_TIM_Base_MspInit+0xb8>)
 80047c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047c4:	4b07      	ldr	r3, [pc, #28]	; (80047e4 <HAL_TIM_Base_MspInit+0xb8>)
 80047c6:	2120      	movs	r1, #32
 80047c8:	430a      	orrs	r2, r1
 80047ca:	635a      	str	r2, [r3, #52]	; 0x34
    HAL_NVIC_SetPriority(TIM22_IRQn, 0, 0);
 80047cc:	2200      	movs	r2, #0
 80047ce:	2100      	movs	r1, #0
 80047d0:	2016      	movs	r0, #22
 80047d2:	f003 f8c7 	bl	8007964 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM22_IRQn);
 80047d6:	2016      	movs	r0, #22
 80047d8:	f003 f8d9 	bl	800798e <HAL_NVIC_EnableIRQ>
}
 80047dc:	46c0      	nop			; (mov r8, r8)
 80047de:	46bd      	mov	sp, r7
 80047e0:	b002      	add	sp, #8
 80047e2:	bd80      	pop	{r7, pc}
 80047e4:	40021000 	.word	0x40021000
 80047e8:	40000400 	.word	0x40000400
 80047ec:	40001000 	.word	0x40001000
 80047f0:	40010800 	.word	0x40010800
 80047f4:	40011400 	.word	0x40011400

080047f8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b088      	sub	sp, #32
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004800:	230c      	movs	r3, #12
 8004802:	18fb      	adds	r3, r7, r3
 8004804:	0018      	movs	r0, r3
 8004806:	2314      	movs	r3, #20
 8004808:	001a      	movs	r2, r3
 800480a:	2100      	movs	r1, #0
 800480c:	f007 f8b7 	bl	800b97e <memset>
  if(htim->Instance==TIM3)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a14      	ldr	r2, [pc, #80]	; (8004868 <HAL_TIM_MspPostInit+0x70>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d121      	bne.n	800485e <HAL_TIM_MspPostInit+0x66>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800481a:	4b14      	ldr	r3, [pc, #80]	; (800486c <HAL_TIM_MspPostInit+0x74>)
 800481c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800481e:	4b13      	ldr	r3, [pc, #76]	; (800486c <HAL_TIM_MspPostInit+0x74>)
 8004820:	2104      	movs	r1, #4
 8004822:	430a      	orrs	r2, r1
 8004824:	62da      	str	r2, [r3, #44]	; 0x2c
 8004826:	4b11      	ldr	r3, [pc, #68]	; (800486c <HAL_TIM_MspPostInit+0x74>)
 8004828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800482a:	2204      	movs	r2, #4
 800482c:	4013      	ands	r3, r2
 800482e:	60bb      	str	r3, [r7, #8]
 8004830:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004832:	210c      	movs	r1, #12
 8004834:	187b      	adds	r3, r7, r1
 8004836:	2240      	movs	r2, #64	; 0x40
 8004838:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800483a:	187b      	adds	r3, r7, r1
 800483c:	2202      	movs	r2, #2
 800483e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004840:	187b      	adds	r3, r7, r1
 8004842:	2200      	movs	r2, #0
 8004844:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004846:	187b      	adds	r3, r7, r1
 8004848:	2200      	movs	r2, #0
 800484a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800484c:	187b      	adds	r3, r7, r1
 800484e:	2202      	movs	r2, #2
 8004850:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004852:	187b      	adds	r3, r7, r1
 8004854:	4a06      	ldr	r2, [pc, #24]	; (8004870 <HAL_TIM_MspPostInit+0x78>)
 8004856:	0019      	movs	r1, r3
 8004858:	0010      	movs	r0, r2
 800485a:	f003 fac7 	bl	8007dec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800485e:	46c0      	nop			; (mov r8, r8)
 8004860:	46bd      	mov	sp, r7
 8004862:	b008      	add	sp, #32
 8004864:	bd80      	pop	{r7, pc}
 8004866:	46c0      	nop			; (mov r8, r8)
 8004868:	40000400 	.word	0x40000400
 800486c:	40021000 	.word	0x40021000
 8004870:	50000800 	.word	0x50000800

08004874 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b082      	sub	sp, #8
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a06      	ldr	r2, [pc, #24]	; (800489c <HAL_PCD_MspInit+0x28>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d106      	bne.n	8004894 <HAL_PCD_MspInit+0x20>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8004886:	4b06      	ldr	r3, [pc, #24]	; (80048a0 <HAL_PCD_MspInit+0x2c>)
 8004888:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800488a:	4b05      	ldr	r3, [pc, #20]	; (80048a0 <HAL_PCD_MspInit+0x2c>)
 800488c:	2180      	movs	r1, #128	; 0x80
 800488e:	0409      	lsls	r1, r1, #16
 8004890:	430a      	orrs	r2, r1
 8004892:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8004894:	46c0      	nop			; (mov r8, r8)
 8004896:	46bd      	mov	sp, r7
 8004898:	b002      	add	sp, #8
 800489a:	bd80      	pop	{r7, pc}
 800489c:	40005c00 	.word	0x40005c00
 80048a0:	40021000 	.word	0x40021000

080048a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80048a8:	46c0      	nop			; (mov r8, r8)
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd80      	pop	{r7, pc}

080048ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80048ae:	b580      	push	{r7, lr}
 80048b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80048b2:	e7fe      	b.n	80048b2 <HardFault_Handler+0x4>

080048b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80048b8:	46c0      	nop			; (mov r8, r8)
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}

080048be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80048be:	b580      	push	{r7, lr}
 80048c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80048c2:	46c0      	nop			; (mov r8, r8)
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bd80      	pop	{r7, pc}

080048c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80048cc:	f002 f9fc 	bl	8006cc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80048d0:	46c0      	nop			; (mov r8, r8)
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}
	...

080048d8 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80048dc:	4b03      	ldr	r3, [pc, #12]	; (80048ec <RTC_IRQHandler+0x14>)
 80048de:	0018      	movs	r0, r3
 80048e0:	f005 f96a 	bl	8009bb8 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 80048e4:	46c0      	nop			; (mov r8, r8)
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bd80      	pop	{r7, pc}
 80048ea:	46c0      	nop			; (mov r8, r8)
 80048ec:	20000278 	.word	0x20000278

080048f0 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80048f4:	2002      	movs	r0, #2
 80048f6:	f003 fc2f 	bl	8008158 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 80048fa:	46c0      	nop			; (mov r8, r8)
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bd80      	pop	{r7, pc}

08004900 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8004904:	2004      	movs	r0, #4
 8004906:	f003 fc27 	bl	8008158 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 800490a:	46c0      	nop			; (mov r8, r8)
 800490c:	46bd      	mov	sp, r7
 800490e:	bd80      	pop	{r7, pc}

08004910 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8004914:	2380      	movs	r3, #128	; 0x80
 8004916:	00db      	lsls	r3, r3, #3
 8004918:	0018      	movs	r0, r3
 800491a:	f003 fc1d 	bl	8008158 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 800491e:	2380      	movs	r3, #128	; 0x80
 8004920:	011b      	lsls	r3, r3, #4
 8004922:	0018      	movs	r0, r3
 8004924:	f003 fc18 	bl	8008158 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8004928:	46c0      	nop			; (mov r8, r8)
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}
	...

08004930 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8004934:	4b03      	ldr	r3, [pc, #12]	; (8004944 <DMA1_Channel4_5_6_7_IRQHandler+0x14>)
 8004936:	0018      	movs	r0, r3
 8004938:	f003 f97c 	bl	8007c34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 800493c:	46c0      	nop			; (mov r8, r8)
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}
 8004942:	46c0      	nop			; (mov r8, r8)
 8004944:	200002d8 	.word	0x200002d8

08004948 <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC, COMP1 and COMP2 interrupts (COMP interrupts through EXTI lines 21 and 22).
  */
void ADC1_COMP_IRQHandler(void)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */

  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 800494c:	4b03      	ldr	r3, [pc, #12]	; (800495c <ADC1_COMP_IRQHandler+0x14>)
 800494e:	0018      	movs	r0, r3
 8004950:	f002 fcb0 	bl	80072b4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 8004954:	46c0      	nop			; (mov r8, r8)
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}
 800495a:	46c0      	nop			; (mov r8, r8)
 800495c:	20000614 	.word	0x20000614

08004960 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004964:	4b03      	ldr	r3, [pc, #12]	; (8004974 <TIM2_IRQHandler+0x14>)
 8004966:	0018      	movs	r0, r3
 8004968:	f006 fa42 	bl	800adf0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800496c:	46c0      	nop			; (mov r8, r8)
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}
 8004972:	46c0      	nop			; (mov r8, r8)
 8004974:	2000029c 	.word	0x2000029c

08004978 <TIM21_IRQHandler>:

/**
  * @brief This function handles TIM21 global interrupt.
  */
void TIM21_IRQHandler(void)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM21_IRQn 0 */

  /* USER CODE END TIM21_IRQn 0 */
  HAL_TIM_IRQHandler(&htim21);
 800497c:	4b03      	ldr	r3, [pc, #12]	; (800498c <TIM21_IRQHandler+0x14>)
 800497e:	0018      	movs	r0, r3
 8004980:	f006 fa36 	bl	800adf0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM21_IRQn 1 */

  /* USER CODE END TIM21_IRQn 1 */
}
 8004984:	46c0      	nop			; (mov r8, r8)
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}
 800498a:	46c0      	nop			; (mov r8, r8)
 800498c:	20000670 	.word	0x20000670

08004990 <TIM22_IRQHandler>:

/**
  * @brief This function handles TIM22 global interrupt.
  */
void TIM22_IRQHandler(void)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM22_IRQn 0 */

  /* USER CODE END TIM22_IRQn 0 */
  HAL_TIM_IRQHandler(&htim22);
 8004994:	4b03      	ldr	r3, [pc, #12]	; (80049a4 <TIM22_IRQHandler+0x14>)
 8004996:	0018      	movs	r0, r3
 8004998:	f006 fa2a 	bl	800adf0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM22_IRQn 1 */

  /* USER CODE END TIM22_IRQn 1 */
}
 800499c:	46c0      	nop			; (mov r8, r8)
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}
 80049a2:	46c0      	nop			; (mov r8, r8)
 80049a4:	2000023c 	.word	0x2000023c

080049a8 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80049ac:	4b03      	ldr	r3, [pc, #12]	; (80049bc <SPI2_IRQHandler+0x14>)
 80049ae:	0018      	movs	r0, r3
 80049b0:	f005 fd4c 	bl	800a44c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80049b4:	46c0      	nop			; (mov r8, r8)
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}
 80049ba:	46c0      	nop			; (mov r8, r8)
 80049bc:	200001a8 	.word	0x200001a8

080049c0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b084      	sub	sp, #16
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80049c8:	4b11      	ldr	r3, [pc, #68]	; (8004a10 <_sbrk+0x50>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d102      	bne.n	80049d6 <_sbrk+0x16>
		heap_end = &end;
 80049d0:	4b0f      	ldr	r3, [pc, #60]	; (8004a10 <_sbrk+0x50>)
 80049d2:	4a10      	ldr	r2, [pc, #64]	; (8004a14 <_sbrk+0x54>)
 80049d4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80049d6:	4b0e      	ldr	r3, [pc, #56]	; (8004a10 <_sbrk+0x50>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80049dc:	4b0c      	ldr	r3, [pc, #48]	; (8004a10 <_sbrk+0x50>)
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	18d3      	adds	r3, r2, r3
 80049e4:	466a      	mov	r2, sp
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d907      	bls.n	80049fa <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80049ea:	f006 ff95 	bl	800b918 <__errno>
 80049ee:	0003      	movs	r3, r0
 80049f0:	220c      	movs	r2, #12
 80049f2:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80049f4:	2301      	movs	r3, #1
 80049f6:	425b      	negs	r3, r3
 80049f8:	e006      	b.n	8004a08 <_sbrk+0x48>
	}

	heap_end += incr;
 80049fa:	4b05      	ldr	r3, [pc, #20]	; (8004a10 <_sbrk+0x50>)
 80049fc:	681a      	ldr	r2, [r3, #0]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	18d2      	adds	r2, r2, r3
 8004a02:	4b03      	ldr	r3, [pc, #12]	; (8004a10 <_sbrk+0x50>)
 8004a04:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 8004a06:	68fb      	ldr	r3, [r7, #12]
}
 8004a08:	0018      	movs	r0, r3
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	b004      	add	sp, #16
 8004a0e:	bd80      	pop	{r7, pc}
 8004a10:	20000104 	.word	0x20000104
 8004a14:	200006b8 	.word	0x200006b8

08004a18 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8004a1c:	4b17      	ldr	r3, [pc, #92]	; (8004a7c <SystemInit+0x64>)
 8004a1e:	681a      	ldr	r2, [r3, #0]
 8004a20:	4b16      	ldr	r3, [pc, #88]	; (8004a7c <SystemInit+0x64>)
 8004a22:	2180      	movs	r1, #128	; 0x80
 8004a24:	0049      	lsls	r1, r1, #1
 8004a26:	430a      	orrs	r2, r1
 8004a28:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8004a2a:	4b14      	ldr	r3, [pc, #80]	; (8004a7c <SystemInit+0x64>)
 8004a2c:	68da      	ldr	r2, [r3, #12]
 8004a2e:	4b13      	ldr	r3, [pc, #76]	; (8004a7c <SystemInit+0x64>)
 8004a30:	4913      	ldr	r1, [pc, #76]	; (8004a80 <SystemInit+0x68>)
 8004a32:	400a      	ands	r2, r1
 8004a34:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8004a36:	4b11      	ldr	r3, [pc, #68]	; (8004a7c <SystemInit+0x64>)
 8004a38:	681a      	ldr	r2, [r3, #0]
 8004a3a:	4b10      	ldr	r3, [pc, #64]	; (8004a7c <SystemInit+0x64>)
 8004a3c:	4911      	ldr	r1, [pc, #68]	; (8004a84 <SystemInit+0x6c>)
 8004a3e:	400a      	ands	r2, r1
 8004a40:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8004a42:	4b0e      	ldr	r3, [pc, #56]	; (8004a7c <SystemInit+0x64>)
 8004a44:	689a      	ldr	r2, [r3, #8]
 8004a46:	4b0d      	ldr	r3, [pc, #52]	; (8004a7c <SystemInit+0x64>)
 8004a48:	2101      	movs	r1, #1
 8004a4a:	438a      	bics	r2, r1
 8004a4c:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8004a4e:	4b0b      	ldr	r3, [pc, #44]	; (8004a7c <SystemInit+0x64>)
 8004a50:	681a      	ldr	r2, [r3, #0]
 8004a52:	4b0a      	ldr	r3, [pc, #40]	; (8004a7c <SystemInit+0x64>)
 8004a54:	490c      	ldr	r1, [pc, #48]	; (8004a88 <SystemInit+0x70>)
 8004a56:	400a      	ands	r2, r1
 8004a58:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8004a5a:	4b08      	ldr	r3, [pc, #32]	; (8004a7c <SystemInit+0x64>)
 8004a5c:	68da      	ldr	r2, [r3, #12]
 8004a5e:	4b07      	ldr	r3, [pc, #28]	; (8004a7c <SystemInit+0x64>)
 8004a60:	490a      	ldr	r1, [pc, #40]	; (8004a8c <SystemInit+0x74>)
 8004a62:	400a      	ands	r2, r1
 8004a64:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8004a66:	4b05      	ldr	r3, [pc, #20]	; (8004a7c <SystemInit+0x64>)
 8004a68:	2200      	movs	r2, #0
 8004a6a:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004a6c:	4b08      	ldr	r3, [pc, #32]	; (8004a90 <SystemInit+0x78>)
 8004a6e:	2280      	movs	r2, #128	; 0x80
 8004a70:	0512      	lsls	r2, r2, #20
 8004a72:	609a      	str	r2, [r3, #8]
#endif
}
 8004a74:	46c0      	nop			; (mov r8, r8)
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}
 8004a7a:	46c0      	nop			; (mov r8, r8)
 8004a7c:	40021000 	.word	0x40021000
 8004a80:	88ff400c 	.word	0x88ff400c
 8004a84:	fef6fff6 	.word	0xfef6fff6
 8004a88:	fffbffff 	.word	0xfffbffff
 8004a8c:	ff02ffff 	.word	0xff02ffff
 8004a90:	e000ed00 	.word	0xe000ed00

08004a94 <HAL_TIM_PeriodElapsedCallback>:
static uint32_t stopwatchStartMarker = 0;
static uint32_t stopwatchPauseMarker = 0;
static uint8_t motorStateCounter = 0;

// called for a bunch of timers when timer has to circle back (arr->0, 0->arr)
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b082      	sub	sp, #8
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
	// button's timer
	if (htim->Instance == TIM6) {
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a16      	ldr	r2, [pc, #88]	; (8004afc <HAL_TIM_PeriodElapsedCallback+0x68>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d11e      	bne.n	8004ae4 <HAL_TIM_PeriodElapsedCallback+0x50>
		// stop timer, renable button interrupts, and clear pending
		HAL_TIM_Base_Stop_IT(htim);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	0018      	movs	r0, r3
 8004aaa:	f006 f82b 	bl	800ab04 <HAL_TIM_Base_Stop_IT>
		HAL_NVIC_ClearPendingIRQ(EXTI2_3_IRQn);
 8004aae:	2006      	movs	r0, #6
 8004ab0:	f002 ff8a 	bl	80079c8 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_ClearPendingIRQ(EXTI4_15_IRQn);
 8004ab4:	2007      	movs	r0, #7
 8004ab6:	f002 ff87 	bl	80079c8 <HAL_NVIC_ClearPendingIRQ>
		__HAL_GPIO_EXTI_CLEAR_IT(BUTTON1);
 8004aba:	4b11      	ldr	r3, [pc, #68]	; (8004b00 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8004abc:	2202      	movs	r2, #2
 8004abe:	615a      	str	r2, [r3, #20]
		__HAL_GPIO_EXTI_CLEAR_IT(BUTTON2);
 8004ac0:	4b0f      	ldr	r3, [pc, #60]	; (8004b00 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8004ac2:	2204      	movs	r2, #4
 8004ac4:	615a      	str	r2, [r3, #20]
		__HAL_GPIO_EXTI_CLEAR_IT(BUTTON3);
 8004ac6:	4b0e      	ldr	r3, [pc, #56]	; (8004b00 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8004ac8:	2280      	movs	r2, #128	; 0x80
 8004aca:	00d2      	lsls	r2, r2, #3
 8004acc:	615a      	str	r2, [r3, #20]
		__HAL_GPIO_EXTI_CLEAR_IT(BUTTON4);
 8004ace:	4b0c      	ldr	r3, [pc, #48]	; (8004b00 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8004ad0:	2280      	movs	r2, #128	; 0x80
 8004ad2:	0112      	lsls	r2, r2, #4
 8004ad4:	615a      	str	r2, [r3, #20]

		HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8004ad6:	2006      	movs	r0, #6
 8004ad8:	f002 ff59 	bl	800798e <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8004adc:	2007      	movs	r0, #7
 8004ade:	f002 ff56 	bl	800798e <HAL_NVIC_EnableIRQ>
	// sampler's timer
	else if (htim->Instance == TIM22) {
		// set flag to start ADC sample
		canSampleBattery = 1;
	}
}
 8004ae2:	e007      	b.n	8004af4 <HAL_TIM_PeriodElapsedCallback+0x60>
	else if (htim->Instance == TIM22) {
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a06      	ldr	r2, [pc, #24]	; (8004b04 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d102      	bne.n	8004af4 <HAL_TIM_PeriodElapsedCallback+0x60>
		canSampleBattery = 1;
 8004aee:	4b06      	ldr	r3, [pc, #24]	; (8004b08 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8004af0:	2201      	movs	r2, #1
 8004af2:	701a      	strb	r2, [r3, #0]
}
 8004af4:	46c0      	nop			; (mov r8, r8)
 8004af6:	46bd      	mov	sp, r7
 8004af8:	b002      	add	sp, #8
 8004afa:	bd80      	pop	{r7, pc}
 8004afc:	40001000 	.word	0x40001000
 8004b00:	40010400 	.word	0x40010400
 8004b04:	40011400 	.word	0x40011400
 8004b08:	2000014e 	.word	0x2000014e

08004b0c <HAL_TIM_OC_DelayElapsedCallback>:

// called for a bunch of timers when channel value = counter value
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b082      	sub	sp, #8
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM21) {
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a46      	ldr	r2, [pc, #280]	; (8004c34 <HAL_TIM_OC_DelayElapsedCallback+0x128>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d139      	bne.n	8004b92 <HAL_TIM_OC_DelayElapsedCallback+0x86>
		// timer's channel
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	7e1b      	ldrb	r3, [r3, #24]
 8004b22:	2b01      	cmp	r3, #1
 8004b24:	d122      	bne.n	8004b6c <HAL_TIM_OC_DelayElapsedCallback+0x60>
			updateFace.timer = 1;		// set update screen flag
 8004b26:	4b44      	ldr	r3, [pc, #272]	; (8004c38 <HAL_TIM_OC_DelayElapsedCallback+0x12c>)
 8004b28:	2201      	movs	r2, #1
 8004b2a:	705a      	strb	r2, [r3, #1]

			// decrement value if non-zero, else set done flag
			if (timerCounter != 1) --timerCounter;
 8004b2c:	4b43      	ldr	r3, [pc, #268]	; (8004c3c <HAL_TIM_OC_DelayElapsedCallback+0x130>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	2b01      	cmp	r3, #1
 8004b32:	d005      	beq.n	8004b40 <HAL_TIM_OC_DelayElapsedCallback+0x34>
 8004b34:	4b41      	ldr	r3, [pc, #260]	; (8004c3c <HAL_TIM_OC_DelayElapsedCallback+0x130>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	1e5a      	subs	r2, r3, #1
 8004b3a:	4b40      	ldr	r3, [pc, #256]	; (8004c3c <HAL_TIM_OC_DelayElapsedCallback+0x130>)
 8004b3c:	601a      	str	r2, [r3, #0]
				stopMotor(htim);
				break;
			default: break;
		}
	}
}
 8004b3e:	e074      	b.n	8004c2a <HAL_TIM_OC_DelayElapsedCallback+0x11e>
				--timerCounter;
 8004b40:	4b3e      	ldr	r3, [pc, #248]	; (8004c3c <HAL_TIM_OC_DelayElapsedCallback+0x130>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	1e5a      	subs	r2, r3, #1
 8004b46:	4b3d      	ldr	r3, [pc, #244]	; (8004c3c <HAL_TIM_OC_DelayElapsedCallback+0x130>)
 8004b48:	601a      	str	r2, [r3, #0]
				isTimerDone = 1;
 8004b4a:	4b3d      	ldr	r3, [pc, #244]	; (8004c40 <HAL_TIM_OC_DelayElapsedCallback+0x134>)
 8004b4c:	2201      	movs	r2, #1
 8004b4e:	701a      	strb	r2, [r3, #0]
				stopTimer(htim);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	0018      	movs	r0, r3
 8004b54:	f000 f8f0 	bl	8004d38 <stopTimer>
				updateFace.timer = 1;
 8004b58:	4b37      	ldr	r3, [pc, #220]	; (8004c38 <HAL_TIM_OC_DelayElapsedCallback+0x12c>)
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	705a      	strb	r2, [r3, #1]
				HAL_GPIO_TogglePin(LED2_PORT, LED2_PIN);
 8004b5e:	23a0      	movs	r3, #160	; 0xa0
 8004b60:	05db      	lsls	r3, r3, #23
 8004b62:	2140      	movs	r1, #64	; 0x40
 8004b64:	0018      	movs	r0, r3
 8004b66:	f003 fadc 	bl	8008122 <HAL_GPIO_TogglePin>
}
 8004b6a:	e05e      	b.n	8004c2a <HAL_TIM_OC_DelayElapsedCallback+0x11e>
		else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) {
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	7e1b      	ldrb	r3, [r3, #24]
 8004b70:	2b02      	cmp	r3, #2
 8004b72:	d15a      	bne.n	8004c2a <HAL_TIM_OC_DelayElapsedCallback+0x11e>
			updateFace.stopwatch = 1;
 8004b74:	4b30      	ldr	r3, [pc, #192]	; (8004c38 <HAL_TIM_OC_DelayElapsedCallback+0x12c>)
 8004b76:	2201      	movs	r2, #1
 8004b78:	70da      	strb	r2, [r3, #3]
			++stopwatchCounter;
 8004b7a:	4b32      	ldr	r3, [pc, #200]	; (8004c44 <HAL_TIM_OC_DelayElapsedCallback+0x138>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	1c5a      	adds	r2, r3, #1
 8004b80:	4b30      	ldr	r3, [pc, #192]	; (8004c44 <HAL_TIM_OC_DelayElapsedCallback+0x138>)
 8004b82:	601a      	str	r2, [r3, #0]
			HAL_GPIO_TogglePin(LED2_PORT, LED2_PIN);
 8004b84:	23a0      	movs	r3, #160	; 0xa0
 8004b86:	05db      	lsls	r3, r3, #23
 8004b88:	2140      	movs	r1, #64	; 0x40
 8004b8a:	0018      	movs	r0, r3
 8004b8c:	f003 fac9 	bl	8008122 <HAL_GPIO_TogglePin>
}
 8004b90:	e04b      	b.n	8004c2a <HAL_TIM_OC_DelayElapsedCallback+0x11e>
	else if (htim->Instance == TIM2) {
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681a      	ldr	r2, [r3, #0]
 8004b96:	2380      	movs	r3, #128	; 0x80
 8004b98:	05db      	lsls	r3, r3, #23
 8004b9a:	429a      	cmp	r2, r3
 8004b9c:	d142      	bne.n	8004c24 <HAL_TIM_OC_DelayElapsedCallback+0x118>
		++motorStateCounter;
 8004b9e:	4b2a      	ldr	r3, [pc, #168]	; (8004c48 <HAL_TIM_OC_DelayElapsedCallback+0x13c>)
 8004ba0:	781b      	ldrb	r3, [r3, #0]
 8004ba2:	3301      	adds	r3, #1
 8004ba4:	b2da      	uxtb	r2, r3
 8004ba6:	4b28      	ldr	r3, [pc, #160]	; (8004c48 <HAL_TIM_OC_DelayElapsedCallback+0x13c>)
 8004ba8:	701a      	strb	r2, [r3, #0]
		switch(motorStateCounter) {
 8004baa:	4b27      	ldr	r3, [pc, #156]	; (8004c48 <HAL_TIM_OC_DelayElapsedCallback+0x13c>)
 8004bac:	781b      	ldrb	r3, [r3, #0]
 8004bae:	2b06      	cmp	r3, #6
 8004bb0:	d83a      	bhi.n	8004c28 <HAL_TIM_OC_DelayElapsedCallback+0x11c>
 8004bb2:	009a      	lsls	r2, r3, #2
 8004bb4:	4b25      	ldr	r3, [pc, #148]	; (8004c4c <HAL_TIM_OC_DelayElapsedCallback+0x140>)
 8004bb6:	18d3      	adds	r3, r2, r3
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	469f      	mov	pc, r3
			case 1: HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_PIN, GPIO_PIN_SET); break;
 8004bbc:	23a0      	movs	r3, #160	; 0xa0
 8004bbe:	05db      	lsls	r3, r3, #23
 8004bc0:	2201      	movs	r2, #1
 8004bc2:	2110      	movs	r1, #16
 8004bc4:	0018      	movs	r0, r3
 8004bc6:	f003 fa8f 	bl	80080e8 <HAL_GPIO_WritePin>
 8004bca:	e02e      	b.n	8004c2a <HAL_TIM_OC_DelayElapsedCallback+0x11e>
			case 2: HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_PIN, GPIO_PIN_RESET); break;
 8004bcc:	23a0      	movs	r3, #160	; 0xa0
 8004bce:	05db      	lsls	r3, r3, #23
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	2110      	movs	r1, #16
 8004bd4:	0018      	movs	r0, r3
 8004bd6:	f003 fa87 	bl	80080e8 <HAL_GPIO_WritePin>
 8004bda:	e026      	b.n	8004c2a <HAL_TIM_OC_DelayElapsedCallback+0x11e>
			case 3: HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_PIN, GPIO_PIN_SET); break;
 8004bdc:	23a0      	movs	r3, #160	; 0xa0
 8004bde:	05db      	lsls	r3, r3, #23
 8004be0:	2201      	movs	r2, #1
 8004be2:	2110      	movs	r1, #16
 8004be4:	0018      	movs	r0, r3
 8004be6:	f003 fa7f 	bl	80080e8 <HAL_GPIO_WritePin>
 8004bea:	e01e      	b.n	8004c2a <HAL_TIM_OC_DelayElapsedCallback+0x11e>
			case 4: HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_PIN, GPIO_PIN_RESET); break;
 8004bec:	23a0      	movs	r3, #160	; 0xa0
 8004bee:	05db      	lsls	r3, r3, #23
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	2110      	movs	r1, #16
 8004bf4:	0018      	movs	r0, r3
 8004bf6:	f003 fa77 	bl	80080e8 <HAL_GPIO_WritePin>
 8004bfa:	e016      	b.n	8004c2a <HAL_TIM_OC_DelayElapsedCallback+0x11e>
			case 5: HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_PIN, GPIO_PIN_SET); break;
 8004bfc:	23a0      	movs	r3, #160	; 0xa0
 8004bfe:	05db      	lsls	r3, r3, #23
 8004c00:	2201      	movs	r2, #1
 8004c02:	2110      	movs	r1, #16
 8004c04:	0018      	movs	r0, r3
 8004c06:	f003 fa6f 	bl	80080e8 <HAL_GPIO_WritePin>
 8004c0a:	e00e      	b.n	8004c2a <HAL_TIM_OC_DelayElapsedCallback+0x11e>
				HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_PIN, GPIO_PIN_RESET);
 8004c0c:	23a0      	movs	r3, #160	; 0xa0
 8004c0e:	05db      	lsls	r3, r3, #23
 8004c10:	2200      	movs	r2, #0
 8004c12:	2110      	movs	r1, #16
 8004c14:	0018      	movs	r0, r3
 8004c16:	f003 fa67 	bl	80080e8 <HAL_GPIO_WritePin>
				stopMotor(htim);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	0018      	movs	r0, r3
 8004c1e:	f000 f989 	bl	8004f34 <stopMotor>
				break;
 8004c22:	e002      	b.n	8004c2a <HAL_TIM_OC_DelayElapsedCallback+0x11e>
	}
 8004c24:	46c0      	nop			; (mov r8, r8)
 8004c26:	e000      	b.n	8004c2a <HAL_TIM_OC_DelayElapsedCallback+0x11e>
			default: break;
 8004c28:	46c0      	nop			; (mov r8, r8)
}
 8004c2a:	46c0      	nop			; (mov r8, r8)
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	b002      	add	sp, #8
 8004c30:	bd80      	pop	{r7, pc}
 8004c32:	46c0      	nop			; (mov r8, r8)
 8004c34:	40010800 	.word	0x40010800
 8004c38:	20000150 	.word	0x20000150
 8004c3c:	20000158 	.word	0x20000158
 8004c40:	2000015c 	.word	0x2000015c
 8004c44:	200001a4 	.word	0x200001a4
 8004c48:	20000118 	.word	0x20000118
 8004c4c:	0800cd68 	.word	0x0800cd68

08004c50 <runTimer>:

// ---- important timer functions  ----
void runTimer(TIM_HandleTypeDef *htim) {
 8004c50:	b590      	push	{r4, r7, lr}
 8004c52:	b089      	sub	sp, #36	; 0x24
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
	TIM_OC_InitTypeDef sConfig = {0};
 8004c58:	2408      	movs	r4, #8
 8004c5a:	193b      	adds	r3, r7, r4
 8004c5c:	0018      	movs	r0, r3
 8004c5e:	2310      	movs	r3, #16
 8004c60:	001a      	movs	r2, r3
 8004c62:	2100      	movs	r1, #0
 8004c64:	f006 fe8b 	bl	800b97e <memset>
	sConfig.OCMode = TIM_OCMODE_TIMING;
 8004c68:	193b      	adds	r3, r7, r4
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	601a      	str	r2, [r3, #0]
	sConfig.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004c6e:	193b      	adds	r3, r7, r4
 8004c70:	2200      	movs	r2, #0
 8004c72:	609a      	str	r2, [r3, #8]
	sConfig.OCFastMode = TIM_OCFAST_DISABLE;
 8004c74:	193b      	adds	r3, r7, r4
 8004c76:	2200      	movs	r2, #0
 8004c78:	60da      	str	r2, [r3, #12]

	// calculating pulse/OC trigger
	if (isTimerPaused == 0) {		// 1st run, hasn't been paused yet
 8004c7a:	4b1f      	ldr	r3, [pc, #124]	; (8004cf8 <runTimer+0xa8>)
 8004c7c:	781b      	ldrb	r3, [r3, #0]
 8004c7e:	b2db      	uxtb	r3, r3
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d107      	bne.n	8004c94 <runTimer+0x44>
		sConfig.Pulse = htim->Instance->CNT-1;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c8a:	1e5a      	subs	r2, r3, #1
 8004c8c:	2308      	movs	r3, #8
 8004c8e:	18fb      	adds	r3, r7, r3
 8004c90:	605a      	str	r2, [r3, #4]
 8004c92:	e021      	b.n	8004cd8 <runTimer+0x88>
	}
	else {		// unpausing
		uint32_t temp = htim->Instance->CNT-1;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c9a:	3b01      	subs	r3, #1
 8004c9c:	61fb      	str	r3, [r7, #28]

		// count needed to get from pause marker to start marker - basically how many steps it would've taken to get to next cycle
		// shifted to account for negative behavior
		uint32_t diff = ((int)(timerStartMarker-timerPauseMarker)+0x8000) % 0x8000;
 8004c9e:	4b17      	ldr	r3, [pc, #92]	; (8004cfc <runTimer+0xac>)
 8004ca0:	681a      	ldr	r2, [r3, #0]
 8004ca2:	4b17      	ldr	r3, [pc, #92]	; (8004d00 <runTimer+0xb0>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	1ad3      	subs	r3, r2, r3
 8004ca8:	2280      	movs	r2, #128	; 0x80
 8004caa:	0212      	lsls	r2, r2, #8
 8004cac:	4694      	mov	ip, r2
 8004cae:	4463      	add	r3, ip
 8004cb0:	4a14      	ldr	r2, [pc, #80]	; (8004d04 <runTimer+0xb4>)
 8004cb2:	4013      	ands	r3, r2
 8004cb4:	d503      	bpl.n	8004cbe <runTimer+0x6e>
 8004cb6:	3b01      	subs	r3, #1
 8004cb8:	4a13      	ldr	r2, [pc, #76]	; (8004d08 <runTimer+0xb8>)
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	3301      	adds	r3, #1
 8004cbe:	61bb      	str	r3, [r7, #24]
		sConfig.Pulse = (temp+diff) % 0x8000;
 8004cc0:	69fa      	ldr	r2, [r7, #28]
 8004cc2:	69bb      	ldr	r3, [r7, #24]
 8004cc4:	18d3      	adds	r3, r2, r3
 8004cc6:	045b      	lsls	r3, r3, #17
 8004cc8:	0c5a      	lsrs	r2, r3, #17
 8004cca:	2108      	movs	r1, #8
 8004ccc:	187b      	adds	r3, r7, r1
 8004cce:	605a      	str	r2, [r3, #4]
		timerStartMarker = sConfig.Pulse;		// set new start marker
 8004cd0:	187b      	adds	r3, r7, r1
 8004cd2:	685a      	ldr	r2, [r3, #4]
 8004cd4:	4b09      	ldr	r3, [pc, #36]	; (8004cfc <runTimer+0xac>)
 8004cd6:	601a      	str	r2, [r3, #0]
	}

	HAL_TIM_OC_ConfigChannel(htim, &sConfig, TIM_CHANNEL_1);
 8004cd8:	2308      	movs	r3, #8
 8004cda:	18f9      	adds	r1, r7, r3
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	0018      	movs	r0, r3
 8004ce2:	f006 f96d 	bl	800afc0 <HAL_TIM_OC_ConfigChannel>
	HAL_TIM_OC_Start_IT(htim, TIM_CHANNEL_1);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2100      	movs	r1, #0
 8004cea:	0018      	movs	r0, r3
 8004cec:	f005 ff60 	bl	800abb0 <HAL_TIM_OC_Start_IT>
}
 8004cf0:	46c0      	nop			; (mov r8, r8)
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	b009      	add	sp, #36	; 0x24
 8004cf6:	bd90      	pop	{r4, r7, pc}
 8004cf8:	200001a2 	.word	0x200001a2
 8004cfc:	20000108 	.word	0x20000108
 8004d00:	2000010c 	.word	0x2000010c
 8004d04:	80007fff 	.word	0x80007fff
 8004d08:	ffff8000 	.word	0xffff8000

08004d0c <pauseTimer>:

void pauseTimer(TIM_HandleTypeDef *htim) {
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b082      	sub	sp, #8
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
	// stop timer, but hold marker so you can track milliseconds to next second
	HAL_TIM_OC_Stop_IT(htim, TIM_CHANNEL_1);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2100      	movs	r1, #0
 8004d18:	0018      	movs	r0, r3
 8004d1a:	f005 ff9b 	bl	800ac54 <HAL_TIM_OC_Stop_IT>
	timerPauseMarker = htim->Instance->CNT-1;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d24:	1e5a      	subs	r2, r3, #1
 8004d26:	4b03      	ldr	r3, [pc, #12]	; (8004d34 <pauseTimer+0x28>)
 8004d28:	601a      	str	r2, [r3, #0]
}
 8004d2a:	46c0      	nop			; (mov r8, r8)
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	b002      	add	sp, #8
 8004d30:	bd80      	pop	{r7, pc}
 8004d32:	46c0      	nop			; (mov r8, r8)
 8004d34:	2000010c 	.word	0x2000010c

08004d38 <stopTimer>:

void stopTimer(TIM_HandleTypeDef *htim) {
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b082      	sub	sp, #8
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
	// clear everything
	HAL_TIM_OC_Stop_IT(htim, TIM_CHANNEL_1);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2100      	movs	r1, #0
 8004d44:	0018      	movs	r0, r3
 8004d46:	f005 ff85 	bl	800ac54 <HAL_TIM_OC_Stop_IT>
	timerStartMarker = 0;
 8004d4a:	4b05      	ldr	r3, [pc, #20]	; (8004d60 <stopTimer+0x28>)
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	601a      	str	r2, [r3, #0]
	timerPauseMarker = 0;
 8004d50:	4b04      	ldr	r3, [pc, #16]	; (8004d64 <stopTimer+0x2c>)
 8004d52:	2200      	movs	r2, #0
 8004d54:	601a      	str	r2, [r3, #0]
}
 8004d56:	46c0      	nop			; (mov r8, r8)
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	b002      	add	sp, #8
 8004d5c:	bd80      	pop	{r7, pc}
 8004d5e:	46c0      	nop			; (mov r8, r8)
 8004d60:	20000108 	.word	0x20000108
 8004d64:	2000010c 	.word	0x2000010c

08004d68 <runStopwatch>:

void runStopwatch(TIM_HandleTypeDef *htim) {
 8004d68:	b590      	push	{r4, r7, lr}
 8004d6a:	b089      	sub	sp, #36	; 0x24
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
	TIM_OC_InitTypeDef sConfig = {0};
 8004d70:	2408      	movs	r4, #8
 8004d72:	193b      	adds	r3, r7, r4
 8004d74:	0018      	movs	r0, r3
 8004d76:	2310      	movs	r3, #16
 8004d78:	001a      	movs	r2, r3
 8004d7a:	2100      	movs	r1, #0
 8004d7c:	f006 fdff 	bl	800b97e <memset>
	sConfig.OCMode = TIM_OCMODE_TIMING;
 8004d80:	193b      	adds	r3, r7, r4
 8004d82:	2200      	movs	r2, #0
 8004d84:	601a      	str	r2, [r3, #0]
	sConfig.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004d86:	193b      	adds	r3, r7, r4
 8004d88:	2200      	movs	r2, #0
 8004d8a:	609a      	str	r2, [r3, #8]
	sConfig.OCFastMode = TIM_OCFAST_DISABLE;
 8004d8c:	193b      	adds	r3, r7, r4
 8004d8e:	2200      	movs	r2, #0
 8004d90:	60da      	str	r2, [r3, #12]

	// calculating pulse/OC trigger
	if (isStopwatchPaused == 0) {		// 1st run, hasn't been paused yet
 8004d92:	4b23      	ldr	r3, [pc, #140]	; (8004e20 <runStopwatch+0xb8>)
 8004d94:	781b      	ldrb	r3, [r3, #0]
 8004d96:	b2db      	uxtb	r3, r3
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d10e      	bne.n	8004dba <runStopwatch+0x52>
		stopwatchCounter = 0;
 8004d9c:	4b21      	ldr	r3, [pc, #132]	; (8004e24 <runStopwatch+0xbc>)
 8004d9e:	2200      	movs	r2, #0
 8004da0:	601a      	str	r2, [r3, #0]
		sConfig.Pulse = htim->Instance->CNT-1;		// 32-bit unsigned going into 16-bit unsigned. no need to cast since
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da8:	1e5a      	subs	r2, r3, #1
 8004daa:	2108      	movs	r1, #8
 8004dac:	187b      	adds	r3, r7, r1
 8004dae:	605a      	str	r2, [r3, #4]
													// lower level code will do it for me (cut off upper half)
		stopwatchStartMarker = sConfig.Pulse;		// set new start marker
 8004db0:	187b      	adds	r3, r7, r1
 8004db2:	685a      	ldr	r2, [r3, #4]
 8004db4:	4b1c      	ldr	r3, [pc, #112]	; (8004e28 <runStopwatch+0xc0>)
 8004db6:	601a      	str	r2, [r3, #0]
 8004db8:	e021      	b.n	8004dfe <runStopwatch+0x96>
	}
	else {		// unpausing
		uint32_t temp = htim->Instance->CNT-1;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc0:	3b01      	subs	r3, #1
 8004dc2:	61fb      	str	r3, [r7, #28]

		// count needed to get from pause marker to start marker - basically how many steps it would've taken to get to next cycle
		// shifted to account for negative behavior
		uint32_t diff = ((int)(stopwatchStartMarker-stopwatchPauseMarker)+0x8000) % 0x8000;
 8004dc4:	4b18      	ldr	r3, [pc, #96]	; (8004e28 <runStopwatch+0xc0>)
 8004dc6:	681a      	ldr	r2, [r3, #0]
 8004dc8:	4b18      	ldr	r3, [pc, #96]	; (8004e2c <runStopwatch+0xc4>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	1ad3      	subs	r3, r2, r3
 8004dce:	2280      	movs	r2, #128	; 0x80
 8004dd0:	0212      	lsls	r2, r2, #8
 8004dd2:	4694      	mov	ip, r2
 8004dd4:	4463      	add	r3, ip
 8004dd6:	4a16      	ldr	r2, [pc, #88]	; (8004e30 <runStopwatch+0xc8>)
 8004dd8:	4013      	ands	r3, r2
 8004dda:	d503      	bpl.n	8004de4 <runStopwatch+0x7c>
 8004ddc:	3b01      	subs	r3, #1
 8004dde:	4a15      	ldr	r2, [pc, #84]	; (8004e34 <runStopwatch+0xcc>)
 8004de0:	4313      	orrs	r3, r2
 8004de2:	3301      	adds	r3, #1
 8004de4:	61bb      	str	r3, [r7, #24]
		sConfig.Pulse = (temp+diff) % 0x8000;
 8004de6:	69fa      	ldr	r2, [r7, #28]
 8004de8:	69bb      	ldr	r3, [r7, #24]
 8004dea:	18d3      	adds	r3, r2, r3
 8004dec:	045b      	lsls	r3, r3, #17
 8004dee:	0c5a      	lsrs	r2, r3, #17
 8004df0:	2108      	movs	r1, #8
 8004df2:	187b      	adds	r3, r7, r1
 8004df4:	605a      	str	r2, [r3, #4]
		stopwatchStartMarker = sConfig.Pulse;		// set new start marker
 8004df6:	187b      	adds	r3, r7, r1
 8004df8:	685a      	ldr	r2, [r3, #4]
 8004dfa:	4b0b      	ldr	r3, [pc, #44]	; (8004e28 <runStopwatch+0xc0>)
 8004dfc:	601a      	str	r2, [r3, #0]
	}

	HAL_TIM_OC_ConfigChannel(htim, &sConfig, TIM_CHANNEL_2);
 8004dfe:	2308      	movs	r3, #8
 8004e00:	18f9      	adds	r1, r7, r3
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2204      	movs	r2, #4
 8004e06:	0018      	movs	r0, r3
 8004e08:	f006 f8da 	bl	800afc0 <HAL_TIM_OC_ConfigChannel>
	HAL_TIM_OC_Start_IT(htim, TIM_CHANNEL_2);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2104      	movs	r1, #4
 8004e10:	0018      	movs	r0, r3
 8004e12:	f005 fecd 	bl	800abb0 <HAL_TIM_OC_Start_IT>
}
 8004e16:	46c0      	nop			; (mov r8, r8)
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	b009      	add	sp, #36	; 0x24
 8004e1c:	bd90      	pop	{r4, r7, pc}
 8004e1e:	46c0      	nop			; (mov r8, r8)
 8004e20:	200001a1 	.word	0x200001a1
 8004e24:	200001a4 	.word	0x200001a4
 8004e28:	20000110 	.word	0x20000110
 8004e2c:	20000114 	.word	0x20000114
 8004e30:	80007fff 	.word	0x80007fff
 8004e34:	ffff8000 	.word	0xffff8000

08004e38 <pauseStopwatch>:

void pauseStopwatch(TIM_HandleTypeDef *htim) {
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b082      	sub	sp, #8
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
	// save marker to hold milliseconds
	HAL_TIM_OC_Stop_IT(htim, TIM_CHANNEL_2);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2104      	movs	r1, #4
 8004e44:	0018      	movs	r0, r3
 8004e46:	f005 ff05 	bl	800ac54 <HAL_TIM_OC_Stop_IT>
	stopwatchPauseMarker = htim->Instance->CNT;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e50:	4b02      	ldr	r3, [pc, #8]	; (8004e5c <pauseStopwatch+0x24>)
 8004e52:	601a      	str	r2, [r3, #0]
}
 8004e54:	46c0      	nop			; (mov r8, r8)
 8004e56:	46bd      	mov	sp, r7
 8004e58:	b002      	add	sp, #8
 8004e5a:	bd80      	pop	{r7, pc}
 8004e5c:	20000114 	.word	0x20000114

08004e60 <clearStopwatch>:

void clearStopwatch(TIM_HandleTypeDef *htim) {
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b082      	sub	sp, #8
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
	// clear everything
	HAL_TIM_OC_Stop_IT(htim, TIM_CHANNEL_2);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2104      	movs	r1, #4
 8004e6c:	0018      	movs	r0, r3
 8004e6e:	f005 fef1 	bl	800ac54 <HAL_TIM_OC_Stop_IT>
	stopwatchPauseMarker = htim->Instance->CNT;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e78:	4b06      	ldr	r3, [pc, #24]	; (8004e94 <clearStopwatch+0x34>)
 8004e7a:	601a      	str	r2, [r3, #0]
	stopwatchStartMarker = htim->Instance->CNT;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e82:	4b05      	ldr	r3, [pc, #20]	; (8004e98 <clearStopwatch+0x38>)
 8004e84:	601a      	str	r2, [r3, #0]

	stopwatchCounter = 0;
 8004e86:	4b05      	ldr	r3, [pc, #20]	; (8004e9c <clearStopwatch+0x3c>)
 8004e88:	2200      	movs	r2, #0
 8004e8a:	601a      	str	r2, [r3, #0]
}
 8004e8c:	46c0      	nop			; (mov r8, r8)
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	b002      	add	sp, #8
 8004e92:	bd80      	pop	{r7, pc}
 8004e94:	20000114 	.word	0x20000114
 8004e98:	20000110 	.word	0x20000110
 8004e9c:	200001a4 	.word	0x200001a4

08004ea0 <runADCSampler>:
void stopTimerStopwatchBase(TIM_HandleTypeDef *htim) {HAL_TIM_Base_Stop(htim);}
// ---- end of important timer functions ----

// ---- motor and other things that use timer ----
// uses LSE timer TIM22
void runADCSampler(TIM_HandleTypeDef *htim) {
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b082      	sub	sp, #8
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start_IT(htim);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	0018      	movs	r0, r3
 8004eac:	f005 fe08 	bl	800aac0 <HAL_TIM_Base_Start_IT>
	canSampleBattery = 1;			// set flag to let ADC run at the start
 8004eb0:	4b03      	ldr	r3, [pc, #12]	; (8004ec0 <runADCSampler+0x20>)
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	701a      	strb	r2, [r3, #0]
}
 8004eb6:	46c0      	nop			; (mov r8, r8)
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	b002      	add	sp, #8
 8004ebc:	bd80      	pop	{r7, pc}
 8004ebe:	46c0      	nop			; (mov r8, r8)
 8004ec0:	2000014e 	.word	0x2000014e

08004ec4 <runMotor>:

// running motor for vibration. runs for a finite amount of time
// uses LSE timer TIM2 CH2
void runMotor(TIM_HandleTypeDef *htim) {
 8004ec4:	b590      	push	{r4, r7, lr}
 8004ec6:	b087      	sub	sp, #28
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
	TIM_OC_InitTypeDef sConfig = {0};
 8004ecc:	2408      	movs	r4, #8
 8004ece:	193b      	adds	r3, r7, r4
 8004ed0:	0018      	movs	r0, r3
 8004ed2:	2310      	movs	r3, #16
 8004ed4:	001a      	movs	r2, r3
 8004ed6:	2100      	movs	r1, #0
 8004ed8:	f006 fd51 	bl	800b97e <memset>
	sConfig.OCMode = TIM_OCMODE_TIMING;
 8004edc:	0021      	movs	r1, r4
 8004ede:	187b      	adds	r3, r7, r1
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	601a      	str	r2, [r3, #0]
	sConfig.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004ee4:	187b      	adds	r3, r7, r1
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	609a      	str	r2, [r3, #8]
	sConfig.OCFastMode = TIM_OCFAST_DISABLE;
 8004eea:	187b      	adds	r3, r7, r1
 8004eec:	2200      	movs	r2, #0
 8004eee:	60da      	str	r2, [r3, #12]
	sConfig.Pulse = htim->Instance->CNT;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ef6:	000c      	movs	r4, r1
 8004ef8:	187b      	adds	r3, r7, r1
 8004efa:	605a      	str	r2, [r3, #4]

	HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_PIN, GPIO_PIN_SET);
 8004efc:	23a0      	movs	r3, #160	; 0xa0
 8004efe:	05db      	lsls	r3, r3, #23
 8004f00:	2201      	movs	r2, #1
 8004f02:	2110      	movs	r1, #16
 8004f04:	0018      	movs	r0, r3
 8004f06:	f003 f8ef 	bl	80080e8 <HAL_GPIO_WritePin>
	HAL_TIM_OC_ConfigChannel(htim, &sConfig, TIM_CHANNEL_2);
 8004f0a:	0021      	movs	r1, r4
 8004f0c:	1879      	adds	r1, r7, r1
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2204      	movs	r2, #4
 8004f12:	0018      	movs	r0, r3
 8004f14:	f006 f854 	bl	800afc0 <HAL_TIM_OC_ConfigChannel>
	HAL_TIM_OC_Start_IT(htim, TIM_CHANNEL_2);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2104      	movs	r1, #4
 8004f1c:	0018      	movs	r0, r3
 8004f1e:	f005 fe47 	bl	800abb0 <HAL_TIM_OC_Start_IT>

	motorStateCounter = 0;
 8004f22:	4b03      	ldr	r3, [pc, #12]	; (8004f30 <runMotor+0x6c>)
 8004f24:	2200      	movs	r2, #0
 8004f26:	701a      	strb	r2, [r3, #0]
}
 8004f28:	46c0      	nop			; (mov r8, r8)
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	b007      	add	sp, #28
 8004f2e:	bd90      	pop	{r4, r7, pc}
 8004f30:	20000118 	.word	0x20000118

08004f34 <stopMotor>:

void stopMotor(TIM_HandleTypeDef *htim) {
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b082      	sub	sp, #8
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
	HAL_TIM_OC_Stop_IT(htim, TIM_CHANNEL_2);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2104      	movs	r1, #4
 8004f40:	0018      	movs	r0, r3
 8004f42:	f005 fe87 	bl	800ac54 <HAL_TIM_OC_Stop_IT>
	motorStateCounter = 0;
 8004f46:	4b03      	ldr	r3, [pc, #12]	; (8004f54 <stopMotor+0x20>)
 8004f48:	2200      	movs	r2, #0
 8004f4a:	701a      	strb	r2, [r3, #0]
}
 8004f4c:	46c0      	nop			; (mov r8, r8)
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	b002      	add	sp, #8
 8004f52:	bd80      	pop	{r7, pc}
 8004f54:	20000118 	.word	0x20000118

08004f58 <setDisplayBacklight>:
void runMotorBase(TIM_HandleTypeDef *htim) {HAL_TIM_Base_Start(htim);}
void stopMotorBase(TIM_HandleTypeDef *htim) {HAL_TIM_Base_Stop(htim);}

// should change display brightness by changing PWM pulse width. input should be from 0-100
// uses 32MHz timer TIM3 CH1
void setDisplayBacklight(uint8_t intensity, TIM_HandleTypeDef *htim) {
 8004f58:	b5b0      	push	{r4, r5, r7, lr}
 8004f5a:	b086      	sub	sp, #24
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	0002      	movs	r2, r0
 8004f60:	6039      	str	r1, [r7, #0]
 8004f62:	1dfb      	adds	r3, r7, #7
 8004f64:	701a      	strb	r2, [r3, #0]
	if (intensity > 100) return;		// bounds checking
 8004f66:	1dfb      	adds	r3, r7, #7
 8004f68:	781b      	ldrb	r3, [r3, #0]
 8004f6a:	2b64      	cmp	r3, #100	; 0x64
 8004f6c:	d83a      	bhi.n	8004fe4 <setDisplayBacklight+0x8c>

	TIM_OC_InitTypeDef sConfig = {0};
 8004f6e:	2508      	movs	r5, #8
 8004f70:	197b      	adds	r3, r7, r5
 8004f72:	0018      	movs	r0, r3
 8004f74:	2310      	movs	r3, #16
 8004f76:	001a      	movs	r2, r3
 8004f78:	2100      	movs	r1, #0
 8004f7a:	f006 fd00 	bl	800b97e <memset>
	sConfig.OCMode = TIM_OCMODE_PWM1;
 8004f7e:	197b      	adds	r3, r7, r5
 8004f80:	2260      	movs	r2, #96	; 0x60
 8004f82:	601a      	str	r2, [r3, #0]
	sConfig.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004f84:	197b      	adds	r3, r7, r5
 8004f86:	2200      	movs	r2, #0
 8004f88:	609a      	str	r2, [r3, #8]
	sConfig.OCFastMode = TIM_OCFAST_DISABLE;
 8004f8a:	197b      	adds	r3, r7, r5
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	60da      	str	r2, [r3, #12]
	sConfig.Pulse = (htim->Instance->ARR-1)*((float)intensity/100);
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f96:	3b01      	subs	r3, #1
 8004f98:	0018      	movs	r0, r3
 8004f9a:	f7fb ff73 	bl	8000e84 <__aeabi_ui2f>
 8004f9e:	1c04      	adds	r4, r0, #0
 8004fa0:	1dfb      	adds	r3, r7, #7
 8004fa2:	781b      	ldrb	r3, [r3, #0]
 8004fa4:	0018      	movs	r0, r3
 8004fa6:	f7fb ff6d 	bl	8000e84 <__aeabi_ui2f>
 8004faa:	1c03      	adds	r3, r0, #0
 8004fac:	490f      	ldr	r1, [pc, #60]	; (8004fec <setDisplayBacklight+0x94>)
 8004fae:	1c18      	adds	r0, r3, #0
 8004fb0:	f7fb fa7a 	bl	80004a8 <__aeabi_fdiv>
 8004fb4:	1c03      	adds	r3, r0, #0
 8004fb6:	1c19      	adds	r1, r3, #0
 8004fb8:	1c20      	adds	r0, r4, #0
 8004fba:	f7fb fc4d 	bl	8000858 <__aeabi_fmul>
 8004fbe:	1c03      	adds	r3, r0, #0
 8004fc0:	1c18      	adds	r0, r3, #0
 8004fc2:	f7fb fa59 	bl	8000478 <__aeabi_f2uiz>
 8004fc6:	0002      	movs	r2, r0
 8004fc8:	197b      	adds	r3, r7, r5
 8004fca:	605a      	str	r2, [r3, #4]

	HAL_TIM_PWM_ConfigChannel(htim, &sConfig, TIM_CHANNEL_1);
 8004fcc:	1979      	adds	r1, r7, r5
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	0018      	movs	r0, r3
 8004fd4:	f006 f842 	bl	800b05c <HAL_TIM_PWM_ConfigChannel>
	HAL_TIM_PWM_Start(htim, TIM_CHANNEL_1);
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	2100      	movs	r1, #0
 8004fdc:	0018      	movs	r0, r3
 8004fde:	f005 febf 	bl	800ad60 <HAL_TIM_PWM_Start>
 8004fe2:	e000      	b.n	8004fe6 <setDisplayBacklight+0x8e>
	if (intensity > 100) return;		// bounds checking
 8004fe4:	46c0      	nop			; (mov r8, r8)
}
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	b006      	add	sp, #24
 8004fea:	bdb0      	pop	{r4, r5, r7, pc}
 8004fec:	42c80000 	.word	0x42c80000

08004ff0 <stopDisplayBacklight>:

void stopDisplayBacklight(TIM_HandleTypeDef *htim) {
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b082      	sub	sp, #8
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
	// stop pwm
	HAL_TIM_PWM_Stop(htim, TIM_CHANNEL_1);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2100      	movs	r1, #0
 8004ffc:	0018      	movs	r0, r3
 8004ffe:	f005 fed1 	bl	800ada4 <HAL_TIM_PWM_Stop>
}
 8005002:	46c0      	nop			; (mov r8, r8)
 8005004:	46bd      	mov	sp, r7
 8005006:	b002      	add	sp, #8
 8005008:	bd80      	pop	{r7, pc}
	...

0800500c <HAL_GPIO_EXTI_Callback>:
	"Nov",
	"Dec"
};

// callback for button interrupts.
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800500c:	b580      	push	{r7, lr}
 800500e:	b082      	sub	sp, #8
 8005010:	af00      	add	r7, sp, #0
 8005012:	0002      	movs	r2, r0
 8005014:	1dbb      	adds	r3, r7, #6
 8005016:	801a      	strh	r2, [r3, #0]
//	HAL_NVIC_DisableIRQ(EXTI4_15_IRQn);
//	HAL_NVIC_ClearPendingIRQ(EXTI2_3_IRQn);
//	HAL_NVIC_ClearPendingIRQ(EXTI4_15_IRQn);

	// updates flags
	if (GPIO_Pin == BUTTON1) buttons.is1Pressed = 1;
 8005018:	1dbb      	adds	r3, r7, #6
 800501a:	881b      	ldrh	r3, [r3, #0]
 800501c:	2b02      	cmp	r3, #2
 800501e:	d102      	bne.n	8005026 <HAL_GPIO_EXTI_Callback+0x1a>
 8005020:	4b0f      	ldr	r3, [pc, #60]	; (8005060 <HAL_GPIO_EXTI_Callback+0x54>)
 8005022:	2201      	movs	r2, #1
 8005024:	701a      	strb	r2, [r3, #0]
	if (GPIO_Pin == BUTTON2) buttons.is2Pressed = 1;
 8005026:	1dbb      	adds	r3, r7, #6
 8005028:	881b      	ldrh	r3, [r3, #0]
 800502a:	2b04      	cmp	r3, #4
 800502c:	d102      	bne.n	8005034 <HAL_GPIO_EXTI_Callback+0x28>
 800502e:	4b0c      	ldr	r3, [pc, #48]	; (8005060 <HAL_GPIO_EXTI_Callback+0x54>)
 8005030:	2201      	movs	r2, #1
 8005032:	705a      	strb	r2, [r3, #1]
	if (GPIO_Pin == BUTTON3) buttons.is3Pressed = 1;
 8005034:	1dbb      	adds	r3, r7, #6
 8005036:	881a      	ldrh	r2, [r3, #0]
 8005038:	2380      	movs	r3, #128	; 0x80
 800503a:	00db      	lsls	r3, r3, #3
 800503c:	429a      	cmp	r2, r3
 800503e:	d102      	bne.n	8005046 <HAL_GPIO_EXTI_Callback+0x3a>
 8005040:	4b07      	ldr	r3, [pc, #28]	; (8005060 <HAL_GPIO_EXTI_Callback+0x54>)
 8005042:	2201      	movs	r2, #1
 8005044:	709a      	strb	r2, [r3, #2]
	if (GPIO_Pin == BUTTON4) buttons.is4Pressed = 1;
 8005046:	1dbb      	adds	r3, r7, #6
 8005048:	881a      	ldrh	r2, [r3, #0]
 800504a:	2380      	movs	r3, #128	; 0x80
 800504c:	011b      	lsls	r3, r3, #4
 800504e:	429a      	cmp	r2, r3
 8005050:	d102      	bne.n	8005058 <HAL_GPIO_EXTI_Callback+0x4c>
 8005052:	4b03      	ldr	r3, [pc, #12]	; (8005060 <HAL_GPIO_EXTI_Callback+0x54>)
 8005054:	2201      	movs	r2, #1
 8005056:	70da      	strb	r2, [r3, #3]

	// runs timer for software debouncing delay
//	HAL_TIM_Base_Start_IT(&htim6);
}
 8005058:	46c0      	nop			; (mov r8, r8)
 800505a:	46bd      	mov	sp, r7
 800505c:	b002      	add	sp, #8
 800505e:	bd80      	pop	{r7, pc}
 8005060:	2000019c 	.word	0x2000019c

08005064 <updateState>:

//
void updateState(RTC_HandleTypeDef *hrtc, TIM_HandleTypeDef *timerStopwatchTim, TIM_HandleTypeDef *motorBacklightTim, TIM_HandleTypeDef *buttonTim, SPI_HandleTypeDef *hspi) {
 8005064:	b580      	push	{r7, lr}
 8005066:	b084      	sub	sp, #16
 8005068:	af00      	add	r7, sp, #0
 800506a:	60f8      	str	r0, [r7, #12]
 800506c:	60b9      	str	r1, [r7, #8]
 800506e:	607a      	str	r2, [r7, #4]
 8005070:	603b      	str	r3, [r7, #0]
	if (buttons.is1Pressed || buttons.is2Pressed || buttons.is3Pressed || buttons.is4Pressed) {
 8005072:	4bbf      	ldr	r3, [pc, #764]	; (8005370 <updateState+0x30c>)
 8005074:	781b      	ldrb	r3, [r3, #0]
 8005076:	b2db      	uxtb	r3, r3
 8005078:	2b00      	cmp	r3, #0
 800507a:	d10f      	bne.n	800509c <updateState+0x38>
 800507c:	4bbc      	ldr	r3, [pc, #752]	; (8005370 <updateState+0x30c>)
 800507e:	785b      	ldrb	r3, [r3, #1]
 8005080:	b2db      	uxtb	r3, r3
 8005082:	2b00      	cmp	r3, #0
 8005084:	d10a      	bne.n	800509c <updateState+0x38>
 8005086:	4bba      	ldr	r3, [pc, #744]	; (8005370 <updateState+0x30c>)
 8005088:	789b      	ldrb	r3, [r3, #2]
 800508a:	b2db      	uxtb	r3, r3
 800508c:	2b00      	cmp	r3, #0
 800508e:	d105      	bne.n	800509c <updateState+0x38>
 8005090:	4bb7      	ldr	r3, [pc, #732]	; (8005370 <updateState+0x30c>)
 8005092:	78db      	ldrb	r3, [r3, #3]
 8005094:	b2db      	uxtb	r3, r3
 8005096:	2b00      	cmp	r3, #0
 8005098:	d100      	bne.n	800509c <updateState+0x38>
 800509a:	e1ab      	b.n	80053f4 <updateState+0x390>
		// button 1 changes the face on screen.
		if (buttons.is1Pressed) {
 800509c:	4bb4      	ldr	r3, [pc, #720]	; (8005370 <updateState+0x30c>)
 800509e:	781b      	ldrb	r3, [r3, #0]
 80050a0:	b2db      	uxtb	r3, r3
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d02d      	beq.n	8005102 <updateState+0x9e>
			isFaceBeingChanged = 1;
 80050a6:	4bb3      	ldr	r3, [pc, #716]	; (8005374 <updateState+0x310>)
 80050a8:	2201      	movs	r2, #1
 80050aa:	701a      	strb	r2, [r3, #0]
			faceOnDisplay = (faceOnDisplay + 1) % NUM_FACES;
 80050ac:	4bb2      	ldr	r3, [pc, #712]	; (8005378 <updateState+0x314>)
 80050ae:	781b      	ldrb	r3, [r3, #0]
 80050b0:	3301      	adds	r3, #1
 80050b2:	4ab2      	ldr	r2, [pc, #712]	; (800537c <updateState+0x318>)
 80050b4:	4013      	ands	r3, r2
 80050b6:	d504      	bpl.n	80050c2 <updateState+0x5e>
 80050b8:	3b01      	subs	r3, #1
 80050ba:	2204      	movs	r2, #4
 80050bc:	4252      	negs	r2, r2
 80050be:	4313      	orrs	r3, r2
 80050c0:	3301      	adds	r3, #1
 80050c2:	b2da      	uxtb	r2, r3
 80050c4:	4bac      	ldr	r3, [pc, #688]	; (8005378 <updateState+0x314>)
 80050c6:	701a      	strb	r2, [r3, #0]
			switch (faceOnDisplay) {
 80050c8:	4bab      	ldr	r3, [pc, #684]	; (8005378 <updateState+0x314>)
 80050ca:	781b      	ldrb	r3, [r3, #0]
 80050cc:	2b01      	cmp	r3, #1
 80050ce:	d00c      	beq.n	80050ea <updateState+0x86>
 80050d0:	dc02      	bgt.n	80050d8 <updateState+0x74>
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d005      	beq.n	80050e2 <updateState+0x7e>
				case faceClock: updateFace.clock = 1; break;
				case faceTimer: updateFace.timer = 1; break;
				case faceAlarm: updateFace.alarm = 1; break;
				case faceStopwatch: updateFace.stopwatch = 1; break;
				default: break;
 80050d6:	e015      	b.n	8005104 <updateState+0xa0>
			switch (faceOnDisplay) {
 80050d8:	2b02      	cmp	r3, #2
 80050da:	d00a      	beq.n	80050f2 <updateState+0x8e>
 80050dc:	2b03      	cmp	r3, #3
 80050de:	d00c      	beq.n	80050fa <updateState+0x96>
				default: break;
 80050e0:	e010      	b.n	8005104 <updateState+0xa0>
				case faceClock: updateFace.clock = 1; break;
 80050e2:	4ba7      	ldr	r3, [pc, #668]	; (8005380 <updateState+0x31c>)
 80050e4:	2201      	movs	r2, #1
 80050e6:	701a      	strb	r2, [r3, #0]
 80050e8:	e00c      	b.n	8005104 <updateState+0xa0>
				case faceTimer: updateFace.timer = 1; break;
 80050ea:	4ba5      	ldr	r3, [pc, #660]	; (8005380 <updateState+0x31c>)
 80050ec:	2201      	movs	r2, #1
 80050ee:	705a      	strb	r2, [r3, #1]
 80050f0:	e008      	b.n	8005104 <updateState+0xa0>
				case faceAlarm: updateFace.alarm = 1; break;
 80050f2:	4ba3      	ldr	r3, [pc, #652]	; (8005380 <updateState+0x31c>)
 80050f4:	2201      	movs	r2, #1
 80050f6:	709a      	strb	r2, [r3, #2]
 80050f8:	e004      	b.n	8005104 <updateState+0xa0>
				case faceStopwatch: updateFace.stopwatch = 1; break;
 80050fa:	4ba1      	ldr	r3, [pc, #644]	; (8005380 <updateState+0x31c>)
 80050fc:	2201      	movs	r2, #1
 80050fe:	70da      	strb	r2, [r3, #3]
 8005100:	e000      	b.n	8005104 <updateState+0xa0>
			}
		}
 8005102:	46c0      	nop			; (mov r8, r8)

		// button combo: press 2 and 3 alternatively 5 times to reinit display.
		// needed since screen often turns white when its power supply is rustled, and there's no way to show the information
		static uint8_t s = 0;
		switch(s) {
 8005104:	4b9f      	ldr	r3, [pc, #636]	; (8005384 <updateState+0x320>)
 8005106:	781b      	ldrb	r3, [r3, #0]
 8005108:	2b09      	cmp	r3, #9
 800510a:	d900      	bls.n	800510e <updateState+0xaa>
 800510c:	e11b      	b.n	8005346 <updateState+0x2e2>
 800510e:	009a      	lsls	r2, r3, #2
 8005110:	4b9d      	ldr	r3, [pc, #628]	; (8005388 <updateState+0x324>)
 8005112:	18d3      	adds	r3, r2, r3
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	469f      	mov	pc, r3
			case 0:	if (buttons.is2Pressed) s++; break;
 8005118:	4b95      	ldr	r3, [pc, #596]	; (8005370 <updateState+0x30c>)
 800511a:	785b      	ldrb	r3, [r3, #1]
 800511c:	b2db      	uxtb	r3, r3
 800511e:	2b00      	cmp	r3, #0
 8005120:	d100      	bne.n	8005124 <updateState+0xc0>
 8005122:	e112      	b.n	800534a <updateState+0x2e6>
 8005124:	4b97      	ldr	r3, [pc, #604]	; (8005384 <updateState+0x320>)
 8005126:	781b      	ldrb	r3, [r3, #0]
 8005128:	3301      	adds	r3, #1
 800512a:	b2da      	uxtb	r2, r3
 800512c:	4b95      	ldr	r3, [pc, #596]	; (8005384 <updateState+0x320>)
 800512e:	701a      	strb	r2, [r3, #0]
 8005130:	e10b      	b.n	800534a <updateState+0x2e6>
			case 1: if (buttons.is3Pressed) s++; else if (buttons.is1Pressed || buttons.is2Pressed || buttons.is4Pressed) s = 0; break;
 8005132:	4b8f      	ldr	r3, [pc, #572]	; (8005370 <updateState+0x30c>)
 8005134:	789b      	ldrb	r3, [r3, #2]
 8005136:	b2db      	uxtb	r3, r3
 8005138:	2b00      	cmp	r3, #0
 800513a:	d006      	beq.n	800514a <updateState+0xe6>
 800513c:	4b91      	ldr	r3, [pc, #580]	; (8005384 <updateState+0x320>)
 800513e:	781b      	ldrb	r3, [r3, #0]
 8005140:	3301      	adds	r3, #1
 8005142:	b2da      	uxtb	r2, r3
 8005144:	4b8f      	ldr	r3, [pc, #572]	; (8005384 <updateState+0x320>)
 8005146:	701a      	strb	r2, [r3, #0]
 8005148:	e101      	b.n	800534e <updateState+0x2ea>
 800514a:	4b89      	ldr	r3, [pc, #548]	; (8005370 <updateState+0x30c>)
 800514c:	781b      	ldrb	r3, [r3, #0]
 800514e:	b2db      	uxtb	r3, r3
 8005150:	2b00      	cmp	r3, #0
 8005152:	d10a      	bne.n	800516a <updateState+0x106>
 8005154:	4b86      	ldr	r3, [pc, #536]	; (8005370 <updateState+0x30c>)
 8005156:	785b      	ldrb	r3, [r3, #1]
 8005158:	b2db      	uxtb	r3, r3
 800515a:	2b00      	cmp	r3, #0
 800515c:	d105      	bne.n	800516a <updateState+0x106>
 800515e:	4b84      	ldr	r3, [pc, #528]	; (8005370 <updateState+0x30c>)
 8005160:	78db      	ldrb	r3, [r3, #3]
 8005162:	b2db      	uxtb	r3, r3
 8005164:	2b00      	cmp	r3, #0
 8005166:	d100      	bne.n	800516a <updateState+0x106>
 8005168:	e0f1      	b.n	800534e <updateState+0x2ea>
 800516a:	4b86      	ldr	r3, [pc, #536]	; (8005384 <updateState+0x320>)
 800516c:	2200      	movs	r2, #0
 800516e:	701a      	strb	r2, [r3, #0]
 8005170:	e0ed      	b.n	800534e <updateState+0x2ea>
			case 2: if (buttons.is2Pressed) s++; else if (buttons.is1Pressed || buttons.is3Pressed || buttons.is4Pressed) s = 0; break;
 8005172:	4b7f      	ldr	r3, [pc, #508]	; (8005370 <updateState+0x30c>)
 8005174:	785b      	ldrb	r3, [r3, #1]
 8005176:	b2db      	uxtb	r3, r3
 8005178:	2b00      	cmp	r3, #0
 800517a:	d006      	beq.n	800518a <updateState+0x126>
 800517c:	4b81      	ldr	r3, [pc, #516]	; (8005384 <updateState+0x320>)
 800517e:	781b      	ldrb	r3, [r3, #0]
 8005180:	3301      	adds	r3, #1
 8005182:	b2da      	uxtb	r2, r3
 8005184:	4b7f      	ldr	r3, [pc, #508]	; (8005384 <updateState+0x320>)
 8005186:	701a      	strb	r2, [r3, #0]
 8005188:	e0e3      	b.n	8005352 <updateState+0x2ee>
 800518a:	4b79      	ldr	r3, [pc, #484]	; (8005370 <updateState+0x30c>)
 800518c:	781b      	ldrb	r3, [r3, #0]
 800518e:	b2db      	uxtb	r3, r3
 8005190:	2b00      	cmp	r3, #0
 8005192:	d10a      	bne.n	80051aa <updateState+0x146>
 8005194:	4b76      	ldr	r3, [pc, #472]	; (8005370 <updateState+0x30c>)
 8005196:	789b      	ldrb	r3, [r3, #2]
 8005198:	b2db      	uxtb	r3, r3
 800519a:	2b00      	cmp	r3, #0
 800519c:	d105      	bne.n	80051aa <updateState+0x146>
 800519e:	4b74      	ldr	r3, [pc, #464]	; (8005370 <updateState+0x30c>)
 80051a0:	78db      	ldrb	r3, [r3, #3]
 80051a2:	b2db      	uxtb	r3, r3
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d100      	bne.n	80051aa <updateState+0x146>
 80051a8:	e0d3      	b.n	8005352 <updateState+0x2ee>
 80051aa:	4b76      	ldr	r3, [pc, #472]	; (8005384 <updateState+0x320>)
 80051ac:	2200      	movs	r2, #0
 80051ae:	701a      	strb	r2, [r3, #0]
 80051b0:	e0cf      	b.n	8005352 <updateState+0x2ee>
			case 3: if (buttons.is3Pressed) s++; else if (buttons.is1Pressed || buttons.is2Pressed || buttons.is4Pressed) s = 0; break;
 80051b2:	4b6f      	ldr	r3, [pc, #444]	; (8005370 <updateState+0x30c>)
 80051b4:	789b      	ldrb	r3, [r3, #2]
 80051b6:	b2db      	uxtb	r3, r3
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d006      	beq.n	80051ca <updateState+0x166>
 80051bc:	4b71      	ldr	r3, [pc, #452]	; (8005384 <updateState+0x320>)
 80051be:	781b      	ldrb	r3, [r3, #0]
 80051c0:	3301      	adds	r3, #1
 80051c2:	b2da      	uxtb	r2, r3
 80051c4:	4b6f      	ldr	r3, [pc, #444]	; (8005384 <updateState+0x320>)
 80051c6:	701a      	strb	r2, [r3, #0]
 80051c8:	e0c5      	b.n	8005356 <updateState+0x2f2>
 80051ca:	4b69      	ldr	r3, [pc, #420]	; (8005370 <updateState+0x30c>)
 80051cc:	781b      	ldrb	r3, [r3, #0]
 80051ce:	b2db      	uxtb	r3, r3
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d10a      	bne.n	80051ea <updateState+0x186>
 80051d4:	4b66      	ldr	r3, [pc, #408]	; (8005370 <updateState+0x30c>)
 80051d6:	785b      	ldrb	r3, [r3, #1]
 80051d8:	b2db      	uxtb	r3, r3
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d105      	bne.n	80051ea <updateState+0x186>
 80051de:	4b64      	ldr	r3, [pc, #400]	; (8005370 <updateState+0x30c>)
 80051e0:	78db      	ldrb	r3, [r3, #3]
 80051e2:	b2db      	uxtb	r3, r3
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d100      	bne.n	80051ea <updateState+0x186>
 80051e8:	e0b5      	b.n	8005356 <updateState+0x2f2>
 80051ea:	4b66      	ldr	r3, [pc, #408]	; (8005384 <updateState+0x320>)
 80051ec:	2200      	movs	r2, #0
 80051ee:	701a      	strb	r2, [r3, #0]
 80051f0:	e0b1      	b.n	8005356 <updateState+0x2f2>
			case 4: if (buttons.is2Pressed) s++; else if (buttons.is1Pressed || buttons.is3Pressed || buttons.is4Pressed) s = 0; break;
 80051f2:	4b5f      	ldr	r3, [pc, #380]	; (8005370 <updateState+0x30c>)
 80051f4:	785b      	ldrb	r3, [r3, #1]
 80051f6:	b2db      	uxtb	r3, r3
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d006      	beq.n	800520a <updateState+0x1a6>
 80051fc:	4b61      	ldr	r3, [pc, #388]	; (8005384 <updateState+0x320>)
 80051fe:	781b      	ldrb	r3, [r3, #0]
 8005200:	3301      	adds	r3, #1
 8005202:	b2da      	uxtb	r2, r3
 8005204:	4b5f      	ldr	r3, [pc, #380]	; (8005384 <updateState+0x320>)
 8005206:	701a      	strb	r2, [r3, #0]
 8005208:	e0a7      	b.n	800535a <updateState+0x2f6>
 800520a:	4b59      	ldr	r3, [pc, #356]	; (8005370 <updateState+0x30c>)
 800520c:	781b      	ldrb	r3, [r3, #0]
 800520e:	b2db      	uxtb	r3, r3
 8005210:	2b00      	cmp	r3, #0
 8005212:	d10a      	bne.n	800522a <updateState+0x1c6>
 8005214:	4b56      	ldr	r3, [pc, #344]	; (8005370 <updateState+0x30c>)
 8005216:	789b      	ldrb	r3, [r3, #2]
 8005218:	b2db      	uxtb	r3, r3
 800521a:	2b00      	cmp	r3, #0
 800521c:	d105      	bne.n	800522a <updateState+0x1c6>
 800521e:	4b54      	ldr	r3, [pc, #336]	; (8005370 <updateState+0x30c>)
 8005220:	78db      	ldrb	r3, [r3, #3]
 8005222:	b2db      	uxtb	r3, r3
 8005224:	2b00      	cmp	r3, #0
 8005226:	d100      	bne.n	800522a <updateState+0x1c6>
 8005228:	e097      	b.n	800535a <updateState+0x2f6>
 800522a:	4b56      	ldr	r3, [pc, #344]	; (8005384 <updateState+0x320>)
 800522c:	2200      	movs	r2, #0
 800522e:	701a      	strb	r2, [r3, #0]
 8005230:	e093      	b.n	800535a <updateState+0x2f6>
			case 5: if (buttons.is3Pressed) s++; else if (buttons.is1Pressed || buttons.is2Pressed || buttons.is4Pressed) s = 0; break;
 8005232:	4b4f      	ldr	r3, [pc, #316]	; (8005370 <updateState+0x30c>)
 8005234:	789b      	ldrb	r3, [r3, #2]
 8005236:	b2db      	uxtb	r3, r3
 8005238:	2b00      	cmp	r3, #0
 800523a:	d006      	beq.n	800524a <updateState+0x1e6>
 800523c:	4b51      	ldr	r3, [pc, #324]	; (8005384 <updateState+0x320>)
 800523e:	781b      	ldrb	r3, [r3, #0]
 8005240:	3301      	adds	r3, #1
 8005242:	b2da      	uxtb	r2, r3
 8005244:	4b4f      	ldr	r3, [pc, #316]	; (8005384 <updateState+0x320>)
 8005246:	701a      	strb	r2, [r3, #0]
 8005248:	e089      	b.n	800535e <updateState+0x2fa>
 800524a:	4b49      	ldr	r3, [pc, #292]	; (8005370 <updateState+0x30c>)
 800524c:	781b      	ldrb	r3, [r3, #0]
 800524e:	b2db      	uxtb	r3, r3
 8005250:	2b00      	cmp	r3, #0
 8005252:	d10a      	bne.n	800526a <updateState+0x206>
 8005254:	4b46      	ldr	r3, [pc, #280]	; (8005370 <updateState+0x30c>)
 8005256:	785b      	ldrb	r3, [r3, #1]
 8005258:	b2db      	uxtb	r3, r3
 800525a:	2b00      	cmp	r3, #0
 800525c:	d105      	bne.n	800526a <updateState+0x206>
 800525e:	4b44      	ldr	r3, [pc, #272]	; (8005370 <updateState+0x30c>)
 8005260:	78db      	ldrb	r3, [r3, #3]
 8005262:	b2db      	uxtb	r3, r3
 8005264:	2b00      	cmp	r3, #0
 8005266:	d100      	bne.n	800526a <updateState+0x206>
 8005268:	e079      	b.n	800535e <updateState+0x2fa>
 800526a:	4b46      	ldr	r3, [pc, #280]	; (8005384 <updateState+0x320>)
 800526c:	2200      	movs	r2, #0
 800526e:	701a      	strb	r2, [r3, #0]
 8005270:	e075      	b.n	800535e <updateState+0x2fa>
			case 6: if (buttons.is2Pressed) s++; else if (buttons.is1Pressed || buttons.is3Pressed || buttons.is4Pressed) s = 0; break;
 8005272:	4b3f      	ldr	r3, [pc, #252]	; (8005370 <updateState+0x30c>)
 8005274:	785b      	ldrb	r3, [r3, #1]
 8005276:	b2db      	uxtb	r3, r3
 8005278:	2b00      	cmp	r3, #0
 800527a:	d006      	beq.n	800528a <updateState+0x226>
 800527c:	4b41      	ldr	r3, [pc, #260]	; (8005384 <updateState+0x320>)
 800527e:	781b      	ldrb	r3, [r3, #0]
 8005280:	3301      	adds	r3, #1
 8005282:	b2da      	uxtb	r2, r3
 8005284:	4b3f      	ldr	r3, [pc, #252]	; (8005384 <updateState+0x320>)
 8005286:	701a      	strb	r2, [r3, #0]
 8005288:	e06b      	b.n	8005362 <updateState+0x2fe>
 800528a:	4b39      	ldr	r3, [pc, #228]	; (8005370 <updateState+0x30c>)
 800528c:	781b      	ldrb	r3, [r3, #0]
 800528e:	b2db      	uxtb	r3, r3
 8005290:	2b00      	cmp	r3, #0
 8005292:	d109      	bne.n	80052a8 <updateState+0x244>
 8005294:	4b36      	ldr	r3, [pc, #216]	; (8005370 <updateState+0x30c>)
 8005296:	789b      	ldrb	r3, [r3, #2]
 8005298:	b2db      	uxtb	r3, r3
 800529a:	2b00      	cmp	r3, #0
 800529c:	d104      	bne.n	80052a8 <updateState+0x244>
 800529e:	4b34      	ldr	r3, [pc, #208]	; (8005370 <updateState+0x30c>)
 80052a0:	78db      	ldrb	r3, [r3, #3]
 80052a2:	b2db      	uxtb	r3, r3
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d05c      	beq.n	8005362 <updateState+0x2fe>
 80052a8:	4b36      	ldr	r3, [pc, #216]	; (8005384 <updateState+0x320>)
 80052aa:	2200      	movs	r2, #0
 80052ac:	701a      	strb	r2, [r3, #0]
 80052ae:	e058      	b.n	8005362 <updateState+0x2fe>
			case 7: if (buttons.is3Pressed) s++; else if (buttons.is1Pressed || buttons.is2Pressed || buttons.is4Pressed) s = 0; break;
 80052b0:	4b2f      	ldr	r3, [pc, #188]	; (8005370 <updateState+0x30c>)
 80052b2:	789b      	ldrb	r3, [r3, #2]
 80052b4:	b2db      	uxtb	r3, r3
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d006      	beq.n	80052c8 <updateState+0x264>
 80052ba:	4b32      	ldr	r3, [pc, #200]	; (8005384 <updateState+0x320>)
 80052bc:	781b      	ldrb	r3, [r3, #0]
 80052be:	3301      	adds	r3, #1
 80052c0:	b2da      	uxtb	r2, r3
 80052c2:	4b30      	ldr	r3, [pc, #192]	; (8005384 <updateState+0x320>)
 80052c4:	701a      	strb	r2, [r3, #0]
 80052c6:	e04e      	b.n	8005366 <updateState+0x302>
 80052c8:	4b29      	ldr	r3, [pc, #164]	; (8005370 <updateState+0x30c>)
 80052ca:	781b      	ldrb	r3, [r3, #0]
 80052cc:	b2db      	uxtb	r3, r3
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d109      	bne.n	80052e6 <updateState+0x282>
 80052d2:	4b27      	ldr	r3, [pc, #156]	; (8005370 <updateState+0x30c>)
 80052d4:	785b      	ldrb	r3, [r3, #1]
 80052d6:	b2db      	uxtb	r3, r3
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d104      	bne.n	80052e6 <updateState+0x282>
 80052dc:	4b24      	ldr	r3, [pc, #144]	; (8005370 <updateState+0x30c>)
 80052de:	78db      	ldrb	r3, [r3, #3]
 80052e0:	b2db      	uxtb	r3, r3
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d03f      	beq.n	8005366 <updateState+0x302>
 80052e6:	4b27      	ldr	r3, [pc, #156]	; (8005384 <updateState+0x320>)
 80052e8:	2200      	movs	r2, #0
 80052ea:	701a      	strb	r2, [r3, #0]
 80052ec:	e03b      	b.n	8005366 <updateState+0x302>
			case 8: if (buttons.is2Pressed) s++; else if (buttons.is1Pressed || buttons.is3Pressed || buttons.is4Pressed) s = 0; break;
 80052ee:	4b20      	ldr	r3, [pc, #128]	; (8005370 <updateState+0x30c>)
 80052f0:	785b      	ldrb	r3, [r3, #1]
 80052f2:	b2db      	uxtb	r3, r3
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d006      	beq.n	8005306 <updateState+0x2a2>
 80052f8:	4b22      	ldr	r3, [pc, #136]	; (8005384 <updateState+0x320>)
 80052fa:	781b      	ldrb	r3, [r3, #0]
 80052fc:	3301      	adds	r3, #1
 80052fe:	b2da      	uxtb	r2, r3
 8005300:	4b20      	ldr	r3, [pc, #128]	; (8005384 <updateState+0x320>)
 8005302:	701a      	strb	r2, [r3, #0]
 8005304:	e031      	b.n	800536a <updateState+0x306>
 8005306:	4b1a      	ldr	r3, [pc, #104]	; (8005370 <updateState+0x30c>)
 8005308:	781b      	ldrb	r3, [r3, #0]
 800530a:	b2db      	uxtb	r3, r3
 800530c:	2b00      	cmp	r3, #0
 800530e:	d109      	bne.n	8005324 <updateState+0x2c0>
 8005310:	4b17      	ldr	r3, [pc, #92]	; (8005370 <updateState+0x30c>)
 8005312:	789b      	ldrb	r3, [r3, #2]
 8005314:	b2db      	uxtb	r3, r3
 8005316:	2b00      	cmp	r3, #0
 8005318:	d104      	bne.n	8005324 <updateState+0x2c0>
 800531a:	4b15      	ldr	r3, [pc, #84]	; (8005370 <updateState+0x30c>)
 800531c:	78db      	ldrb	r3, [r3, #3]
 800531e:	b2db      	uxtb	r3, r3
 8005320:	2b00      	cmp	r3, #0
 8005322:	d022      	beq.n	800536a <updateState+0x306>
 8005324:	4b17      	ldr	r3, [pc, #92]	; (8005384 <updateState+0x320>)
 8005326:	2200      	movs	r2, #0
 8005328:	701a      	strb	r2, [r3, #0]
 800532a:	e01e      	b.n	800536a <updateState+0x306>
			case 9: if (buttons.is3Pressed) {s = 0; TFT_startup(hspi);} break;
 800532c:	4b10      	ldr	r3, [pc, #64]	; (8005370 <updateState+0x30c>)
 800532e:	789b      	ldrb	r3, [r3, #2]
 8005330:	b2db      	uxtb	r3, r3
 8005332:	2b00      	cmp	r3, #0
 8005334:	d02a      	beq.n	800538c <updateState+0x328>
 8005336:	4b13      	ldr	r3, [pc, #76]	; (8005384 <updateState+0x320>)
 8005338:	2200      	movs	r2, #0
 800533a:	701a      	strb	r2, [r3, #0]
 800533c:	69bb      	ldr	r3, [r7, #24]
 800533e:	0018      	movs	r0, r3
 8005340:	f7fc fda4 	bl	8001e8c <TFT_startup>
 8005344:	e022      	b.n	800538c <updateState+0x328>
			default: break;
 8005346:	46c0      	nop			; (mov r8, r8)
 8005348:	e021      	b.n	800538e <updateState+0x32a>
			case 0:	if (buttons.is2Pressed) s++; break;
 800534a:	46c0      	nop			; (mov r8, r8)
 800534c:	e01f      	b.n	800538e <updateState+0x32a>
			case 1: if (buttons.is3Pressed) s++; else if (buttons.is1Pressed || buttons.is2Pressed || buttons.is4Pressed) s = 0; break;
 800534e:	46c0      	nop			; (mov r8, r8)
 8005350:	e01d      	b.n	800538e <updateState+0x32a>
			case 2: if (buttons.is2Pressed) s++; else if (buttons.is1Pressed || buttons.is3Pressed || buttons.is4Pressed) s = 0; break;
 8005352:	46c0      	nop			; (mov r8, r8)
 8005354:	e01b      	b.n	800538e <updateState+0x32a>
			case 3: if (buttons.is3Pressed) s++; else if (buttons.is1Pressed || buttons.is2Pressed || buttons.is4Pressed) s = 0; break;
 8005356:	46c0      	nop			; (mov r8, r8)
 8005358:	e019      	b.n	800538e <updateState+0x32a>
			case 4: if (buttons.is2Pressed) s++; else if (buttons.is1Pressed || buttons.is3Pressed || buttons.is4Pressed) s = 0; break;
 800535a:	46c0      	nop			; (mov r8, r8)
 800535c:	e017      	b.n	800538e <updateState+0x32a>
			case 5: if (buttons.is3Pressed) s++; else if (buttons.is1Pressed || buttons.is2Pressed || buttons.is4Pressed) s = 0; break;
 800535e:	46c0      	nop			; (mov r8, r8)
 8005360:	e015      	b.n	800538e <updateState+0x32a>
			case 6: if (buttons.is2Pressed) s++; else if (buttons.is1Pressed || buttons.is3Pressed || buttons.is4Pressed) s = 0; break;
 8005362:	46c0      	nop			; (mov r8, r8)
 8005364:	e013      	b.n	800538e <updateState+0x32a>
			case 7: if (buttons.is3Pressed) s++; else if (buttons.is1Pressed || buttons.is2Pressed || buttons.is4Pressed) s = 0; break;
 8005366:	46c0      	nop			; (mov r8, r8)
 8005368:	e011      	b.n	800538e <updateState+0x32a>
			case 8: if (buttons.is2Pressed) s++; else if (buttons.is1Pressed || buttons.is3Pressed || buttons.is4Pressed) s = 0; break;
 800536a:	46c0      	nop			; (mov r8, r8)
 800536c:	e00f      	b.n	800538e <updateState+0x32a>
 800536e:	46c0      	nop			; (mov r8, r8)
 8005370:	2000019c 	.word	0x2000019c
 8005374:	20000068 	.word	0x20000068
 8005378:	20000140 	.word	0x20000140
 800537c:	80000003 	.word	0x80000003
 8005380:	20000150 	.word	0x20000150
 8005384:	20000141 	.word	0x20000141
 8005388:	0800cd84 	.word	0x0800cd84
			case 9: if (buttons.is3Pressed) {s = 0; TFT_startup(hspi);} break;
 800538c:	46c0      	nop			; (mov r8, r8)
		}

		// run helper functions when their face is on screen
		if (faceOnDisplay == faceClock) updateClockState(hrtc);
 800538e:	4b1b      	ldr	r3, [pc, #108]	; (80053fc <updateState+0x398>)
 8005390:	781b      	ldrb	r3, [r3, #0]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d104      	bne.n	80053a0 <updateState+0x33c>
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	0018      	movs	r0, r3
 800539a:	f000 f833 	bl	8005404 <updateClockState>
 800539e:	e01d      	b.n	80053dc <updateState+0x378>
		else if (faceOnDisplay == faceTimer) updateTimerState(timerStopwatchTim, motorBacklightTim);
 80053a0:	4b16      	ldr	r3, [pc, #88]	; (80053fc <updateState+0x398>)
 80053a2:	781b      	ldrb	r3, [r3, #0]
 80053a4:	2b01      	cmp	r3, #1
 80053a6:	d106      	bne.n	80053b6 <updateState+0x352>
 80053a8:	687a      	ldr	r2, [r7, #4]
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	0011      	movs	r1, r2
 80053ae:	0018      	movs	r0, r3
 80053b0:	f000 f9a6 	bl	8005700 <updateTimerState>
 80053b4:	e012      	b.n	80053dc <updateState+0x378>
		else if (faceOnDisplay == faceAlarm) updateAlarmState(hrtc, motorBacklightTim);
 80053b6:	4b11      	ldr	r3, [pc, #68]	; (80053fc <updateState+0x398>)
 80053b8:	781b      	ldrb	r3, [r3, #0]
 80053ba:	2b02      	cmp	r3, #2
 80053bc:	d106      	bne.n	80053cc <updateState+0x368>
 80053be:	687a      	ldr	r2, [r7, #4]
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	0011      	movs	r1, r2
 80053c4:	0018      	movs	r0, r3
 80053c6:	f000 fad7 	bl	8005978 <updateAlarmState>
 80053ca:	e007      	b.n	80053dc <updateState+0x378>
		else if (faceOnDisplay == faceStopwatch) updateStopwatchState(timerStopwatchTim);
 80053cc:	4b0b      	ldr	r3, [pc, #44]	; (80053fc <updateState+0x398>)
 80053ce:	781b      	ldrb	r3, [r3, #0]
 80053d0:	2b03      	cmp	r3, #3
 80053d2:	d103      	bne.n	80053dc <updateState+0x378>
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	0018      	movs	r0, r3
 80053d8:	f000 fbfa 	bl	8005bd0 <updateStopwatchState>

		// flags cleared only when state code has finished executing once
		buttons.is1Pressed = buttons.is2Pressed = buttons.is3Pressed = buttons.is4Pressed = 0;
 80053dc:	2200      	movs	r2, #0
 80053de:	4b08      	ldr	r3, [pc, #32]	; (8005400 <updateState+0x39c>)
 80053e0:	1c11      	adds	r1, r2, #0
 80053e2:	70d9      	strb	r1, [r3, #3]
 80053e4:	4b06      	ldr	r3, [pc, #24]	; (8005400 <updateState+0x39c>)
 80053e6:	1c11      	adds	r1, r2, #0
 80053e8:	7099      	strb	r1, [r3, #2]
 80053ea:	4b05      	ldr	r3, [pc, #20]	; (8005400 <updateState+0x39c>)
 80053ec:	1c11      	adds	r1, r2, #0
 80053ee:	7059      	strb	r1, [r3, #1]
 80053f0:	4b03      	ldr	r3, [pc, #12]	; (8005400 <updateState+0x39c>)
 80053f2:	701a      	strb	r2, [r3, #0]
	}
}
 80053f4:	46c0      	nop			; (mov r8, r8)
 80053f6:	46bd      	mov	sp, r7
 80053f8:	b004      	add	sp, #16
 80053fa:	bd80      	pop	{r7, pc}
 80053fc:	20000140 	.word	0x20000140
 8005400:	2000019c 	.word	0x2000019c

08005404 <updateClockState>:
 *   button 2 changes value up
 *   button 3 changes value down
 *   button 4 changes field being set. changes between min, hr, year, month, and day. once it finishes cycling through it once,
 *     the clock is updated and we revert back to default mode.
 */
void updateClockState(RTC_HandleTypeDef *hrtc) {
 8005404:	b590      	push	{r4, r7, lr}
 8005406:	b083      	sub	sp, #12
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
	// check button pressed -> perform action
	static int8_t brightness = 50;
	if (buttons.is2Pressed) {
 800540c:	4bb4      	ldr	r3, [pc, #720]	; (80056e0 <updateClockState+0x2dc>)
 800540e:	785b      	ldrb	r3, [r3, #1]
 8005410:	b2db      	uxtb	r3, r3
 8005412:	2b00      	cmp	r3, #0
 8005414:	d100      	bne.n	8005418 <updateClockState+0x14>
 8005416:	e086      	b.n	8005526 <updateClockState+0x122>
		updateFace.clock = 1;
 8005418:	4bb2      	ldr	r3, [pc, #712]	; (80056e4 <updateClockState+0x2e0>)
 800541a:	2201      	movs	r2, #1
 800541c:	701a      	strb	r2, [r3, #0]
		if (clockVars.isBeingSet) {
 800541e:	4bb2      	ldr	r3, [pc, #712]	; (80056e8 <updateClockState+0x2e4>)
 8005420:	781b      	ldrb	r3, [r3, #0]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d05f      	beq.n	80054e6 <updateClockState+0xe2>
			switch (clockVars.fieldBeingSet) {
 8005426:	4bb0      	ldr	r3, [pc, #704]	; (80056e8 <updateClockState+0x2e4>)
 8005428:	785b      	ldrb	r3, [r3, #1]
 800542a:	2b05      	cmp	r3, #5
 800542c:	d900      	bls.n	8005430 <updateClockState+0x2c>
 800542e:	e079      	b.n	8005524 <updateClockState+0x120>
 8005430:	009a      	lsls	r2, r3, #2
 8005432:	4bae      	ldr	r3, [pc, #696]	; (80056ec <updateClockState+0x2e8>)
 8005434:	18d3      	adds	r3, r2, r3
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	469f      	mov	pc, r3
				case 1: clockVars.timeToSet->min = (clockVars.timeToSet->min+1) % 60; break;
 800543a:	4bab      	ldr	r3, [pc, #684]	; (80056e8 <updateClockState+0x2e4>)
 800543c:	689b      	ldr	r3, [r3, #8]
 800543e:	785b      	ldrb	r3, [r3, #1]
 8005440:	3301      	adds	r3, #1
 8005442:	213c      	movs	r1, #60	; 0x3c
 8005444:	0018      	movs	r0, r3
 8005446:	f7fa ffd7 	bl	80003f8 <__aeabi_idivmod>
 800544a:	000b      	movs	r3, r1
 800544c:	001a      	movs	r2, r3
 800544e:	4ba6      	ldr	r3, [pc, #664]	; (80056e8 <updateClockState+0x2e4>)
 8005450:	689b      	ldr	r3, [r3, #8]
 8005452:	b2d2      	uxtb	r2, r2
 8005454:	705a      	strb	r2, [r3, #1]
 8005456:	e066      	b.n	8005526 <updateClockState+0x122>
				case 2: clockVars.timeToSet->hr = (clockVars.timeToSet->hr+1) % 24; break;
 8005458:	4ba3      	ldr	r3, [pc, #652]	; (80056e8 <updateClockState+0x2e4>)
 800545a:	689b      	ldr	r3, [r3, #8]
 800545c:	781b      	ldrb	r3, [r3, #0]
 800545e:	3301      	adds	r3, #1
 8005460:	2118      	movs	r1, #24
 8005462:	0018      	movs	r0, r3
 8005464:	f7fa ffc8 	bl	80003f8 <__aeabi_idivmod>
 8005468:	000b      	movs	r3, r1
 800546a:	001a      	movs	r2, r3
 800546c:	4b9e      	ldr	r3, [pc, #632]	; (80056e8 <updateClockState+0x2e4>)
 800546e:	689b      	ldr	r3, [r3, #8]
 8005470:	b2d2      	uxtb	r2, r2
 8005472:	701a      	strb	r2, [r3, #0]
 8005474:	e057      	b.n	8005526 <updateClockState+0x122>
				case 3: clockVars.dateToSet->yr = (clockVars.dateToSet->yr + 1) % 10000; break;		// fit in 4 characters
 8005476:	4b9c      	ldr	r3, [pc, #624]	; (80056e8 <updateClockState+0x2e4>)
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	881b      	ldrh	r3, [r3, #0]
 800547c:	3301      	adds	r3, #1
 800547e:	499c      	ldr	r1, [pc, #624]	; (80056f0 <updateClockState+0x2ec>)
 8005480:	0018      	movs	r0, r3
 8005482:	f7fa ffb9 	bl	80003f8 <__aeabi_idivmod>
 8005486:	000b      	movs	r3, r1
 8005488:	001a      	movs	r2, r3
 800548a:	4b97      	ldr	r3, [pc, #604]	; (80056e8 <updateClockState+0x2e4>)
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	b292      	uxth	r2, r2
 8005490:	801a      	strh	r2, [r3, #0]
 8005492:	e048      	b.n	8005526 <updateClockState+0x122>
				case 4: clockVars.dateToSet->month = (clockVars.dateToSet->month) % 12 + 1; break;
 8005494:	4b94      	ldr	r3, [pc, #592]	; (80056e8 <updateClockState+0x2e4>)
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	789b      	ldrb	r3, [r3, #2]
 800549a:	210c      	movs	r1, #12
 800549c:	0018      	movs	r0, r3
 800549e:	f7fa fec1 	bl	8000224 <__aeabi_uidivmod>
 80054a2:	000b      	movs	r3, r1
 80054a4:	b2da      	uxtb	r2, r3
 80054a6:	4b90      	ldr	r3, [pc, #576]	; (80056e8 <updateClockState+0x2e4>)
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	3201      	adds	r2, #1
 80054ac:	b2d2      	uxtb	r2, r2
 80054ae:	709a      	strb	r2, [r3, #2]
 80054b0:	e039      	b.n	8005526 <updateClockState+0x122>
				case 5: clockVars.dateToSet->date = ((clockVars.dateToSet->date) % maxDaysInMonth(clockVars.dateToSet->month, clockVars.dateToSet->yr)) + 1; break;
 80054b2:	4b8d      	ldr	r3, [pc, #564]	; (80056e8 <updateClockState+0x2e4>)
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	78dc      	ldrb	r4, [r3, #3]
 80054b8:	4b8b      	ldr	r3, [pc, #556]	; (80056e8 <updateClockState+0x2e4>)
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	789a      	ldrb	r2, [r3, #2]
 80054be:	4b8a      	ldr	r3, [pc, #552]	; (80056e8 <updateClockState+0x2e4>)
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	881b      	ldrh	r3, [r3, #0]
 80054c4:	0019      	movs	r1, r3
 80054c6:	0010      	movs	r0, r2
 80054c8:	f7fe f9b2 	bl	8003830 <maxDaysInMonth>
 80054cc:	0003      	movs	r3, r0
 80054ce:	0019      	movs	r1, r3
 80054d0:	0020      	movs	r0, r4
 80054d2:	f7fa fea7 	bl	8000224 <__aeabi_uidivmod>
 80054d6:	000b      	movs	r3, r1
 80054d8:	b2da      	uxtb	r2, r3
 80054da:	4b83      	ldr	r3, [pc, #524]	; (80056e8 <updateClockState+0x2e4>)
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	3201      	adds	r2, #1
 80054e0:	b2d2      	uxtb	r2, r2
 80054e2:	70da      	strb	r2, [r3, #3]
 80054e4:	e01f      	b.n	8005526 <updateClockState+0x122>
				default: break;
			}
		}
		else {
//			if (brightness < 100) brightness += 10;
			if (brightness == 50) brightness = 10;
 80054e6:	4b83      	ldr	r3, [pc, #524]	; (80056f4 <updateClockState+0x2f0>)
 80054e8:	781b      	ldrb	r3, [r3, #0]
 80054ea:	b25b      	sxtb	r3, r3
 80054ec:	2b32      	cmp	r3, #50	; 0x32
 80054ee:	d103      	bne.n	80054f8 <updateClockState+0xf4>
 80054f0:	4b80      	ldr	r3, [pc, #512]	; (80056f4 <updateClockState+0x2f0>)
 80054f2:	220a      	movs	r2, #10
 80054f4:	701a      	strb	r2, [r3, #0]
 80054f6:	e00b      	b.n	8005510 <updateClockState+0x10c>
			else if (brightness == 10) brightness = 0;
 80054f8:	4b7e      	ldr	r3, [pc, #504]	; (80056f4 <updateClockState+0x2f0>)
 80054fa:	781b      	ldrb	r3, [r3, #0]
 80054fc:	b25b      	sxtb	r3, r3
 80054fe:	2b0a      	cmp	r3, #10
 8005500:	d103      	bne.n	800550a <updateClockState+0x106>
 8005502:	4b7c      	ldr	r3, [pc, #496]	; (80056f4 <updateClockState+0x2f0>)
 8005504:	2200      	movs	r2, #0
 8005506:	701a      	strb	r2, [r3, #0]
 8005508:	e002      	b.n	8005510 <updateClockState+0x10c>
			else brightness = 50;
 800550a:	4b7a      	ldr	r3, [pc, #488]	; (80056f4 <updateClockState+0x2f0>)
 800550c:	2232      	movs	r2, #50	; 0x32
 800550e:	701a      	strb	r2, [r3, #0]
			setDisplayBacklight(brightness, &htim3);
 8005510:	4b78      	ldr	r3, [pc, #480]	; (80056f4 <updateClockState+0x2f0>)
 8005512:	781b      	ldrb	r3, [r3, #0]
 8005514:	b25b      	sxtb	r3, r3
 8005516:	b2db      	uxtb	r3, r3
 8005518:	4a77      	ldr	r2, [pc, #476]	; (80056f8 <updateClockState+0x2f4>)
 800551a:	0011      	movs	r1, r2
 800551c:	0018      	movs	r0, r3
 800551e:	f7ff fd1b 	bl	8004f58 <setDisplayBacklight>
 8005522:	e000      	b.n	8005526 <updateClockState+0x122>
				default: break;
 8005524:	46c0      	nop			; (mov r8, r8)
//			sleepMode();
		}
	}
	// change fields down, do nothing if not setting clock
	if (buttons.is3Pressed) {
 8005526:	4b6e      	ldr	r3, [pc, #440]	; (80056e0 <updateClockState+0x2dc>)
 8005528:	789b      	ldrb	r3, [r3, #2]
 800552a:	b2db      	uxtb	r3, r3
 800552c:	2b00      	cmp	r3, #0
 800552e:	d100      	bne.n	8005532 <updateClockState+0x12e>
 8005530:	e078      	b.n	8005624 <updateClockState+0x220>
		updateFace.clock = 1;
 8005532:	4b6c      	ldr	r3, [pc, #432]	; (80056e4 <updateClockState+0x2e0>)
 8005534:	2201      	movs	r2, #1
 8005536:	701a      	strb	r2, [r3, #0]
		if (clockVars.isBeingSet) {
 8005538:	4b6b      	ldr	r3, [pc, #428]	; (80056e8 <updateClockState+0x2e4>)
 800553a:	781b      	ldrb	r3, [r3, #0]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d062      	beq.n	8005606 <updateClockState+0x202>
			switch (clockVars.fieldBeingSet) {
 8005540:	4b69      	ldr	r3, [pc, #420]	; (80056e8 <updateClockState+0x2e4>)
 8005542:	785b      	ldrb	r3, [r3, #1]
 8005544:	2b05      	cmp	r3, #5
 8005546:	d900      	bls.n	800554a <updateClockState+0x146>
 8005548:	e069      	b.n	800561e <updateClockState+0x21a>
 800554a:	009a      	lsls	r2, r3, #2
 800554c:	4b6b      	ldr	r3, [pc, #428]	; (80056fc <updateClockState+0x2f8>)
 800554e:	18d3      	adds	r3, r2, r3
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	469f      	mov	pc, r3
				case 1:
					if (clockVars.timeToSet->min == 0) clockVars.timeToSet->min = 59;
 8005554:	4b64      	ldr	r3, [pc, #400]	; (80056e8 <updateClockState+0x2e4>)
 8005556:	689b      	ldr	r3, [r3, #8]
 8005558:	785b      	ldrb	r3, [r3, #1]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d104      	bne.n	8005568 <updateClockState+0x164>
 800555e:	4b62      	ldr	r3, [pc, #392]	; (80056e8 <updateClockState+0x2e4>)
 8005560:	689b      	ldr	r3, [r3, #8]
 8005562:	223b      	movs	r2, #59	; 0x3b
 8005564:	705a      	strb	r2, [r3, #1]
					else clockVars.timeToSet->min--;
					break;
 8005566:	e05d      	b.n	8005624 <updateClockState+0x220>
					else clockVars.timeToSet->min--;
 8005568:	4b5f      	ldr	r3, [pc, #380]	; (80056e8 <updateClockState+0x2e4>)
 800556a:	689b      	ldr	r3, [r3, #8]
 800556c:	785a      	ldrb	r2, [r3, #1]
 800556e:	3a01      	subs	r2, #1
 8005570:	b2d2      	uxtb	r2, r2
 8005572:	705a      	strb	r2, [r3, #1]
					break;
 8005574:	e056      	b.n	8005624 <updateClockState+0x220>
				case 2:
					if (clockVars.timeToSet->hr == 0) clockVars.timeToSet->hr = 23;
 8005576:	4b5c      	ldr	r3, [pc, #368]	; (80056e8 <updateClockState+0x2e4>)
 8005578:	689b      	ldr	r3, [r3, #8]
 800557a:	781b      	ldrb	r3, [r3, #0]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d104      	bne.n	800558a <updateClockState+0x186>
 8005580:	4b59      	ldr	r3, [pc, #356]	; (80056e8 <updateClockState+0x2e4>)
 8005582:	689b      	ldr	r3, [r3, #8]
 8005584:	2217      	movs	r2, #23
 8005586:	701a      	strb	r2, [r3, #0]
					else clockVars.timeToSet->hr--;
					break;
 8005588:	e04c      	b.n	8005624 <updateClockState+0x220>
					else clockVars.timeToSet->hr--;
 800558a:	4b57      	ldr	r3, [pc, #348]	; (80056e8 <updateClockState+0x2e4>)
 800558c:	689b      	ldr	r3, [r3, #8]
 800558e:	781a      	ldrb	r2, [r3, #0]
 8005590:	3a01      	subs	r2, #1
 8005592:	b2d2      	uxtb	r2, r2
 8005594:	701a      	strb	r2, [r3, #0]
					break;
 8005596:	e045      	b.n	8005624 <updateClockState+0x220>
				case 3: if (clockVars.dateToSet->yr != 0) clockVars.dateToSet->yr--; break;		// limit to positive numbers. no wrap-around
 8005598:	4b53      	ldr	r3, [pc, #332]	; (80056e8 <updateClockState+0x2e4>)
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	881b      	ldrh	r3, [r3, #0]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d03f      	beq.n	8005622 <updateClockState+0x21e>
 80055a2:	4b51      	ldr	r3, [pc, #324]	; (80056e8 <updateClockState+0x2e4>)
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	881a      	ldrh	r2, [r3, #0]
 80055a8:	3a01      	subs	r2, #1
 80055aa:	b292      	uxth	r2, r2
 80055ac:	801a      	strh	r2, [r3, #0]
 80055ae:	e038      	b.n	8005622 <updateClockState+0x21e>
				case 4: //clockVars.dateToSet->month = clockVars.dateToSet->month == 1 ? 12 : clockVars.dateToSet->month-1; break;
					if (clockVars.dateToSet->month == 1) clockVars.dateToSet->month = 12;
 80055b0:	4b4d      	ldr	r3, [pc, #308]	; (80056e8 <updateClockState+0x2e4>)
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	789b      	ldrb	r3, [r3, #2]
 80055b6:	2b01      	cmp	r3, #1
 80055b8:	d104      	bne.n	80055c4 <updateClockState+0x1c0>
 80055ba:	4b4b      	ldr	r3, [pc, #300]	; (80056e8 <updateClockState+0x2e4>)
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	220c      	movs	r2, #12
 80055c0:	709a      	strb	r2, [r3, #2]
					else clockVars.dateToSet->month--;
					break;
 80055c2:	e02f      	b.n	8005624 <updateClockState+0x220>
					else clockVars.dateToSet->month--;
 80055c4:	4b48      	ldr	r3, [pc, #288]	; (80056e8 <updateClockState+0x2e4>)
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	789a      	ldrb	r2, [r3, #2]
 80055ca:	3a01      	subs	r2, #1
 80055cc:	b2d2      	uxtb	r2, r2
 80055ce:	709a      	strb	r2, [r3, #2]
					break;
 80055d0:	e028      	b.n	8005624 <updateClockState+0x220>
				case 5:
					if (clockVars.dateToSet->date == 1) clockVars.dateToSet->date = maxDaysInMonth(clockVars.dateToSet->month, clockVars.dateToSet->yr);
 80055d2:	4b45      	ldr	r3, [pc, #276]	; (80056e8 <updateClockState+0x2e4>)
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	78db      	ldrb	r3, [r3, #3]
 80055d8:	2b01      	cmp	r3, #1
 80055da:	d10d      	bne.n	80055f8 <updateClockState+0x1f4>
 80055dc:	4b42      	ldr	r3, [pc, #264]	; (80056e8 <updateClockState+0x2e4>)
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	789a      	ldrb	r2, [r3, #2]
 80055e2:	4b41      	ldr	r3, [pc, #260]	; (80056e8 <updateClockState+0x2e4>)
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	8819      	ldrh	r1, [r3, #0]
 80055e8:	4b3f      	ldr	r3, [pc, #252]	; (80056e8 <updateClockState+0x2e4>)
 80055ea:	685c      	ldr	r4, [r3, #4]
 80055ec:	0010      	movs	r0, r2
 80055ee:	f7fe f91f 	bl	8003830 <maxDaysInMonth>
 80055f2:	0003      	movs	r3, r0
 80055f4:	70e3      	strb	r3, [r4, #3]
					else clockVars.dateToSet->date--;
					break;
 80055f6:	e015      	b.n	8005624 <updateClockState+0x220>
					else clockVars.dateToSet->date--;
 80055f8:	4b3b      	ldr	r3, [pc, #236]	; (80056e8 <updateClockState+0x2e4>)
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	78da      	ldrb	r2, [r3, #3]
 80055fe:	3a01      	subs	r2, #1
 8005600:	b2d2      	uxtb	r2, r2
 8005602:	70da      	strb	r2, [r3, #3]
					break;
 8005604:	e00e      	b.n	8005624 <updateClockState+0x220>
			}
		}
		else {
//			if (brightness > 0) brightness -= 10;
//			setDisplayBacklight(brightness, &htim3);
			stopMode();
 8005606:	f7fe f97d 	bl	8003904 <stopMode>
			setDisplayBacklight(brightness, &htim3);
 800560a:	4b3a      	ldr	r3, [pc, #232]	; (80056f4 <updateClockState+0x2f0>)
 800560c:	781b      	ldrb	r3, [r3, #0]
 800560e:	b25b      	sxtb	r3, r3
 8005610:	b2db      	uxtb	r3, r3
 8005612:	4a39      	ldr	r2, [pc, #228]	; (80056f8 <updateClockState+0x2f4>)
 8005614:	0011      	movs	r1, r2
 8005616:	0018      	movs	r0, r3
 8005618:	f7ff fc9e 	bl	8004f58 <setDisplayBacklight>
 800561c:	e002      	b.n	8005624 <updateClockState+0x220>
				default: break;
 800561e:	46c0      	nop			; (mov r8, r8)
 8005620:	e000      	b.n	8005624 <updateClockState+0x220>
				case 3: if (clockVars.dateToSet->yr != 0) clockVars.dateToSet->yr--; break;		// limit to positive numbers. no wrap-around
 8005622:	46c0      	nop			; (mov r8, r8)
		}
	}
	// switches between setting mode and default mode. changes between different clock fields
	if (buttons.is4Pressed) {
 8005624:	4b2e      	ldr	r3, [pc, #184]	; (80056e0 <updateClockState+0x2dc>)
 8005626:	78db      	ldrb	r3, [r3, #3]
 8005628:	b2db      	uxtb	r3, r3
 800562a:	2b00      	cmp	r3, #0
 800562c:	d054      	beq.n	80056d8 <updateClockState+0x2d4>
		updateFace.clock = 1;
 800562e:	4b2d      	ldr	r3, [pc, #180]	; (80056e4 <updateClockState+0x2e0>)
 8005630:	2201      	movs	r2, #1
 8005632:	701a      	strb	r2, [r3, #0]
		clockVars.fieldBeingSet = (clockVars.fieldBeingSet + 1) % (NUM_CLOCKFIELDS + 1);
 8005634:	4b2c      	ldr	r3, [pc, #176]	; (80056e8 <updateClockState+0x2e4>)
 8005636:	785b      	ldrb	r3, [r3, #1]
 8005638:	3301      	adds	r3, #1
 800563a:	2106      	movs	r1, #6
 800563c:	0018      	movs	r0, r3
 800563e:	f7fa fedb 	bl	80003f8 <__aeabi_idivmod>
 8005642:	000b      	movs	r3, r1
 8005644:	b2da      	uxtb	r2, r3
 8005646:	4b28      	ldr	r3, [pc, #160]	; (80056e8 <updateClockState+0x2e4>)
 8005648:	705a      	strb	r2, [r3, #1]
		if (clockVars.fieldBeingSet != 0) {
 800564a:	4b27      	ldr	r3, [pc, #156]	; (80056e8 <updateClockState+0x2e4>)
 800564c:	785b      	ldrb	r3, [r3, #1]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d033      	beq.n	80056ba <updateClockState+0x2b6>
			clockVars.isBeingSet = 1;
 8005652:	4b25      	ldr	r3, [pc, #148]	; (80056e8 <updateClockState+0x2e4>)
 8005654:	2201      	movs	r2, #1
 8005656:	701a      	strb	r2, [r3, #0]

			// should pull current time when first entering setting mode
			if (clockVars.fieldBeingSet == 1) {
 8005658:	4b23      	ldr	r3, [pc, #140]	; (80056e8 <updateClockState+0x2e4>)
 800565a:	785b      	ldrb	r3, [r3, #1]
 800565c:	2b01      	cmp	r3, #1
 800565e:	d10e      	bne.n	800567e <updateClockState+0x27a>
				getDateTime(clockVars.dateToSet, clockVars.timeToSet, hrtc);
 8005660:	4b21      	ldr	r3, [pc, #132]	; (80056e8 <updateClockState+0x2e4>)
 8005662:	6858      	ldr	r0, [r3, #4]
 8005664:	4b20      	ldr	r3, [pc, #128]	; (80056e8 <updateClockState+0x2e4>)
 8005666:	689b      	ldr	r3, [r3, #8]
 8005668:	687a      	ldr	r2, [r7, #4]
 800566a:	0019      	movs	r1, r3
 800566c:	f7fd ff9e 	bl	80035ac <getDateTime>
				HAL_RTC_DeactivateAlarm(hrtc, RTC_ALARM_B);
 8005670:	2380      	movs	r3, #128	; 0x80
 8005672:	009a      	lsls	r2, r3, #2
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	0011      	movs	r1, r2
 8005678:	0018      	movs	r0, r3
 800567a:	f004 f9fd 	bl	8009a78 <HAL_RTC_DeactivateAlarm>
			}

			if (clockVars.dateToSet->date > maxDaysInMonth(clockVars.dateToSet->month, clockVars.dateToSet->yr)) {
 800567e:	4b1a      	ldr	r3, [pc, #104]	; (80056e8 <updateClockState+0x2e4>)
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	78dc      	ldrb	r4, [r3, #3]
 8005684:	4b18      	ldr	r3, [pc, #96]	; (80056e8 <updateClockState+0x2e4>)
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	789a      	ldrb	r2, [r3, #2]
 800568a:	4b17      	ldr	r3, [pc, #92]	; (80056e8 <updateClockState+0x2e4>)
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	881b      	ldrh	r3, [r3, #0]
 8005690:	0019      	movs	r1, r3
 8005692:	0010      	movs	r0, r2
 8005694:	f7fe f8cc 	bl	8003830 <maxDaysInMonth>
 8005698:	0003      	movs	r3, r0
 800569a:	429c      	cmp	r4, r3
 800569c:	d91c      	bls.n	80056d8 <updateClockState+0x2d4>
				clockVars.dateToSet->date = maxDaysInMonth(clockVars.dateToSet->month, clockVars.dateToSet->yr);
 800569e:	4b12      	ldr	r3, [pc, #72]	; (80056e8 <updateClockState+0x2e4>)
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	789a      	ldrb	r2, [r3, #2]
 80056a4:	4b10      	ldr	r3, [pc, #64]	; (80056e8 <updateClockState+0x2e4>)
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	8819      	ldrh	r1, [r3, #0]
 80056aa:	4b0f      	ldr	r3, [pc, #60]	; (80056e8 <updateClockState+0x2e4>)
 80056ac:	685c      	ldr	r4, [r3, #4]
 80056ae:	0010      	movs	r0, r2
 80056b0:	f7fe f8be 	bl	8003830 <maxDaysInMonth>
 80056b4:	0003      	movs	r3, r0
 80056b6:	70e3      	strb	r3, [r4, #3]
			// second set to 0, weekday ignored
			setDateTime(clockVars.dateToSet, clockVars.timeToSet, hrtc);
			setClockAlarm(hrtc);
		}
	}
}
 80056b8:	e00e      	b.n	80056d8 <updateClockState+0x2d4>
			clockVars.isBeingSet = 0;
 80056ba:	4b0b      	ldr	r3, [pc, #44]	; (80056e8 <updateClockState+0x2e4>)
 80056bc:	2200      	movs	r2, #0
 80056be:	701a      	strb	r2, [r3, #0]
			setDateTime(clockVars.dateToSet, clockVars.timeToSet, hrtc);
 80056c0:	4b09      	ldr	r3, [pc, #36]	; (80056e8 <updateClockState+0x2e4>)
 80056c2:	6858      	ldr	r0, [r3, #4]
 80056c4:	4b08      	ldr	r3, [pc, #32]	; (80056e8 <updateClockState+0x2e4>)
 80056c6:	689b      	ldr	r3, [r3, #8]
 80056c8:	687a      	ldr	r2, [r7, #4]
 80056ca:	0019      	movs	r1, r3
 80056cc:	f7fd fd2e 	bl	800312c <setDateTime>
			setClockAlarm(hrtc);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	0018      	movs	r0, r3
 80056d4:	f7fd fd96 	bl	8003204 <setClockAlarm>
}
 80056d8:	46c0      	nop			; (mov r8, r8)
 80056da:	46bd      	mov	sp, r7
 80056dc:	b003      	add	sp, #12
 80056de:	bd90      	pop	{r4, r7, pc}
 80056e0:	2000019c 	.word	0x2000019c
 80056e4:	20000150 	.word	0x20000150
 80056e8:	2000011c 	.word	0x2000011c
 80056ec:	0800cdac 	.word	0x0800cdac
 80056f0:	00002710 	.word	0x00002710
 80056f4:	20000069 	.word	0x20000069
 80056f8:	20000200 	.word	0x20000200
 80056fc:	0800cdc4 	.word	0x0800cdc4

08005700 <updateTimerState>:
 *   button 2 changes value up
 *   button 3 changes value down
 *   button 4 changes field being set. changes between sec, min, hr. returns to default mode after
 *     cycling through fields once.
 */
void updateTimerState(TIM_HandleTypeDef *timerStopwatchTim, TIM_HandleTypeDef *motorTim) {
 8005700:	b580      	push	{r7, lr}
 8005702:	b082      	sub	sp, #8
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
 8005708:	6039      	str	r1, [r7, #0]
	// check which button is pressed -> perform action
	if (buttons.is2Pressed) {
 800570a:	4b93      	ldr	r3, [pc, #588]	; (8005958 <updateTimerState+0x258>)
 800570c:	785b      	ldrb	r3, [r3, #1]
 800570e:	b2db      	uxtb	r3, r3
 8005710:	2b00      	cmp	r3, #0
 8005712:	d057      	beq.n	80057c4 <updateTimerState+0xc4>
		updateFace.timer = 1;
 8005714:	4b91      	ldr	r3, [pc, #580]	; (800595c <updateTimerState+0x25c>)
 8005716:	2201      	movs	r2, #1
 8005718:	705a      	strb	r2, [r3, #1]
		if (timerVars.isBeingSet) {
 800571a:	4b91      	ldr	r3, [pc, #580]	; (8005960 <updateTimerState+0x260>)
 800571c:	781b      	ldrb	r3, [r3, #0]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d035      	beq.n	800578e <updateTimerState+0x8e>
			// set field up
			switch (timerVars.fieldBeingSet) {
 8005722:	4b8f      	ldr	r3, [pc, #572]	; (8005960 <updateTimerState+0x260>)
 8005724:	785b      	ldrb	r3, [r3, #1]
 8005726:	2b02      	cmp	r3, #2
 8005728:	d013      	beq.n	8005752 <updateTimerState+0x52>
 800572a:	2b03      	cmp	r3, #3
 800572c:	d020      	beq.n	8005770 <updateTimerState+0x70>
 800572e:	2b01      	cmp	r3, #1
 8005730:	d000      	beq.n	8005734 <updateTimerState+0x34>
				case 1: timerVars.timeToSet->sec = (timerVars.timeToSet->sec+1) % 60; break;
				case 2: timerVars.timeToSet->min = (timerVars.timeToSet->min+1) % 60; break;
				case 3: timerVars.timeToSet->hr = (timerVars.timeToSet->hr+1) % 100; break;
				default: break;
 8005732:	e10d      	b.n	8005950 <updateTimerState+0x250>
				case 1: timerVars.timeToSet->sec = (timerVars.timeToSet->sec+1) % 60; break;
 8005734:	4b8a      	ldr	r3, [pc, #552]	; (8005960 <updateTimerState+0x260>)
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	789b      	ldrb	r3, [r3, #2]
 800573a:	3301      	adds	r3, #1
 800573c:	213c      	movs	r1, #60	; 0x3c
 800573e:	0018      	movs	r0, r3
 8005740:	f7fa fe5a 	bl	80003f8 <__aeabi_idivmod>
 8005744:	000b      	movs	r3, r1
 8005746:	001a      	movs	r2, r3
 8005748:	4b85      	ldr	r3, [pc, #532]	; (8005960 <updateTimerState+0x260>)
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	b2d2      	uxtb	r2, r2
 800574e:	709a      	strb	r2, [r3, #2]
 8005750:	e0fe      	b.n	8005950 <updateTimerState+0x250>
				case 2: timerVars.timeToSet->min = (timerVars.timeToSet->min+1) % 60; break;
 8005752:	4b83      	ldr	r3, [pc, #524]	; (8005960 <updateTimerState+0x260>)
 8005754:	685b      	ldr	r3, [r3, #4]
 8005756:	785b      	ldrb	r3, [r3, #1]
 8005758:	3301      	adds	r3, #1
 800575a:	213c      	movs	r1, #60	; 0x3c
 800575c:	0018      	movs	r0, r3
 800575e:	f7fa fe4b 	bl	80003f8 <__aeabi_idivmod>
 8005762:	000b      	movs	r3, r1
 8005764:	001a      	movs	r2, r3
 8005766:	4b7e      	ldr	r3, [pc, #504]	; (8005960 <updateTimerState+0x260>)
 8005768:	685b      	ldr	r3, [r3, #4]
 800576a:	b2d2      	uxtb	r2, r2
 800576c:	705a      	strb	r2, [r3, #1]
 800576e:	e0ef      	b.n	8005950 <updateTimerState+0x250>
				case 3: timerVars.timeToSet->hr = (timerVars.timeToSet->hr+1) % 100; break;
 8005770:	4b7b      	ldr	r3, [pc, #492]	; (8005960 <updateTimerState+0x260>)
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	781b      	ldrb	r3, [r3, #0]
 8005776:	3301      	adds	r3, #1
 8005778:	2164      	movs	r1, #100	; 0x64
 800577a:	0018      	movs	r0, r3
 800577c:	f7fa fe3c 	bl	80003f8 <__aeabi_idivmod>
 8005780:	000b      	movs	r3, r1
 8005782:	001a      	movs	r2, r3
 8005784:	4b76      	ldr	r3, [pc, #472]	; (8005960 <updateTimerState+0x260>)
 8005786:	685b      	ldr	r3, [r3, #4]
 8005788:	b2d2      	uxtb	r2, r2
 800578a:	701a      	strb	r2, [r3, #0]
 800578c:	e0e0      	b.n	8005950 <updateTimerState+0x250>
			}
		}
		else if (timerVars.isSet && isTimerRunning == 0 && timerCounter != 0) {
 800578e:	4b74      	ldr	r3, [pc, #464]	; (8005960 <updateTimerState+0x260>)
 8005790:	789b      	ldrb	r3, [r3, #2]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d100      	bne.n	8005798 <updateTimerState+0x98>
 8005796:	e0db      	b.n	8005950 <updateTimerState+0x250>
 8005798:	4b72      	ldr	r3, [pc, #456]	; (8005964 <updateTimerState+0x264>)
 800579a:	781b      	ldrb	r3, [r3, #0]
 800579c:	b2db      	uxtb	r3, r3
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d000      	beq.n	80057a4 <updateTimerState+0xa4>
 80057a2:	e0d5      	b.n	8005950 <updateTimerState+0x250>
 80057a4:	4b70      	ldr	r3, [pc, #448]	; (8005968 <updateTimerState+0x268>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d100      	bne.n	80057ae <updateTimerState+0xae>
 80057ac:	e0d0      	b.n	8005950 <updateTimerState+0x250>
			// start timer
			runTimer(timerStopwatchTim);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	0018      	movs	r0, r3
 80057b2:	f7ff fa4d 	bl	8004c50 <runTimer>
			isTimerRunning = 1;
 80057b6:	4b6b      	ldr	r3, [pc, #428]	; (8005964 <updateTimerState+0x264>)
 80057b8:	2201      	movs	r2, #1
 80057ba:	701a      	strb	r2, [r3, #0]
			isTimerPaused = 0;
 80057bc:	4b6b      	ldr	r3, [pc, #428]	; (800596c <updateTimerState+0x26c>)
 80057be:	2200      	movs	r2, #0
 80057c0:	701a      	strb	r2, [r3, #0]
				timerVars.isBeingSet = 0;
				timerVars.isSet = 0;
			}
		}
	}
}
 80057c2:	e0c5      	b.n	8005950 <updateTimerState+0x250>
	else if (buttons.is3Pressed) {
 80057c4:	4b64      	ldr	r3, [pc, #400]	; (8005958 <updateTimerState+0x258>)
 80057c6:	789b      	ldrb	r3, [r3, #2]
 80057c8:	b2db      	uxtb	r3, r3
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d05d      	beq.n	800588a <updateTimerState+0x18a>
		updateFace.timer = 1;
 80057ce:	4b63      	ldr	r3, [pc, #396]	; (800595c <updateTimerState+0x25c>)
 80057d0:	2201      	movs	r2, #1
 80057d2:	705a      	strb	r2, [r3, #1]
		if (timerVars.isBeingSet) {
 80057d4:	4b62      	ldr	r3, [pc, #392]	; (8005960 <updateTimerState+0x260>)
 80057d6:	781b      	ldrb	r3, [r3, #0]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d03b      	beq.n	8005854 <updateTimerState+0x154>
			switch (timerVars.fieldBeingSet) {
 80057dc:	4b60      	ldr	r3, [pc, #384]	; (8005960 <updateTimerState+0x260>)
 80057de:	785b      	ldrb	r3, [r3, #1]
 80057e0:	2b02      	cmp	r3, #2
 80057e2:	d015      	beq.n	8005810 <updateTimerState+0x110>
 80057e4:	2b03      	cmp	r3, #3
 80057e6:	d024      	beq.n	8005832 <updateTimerState+0x132>
 80057e8:	2b01      	cmp	r3, #1
 80057ea:	d000      	beq.n	80057ee <updateTimerState+0xee>
				default: break;
 80057ec:	e0b0      	b.n	8005950 <updateTimerState+0x250>
					if (timerVars.timeToSet->sec == 0) timerVars.timeToSet->sec = 59;
 80057ee:	4b5c      	ldr	r3, [pc, #368]	; (8005960 <updateTimerState+0x260>)
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	789b      	ldrb	r3, [r3, #2]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d104      	bne.n	8005802 <updateTimerState+0x102>
 80057f8:	4b59      	ldr	r3, [pc, #356]	; (8005960 <updateTimerState+0x260>)
 80057fa:	685b      	ldr	r3, [r3, #4]
 80057fc:	223b      	movs	r2, #59	; 0x3b
 80057fe:	709a      	strb	r2, [r3, #2]
					break;
 8005800:	e0a6      	b.n	8005950 <updateTimerState+0x250>
					else timerVars.timeToSet->sec--;
 8005802:	4b57      	ldr	r3, [pc, #348]	; (8005960 <updateTimerState+0x260>)
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	789a      	ldrb	r2, [r3, #2]
 8005808:	3a01      	subs	r2, #1
 800580a:	b2d2      	uxtb	r2, r2
 800580c:	709a      	strb	r2, [r3, #2]
					break;
 800580e:	e09f      	b.n	8005950 <updateTimerState+0x250>
					if (timerVars.timeToSet->min == 0) timerVars.timeToSet->min = 59;
 8005810:	4b53      	ldr	r3, [pc, #332]	; (8005960 <updateTimerState+0x260>)
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	785b      	ldrb	r3, [r3, #1]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d104      	bne.n	8005824 <updateTimerState+0x124>
 800581a:	4b51      	ldr	r3, [pc, #324]	; (8005960 <updateTimerState+0x260>)
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	223b      	movs	r2, #59	; 0x3b
 8005820:	705a      	strb	r2, [r3, #1]
					break;
 8005822:	e095      	b.n	8005950 <updateTimerState+0x250>
					else timerVars.timeToSet->min--;
 8005824:	4b4e      	ldr	r3, [pc, #312]	; (8005960 <updateTimerState+0x260>)
 8005826:	685b      	ldr	r3, [r3, #4]
 8005828:	785a      	ldrb	r2, [r3, #1]
 800582a:	3a01      	subs	r2, #1
 800582c:	b2d2      	uxtb	r2, r2
 800582e:	705a      	strb	r2, [r3, #1]
					break;
 8005830:	e08e      	b.n	8005950 <updateTimerState+0x250>
					if (timerVars.timeToSet->hr == 0) timerVars.timeToSet->hr = 99;		// no limit on hour, since we're not using day
 8005832:	4b4b      	ldr	r3, [pc, #300]	; (8005960 <updateTimerState+0x260>)
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	781b      	ldrb	r3, [r3, #0]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d104      	bne.n	8005846 <updateTimerState+0x146>
 800583c:	4b48      	ldr	r3, [pc, #288]	; (8005960 <updateTimerState+0x260>)
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	2263      	movs	r2, #99	; 0x63
 8005842:	701a      	strb	r2, [r3, #0]
					break;
 8005844:	e084      	b.n	8005950 <updateTimerState+0x250>
					else timerVars.timeToSet->hr--;
 8005846:	4b46      	ldr	r3, [pc, #280]	; (8005960 <updateTimerState+0x260>)
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	781a      	ldrb	r2, [r3, #0]
 800584c:	3a01      	subs	r2, #1
 800584e:	b2d2      	uxtb	r2, r2
 8005850:	701a      	strb	r2, [r3, #0]
					break;
 8005852:	e07d      	b.n	8005950 <updateTimerState+0x250>
		else if (timerVars.isSet && isTimerRunning && timerCounter != 0) {
 8005854:	4b42      	ldr	r3, [pc, #264]	; (8005960 <updateTimerState+0x260>)
 8005856:	789b      	ldrb	r3, [r3, #2]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d100      	bne.n	800585e <updateTimerState+0x15e>
 800585c:	e078      	b.n	8005950 <updateTimerState+0x250>
 800585e:	4b41      	ldr	r3, [pc, #260]	; (8005964 <updateTimerState+0x264>)
 8005860:	781b      	ldrb	r3, [r3, #0]
 8005862:	b2db      	uxtb	r3, r3
 8005864:	2b00      	cmp	r3, #0
 8005866:	d100      	bne.n	800586a <updateTimerState+0x16a>
 8005868:	e072      	b.n	8005950 <updateTimerState+0x250>
 800586a:	4b3f      	ldr	r3, [pc, #252]	; (8005968 <updateTimerState+0x268>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d100      	bne.n	8005874 <updateTimerState+0x174>
 8005872:	e06d      	b.n	8005950 <updateTimerState+0x250>
			pauseTimer(timerStopwatchTim);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	0018      	movs	r0, r3
 8005878:	f7ff fa48 	bl	8004d0c <pauseTimer>
			isTimerRunning = 0;
 800587c:	4b39      	ldr	r3, [pc, #228]	; (8005964 <updateTimerState+0x264>)
 800587e:	2200      	movs	r2, #0
 8005880:	701a      	strb	r2, [r3, #0]
			isTimerPaused = 1;
 8005882:	4b3a      	ldr	r3, [pc, #232]	; (800596c <updateTimerState+0x26c>)
 8005884:	2201      	movs	r2, #1
 8005886:	701a      	strb	r2, [r3, #0]
}
 8005888:	e062      	b.n	8005950 <updateTimerState+0x250>
	else if (buttons.is4Pressed) {
 800588a:	4b33      	ldr	r3, [pc, #204]	; (8005958 <updateTimerState+0x258>)
 800588c:	78db      	ldrb	r3, [r3, #3]
 800588e:	b2db      	uxtb	r3, r3
 8005890:	2b00      	cmp	r3, #0
 8005892:	d05d      	beq.n	8005950 <updateTimerState+0x250>
		updateFace.timer = 1;
 8005894:	4b31      	ldr	r3, [pc, #196]	; (800595c <updateTimerState+0x25c>)
 8005896:	2201      	movs	r2, #1
 8005898:	705a      	strb	r2, [r3, #1]
		if (timerVars.isSet) {
 800589a:	4b31      	ldr	r3, [pc, #196]	; (8005960 <updateTimerState+0x260>)
 800589c:	789b      	ldrb	r3, [r3, #2]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d00d      	beq.n	80058be <updateTimerState+0x1be>
			stopTimer(timerStopwatchTim);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	0018      	movs	r0, r3
 80058a6:	f7ff fa47 	bl	8004d38 <stopTimer>
			timerVars.isSet = 0;
 80058aa:	4b2d      	ldr	r3, [pc, #180]	; (8005960 <updateTimerState+0x260>)
 80058ac:	2200      	movs	r2, #0
 80058ae:	709a      	strb	r2, [r3, #2]
			isTimerRunning = 0;
 80058b0:	4b2c      	ldr	r3, [pc, #176]	; (8005964 <updateTimerState+0x264>)
 80058b2:	2200      	movs	r2, #0
 80058b4:	701a      	strb	r2, [r3, #0]
			isTimerPaused = 0;
 80058b6:	4b2d      	ldr	r3, [pc, #180]	; (800596c <updateTimerState+0x26c>)
 80058b8:	2200      	movs	r2, #0
 80058ba:	701a      	strb	r2, [r3, #0]
}
 80058bc:	e048      	b.n	8005950 <updateTimerState+0x250>
			timerVars.fieldBeingSet = (timerVars.fieldBeingSet + 1) % (NUM_TIMERFIELDS + 1);
 80058be:	4b28      	ldr	r3, [pc, #160]	; (8005960 <updateTimerState+0x260>)
 80058c0:	785b      	ldrb	r3, [r3, #1]
 80058c2:	3301      	adds	r3, #1
 80058c4:	4a2a      	ldr	r2, [pc, #168]	; (8005970 <updateTimerState+0x270>)
 80058c6:	4013      	ands	r3, r2
 80058c8:	d504      	bpl.n	80058d4 <updateTimerState+0x1d4>
 80058ca:	3b01      	subs	r3, #1
 80058cc:	2204      	movs	r2, #4
 80058ce:	4252      	negs	r2, r2
 80058d0:	4313      	orrs	r3, r2
 80058d2:	3301      	adds	r3, #1
 80058d4:	b2da      	uxtb	r2, r3
 80058d6:	4b22      	ldr	r3, [pc, #136]	; (8005960 <updateTimerState+0x260>)
 80058d8:	705a      	strb	r2, [r3, #1]
			if (timerVars.fieldBeingSet != 0) {
 80058da:	4b21      	ldr	r3, [pc, #132]	; (8005960 <updateTimerState+0x260>)
 80058dc:	785b      	ldrb	r3, [r3, #1]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d016      	beq.n	8005910 <updateTimerState+0x210>
				timerVars.isBeingSet = 1;
 80058e2:	4b1f      	ldr	r3, [pc, #124]	; (8005960 <updateTimerState+0x260>)
 80058e4:	2201      	movs	r2, #1
 80058e6:	701a      	strb	r2, [r3, #0]
				timerVars.isSet = 0;
 80058e8:	4b1d      	ldr	r3, [pc, #116]	; (8005960 <updateTimerState+0x260>)
 80058ea:	2200      	movs	r2, #0
 80058ec:	709a      	strb	r2, [r3, #2]
				if (timerVars.fieldBeingSet == 1) {
 80058ee:	4b1c      	ldr	r3, [pc, #112]	; (8005960 <updateTimerState+0x260>)
 80058f0:	785b      	ldrb	r3, [r3, #1]
 80058f2:	2b01      	cmp	r3, #1
 80058f4:	d12c      	bne.n	8005950 <updateTimerState+0x250>
					timerVars.timeToSet->sec = 0;
 80058f6:	4b1a      	ldr	r3, [pc, #104]	; (8005960 <updateTimerState+0x260>)
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	2200      	movs	r2, #0
 80058fc:	709a      	strb	r2, [r3, #2]
					timerVars.timeToSet->min = 0;
 80058fe:	4b18      	ldr	r3, [pc, #96]	; (8005960 <updateTimerState+0x260>)
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	2200      	movs	r2, #0
 8005904:	705a      	strb	r2, [r3, #1]
					timerVars.timeToSet->hr = 0;
 8005906:	4b16      	ldr	r3, [pc, #88]	; (8005960 <updateTimerState+0x260>)
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	2200      	movs	r2, #0
 800590c:	701a      	strb	r2, [r3, #0]
}
 800590e:	e01f      	b.n	8005950 <updateTimerState+0x250>
			else if (timeToSeconds(timerVars.timeToSet) != 0) {
 8005910:	4b13      	ldr	r3, [pc, #76]	; (8005960 <updateTimerState+0x260>)
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	0018      	movs	r0, r3
 8005916:	f7fd fee9 	bl	80036ec <timeToSeconds>
 800591a:	1e03      	subs	r3, r0, #0
 800591c:	d011      	beq.n	8005942 <updateTimerState+0x242>
				timerVars.isBeingSet = 0;
 800591e:	4b10      	ldr	r3, [pc, #64]	; (8005960 <updateTimerState+0x260>)
 8005920:	2200      	movs	r2, #0
 8005922:	701a      	strb	r2, [r3, #0]
				timerVars.isSet = 1;
 8005924:	4b0e      	ldr	r3, [pc, #56]	; (8005960 <updateTimerState+0x260>)
 8005926:	2201      	movs	r2, #1
 8005928:	709a      	strb	r2, [r3, #2]
				isTimerDone = 0;
 800592a:	4b12      	ldr	r3, [pc, #72]	; (8005974 <updateTimerState+0x274>)
 800592c:	2200      	movs	r2, #0
 800592e:	701a      	strb	r2, [r3, #0]
				timerCounter = timeToSeconds(timerVars.timeToSet);
 8005930:	4b0b      	ldr	r3, [pc, #44]	; (8005960 <updateTimerState+0x260>)
 8005932:	685b      	ldr	r3, [r3, #4]
 8005934:	0018      	movs	r0, r3
 8005936:	f7fd fed9 	bl	80036ec <timeToSeconds>
 800593a:	0002      	movs	r2, r0
 800593c:	4b0a      	ldr	r3, [pc, #40]	; (8005968 <updateTimerState+0x268>)
 800593e:	601a      	str	r2, [r3, #0]
}
 8005940:	e006      	b.n	8005950 <updateTimerState+0x250>
				timerVars.isBeingSet = 0;
 8005942:	4b07      	ldr	r3, [pc, #28]	; (8005960 <updateTimerState+0x260>)
 8005944:	2200      	movs	r2, #0
 8005946:	701a      	strb	r2, [r3, #0]
				timerVars.isSet = 0;
 8005948:	4b05      	ldr	r3, [pc, #20]	; (8005960 <updateTimerState+0x260>)
 800594a:	2200      	movs	r2, #0
 800594c:	709a      	strb	r2, [r3, #2]
}
 800594e:	e7ff      	b.n	8005950 <updateTimerState+0x250>
 8005950:	46c0      	nop			; (mov r8, r8)
 8005952:	46bd      	mov	sp, r7
 8005954:	b002      	add	sp, #8
 8005956:	bd80      	pop	{r7, pc}
 8005958:	2000019c 	.word	0x2000019c
 800595c:	20000150 	.word	0x20000150
 8005960:	20000128 	.word	0x20000128
 8005964:	200001a0 	.word	0x200001a0
 8005968:	20000158 	.word	0x20000158
 800596c:	200001a2 	.word	0x200001a2
 8005970:	80000003 	.word	0x80000003
 8005974:	2000015c 	.word	0x2000015c

08005978 <updateAlarmState>:
 *   button 2 changes value up
 *   button 3 changes value down
 *   button 4 changes field being set. changes between sec, min, hr. returns to default mode after
 *     cycling through fields once.
 */
void updateAlarmState(RTC_HandleTypeDef *hrtc, TIM_HandleTypeDef *motorTim) {
 8005978:	b5b0      	push	{r4, r5, r7, lr}
 800597a:	b086      	sub	sp, #24
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
 8005980:	6039      	str	r1, [r7, #0]
	// check button pressed -> perform action
	if (buttons.is2Pressed && alarmVars.isBeingSet) {
 8005982:	4b90      	ldr	r3, [pc, #576]	; (8005bc4 <updateAlarmState+0x24c>)
 8005984:	785b      	ldrb	r3, [r3, #1]
 8005986:	b2db      	uxtb	r3, r3
 8005988:	2b00      	cmp	r3, #0
 800598a:	d04f      	beq.n	8005a2c <updateAlarmState+0xb4>
 800598c:	4b8e      	ldr	r3, [pc, #568]	; (8005bc8 <updateAlarmState+0x250>)
 800598e:	781b      	ldrb	r3, [r3, #0]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d04b      	beq.n	8005a2c <updateAlarmState+0xb4>
		updateFace.alarm = 1;
 8005994:	4b8d      	ldr	r3, [pc, #564]	; (8005bcc <updateAlarmState+0x254>)
 8005996:	2201      	movs	r2, #1
 8005998:	709a      	strb	r2, [r3, #2]

		// change fields up
		switch (alarmVars.fieldBeingSet) {
 800599a:	4b8b      	ldr	r3, [pc, #556]	; (8005bc8 <updateAlarmState+0x250>)
 800599c:	785b      	ldrb	r3, [r3, #1]
 800599e:	2b02      	cmp	r3, #2
 80059a0:	d017      	beq.n	80059d2 <updateAlarmState+0x5a>
 80059a2:	dc02      	bgt.n	80059aa <updateAlarmState+0x32>
 80059a4:	2b01      	cmp	r3, #1
 80059a6:	d005      	beq.n	80059b4 <updateAlarmState+0x3c>
			case 1: alarmVars.alarmToSet->sec = (alarmVars.alarmToSet->sec + 1) % 60; break;
			case 2: alarmVars.alarmToSet->min = (alarmVars.alarmToSet->min + 1) % 60; break;
			case 3: alarmVars.alarmToSet->hr = (alarmVars.alarmToSet->hr + 1) % 24; break;
			case 4: alarmVars.alarmToSet->weekday = (alarmVars.alarmToSet->weekday) % 7 + 1; break;
			default: break;
 80059a8:	e041      	b.n	8005a2e <updateAlarmState+0xb6>
		switch (alarmVars.fieldBeingSet) {
 80059aa:	2b03      	cmp	r3, #3
 80059ac:	d020      	beq.n	80059f0 <updateAlarmState+0x78>
 80059ae:	2b04      	cmp	r3, #4
 80059b0:	d02d      	beq.n	8005a0e <updateAlarmState+0x96>
			default: break;
 80059b2:	e03c      	b.n	8005a2e <updateAlarmState+0xb6>
			case 1: alarmVars.alarmToSet->sec = (alarmVars.alarmToSet->sec + 1) % 60; break;
 80059b4:	4b84      	ldr	r3, [pc, #528]	; (8005bc8 <updateAlarmState+0x250>)
 80059b6:	685b      	ldr	r3, [r3, #4]
 80059b8:	789b      	ldrb	r3, [r3, #2]
 80059ba:	3301      	adds	r3, #1
 80059bc:	213c      	movs	r1, #60	; 0x3c
 80059be:	0018      	movs	r0, r3
 80059c0:	f7fa fd1a 	bl	80003f8 <__aeabi_idivmod>
 80059c4:	000b      	movs	r3, r1
 80059c6:	001a      	movs	r2, r3
 80059c8:	4b7f      	ldr	r3, [pc, #508]	; (8005bc8 <updateAlarmState+0x250>)
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	b2d2      	uxtb	r2, r2
 80059ce:	709a      	strb	r2, [r3, #2]
 80059d0:	e02d      	b.n	8005a2e <updateAlarmState+0xb6>
			case 2: alarmVars.alarmToSet->min = (alarmVars.alarmToSet->min + 1) % 60; break;
 80059d2:	4b7d      	ldr	r3, [pc, #500]	; (8005bc8 <updateAlarmState+0x250>)
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	785b      	ldrb	r3, [r3, #1]
 80059d8:	3301      	adds	r3, #1
 80059da:	213c      	movs	r1, #60	; 0x3c
 80059dc:	0018      	movs	r0, r3
 80059de:	f7fa fd0b 	bl	80003f8 <__aeabi_idivmod>
 80059e2:	000b      	movs	r3, r1
 80059e4:	001a      	movs	r2, r3
 80059e6:	4b78      	ldr	r3, [pc, #480]	; (8005bc8 <updateAlarmState+0x250>)
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	b2d2      	uxtb	r2, r2
 80059ec:	705a      	strb	r2, [r3, #1]
 80059ee:	e01e      	b.n	8005a2e <updateAlarmState+0xb6>
			case 3: alarmVars.alarmToSet->hr = (alarmVars.alarmToSet->hr + 1) % 24; break;
 80059f0:	4b75      	ldr	r3, [pc, #468]	; (8005bc8 <updateAlarmState+0x250>)
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	781b      	ldrb	r3, [r3, #0]
 80059f6:	3301      	adds	r3, #1
 80059f8:	2118      	movs	r1, #24
 80059fa:	0018      	movs	r0, r3
 80059fc:	f7fa fcfc 	bl	80003f8 <__aeabi_idivmod>
 8005a00:	000b      	movs	r3, r1
 8005a02:	001a      	movs	r2, r3
 8005a04:	4b70      	ldr	r3, [pc, #448]	; (8005bc8 <updateAlarmState+0x250>)
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	b2d2      	uxtb	r2, r2
 8005a0a:	701a      	strb	r2, [r3, #0]
 8005a0c:	e00f      	b.n	8005a2e <updateAlarmState+0xb6>
			case 4: alarmVars.alarmToSet->weekday = (alarmVars.alarmToSet->weekday) % 7 + 1; break;
 8005a0e:	4b6e      	ldr	r3, [pc, #440]	; (8005bc8 <updateAlarmState+0x250>)
 8005a10:	685b      	ldr	r3, [r3, #4]
 8005a12:	78db      	ldrb	r3, [r3, #3]
 8005a14:	2107      	movs	r1, #7
 8005a16:	0018      	movs	r0, r3
 8005a18:	f7fa fc04 	bl	8000224 <__aeabi_uidivmod>
 8005a1c:	000b      	movs	r3, r1
 8005a1e:	b2da      	uxtb	r2, r3
 8005a20:	4b69      	ldr	r3, [pc, #420]	; (8005bc8 <updateAlarmState+0x250>)
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	3201      	adds	r2, #1
 8005a26:	b2d2      	uxtb	r2, r2
 8005a28:	70da      	strb	r2, [r3, #3]
 8005a2a:	e000      	b.n	8005a2e <updateAlarmState+0xb6>
		}
	}
 8005a2c:	46c0      	nop			; (mov r8, r8)
	if (buttons.is3Pressed && alarmVars.isBeingSet) {
 8005a2e:	4b65      	ldr	r3, [pc, #404]	; (8005bc4 <updateAlarmState+0x24c>)
 8005a30:	789b      	ldrb	r3, [r3, #2]
 8005a32:	b2db      	uxtb	r3, r3
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d057      	beq.n	8005ae8 <updateAlarmState+0x170>
 8005a38:	4b63      	ldr	r3, [pc, #396]	; (8005bc8 <updateAlarmState+0x250>)
 8005a3a:	781b      	ldrb	r3, [r3, #0]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d053      	beq.n	8005ae8 <updateAlarmState+0x170>
		updateFace.alarm = 1;
 8005a40:	4b62      	ldr	r3, [pc, #392]	; (8005bcc <updateAlarmState+0x254>)
 8005a42:	2201      	movs	r2, #1
 8005a44:	709a      	strb	r2, [r3, #2]

		// change fields down
		switch (alarmVars.fieldBeingSet) {
 8005a46:	4b60      	ldr	r3, [pc, #384]	; (8005bc8 <updateAlarmState+0x250>)
 8005a48:	785b      	ldrb	r3, [r3, #1]
 8005a4a:	2b02      	cmp	r3, #2
 8005a4c:	d019      	beq.n	8005a82 <updateAlarmState+0x10a>
 8005a4e:	dc02      	bgt.n	8005a56 <updateAlarmState+0xde>
 8005a50:	2b01      	cmp	r3, #1
 8005a52:	d005      	beq.n	8005a60 <updateAlarmState+0xe8>
				break;
			case 4:
				if (alarmVars.alarmToSet->weekday == RTC_WEEKDAY_MONDAY) alarmVars.alarmToSet->weekday = RTC_WEEKDAY_SUNDAY;
				else alarmVars.alarmToSet->weekday--;
				break;
			default: break;
 8005a54:	e049      	b.n	8005aea <updateAlarmState+0x172>
		switch (alarmVars.fieldBeingSet) {
 8005a56:	2b03      	cmp	r3, #3
 8005a58:	d024      	beq.n	8005aa4 <updateAlarmState+0x12c>
 8005a5a:	2b04      	cmp	r3, #4
 8005a5c:	d033      	beq.n	8005ac6 <updateAlarmState+0x14e>
			default: break;
 8005a5e:	e044      	b.n	8005aea <updateAlarmState+0x172>
				if (alarmVars.alarmToSet->sec == 0) alarmVars.alarmToSet->sec = 59;
 8005a60:	4b59      	ldr	r3, [pc, #356]	; (8005bc8 <updateAlarmState+0x250>)
 8005a62:	685b      	ldr	r3, [r3, #4]
 8005a64:	789b      	ldrb	r3, [r3, #2]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d104      	bne.n	8005a74 <updateAlarmState+0xfc>
 8005a6a:	4b57      	ldr	r3, [pc, #348]	; (8005bc8 <updateAlarmState+0x250>)
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	223b      	movs	r2, #59	; 0x3b
 8005a70:	709a      	strb	r2, [r3, #2]
				break;
 8005a72:	e03a      	b.n	8005aea <updateAlarmState+0x172>
				else alarmVars.alarmToSet->sec--;
 8005a74:	4b54      	ldr	r3, [pc, #336]	; (8005bc8 <updateAlarmState+0x250>)
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	789a      	ldrb	r2, [r3, #2]
 8005a7a:	3a01      	subs	r2, #1
 8005a7c:	b2d2      	uxtb	r2, r2
 8005a7e:	709a      	strb	r2, [r3, #2]
				break;
 8005a80:	e033      	b.n	8005aea <updateAlarmState+0x172>
				if (alarmVars.alarmToSet->min == 0) alarmVars.alarmToSet->min = 59;
 8005a82:	4b51      	ldr	r3, [pc, #324]	; (8005bc8 <updateAlarmState+0x250>)
 8005a84:	685b      	ldr	r3, [r3, #4]
 8005a86:	785b      	ldrb	r3, [r3, #1]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d104      	bne.n	8005a96 <updateAlarmState+0x11e>
 8005a8c:	4b4e      	ldr	r3, [pc, #312]	; (8005bc8 <updateAlarmState+0x250>)
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	223b      	movs	r2, #59	; 0x3b
 8005a92:	705a      	strb	r2, [r3, #1]
				break;
 8005a94:	e029      	b.n	8005aea <updateAlarmState+0x172>
				else alarmVars.alarmToSet->min--;
 8005a96:	4b4c      	ldr	r3, [pc, #304]	; (8005bc8 <updateAlarmState+0x250>)
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	785a      	ldrb	r2, [r3, #1]
 8005a9c:	3a01      	subs	r2, #1
 8005a9e:	b2d2      	uxtb	r2, r2
 8005aa0:	705a      	strb	r2, [r3, #1]
				break;
 8005aa2:	e022      	b.n	8005aea <updateAlarmState+0x172>
				if (alarmVars.alarmToSet->hr == 0) alarmVars.alarmToSet->hr = 23;
 8005aa4:	4b48      	ldr	r3, [pc, #288]	; (8005bc8 <updateAlarmState+0x250>)
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	781b      	ldrb	r3, [r3, #0]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d104      	bne.n	8005ab8 <updateAlarmState+0x140>
 8005aae:	4b46      	ldr	r3, [pc, #280]	; (8005bc8 <updateAlarmState+0x250>)
 8005ab0:	685b      	ldr	r3, [r3, #4]
 8005ab2:	2217      	movs	r2, #23
 8005ab4:	701a      	strb	r2, [r3, #0]
				break;
 8005ab6:	e018      	b.n	8005aea <updateAlarmState+0x172>
				else alarmVars.alarmToSet->hr--;
 8005ab8:	4b43      	ldr	r3, [pc, #268]	; (8005bc8 <updateAlarmState+0x250>)
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	781a      	ldrb	r2, [r3, #0]
 8005abe:	3a01      	subs	r2, #1
 8005ac0:	b2d2      	uxtb	r2, r2
 8005ac2:	701a      	strb	r2, [r3, #0]
				break;
 8005ac4:	e011      	b.n	8005aea <updateAlarmState+0x172>
				if (alarmVars.alarmToSet->weekday == RTC_WEEKDAY_MONDAY) alarmVars.alarmToSet->weekday = RTC_WEEKDAY_SUNDAY;
 8005ac6:	4b40      	ldr	r3, [pc, #256]	; (8005bc8 <updateAlarmState+0x250>)
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	78db      	ldrb	r3, [r3, #3]
 8005acc:	2b01      	cmp	r3, #1
 8005ace:	d104      	bne.n	8005ada <updateAlarmState+0x162>
 8005ad0:	4b3d      	ldr	r3, [pc, #244]	; (8005bc8 <updateAlarmState+0x250>)
 8005ad2:	685b      	ldr	r3, [r3, #4]
 8005ad4:	2207      	movs	r2, #7
 8005ad6:	70da      	strb	r2, [r3, #3]
				break;
 8005ad8:	e007      	b.n	8005aea <updateAlarmState+0x172>
				else alarmVars.alarmToSet->weekday--;
 8005ada:	4b3b      	ldr	r3, [pc, #236]	; (8005bc8 <updateAlarmState+0x250>)
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	78da      	ldrb	r2, [r3, #3]
 8005ae0:	3a01      	subs	r2, #1
 8005ae2:	b2d2      	uxtb	r2, r2
 8005ae4:	70da      	strb	r2, [r3, #3]
				break;
 8005ae6:	e000      	b.n	8005aea <updateAlarmState+0x172>
		}
	}
 8005ae8:	46c0      	nop			; (mov r8, r8)
	if (buttons.is4Pressed) {
 8005aea:	4b36      	ldr	r3, [pc, #216]	; (8005bc4 <updateAlarmState+0x24c>)
 8005aec:	78db      	ldrb	r3, [r3, #3]
 8005aee:	b2db      	uxtb	r3, r3
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d062      	beq.n	8005bba <updateAlarmState+0x242>
		updateFace.alarm = 1;
 8005af4:	4b35      	ldr	r3, [pc, #212]	; (8005bcc <updateAlarmState+0x254>)
 8005af6:	2201      	movs	r2, #1
 8005af8:	709a      	strb	r2, [r3, #2]

		if (alarmVars.isSet == 0) {
 8005afa:	4b33      	ldr	r3, [pc, #204]	; (8005bc8 <updateAlarmState+0x250>)
 8005afc:	789b      	ldrb	r3, [r3, #2]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d151      	bne.n	8005ba6 <updateAlarmState+0x22e>
			// toggle between fields
			alarmVars.fieldBeingSet = (alarmVars.fieldBeingSet + 1) % (NUM_ALARMFIELDS + 1);
 8005b02:	4b31      	ldr	r3, [pc, #196]	; (8005bc8 <updateAlarmState+0x250>)
 8005b04:	785b      	ldrb	r3, [r3, #1]
 8005b06:	3301      	adds	r3, #1
 8005b08:	2105      	movs	r1, #5
 8005b0a:	0018      	movs	r0, r3
 8005b0c:	f7fa fc74 	bl	80003f8 <__aeabi_idivmod>
 8005b10:	000b      	movs	r3, r1
 8005b12:	b2da      	uxtb	r2, r3
 8005b14:	4b2c      	ldr	r3, [pc, #176]	; (8005bc8 <updateAlarmState+0x250>)
 8005b16:	705a      	strb	r2, [r3, #1]
			if (alarmVars.fieldBeingSet != 0) {
 8005b18:	4b2b      	ldr	r3, [pc, #172]	; (8005bc8 <updateAlarmState+0x250>)
 8005b1a:	785b      	ldrb	r3, [r3, #1]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d034      	beq.n	8005b8a <updateAlarmState+0x212>
				alarmVars.isBeingSet = 1;
 8005b20:	4b29      	ldr	r3, [pc, #164]	; (8005bc8 <updateAlarmState+0x250>)
 8005b22:	2201      	movs	r2, #1
 8005b24:	701a      	strb	r2, [r3, #0]
				if (alarmVars.fieldBeingSet == 1) {
 8005b26:	4b28      	ldr	r3, [pc, #160]	; (8005bc8 <updateAlarmState+0x250>)
 8005b28:	785b      	ldrb	r3, [r3, #1]
 8005b2a:	2b01      	cmp	r3, #1
 8005b2c:	d145      	bne.n	8005bba <updateAlarmState+0x242>
					struct dates d = {0};
 8005b2e:	2510      	movs	r5, #16
 8005b30:	197b      	adds	r3, r7, r5
 8005b32:	0018      	movs	r0, r3
 8005b34:	2306      	movs	r3, #6
 8005b36:	001a      	movs	r2, r3
 8005b38:	2100      	movs	r1, #0
 8005b3a:	f005 ff20 	bl	800b97e <memset>
					struct times t = {0};
 8005b3e:	240c      	movs	r4, #12
 8005b40:	193b      	adds	r3, r7, r4
 8005b42:	0018      	movs	r0, r3
 8005b44:	2303      	movs	r3, #3
 8005b46:	001a      	movs	r2, r3
 8005b48:	2100      	movs	r1, #0
 8005b4a:	f005 ff18 	bl	800b97e <memset>
					getDateTime(&d, &t, hrtc);
 8005b4e:	687a      	ldr	r2, [r7, #4]
 8005b50:	0021      	movs	r1, r4
 8005b52:	000c      	movs	r4, r1
 8005b54:	1879      	adds	r1, r7, r1
 8005b56:	197b      	adds	r3, r7, r5
 8005b58:	0018      	movs	r0, r3
 8005b5a:	f7fd fd27 	bl	80035ac <getDateTime>
					alarmVars.alarmToSet->sec = t.sec;
 8005b5e:	4b1a      	ldr	r3, [pc, #104]	; (8005bc8 <updateAlarmState+0x250>)
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	0021      	movs	r1, r4
 8005b64:	187a      	adds	r2, r7, r1
 8005b66:	7892      	ldrb	r2, [r2, #2]
 8005b68:	709a      	strb	r2, [r3, #2]
					alarmVars.alarmToSet->min = t.min;
 8005b6a:	4b17      	ldr	r3, [pc, #92]	; (8005bc8 <updateAlarmState+0x250>)
 8005b6c:	685b      	ldr	r3, [r3, #4]
 8005b6e:	187a      	adds	r2, r7, r1
 8005b70:	7852      	ldrb	r2, [r2, #1]
 8005b72:	705a      	strb	r2, [r3, #1]
					alarmVars.alarmToSet->hr = t.hr;
 8005b74:	4b14      	ldr	r3, [pc, #80]	; (8005bc8 <updateAlarmState+0x250>)
 8005b76:	685b      	ldr	r3, [r3, #4]
 8005b78:	187a      	adds	r2, r7, r1
 8005b7a:	7812      	ldrb	r2, [r2, #0]
 8005b7c:	701a      	strb	r2, [r3, #0]
					alarmVars.alarmToSet->weekday = d.weekday;
 8005b7e:	4b12      	ldr	r3, [pc, #72]	; (8005bc8 <updateAlarmState+0x250>)
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	197a      	adds	r2, r7, r5
 8005b84:	7912      	ldrb	r2, [r2, #4]
 8005b86:	70da      	strb	r2, [r3, #3]
			// stop and clear alarm hw
			alarmVars.isSet = 0;
			HAL_RTC_DeactivateAlarm(hrtc, RTC_ALARM_A);
		}
	}
}
 8005b88:	e017      	b.n	8005bba <updateAlarmState+0x242>
				alarmVars.isBeingSet = 0;
 8005b8a:	4b0f      	ldr	r3, [pc, #60]	; (8005bc8 <updateAlarmState+0x250>)
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	701a      	strb	r2, [r3, #0]
				alarmVars.isSet = 1;
 8005b90:	4b0d      	ldr	r3, [pc, #52]	; (8005bc8 <updateAlarmState+0x250>)
 8005b92:	2201      	movs	r2, #1
 8005b94:	709a      	strb	r2, [r3, #2]
				setAlarm(alarmVars.alarmToSet, hrtc);
 8005b96:	4b0c      	ldr	r3, [pc, #48]	; (8005bc8 <updateAlarmState+0x250>)
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	687a      	ldr	r2, [r7, #4]
 8005b9c:	0011      	movs	r1, r2
 8005b9e:	0018      	movs	r0, r3
 8005ba0:	f7fd fada 	bl	8003158 <setAlarm>
}
 8005ba4:	e009      	b.n	8005bba <updateAlarmState+0x242>
			alarmVars.isSet = 0;
 8005ba6:	4b08      	ldr	r3, [pc, #32]	; (8005bc8 <updateAlarmState+0x250>)
 8005ba8:	2200      	movs	r2, #0
 8005baa:	709a      	strb	r2, [r3, #2]
			HAL_RTC_DeactivateAlarm(hrtc, RTC_ALARM_A);
 8005bac:	2380      	movs	r3, #128	; 0x80
 8005bae:	005a      	lsls	r2, r3, #1
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	0011      	movs	r1, r2
 8005bb4:	0018      	movs	r0, r3
 8005bb6:	f003 ff5f 	bl	8009a78 <HAL_RTC_DeactivateAlarm>
}
 8005bba:	46c0      	nop			; (mov r8, r8)
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	b006      	add	sp, #24
 8005bc0:	bdb0      	pop	{r4, r5, r7, pc}
 8005bc2:	46c0      	nop			; (mov r8, r8)
 8005bc4:	2000019c 	.word	0x2000019c
 8005bc8:	20000130 	.word	0x20000130
 8005bcc:	20000150 	.word	0x20000150

08005bd0 <updateStopwatchState>:
 * in not running mode:
 *   button 2 starts stopwatch and moves to running mode
 *   button 3 captures stopwatch for lap
 *   button 4 clears stopwatch and returns to default mode
 */
void updateStopwatchState(TIM_HandleTypeDef *timerStopwatchTim) {
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b082      	sub	sp, #8
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
	// start/stop
	if (buttons.is2Pressed) {
 8005bd8:	4b28      	ldr	r3, [pc, #160]	; (8005c7c <updateStopwatchState+0xac>)
 8005bda:	785b      	ldrb	r3, [r3, #1]
 8005bdc:	b2db      	uxtb	r3, r3
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d01c      	beq.n	8005c1c <updateStopwatchState+0x4c>
		updateFace.stopwatch = 1;
 8005be2:	4b27      	ldr	r3, [pc, #156]	; (8005c80 <updateStopwatchState+0xb0>)
 8005be4:	2201      	movs	r2, #1
 8005be6:	70da      	strb	r2, [r3, #3]

		if (isStopwatchRunning == 0) {
 8005be8:	4b26      	ldr	r3, [pc, #152]	; (8005c84 <updateStopwatchState+0xb4>)
 8005bea:	781b      	ldrb	r3, [r3, #0]
 8005bec:	b2db      	uxtb	r3, r3
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d10a      	bne.n	8005c08 <updateStopwatchState+0x38>
			runStopwatch(timerStopwatchTim);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	0018      	movs	r0, r3
 8005bf6:	f7ff f8b7 	bl	8004d68 <runStopwatch>
			isStopwatchRunning = 1;
 8005bfa:	4b22      	ldr	r3, [pc, #136]	; (8005c84 <updateStopwatchState+0xb4>)
 8005bfc:	2201      	movs	r2, #1
 8005bfe:	701a      	strb	r2, [r3, #0]
			isStopwatchPaused = 0;
 8005c00:	4b21      	ldr	r3, [pc, #132]	; (8005c88 <updateStopwatchState+0xb8>)
 8005c02:	2200      	movs	r2, #0
 8005c04:	701a      	strb	r2, [r3, #0]
 8005c06:	e009      	b.n	8005c1c <updateStopwatchState+0x4c>
		}
		else {
			pauseStopwatch(timerStopwatchTim);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	0018      	movs	r0, r3
 8005c0c:	f7ff f914 	bl	8004e38 <pauseStopwatch>
			isStopwatchRunning = 0;
 8005c10:	4b1c      	ldr	r3, [pc, #112]	; (8005c84 <updateStopwatchState+0xb4>)
 8005c12:	2200      	movs	r2, #0
 8005c14:	701a      	strb	r2, [r3, #0]
			isStopwatchPaused = 1;
 8005c16:	4b1c      	ldr	r3, [pc, #112]	; (8005c88 <updateStopwatchState+0xb8>)
 8005c18:	2201      	movs	r2, #1
 8005c1a:	701a      	strb	r2, [r3, #0]
		}
	}
	if (buttons.is3Pressed && stopwatchCounter != 0) {
 8005c1c:	4b17      	ldr	r3, [pc, #92]	; (8005c7c <updateStopwatchState+0xac>)
 8005c1e:	789b      	ldrb	r3, [r3, #2]
 8005c20:	b2db      	uxtb	r3, r3
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d00e      	beq.n	8005c44 <updateStopwatchState+0x74>
 8005c26:	4b19      	ldr	r3, [pc, #100]	; (8005c8c <updateStopwatchState+0xbc>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d00a      	beq.n	8005c44 <updateStopwatchState+0x74>
		updateFace.stopwatch = 1;
 8005c2e:	4b14      	ldr	r3, [pc, #80]	; (8005c80 <updateStopwatchState+0xb0>)
 8005c30:	2201      	movs	r2, #1
 8005c32:	70da      	strb	r2, [r3, #3]

		// pull data and set lap
		stopwatchVars.lapPrev = stopwatchVars.lapCurrent;
 8005c34:	4b16      	ldr	r3, [pc, #88]	; (8005c90 <updateStopwatchState+0xc0>)
 8005c36:	685a      	ldr	r2, [r3, #4]
 8005c38:	4b15      	ldr	r3, [pc, #84]	; (8005c90 <updateStopwatchState+0xc0>)
 8005c3a:	601a      	str	r2, [r3, #0]
		stopwatchVars.lapCurrent = stopwatchCounter;
 8005c3c:	4b13      	ldr	r3, [pc, #76]	; (8005c8c <updateStopwatchState+0xbc>)
 8005c3e:	681a      	ldr	r2, [r3, #0]
 8005c40:	4b13      	ldr	r3, [pc, #76]	; (8005c90 <updateStopwatchState+0xc0>)
 8005c42:	605a      	str	r2, [r3, #4]
	}
	if (buttons.is4Pressed) {
 8005c44:	4b0d      	ldr	r3, [pc, #52]	; (8005c7c <updateStopwatchState+0xac>)
 8005c46:	78db      	ldrb	r3, [r3, #3]
 8005c48:	b2db      	uxtb	r3, r3
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d012      	beq.n	8005c74 <updateStopwatchState+0xa4>
		updateFace.stopwatch = 1;
 8005c4e:	4b0c      	ldr	r3, [pc, #48]	; (8005c80 <updateStopwatchState+0xb0>)
 8005c50:	2201      	movs	r2, #1
 8005c52:	70da      	strb	r2, [r3, #3]

		// clear stopwatch hw
		clearStopwatch(timerStopwatchTim);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	0018      	movs	r0, r3
 8005c58:	f7ff f902 	bl	8004e60 <clearStopwatch>
		stopwatchVars.lapCurrent = 0;
 8005c5c:	4b0c      	ldr	r3, [pc, #48]	; (8005c90 <updateStopwatchState+0xc0>)
 8005c5e:	2200      	movs	r2, #0
 8005c60:	605a      	str	r2, [r3, #4]
		stopwatchVars.lapPrev = 0;
 8005c62:	4b0b      	ldr	r3, [pc, #44]	; (8005c90 <updateStopwatchState+0xc0>)
 8005c64:	2200      	movs	r2, #0
 8005c66:	601a      	str	r2, [r3, #0]
		isStopwatchRunning = 0;
 8005c68:	4b06      	ldr	r3, [pc, #24]	; (8005c84 <updateStopwatchState+0xb4>)
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	701a      	strb	r2, [r3, #0]
		isStopwatchPaused = 0;
 8005c6e:	4b06      	ldr	r3, [pc, #24]	; (8005c88 <updateStopwatchState+0xb8>)
 8005c70:	2200      	movs	r2, #0
 8005c72:	701a      	strb	r2, [r3, #0]
	}
}
 8005c74:	46c0      	nop			; (mov r8, r8)
 8005c76:	46bd      	mov	sp, r7
 8005c78:	b002      	add	sp, #8
 8005c7a:	bd80      	pop	{r7, pc}
 8005c7c:	2000019c 	.word	0x2000019c
 8005c80:	20000150 	.word	0x20000150
 8005c84:	20000154 	.word	0x20000154
 8005c88:	200001a1 	.word	0x200001a1
 8005c8c:	200001a4 	.word	0x200001a4
 8005c90:	20000138 	.word	0x20000138

08005c94 <updateDisplay>:

// primary function for making changes to display
void updateDisplay(RTC_HandleTypeDef *hrtc, SPI_HandleTypeDef *hspi) {
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b082      	sub	sp, #8
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
 8005c9c:	6039      	str	r1, [r7, #0]
	// change faces
	if (isFaceBeingChanged == 1) {
 8005c9e:	4b7a      	ldr	r3, [pc, #488]	; (8005e88 <updateDisplay+0x1f4>)
 8005ca0:	781b      	ldrb	r3, [r3, #0]
 8005ca2:	2b01      	cmp	r3, #1
 8005ca4:	d160      	bne.n	8005d68 <updateDisplay+0xd4>
		isFaceBeingChanged = 0;
 8005ca6:	4b78      	ldr	r3, [pc, #480]	; (8005e88 <updateDisplay+0x1f4>)
 8005ca8:	2200      	movs	r2, #0
 8005caa:	701a      	strb	r2, [r3, #0]

		// drawing titles and boxes that won't be rewritten during normal operation within
		// a specific face (titles and buttons)
		if (faceOnDisplay == faceClock) {
 8005cac:	4b77      	ldr	r3, [pc, #476]	; (8005e8c <updateDisplay+0x1f8>)
 8005cae:	781b      	ldrb	r3, [r3, #0]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d10b      	bne.n	8005ccc <updateDisplay+0x38>
			clearScreen(ST77XX_CYAN, hspi);
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	4a76      	ldr	r2, [pc, #472]	; (8005e90 <updateDisplay+0x1fc>)
 8005cb8:	0019      	movs	r1, r3
 8005cba:	0010      	movs	r0, r2
 8005cbc:	f7fc fb5a 	bl	8002374 <clearScreen>
			drawTitle("clock", hspi);
 8005cc0:	683a      	ldr	r2, [r7, #0]
 8005cc2:	4b74      	ldr	r3, [pc, #464]	; (8005e94 <updateDisplay+0x200>)
 8005cc4:	0011      	movs	r1, r2
 8005cc6:	0018      	movs	r0, r3
 8005cc8:	f000 fc3a 	bl	8006540 <drawTitle>
		}
		if (faceOnDisplay == faceTimer) {
 8005ccc:	4b6f      	ldr	r3, [pc, #444]	; (8005e8c <updateDisplay+0x1f8>)
 8005cce:	781b      	ldrb	r3, [r3, #0]
 8005cd0:	2b01      	cmp	r3, #1
 8005cd2:	d112      	bne.n	8005cfa <updateDisplay+0x66>
			clearScreen(ST77XX_GREEN, hspi);
 8005cd4:	683a      	ldr	r2, [r7, #0]
 8005cd6:	23fc      	movs	r3, #252	; 0xfc
 8005cd8:	00db      	lsls	r3, r3, #3
 8005cda:	0011      	movs	r1, r2
 8005cdc:	0018      	movs	r0, r3
 8005cde:	f7fc fb49 	bl	8002374 <clearScreen>
			drawTopClock(hrtc, hspi);
 8005ce2:	683a      	ldr	r2, [r7, #0]
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	0011      	movs	r1, r2
 8005ce8:	0018      	movs	r0, r3
 8005cea:	f000 fdd1 	bl	8006890 <drawTopClock>
			drawTitle("timer", hspi);
 8005cee:	683a      	ldr	r2, [r7, #0]
 8005cf0:	4b69      	ldr	r3, [pc, #420]	; (8005e98 <updateDisplay+0x204>)
 8005cf2:	0011      	movs	r1, r2
 8005cf4:	0018      	movs	r0, r3
 8005cf6:	f000 fc23 	bl	8006540 <drawTitle>
		}
		if (faceOnDisplay == faceAlarm) {
 8005cfa:	4b64      	ldr	r3, [pc, #400]	; (8005e8c <updateDisplay+0x1f8>)
 8005cfc:	781b      	ldrb	r3, [r3, #0]
 8005cfe:	2b02      	cmp	r3, #2
 8005d00:	d111      	bne.n	8005d26 <updateDisplay+0x92>
			clearScreen(ST77XX_MAGENTA, hspi);
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	4a65      	ldr	r2, [pc, #404]	; (8005e9c <updateDisplay+0x208>)
 8005d06:	0019      	movs	r1, r3
 8005d08:	0010      	movs	r0, r2
 8005d0a:	f7fc fb33 	bl	8002374 <clearScreen>
			drawTopClock(hrtc, hspi);
 8005d0e:	683a      	ldr	r2, [r7, #0]
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	0011      	movs	r1, r2
 8005d14:	0018      	movs	r0, r3
 8005d16:	f000 fdbb 	bl	8006890 <drawTopClock>
			drawTitle("alarm", hspi);
 8005d1a:	683a      	ldr	r2, [r7, #0]
 8005d1c:	4b60      	ldr	r3, [pc, #384]	; (8005ea0 <updateDisplay+0x20c>)
 8005d1e:	0011      	movs	r1, r2
 8005d20:	0018      	movs	r0, r3
 8005d22:	f000 fc0d 	bl	8006540 <drawTitle>
		}
		if (faceOnDisplay == faceStopwatch) {
 8005d26:	4b59      	ldr	r3, [pc, #356]	; (8005e8c <updateDisplay+0x1f8>)
 8005d28:	781b      	ldrb	r3, [r3, #0]
 8005d2a:	2b03      	cmp	r3, #3
 8005d2c:	d111      	bne.n	8005d52 <updateDisplay+0xbe>
			clearScreen(ST77XX_YELLOW, hspi);
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	4a5c      	ldr	r2, [pc, #368]	; (8005ea4 <updateDisplay+0x210>)
 8005d32:	0019      	movs	r1, r3
 8005d34:	0010      	movs	r0, r2
 8005d36:	f7fc fb1d 	bl	8002374 <clearScreen>
			drawTopClock(hrtc, hspi);
 8005d3a:	683a      	ldr	r2, [r7, #0]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	0011      	movs	r1, r2
 8005d40:	0018      	movs	r0, r3
 8005d42:	f000 fda5 	bl	8006890 <drawTopClock>
			drawTitle("stopwatch", hspi);
 8005d46:	683a      	ldr	r2, [r7, #0]
 8005d48:	4b57      	ldr	r3, [pc, #348]	; (8005ea8 <updateDisplay+0x214>)
 8005d4a:	0011      	movs	r1, r2
 8005d4c:	0018      	movs	r0, r3
 8005d4e:	f000 fbf7 	bl	8006540 <drawTitle>
		}

		drawBattery(battPercentage, hspi);
 8005d52:	4b56      	ldr	r3, [pc, #344]	; (8005eac <updateDisplay+0x218>)
 8005d54:	881b      	ldrh	r3, [r3, #0]
 8005d56:	683a      	ldr	r2, [r7, #0]
 8005d58:	0011      	movs	r1, r2
 8005d5a:	0018      	movs	r0, r3
 8005d5c:	f000 fc64 	bl	8006628 <drawBattery>
		drawButtons(hspi);
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	0018      	movs	r0, r3
 8005d64:	f000 fba6 	bl	80064b4 <drawButtons>
	}


	if (updateFace.clock || updateFace.timer || updateFace.alarm || updateFace.stopwatch) {
 8005d68:	4b51      	ldr	r3, [pc, #324]	; (8005eb0 <updateDisplay+0x21c>)
 8005d6a:	781b      	ldrb	r3, [r3, #0]
 8005d6c:	b2db      	uxtb	r3, r3
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d10f      	bne.n	8005d92 <updateDisplay+0xfe>
 8005d72:	4b4f      	ldr	r3, [pc, #316]	; (8005eb0 <updateDisplay+0x21c>)
 8005d74:	785b      	ldrb	r3, [r3, #1]
 8005d76:	b2db      	uxtb	r3, r3
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d10a      	bne.n	8005d92 <updateDisplay+0xfe>
 8005d7c:	4b4c      	ldr	r3, [pc, #304]	; (8005eb0 <updateDisplay+0x21c>)
 8005d7e:	789b      	ldrb	r3, [r3, #2]
 8005d80:	b2db      	uxtb	r3, r3
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d105      	bne.n	8005d92 <updateDisplay+0xfe>
 8005d86:	4b4a      	ldr	r3, [pc, #296]	; (8005eb0 <updateDisplay+0x21c>)
 8005d88:	78db      	ldrb	r3, [r3, #3]
 8005d8a:	b2db      	uxtb	r3, r3
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d100      	bne.n	8005d92 <updateDisplay+0xfe>
 8005d90:	e076      	b.n	8005e80 <updateDisplay+0x1ec>
		// update clock face
		if (faceOnDisplay == faceClock) {
 8005d92:	4b3e      	ldr	r3, [pc, #248]	; (8005e8c <updateDisplay+0x1f8>)
 8005d94:	781b      	ldrb	r3, [r3, #0]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d10f      	bne.n	8005dba <updateDisplay+0x126>
			if (updateFace.clock == 1) {
 8005d9a:	4b45      	ldr	r3, [pc, #276]	; (8005eb0 <updateDisplay+0x21c>)
 8005d9c:	781b      	ldrb	r3, [r3, #0]
 8005d9e:	b2db      	uxtb	r3, r3
 8005da0:	2b01      	cmp	r3, #1
 8005da2:	d161      	bne.n	8005e68 <updateDisplay+0x1d4>
				setBackgroundColor(ST77XX_CYAN);
 8005da4:	4b3a      	ldr	r3, [pc, #232]	; (8005e90 <updateDisplay+0x1fc>)
 8005da6:	0018      	movs	r0, r3
 8005da8:	f7fd f824 	bl	8002df4 <setBackgroundColor>
				updateClockDisplay(hrtc, hspi);
 8005dac:	683a      	ldr	r2, [r7, #0]
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	0011      	movs	r1, r2
 8005db2:	0018      	movs	r0, r3
 8005db4:	f000 f87e 	bl	8005eb4 <updateClockDisplay>
 8005db8:	e056      	b.n	8005e68 <updateDisplay+0x1d4>
			}
		}
		// update timer face
		else if (faceOnDisplay == faceTimer) {
 8005dba:	4b34      	ldr	r3, [pc, #208]	; (8005e8c <updateDisplay+0x1f8>)
 8005dbc:	781b      	ldrb	r3, [r3, #0]
 8005dbe:	2b01      	cmp	r3, #1
 8005dc0:	d119      	bne.n	8005df6 <updateDisplay+0x162>
			if (updateFace.timer == 1) {
 8005dc2:	4b3b      	ldr	r3, [pc, #236]	; (8005eb0 <updateDisplay+0x21c>)
 8005dc4:	785b      	ldrb	r3, [r3, #1]
 8005dc6:	b2db      	uxtb	r3, r3
 8005dc8:	2b01      	cmp	r3, #1
 8005dca:	d108      	bne.n	8005dde <updateDisplay+0x14a>
				setBackgroundColor(ST77XX_GREEN);
 8005dcc:	23fc      	movs	r3, #252	; 0xfc
 8005dce:	00db      	lsls	r3, r3, #3
 8005dd0:	0018      	movs	r0, r3
 8005dd2:	f7fd f80f 	bl	8002df4 <setBackgroundColor>
				updateTimerDisplay(hspi);
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	0018      	movs	r0, r3
 8005dda:	f000 f915 	bl	8006008 <updateTimerDisplay>
			}
			if (updateFace.clock == 1) drawTopClock(hrtc, hspi);
 8005dde:	4b34      	ldr	r3, [pc, #208]	; (8005eb0 <updateDisplay+0x21c>)
 8005de0:	781b      	ldrb	r3, [r3, #0]
 8005de2:	b2db      	uxtb	r3, r3
 8005de4:	2b01      	cmp	r3, #1
 8005de6:	d13f      	bne.n	8005e68 <updateDisplay+0x1d4>
 8005de8:	683a      	ldr	r2, [r7, #0]
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	0011      	movs	r1, r2
 8005dee:	0018      	movs	r0, r3
 8005df0:	f000 fd4e 	bl	8006890 <drawTopClock>
 8005df4:	e038      	b.n	8005e68 <updateDisplay+0x1d4>
		}
		// update alarm face
		else if (faceOnDisplay == faceAlarm) {
 8005df6:	4b25      	ldr	r3, [pc, #148]	; (8005e8c <updateDisplay+0x1f8>)
 8005df8:	781b      	ldrb	r3, [r3, #0]
 8005dfa:	2b02      	cmp	r3, #2
 8005dfc:	d118      	bne.n	8005e30 <updateDisplay+0x19c>
			if (updateFace.alarm == 1) {
 8005dfe:	4b2c      	ldr	r3, [pc, #176]	; (8005eb0 <updateDisplay+0x21c>)
 8005e00:	789b      	ldrb	r3, [r3, #2]
 8005e02:	b2db      	uxtb	r3, r3
 8005e04:	2b01      	cmp	r3, #1
 8005e06:	d107      	bne.n	8005e18 <updateDisplay+0x184>
				setBackgroundColor(ST77XX_MAGENTA);
 8005e08:	4b24      	ldr	r3, [pc, #144]	; (8005e9c <updateDisplay+0x208>)
 8005e0a:	0018      	movs	r0, r3
 8005e0c:	f7fc fff2 	bl	8002df4 <setBackgroundColor>
				updateAlarmDisplay(hspi);
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	0018      	movs	r0, r3
 8005e14:	f000 f9f8 	bl	8006208 <updateAlarmDisplay>
			}
			if (updateFace.clock == 1) drawTopClock(hrtc, hspi);
 8005e18:	4b25      	ldr	r3, [pc, #148]	; (8005eb0 <updateDisplay+0x21c>)
 8005e1a:	781b      	ldrb	r3, [r3, #0]
 8005e1c:	b2db      	uxtb	r3, r3
 8005e1e:	2b01      	cmp	r3, #1
 8005e20:	d122      	bne.n	8005e68 <updateDisplay+0x1d4>
 8005e22:	683a      	ldr	r2, [r7, #0]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	0011      	movs	r1, r2
 8005e28:	0018      	movs	r0, r3
 8005e2a:	f000 fd31 	bl	8006890 <drawTopClock>
 8005e2e:	e01b      	b.n	8005e68 <updateDisplay+0x1d4>
		}
		// update stopwatch face
		else if (faceOnDisplay == faceStopwatch) {
 8005e30:	4b16      	ldr	r3, [pc, #88]	; (8005e8c <updateDisplay+0x1f8>)
 8005e32:	781b      	ldrb	r3, [r3, #0]
 8005e34:	2b03      	cmp	r3, #3
 8005e36:	d117      	bne.n	8005e68 <updateDisplay+0x1d4>
			if (updateFace.stopwatch == 1) {
 8005e38:	4b1d      	ldr	r3, [pc, #116]	; (8005eb0 <updateDisplay+0x21c>)
 8005e3a:	78db      	ldrb	r3, [r3, #3]
 8005e3c:	b2db      	uxtb	r3, r3
 8005e3e:	2b01      	cmp	r3, #1
 8005e40:	d107      	bne.n	8005e52 <updateDisplay+0x1be>
				setBackgroundColor(ST77XX_YELLOW);
 8005e42:	4b18      	ldr	r3, [pc, #96]	; (8005ea4 <updateDisplay+0x210>)
 8005e44:	0018      	movs	r0, r3
 8005e46:	f7fc ffd5 	bl	8002df4 <setBackgroundColor>
				updateStopwatchDisplay(hspi);
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	0018      	movs	r0, r3
 8005e4e:	f000 faa9 	bl	80063a4 <updateStopwatchDisplay>
			}
			if (updateFace.clock == 1) drawTopClock(hrtc, hspi);
 8005e52:	4b17      	ldr	r3, [pc, #92]	; (8005eb0 <updateDisplay+0x21c>)
 8005e54:	781b      	ldrb	r3, [r3, #0]
 8005e56:	b2db      	uxtb	r3, r3
 8005e58:	2b01      	cmp	r3, #1
 8005e5a:	d105      	bne.n	8005e68 <updateDisplay+0x1d4>
 8005e5c:	683a      	ldr	r2, [r7, #0]
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	0011      	movs	r1, r2
 8005e62:	0018      	movs	r0, r3
 8005e64:	f000 fd14 	bl	8006890 <drawTopClock>
		}

		updateFace.clock = updateFace.timer = updateFace.alarm = updateFace.stopwatch = 0;
 8005e68:	2200      	movs	r2, #0
 8005e6a:	4b11      	ldr	r3, [pc, #68]	; (8005eb0 <updateDisplay+0x21c>)
 8005e6c:	1c11      	adds	r1, r2, #0
 8005e6e:	70d9      	strb	r1, [r3, #3]
 8005e70:	4b0f      	ldr	r3, [pc, #60]	; (8005eb0 <updateDisplay+0x21c>)
 8005e72:	1c11      	adds	r1, r2, #0
 8005e74:	7099      	strb	r1, [r3, #2]
 8005e76:	4b0e      	ldr	r3, [pc, #56]	; (8005eb0 <updateDisplay+0x21c>)
 8005e78:	1c11      	adds	r1, r2, #0
 8005e7a:	7059      	strb	r1, [r3, #1]
 8005e7c:	4b0c      	ldr	r3, [pc, #48]	; (8005eb0 <updateDisplay+0x21c>)
 8005e7e:	701a      	strb	r2, [r3, #0]
	}
}
 8005e80:	46c0      	nop			; (mov r8, r8)
 8005e82:	46bd      	mov	sp, r7
 8005e84:	b002      	add	sp, #8
 8005e86:	bd80      	pop	{r7, pc}
 8005e88:	20000068 	.word	0x20000068
 8005e8c:	20000140 	.word	0x20000140
 8005e90:	000007ff 	.word	0x000007ff
 8005e94:	0800c2b8 	.word	0x0800c2b8
 8005e98:	0800c2c0 	.word	0x0800c2c0
 8005e9c:	0000f81f 	.word	0x0000f81f
 8005ea0:	0800c2c8 	.word	0x0800c2c8
 8005ea4:	0000ffe0 	.word	0x0000ffe0
 8005ea8:	0800c2d0 	.word	0x0800c2d0
 8005eac:	2000014c 	.word	0x2000014c
 8005eb0:	20000150 	.word	0x20000150

08005eb4 <updateClockDisplay>:

// helper function for drawing all elements for clock display
void updateClockDisplay(RTC_HandleTypeDef *hrtc, SPI_HandleTypeDef *hspi) {
 8005eb4:	b5b0      	push	{r4, r5, r7, lr}
 8005eb6:	b088      	sub	sp, #32
 8005eb8:	af02      	add	r7, sp, #8
 8005eba:	6078      	str	r0, [r7, #4]
 8005ebc:	6039      	str	r1, [r7, #0]
	struct dates currentDate = {0};
 8005ebe:	2310      	movs	r3, #16
 8005ec0:	18fb      	adds	r3, r7, r3
 8005ec2:	0018      	movs	r0, r3
 8005ec4:	2306      	movs	r3, #6
 8005ec6:	001a      	movs	r2, r3
 8005ec8:	2100      	movs	r1, #0
 8005eca:	f005 fd58 	bl	800b97e <memset>
	struct times currentTime = {0};
 8005ece:	230c      	movs	r3, #12
 8005ed0:	18fb      	adds	r3, r7, r3
 8005ed2:	0018      	movs	r0, r3
 8005ed4:	2303      	movs	r3, #3
 8005ed6:	001a      	movs	r2, r3
 8005ed8:	2100      	movs	r1, #0
 8005eda:	f005 fd50 	bl	800b97e <memset>

	setTextColor(ST77XX_BLACK);
 8005ede:	2000      	movs	r0, #0
 8005ee0:	f7fc ffc2 	bl	8002e68 <setTextColor>
	if (clockVars.isBeingSet == 0) {
 8005ee4:	4b3c      	ldr	r3, [pc, #240]	; (8005fd8 <updateClockDisplay+0x124>)
 8005ee6:	781b      	ldrb	r3, [r3, #0]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d11c      	bne.n	8005f26 <updateClockDisplay+0x72>
		getDateTime(&currentDate, &currentTime, hrtc);
 8005eec:	687a      	ldr	r2, [r7, #4]
 8005eee:	240c      	movs	r4, #12
 8005ef0:	1939      	adds	r1, r7, r4
 8005ef2:	2510      	movs	r5, #16
 8005ef4:	197b      	adds	r3, r7, r5
 8005ef6:	0018      	movs	r0, r3
 8005ef8:	f7fd fb58 	bl	80035ac <getDateTime>
		drawClock(&currentDate, &currentTime, hspi);
 8005efc:	683a      	ldr	r2, [r7, #0]
 8005efe:	1939      	adds	r1, r7, r4
 8005f00:	197b      	adds	r3, r7, r5
 8005f02:	0018      	movs	r0, r3
 8005f04:	f000 fc2a 	bl	800675c <drawClock>

		setTextSize(1);
 8005f08:	2001      	movs	r0, #1
 8005f0a:	f7fc ff9d 	bl	8002e48 <setTextSize>
		// clear line that says "setting ___"
		clearTextLine(44, hspi);
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	0019      	movs	r1, r3
 8005f12:	202c      	movs	r0, #44	; 0x2c
 8005f14:	f7fc ff4e 	bl	8002db4 <clearTextLine>

		// draw button text
		drawButtonText("", "", "set", hspi);
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	4a30      	ldr	r2, [pc, #192]	; (8005fdc <updateClockDisplay+0x128>)
 8005f1c:	4930      	ldr	r1, [pc, #192]	; (8005fe0 <updateClockDisplay+0x12c>)
 8005f1e:	4830      	ldr	r0, [pc, #192]	; (8005fe0 <updateClockDisplay+0x12c>)
 8005f20:	f000 fae2 	bl	80064e8 <drawButtonText>
			default: break;
		}

		drawClock(clockVars.dateToSet, clockVars.timeToSet, hspi);
	}
}
 8005f24:	e054      	b.n	8005fd0 <updateClockDisplay+0x11c>
	else if (clockVars.isBeingSet == 1) {
 8005f26:	4b2c      	ldr	r3, [pc, #176]	; (8005fd8 <updateClockDisplay+0x124>)
 8005f28:	781b      	ldrb	r3, [r3, #0]
 8005f2a:	2b01      	cmp	r3, #1
 8005f2c:	d150      	bne.n	8005fd0 <updateClockDisplay+0x11c>
		if (clockVars.fieldBeingSet == 1) drawButtonText("up", "down", "change", hspi);
 8005f2e:	4b2a      	ldr	r3, [pc, #168]	; (8005fd8 <updateClockDisplay+0x124>)
 8005f30:	785b      	ldrb	r3, [r3, #1]
 8005f32:	2b01      	cmp	r3, #1
 8005f34:	d105      	bne.n	8005f42 <updateClockDisplay+0x8e>
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	4a2a      	ldr	r2, [pc, #168]	; (8005fe4 <updateClockDisplay+0x130>)
 8005f3a:	492b      	ldr	r1, [pc, #172]	; (8005fe8 <updateClockDisplay+0x134>)
 8005f3c:	482b      	ldr	r0, [pc, #172]	; (8005fec <updateClockDisplay+0x138>)
 8005f3e:	f000 fad3 	bl	80064e8 <drawButtonText>
		setTextSize(1);
 8005f42:	2001      	movs	r0, #1
 8005f44:	f7fc ff80 	bl	8002e48 <setTextSize>
		switch (clockVars.fieldBeingSet) {
 8005f48:	4b23      	ldr	r3, [pc, #140]	; (8005fd8 <updateClockDisplay+0x124>)
 8005f4a:	785b      	ldrb	r3, [r3, #1]
 8005f4c:	2b05      	cmp	r3, #5
 8005f4e:	d836      	bhi.n	8005fbe <updateClockDisplay+0x10a>
 8005f50:	009a      	lsls	r2, r3, #2
 8005f52:	4b27      	ldr	r3, [pc, #156]	; (8005ff0 <updateClockDisplay+0x13c>)
 8005f54:	18d3      	adds	r3, r2, r3
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	469f      	mov	pc, r3
			case 1:	drawCenteredTextWithPadding(WIDTH/2, 44, 17, "setting minute...", hspi); break;
 8005f5a:	4a26      	ldr	r2, [pc, #152]	; (8005ff4 <updateClockDisplay+0x140>)
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	9300      	str	r3, [sp, #0]
 8005f60:	0013      	movs	r3, r2
 8005f62:	2211      	movs	r2, #17
 8005f64:	212c      	movs	r1, #44	; 0x2c
 8005f66:	2040      	movs	r0, #64	; 0x40
 8005f68:	f7fc fe4c 	bl	8002c04 <drawCenteredTextWithPadding>
 8005f6c:	e028      	b.n	8005fc0 <updateClockDisplay+0x10c>
			case 2:	drawCenteredTextWithPadding(WIDTH/2, 44, 17, "setting hour...", hspi);	break;
 8005f6e:	4a22      	ldr	r2, [pc, #136]	; (8005ff8 <updateClockDisplay+0x144>)
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	9300      	str	r3, [sp, #0]
 8005f74:	0013      	movs	r3, r2
 8005f76:	2211      	movs	r2, #17
 8005f78:	212c      	movs	r1, #44	; 0x2c
 8005f7a:	2040      	movs	r0, #64	; 0x40
 8005f7c:	f7fc fe42 	bl	8002c04 <drawCenteredTextWithPadding>
 8005f80:	e01e      	b.n	8005fc0 <updateClockDisplay+0x10c>
			case 3: drawCenteredTextWithPadding(WIDTH/2, 44, 17, "setting year...", hspi); break;
 8005f82:	4a1e      	ldr	r2, [pc, #120]	; (8005ffc <updateClockDisplay+0x148>)
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	9300      	str	r3, [sp, #0]
 8005f88:	0013      	movs	r3, r2
 8005f8a:	2211      	movs	r2, #17
 8005f8c:	212c      	movs	r1, #44	; 0x2c
 8005f8e:	2040      	movs	r0, #64	; 0x40
 8005f90:	f7fc fe38 	bl	8002c04 <drawCenteredTextWithPadding>
 8005f94:	e014      	b.n	8005fc0 <updateClockDisplay+0x10c>
			case 4: drawCenteredTextWithPadding(WIDTH/2, 44, 17, "setting month...", hspi); break;
 8005f96:	4a1a      	ldr	r2, [pc, #104]	; (8006000 <updateClockDisplay+0x14c>)
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	9300      	str	r3, [sp, #0]
 8005f9c:	0013      	movs	r3, r2
 8005f9e:	2211      	movs	r2, #17
 8005fa0:	212c      	movs	r1, #44	; 0x2c
 8005fa2:	2040      	movs	r0, #64	; 0x40
 8005fa4:	f7fc fe2e 	bl	8002c04 <drawCenteredTextWithPadding>
 8005fa8:	e00a      	b.n	8005fc0 <updateClockDisplay+0x10c>
			case 5: drawCenteredTextWithPadding(WIDTH/2, 44, 17, "setting date...", hspi); break;
 8005faa:	4a16      	ldr	r2, [pc, #88]	; (8006004 <updateClockDisplay+0x150>)
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	9300      	str	r3, [sp, #0]
 8005fb0:	0013      	movs	r3, r2
 8005fb2:	2211      	movs	r2, #17
 8005fb4:	212c      	movs	r1, #44	; 0x2c
 8005fb6:	2040      	movs	r0, #64	; 0x40
 8005fb8:	f7fc fe24 	bl	8002c04 <drawCenteredTextWithPadding>
 8005fbc:	e000      	b.n	8005fc0 <updateClockDisplay+0x10c>
			default: break;
 8005fbe:	46c0      	nop			; (mov r8, r8)
		drawClock(clockVars.dateToSet, clockVars.timeToSet, hspi);
 8005fc0:	4b05      	ldr	r3, [pc, #20]	; (8005fd8 <updateClockDisplay+0x124>)
 8005fc2:	6858      	ldr	r0, [r3, #4]
 8005fc4:	4b04      	ldr	r3, [pc, #16]	; (8005fd8 <updateClockDisplay+0x124>)
 8005fc6:	689b      	ldr	r3, [r3, #8]
 8005fc8:	683a      	ldr	r2, [r7, #0]
 8005fca:	0019      	movs	r1, r3
 8005fcc:	f000 fbc6 	bl	800675c <drawClock>
}
 8005fd0:	46c0      	nop			; (mov r8, r8)
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	b006      	add	sp, #24
 8005fd6:	bdb0      	pop	{r4, r5, r7, pc}
 8005fd8:	2000011c 	.word	0x2000011c
 8005fdc:	0800c2dc 	.word	0x0800c2dc
 8005fe0:	0800c23c 	.word	0x0800c23c
 8005fe4:	0800c2e0 	.word	0x0800c2e0
 8005fe8:	0800c2e8 	.word	0x0800c2e8
 8005fec:	0800c2f0 	.word	0x0800c2f0
 8005ff0:	0800cddc 	.word	0x0800cddc
 8005ff4:	0800c2f4 	.word	0x0800c2f4
 8005ff8:	0800c308 	.word	0x0800c308
 8005ffc:	0800c318 	.word	0x0800c318
 8006000:	0800c328 	.word	0x0800c328
 8006004:	0800c33c 	.word	0x0800c33c

08006008 <updateTimerDisplay>:

// helper function for drawing all elements for timer display
void updateTimerDisplay(SPI_HandleTypeDef *hspi) {
 8006008:	b590      	push	{r4, r7, lr}
 800600a:	b087      	sub	sp, #28
 800600c:	af02      	add	r7, sp, #8
 800600e:	6078      	str	r0, [r7, #4]
	struct times currentTimer = {0};
 8006010:	230c      	movs	r3, #12
 8006012:	18fb      	adds	r3, r7, r3
 8006014:	0018      	movs	r0, r3
 8006016:	2303      	movs	r3, #3
 8006018:	001a      	movs	r2, r3
 800601a:	2100      	movs	r1, #0
 800601c:	f005 fcaf 	bl	800b97e <memset>

	setTextColor(ST77XX_BLACK);
 8006020:	2000      	movs	r0, #0
 8006022:	f7fc ff21 	bl	8002e68 <setTextColor>
	if (timerVars.isBeingSet == 0) {
 8006026:	4b64      	ldr	r3, [pc, #400]	; (80061b8 <updateTimerDisplay+0x1b0>)
 8006028:	781b      	ldrb	r3, [r3, #0]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d000      	beq.n	8006030 <updateTimerDisplay+0x28>
 800602e:	e087      	b.n	8006140 <updateTimerDisplay+0x138>
		if (timerVars.isSet == 0) {
 8006030:	4b61      	ldr	r3, [pc, #388]	; (80061b8 <updateTimerDisplay+0x1b0>)
 8006032:	789b      	ldrb	r3, [r3, #2]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d11f      	bne.n	8006078 <updateTimerDisplay+0x70>
			setTextSize(2);
 8006038:	2002      	movs	r0, #2
 800603a:	f7fc ff05 	bl	8002e48 <setTextSize>
			clearTextLine(68, hspi);	// clear timer time text
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	0019      	movs	r1, r3
 8006042:	2044      	movs	r0, #68	; 0x44
 8006044:	f7fc feb6 	bl	8002db4 <clearTextLine>

			// write "timer unset"
			setTextSize(1);
 8006048:	2001      	movs	r0, #1
 800604a:	f7fc fefd 	bl	8002e48 <setTextSize>
			clearTextLine(52, hspi);	// clear setting ___ text
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	0019      	movs	r1, r3
 8006052:	2034      	movs	r0, #52	; 0x34
 8006054:	f7fc feae 	bl	8002db4 <clearTextLine>
			drawCenteredTextWithPadding(WIDTH/2, 84, 12, "timer unset", hspi);
 8006058:	4a58      	ldr	r2, [pc, #352]	; (80061bc <updateTimerDisplay+0x1b4>)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	9300      	str	r3, [sp, #0]
 800605e:	0013      	movs	r3, r2
 8006060:	220c      	movs	r2, #12
 8006062:	2154      	movs	r1, #84	; 0x54
 8006064:	2040      	movs	r0, #64	; 0x40
 8006066:	f7fc fdcd 	bl	8002c04 <drawCenteredTextWithPadding>

			// draw button text
			drawButtonText("", "", "set", hspi);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	4a54      	ldr	r2, [pc, #336]	; (80061c0 <updateTimerDisplay+0x1b8>)
 800606e:	4955      	ldr	r1, [pc, #340]	; (80061c4 <updateTimerDisplay+0x1bc>)
 8006070:	4854      	ldr	r0, [pc, #336]	; (80061c4 <updateTimerDisplay+0x1bc>)
 8006072:	f000 fa39 	bl	80064e8 <drawButtonText>
			default: break;
		}

		drawTimer(timerVars.timeToSet, hspi);
	}
}
 8006076:	e09b      	b.n	80061b0 <updateTimerDisplay+0x1a8>
		else if (isTimerDone == 0) {
 8006078:	4b53      	ldr	r3, [pc, #332]	; (80061c8 <updateTimerDisplay+0x1c0>)
 800607a:	781b      	ldrb	r3, [r3, #0]
 800607c:	b2db      	uxtb	r3, r3
 800607e:	2b00      	cmp	r3, #0
 8006080:	d143      	bne.n	800610a <updateTimerDisplay+0x102>
			secondsToTime(&currentTimer, timerCounter);
 8006082:	4b52      	ldr	r3, [pc, #328]	; (80061cc <updateTimerDisplay+0x1c4>)
 8006084:	681a      	ldr	r2, [r3, #0]
 8006086:	240c      	movs	r4, #12
 8006088:	193b      	adds	r3, r7, r4
 800608a:	0011      	movs	r1, r2
 800608c:	0018      	movs	r0, r3
 800608e:	f7fd fb4c 	bl	800372a <secondsToTime>
			drawTimer(&currentTimer, hspi);
 8006092:	687a      	ldr	r2, [r7, #4]
 8006094:	193b      	adds	r3, r7, r4
 8006096:	0011      	movs	r1, r2
 8006098:	0018      	movs	r0, r3
 800609a:	f000 fc5b 	bl	8006954 <drawTimer>
			setTextSize(1);
 800609e:	2001      	movs	r0, #1
 80060a0:	f7fc fed2 	bl	8002e48 <setTextSize>
			clearTextLine(52, hspi);	// clear setting ___ text
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	0019      	movs	r1, r3
 80060a8:	2034      	movs	r0, #52	; 0x34
 80060aa:	f7fc fe83 	bl	8002db4 <clearTextLine>
			if (isTimerPaused == 1) {
 80060ae:	4b48      	ldr	r3, [pc, #288]	; (80061d0 <updateTimerDisplay+0x1c8>)
 80060b0:	781b      	ldrb	r3, [r3, #0]
 80060b2:	b2db      	uxtb	r3, r3
 80060b4:	2b01      	cmp	r3, #1
 80060b6:	d109      	bne.n	80060cc <updateTimerDisplay+0xc4>
				drawCenteredTextWithPadding(WIDTH/2, 84, 12, "timer paused", hspi);
 80060b8:	4a46      	ldr	r2, [pc, #280]	; (80061d4 <updateTimerDisplay+0x1cc>)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	9300      	str	r3, [sp, #0]
 80060be:	0013      	movs	r3, r2
 80060c0:	220c      	movs	r2, #12
 80060c2:	2154      	movs	r1, #84	; 0x54
 80060c4:	2040      	movs	r0, #64	; 0x40
 80060c6:	f7fc fd9d 	bl	8002c04 <drawCenteredTextWithPadding>
 80060ca:	e017      	b.n	80060fc <updateTimerDisplay+0xf4>
			else if (isTimerRunning == 0 && timerCounter != 0) {
 80060cc:	4b42      	ldr	r3, [pc, #264]	; (80061d8 <updateTimerDisplay+0x1d0>)
 80060ce:	781b      	ldrb	r3, [r3, #0]
 80060d0:	b2db      	uxtb	r3, r3
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d10d      	bne.n	80060f2 <updateTimerDisplay+0xea>
 80060d6:	4b3d      	ldr	r3, [pc, #244]	; (80061cc <updateTimerDisplay+0x1c4>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d009      	beq.n	80060f2 <updateTimerDisplay+0xea>
				drawCenteredTextWithPadding(WIDTH/2, 84, 12, "timer set!", hspi);
 80060de:	4a3f      	ldr	r2, [pc, #252]	; (80061dc <updateTimerDisplay+0x1d4>)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	9300      	str	r3, [sp, #0]
 80060e4:	0013      	movs	r3, r2
 80060e6:	220c      	movs	r2, #12
 80060e8:	2154      	movs	r1, #84	; 0x54
 80060ea:	2040      	movs	r0, #64	; 0x40
 80060ec:	f7fc fd8a 	bl	8002c04 <drawCenteredTextWithPadding>
 80060f0:	e004      	b.n	80060fc <updateTimerDisplay+0xf4>
				clearTextLine(84, hspi);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	0019      	movs	r1, r3
 80060f6:	2054      	movs	r0, #84	; 0x54
 80060f8:	f7fc fe5c 	bl	8002db4 <clearTextLine>
			drawButtonText("run", "pause", "clear", hspi);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	4a38      	ldr	r2, [pc, #224]	; (80061e0 <updateTimerDisplay+0x1d8>)
 8006100:	4938      	ldr	r1, [pc, #224]	; (80061e4 <updateTimerDisplay+0x1dc>)
 8006102:	4839      	ldr	r0, [pc, #228]	; (80061e8 <updateTimerDisplay+0x1e0>)
 8006104:	f000 f9f0 	bl	80064e8 <drawButtonText>
}
 8006108:	e052      	b.n	80061b0 <updateTimerDisplay+0x1a8>
			secondsToTime(&currentTimer, timerCounter);
 800610a:	4b30      	ldr	r3, [pc, #192]	; (80061cc <updateTimerDisplay+0x1c4>)
 800610c:	681a      	ldr	r2, [r3, #0]
 800610e:	240c      	movs	r4, #12
 8006110:	193b      	adds	r3, r7, r4
 8006112:	0011      	movs	r1, r2
 8006114:	0018      	movs	r0, r3
 8006116:	f7fd fb08 	bl	800372a <secondsToTime>
			drawTimer(&currentTimer, hspi);
 800611a:	687a      	ldr	r2, [r7, #4]
 800611c:	193b      	adds	r3, r7, r4
 800611e:	0011      	movs	r1, r2
 8006120:	0018      	movs	r0, r3
 8006122:	f000 fc17 	bl	8006954 <drawTimer>
			setTextSize(1);
 8006126:	2001      	movs	r0, #1
 8006128:	f7fc fe8e 	bl	8002e48 <setTextSize>
			drawCenteredTextWithPadding(WIDTH/2, 84, 12, "timer done!", hspi);
 800612c:	4a2f      	ldr	r2, [pc, #188]	; (80061ec <updateTimerDisplay+0x1e4>)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	9300      	str	r3, [sp, #0]
 8006132:	0013      	movs	r3, r2
 8006134:	220c      	movs	r2, #12
 8006136:	2154      	movs	r1, #84	; 0x54
 8006138:	2040      	movs	r0, #64	; 0x40
 800613a:	f7fc fd63 	bl	8002c04 <drawCenteredTextWithPadding>
}
 800613e:	e037      	b.n	80061b0 <updateTimerDisplay+0x1a8>
	else if (timerVars.isBeingSet == 1) {
 8006140:	4b1d      	ldr	r3, [pc, #116]	; (80061b8 <updateTimerDisplay+0x1b0>)
 8006142:	781b      	ldrb	r3, [r3, #0]
 8006144:	2b01      	cmp	r3, #1
 8006146:	d133      	bne.n	80061b0 <updateTimerDisplay+0x1a8>
		drawButtonText("up", "down", "change", hspi);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	4a29      	ldr	r2, [pc, #164]	; (80061f0 <updateTimerDisplay+0x1e8>)
 800614c:	4929      	ldr	r1, [pc, #164]	; (80061f4 <updateTimerDisplay+0x1ec>)
 800614e:	482a      	ldr	r0, [pc, #168]	; (80061f8 <updateTimerDisplay+0x1f0>)
 8006150:	f000 f9ca 	bl	80064e8 <drawButtonText>
		switch (timerVars.fieldBeingSet) {
 8006154:	4b18      	ldr	r3, [pc, #96]	; (80061b8 <updateTimerDisplay+0x1b0>)
 8006156:	785b      	ldrb	r3, [r3, #1]
 8006158:	2b02      	cmp	r3, #2
 800615a:	d00e      	beq.n	800617a <updateTimerDisplay+0x172>
 800615c:	2b03      	cmp	r3, #3
 800615e:	d016      	beq.n	800618e <updateTimerDisplay+0x186>
 8006160:	2b01      	cmp	r3, #1
 8006162:	d000      	beq.n	8006166 <updateTimerDisplay+0x15e>
			default: break;
 8006164:	e01d      	b.n	80061a2 <updateTimerDisplay+0x19a>
			case 1: drawCenteredTextWithPadding(WIDTH/2, 52, 17, "setting second...", hspi); break;
 8006166:	4a25      	ldr	r2, [pc, #148]	; (80061fc <updateTimerDisplay+0x1f4>)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	9300      	str	r3, [sp, #0]
 800616c:	0013      	movs	r3, r2
 800616e:	2211      	movs	r2, #17
 8006170:	2134      	movs	r1, #52	; 0x34
 8006172:	2040      	movs	r0, #64	; 0x40
 8006174:	f7fc fd46 	bl	8002c04 <drawCenteredTextWithPadding>
 8006178:	e013      	b.n	80061a2 <updateTimerDisplay+0x19a>
			case 2: drawCenteredTextWithPadding(WIDTH/2, 52, 17, "setting minute...", hspi); break;
 800617a:	4a21      	ldr	r2, [pc, #132]	; (8006200 <updateTimerDisplay+0x1f8>)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	9300      	str	r3, [sp, #0]
 8006180:	0013      	movs	r3, r2
 8006182:	2211      	movs	r2, #17
 8006184:	2134      	movs	r1, #52	; 0x34
 8006186:	2040      	movs	r0, #64	; 0x40
 8006188:	f7fc fd3c 	bl	8002c04 <drawCenteredTextWithPadding>
 800618c:	e009      	b.n	80061a2 <updateTimerDisplay+0x19a>
			case 3: drawCenteredTextWithPadding(WIDTH/2, 52, 17, "setting hour...", hspi); break;
 800618e:	4a1d      	ldr	r2, [pc, #116]	; (8006204 <updateTimerDisplay+0x1fc>)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	9300      	str	r3, [sp, #0]
 8006194:	0013      	movs	r3, r2
 8006196:	2211      	movs	r2, #17
 8006198:	2134      	movs	r1, #52	; 0x34
 800619a:	2040      	movs	r0, #64	; 0x40
 800619c:	f7fc fd32 	bl	8002c04 <drawCenteredTextWithPadding>
 80061a0:	46c0      	nop			; (mov r8, r8)
		drawTimer(timerVars.timeToSet, hspi);
 80061a2:	4b05      	ldr	r3, [pc, #20]	; (80061b8 <updateTimerDisplay+0x1b0>)
 80061a4:	685b      	ldr	r3, [r3, #4]
 80061a6:	687a      	ldr	r2, [r7, #4]
 80061a8:	0011      	movs	r1, r2
 80061aa:	0018      	movs	r0, r3
 80061ac:	f000 fbd2 	bl	8006954 <drawTimer>
}
 80061b0:	46c0      	nop			; (mov r8, r8)
 80061b2:	46bd      	mov	sp, r7
 80061b4:	b005      	add	sp, #20
 80061b6:	bd90      	pop	{r4, r7, pc}
 80061b8:	20000128 	.word	0x20000128
 80061bc:	0800c34c 	.word	0x0800c34c
 80061c0:	0800c2dc 	.word	0x0800c2dc
 80061c4:	0800c23c 	.word	0x0800c23c
 80061c8:	2000015c 	.word	0x2000015c
 80061cc:	20000158 	.word	0x20000158
 80061d0:	200001a2 	.word	0x200001a2
 80061d4:	0800c358 	.word	0x0800c358
 80061d8:	200001a0 	.word	0x200001a0
 80061dc:	0800c368 	.word	0x0800c368
 80061e0:	0800c374 	.word	0x0800c374
 80061e4:	0800c37c 	.word	0x0800c37c
 80061e8:	0800c384 	.word	0x0800c384
 80061ec:	0800c388 	.word	0x0800c388
 80061f0:	0800c2e0 	.word	0x0800c2e0
 80061f4:	0800c2e8 	.word	0x0800c2e8
 80061f8:	0800c2f0 	.word	0x0800c2f0
 80061fc:	0800c394 	.word	0x0800c394
 8006200:	0800c2f4 	.word	0x0800c2f4
 8006204:	0800c308 	.word	0x0800c308

08006208 <updateAlarmDisplay>:

// helper function for drawing all elements for alarm display
void updateAlarmDisplay(SPI_HandleTypeDef *hspi) {
 8006208:	b580      	push	{r7, lr}
 800620a:	b084      	sub	sp, #16
 800620c:	af02      	add	r7, sp, #8
 800620e:	6078      	str	r0, [r7, #4]
	setTextColor(ST77XX_BLACK);
 8006210:	2000      	movs	r0, #0
 8006212:	f7fc fe29 	bl	8002e68 <setTextColor>
	if (alarmVars.isBeingSet == 0) {
 8006216:	4b54      	ldr	r3, [pc, #336]	; (8006368 <updateAlarmDisplay+0x160>)
 8006218:	781b      	ldrb	r3, [r3, #0]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d157      	bne.n	80062ce <updateAlarmDisplay+0xc6>
		setTextSize(1);
 800621e:	2001      	movs	r0, #1
 8006220:	f7fc fe12 	bl	8002e48 <setTextSize>
		clearTextLine(52, hspi);	// clear "setting..." text
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	0019      	movs	r1, r3
 8006228:	2034      	movs	r0, #52	; 0x34
 800622a:	f7fc fdc3 	bl	8002db4 <clearTextLine>
		clearTextLine(60, hspi);	// clear am/pm text
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	0019      	movs	r1, r3
 8006232:	203c      	movs	r0, #60	; 0x3c
 8006234:	f7fc fdbe 	bl	8002db4 <clearTextLine>
		if (alarmVars.isSet == 0) {
 8006238:	4b4b      	ldr	r3, [pc, #300]	; (8006368 <updateAlarmDisplay+0x160>)
 800623a:	789b      	ldrb	r3, [r3, #2]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d11a      	bne.n	8006276 <updateAlarmDisplay+0x6e>
			setTextSize(3);
 8006240:	2003      	movs	r0, #3
 8006242:	f7fc fe01 	bl	8002e48 <setTextSize>
			clearTextLine(68, hspi);	// clear alarm time text
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	0019      	movs	r1, r3
 800624a:	2044      	movs	r0, #68	; 0x44
 800624c:	f7fc fdb2 	bl	8002db4 <clearTextLine>

			setTextSize(1);
 8006250:	2001      	movs	r0, #1
 8006252:	f7fc fdf9 	bl	8002e48 <setTextSize>
			drawCenteredTextWithPadding(WIDTH/2, 100, 11, "alarm unset", hspi);
 8006256:	4a45      	ldr	r2, [pc, #276]	; (800636c <updateAlarmDisplay+0x164>)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	9300      	str	r3, [sp, #0]
 800625c:	0013      	movs	r3, r2
 800625e:	220b      	movs	r2, #11
 8006260:	2164      	movs	r1, #100	; 0x64
 8006262:	2040      	movs	r0, #64	; 0x40
 8006264:	f7fc fcce 	bl	8002c04 <drawCenteredTextWithPadding>

			// draw button text
			drawButtonText("", "", "set", hspi);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	4a41      	ldr	r2, [pc, #260]	; (8006370 <updateAlarmDisplay+0x168>)
 800626c:	4941      	ldr	r1, [pc, #260]	; (8006374 <updateAlarmDisplay+0x16c>)
 800626e:	4841      	ldr	r0, [pc, #260]	; (8006374 <updateAlarmDisplay+0x16c>)
 8006270:	f000 f93a 	bl	80064e8 <drawButtonText>
		drawButtonText("up", "down", "change", hspi);

		// draw alarm
		drawAlarm(alarmVars.alarmToSet, hspi);
	}
}
 8006274:	e074      	b.n	8006360 <updateAlarmDisplay+0x158>
		else if (isAlarmDone == 0) {
 8006276:	4b40      	ldr	r3, [pc, #256]	; (8006378 <updateAlarmDisplay+0x170>)
 8006278:	781b      	ldrb	r3, [r3, #0]
 800627a:	b2db      	uxtb	r3, r3
 800627c:	2b00      	cmp	r3, #0
 800627e:	d119      	bne.n	80062b4 <updateAlarmDisplay+0xac>
			setTextSize(1);
 8006280:	2001      	movs	r0, #1
 8006282:	f7fc fde1 	bl	8002e48 <setTextSize>
			drawCenteredTextWithPadding(WIDTH/2, 100, 11, "alarm set", hspi);
 8006286:	4a3d      	ldr	r2, [pc, #244]	; (800637c <updateAlarmDisplay+0x174>)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	9300      	str	r3, [sp, #0]
 800628c:	0013      	movs	r3, r2
 800628e:	220b      	movs	r2, #11
 8006290:	2164      	movs	r1, #100	; 0x64
 8006292:	2040      	movs	r0, #64	; 0x40
 8006294:	f7fc fcb6 	bl	8002c04 <drawCenteredTextWithPadding>
			drawAlarm(alarmVars.alarmToSet, hspi);
 8006298:	4b33      	ldr	r3, [pc, #204]	; (8006368 <updateAlarmDisplay+0x160>)
 800629a:	685b      	ldr	r3, [r3, #4]
 800629c:	687a      	ldr	r2, [r7, #4]
 800629e:	0011      	movs	r1, r2
 80062a0:	0018      	movs	r0, r3
 80062a2:	f000 fb7d 	bl	80069a0 <drawAlarm>
			drawButtonText("", "", "clear", hspi);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	4a35      	ldr	r2, [pc, #212]	; (8006380 <updateAlarmDisplay+0x178>)
 80062aa:	4932      	ldr	r1, [pc, #200]	; (8006374 <updateAlarmDisplay+0x16c>)
 80062ac:	4831      	ldr	r0, [pc, #196]	; (8006374 <updateAlarmDisplay+0x16c>)
 80062ae:	f000 f91b 	bl	80064e8 <drawButtonText>
}
 80062b2:	e055      	b.n	8006360 <updateAlarmDisplay+0x158>
			setTextSize(1);
 80062b4:	2001      	movs	r0, #1
 80062b6:	f7fc fdc7 	bl	8002e48 <setTextSize>
			drawCenteredTextWithPadding(WIDTH/2, 100, 11, "alarm done!", hspi);
 80062ba:	4a32      	ldr	r2, [pc, #200]	; (8006384 <updateAlarmDisplay+0x17c>)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	9300      	str	r3, [sp, #0]
 80062c0:	0013      	movs	r3, r2
 80062c2:	220b      	movs	r2, #11
 80062c4:	2164      	movs	r1, #100	; 0x64
 80062c6:	2040      	movs	r0, #64	; 0x40
 80062c8:	f7fc fc9c 	bl	8002c04 <drawCenteredTextWithPadding>
}
 80062cc:	e048      	b.n	8006360 <updateAlarmDisplay+0x158>
	else if (alarmVars.isBeingSet == 1) {
 80062ce:	4b26      	ldr	r3, [pc, #152]	; (8006368 <updateAlarmDisplay+0x160>)
 80062d0:	781b      	ldrb	r3, [r3, #0]
 80062d2:	2b01      	cmp	r3, #1
 80062d4:	d144      	bne.n	8006360 <updateAlarmDisplay+0x158>
		setTextSize(1);
 80062d6:	2001      	movs	r0, #1
 80062d8:	f7fc fdb6 	bl	8002e48 <setTextSize>
		switch (alarmVars.fieldBeingSet) {
 80062dc:	4b22      	ldr	r3, [pc, #136]	; (8006368 <updateAlarmDisplay+0x160>)
 80062de:	785b      	ldrb	r3, [r3, #1]
 80062e0:	2b02      	cmp	r3, #2
 80062e2:	d012      	beq.n	800630a <updateAlarmDisplay+0x102>
 80062e4:	dc02      	bgt.n	80062ec <updateAlarmDisplay+0xe4>
 80062e6:	2b01      	cmp	r3, #1
 80062e8:	d005      	beq.n	80062f6 <updateAlarmDisplay+0xee>
			default: break;
 80062ea:	e02c      	b.n	8006346 <updateAlarmDisplay+0x13e>
		switch (alarmVars.fieldBeingSet) {
 80062ec:	2b03      	cmp	r3, #3
 80062ee:	d016      	beq.n	800631e <updateAlarmDisplay+0x116>
 80062f0:	2b04      	cmp	r3, #4
 80062f2:	d01e      	beq.n	8006332 <updateAlarmDisplay+0x12a>
			default: break;
 80062f4:	e027      	b.n	8006346 <updateAlarmDisplay+0x13e>
			case 1: drawCenteredTextWithPadding(WIDTH/2, 52, 17, "setting second...", hspi); break;
 80062f6:	4a24      	ldr	r2, [pc, #144]	; (8006388 <updateAlarmDisplay+0x180>)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	9300      	str	r3, [sp, #0]
 80062fc:	0013      	movs	r3, r2
 80062fe:	2211      	movs	r2, #17
 8006300:	2134      	movs	r1, #52	; 0x34
 8006302:	2040      	movs	r0, #64	; 0x40
 8006304:	f7fc fc7e 	bl	8002c04 <drawCenteredTextWithPadding>
 8006308:	e01d      	b.n	8006346 <updateAlarmDisplay+0x13e>
			case 2: drawCenteredTextWithPadding(WIDTH/2, 52, 17, "setting minute...", hspi); break;
 800630a:	4a20      	ldr	r2, [pc, #128]	; (800638c <updateAlarmDisplay+0x184>)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	9300      	str	r3, [sp, #0]
 8006310:	0013      	movs	r3, r2
 8006312:	2211      	movs	r2, #17
 8006314:	2134      	movs	r1, #52	; 0x34
 8006316:	2040      	movs	r0, #64	; 0x40
 8006318:	f7fc fc74 	bl	8002c04 <drawCenteredTextWithPadding>
 800631c:	e013      	b.n	8006346 <updateAlarmDisplay+0x13e>
			case 3: drawCenteredTextWithPadding(WIDTH/2, 52, 17, "setting hour...", hspi); break;
 800631e:	4a1c      	ldr	r2, [pc, #112]	; (8006390 <updateAlarmDisplay+0x188>)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	9300      	str	r3, [sp, #0]
 8006324:	0013      	movs	r3, r2
 8006326:	2211      	movs	r2, #17
 8006328:	2134      	movs	r1, #52	; 0x34
 800632a:	2040      	movs	r0, #64	; 0x40
 800632c:	f7fc fc6a 	bl	8002c04 <drawCenteredTextWithPadding>
 8006330:	e009      	b.n	8006346 <updateAlarmDisplay+0x13e>
			case 4: drawCenteredTextWithPadding(WIDTH/2, 52, 17, "setting day...", hspi); break;
 8006332:	4a18      	ldr	r2, [pc, #96]	; (8006394 <updateAlarmDisplay+0x18c>)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	9300      	str	r3, [sp, #0]
 8006338:	0013      	movs	r3, r2
 800633a:	2211      	movs	r2, #17
 800633c:	2134      	movs	r1, #52	; 0x34
 800633e:	2040      	movs	r0, #64	; 0x40
 8006340:	f7fc fc60 	bl	8002c04 <drawCenteredTextWithPadding>
 8006344:	46c0      	nop			; (mov r8, r8)
		drawButtonText("up", "down", "change", hspi);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	4a13      	ldr	r2, [pc, #76]	; (8006398 <updateAlarmDisplay+0x190>)
 800634a:	4914      	ldr	r1, [pc, #80]	; (800639c <updateAlarmDisplay+0x194>)
 800634c:	4814      	ldr	r0, [pc, #80]	; (80063a0 <updateAlarmDisplay+0x198>)
 800634e:	f000 f8cb 	bl	80064e8 <drawButtonText>
		drawAlarm(alarmVars.alarmToSet, hspi);
 8006352:	4b05      	ldr	r3, [pc, #20]	; (8006368 <updateAlarmDisplay+0x160>)
 8006354:	685b      	ldr	r3, [r3, #4]
 8006356:	687a      	ldr	r2, [r7, #4]
 8006358:	0011      	movs	r1, r2
 800635a:	0018      	movs	r0, r3
 800635c:	f000 fb20 	bl	80069a0 <drawAlarm>
}
 8006360:	46c0      	nop			; (mov r8, r8)
 8006362:	46bd      	mov	sp, r7
 8006364:	b002      	add	sp, #8
 8006366:	bd80      	pop	{r7, pc}
 8006368:	20000130 	.word	0x20000130
 800636c:	0800c3a8 	.word	0x0800c3a8
 8006370:	0800c2dc 	.word	0x0800c2dc
 8006374:	0800c23c 	.word	0x0800c23c
 8006378:	2000014f 	.word	0x2000014f
 800637c:	0800c3b4 	.word	0x0800c3b4
 8006380:	0800c374 	.word	0x0800c374
 8006384:	0800c3c0 	.word	0x0800c3c0
 8006388:	0800c394 	.word	0x0800c394
 800638c:	0800c2f4 	.word	0x0800c2f4
 8006390:	0800c308 	.word	0x0800c308
 8006394:	0800c3cc 	.word	0x0800c3cc
 8006398:	0800c2e0 	.word	0x0800c2e0
 800639c:	0800c2e8 	.word	0x0800c2e8
 80063a0:	0800c2f0 	.word	0x0800c2f0

080063a4 <updateStopwatchDisplay>:

// helper function for drawing all elements for stopwatch display
void updateStopwatchDisplay(SPI_HandleTypeDef *hspi) {
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b082      	sub	sp, #8
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
	setTextColor(ST77XX_BLACK);
 80063ac:	2000      	movs	r0, #0
 80063ae:	f7fc fd5b 	bl	8002e68 <setTextColor>
	drawStopwatch(stopwatchCounter, hspi);
 80063b2:	4b16      	ldr	r3, [pc, #88]	; (800640c <updateStopwatchDisplay+0x68>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	687a      	ldr	r2, [r7, #4]
 80063b8:	0011      	movs	r1, r2
 80063ba:	0018      	movs	r0, r3
 80063bc:	f000 fb60 	bl	8006a80 <drawStopwatch>
	drawStopwatchLap(stopwatchVars.lapCurrent-stopwatchVars.lapPrev, hspi);
 80063c0:	4b13      	ldr	r3, [pc, #76]	; (8006410 <updateStopwatchDisplay+0x6c>)
 80063c2:	685a      	ldr	r2, [r3, #4]
 80063c4:	4b12      	ldr	r3, [pc, #72]	; (8006410 <updateStopwatchDisplay+0x6c>)
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	1ad3      	subs	r3, r2, r3
 80063ca:	687a      	ldr	r2, [r7, #4]
 80063cc:	0011      	movs	r1, r2
 80063ce:	0018      	movs	r0, r3
 80063d0:	f000 fb8e 	bl	8006af0 <drawStopwatchLap>

	if (isStopwatchRunning == 0) drawButtonText("run", "lap", "clear", hspi);
 80063d4:	4b0f      	ldr	r3, [pc, #60]	; (8006414 <updateStopwatchDisplay+0x70>)
 80063d6:	781b      	ldrb	r3, [r3, #0]
 80063d8:	b2db      	uxtb	r3, r3
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d106      	bne.n	80063ec <updateStopwatchDisplay+0x48>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	4a0d      	ldr	r2, [pc, #52]	; (8006418 <updateStopwatchDisplay+0x74>)
 80063e2:	490e      	ldr	r1, [pc, #56]	; (800641c <updateStopwatchDisplay+0x78>)
 80063e4:	480e      	ldr	r0, [pc, #56]	; (8006420 <updateStopwatchDisplay+0x7c>)
 80063e6:	f000 f87f 	bl	80064e8 <drawButtonText>
	else if (isStopwatchRunning == 1) drawButtonText("pause", "lap", "clear", hspi);
}
 80063ea:	e00a      	b.n	8006402 <updateStopwatchDisplay+0x5e>
	else if (isStopwatchRunning == 1) drawButtonText("pause", "lap", "clear", hspi);
 80063ec:	4b09      	ldr	r3, [pc, #36]	; (8006414 <updateStopwatchDisplay+0x70>)
 80063ee:	781b      	ldrb	r3, [r3, #0]
 80063f0:	b2db      	uxtb	r3, r3
 80063f2:	2b01      	cmp	r3, #1
 80063f4:	d105      	bne.n	8006402 <updateStopwatchDisplay+0x5e>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	4a07      	ldr	r2, [pc, #28]	; (8006418 <updateStopwatchDisplay+0x74>)
 80063fa:	4908      	ldr	r1, [pc, #32]	; (800641c <updateStopwatchDisplay+0x78>)
 80063fc:	4809      	ldr	r0, [pc, #36]	; (8006424 <updateStopwatchDisplay+0x80>)
 80063fe:	f000 f873 	bl	80064e8 <drawButtonText>
}
 8006402:	46c0      	nop			; (mov r8, r8)
 8006404:	46bd      	mov	sp, r7
 8006406:	b002      	add	sp, #8
 8006408:	bd80      	pop	{r7, pc}
 800640a:	46c0      	nop			; (mov r8, r8)
 800640c:	200001a4 	.word	0x200001a4
 8006410:	20000138 	.word	0x20000138
 8006414:	20000154 	.word	0x20000154
 8006418:	0800c374 	.word	0x0800c374
 800641c:	0800c3dc 	.word	0x0800c3dc
 8006420:	0800c384 	.word	0x0800c384
 8006424:	0800c37c 	.word	0x0800c37c

08006428 <drawButton>:

// ---- drawing functions related specifically to the user interface ----
// draws a 10x10 box representing a button onto the screen
void drawButton(uint8_t x_center, uint8_t y_center, SPI_HandleTypeDef *hspi) {
 8006428:	b580      	push	{r7, lr}
 800642a:	b084      	sub	sp, #16
 800642c:	af02      	add	r7, sp, #8
 800642e:	603a      	str	r2, [r7, #0]
 8006430:	1dfb      	adds	r3, r7, #7
 8006432:	1c02      	adds	r2, r0, #0
 8006434:	701a      	strb	r2, [r3, #0]
 8006436:	1dbb      	adds	r3, r7, #6
 8006438:	1c0a      	adds	r2, r1, #0
 800643a:	701a      	strb	r2, [r3, #0]
	// bounds checking. probably already done in draw/fillRect
	if (x_center-5 < 0 || x_center+5 > WIDTH || y_center-5 < 0 || y_center+5 > HEIGHT) return;
 800643c:	1dfb      	adds	r3, r7, #7
 800643e:	781b      	ldrb	r3, [r3, #0]
 8006440:	3b05      	subs	r3, #5
 8006442:	2b00      	cmp	r3, #0
 8006444:	db2f      	blt.n	80064a6 <drawButton+0x7e>
 8006446:	1dfb      	adds	r3, r7, #7
 8006448:	781b      	ldrb	r3, [r3, #0]
 800644a:	3305      	adds	r3, #5
 800644c:	2b80      	cmp	r3, #128	; 0x80
 800644e:	dc2a      	bgt.n	80064a6 <drawButton+0x7e>
 8006450:	1dbb      	adds	r3, r7, #6
 8006452:	781b      	ldrb	r3, [r3, #0]
 8006454:	3b05      	subs	r3, #5
 8006456:	2b00      	cmp	r3, #0
 8006458:	db25      	blt.n	80064a6 <drawButton+0x7e>
 800645a:	1dbb      	adds	r3, r7, #6
 800645c:	781b      	ldrb	r3, [r3, #0]
 800645e:	3305      	adds	r3, #5
 8006460:	2ba0      	cmp	r3, #160	; 0xa0
 8006462:	dc20      	bgt.n	80064a6 <drawButton+0x7e>

	// draw rect size 8 with 1 pixel border
	// parameters give center position of graphic
	drawRect(x_center-5, y_center-5, 10, 10, ST77XX_BLACK, hspi);
 8006464:	1dfb      	adds	r3, r7, #7
 8006466:	781b      	ldrb	r3, [r3, #0]
 8006468:	3b05      	subs	r3, #5
 800646a:	b2d8      	uxtb	r0, r3
 800646c:	1dbb      	adds	r3, r7, #6
 800646e:	781b      	ldrb	r3, [r3, #0]
 8006470:	3b05      	subs	r3, #5
 8006472:	b2d9      	uxtb	r1, r3
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	9301      	str	r3, [sp, #4]
 8006478:	2300      	movs	r3, #0
 800647a:	9300      	str	r3, [sp, #0]
 800647c:	230a      	movs	r3, #10
 800647e:	220a      	movs	r2, #10
 8006480:	f7fb feb7 	bl	80021f2 <drawRect>
	fillRect(x_center-4, y_center-4, 8, 8, ST77XX_WHITE, hspi);
 8006484:	1dfb      	adds	r3, r7, #7
 8006486:	781b      	ldrb	r3, [r3, #0]
 8006488:	3b04      	subs	r3, #4
 800648a:	b2d8      	uxtb	r0, r3
 800648c:	1dbb      	adds	r3, r7, #6
 800648e:	781b      	ldrb	r3, [r3, #0]
 8006490:	3b04      	subs	r3, #4
 8006492:	b2d9      	uxtb	r1, r3
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	9301      	str	r3, [sp, #4]
 8006498:	4b05      	ldr	r3, [pc, #20]	; (80064b0 <drawButton+0x88>)
 800649a:	9300      	str	r3, [sp, #0]
 800649c:	2308      	movs	r3, #8
 800649e:	2208      	movs	r2, #8
 80064a0:	f7fb feff 	bl	80022a2 <fillRect>
 80064a4:	e000      	b.n	80064a8 <drawButton+0x80>
	if (x_center-5 < 0 || x_center+5 > WIDTH || y_center-5 < 0 || y_center+5 > HEIGHT) return;
 80064a6:	46c0      	nop			; (mov r8, r8)
}
 80064a8:	46bd      	mov	sp, r7
 80064aa:	b002      	add	sp, #8
 80064ac:	bd80      	pop	{r7, pc}
 80064ae:	46c0      	nop			; (mov r8, r8)
 80064b0:	0000ffff 	.word	0x0000ffff

080064b4 <drawButtons>:

// draws 3 buttons to represent important ui buttons and tell the user their action
void drawButtons(SPI_HandleTypeDef *hspi) {
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b082      	sub	sp, #8
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
	// 3 buttons. positioned so their text boxes, which are centered over button, can have equal spacing left and right
	drawButton(22, HEIGHT-15, hspi);		// button 1
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	001a      	movs	r2, r3
 80064c0:	2191      	movs	r1, #145	; 0x91
 80064c2:	2016      	movs	r0, #22
 80064c4:	f7ff ffb0 	bl	8006428 <drawButton>
	drawButton(64, HEIGHT-15, hspi);		// button 2
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	001a      	movs	r2, r3
 80064cc:	2191      	movs	r1, #145	; 0x91
 80064ce:	2040      	movs	r0, #64	; 0x40
 80064d0:	f7ff ffaa 	bl	8006428 <drawButton>
	drawButton(106, HEIGHT-15, hspi);		// button 3
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	001a      	movs	r2, r3
 80064d8:	2191      	movs	r1, #145	; 0x91
 80064da:	206a      	movs	r0, #106	; 0x6a
 80064dc:	f7ff ffa4 	bl	8006428 <drawButton>
}
 80064e0:	46c0      	nop			; (mov r8, r8)
 80064e2:	46bd      	mov	sp, r7
 80064e4:	b002      	add	sp, #8
 80064e6:	bd80      	pop	{r7, pc}

080064e8 <drawButtonText>:

// draws text that goes a few pixels over the button
void drawButtonText(const char *str1, const char *str2, const char *str3, SPI_HandleTypeDef *hspi) {
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b086      	sub	sp, #24
 80064ec:	af02      	add	r7, sp, #8
 80064ee:	60f8      	str	r0, [r7, #12]
 80064f0:	60b9      	str	r1, [r7, #8]
 80064f2:	607a      	str	r2, [r7, #4]
 80064f4:	603b      	str	r3, [r7, #0]
	setTextSize(1);
 80064f6:	2001      	movs	r0, #1
 80064f8:	f7fc fca6 	bl	8002e48 <setTextSize>
	setTextColor(ST77XX_BLACK);
 80064fc:	2000      	movs	r0, #0
 80064fe:	f7fc fcb3 	bl	8002e68 <setTextColor>
	drawCenteredTextWithPadding(22, HEIGHT-28, 7, str1, hspi);		// button 1
 8006502:	68fa      	ldr	r2, [r7, #12]
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	9300      	str	r3, [sp, #0]
 8006508:	0013      	movs	r3, r2
 800650a:	2207      	movs	r2, #7
 800650c:	2184      	movs	r1, #132	; 0x84
 800650e:	2016      	movs	r0, #22
 8006510:	f7fc fb78 	bl	8002c04 <drawCenteredTextWithPadding>
	drawCenteredTextWithPadding(64, HEIGHT-28, 7, str2, hspi);		// button 2
 8006514:	68ba      	ldr	r2, [r7, #8]
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	9300      	str	r3, [sp, #0]
 800651a:	0013      	movs	r3, r2
 800651c:	2207      	movs	r2, #7
 800651e:	2184      	movs	r1, #132	; 0x84
 8006520:	2040      	movs	r0, #64	; 0x40
 8006522:	f7fc fb6f 	bl	8002c04 <drawCenteredTextWithPadding>
	drawCenteredTextWithPadding(106, HEIGHT-28, 7, str3, hspi);		// button 3
 8006526:	687a      	ldr	r2, [r7, #4]
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	9300      	str	r3, [sp, #0]
 800652c:	0013      	movs	r3, r2
 800652e:	2207      	movs	r2, #7
 8006530:	2184      	movs	r1, #132	; 0x84
 8006532:	206a      	movs	r0, #106	; 0x6a
 8006534:	f7fc fb66 	bl	8002c04 <drawCenteredTextWithPadding>
}
 8006538:	46c0      	nop			; (mov r8, r8)
 800653a:	46bd      	mov	sp, r7
 800653c:	b004      	add	sp, #16
 800653e:	bd80      	pop	{r7, pc}

08006540 <drawTitle>:

// draws big text on top of the display
void drawTitle(char *str, SPI_HandleTypeDef *hspi) {
 8006540:	b580      	push	{r7, lr}
 8006542:	b084      	sub	sp, #16
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
 8006548:	6039      	str	r1, [r7, #0]
	uint8_t strSize = strlen(str);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	0018      	movs	r0, r3
 800654e:	f7f9 fddb 	bl	8000108 <strlen>
 8006552:	0002      	movs	r2, r0
 8006554:	210f      	movs	r1, #15
 8006556:	187b      	adds	r3, r7, r1
 8006558:	701a      	strb	r2, [r3, #0]

	// drawing title
	// bounds checking
	if (12*strSize < WIDTH) {			// about string size = 10 for width = 128
 800655a:	187b      	adds	r3, r7, r1
 800655c:	781a      	ldrb	r2, [r3, #0]
 800655e:	0013      	movs	r3, r2
 8006560:	005b      	lsls	r3, r3, #1
 8006562:	189b      	adds	r3, r3, r2
 8006564:	009b      	lsls	r3, r3, #2
 8006566:	2b7f      	cmp	r3, #127	; 0x7f
 8006568:	dc14      	bgt.n	8006594 <drawTitle+0x54>
		setTextSize(2);
 800656a:	2002      	movs	r0, #2
 800656c:	f7fc fc6c 	bl	8002e48 <setTextSize>
		setCursor((WIDTH-12*strSize)/2, 10);
 8006570:	230f      	movs	r3, #15
 8006572:	18fb      	adds	r3, r7, r3
 8006574:	781a      	ldrb	r2, [r3, #0]
 8006576:	0013      	movs	r3, r2
 8006578:	0092      	lsls	r2, r2, #2
 800657a:	1a9b      	subs	r3, r3, r2
 800657c:	009b      	lsls	r3, r3, #2
 800657e:	3380      	adds	r3, #128	; 0x80
 8006580:	2b00      	cmp	r3, #0
 8006582:	da00      	bge.n	8006586 <drawTitle+0x46>
 8006584:	3301      	adds	r3, #1
 8006586:	105b      	asrs	r3, r3, #1
 8006588:	b2db      	uxtb	r3, r3
 800658a:	210a      	movs	r1, #10
 800658c:	0018      	movs	r0, r3
 800658e:	f7fc fc41 	bl	8002e14 <setCursor>
 8006592:	e039      	b.n	8006608 <drawTitle+0xc8>
	}
	else if (6*strSize < WIDTH) {		// about string size = 21 for width = 128
 8006594:	230f      	movs	r3, #15
 8006596:	18fb      	adds	r3, r7, r3
 8006598:	781a      	ldrb	r2, [r3, #0]
 800659a:	0013      	movs	r3, r2
 800659c:	005b      	lsls	r3, r3, #1
 800659e:	189b      	adds	r3, r3, r2
 80065a0:	005b      	lsls	r3, r3, #1
 80065a2:	2b7f      	cmp	r3, #127	; 0x7f
 80065a4:	dc14      	bgt.n	80065d0 <drawTitle+0x90>
		setTextSize(1);
 80065a6:	2001      	movs	r0, #1
 80065a8:	f7fc fc4e 	bl	8002e48 <setTextSize>
		setCursor((WIDTH-6*strSize)/2, 10);
 80065ac:	230f      	movs	r3, #15
 80065ae:	18fb      	adds	r3, r7, r3
 80065b0:	781a      	ldrb	r2, [r3, #0]
 80065b2:	0013      	movs	r3, r2
 80065b4:	0092      	lsls	r2, r2, #2
 80065b6:	1a9b      	subs	r3, r3, r2
 80065b8:	005b      	lsls	r3, r3, #1
 80065ba:	3380      	adds	r3, #128	; 0x80
 80065bc:	2b00      	cmp	r3, #0
 80065be:	da00      	bge.n	80065c2 <drawTitle+0x82>
 80065c0:	3301      	adds	r3, #1
 80065c2:	105b      	asrs	r3, r3, #1
 80065c4:	b2db      	uxtb	r3, r3
 80065c6:	210a      	movs	r1, #10
 80065c8:	0018      	movs	r0, r3
 80065ca:	f7fc fc23 	bl	8002e14 <setCursor>
 80065ce:	e01b      	b.n	8006608 <drawTitle+0xc8>
	}
	else {
		setTextSize(1);
 80065d0:	2001      	movs	r0, #1
 80065d2:	f7fc fc39 	bl	8002e48 <setTextSize>
		sprintf(str, "it's too long");		// should not need to worry about null access, since this string is shorter than case above
 80065d6:	687a      	ldr	r2, [r7, #4]
 80065d8:	4b12      	ldr	r3, [pc, #72]	; (8006624 <drawTitle+0xe4>)
 80065da:	0010      	movs	r0, r2
 80065dc:	0019      	movs	r1, r3
 80065de:	230e      	movs	r3, #14
 80065e0:	001a      	movs	r2, r3
 80065e2:	f005 f9c3 	bl	800b96c <memcpy>
		setCursor((WIDTH-6*strSize)/2, 10);
 80065e6:	230f      	movs	r3, #15
 80065e8:	18fb      	adds	r3, r7, r3
 80065ea:	781a      	ldrb	r2, [r3, #0]
 80065ec:	0013      	movs	r3, r2
 80065ee:	0092      	lsls	r2, r2, #2
 80065f0:	1a9b      	subs	r3, r3, r2
 80065f2:	005b      	lsls	r3, r3, #1
 80065f4:	3380      	adds	r3, #128	; 0x80
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	da00      	bge.n	80065fc <drawTitle+0xbc>
 80065fa:	3301      	adds	r3, #1
 80065fc:	105b      	asrs	r3, r3, #1
 80065fe:	b2db      	uxtb	r3, r3
 8006600:	210a      	movs	r1, #10
 8006602:	0018      	movs	r0, r3
 8006604:	f7fc fc06 	bl	8002e14 <setCursor>
	}

	setTextColor(ST77XX_BLACK);
 8006608:	2000      	movs	r0, #0
 800660a:	f7fc fc2d 	bl	8002e68 <setTextColor>
	drawText(str, hspi);
 800660e:	683a      	ldr	r2, [r7, #0]
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	0011      	movs	r1, r2
 8006614:	0018      	movs	r0, r3
 8006616:	f7fc fa15 	bl	8002a44 <drawText>
}
 800661a:	46c0      	nop			; (mov r8, r8)
 800661c:	46bd      	mov	sp, r7
 800661e:	b004      	add	sp, #16
 8006620:	bd80      	pop	{r7, pc}
 8006622:	46c0      	nop			; (mov r8, r8)
 8006624:	0800c3e0 	.word	0x0800c3e0

08006628 <drawBattery>:

// draws a battery graphic to represent current battery level
void drawBattery(uint16_t batteryLevel, SPI_HandleTypeDef *hspi) {
 8006628:	b590      	push	{r4, r7, lr}
 800662a:	b087      	sub	sp, #28
 800662c:	af02      	add	r7, sp, #8
 800662e:	0002      	movs	r2, r0
 8006630:	6039      	str	r1, [r7, #0]
 8006632:	1dbb      	adds	r3, r7, #6
 8006634:	801a      	strh	r2, [r3, #0]
	// doesn't move and is used on an empty screen, so shouldn't need to clear then print
	char str[5];

	// drawing battery symbol. hard coded to be 6x13, upper left corner on (49,26)
	drawVLine(49, 28, 10, ST77XX_BLACK, hspi);		// left col
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	9300      	str	r3, [sp, #0]
 800663a:	2300      	movs	r3, #0
 800663c:	220a      	movs	r2, #10
 800663e:	211c      	movs	r1, #28
 8006640:	2031      	movs	r0, #49	; 0x31
 8006642:	f7fb fd43 	bl	80020cc <drawVLine>
	drawVLine(54, 28, 10, ST77XX_BLACK, hspi);		// right col
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	9300      	str	r3, [sp, #0]
 800664a:	2300      	movs	r3, #0
 800664c:	220a      	movs	r2, #10
 800664e:	211c      	movs	r1, #28
 8006650:	2036      	movs	r0, #54	; 0x36
 8006652:	f7fb fd3b 	bl	80020cc <drawVLine>
	drawHLine(50, 38, 4, ST77XX_BLACK, hspi);		// bottom
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	9300      	str	r3, [sp, #0]
 800665a:	2300      	movs	r3, #0
 800665c:	2204      	movs	r2, #4
 800665e:	2126      	movs	r1, #38	; 0x26
 8006660:	2032      	movs	r0, #50	; 0x32
 8006662:	f7fb fceb 	bl	800203c <drawHLine>
	drawHLine(50, 27, 4, ST77XX_BLACK, hspi);		// top bottom level
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	9300      	str	r3, [sp, #0]
 800666a:	2300      	movs	r3, #0
 800666c:	2204      	movs	r2, #4
 800666e:	211b      	movs	r1, #27
 8006670:	2032      	movs	r0, #50	; 0x32
 8006672:	f7fb fce3 	bl	800203c <drawHLine>
	drawHLine(51, 26, 2, ST77XX_BLACK, hspi);		// top upper level
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	9300      	str	r3, [sp, #0]
 800667a:	2300      	movs	r3, #0
 800667c:	2202      	movs	r2, #2
 800667e:	211a      	movs	r1, #26
 8006680:	2033      	movs	r0, #51	; 0x33
 8006682:	f7fb fcdb 	bl	800203c <drawHLine>

	// start filling in green/red box depending on battery level
	uint16_t color = ST77XX_GREEN;
 8006686:	230e      	movs	r3, #14
 8006688:	18fb      	adds	r3, r7, r3
 800668a:	22fc      	movs	r2, #252	; 0xfc
 800668c:	00d2      	lsls	r2, r2, #3
 800668e:	801a      	strh	r2, [r3, #0]
	if (batteryLevel < 20) color = ST77XX_RED;
 8006690:	1dbb      	adds	r3, r7, #6
 8006692:	881b      	ldrh	r3, [r3, #0]
 8006694:	2b13      	cmp	r3, #19
 8006696:	d803      	bhi.n	80066a0 <drawBattery+0x78>
 8006698:	230e      	movs	r3, #14
 800669a:	18fb      	adds	r3, r7, r3
 800669c:	4a2c      	ldr	r2, [pc, #176]	; (8006750 <drawBattery+0x128>)
 800669e:	801a      	strh	r2, [r3, #0]
	fillRect(50, 28+(100-batteryLevel)/10, 4, (batteryLevel+9)/10, color, hspi);	// +9 to avoid having to use float and round()
 80066a0:	1dbb      	adds	r3, r7, #6
 80066a2:	881b      	ldrh	r3, [r3, #0]
 80066a4:	2264      	movs	r2, #100	; 0x64
 80066a6:	1ad3      	subs	r3, r2, r3
 80066a8:	210a      	movs	r1, #10
 80066aa:	0018      	movs	r0, r3
 80066ac:	f7f9 fdbe 	bl	800022c <__divsi3>
 80066b0:	0003      	movs	r3, r0
 80066b2:	b2db      	uxtb	r3, r3
 80066b4:	331c      	adds	r3, #28
 80066b6:	b2dc      	uxtb	r4, r3
 80066b8:	1dbb      	adds	r3, r7, #6
 80066ba:	881b      	ldrh	r3, [r3, #0]
 80066bc:	3309      	adds	r3, #9
 80066be:	210a      	movs	r1, #10
 80066c0:	0018      	movs	r0, r3
 80066c2:	f7f9 fdb3 	bl	800022c <__divsi3>
 80066c6:	0003      	movs	r3, r0
 80066c8:	b2da      	uxtb	r2, r3
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	9301      	str	r3, [sp, #4]
 80066ce:	230e      	movs	r3, #14
 80066d0:	18fb      	adds	r3, r7, r3
 80066d2:	881b      	ldrh	r3, [r3, #0]
 80066d4:	9300      	str	r3, [sp, #0]
 80066d6:	0013      	movs	r3, r2
 80066d8:	2204      	movs	r2, #4
 80066da:	0021      	movs	r1, r4
 80066dc:	2032      	movs	r0, #50	; 0x32
 80066de:	f7fb fde0 	bl	80022a2 <fillRect>
	fillRect(50, 28, 4, (100-batteryLevel)/10, ST77XX_WHITE, hspi);
 80066e2:	1dbb      	adds	r3, r7, #6
 80066e4:	881b      	ldrh	r3, [r3, #0]
 80066e6:	2264      	movs	r2, #100	; 0x64
 80066e8:	1ad3      	subs	r3, r2, r3
 80066ea:	210a      	movs	r1, #10
 80066ec:	0018      	movs	r0, r3
 80066ee:	f7f9 fd9d 	bl	800022c <__divsi3>
 80066f2:	0003      	movs	r3, r0
 80066f4:	b2da      	uxtb	r2, r3
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	9301      	str	r3, [sp, #4]
 80066fa:	4b16      	ldr	r3, [pc, #88]	; (8006754 <drawBattery+0x12c>)
 80066fc:	9300      	str	r3, [sp, #0]
 80066fe:	0013      	movs	r3, r2
 8006700:	2204      	movs	r2, #4
 8006702:	211c      	movs	r1, #28
 8006704:	2032      	movs	r0, #50	; 0x32
 8006706:	f7fb fdcc 	bl	80022a2 <fillRect>

	// draw numerical text
	setTextSize(1);
 800670a:	2001      	movs	r0, #1
 800670c:	f7fc fb9c 	bl	8002e48 <setTextSize>
	if (batteryLevel >= 20) color = ST77XX_BLACK;		// reusing variable for more obfuscated code.
 8006710:	1dbb      	adds	r3, r7, #6
 8006712:	881b      	ldrh	r3, [r3, #0]
 8006714:	2b13      	cmp	r3, #19
 8006716:	d903      	bls.n	8006720 <drawBattery+0xf8>
 8006718:	230e      	movs	r3, #14
 800671a:	18fb      	adds	r3, r7, r3
 800671c:	2200      	movs	r2, #0
 800671e:	801a      	strh	r2, [r3, #0]
	setTextColor(color);
 8006720:	230e      	movs	r3, #14
 8006722:	18fb      	adds	r3, r7, r3
 8006724:	881b      	ldrh	r3, [r3, #0]
 8006726:	0018      	movs	r0, r3
 8006728:	f7fc fb9e 	bl	8002e68 <setTextColor>
	sprintf(str, "%3d%%", batteryLevel);
 800672c:	1dbb      	adds	r3, r7, #6
 800672e:	881a      	ldrh	r2, [r3, #0]
 8006730:	4909      	ldr	r1, [pc, #36]	; (8006758 <drawBattery+0x130>)
 8006732:	2408      	movs	r4, #8
 8006734:	193b      	adds	r3, r7, r4
 8006736:	0018      	movs	r0, r3
 8006738:	f005 f9a8 	bl	800ba8c <siprintf>
	drawTextAt(55, 31, str, hspi);
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	193a      	adds	r2, r7, r4
 8006740:	211f      	movs	r1, #31
 8006742:	2037      	movs	r0, #55	; 0x37
 8006744:	f7fc f9b4 	bl	8002ab0 <drawTextAt>
}
 8006748:	46c0      	nop			; (mov r8, r8)
 800674a:	46bd      	mov	sp, r7
 800674c:	b005      	add	sp, #20
 800674e:	bd90      	pop	{r4, r7, pc}
 8006750:	fffff800 	.word	0xfffff800
 8006754:	0000ffff 	.word	0x0000ffff
 8006758:	0800c3f0 	.word	0x0800c3f0

0800675c <drawClock>:

// draw time and date on screen
void drawClock(struct dates *d, struct times *t, SPI_HandleTypeDef *hspi) {
 800675c:	b5b0      	push	{r4, r5, r7, lr}
 800675e:	b090      	sub	sp, #64	; 0x40
 8006760:	af02      	add	r7, sp, #8
 8006762:	60f8      	str	r0, [r7, #12]
 8006764:	60b9      	str	r1, [r7, #8]
 8006766:	607a      	str	r2, [r7, #4]
	// notes on paper.
	char str[40];

	// no need to draw padding for those that always have the same length
	// drawing hr and min, 12-hr format
	if (t->hr % 12 == 0) sprintf(str, "%2d:%02d", 12, t->min);
 8006768:	68bb      	ldr	r3, [r7, #8]
 800676a:	781b      	ldrb	r3, [r3, #0]
 800676c:	210c      	movs	r1, #12
 800676e:	0018      	movs	r0, r3
 8006770:	f7f9 fd58 	bl	8000224 <__aeabi_uidivmod>
 8006774:	000b      	movs	r3, r1
 8006776:	b2db      	uxtb	r3, r3
 8006778:	2b00      	cmp	r3, #0
 800677a:	d108      	bne.n	800678e <drawClock+0x32>
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	785b      	ldrb	r3, [r3, #1]
 8006780:	493c      	ldr	r1, [pc, #240]	; (8006874 <drawClock+0x118>)
 8006782:	2210      	movs	r2, #16
 8006784:	18b8      	adds	r0, r7, r2
 8006786:	220c      	movs	r2, #12
 8006788:	f005 f980 	bl	800ba8c <siprintf>
 800678c:	e00f      	b.n	80067ae <drawClock+0x52>
	else sprintf(str, "%2d:%02d", t->hr%12, t->min);
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	781b      	ldrb	r3, [r3, #0]
 8006792:	210c      	movs	r1, #12
 8006794:	0018      	movs	r0, r3
 8006796:	f7f9 fd45 	bl	8000224 <__aeabi_uidivmod>
 800679a:	000b      	movs	r3, r1
 800679c:	b2db      	uxtb	r3, r3
 800679e:	001a      	movs	r2, r3
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	785b      	ldrb	r3, [r3, #1]
 80067a4:	4933      	ldr	r1, [pc, #204]	; (8006874 <drawClock+0x118>)
 80067a6:	2010      	movs	r0, #16
 80067a8:	1838      	adds	r0, r7, r0
 80067aa:	f005 f96f 	bl	800ba8c <siprintf>
	setTextSize(3);
 80067ae:	2003      	movs	r0, #3
 80067b0:	f7fc fb4a 	bl	8002e48 <setTextSize>
	setTextColor(ST77XX_BLACK);
 80067b4:	2000      	movs	r0, #0
 80067b6:	f7fc fb57 	bl	8002e68 <setTextColor>
	drawCenteredText(52, 60, str, hspi);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2410      	movs	r4, #16
 80067be:	193a      	adds	r2, r7, r4
 80067c0:	213c      	movs	r1, #60	; 0x3c
 80067c2:	2034      	movs	r0, #52	; 0x34
 80067c4:	f7fc f9bc 	bl	8002b40 <drawCenteredText>

	// drawing sec
	sprintf(str, "%02d", t->sec);
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	789b      	ldrb	r3, [r3, #2]
 80067cc:	001a      	movs	r2, r3
 80067ce:	492a      	ldr	r1, [pc, #168]	; (8006878 <drawClock+0x11c>)
 80067d0:	193b      	adds	r3, r7, r4
 80067d2:	0018      	movs	r0, r3
 80067d4:	f005 f95a 	bl	800ba8c <siprintf>
	setTextSize(2);
 80067d8:	2002      	movs	r0, #2
 80067da:	f7fc fb35 	bl	8002e48 <setTextSize>
	drawCenteredText(109, 68, str, hspi);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	193a      	adds	r2, r7, r4
 80067e2:	2144      	movs	r1, #68	; 0x44
 80067e4:	206d      	movs	r0, #109	; 0x6d
 80067e6:	f7fc f9ab 	bl	8002b40 <drawCenteredText>

	// drawing AM/PM text
	setTextSize(1);
 80067ea:	2001      	movs	r0, #1
 80067ec:	f7fc fb2c 	bl	8002e48 <setTextSize>
	if (t->hr < 12) drawCenteredText(103, 60, "AM", hspi);
 80067f0:	68bb      	ldr	r3, [r7, #8]
 80067f2:	781b      	ldrb	r3, [r3, #0]
 80067f4:	2b0b      	cmp	r3, #11
 80067f6:	d806      	bhi.n	8006806 <drawClock+0xaa>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	4a20      	ldr	r2, [pc, #128]	; (800687c <drawClock+0x120>)
 80067fc:	213c      	movs	r1, #60	; 0x3c
 80067fe:	2067      	movs	r0, #103	; 0x67
 8006800:	f7fc f99e 	bl	8002b40 <drawCenteredText>
 8006804:	e005      	b.n	8006812 <drawClock+0xb6>
	else drawCenteredText(103, 60, "PM", hspi);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	4a1d      	ldr	r2, [pc, #116]	; (8006880 <drawClock+0x124>)
 800680a:	213c      	movs	r1, #60	; 0x3c
 800680c:	2067      	movs	r0, #103	; 0x67
 800680e:	f7fc f997 	bl	8002b40 <drawCenteredText>

	// drawing date
	setTextSize(1);
 8006812:	2001      	movs	r0, #1
 8006814:	f7fc fb18 	bl	8002e48 <setTextSize>
	sprintf(str, "%s %d %04d", monthNames[d->month], d->date, d->yr);
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	789b      	ldrb	r3, [r3, #2]
 800681c:	001a      	movs	r2, r3
 800681e:	4b19      	ldr	r3, [pc, #100]	; (8006884 <drawClock+0x128>)
 8006820:	0092      	lsls	r2, r2, #2
 8006822:	58d2      	ldr	r2, [r2, r3]
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	78db      	ldrb	r3, [r3, #3]
 8006828:	001c      	movs	r4, r3
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	881b      	ldrh	r3, [r3, #0]
 800682e:	4916      	ldr	r1, [pc, #88]	; (8006888 <drawClock+0x12c>)
 8006830:	2510      	movs	r5, #16
 8006832:	1978      	adds	r0, r7, r5
 8006834:	9300      	str	r3, [sp, #0]
 8006836:	0023      	movs	r3, r4
 8006838:	f005 f928 	bl	800ba8c <siprintf>
	drawCenteredTextWithPadding(WIDTH/2, 84, 11, str, hspi);
 800683c:	197a      	adds	r2, r7, r5
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	9300      	str	r3, [sp, #0]
 8006842:	0013      	movs	r3, r2
 8006844:	220b      	movs	r2, #11
 8006846:	2154      	movs	r1, #84	; 0x54
 8006848:	2040      	movs	r0, #64	; 0x40
 800684a:	f7fc f9db 	bl	8002c04 <drawCenteredTextWithPadding>

	// drawing weekday
	drawCenteredTextWithPadding(WIDTH/2, 92, 9, weekdayNames[d->weekday], hspi);
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	791b      	ldrb	r3, [r3, #4]
 8006852:	001a      	movs	r2, r3
 8006854:	4b0d      	ldr	r3, [pc, #52]	; (800688c <drawClock+0x130>)
 8006856:	0092      	lsls	r2, r2, #2
 8006858:	58d2      	ldr	r2, [r2, r3]
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	9300      	str	r3, [sp, #0]
 800685e:	0013      	movs	r3, r2
 8006860:	2209      	movs	r2, #9
 8006862:	215c      	movs	r1, #92	; 0x5c
 8006864:	2040      	movs	r0, #64	; 0x40
 8006866:	f7fc f9cd 	bl	8002c04 <drawCenteredTextWithPadding>
}
 800686a:	46c0      	nop			; (mov r8, r8)
 800686c:	46bd      	mov	sp, r7
 800686e:	b00e      	add	sp, #56	; 0x38
 8006870:	bdb0      	pop	{r4, r5, r7, pc}
 8006872:	46c0      	nop			; (mov r8, r8)
 8006874:	0800c3f8 	.word	0x0800c3f8
 8006878:	0800c404 	.word	0x0800c404
 800687c:	0800c40c 	.word	0x0800c40c
 8006880:	0800c410 	.word	0x0800c410
 8006884:	20000034 	.word	0x20000034
 8006888:	0800c414 	.word	0x0800c414
 800688c:	20000014 	.word	0x20000014

08006890 <drawTopClock>:

// drawing current time on top of screen when other faces are displayed
void drawTopClock(RTC_HandleTypeDef *hrtc, SPI_HandleTypeDef *hspi) {
 8006890:	b590      	push	{r4, r7, lr}
 8006892:	b08f      	sub	sp, #60	; 0x3c
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
 8006898:	6039      	str	r1, [r7, #0]
	char str[40];
	struct times currentTime = {0};
 800689a:	240c      	movs	r4, #12
 800689c:	193b      	adds	r3, r7, r4
 800689e:	0018      	movs	r0, r3
 80068a0:	2303      	movs	r3, #3
 80068a2:	001a      	movs	r2, r3
 80068a4:	2100      	movs	r1, #0
 80068a6:	f005 f86a 	bl	800b97e <memset>
	getTime(&currentTime, hrtc);
 80068aa:	687a      	ldr	r2, [r7, #4]
 80068ac:	193b      	adds	r3, r7, r4
 80068ae:	0011      	movs	r1, r2
 80068b0:	0018      	movs	r0, r3
 80068b2:	f7fc fe57 	bl	8003564 <getTime>

	if (currentTime.hr % 12 == 0) sprintf(str, "%2d:%02d", 12, currentTime.min);
 80068b6:	193b      	adds	r3, r7, r4
 80068b8:	781b      	ldrb	r3, [r3, #0]
 80068ba:	210c      	movs	r1, #12
 80068bc:	0018      	movs	r0, r3
 80068be:	f7f9 fcb1 	bl	8000224 <__aeabi_uidivmod>
 80068c2:	000b      	movs	r3, r1
 80068c4:	b2db      	uxtb	r3, r3
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d109      	bne.n	80068de <drawTopClock+0x4e>
 80068ca:	230c      	movs	r3, #12
 80068cc:	18fb      	adds	r3, r7, r3
 80068ce:	785b      	ldrb	r3, [r3, #1]
 80068d0:	491d      	ldr	r1, [pc, #116]	; (8006948 <drawTopClock+0xb8>)
 80068d2:	2210      	movs	r2, #16
 80068d4:	18b8      	adds	r0, r7, r2
 80068d6:	220c      	movs	r2, #12
 80068d8:	f005 f8d8 	bl	800ba8c <siprintf>
 80068dc:	e010      	b.n	8006900 <drawTopClock+0x70>
	else sprintf(str, "%2d:%02d", currentTime.hr%12, currentTime.min);
 80068de:	240c      	movs	r4, #12
 80068e0:	193b      	adds	r3, r7, r4
 80068e2:	781b      	ldrb	r3, [r3, #0]
 80068e4:	210c      	movs	r1, #12
 80068e6:	0018      	movs	r0, r3
 80068e8:	f7f9 fc9c 	bl	8000224 <__aeabi_uidivmod>
 80068ec:	000b      	movs	r3, r1
 80068ee:	b2db      	uxtb	r3, r3
 80068f0:	001a      	movs	r2, r3
 80068f2:	193b      	adds	r3, r7, r4
 80068f4:	785b      	ldrb	r3, [r3, #1]
 80068f6:	4914      	ldr	r1, [pc, #80]	; (8006948 <drawTopClock+0xb8>)
 80068f8:	2010      	movs	r0, #16
 80068fa:	1838      	adds	r0, r7, r0
 80068fc:	f005 f8c6 	bl	800ba8c <siprintf>
	setTextSize(1);
 8006900:	2001      	movs	r0, #1
 8006902:	f7fc faa1 	bl	8002e48 <setTextSize>
	setTextColor(ST77XX_BLACK);
 8006906:	2000      	movs	r0, #0
 8006908:	f7fc faae 	bl	8002e68 <setTextColor>
	drawTextAt(WIDTH/2-21, 1, str, hspi);
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	2210      	movs	r2, #16
 8006910:	18ba      	adds	r2, r7, r2
 8006912:	2101      	movs	r1, #1
 8006914:	202b      	movs	r0, #43	; 0x2b
 8006916:	f7fc f8cb 	bl	8002ab0 <drawTextAt>

	if (currentTime.hr < 12) drawTextAt(WIDTH/2+9, 1, "AM", hspi);
 800691a:	230c      	movs	r3, #12
 800691c:	18fb      	adds	r3, r7, r3
 800691e:	781b      	ldrb	r3, [r3, #0]
 8006920:	2b0b      	cmp	r3, #11
 8006922:	d806      	bhi.n	8006932 <drawTopClock+0xa2>
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	4a09      	ldr	r2, [pc, #36]	; (800694c <drawTopClock+0xbc>)
 8006928:	2101      	movs	r1, #1
 800692a:	2049      	movs	r0, #73	; 0x49
 800692c:	f7fc f8c0 	bl	8002ab0 <drawTextAt>
	else drawTextAt(WIDTH/2+9, 1, "PM", hspi);
}
 8006930:	e005      	b.n	800693e <drawTopClock+0xae>
	else drawTextAt(WIDTH/2+9, 1, "PM", hspi);
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	4a06      	ldr	r2, [pc, #24]	; (8006950 <drawTopClock+0xc0>)
 8006936:	2101      	movs	r1, #1
 8006938:	2049      	movs	r0, #73	; 0x49
 800693a:	f7fc f8b9 	bl	8002ab0 <drawTextAt>
}
 800693e:	46c0      	nop			; (mov r8, r8)
 8006940:	46bd      	mov	sp, r7
 8006942:	b00f      	add	sp, #60	; 0x3c
 8006944:	bd90      	pop	{r4, r7, pc}
 8006946:	46c0      	nop			; (mov r8, r8)
 8006948:	0800c3f8 	.word	0x0800c3f8
 800694c:	0800c40c 	.word	0x0800c40c
 8006950:	0800c410 	.word	0x0800c410

08006954 <drawTimer>:

// drawing timer on screen
void drawTimer(struct times *t, SPI_HandleTypeDef *hspi) {
 8006954:	b5b0      	push	{r4, r5, r7, lr}
 8006956:	b08e      	sub	sp, #56	; 0x38
 8006958:	af02      	add	r7, sp, #8
 800695a:	6078      	str	r0, [r7, #4]
 800695c:	6039      	str	r1, [r7, #0]
	char str[40];

	// only drawing hr:min:sec of timer
	setTextSize(2);
 800695e:	2002      	movs	r0, #2
 8006960:	f7fc fa72 	bl	8002e48 <setTextSize>
	setTextColor(ST77XX_BLACK);
 8006964:	2000      	movs	r0, #0
 8006966:	f7fc fa7f 	bl	8002e68 <setTextColor>
	sprintf(str, "%2d:%2d:%2d", t->hr, t->min, t->sec);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	781b      	ldrb	r3, [r3, #0]
 800696e:	001a      	movs	r2, r3
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	785b      	ldrb	r3, [r3, #1]
 8006974:	001c      	movs	r4, r3
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	789b      	ldrb	r3, [r3, #2]
 800697a:	4908      	ldr	r1, [pc, #32]	; (800699c <drawTimer+0x48>)
 800697c:	2508      	movs	r5, #8
 800697e:	1978      	adds	r0, r7, r5
 8006980:	9300      	str	r3, [sp, #0]
 8006982:	0023      	movs	r3, r4
 8006984:	f005 f882 	bl	800ba8c <siprintf>
	drawCenteredText(WIDTH/2, HEIGHT/2-12, str, hspi);		// about y=68
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	197a      	adds	r2, r7, r5
 800698c:	2144      	movs	r1, #68	; 0x44
 800698e:	2040      	movs	r0, #64	; 0x40
 8006990:	f7fc f8d6 	bl	8002b40 <drawCenteredText>

	// leaving room to draw "timer set!/unset" text
}
 8006994:	46c0      	nop			; (mov r8, r8)
 8006996:	46bd      	mov	sp, r7
 8006998:	b00c      	add	sp, #48	; 0x30
 800699a:	bdb0      	pop	{r4, r5, r7, pc}
 800699c:	0800c420 	.word	0x0800c420

080069a0 <drawAlarm>:

// drawing alarm on screen
void drawAlarm(struct alarmTimes *a, SPI_HandleTypeDef *hspi) {
 80069a0:	b590      	push	{r4, r7, lr}
 80069a2:	b08f      	sub	sp, #60	; 0x3c
 80069a4:	af02      	add	r7, sp, #8
 80069a6:	6078      	str	r0, [r7, #4]
 80069a8:	6039      	str	r1, [r7, #0]
	char str[40];

	// drawing hr:min:sec
	setTextSize(2);
 80069aa:	2002      	movs	r0, #2
 80069ac:	f7fc fa4c 	bl	8002e48 <setTextSize>
	setTextColor(ST77XX_BLACK);
 80069b0:	2000      	movs	r0, #0
 80069b2:	f7fc fa59 	bl	8002e68 <setTextColor>
	if (a->hr % 12 == 0) sprintf(str, "%2d:%2d:%2d", 12, a->min, a->sec);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	781b      	ldrb	r3, [r3, #0]
 80069ba:	210c      	movs	r1, #12
 80069bc:	0018      	movs	r0, r3
 80069be:	f7f9 fc31 	bl	8000224 <__aeabi_uidivmod>
 80069c2:	000b      	movs	r3, r1
 80069c4:	b2db      	uxtb	r3, r3
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d10d      	bne.n	80069e6 <drawAlarm+0x46>
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	785b      	ldrb	r3, [r3, #1]
 80069ce:	001a      	movs	r2, r3
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	789b      	ldrb	r3, [r3, #2]
 80069d4:	4926      	ldr	r1, [pc, #152]	; (8006a70 <drawAlarm+0xd0>)
 80069d6:	2008      	movs	r0, #8
 80069d8:	1838      	adds	r0, r7, r0
 80069da:	9300      	str	r3, [sp, #0]
 80069dc:	0013      	movs	r3, r2
 80069de:	220c      	movs	r2, #12
 80069e0:	f005 f854 	bl	800ba8c <siprintf>
 80069e4:	e014      	b.n	8006a10 <drawAlarm+0x70>
	else sprintf(str, "%2d:%2d:%2d", a->hr%12, a->min, a->sec);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	781b      	ldrb	r3, [r3, #0]
 80069ea:	210c      	movs	r1, #12
 80069ec:	0018      	movs	r0, r3
 80069ee:	f7f9 fc19 	bl	8000224 <__aeabi_uidivmod>
 80069f2:	000b      	movs	r3, r1
 80069f4:	b2db      	uxtb	r3, r3
 80069f6:	001a      	movs	r2, r3
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	785b      	ldrb	r3, [r3, #1]
 80069fc:	001c      	movs	r4, r3
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	789b      	ldrb	r3, [r3, #2]
 8006a02:	491b      	ldr	r1, [pc, #108]	; (8006a70 <drawAlarm+0xd0>)
 8006a04:	2008      	movs	r0, #8
 8006a06:	1838      	adds	r0, r7, r0
 8006a08:	9300      	str	r3, [sp, #0]
 8006a0a:	0023      	movs	r3, r4
 8006a0c:	f005 f83e 	bl	800ba8c <siprintf>
	drawCenteredText(WIDTH/2, 68, str, hspi);
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	2208      	movs	r2, #8
 8006a14:	18ba      	adds	r2, r7, r2
 8006a16:	2144      	movs	r1, #68	; 0x44
 8006a18:	2040      	movs	r0, #64	; 0x40
 8006a1a:	f7fc f891 	bl	8002b40 <drawCenteredText>

	setTextSize(1);
 8006a1e:	2001      	movs	r0, #1
 8006a20:	f7fc fa12 	bl	8002e48 <setTextSize>
	if (a->hr < 12) drawCenteredText(100, 60, "AM", hspi);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	781b      	ldrb	r3, [r3, #0]
 8006a28:	2b0b      	cmp	r3, #11
 8006a2a:	d806      	bhi.n	8006a3a <drawAlarm+0x9a>
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	4a11      	ldr	r2, [pc, #68]	; (8006a74 <drawAlarm+0xd4>)
 8006a30:	213c      	movs	r1, #60	; 0x3c
 8006a32:	2064      	movs	r0, #100	; 0x64
 8006a34:	f7fc f884 	bl	8002b40 <drawCenteredText>
 8006a38:	e005      	b.n	8006a46 <drawAlarm+0xa6>
	else drawCenteredText(100, 60, "PM", hspi);
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	4a0e      	ldr	r2, [pc, #56]	; (8006a78 <drawAlarm+0xd8>)
 8006a3e:	213c      	movs	r1, #60	; 0x3c
 8006a40:	2064      	movs	r0, #100	; 0x64
 8006a42:	f7fc f87d 	bl	8002b40 <drawCenteredText>


	// drawing weekday
	setTextSize(1);
 8006a46:	2001      	movs	r0, #1
 8006a48:	f7fc f9fe 	bl	8002e48 <setTextSize>
	drawCenteredTextWithPadding(WIDTH/2, 84, 9, weekdayNames[a->weekday], hspi);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	78db      	ldrb	r3, [r3, #3]
 8006a50:	001a      	movs	r2, r3
 8006a52:	4b0a      	ldr	r3, [pc, #40]	; (8006a7c <drawAlarm+0xdc>)
 8006a54:	0092      	lsls	r2, r2, #2
 8006a56:	58d2      	ldr	r2, [r2, r3]
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	9300      	str	r3, [sp, #0]
 8006a5c:	0013      	movs	r3, r2
 8006a5e:	2209      	movs	r2, #9
 8006a60:	2154      	movs	r1, #84	; 0x54
 8006a62:	2040      	movs	r0, #64	; 0x40
 8006a64:	f7fc f8ce 	bl	8002c04 <drawCenteredTextWithPadding>
}
 8006a68:	46c0      	nop			; (mov r8, r8)
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	b00d      	add	sp, #52	; 0x34
 8006a6e:	bd90      	pop	{r4, r7, pc}
 8006a70:	0800c420 	.word	0x0800c420
 8006a74:	0800c40c 	.word	0x0800c40c
 8006a78:	0800c410 	.word	0x0800c410
 8006a7c:	20000014 	.word	0x20000014

08006a80 <drawStopwatch>:

// drawing stopwatch on screen
void drawStopwatch(uint32_t seconds, SPI_HandleTypeDef *hspi) {
 8006a80:	b5b0      	push	{r4, r5, r7, lr}
 8006a82:	b090      	sub	sp, #64	; 0x40
 8006a84:	af02      	add	r7, sp, #8
 8006a86:	6078      	str	r0, [r7, #4]
 8006a88:	6039      	str	r1, [r7, #0]
	struct times t = {0};
 8006a8a:	2134      	movs	r1, #52	; 0x34
 8006a8c:	000c      	movs	r4, r1
 8006a8e:	187b      	adds	r3, r7, r1
 8006a90:	0018      	movs	r0, r3
 8006a92:	2303      	movs	r3, #3
 8006a94:	001a      	movs	r2, r3
 8006a96:	2100      	movs	r1, #0
 8006a98:	f004 ff71 	bl	800b97e <memset>
	char str[40];

	secondsToTime(&t, seconds);
 8006a9c:	687a      	ldr	r2, [r7, #4]
 8006a9e:	0021      	movs	r1, r4
 8006aa0:	000c      	movs	r4, r1
 8006aa2:	187b      	adds	r3, r7, r1
 8006aa4:	0011      	movs	r1, r2
 8006aa6:	0018      	movs	r0, r3
 8006aa8:	f7fc fe3f 	bl	800372a <secondsToTime>

	// drawing hr:min:sec
	setTextSize(2);
 8006aac:	2002      	movs	r0, #2
 8006aae:	f7fc f9cb 	bl	8002e48 <setTextSize>
	setTextColor(ST77XX_BLACK);
 8006ab2:	2000      	movs	r0, #0
 8006ab4:	f7fc f9d8 	bl	8002e68 <setTextColor>
	sprintf(str, "%2d:%2d:%2d", t.hr, t.min, t.sec);
 8006ab8:	0021      	movs	r1, r4
 8006aba:	187b      	adds	r3, r7, r1
 8006abc:	781b      	ldrb	r3, [r3, #0]
 8006abe:	001a      	movs	r2, r3
 8006ac0:	187b      	adds	r3, r7, r1
 8006ac2:	785b      	ldrb	r3, [r3, #1]
 8006ac4:	001c      	movs	r4, r3
 8006ac6:	187b      	adds	r3, r7, r1
 8006ac8:	789b      	ldrb	r3, [r3, #2]
 8006aca:	4908      	ldr	r1, [pc, #32]	; (8006aec <drawStopwatch+0x6c>)
 8006acc:	250c      	movs	r5, #12
 8006ace:	1978      	adds	r0, r7, r5
 8006ad0:	9300      	str	r3, [sp, #0]
 8006ad2:	0023      	movs	r3, r4
 8006ad4:	f004 ffda 	bl	800ba8c <siprintf>
	drawCenteredText(WIDTH/2, 68, str, hspi);
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	197a      	adds	r2, r7, r5
 8006adc:	2144      	movs	r1, #68	; 0x44
 8006ade:	2040      	movs	r0, #64	; 0x40
 8006ae0:	f7fc f82e 	bl	8002b40 <drawCenteredText>

	// leaving room for lap text
}
 8006ae4:	46c0      	nop			; (mov r8, r8)
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	b00e      	add	sp, #56	; 0x38
 8006aea:	bdb0      	pop	{r4, r5, r7, pc}
 8006aec:	0800c420 	.word	0x0800c420

08006af0 <drawStopwatchLap>:

// drawing lap text
void drawStopwatchLap(uint32_t seconds, SPI_HandleTypeDef *hspi) {
 8006af0:	b5b0      	push	{r4, r5, r7, lr}
 8006af2:	b090      	sub	sp, #64	; 0x40
 8006af4:	af02      	add	r7, sp, #8
 8006af6:	6078      	str	r0, [r7, #4]
 8006af8:	6039      	str	r1, [r7, #0]
	struct times t = {0};
 8006afa:	2134      	movs	r1, #52	; 0x34
 8006afc:	000c      	movs	r4, r1
 8006afe:	187b      	adds	r3, r7, r1
 8006b00:	0018      	movs	r0, r3
 8006b02:	2303      	movs	r3, #3
 8006b04:	001a      	movs	r2, r3
 8006b06:	2100      	movs	r1, #0
 8006b08:	f004 ff39 	bl	800b97e <memset>
	char str[40];

	secondsToTime(&t, seconds);		// converting
 8006b0c:	687a      	ldr	r2, [r7, #4]
 8006b0e:	0021      	movs	r1, r4
 8006b10:	000c      	movs	r4, r1
 8006b12:	187b      	adds	r3, r7, r1
 8006b14:	0011      	movs	r1, r2
 8006b16:	0018      	movs	r0, r3
 8006b18:	f7fc fe07 	bl	800372a <secondsToTime>

	// drawing hr:min:sec
	setTextSize(1);
 8006b1c:	2001      	movs	r0, #1
 8006b1e:	f7fc f993 	bl	8002e48 <setTextSize>
	setTextColor(ST77XX_BLACK);
 8006b22:	2000      	movs	r0, #0
 8006b24:	f7fc f9a0 	bl	8002e68 <setTextColor>
	sprintf(str, "lap: %2d:%2d:%2d", t.hr, t.min, t.sec);
 8006b28:	0021      	movs	r1, r4
 8006b2a:	187b      	adds	r3, r7, r1
 8006b2c:	781b      	ldrb	r3, [r3, #0]
 8006b2e:	001a      	movs	r2, r3
 8006b30:	187b      	adds	r3, r7, r1
 8006b32:	785b      	ldrb	r3, [r3, #1]
 8006b34:	001c      	movs	r4, r3
 8006b36:	187b      	adds	r3, r7, r1
 8006b38:	789b      	ldrb	r3, [r3, #2]
 8006b3a:	4908      	ldr	r1, [pc, #32]	; (8006b5c <drawStopwatchLap+0x6c>)
 8006b3c:	250c      	movs	r5, #12
 8006b3e:	1978      	adds	r0, r7, r5
 8006b40:	9300      	str	r3, [sp, #0]
 8006b42:	0023      	movs	r3, r4
 8006b44:	f004 ffa2 	bl	800ba8c <siprintf>
	drawCenteredText(WIDTH/2, 84, str, hspi);
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	197a      	adds	r2, r7, r5
 8006b4c:	2154      	movs	r1, #84	; 0x54
 8006b4e:	2040      	movs	r0, #64	; 0x40
 8006b50:	f7fb fff6 	bl	8002b40 <drawCenteredText>
}
 8006b54:	46c0      	nop			; (mov r8, r8)
 8006b56:	46bd      	mov	sp, r7
 8006b58:	b00e      	add	sp, #56	; 0x38
 8006b5a:	bdb0      	pop	{r4, r5, r7, pc}
 8006b5c:	0800c42c 	.word	0x0800c42c

08006b60 <initFace>:
// ---- end of drawing functions ----

// initializes variables. should be called at the start of program
void initFace() {
 8006b60:	b580      	push	{r7, lr}
 8006b62:	af00      	add	r7, sp, #0
	faceOnDisplay = faceClock;
 8006b64:	4b14      	ldr	r3, [pc, #80]	; (8006bb8 <initFace+0x58>)
 8006b66:	2200      	movs	r2, #0
 8006b68:	701a      	strb	r2, [r3, #0]
	updateFace.clock = 1;
 8006b6a:	4b14      	ldr	r3, [pc, #80]	; (8006bbc <initFace+0x5c>)
 8006b6c:	2201      	movs	r2, #1
 8006b6e:	701a      	strb	r2, [r3, #0]

	// initializing pointers
	clockVars.dateToSet = (struct dates *)calloc(1, sizeof(struct dates *));
 8006b70:	2104      	movs	r1, #4
 8006b72:	2001      	movs	r0, #1
 8006b74:	f004 fec6 	bl	800b904 <calloc>
 8006b78:	0003      	movs	r3, r0
 8006b7a:	001a      	movs	r2, r3
 8006b7c:	4b10      	ldr	r3, [pc, #64]	; (8006bc0 <initFace+0x60>)
 8006b7e:	605a      	str	r2, [r3, #4]
	clockVars.timeToSet = (struct times *)calloc(1, sizeof(struct times *));
 8006b80:	2104      	movs	r1, #4
 8006b82:	2001      	movs	r0, #1
 8006b84:	f004 febe 	bl	800b904 <calloc>
 8006b88:	0003      	movs	r3, r0
 8006b8a:	001a      	movs	r2, r3
 8006b8c:	4b0c      	ldr	r3, [pc, #48]	; (8006bc0 <initFace+0x60>)
 8006b8e:	609a      	str	r2, [r3, #8]
	timerVars.timeToSet = (struct times *)calloc(1, sizeof(struct times *));
 8006b90:	2104      	movs	r1, #4
 8006b92:	2001      	movs	r0, #1
 8006b94:	f004 feb6 	bl	800b904 <calloc>
 8006b98:	0003      	movs	r3, r0
 8006b9a:	001a      	movs	r2, r3
 8006b9c:	4b09      	ldr	r3, [pc, #36]	; (8006bc4 <initFace+0x64>)
 8006b9e:	605a      	str	r2, [r3, #4]
	alarmVars.alarmToSet = (struct alarmTimes *)calloc(1, sizeof(struct alarmTimes *));
 8006ba0:	2104      	movs	r1, #4
 8006ba2:	2001      	movs	r0, #1
 8006ba4:	f004 feae 	bl	800b904 <calloc>
 8006ba8:	0003      	movs	r3, r0
 8006baa:	001a      	movs	r2, r3
 8006bac:	4b06      	ldr	r3, [pc, #24]	; (8006bc8 <initFace+0x68>)
 8006bae:	605a      	str	r2, [r3, #4]
}
 8006bb0:	46c0      	nop			; (mov r8, r8)
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bd80      	pop	{r7, pc}
 8006bb6:	46c0      	nop			; (mov r8, r8)
 8006bb8:	20000140 	.word	0x20000140
 8006bbc:	20000150 	.word	0x20000150
 8006bc0:	2000011c 	.word	0x2000011c
 8006bc4:	20000128 	.word	0x20000128
 8006bc8:	20000130 	.word	0x20000130

08006bcc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8006bcc:	480d      	ldr	r0, [pc, #52]	; (8006c04 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8006bce:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8006bd0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8006bd2:	e003      	b.n	8006bdc <LoopCopyDataInit>

08006bd4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8006bd4:	4b0c      	ldr	r3, [pc, #48]	; (8006c08 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 8006bd6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8006bd8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8006bda:	3104      	adds	r1, #4

08006bdc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8006bdc:	480b      	ldr	r0, [pc, #44]	; (8006c0c <LoopForever+0xa>)
  ldr  r3, =_edata
 8006bde:	4b0c      	ldr	r3, [pc, #48]	; (8006c10 <LoopForever+0xe>)
  adds  r2, r0, r1
 8006be0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8006be2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8006be4:	d3f6      	bcc.n	8006bd4 <CopyDataInit>
  ldr  r2, =_sbss
 8006be6:	4a0b      	ldr	r2, [pc, #44]	; (8006c14 <LoopForever+0x12>)
  b  LoopFillZerobss
 8006be8:	e002      	b.n	8006bf0 <LoopFillZerobss>

08006bea <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8006bea:	2300      	movs	r3, #0
  str  r3, [r2]
 8006bec:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006bee:	3204      	adds	r2, #4

08006bf0 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8006bf0:	4b09      	ldr	r3, [pc, #36]	; (8006c18 <LoopForever+0x16>)
  cmp  r2, r3
 8006bf2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8006bf4:	d3f9      	bcc.n	8006bea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8006bf6:	f7fd ff0f 	bl	8004a18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006bfa:	f004 fe93 	bl	800b924 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006bfe:	f7fc fed7 	bl	80039b0 <main>

08006c02 <LoopForever>:

LoopForever:
    b LoopForever
 8006c02:	e7fe      	b.n	8006c02 <LoopForever>
   ldr   r0, =_estack
 8006c04:	20005000 	.word	0x20005000
  ldr  r3, =_sidata
 8006c08:	0800ce30 	.word	0x0800ce30
  ldr  r0, =_sdata
 8006c0c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8006c10:	200000d8 	.word	0x200000d8
  ldr  r2, =_sbss
 8006c14:	200000d8 	.word	0x200000d8
  ldr  r3, = _ebss
 8006c18:	200006b4 	.word	0x200006b4

08006c1c <DMA1_Channel1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006c1c:	e7fe      	b.n	8006c1c <DMA1_Channel1_IRQHandler>
	...

08006c20 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b082      	sub	sp, #8
 8006c24:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8006c26:	1dfb      	adds	r3, r7, #7
 8006c28:	2200      	movs	r2, #0
 8006c2a:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8006c2c:	4b0b      	ldr	r3, [pc, #44]	; (8006c5c <HAL_Init+0x3c>)
 8006c2e:	681a      	ldr	r2, [r3, #0]
 8006c30:	4b0a      	ldr	r3, [pc, #40]	; (8006c5c <HAL_Init+0x3c>)
 8006c32:	2140      	movs	r1, #64	; 0x40
 8006c34:	430a      	orrs	r2, r1
 8006c36:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006c38:	2000      	movs	r0, #0
 8006c3a:	f000 f811 	bl	8006c60 <HAL_InitTick>
 8006c3e:	1e03      	subs	r3, r0, #0
 8006c40:	d003      	beq.n	8006c4a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8006c42:	1dfb      	adds	r3, r7, #7
 8006c44:	2201      	movs	r2, #1
 8006c46:	701a      	strb	r2, [r3, #0]
 8006c48:	e001      	b.n	8006c4e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8006c4a:	f7fd fc79 	bl	8004540 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8006c4e:	1dfb      	adds	r3, r7, #7
 8006c50:	781b      	ldrb	r3, [r3, #0]
}
 8006c52:	0018      	movs	r0, r3
 8006c54:	46bd      	mov	sp, r7
 8006c56:	b002      	add	sp, #8
 8006c58:	bd80      	pop	{r7, pc}
 8006c5a:	46c0      	nop			; (mov r8, r8)
 8006c5c:	40022000 	.word	0x40022000

08006c60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006c60:	b590      	push	{r4, r7, lr}
 8006c62:	b083      	sub	sp, #12
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006c68:	4b14      	ldr	r3, [pc, #80]	; (8006cbc <HAL_InitTick+0x5c>)
 8006c6a:	681c      	ldr	r4, [r3, #0]
 8006c6c:	4b14      	ldr	r3, [pc, #80]	; (8006cc0 <HAL_InitTick+0x60>)
 8006c6e:	781b      	ldrb	r3, [r3, #0]
 8006c70:	0019      	movs	r1, r3
 8006c72:	23fa      	movs	r3, #250	; 0xfa
 8006c74:	0098      	lsls	r0, r3, #2
 8006c76:	f7f9 fa4f 	bl	8000118 <__udivsi3>
 8006c7a:	0003      	movs	r3, r0
 8006c7c:	0019      	movs	r1, r3
 8006c7e:	0020      	movs	r0, r4
 8006c80:	f7f9 fa4a 	bl	8000118 <__udivsi3>
 8006c84:	0003      	movs	r3, r0
 8006c86:	0018      	movs	r0, r3
 8006c88:	f000 fe91 	bl	80079ae <HAL_SYSTICK_Config>
 8006c8c:	1e03      	subs	r3, r0, #0
 8006c8e:	d001      	beq.n	8006c94 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8006c90:	2301      	movs	r3, #1
 8006c92:	e00f      	b.n	8006cb4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2b03      	cmp	r3, #3
 8006c98:	d80b      	bhi.n	8006cb2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006c9a:	6879      	ldr	r1, [r7, #4]
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	425b      	negs	r3, r3
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	0018      	movs	r0, r3
 8006ca4:	f000 fe5e 	bl	8007964 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006ca8:	4b06      	ldr	r3, [pc, #24]	; (8006cc4 <HAL_InitTick+0x64>)
 8006caa:	687a      	ldr	r2, [r7, #4]
 8006cac:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006cae:	2300      	movs	r3, #0
 8006cb0:	e000      	b.n	8006cb4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8006cb2:	2301      	movs	r3, #1
}
 8006cb4:	0018      	movs	r0, r3
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	b003      	add	sp, #12
 8006cba:	bd90      	pop	{r4, r7, pc}
 8006cbc:	20000010 	.word	0x20000010
 8006cc0:	20000070 	.word	0x20000070
 8006cc4:	2000006c 	.word	0x2000006c

08006cc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006ccc:	4b05      	ldr	r3, [pc, #20]	; (8006ce4 <HAL_IncTick+0x1c>)
 8006cce:	781b      	ldrb	r3, [r3, #0]
 8006cd0:	001a      	movs	r2, r3
 8006cd2:	4b05      	ldr	r3, [pc, #20]	; (8006ce8 <HAL_IncTick+0x20>)
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	18d2      	adds	r2, r2, r3
 8006cd8:	4b03      	ldr	r3, [pc, #12]	; (8006ce8 <HAL_IncTick+0x20>)
 8006cda:	601a      	str	r2, [r3, #0]
}
 8006cdc:	46c0      	nop			; (mov r8, r8)
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	bd80      	pop	{r7, pc}
 8006ce2:	46c0      	nop			; (mov r8, r8)
 8006ce4:	20000070 	.word	0x20000070
 8006ce8:	200006ac 	.word	0x200006ac

08006cec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	af00      	add	r7, sp, #0
  return uwTick;
 8006cf0:	4b02      	ldr	r3, [pc, #8]	; (8006cfc <HAL_GetTick+0x10>)
 8006cf2:	681b      	ldr	r3, [r3, #0]
}
 8006cf4:	0018      	movs	r0, r3
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	bd80      	pop	{r7, pc}
 8006cfa:	46c0      	nop			; (mov r8, r8)
 8006cfc:	200006ac 	.word	0x200006ac

08006d00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b084      	sub	sp, #16
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006d08:	f7ff fff0 	bl	8006cec <HAL_GetTick>
 8006d0c:	0003      	movs	r3, r0
 8006d0e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	3301      	adds	r3, #1
 8006d18:	d005      	beq.n	8006d26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006d1a:	4b09      	ldr	r3, [pc, #36]	; (8006d40 <HAL_Delay+0x40>)
 8006d1c:	781b      	ldrb	r3, [r3, #0]
 8006d1e:	001a      	movs	r2, r3
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	189b      	adds	r3, r3, r2
 8006d24:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006d26:	46c0      	nop			; (mov r8, r8)
 8006d28:	f7ff ffe0 	bl	8006cec <HAL_GetTick>
 8006d2c:	0002      	movs	r2, r0
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	1ad3      	subs	r3, r2, r3
 8006d32:	68fa      	ldr	r2, [r7, #12]
 8006d34:	429a      	cmp	r2, r3
 8006d36:	d8f7      	bhi.n	8006d28 <HAL_Delay+0x28>
  {
  }
}
 8006d38:	46c0      	nop			; (mov r8, r8)
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	b004      	add	sp, #16
 8006d3e:	bd80      	pop	{r7, pc}
 8006d40:	20000070 	.word	0x20000070

08006d44 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8006d48:	4b04      	ldr	r3, [pc, #16]	; (8006d5c <HAL_SuspendTick+0x18>)
 8006d4a:	681a      	ldr	r2, [r3, #0]
 8006d4c:	4b03      	ldr	r3, [pc, #12]	; (8006d5c <HAL_SuspendTick+0x18>)
 8006d4e:	2102      	movs	r1, #2
 8006d50:	438a      	bics	r2, r1
 8006d52:	601a      	str	r2, [r3, #0]
}
 8006d54:	46c0      	nop			; (mov r8, r8)
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bd80      	pop	{r7, pc}
 8006d5a:	46c0      	nop			; (mov r8, r8)
 8006d5c:	e000e010 	.word	0xe000e010

08006d60 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b082      	sub	sp, #8
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d101      	bne.n	8006d72 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8006d6e:	2301      	movs	r3, #1
 8006d70:	e159      	b.n	8007026 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d10a      	bne.n	8006d90 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2250      	movs	r2, #80	; 0x50
 8006d84:	2100      	movs	r1, #0
 8006d86:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	0018      	movs	r0, r3
 8006d8c:	f7fd fbec 	bl	8004568 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d94:	2210      	movs	r2, #16
 8006d96:	4013      	ands	r3, r2
 8006d98:	2b10      	cmp	r3, #16
 8006d9a:	d005      	beq.n	8006da8 <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	689b      	ldr	r3, [r3, #8]
 8006da2:	2204      	movs	r2, #4
 8006da4:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8006da6:	d00b      	beq.n	8006dc0 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dac:	2210      	movs	r2, #16
 8006dae:	431a      	orrs	r2, r3
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2250      	movs	r2, #80	; 0x50
 8006db8:	2100      	movs	r1, #0
 8006dba:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8006dbc:	2301      	movs	r3, #1
 8006dbe:	e132      	b.n	8007026 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dc4:	4a9a      	ldr	r2, [pc, #616]	; (8007030 <HAL_ADC_Init+0x2d0>)
 8006dc6:	4013      	ands	r3, r2
 8006dc8:	2202      	movs	r2, #2
 8006dca:	431a      	orrs	r2, r3
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	689b      	ldr	r3, [r3, #8]
 8006dd6:	2203      	movs	r2, #3
 8006dd8:	4013      	ands	r3, r2
 8006dda:	2b01      	cmp	r3, #1
 8006ddc:	d108      	bne.n	8006df0 <HAL_ADC_Init+0x90>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	2201      	movs	r2, #1
 8006de6:	4013      	ands	r3, r2
 8006de8:	2b01      	cmp	r3, #1
 8006dea:	d101      	bne.n	8006df0 <HAL_ADC_Init+0x90>
 8006dec:	2301      	movs	r3, #1
 8006dee:	e000      	b.n	8006df2 <HAL_ADC_Init+0x92>
 8006df0:	2300      	movs	r3, #0
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d149      	bne.n	8006e8a <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	685a      	ldr	r2, [r3, #4]
 8006dfa:	23c0      	movs	r3, #192	; 0xc0
 8006dfc:	061b      	lsls	r3, r3, #24
 8006dfe:	429a      	cmp	r2, r3
 8006e00:	d00b      	beq.n	8006e1a <HAL_ADC_Init+0xba>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	685a      	ldr	r2, [r3, #4]
 8006e06:	2380      	movs	r3, #128	; 0x80
 8006e08:	05db      	lsls	r3, r3, #23
 8006e0a:	429a      	cmp	r2, r3
 8006e0c:	d005      	beq.n	8006e1a <HAL_ADC_Init+0xba>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	685a      	ldr	r2, [r3, #4]
 8006e12:	2380      	movs	r3, #128	; 0x80
 8006e14:	061b      	lsls	r3, r3, #24
 8006e16:	429a      	cmp	r2, r3
 8006e18:	d111      	bne.n	8006e3e <HAL_ADC_Init+0xde>
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	691a      	ldr	r2, [r3, #16]
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	0092      	lsls	r2, r2, #2
 8006e26:	0892      	lsrs	r2, r2, #2
 8006e28:	611a      	str	r2, [r3, #16]
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	6919      	ldr	r1, [r3, #16]
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	685a      	ldr	r2, [r3, #4]
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	430a      	orrs	r2, r1
 8006e3a:	611a      	str	r2, [r3, #16]
 8006e3c:	e014      	b.n	8006e68 <HAL_ADC_Init+0x108>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	691a      	ldr	r2, [r3, #16]
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	0092      	lsls	r2, r2, #2
 8006e4a:	0892      	lsrs	r2, r2, #2
 8006e4c:	611a      	str	r2, [r3, #16]
 8006e4e:	4b79      	ldr	r3, [pc, #484]	; (8007034 <HAL_ADC_Init+0x2d4>)
 8006e50:	681a      	ldr	r2, [r3, #0]
 8006e52:	4b78      	ldr	r3, [pc, #480]	; (8007034 <HAL_ADC_Init+0x2d4>)
 8006e54:	4978      	ldr	r1, [pc, #480]	; (8007038 <HAL_ADC_Init+0x2d8>)
 8006e56:	400a      	ands	r2, r1
 8006e58:	601a      	str	r2, [r3, #0]
 8006e5a:	4b76      	ldr	r3, [pc, #472]	; (8007034 <HAL_ADC_Init+0x2d4>)
 8006e5c:	6819      	ldr	r1, [r3, #0]
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	685a      	ldr	r2, [r3, #4]
 8006e62:	4b74      	ldr	r3, [pc, #464]	; (8007034 <HAL_ADC_Init+0x2d4>)
 8006e64:	430a      	orrs	r2, r1
 8006e66:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	68da      	ldr	r2, [r3, #12]
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	2118      	movs	r1, #24
 8006e74:	438a      	bics	r2, r1
 8006e76:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	68d9      	ldr	r1, [r3, #12]
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	689a      	ldr	r2, [r3, #8]
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	430a      	orrs	r2, r1
 8006e88:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8006e8a:	4b6a      	ldr	r3, [pc, #424]	; (8007034 <HAL_ADC_Init+0x2d4>)
 8006e8c:	681a      	ldr	r2, [r3, #0]
 8006e8e:	4b69      	ldr	r3, [pc, #420]	; (8007034 <HAL_ADC_Init+0x2d4>)
 8006e90:	496a      	ldr	r1, [pc, #424]	; (800703c <HAL_ADC_Init+0x2dc>)
 8006e92:	400a      	ands	r2, r1
 8006e94:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 8006e96:	4b67      	ldr	r3, [pc, #412]	; (8007034 <HAL_ADC_Init+0x2d4>)
 8006e98:	6819      	ldr	r1, [r3, #0]
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e9e:	065a      	lsls	r2, r3, #25
 8006ea0:	4b64      	ldr	r3, [pc, #400]	; (8007034 <HAL_ADC_Init+0x2d4>)
 8006ea2:	430a      	orrs	r2, r1
 8006ea4:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	689a      	ldr	r2, [r3, #8]
 8006eac:	2380      	movs	r3, #128	; 0x80
 8006eae:	055b      	lsls	r3, r3, #21
 8006eb0:	4013      	ands	r3, r2
 8006eb2:	d108      	bne.n	8006ec6 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	689a      	ldr	r2, [r3, #8]
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	2180      	movs	r1, #128	; 0x80
 8006ec0:	0549      	lsls	r1, r1, #21
 8006ec2:	430a      	orrs	r2, r1
 8006ec4:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	68da      	ldr	r2, [r3, #12]
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	495b      	ldr	r1, [pc, #364]	; (8007040 <HAL_ADC_Init+0x2e0>)
 8006ed2:	400a      	ands	r2, r1
 8006ed4:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	68d9      	ldr	r1, [r3, #12]
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	691b      	ldr	r3, [r3, #16]
 8006ee4:	2b02      	cmp	r3, #2
 8006ee6:	d101      	bne.n	8006eec <HAL_ADC_Init+0x18c>
 8006ee8:	2304      	movs	r3, #4
 8006eea:	e000      	b.n	8006eee <HAL_ADC_Init+0x18e>
 8006eec:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8006eee:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2020      	movs	r0, #32
 8006ef4:	5c1b      	ldrb	r3, [r3, r0]
 8006ef6:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8006ef8:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	202c      	movs	r0, #44	; 0x2c
 8006efe:	5c1b      	ldrb	r3, [r3, r0]
 8006f00:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8006f02:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8006f08:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	699b      	ldr	r3, [r3, #24]
 8006f0e:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8006f10:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	69db      	ldr	r3, [r3, #28]
 8006f16:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8006f18:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	430a      	orrs	r2, r1
 8006f20:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006f26:	23c2      	movs	r3, #194	; 0xc2
 8006f28:	33ff      	adds	r3, #255	; 0xff
 8006f2a:	429a      	cmp	r2, r3
 8006f2c:	d00b      	beq.n	8006f46 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	68d9      	ldr	r1, [r3, #12]
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8006f3c:	431a      	orrs	r2, r3
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	430a      	orrs	r2, r1
 8006f44:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2221      	movs	r2, #33	; 0x21
 8006f4a:	5c9b      	ldrb	r3, [r3, r2]
 8006f4c:	2b01      	cmp	r3, #1
 8006f4e:	d11a      	bne.n	8006f86 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2220      	movs	r2, #32
 8006f54:	5c9b      	ldrb	r3, [r3, r2]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d109      	bne.n	8006f6e <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	68da      	ldr	r2, [r3, #12]
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	2180      	movs	r1, #128	; 0x80
 8006f66:	0249      	lsls	r1, r1, #9
 8006f68:	430a      	orrs	r2, r1
 8006f6a:	60da      	str	r2, [r3, #12]
 8006f6c:	e00b      	b.n	8006f86 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f72:	2220      	movs	r2, #32
 8006f74:	431a      	orrs	r2, r3
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f7e:	2201      	movs	r2, #1
 8006f80:	431a      	orrs	r2, r3
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f8a:	2b01      	cmp	r3, #1
 8006f8c:	d11f      	bne.n	8006fce <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	691a      	ldr	r2, [r3, #16]
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	492a      	ldr	r1, [pc, #168]	; (8007044 <HAL_ADC_Init+0x2e4>)
 8006f9a:	400a      	ands	r2, r1
 8006f9c:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	6919      	ldr	r1, [r3, #16]
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8006fac:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 8006fb2:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	430a      	orrs	r2, r1
 8006fba:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	691a      	ldr	r2, [r3, #16]
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	2101      	movs	r1, #1
 8006fc8:	430a      	orrs	r2, r1
 8006fca:	611a      	str	r2, [r3, #16]
 8006fcc:	e00e      	b.n	8006fec <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	691b      	ldr	r3, [r3, #16]
 8006fd4:	2201      	movs	r2, #1
 8006fd6:	4013      	ands	r3, r2
 8006fd8:	2b01      	cmp	r3, #1
 8006fda:	d107      	bne.n	8006fec <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	691a      	ldr	r2, [r3, #16]
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	2101      	movs	r1, #1
 8006fe8:	438a      	bics	r2, r1
 8006fea:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	695a      	ldr	r2, [r3, #20]
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	2107      	movs	r1, #7
 8006ff8:	438a      	bics	r2, r1
 8006ffa:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	6959      	ldr	r1, [r3, #20]
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	430a      	orrs	r2, r1
 800700c:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2200      	movs	r2, #0
 8007012:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007018:	2203      	movs	r2, #3
 800701a:	4393      	bics	r3, r2
 800701c:	2201      	movs	r2, #1
 800701e:	431a      	orrs	r2, r3
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8007024:	2300      	movs	r3, #0
}
 8007026:	0018      	movs	r0, r3
 8007028:	46bd      	mov	sp, r7
 800702a:	b002      	add	sp, #8
 800702c:	bd80      	pop	{r7, pc}
 800702e:	46c0      	nop			; (mov r8, r8)
 8007030:	fffffefd 	.word	0xfffffefd
 8007034:	40012708 	.word	0x40012708
 8007038:	ffc3ffff 	.word	0xffc3ffff
 800703c:	fdffffff 	.word	0xfdffffff
 8007040:	fffe0219 	.word	0xfffe0219
 8007044:	fffffc03 	.word	0xfffffc03

08007048 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8007048:	b590      	push	{r4, r7, lr}
 800704a:	b085      	sub	sp, #20
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007050:	230f      	movs	r3, #15
 8007052:	18fb      	adds	r3, r7, r3
 8007054:	2200      	movs	r2, #0
 8007056:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	689b      	ldr	r3, [r3, #8]
 800705e:	2204      	movs	r2, #4
 8007060:	4013      	ands	r3, r2
 8007062:	d138      	bne.n	80070d6 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2250      	movs	r2, #80	; 0x50
 8007068:	5c9b      	ldrb	r3, [r3, r2]
 800706a:	2b01      	cmp	r3, #1
 800706c:	d101      	bne.n	8007072 <HAL_ADC_Start+0x2a>
 800706e:	2302      	movs	r3, #2
 8007070:	e038      	b.n	80070e4 <HAL_ADC_Start+0x9c>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2250      	movs	r2, #80	; 0x50
 8007076:	2101      	movs	r1, #1
 8007078:	5499      	strb	r1, [r3, r2]
    
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	69db      	ldr	r3, [r3, #28]
 800707e:	2b01      	cmp	r3, #1
 8007080:	d007      	beq.n	8007092 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8007082:	230f      	movs	r3, #15
 8007084:	18fc      	adds	r4, r7, r3
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	0018      	movs	r0, r3
 800708a:	f000 fa87 	bl	800759c <ADC_Enable>
 800708e:	0003      	movs	r3, r0
 8007090:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8007092:	230f      	movs	r3, #15
 8007094:	18fb      	adds	r3, r7, r3
 8007096:	781b      	ldrb	r3, [r3, #0]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d120      	bne.n	80070de <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070a0:	4a12      	ldr	r2, [pc, #72]	; (80070ec <HAL_ADC_Start+0xa4>)
 80070a2:	4013      	ands	r3, r2
 80070a4:	2280      	movs	r2, #128	; 0x80
 80070a6:	0052      	lsls	r2, r2, #1
 80070a8:	431a      	orrs	r2, r3
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2200      	movs	r2, #0
 80070b2:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2250      	movs	r2, #80	; 0x50
 80070b8:	2100      	movs	r1, #0
 80070ba:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	221c      	movs	r2, #28
 80070c2:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	689a      	ldr	r2, [r3, #8]
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	2104      	movs	r1, #4
 80070d0:	430a      	orrs	r2, r1
 80070d2:	609a      	str	r2, [r3, #8]
 80070d4:	e003      	b.n	80070de <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80070d6:	230f      	movs	r3, #15
 80070d8:	18fb      	adds	r3, r7, r3
 80070da:	2202      	movs	r2, #2
 80070dc:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80070de:	230f      	movs	r3, #15
 80070e0:	18fb      	adds	r3, r7, r3
 80070e2:	781b      	ldrb	r3, [r3, #0]
}
 80070e4:	0018      	movs	r0, r3
 80070e6:	46bd      	mov	sp, r7
 80070e8:	b005      	add	sp, #20
 80070ea:	bd90      	pop	{r4, r7, pc}
 80070ec:	fffff0fe 	.word	0xfffff0fe

080070f0 <HAL_ADC_Stop>:
  *         case of auto_injection mode), disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80070f0:	b5b0      	push	{r4, r5, r7, lr}
 80070f2:	b084      	sub	sp, #16
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80070f8:	230f      	movs	r3, #15
 80070fa:	18fb      	adds	r3, r7, r3
 80070fc:	2200      	movs	r2, #0
 80070fe:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2250      	movs	r2, #80	; 0x50
 8007104:	5c9b      	ldrb	r3, [r3, r2]
 8007106:	2b01      	cmp	r3, #1
 8007108:	d101      	bne.n	800710e <HAL_ADC_Stop+0x1e>
 800710a:	2302      	movs	r3, #2
 800710c:	e02a      	b.n	8007164 <HAL_ADC_Stop+0x74>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2250      	movs	r2, #80	; 0x50
 8007112:	2101      	movs	r1, #1
 8007114:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8007116:	250f      	movs	r5, #15
 8007118:	197c      	adds	r4, r7, r5
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	0018      	movs	r0, r3
 800711e:	f000 fafd 	bl	800771c <ADC_ConversionStop>
 8007122:	0003      	movs	r3, r0
 8007124:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8007126:	197b      	adds	r3, r7, r5
 8007128:	781b      	ldrb	r3, [r3, #0]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d113      	bne.n	8007156 <HAL_ADC_Stop+0x66>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800712e:	250f      	movs	r5, #15
 8007130:	197c      	adds	r4, r7, r5
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	0018      	movs	r0, r3
 8007136:	f000 fa91 	bl	800765c <ADC_Disable>
 800713a:	0003      	movs	r3, r0
 800713c:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800713e:	197b      	adds	r3, r7, r5
 8007140:	781b      	ldrb	r3, [r3, #0]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d107      	bne.n	8007156 <HAL_ADC_Stop+0x66>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800714a:	4a08      	ldr	r2, [pc, #32]	; (800716c <HAL_ADC_Stop+0x7c>)
 800714c:	4013      	ands	r3, r2
 800714e:	2201      	movs	r2, #1
 8007150:	431a      	orrs	r2, r3
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2250      	movs	r2, #80	; 0x50
 800715a:	2100      	movs	r1, #0
 800715c:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 800715e:	230f      	movs	r3, #15
 8007160:	18fb      	adds	r3, r7, r3
 8007162:	781b      	ldrb	r3, [r3, #0]
}
 8007164:	0018      	movs	r0, r3
 8007166:	46bd      	mov	sp, r7
 8007168:	b004      	add	sp, #16
 800716a:	bdb0      	pop	{r4, r5, r7, pc}
 800716c:	fffffefe 	.word	0xfffffefe

08007170 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b084      	sub	sp, #16
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
 8007178:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800717a:	2300      	movs	r3, #0
 800717c:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 800717e:	2300      	movs	r3, #0
 8007180:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	695b      	ldr	r3, [r3, #20]
 8007186:	2b08      	cmp	r3, #8
 8007188:	d102      	bne.n	8007190 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800718a:	2308      	movs	r3, #8
 800718c:	60fb      	str	r3, [r7, #12]
 800718e:	e014      	b.n	80071ba <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	68db      	ldr	r3, [r3, #12]
 8007196:	2201      	movs	r2, #1
 8007198:	4013      	ands	r3, r2
 800719a:	2b01      	cmp	r3, #1
 800719c:	d10b      	bne.n	80071b6 <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071a2:	2220      	movs	r2, #32
 80071a4:	431a      	orrs	r2, r3
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2250      	movs	r2, #80	; 0x50
 80071ae:	2100      	movs	r1, #0
 80071b0:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 80071b2:	2301      	movs	r3, #1
 80071b4:	e06c      	b.n	8007290 <HAL_ADC_PollForConversion+0x120>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80071b6:	230c      	movs	r3, #12
 80071b8:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80071ba:	f7ff fd97 	bl	8006cec <HAL_GetTick>
 80071be:	0003      	movs	r3, r0
 80071c0:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80071c2:	e019      	b.n	80071f8 <HAL_ADC_PollForConversion+0x88>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	3301      	adds	r3, #1
 80071c8:	d016      	beq.n	80071f8 <HAL_ADC_PollForConversion+0x88>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d007      	beq.n	80071e0 <HAL_ADC_PollForConversion+0x70>
 80071d0:	f7ff fd8c 	bl	8006cec <HAL_GetTick>
 80071d4:	0002      	movs	r2, r0
 80071d6:	68bb      	ldr	r3, [r7, #8]
 80071d8:	1ad3      	subs	r3, r2, r3
 80071da:	683a      	ldr	r2, [r7, #0]
 80071dc:	429a      	cmp	r2, r3
 80071de:	d20b      	bcs.n	80071f8 <HAL_ADC_PollForConversion+0x88>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071e4:	2204      	movs	r2, #4
 80071e6:	431a      	orrs	r2, r3
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2250      	movs	r2, #80	; 0x50
 80071f0:	2100      	movs	r1, #0
 80071f2:	5499      	strb	r1, [r3, r2]
        
        return HAL_TIMEOUT;
 80071f4:	2303      	movs	r3, #3
 80071f6:	e04b      	b.n	8007290 <HAL_ADC_PollForConversion+0x120>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	68fa      	ldr	r2, [r7, #12]
 8007200:	4013      	ands	r3, r2
 8007202:	d0df      	beq.n	80071c4 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007208:	2280      	movs	r2, #128	; 0x80
 800720a:	0092      	lsls	r2, r2, #2
 800720c:	431a      	orrs	r2, r3
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	68da      	ldr	r2, [r3, #12]
 8007218:	23c0      	movs	r3, #192	; 0xc0
 800721a:	011b      	lsls	r3, r3, #4
 800721c:	4013      	ands	r3, r2
 800721e:	d12e      	bne.n	800727e <HAL_ADC_PollForConversion+0x10e>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2220      	movs	r2, #32
 8007224:	5c9b      	ldrb	r3, [r3, r2]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8007226:	2b00      	cmp	r3, #0
 8007228:	d129      	bne.n	800727e <HAL_ADC_PollForConversion+0x10e>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	2208      	movs	r2, #8
 8007232:	4013      	ands	r3, r2
 8007234:	2b08      	cmp	r3, #8
 8007236:	d122      	bne.n	800727e <HAL_ADC_PollForConversion+0x10e>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	689b      	ldr	r3, [r3, #8]
 800723e:	2204      	movs	r2, #4
 8007240:	4013      	ands	r3, r2
 8007242:	d110      	bne.n	8007266 <HAL_ADC_PollForConversion+0xf6>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	685a      	ldr	r2, [r3, #4]
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	210c      	movs	r1, #12
 8007250:	438a      	bics	r2, r1
 8007252:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007258:	4a0f      	ldr	r2, [pc, #60]	; (8007298 <HAL_ADC_PollForConversion+0x128>)
 800725a:	4013      	ands	r3, r2
 800725c:	2201      	movs	r2, #1
 800725e:	431a      	orrs	r2, r3
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	655a      	str	r2, [r3, #84]	; 0x54
 8007264:	e00b      	b.n	800727e <HAL_ADC_PollForConversion+0x10e>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800726a:	2220      	movs	r2, #32
 800726c:	431a      	orrs	r2, r3
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007276:	2201      	movs	r2, #1
 8007278:	431a      	orrs	r2, r3
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	659a      	str	r2, [r3, #88]	; 0x58
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	699b      	ldr	r3, [r3, #24]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d103      	bne.n	800728e <HAL_ADC_PollForConversion+0x11e>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	220c      	movs	r2, #12
 800728c:	601a      	str	r2, [r3, #0]
  }
  
  /* Return function status */
  return HAL_OK;
 800728e:	2300      	movs	r3, #0
}
 8007290:	0018      	movs	r0, r3
 8007292:	46bd      	mov	sp, r7
 8007294:	b004      	add	sp, #16
 8007296:	bd80      	pop	{r7, pc}
 8007298:	fffffefe 	.word	0xfffffefe

0800729c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b082      	sub	sp, #8
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80072aa:	0018      	movs	r0, r3
 80072ac:	46bd      	mov	sp, r7
 80072ae:	b002      	add	sp, #8
 80072b0:	bd80      	pop	{r7, pc}
	...

080072b4 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b082      	sub	sp, #8
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	2204      	movs	r2, #4
 80072c4:	4013      	ands	r3, r2
 80072c6:	2b04      	cmp	r3, #4
 80072c8:	d106      	bne.n	80072d8 <HAL_ADC_IRQHandler+0x24>
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	685b      	ldr	r3, [r3, #4]
 80072d0:	2204      	movs	r2, #4
 80072d2:	4013      	ands	r3, r2
 80072d4:	2b04      	cmp	r3, #4
 80072d6:	d00d      	beq.n	80072f4 <HAL_ADC_IRQHandler+0x40>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	2208      	movs	r2, #8
 80072e0:	4013      	ands	r3, r2
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80072e2:	2b08      	cmp	r3, #8
 80072e4:	d154      	bne.n	8007390 <HAL_ADC_IRQHandler+0xdc>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	685b      	ldr	r3, [r3, #4]
 80072ec:	2208      	movs	r2, #8
 80072ee:	4013      	ands	r3, r2
 80072f0:	2b08      	cmp	r3, #8
 80072f2:	d14d      	bne.n	8007390 <HAL_ADC_IRQHandler+0xdc>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072f8:	2210      	movs	r2, #16
 80072fa:	4013      	ands	r3, r2
 80072fc:	d106      	bne.n	800730c <HAL_ADC_IRQHandler+0x58>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007302:	2280      	movs	r2, #128	; 0x80
 8007304:	0092      	lsls	r2, r2, #2
 8007306:	431a      	orrs	r2, r3
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	655a      	str	r2, [r3, #84]	; 0x54
    }
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	68da      	ldr	r2, [r3, #12]
 8007312:	23c0      	movs	r3, #192	; 0xc0
 8007314:	011b      	lsls	r3, r3, #4
 8007316:	4013      	ands	r3, r2
 8007318:	d12e      	bne.n	8007378 <HAL_ADC_IRQHandler+0xc4>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2220      	movs	r2, #32
 800731e:	5c9b      	ldrb	r3, [r3, r2]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8007320:	2b00      	cmp	r3, #0
 8007322:	d129      	bne.n	8007378 <HAL_ADC_IRQHandler+0xc4>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	2208      	movs	r2, #8
 800732c:	4013      	ands	r3, r2
 800732e:	2b08      	cmp	r3, #8
 8007330:	d122      	bne.n	8007378 <HAL_ADC_IRQHandler+0xc4>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	689b      	ldr	r3, [r3, #8]
 8007338:	2204      	movs	r2, #4
 800733a:	4013      	ands	r3, r2
 800733c:	d110      	bne.n	8007360 <HAL_ADC_IRQHandler+0xac>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	685a      	ldr	r2, [r3, #4]
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	210c      	movs	r1, #12
 800734a:	438a      	bics	r2, r1
 800734c:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007352:	4a35      	ldr	r2, [pc, #212]	; (8007428 <HAL_ADC_IRQHandler+0x174>)
 8007354:	4013      	ands	r3, r2
 8007356:	2201      	movs	r2, #1
 8007358:	431a      	orrs	r2, r3
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	655a      	str	r2, [r3, #84]	; 0x54
 800735e:	e00b      	b.n	8007378 <HAL_ADC_IRQHandler+0xc4>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007364:	2220      	movs	r2, #32
 8007366:	431a      	orrs	r2, r3
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	655a      	str	r2, [r3, #84]	; 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007370:	2201      	movs	r2, #1
 8007372:	431a      	orrs	r2, r3
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	659a      	str	r2, [r3, #88]	; 0x58
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	0018      	movs	r0, r3
 800737c:	f000 f856 	bl	800742c <HAL_ADC_ConvCpltCallback>
    /* Note: Management of low power auto-wait enabled: flags must be cleared */
    /*       by user when fetching ADC conversion data.                       */
    /*       This case is managed in IRQ handler, but this low-power mode     */
    /*       should not be used with programming model IT or DMA.             */
    /*       Refer to comment of parameter "LowPowerAutoWait".                */
    if (hadc->Init.LowPowerAutoWait != ENABLE)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	699b      	ldr	r3, [r3, #24]
 8007384:	2b01      	cmp	r3, #1
 8007386:	d003      	beq.n	8007390 <HAL_ADC_IRQHandler+0xdc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	220c      	movs	r2, #12
 800738e:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	2280      	movs	r2, #128	; 0x80
 8007398:	4013      	ands	r3, r2
 800739a:	2b80      	cmp	r3, #128	; 0x80
 800739c:	d115      	bne.n	80073ca <HAL_ADC_IRQHandler+0x116>
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	685b      	ldr	r3, [r3, #4]
 80073a4:	2280      	movs	r2, #128	; 0x80
 80073a6:	4013      	ands	r3, r2
 80073a8:	2b80      	cmp	r3, #128	; 0x80
 80073aa:	d10e      	bne.n	80073ca <HAL_ADC_IRQHandler+0x116>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073b0:	2280      	movs	r2, #128	; 0x80
 80073b2:	0252      	lsls	r2, r2, #9
 80073b4:	431a      	orrs	r2, r3
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	655a      	str	r2, [r3, #84]	; 0x54
    
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	0018      	movs	r0, r3
 80073be:	f000 f83d 	bl	800743c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear ADC Analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	2280      	movs	r2, #128	; 0x80
 80073c8:	601a      	str	r2, [r3, #0]
   
  }
  
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	2210      	movs	r2, #16
 80073d2:	4013      	ands	r3, r2
 80073d4:	2b10      	cmp	r3, #16
 80073d6:	d123      	bne.n	8007420 <HAL_ADC_IRQHandler+0x16c>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	685b      	ldr	r3, [r3, #4]
 80073de:	2210      	movs	r2, #16
 80073e0:	4013      	ands	r3, r2
 80073e2:	2b10      	cmp	r3, #16
 80073e4:	d11c      	bne.n	8007420 <HAL_ADC_IRQHandler+0x16c>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d006      	beq.n	80073fc <HAL_ADC_IRQHandler+0x148>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	68db      	ldr	r3, [r3, #12]
 80073f4:	2201      	movs	r2, #1
 80073f6:	4013      	ands	r3, r2
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 80073f8:	2b01      	cmp	r3, #1
 80073fa:	d10d      	bne.n	8007418 <HAL_ADC_IRQHandler+0x164>
    {
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007400:	2202      	movs	r2, #2
 8007402:	431a      	orrs	r2, r3
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	2210      	movs	r2, #16
 800740e:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	0018      	movs	r0, r3
 8007414:	f000 f81a 	bl	800744c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	2210      	movs	r2, #16
 800741e:	601a      	str	r2, [r3, #0]
  }
  
}
 8007420:	46c0      	nop			; (mov r8, r8)
 8007422:	46bd      	mov	sp, r7
 8007424:	b002      	add	sp, #8
 8007426:	bd80      	pop	{r7, pc}
 8007428:	fffffefe 	.word	0xfffffefe

0800742c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b082      	sub	sp, #8
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8007434:	46c0      	nop			; (mov r8, r8)
 8007436:	46bd      	mov	sp, r7
 8007438:	b002      	add	sp, #8
 800743a:	bd80      	pop	{r7, pc}

0800743c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b082      	sub	sp, #8
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8007444:	46c0      	nop			; (mov r8, r8)
 8007446:	46bd      	mov	sp, r7
 8007448:	b002      	add	sp, #8
 800744a:	bd80      	pop	{r7, pc}

0800744c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b082      	sub	sp, #8
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8007454:	46c0      	nop			; (mov r8, r8)
 8007456:	46bd      	mov	sp, r7
 8007458:	b002      	add	sp, #8
 800745a:	bd80      	pop	{r7, pc}

0800745c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b082      	sub	sp, #8
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
 8007464:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2250      	movs	r2, #80	; 0x50
 800746a:	5c9b      	ldrb	r3, [r3, r2]
 800746c:	2b01      	cmp	r3, #1
 800746e:	d101      	bne.n	8007474 <HAL_ADC_ConfigChannel+0x18>
 8007470:	2302      	movs	r3, #2
 8007472:	e085      	b.n	8007580 <HAL_ADC_ConfigChannel+0x124>
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2250      	movs	r2, #80	; 0x50
 8007478:	2101      	movs	r1, #1
 800747a:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	689b      	ldr	r3, [r3, #8]
 8007482:	2204      	movs	r2, #4
 8007484:	4013      	ands	r3, r2
 8007486:	d00b      	beq.n	80074a0 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800748c:	2220      	movs	r2, #32
 800748e:	431a      	orrs	r2, r3
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2250      	movs	r2, #80	; 0x50
 8007498:	2100      	movs	r1, #0
 800749a:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800749c:	2301      	movs	r3, #1
 800749e:	e06f      	b.n	8007580 <HAL_ADC_ConfigChannel+0x124>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	685b      	ldr	r3, [r3, #4]
 80074a4:	4a38      	ldr	r2, [pc, #224]	; (8007588 <HAL_ADC_ConfigChannel+0x12c>)
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d035      	beq.n	8007516 <HAL_ADC_ConfigChannel+0xba>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	035b      	lsls	r3, r3, #13
 80074b6:	0b5a      	lsrs	r2, r3, #13
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	430a      	orrs	r2, r1
 80074be:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	681a      	ldr	r2, [r3, #0]
 80074c4:	2380      	movs	r3, #128	; 0x80
 80074c6:	02db      	lsls	r3, r3, #11
 80074c8:	4013      	ands	r3, r2
 80074ca:	d009      	beq.n	80074e0 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 80074cc:	4b2f      	ldr	r3, [pc, #188]	; (800758c <HAL_ADC_ConfigChannel+0x130>)
 80074ce:	681a      	ldr	r2, [r3, #0]
 80074d0:	4b2e      	ldr	r3, [pc, #184]	; (800758c <HAL_ADC_ConfigChannel+0x130>)
 80074d2:	2180      	movs	r1, #128	; 0x80
 80074d4:	0409      	lsls	r1, r1, #16
 80074d6:	430a      	orrs	r2, r1
 80074d8:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 80074da:	200a      	movs	r0, #10
 80074dc:	f000 f964 	bl	80077a8 <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	681a      	ldr	r2, [r3, #0]
 80074e4:	2380      	movs	r3, #128	; 0x80
 80074e6:	029b      	lsls	r3, r3, #10
 80074e8:	4013      	ands	r3, r2
 80074ea:	d006      	beq.n	80074fa <HAL_ADC_ConfigChannel+0x9e>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 80074ec:	4b27      	ldr	r3, [pc, #156]	; (800758c <HAL_ADC_ConfigChannel+0x130>)
 80074ee:	681a      	ldr	r2, [r3, #0]
 80074f0:	4b26      	ldr	r3, [pc, #152]	; (800758c <HAL_ADC_ConfigChannel+0x130>)
 80074f2:	2180      	movs	r1, #128	; 0x80
 80074f4:	03c9      	lsls	r1, r1, #15
 80074f6:	430a      	orrs	r2, r1
 80074f8:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	681a      	ldr	r2, [r3, #0]
 80074fe:	2380      	movs	r3, #128	; 0x80
 8007500:	025b      	lsls	r3, r3, #9
 8007502:	4013      	ands	r3, r2
 8007504:	d037      	beq.n	8007576 <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR |= ADC_CCR_VLCDEN;   
 8007506:	4b21      	ldr	r3, [pc, #132]	; (800758c <HAL_ADC_ConfigChannel+0x130>)
 8007508:	681a      	ldr	r2, [r3, #0]
 800750a:	4b20      	ldr	r3, [pc, #128]	; (800758c <HAL_ADC_ConfigChannel+0x130>)
 800750c:	2180      	movs	r1, #128	; 0x80
 800750e:	0449      	lsls	r1, r1, #17
 8007510:	430a      	orrs	r2, r1
 8007512:	601a      	str	r2, [r3, #0]
 8007514:	e02f      	b.n	8007576 <HAL_ADC_ConfigChannel+0x11a>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	035b      	lsls	r3, r3, #13
 8007522:	0b5b      	lsrs	r3, r3, #13
 8007524:	43d9      	mvns	r1, r3
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	400a      	ands	r2, r1
 800752c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	681a      	ldr	r2, [r3, #0]
 8007532:	2380      	movs	r3, #128	; 0x80
 8007534:	02db      	lsls	r3, r3, #11
 8007536:	4013      	ands	r3, r2
 8007538:	d005      	beq.n	8007546 <HAL_ADC_ConfigChannel+0xea>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 800753a:	4b14      	ldr	r3, [pc, #80]	; (800758c <HAL_ADC_ConfigChannel+0x130>)
 800753c:	681a      	ldr	r2, [r3, #0]
 800753e:	4b13      	ldr	r3, [pc, #76]	; (800758c <HAL_ADC_ConfigChannel+0x130>)
 8007540:	4913      	ldr	r1, [pc, #76]	; (8007590 <HAL_ADC_ConfigChannel+0x134>)
 8007542:	400a      	ands	r2, r1
 8007544:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	681a      	ldr	r2, [r3, #0]
 800754a:	2380      	movs	r3, #128	; 0x80
 800754c:	029b      	lsls	r3, r3, #10
 800754e:	4013      	ands	r3, r2
 8007550:	d005      	beq.n	800755e <HAL_ADC_ConfigChannel+0x102>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8007552:	4b0e      	ldr	r3, [pc, #56]	; (800758c <HAL_ADC_ConfigChannel+0x130>)
 8007554:	681a      	ldr	r2, [r3, #0]
 8007556:	4b0d      	ldr	r3, [pc, #52]	; (800758c <HAL_ADC_ConfigChannel+0x130>)
 8007558:	490e      	ldr	r1, [pc, #56]	; (8007594 <HAL_ADC_ConfigChannel+0x138>)
 800755a:	400a      	ands	r2, r1
 800755c:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	681a      	ldr	r2, [r3, #0]
 8007562:	2380      	movs	r3, #128	; 0x80
 8007564:	025b      	lsls	r3, r3, #9
 8007566:	4013      	ands	r3, r2
 8007568:	d005      	beq.n	8007576 <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR &= ~ADC_CCR_VLCDEN;   
 800756a:	4b08      	ldr	r3, [pc, #32]	; (800758c <HAL_ADC_ConfigChannel+0x130>)
 800756c:	681a      	ldr	r2, [r3, #0]
 800756e:	4b07      	ldr	r3, [pc, #28]	; (800758c <HAL_ADC_ConfigChannel+0x130>)
 8007570:	4909      	ldr	r1, [pc, #36]	; (8007598 <HAL_ADC_ConfigChannel+0x13c>)
 8007572:	400a      	ands	r2, r1
 8007574:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2250      	movs	r2, #80	; 0x50
 800757a:	2100      	movs	r1, #0
 800757c:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 800757e:	2300      	movs	r3, #0
}
 8007580:	0018      	movs	r0, r3
 8007582:	46bd      	mov	sp, r7
 8007584:	b002      	add	sp, #8
 8007586:	bd80      	pop	{r7, pc}
 8007588:	00001001 	.word	0x00001001
 800758c:	40012708 	.word	0x40012708
 8007590:	ff7fffff 	.word	0xff7fffff
 8007594:	ffbfffff 	.word	0xffbfffff
 8007598:	feffffff 	.word	0xfeffffff

0800759c <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800759c:	b580      	push	{r7, lr}
 800759e:	b084      	sub	sp, #16
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80075a4:	2300      	movs	r3, #0
 80075a6:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	689b      	ldr	r3, [r3, #8]
 80075ae:	2203      	movs	r2, #3
 80075b0:	4013      	ands	r3, r2
 80075b2:	2b01      	cmp	r3, #1
 80075b4:	d108      	bne.n	80075c8 <ADC_Enable+0x2c>
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	2201      	movs	r2, #1
 80075be:	4013      	ands	r3, r2
 80075c0:	2b01      	cmp	r3, #1
 80075c2:	d101      	bne.n	80075c8 <ADC_Enable+0x2c>
 80075c4:	2301      	movs	r3, #1
 80075c6:	e000      	b.n	80075ca <ADC_Enable+0x2e>
 80075c8:	2300      	movs	r3, #0
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d13f      	bne.n	800764e <ADC_Enable+0xb2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	689b      	ldr	r3, [r3, #8]
 80075d4:	4a20      	ldr	r2, [pc, #128]	; (8007658 <ADC_Enable+0xbc>)
 80075d6:	4013      	ands	r3, r2
 80075d8:	d00d      	beq.n	80075f6 <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075de:	2210      	movs	r2, #16
 80075e0:	431a      	orrs	r2, r3
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075ea:	2201      	movs	r2, #1
 80075ec:	431a      	orrs	r2, r3
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	659a      	str	r2, [r3, #88]	; 0x58
      
      return HAL_ERROR;
 80075f2:	2301      	movs	r3, #1
 80075f4:	e02c      	b.n	8007650 <ADC_Enable+0xb4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	689a      	ldr	r2, [r3, #8]
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	2101      	movs	r1, #1
 8007602:	430a      	orrs	r2, r1
 8007604:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8007606:	2001      	movs	r0, #1
 8007608:	f000 f8ce 	bl	80077a8 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 800760c:	f7ff fb6e 	bl	8006cec <HAL_GetTick>
 8007610:	0003      	movs	r3, r0
 8007612:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8007614:	e014      	b.n	8007640 <ADC_Enable+0xa4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8007616:	f7ff fb69 	bl	8006cec <HAL_GetTick>
 800761a:	0002      	movs	r2, r0
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	1ad3      	subs	r3, r2, r3
 8007620:	2b0a      	cmp	r3, #10
 8007622:	d90d      	bls.n	8007640 <ADC_Enable+0xa4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007628:	2210      	movs	r2, #16
 800762a:	431a      	orrs	r2, r3
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007634:	2201      	movs	r2, #1
 8007636:	431a      	orrs	r2, r3
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 800763c:	2301      	movs	r3, #1
 800763e:	e007      	b.n	8007650 <ADC_Enable+0xb4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	2201      	movs	r2, #1
 8007648:	4013      	ands	r3, r2
 800764a:	2b01      	cmp	r3, #1
 800764c:	d1e3      	bne.n	8007616 <ADC_Enable+0x7a>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800764e:	2300      	movs	r3, #0
}
 8007650:	0018      	movs	r0, r3
 8007652:	46bd      	mov	sp, r7
 8007654:	b004      	add	sp, #16
 8007656:	bd80      	pop	{r7, pc}
 8007658:	80000017 	.word	0x80000017

0800765c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 800765c:	b580      	push	{r7, lr}
 800765e:	b084      	sub	sp, #16
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007664:	2300      	movs	r3, #0
 8007666:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	689b      	ldr	r3, [r3, #8]
 800766e:	2203      	movs	r2, #3
 8007670:	4013      	ands	r3, r2
 8007672:	2b01      	cmp	r3, #1
 8007674:	d108      	bne.n	8007688 <ADC_Disable+0x2c>
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	2201      	movs	r2, #1
 800767e:	4013      	ands	r3, r2
 8007680:	2b01      	cmp	r3, #1
 8007682:	d101      	bne.n	8007688 <ADC_Disable+0x2c>
 8007684:	2301      	movs	r3, #1
 8007686:	e000      	b.n	800768a <ADC_Disable+0x2e>
 8007688:	2300      	movs	r3, #0
 800768a:	2b00      	cmp	r3, #0
 800768c:	d041      	beq.n	8007712 <ADC_Disable+0xb6>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	689b      	ldr	r3, [r3, #8]
 8007694:	2205      	movs	r2, #5
 8007696:	4013      	ands	r3, r2
 8007698:	2b01      	cmp	r3, #1
 800769a:	d110      	bne.n	80076be <ADC_Disable+0x62>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	689a      	ldr	r2, [r3, #8]
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	2102      	movs	r1, #2
 80076a8:	430a      	orrs	r2, r1
 80076aa:	609a      	str	r2, [r3, #8]
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	2203      	movs	r2, #3
 80076b2:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80076b4:	f7ff fb1a 	bl	8006cec <HAL_GetTick>
 80076b8:	0003      	movs	r3, r0
 80076ba:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80076bc:	e022      	b.n	8007704 <ADC_Disable+0xa8>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076c2:	2210      	movs	r2, #16
 80076c4:	431a      	orrs	r2, r3
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076ce:	2201      	movs	r2, #1
 80076d0:	431a      	orrs	r2, r3
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80076d6:	2301      	movs	r3, #1
 80076d8:	e01c      	b.n	8007714 <ADC_Disable+0xb8>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80076da:	f7ff fb07 	bl	8006cec <HAL_GetTick>
 80076de:	0002      	movs	r2, r0
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	1ad3      	subs	r3, r2, r3
 80076e4:	2b0a      	cmp	r3, #10
 80076e6:	d90d      	bls.n	8007704 <ADC_Disable+0xa8>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076ec:	2210      	movs	r2, #16
 80076ee:	431a      	orrs	r2, r3
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076f8:	2201      	movs	r2, #1
 80076fa:	431a      	orrs	r2, r3
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 8007700:	2301      	movs	r3, #1
 8007702:	e007      	b.n	8007714 <ADC_Disable+0xb8>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	689b      	ldr	r3, [r3, #8]
 800770a:	2201      	movs	r2, #1
 800770c:	4013      	ands	r3, r2
 800770e:	2b01      	cmp	r3, #1
 8007710:	d0e3      	beq.n	80076da <ADC_Disable+0x7e>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8007712:	2300      	movs	r3, #0
}
 8007714:	0018      	movs	r0, r3
 8007716:	46bd      	mov	sp, r7
 8007718:	b004      	add	sp, #16
 800771a:	bd80      	pop	{r7, pc}

0800771c <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b084      	sub	sp, #16
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007724:	2300      	movs	r3, #0
 8007726:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	689b      	ldr	r3, [r3, #8]
 800772e:	2204      	movs	r2, #4
 8007730:	4013      	ands	r3, r2
 8007732:	d034      	beq.n	800779e <ADC_ConversionStop+0x82>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	689b      	ldr	r3, [r3, #8]
 800773a:	2204      	movs	r2, #4
 800773c:	4013      	ands	r3, r2
 800773e:	2b04      	cmp	r3, #4
 8007740:	d10d      	bne.n	800775e <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	689b      	ldr	r3, [r3, #8]
 8007748:	2202      	movs	r2, #2
 800774a:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800774c:	d107      	bne.n	800775e <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	689a      	ldr	r2, [r3, #8]
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	2110      	movs	r1, #16
 800775a:	430a      	orrs	r2, r1
 800775c:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800775e:	f7ff fac5 	bl	8006cec <HAL_GetTick>
 8007762:	0003      	movs	r3, r0
 8007764:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8007766:	e014      	b.n	8007792 <ADC_ConversionStop+0x76>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8007768:	f7ff fac0 	bl	8006cec <HAL_GetTick>
 800776c:	0002      	movs	r2, r0
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	1ad3      	subs	r3, r2, r3
 8007772:	2b0a      	cmp	r3, #10
 8007774:	d90d      	bls.n	8007792 <ADC_ConversionStop+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800777a:	2210      	movs	r2, #16
 800777c:	431a      	orrs	r2, r3
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	655a      	str	r2, [r3, #84]	; 0x54
      
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007786:	2201      	movs	r2, #1
 8007788:	431a      	orrs	r2, r3
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 800778e:	2301      	movs	r3, #1
 8007790:	e006      	b.n	80077a0 <ADC_ConversionStop+0x84>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	689b      	ldr	r3, [r3, #8]
 8007798:	2204      	movs	r2, #4
 800779a:	4013      	ands	r3, r2
 800779c:	d1e4      	bne.n	8007768 <ADC_ConversionStop+0x4c>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 800779e:	2300      	movs	r3, #0
}
 80077a0:	0018      	movs	r0, r3
 80077a2:	46bd      	mov	sp, r7
 80077a4:	b004      	add	sp, #16
 80077a6:	bd80      	pop	{r7, pc}

080077a8 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b084      	sub	sp, #16
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 80077b0:	4b0a      	ldr	r3, [pc, #40]	; (80077dc <ADC_DelayMicroSecond+0x34>)
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	490a      	ldr	r1, [pc, #40]	; (80077e0 <ADC_DelayMicroSecond+0x38>)
 80077b6:	0018      	movs	r0, r3
 80077b8:	f7f8 fcae 	bl	8000118 <__udivsi3>
 80077bc:	0003      	movs	r3, r0
 80077be:	001a      	movs	r2, r3
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	4353      	muls	r3, r2
 80077c4:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 80077c6:	e002      	b.n	80077ce <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	3b01      	subs	r3, #1
 80077cc:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d1f9      	bne.n	80077c8 <ADC_DelayMicroSecond+0x20>
  } 
}
 80077d4:	46c0      	nop			; (mov r8, r8)
 80077d6:	46bd      	mov	sp, r7
 80077d8:	b004      	add	sp, #16
 80077da:	bd80      	pop	{r7, pc}
 80077dc:	20000010 	.word	0x20000010
 80077e0:	000f4240 	.word	0x000f4240

080077e4 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b082      	sub	sp, #8
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	0002      	movs	r2, r0
 80077ec:	1dfb      	adds	r3, r7, #7
 80077ee:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80077f0:	1dfb      	adds	r3, r7, #7
 80077f2:	781b      	ldrb	r3, [r3, #0]
 80077f4:	001a      	movs	r2, r3
 80077f6:	231f      	movs	r3, #31
 80077f8:	401a      	ands	r2, r3
 80077fa:	4b04      	ldr	r3, [pc, #16]	; (800780c <NVIC_EnableIRQ+0x28>)
 80077fc:	2101      	movs	r1, #1
 80077fe:	4091      	lsls	r1, r2
 8007800:	000a      	movs	r2, r1
 8007802:	601a      	str	r2, [r3, #0]
}
 8007804:	46c0      	nop			; (mov r8, r8)
 8007806:	46bd      	mov	sp, r7
 8007808:	b002      	add	sp, #8
 800780a:	bd80      	pop	{r7, pc}
 800780c:	e000e100 	.word	0xe000e100

08007810 <NVIC_ClearPendingIRQ>:
  \brief   Clear Pending Interrupt
  \details Clears the pending bit of an external interrupt.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8007810:	b580      	push	{r7, lr}
 8007812:	b082      	sub	sp, #8
 8007814:	af00      	add	r7, sp, #0
 8007816:	0002      	movs	r2, r0
 8007818:	1dfb      	adds	r3, r7, #7
 800781a:	701a      	strb	r2, [r3, #0]
  NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800781c:	1dfb      	adds	r3, r7, #7
 800781e:	781b      	ldrb	r3, [r3, #0]
 8007820:	001a      	movs	r2, r3
 8007822:	231f      	movs	r3, #31
 8007824:	4013      	ands	r3, r2
 8007826:	4905      	ldr	r1, [pc, #20]	; (800783c <NVIC_ClearPendingIRQ+0x2c>)
 8007828:	2201      	movs	r2, #1
 800782a:	409a      	lsls	r2, r3
 800782c:	23c0      	movs	r3, #192	; 0xc0
 800782e:	005b      	lsls	r3, r3, #1
 8007830:	50ca      	str	r2, [r1, r3]
}
 8007832:	46c0      	nop			; (mov r8, r8)
 8007834:	46bd      	mov	sp, r7
 8007836:	b002      	add	sp, #8
 8007838:	bd80      	pop	{r7, pc}
 800783a:	46c0      	nop			; (mov r8, r8)
 800783c:	e000e100 	.word	0xe000e100

08007840 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007840:	b590      	push	{r4, r7, lr}
 8007842:	b083      	sub	sp, #12
 8007844:	af00      	add	r7, sp, #0
 8007846:	0002      	movs	r2, r0
 8007848:	6039      	str	r1, [r7, #0]
 800784a:	1dfb      	adds	r3, r7, #7
 800784c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 800784e:	1dfb      	adds	r3, r7, #7
 8007850:	781b      	ldrb	r3, [r3, #0]
 8007852:	2b7f      	cmp	r3, #127	; 0x7f
 8007854:	d932      	bls.n	80078bc <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007856:	4a2f      	ldr	r2, [pc, #188]	; (8007914 <NVIC_SetPriority+0xd4>)
 8007858:	1dfb      	adds	r3, r7, #7
 800785a:	781b      	ldrb	r3, [r3, #0]
 800785c:	0019      	movs	r1, r3
 800785e:	230f      	movs	r3, #15
 8007860:	400b      	ands	r3, r1
 8007862:	3b08      	subs	r3, #8
 8007864:	089b      	lsrs	r3, r3, #2
 8007866:	3306      	adds	r3, #6
 8007868:	009b      	lsls	r3, r3, #2
 800786a:	18d3      	adds	r3, r2, r3
 800786c:	3304      	adds	r3, #4
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	1dfa      	adds	r2, r7, #7
 8007872:	7812      	ldrb	r2, [r2, #0]
 8007874:	0011      	movs	r1, r2
 8007876:	2203      	movs	r2, #3
 8007878:	400a      	ands	r2, r1
 800787a:	00d2      	lsls	r2, r2, #3
 800787c:	21ff      	movs	r1, #255	; 0xff
 800787e:	4091      	lsls	r1, r2
 8007880:	000a      	movs	r2, r1
 8007882:	43d2      	mvns	r2, r2
 8007884:	401a      	ands	r2, r3
 8007886:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	019b      	lsls	r3, r3, #6
 800788c:	22ff      	movs	r2, #255	; 0xff
 800788e:	401a      	ands	r2, r3
 8007890:	1dfb      	adds	r3, r7, #7
 8007892:	781b      	ldrb	r3, [r3, #0]
 8007894:	0018      	movs	r0, r3
 8007896:	2303      	movs	r3, #3
 8007898:	4003      	ands	r3, r0
 800789a:	00db      	lsls	r3, r3, #3
 800789c:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800789e:	481d      	ldr	r0, [pc, #116]	; (8007914 <NVIC_SetPriority+0xd4>)
 80078a0:	1dfb      	adds	r3, r7, #7
 80078a2:	781b      	ldrb	r3, [r3, #0]
 80078a4:	001c      	movs	r4, r3
 80078a6:	230f      	movs	r3, #15
 80078a8:	4023      	ands	r3, r4
 80078aa:	3b08      	subs	r3, #8
 80078ac:	089b      	lsrs	r3, r3, #2
 80078ae:	430a      	orrs	r2, r1
 80078b0:	3306      	adds	r3, #6
 80078b2:	009b      	lsls	r3, r3, #2
 80078b4:	18c3      	adds	r3, r0, r3
 80078b6:	3304      	adds	r3, #4
 80078b8:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80078ba:	e027      	b.n	800790c <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80078bc:	4a16      	ldr	r2, [pc, #88]	; (8007918 <NVIC_SetPriority+0xd8>)
 80078be:	1dfb      	adds	r3, r7, #7
 80078c0:	781b      	ldrb	r3, [r3, #0]
 80078c2:	b25b      	sxtb	r3, r3
 80078c4:	089b      	lsrs	r3, r3, #2
 80078c6:	33c0      	adds	r3, #192	; 0xc0
 80078c8:	009b      	lsls	r3, r3, #2
 80078ca:	589b      	ldr	r3, [r3, r2]
 80078cc:	1dfa      	adds	r2, r7, #7
 80078ce:	7812      	ldrb	r2, [r2, #0]
 80078d0:	0011      	movs	r1, r2
 80078d2:	2203      	movs	r2, #3
 80078d4:	400a      	ands	r2, r1
 80078d6:	00d2      	lsls	r2, r2, #3
 80078d8:	21ff      	movs	r1, #255	; 0xff
 80078da:	4091      	lsls	r1, r2
 80078dc:	000a      	movs	r2, r1
 80078de:	43d2      	mvns	r2, r2
 80078e0:	401a      	ands	r2, r3
 80078e2:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	019b      	lsls	r3, r3, #6
 80078e8:	22ff      	movs	r2, #255	; 0xff
 80078ea:	401a      	ands	r2, r3
 80078ec:	1dfb      	adds	r3, r7, #7
 80078ee:	781b      	ldrb	r3, [r3, #0]
 80078f0:	0018      	movs	r0, r3
 80078f2:	2303      	movs	r3, #3
 80078f4:	4003      	ands	r3, r0
 80078f6:	00db      	lsls	r3, r3, #3
 80078f8:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80078fa:	4807      	ldr	r0, [pc, #28]	; (8007918 <NVIC_SetPriority+0xd8>)
 80078fc:	1dfb      	adds	r3, r7, #7
 80078fe:	781b      	ldrb	r3, [r3, #0]
 8007900:	b25b      	sxtb	r3, r3
 8007902:	089b      	lsrs	r3, r3, #2
 8007904:	430a      	orrs	r2, r1
 8007906:	33c0      	adds	r3, #192	; 0xc0
 8007908:	009b      	lsls	r3, r3, #2
 800790a:	501a      	str	r2, [r3, r0]
}
 800790c:	46c0      	nop			; (mov r8, r8)
 800790e:	46bd      	mov	sp, r7
 8007910:	b003      	add	sp, #12
 8007912:	bd90      	pop	{r4, r7, pc}
 8007914:	e000ed00 	.word	0xe000ed00
 8007918:	e000e100 	.word	0xe000e100

0800791c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b082      	sub	sp, #8
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	3b01      	subs	r3, #1
 8007928:	4a0c      	ldr	r2, [pc, #48]	; (800795c <SysTick_Config+0x40>)
 800792a:	4293      	cmp	r3, r2
 800792c:	d901      	bls.n	8007932 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800792e:	2301      	movs	r3, #1
 8007930:	e010      	b.n	8007954 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007932:	4b0b      	ldr	r3, [pc, #44]	; (8007960 <SysTick_Config+0x44>)
 8007934:	687a      	ldr	r2, [r7, #4]
 8007936:	3a01      	subs	r2, #1
 8007938:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800793a:	2301      	movs	r3, #1
 800793c:	425b      	negs	r3, r3
 800793e:	2103      	movs	r1, #3
 8007940:	0018      	movs	r0, r3
 8007942:	f7ff ff7d 	bl	8007840 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007946:	4b06      	ldr	r3, [pc, #24]	; (8007960 <SysTick_Config+0x44>)
 8007948:	2200      	movs	r2, #0
 800794a:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800794c:	4b04      	ldr	r3, [pc, #16]	; (8007960 <SysTick_Config+0x44>)
 800794e:	2207      	movs	r2, #7
 8007950:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007952:	2300      	movs	r3, #0
}
 8007954:	0018      	movs	r0, r3
 8007956:	46bd      	mov	sp, r7
 8007958:	b002      	add	sp, #8
 800795a:	bd80      	pop	{r7, pc}
 800795c:	00ffffff 	.word	0x00ffffff
 8007960:	e000e010 	.word	0xe000e010

08007964 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007964:	b580      	push	{r7, lr}
 8007966:	b084      	sub	sp, #16
 8007968:	af00      	add	r7, sp, #0
 800796a:	60b9      	str	r1, [r7, #8]
 800796c:	607a      	str	r2, [r7, #4]
 800796e:	210f      	movs	r1, #15
 8007970:	187b      	adds	r3, r7, r1
 8007972:	1c02      	adds	r2, r0, #0
 8007974:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8007976:	68ba      	ldr	r2, [r7, #8]
 8007978:	187b      	adds	r3, r7, r1
 800797a:	781b      	ldrb	r3, [r3, #0]
 800797c:	b25b      	sxtb	r3, r3
 800797e:	0011      	movs	r1, r2
 8007980:	0018      	movs	r0, r3
 8007982:	f7ff ff5d 	bl	8007840 <NVIC_SetPriority>
}
 8007986:	46c0      	nop			; (mov r8, r8)
 8007988:	46bd      	mov	sp, r7
 800798a:	b004      	add	sp, #16
 800798c:	bd80      	pop	{r7, pc}

0800798e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800798e:	b580      	push	{r7, lr}
 8007990:	b082      	sub	sp, #8
 8007992:	af00      	add	r7, sp, #0
 8007994:	0002      	movs	r2, r0
 8007996:	1dfb      	adds	r3, r7, #7
 8007998:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800799a:	1dfb      	adds	r3, r7, #7
 800799c:	781b      	ldrb	r3, [r3, #0]
 800799e:	b25b      	sxtb	r3, r3
 80079a0:	0018      	movs	r0, r3
 80079a2:	f7ff ff1f 	bl	80077e4 <NVIC_EnableIRQ>
}
 80079a6:	46c0      	nop			; (mov r8, r8)
 80079a8:	46bd      	mov	sp, r7
 80079aa:	b002      	add	sp, #8
 80079ac:	bd80      	pop	{r7, pc}

080079ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80079ae:	b580      	push	{r7, lr}
 80079b0:	b082      	sub	sp, #8
 80079b2:	af00      	add	r7, sp, #0
 80079b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	0018      	movs	r0, r3
 80079ba:	f7ff ffaf 	bl	800791c <SysTick_Config>
 80079be:	0003      	movs	r3, r0
}
 80079c0:	0018      	movs	r0, r3
 80079c2:	46bd      	mov	sp, r7
 80079c4:	b002      	add	sp, #8
 80079c6:	bd80      	pop	{r7, pc}

080079c8 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{ 
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b082      	sub	sp, #8
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	0002      	movs	r2, r0
 80079d0:	1dfb      	adds	r3, r7, #7
 80079d2:	701a      	strb	r2, [r3, #0]
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 80079d4:	1dfb      	adds	r3, r7, #7
 80079d6:	781b      	ldrb	r3, [r3, #0]
 80079d8:	b25b      	sxtb	r3, r3
 80079da:	0018      	movs	r0, r3
 80079dc:	f7ff ff18 	bl	8007810 <NVIC_ClearPendingIRQ>
}
 80079e0:	46c0      	nop			; (mov r8, r8)
 80079e2:	46bd      	mov	sp, r7
 80079e4:	b002      	add	sp, #8
 80079e6:	bd80      	pop	{r7, pc}

080079e8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b084      	sub	sp, #16
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d101      	bne.n	80079fa <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80079f6:	2301      	movs	r3, #1
 80079f8:	e061      	b.n	8007abe <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	4a32      	ldr	r2, [pc, #200]	; (8007ac8 <HAL_DMA_Init+0xe0>)
 8007a00:	4694      	mov	ip, r2
 8007a02:	4463      	add	r3, ip
 8007a04:	2114      	movs	r1, #20
 8007a06:	0018      	movs	r0, r3
 8007a08:	f7f8 fb86 	bl	8000118 <__udivsi3>
 8007a0c:	0003      	movs	r3, r0
 8007a0e:	009a      	lsls	r2, r3, #2
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	4a2d      	ldr	r2, [pc, #180]	; (8007acc <HAL_DMA_Init+0xe4>)
 8007a18:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	2225      	movs	r2, #37	; 0x25
 8007a1e:	2102      	movs	r1, #2
 8007a20:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	4a28      	ldr	r2, [pc, #160]	; (8007ad0 <HAL_DMA_Init+0xe8>)
 8007a2e:	4013      	ands	r3, r2
 8007a30:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8007a3a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	691b      	ldr	r3, [r3, #16]
 8007a40:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007a46:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	699b      	ldr	r3, [r3, #24]
 8007a4c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007a52:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	6a1b      	ldr	r3, [r3, #32]
 8007a58:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8007a5a:	68fa      	ldr	r2, [r7, #12]
 8007a5c:	4313      	orrs	r3, r2
 8007a5e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	68fa      	ldr	r2, [r7, #12]
 8007a66:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	689a      	ldr	r2, [r3, #8]
 8007a6c:	2380      	movs	r3, #128	; 0x80
 8007a6e:	01db      	lsls	r3, r3, #7
 8007a70:	429a      	cmp	r2, r3
 8007a72:	d018      	beq.n	8007aa6 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8007a74:	4b17      	ldr	r3, [pc, #92]	; (8007ad4 <HAL_DMA_Init+0xec>)
 8007a76:	681a      	ldr	r2, [r3, #0]
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a7c:	211c      	movs	r1, #28
 8007a7e:	400b      	ands	r3, r1
 8007a80:	210f      	movs	r1, #15
 8007a82:	4099      	lsls	r1, r3
 8007a84:	000b      	movs	r3, r1
 8007a86:	43d9      	mvns	r1, r3
 8007a88:	4b12      	ldr	r3, [pc, #72]	; (8007ad4 <HAL_DMA_Init+0xec>)
 8007a8a:	400a      	ands	r2, r1
 8007a8c:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8007a8e:	4b11      	ldr	r3, [pc, #68]	; (8007ad4 <HAL_DMA_Init+0xec>)
 8007a90:	6819      	ldr	r1, [r3, #0]
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	685a      	ldr	r2, [r3, #4]
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a9a:	201c      	movs	r0, #28
 8007a9c:	4003      	ands	r3, r0
 8007a9e:	409a      	lsls	r2, r3
 8007aa0:	4b0c      	ldr	r3, [pc, #48]	; (8007ad4 <HAL_DMA_Init+0xec>)
 8007aa2:	430a      	orrs	r2, r1
 8007aa4:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2225      	movs	r2, #37	; 0x25
 8007ab0:	2101      	movs	r1, #1
 8007ab2:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2224      	movs	r2, #36	; 0x24
 8007ab8:	2100      	movs	r1, #0
 8007aba:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007abc:	2300      	movs	r3, #0
}
 8007abe:	0018      	movs	r0, r3
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	b004      	add	sp, #16
 8007ac4:	bd80      	pop	{r7, pc}
 8007ac6:	46c0      	nop			; (mov r8, r8)
 8007ac8:	bffdfff8 	.word	0xbffdfff8
 8007acc:	40020000 	.word	0x40020000
 8007ad0:	ffff800f 	.word	0xffff800f
 8007ad4:	400200a8 	.word	0x400200a8

08007ad8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b086      	sub	sp, #24
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	60f8      	str	r0, [r7, #12]
 8007ae0:	60b9      	str	r1, [r7, #8]
 8007ae2:	607a      	str	r2, [r7, #4]
 8007ae4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007ae6:	2317      	movs	r3, #23
 8007ae8:	18fb      	adds	r3, r7, r3
 8007aea:	2200      	movs	r2, #0
 8007aec:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	2224      	movs	r2, #36	; 0x24
 8007af2:	5c9b      	ldrb	r3, [r3, r2]
 8007af4:	2b01      	cmp	r3, #1
 8007af6:	d101      	bne.n	8007afc <HAL_DMA_Start_IT+0x24>
 8007af8:	2302      	movs	r3, #2
 8007afa:	e04f      	b.n	8007b9c <HAL_DMA_Start_IT+0xc4>
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	2224      	movs	r2, #36	; 0x24
 8007b00:	2101      	movs	r1, #1
 8007b02:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	2225      	movs	r2, #37	; 0x25
 8007b08:	5c9b      	ldrb	r3, [r3, r2]
 8007b0a:	b2db      	uxtb	r3, r3
 8007b0c:	2b01      	cmp	r3, #1
 8007b0e:	d13a      	bne.n	8007b86 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	2225      	movs	r2, #37	; 0x25
 8007b14:	2102      	movs	r1, #2
 8007b16:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	681a      	ldr	r2, [r3, #0]
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	2101      	movs	r1, #1
 8007b2a:	438a      	bics	r2, r1
 8007b2c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007b2e:	683b      	ldr	r3, [r7, #0]
 8007b30:	687a      	ldr	r2, [r7, #4]
 8007b32:	68b9      	ldr	r1, [r7, #8]
 8007b34:	68f8      	ldr	r0, [r7, #12]
 8007b36:	f000 f92b 	bl	8007d90 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d008      	beq.n	8007b54 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	681a      	ldr	r2, [r3, #0]
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	210e      	movs	r1, #14
 8007b4e:	430a      	orrs	r2, r1
 8007b50:	601a      	str	r2, [r3, #0]
 8007b52:	e00f      	b.n	8007b74 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	681a      	ldr	r2, [r3, #0]
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	2104      	movs	r1, #4
 8007b60:	438a      	bics	r2, r1
 8007b62:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	681a      	ldr	r2, [r3, #0]
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	210a      	movs	r1, #10
 8007b70:	430a      	orrs	r2, r1
 8007b72:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	681a      	ldr	r2, [r3, #0]
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	2101      	movs	r1, #1
 8007b80:	430a      	orrs	r2, r1
 8007b82:	601a      	str	r2, [r3, #0]
 8007b84:	e007      	b.n	8007b96 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	2224      	movs	r2, #36	; 0x24
 8007b8a:	2100      	movs	r1, #0
 8007b8c:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8007b8e:	2317      	movs	r3, #23
 8007b90:	18fb      	adds	r3, r7, r3
 8007b92:	2202      	movs	r2, #2
 8007b94:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8007b96:	2317      	movs	r3, #23
 8007b98:	18fb      	adds	r3, r7, r3
 8007b9a:	781b      	ldrb	r3, [r3, #0]
}
 8007b9c:	0018      	movs	r0, r3
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	b006      	add	sp, #24
 8007ba2:	bd80      	pop	{r7, pc}

08007ba4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b084      	sub	sp, #16
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007bac:	230f      	movs	r3, #15
 8007bae:	18fb      	adds	r3, r7, r3
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2225      	movs	r2, #37	; 0x25
 8007bb8:	5c9b      	ldrb	r3, [r3, r2]
 8007bba:	b2db      	uxtb	r3, r3
 8007bbc:	2b02      	cmp	r3, #2
 8007bbe:	d007      	beq.n	8007bd0 <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2204      	movs	r2, #4
 8007bc4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8007bc6:	230f      	movs	r3, #15
 8007bc8:	18fb      	adds	r3, r7, r3
 8007bca:	2201      	movs	r2, #1
 8007bcc:	701a      	strb	r2, [r3, #0]
 8007bce:	e02a      	b.n	8007c26 <HAL_DMA_Abort_IT+0x82>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	681a      	ldr	r2, [r3, #0]
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	210e      	movs	r1, #14
 8007bdc:	438a      	bics	r2, r1
 8007bde:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	681a      	ldr	r2, [r3, #0]
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	2101      	movs	r1, #1
 8007bec:	438a      	bics	r2, r1
 8007bee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bf4:	221c      	movs	r2, #28
 8007bf6:	401a      	ands	r2, r3
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bfc:	2101      	movs	r1, #1
 8007bfe:	4091      	lsls	r1, r2
 8007c00:	000a      	movs	r2, r1
 8007c02:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2225      	movs	r2, #37	; 0x25
 8007c08:	2101      	movs	r1, #1
 8007c0a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2224      	movs	r2, #36	; 0x24
 8007c10:	2100      	movs	r1, #0
 8007c12:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d004      	beq.n	8007c26 <HAL_DMA_Abort_IT+0x82>
    {
      hdma->XferAbortCallback(hdma);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c20:	687a      	ldr	r2, [r7, #4]
 8007c22:	0010      	movs	r0, r2
 8007c24:	4798      	blx	r3
    }
  }
  return status;
 8007c26:	230f      	movs	r3, #15
 8007c28:	18fb      	adds	r3, r7, r3
 8007c2a:	781b      	ldrb	r3, [r3, #0]
}
 8007c2c:	0018      	movs	r0, r3
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	b004      	add	sp, #16
 8007c32:	bd80      	pop	{r7, pc}

08007c34 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b084      	sub	sp, #16
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c50:	221c      	movs	r2, #28
 8007c52:	4013      	ands	r3, r2
 8007c54:	2204      	movs	r2, #4
 8007c56:	409a      	lsls	r2, r3
 8007c58:	0013      	movs	r3, r2
 8007c5a:	68fa      	ldr	r2, [r7, #12]
 8007c5c:	4013      	ands	r3, r2
 8007c5e:	d026      	beq.n	8007cae <HAL_DMA_IRQHandler+0x7a>
 8007c60:	68bb      	ldr	r3, [r7, #8]
 8007c62:	2204      	movs	r2, #4
 8007c64:	4013      	ands	r3, r2
 8007c66:	d022      	beq.n	8007cae <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	2220      	movs	r2, #32
 8007c70:	4013      	ands	r3, r2
 8007c72:	d107      	bne.n	8007c84 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	681a      	ldr	r2, [r3, #0]
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	2104      	movs	r1, #4
 8007c80:	438a      	bics	r2, r1
 8007c82:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c88:	221c      	movs	r2, #28
 8007c8a:	401a      	ands	r2, r3
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c90:	2104      	movs	r1, #4
 8007c92:	4091      	lsls	r1, r2
 8007c94:	000a      	movs	r2, r1
 8007c96:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d100      	bne.n	8007ca2 <HAL_DMA_IRQHandler+0x6e>
 8007ca0:	e071      	b.n	8007d86 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ca6:	687a      	ldr	r2, [r7, #4]
 8007ca8:	0010      	movs	r0, r2
 8007caa:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8007cac:	e06b      	b.n	8007d86 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cb2:	221c      	movs	r2, #28
 8007cb4:	4013      	ands	r3, r2
 8007cb6:	2202      	movs	r2, #2
 8007cb8:	409a      	lsls	r2, r3
 8007cba:	0013      	movs	r3, r2
 8007cbc:	68fa      	ldr	r2, [r7, #12]
 8007cbe:	4013      	ands	r3, r2
 8007cc0:	d02d      	beq.n	8007d1e <HAL_DMA_IRQHandler+0xea>
 8007cc2:	68bb      	ldr	r3, [r7, #8]
 8007cc4:	2202      	movs	r2, #2
 8007cc6:	4013      	ands	r3, r2
 8007cc8:	d029      	beq.n	8007d1e <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	2220      	movs	r2, #32
 8007cd2:	4013      	ands	r3, r2
 8007cd4:	d10b      	bne.n	8007cee <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	681a      	ldr	r2, [r3, #0]
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	210a      	movs	r1, #10
 8007ce2:	438a      	bics	r2, r1
 8007ce4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	2225      	movs	r2, #37	; 0x25
 8007cea:	2101      	movs	r1, #1
 8007cec:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cf2:	221c      	movs	r2, #28
 8007cf4:	401a      	ands	r2, r3
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cfa:	2102      	movs	r1, #2
 8007cfc:	4091      	lsls	r1, r2
 8007cfe:	000a      	movs	r2, r1
 8007d00:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2224      	movs	r2, #36	; 0x24
 8007d06:	2100      	movs	r1, #0
 8007d08:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d039      	beq.n	8007d86 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d16:	687a      	ldr	r2, [r7, #4]
 8007d18:	0010      	movs	r0, r2
 8007d1a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8007d1c:	e033      	b.n	8007d86 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d22:	221c      	movs	r2, #28
 8007d24:	4013      	ands	r3, r2
 8007d26:	2208      	movs	r2, #8
 8007d28:	409a      	lsls	r2, r3
 8007d2a:	0013      	movs	r3, r2
 8007d2c:	68fa      	ldr	r2, [r7, #12]
 8007d2e:	4013      	ands	r3, r2
 8007d30:	d02a      	beq.n	8007d88 <HAL_DMA_IRQHandler+0x154>
 8007d32:	68bb      	ldr	r3, [r7, #8]
 8007d34:	2208      	movs	r2, #8
 8007d36:	4013      	ands	r3, r2
 8007d38:	d026      	beq.n	8007d88 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	681a      	ldr	r2, [r3, #0]
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	210e      	movs	r1, #14
 8007d46:	438a      	bics	r2, r1
 8007d48:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d4e:	221c      	movs	r2, #28
 8007d50:	401a      	ands	r2, r3
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d56:	2101      	movs	r1, #1
 8007d58:	4091      	lsls	r1, r2
 8007d5a:	000a      	movs	r2, r1
 8007d5c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2201      	movs	r2, #1
 8007d62:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2225      	movs	r2, #37	; 0x25
 8007d68:	2101      	movs	r1, #1
 8007d6a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2224      	movs	r2, #36	; 0x24
 8007d70:	2100      	movs	r1, #0
 8007d72:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d005      	beq.n	8007d88 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d80:	687a      	ldr	r2, [r7, #4]
 8007d82:	0010      	movs	r0, r2
 8007d84:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8007d86:	46c0      	nop			; (mov r8, r8)
 8007d88:	46c0      	nop			; (mov r8, r8)
}
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	b004      	add	sp, #16
 8007d8e:	bd80      	pop	{r7, pc}

08007d90 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b084      	sub	sp, #16
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	60f8      	str	r0, [r7, #12]
 8007d98:	60b9      	str	r1, [r7, #8]
 8007d9a:	607a      	str	r2, [r7, #4]
 8007d9c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007da2:	221c      	movs	r2, #28
 8007da4:	401a      	ands	r2, r3
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007daa:	2101      	movs	r1, #1
 8007dac:	4091      	lsls	r1, r2
 8007dae:	000a      	movs	r2, r1
 8007db0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	683a      	ldr	r2, [r7, #0]
 8007db8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	689b      	ldr	r3, [r3, #8]
 8007dbe:	2b10      	cmp	r3, #16
 8007dc0:	d108      	bne.n	8007dd4 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	687a      	ldr	r2, [r7, #4]
 8007dc8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	68ba      	ldr	r2, [r7, #8]
 8007dd0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8007dd2:	e007      	b.n	8007de4 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	68ba      	ldr	r2, [r7, #8]
 8007dda:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	687a      	ldr	r2, [r7, #4]
 8007de2:	60da      	str	r2, [r3, #12]
}
 8007de4:	46c0      	nop			; (mov r8, r8)
 8007de6:	46bd      	mov	sp, r7
 8007de8:	b004      	add	sp, #16
 8007dea:	bd80      	pop	{r7, pc}

08007dec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b086      	sub	sp, #24
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
 8007df4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007df6:	2300      	movs	r3, #0
 8007df8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8007dfe:	2300      	movs	r3, #0
 8007e00:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8007e02:	e155      	b.n	80080b0 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	2101      	movs	r1, #1
 8007e0a:	697a      	ldr	r2, [r7, #20]
 8007e0c:	4091      	lsls	r1, r2
 8007e0e:	000a      	movs	r2, r1
 8007e10:	4013      	ands	r3, r2
 8007e12:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d100      	bne.n	8007e1c <HAL_GPIO_Init+0x30>
 8007e1a:	e146      	b.n	80080aa <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	685b      	ldr	r3, [r3, #4]
 8007e20:	2b01      	cmp	r3, #1
 8007e22:	d00b      	beq.n	8007e3c <HAL_GPIO_Init+0x50>
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	685b      	ldr	r3, [r3, #4]
 8007e28:	2b02      	cmp	r3, #2
 8007e2a:	d007      	beq.n	8007e3c <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007e30:	2b11      	cmp	r3, #17
 8007e32:	d003      	beq.n	8007e3c <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	685b      	ldr	r3, [r3, #4]
 8007e38:	2b12      	cmp	r3, #18
 8007e3a:	d130      	bne.n	8007e9e <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	689b      	ldr	r3, [r3, #8]
 8007e40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8007e42:	697b      	ldr	r3, [r7, #20]
 8007e44:	005b      	lsls	r3, r3, #1
 8007e46:	2203      	movs	r2, #3
 8007e48:	409a      	lsls	r2, r3
 8007e4a:	0013      	movs	r3, r2
 8007e4c:	43da      	mvns	r2, r3
 8007e4e:	693b      	ldr	r3, [r7, #16]
 8007e50:	4013      	ands	r3, r2
 8007e52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	68da      	ldr	r2, [r3, #12]
 8007e58:	697b      	ldr	r3, [r7, #20]
 8007e5a:	005b      	lsls	r3, r3, #1
 8007e5c:	409a      	lsls	r2, r3
 8007e5e:	0013      	movs	r3, r2
 8007e60:	693a      	ldr	r2, [r7, #16]
 8007e62:	4313      	orrs	r3, r2
 8007e64:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	693a      	ldr	r2, [r7, #16]
 8007e6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	685b      	ldr	r3, [r3, #4]
 8007e70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007e72:	2201      	movs	r2, #1
 8007e74:	697b      	ldr	r3, [r7, #20]
 8007e76:	409a      	lsls	r2, r3
 8007e78:	0013      	movs	r3, r2
 8007e7a:	43da      	mvns	r2, r3
 8007e7c:	693b      	ldr	r3, [r7, #16]
 8007e7e:	4013      	ands	r3, r2
 8007e80:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	685b      	ldr	r3, [r3, #4]
 8007e86:	091b      	lsrs	r3, r3, #4
 8007e88:	2201      	movs	r2, #1
 8007e8a:	401a      	ands	r2, r3
 8007e8c:	697b      	ldr	r3, [r7, #20]
 8007e8e:	409a      	lsls	r2, r3
 8007e90:	0013      	movs	r3, r2
 8007e92:	693a      	ldr	r2, [r7, #16]
 8007e94:	4313      	orrs	r3, r2
 8007e96:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	693a      	ldr	r2, [r7, #16]
 8007e9c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	68db      	ldr	r3, [r3, #12]
 8007ea2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007ea4:	697b      	ldr	r3, [r7, #20]
 8007ea6:	005b      	lsls	r3, r3, #1
 8007ea8:	2203      	movs	r2, #3
 8007eaa:	409a      	lsls	r2, r3
 8007eac:	0013      	movs	r3, r2
 8007eae:	43da      	mvns	r2, r3
 8007eb0:	693b      	ldr	r3, [r7, #16]
 8007eb2:	4013      	ands	r3, r2
 8007eb4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	689a      	ldr	r2, [r3, #8]
 8007eba:	697b      	ldr	r3, [r7, #20]
 8007ebc:	005b      	lsls	r3, r3, #1
 8007ebe:	409a      	lsls	r2, r3
 8007ec0:	0013      	movs	r3, r2
 8007ec2:	693a      	ldr	r2, [r7, #16]
 8007ec4:	4313      	orrs	r3, r2
 8007ec6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	693a      	ldr	r2, [r7, #16]
 8007ecc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	685b      	ldr	r3, [r3, #4]
 8007ed2:	2b02      	cmp	r3, #2
 8007ed4:	d003      	beq.n	8007ede <HAL_GPIO_Init+0xf2>
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	685b      	ldr	r3, [r3, #4]
 8007eda:	2b12      	cmp	r3, #18
 8007edc:	d123      	bne.n	8007f26 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007ede:	697b      	ldr	r3, [r7, #20]
 8007ee0:	08da      	lsrs	r2, r3, #3
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	3208      	adds	r2, #8
 8007ee6:	0092      	lsls	r2, r2, #2
 8007ee8:	58d3      	ldr	r3, [r2, r3]
 8007eea:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U));
 8007eec:	697b      	ldr	r3, [r7, #20]
 8007eee:	2207      	movs	r2, #7
 8007ef0:	4013      	ands	r3, r2
 8007ef2:	009b      	lsls	r3, r3, #2
 8007ef4:	220f      	movs	r2, #15
 8007ef6:	409a      	lsls	r2, r3
 8007ef8:	0013      	movs	r3, r2
 8007efa:	43da      	mvns	r2, r3
 8007efc:	693b      	ldr	r3, [r7, #16]
 8007efe:	4013      	ands	r3, r2
 8007f00:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8007f02:	683b      	ldr	r3, [r7, #0]
 8007f04:	691a      	ldr	r2, [r3, #16]
 8007f06:	697b      	ldr	r3, [r7, #20]
 8007f08:	2107      	movs	r1, #7
 8007f0a:	400b      	ands	r3, r1
 8007f0c:	009b      	lsls	r3, r3, #2
 8007f0e:	409a      	lsls	r2, r3
 8007f10:	0013      	movs	r3, r2
 8007f12:	693a      	ldr	r2, [r7, #16]
 8007f14:	4313      	orrs	r3, r2
 8007f16:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8007f18:	697b      	ldr	r3, [r7, #20]
 8007f1a:	08da      	lsrs	r2, r3, #3
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	3208      	adds	r2, #8
 8007f20:	0092      	lsls	r2, r2, #2
 8007f22:	6939      	ldr	r1, [r7, #16]
 8007f24:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007f2c:	697b      	ldr	r3, [r7, #20]
 8007f2e:	005b      	lsls	r3, r3, #1
 8007f30:	2203      	movs	r2, #3
 8007f32:	409a      	lsls	r2, r3
 8007f34:	0013      	movs	r3, r2
 8007f36:	43da      	mvns	r2, r3
 8007f38:	693b      	ldr	r3, [r7, #16]
 8007f3a:	4013      	ands	r3, r2
 8007f3c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007f3e:	683b      	ldr	r3, [r7, #0]
 8007f40:	685b      	ldr	r3, [r3, #4]
 8007f42:	2203      	movs	r2, #3
 8007f44:	401a      	ands	r2, r3
 8007f46:	697b      	ldr	r3, [r7, #20]
 8007f48:	005b      	lsls	r3, r3, #1
 8007f4a:	409a      	lsls	r2, r3
 8007f4c:	0013      	movs	r3, r2
 8007f4e:	693a      	ldr	r2, [r7, #16]
 8007f50:	4313      	orrs	r3, r2
 8007f52:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	693a      	ldr	r2, [r7, #16]
 8007f58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	685a      	ldr	r2, [r3, #4]
 8007f5e:	2380      	movs	r3, #128	; 0x80
 8007f60:	055b      	lsls	r3, r3, #21
 8007f62:	4013      	ands	r3, r2
 8007f64:	d100      	bne.n	8007f68 <HAL_GPIO_Init+0x17c>
 8007f66:	e0a0      	b.n	80080aa <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007f68:	4b57      	ldr	r3, [pc, #348]	; (80080c8 <HAL_GPIO_Init+0x2dc>)
 8007f6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007f6c:	4b56      	ldr	r3, [pc, #344]	; (80080c8 <HAL_GPIO_Init+0x2dc>)
 8007f6e:	2101      	movs	r1, #1
 8007f70:	430a      	orrs	r2, r1
 8007f72:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8007f74:	4a55      	ldr	r2, [pc, #340]	; (80080cc <HAL_GPIO_Init+0x2e0>)
 8007f76:	697b      	ldr	r3, [r7, #20]
 8007f78:	089b      	lsrs	r3, r3, #2
 8007f7a:	3302      	adds	r3, #2
 8007f7c:	009b      	lsls	r3, r3, #2
 8007f7e:	589b      	ldr	r3, [r3, r2]
 8007f80:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8007f82:	697b      	ldr	r3, [r7, #20]
 8007f84:	2203      	movs	r2, #3
 8007f86:	4013      	ands	r3, r2
 8007f88:	009b      	lsls	r3, r3, #2
 8007f8a:	220f      	movs	r2, #15
 8007f8c:	409a      	lsls	r2, r3
 8007f8e:	0013      	movs	r3, r2
 8007f90:	43da      	mvns	r2, r3
 8007f92:	693b      	ldr	r3, [r7, #16]
 8007f94:	4013      	ands	r3, r2
 8007f96:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8007f98:	687a      	ldr	r2, [r7, #4]
 8007f9a:	23a0      	movs	r3, #160	; 0xa0
 8007f9c:	05db      	lsls	r3, r3, #23
 8007f9e:	429a      	cmp	r2, r3
 8007fa0:	d01f      	beq.n	8007fe2 <HAL_GPIO_Init+0x1f6>
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	4a4a      	ldr	r2, [pc, #296]	; (80080d0 <HAL_GPIO_Init+0x2e4>)
 8007fa6:	4293      	cmp	r3, r2
 8007fa8:	d019      	beq.n	8007fde <HAL_GPIO_Init+0x1f2>
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	4a49      	ldr	r2, [pc, #292]	; (80080d4 <HAL_GPIO_Init+0x2e8>)
 8007fae:	4293      	cmp	r3, r2
 8007fb0:	d013      	beq.n	8007fda <HAL_GPIO_Init+0x1ee>
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	4a48      	ldr	r2, [pc, #288]	; (80080d8 <HAL_GPIO_Init+0x2ec>)
 8007fb6:	4293      	cmp	r3, r2
 8007fb8:	d00d      	beq.n	8007fd6 <HAL_GPIO_Init+0x1ea>
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	4a47      	ldr	r2, [pc, #284]	; (80080dc <HAL_GPIO_Init+0x2f0>)
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	d007      	beq.n	8007fd2 <HAL_GPIO_Init+0x1e6>
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	4a46      	ldr	r2, [pc, #280]	; (80080e0 <HAL_GPIO_Init+0x2f4>)
 8007fc6:	4293      	cmp	r3, r2
 8007fc8:	d101      	bne.n	8007fce <HAL_GPIO_Init+0x1e2>
 8007fca:	2305      	movs	r3, #5
 8007fcc:	e00a      	b.n	8007fe4 <HAL_GPIO_Init+0x1f8>
 8007fce:	2306      	movs	r3, #6
 8007fd0:	e008      	b.n	8007fe4 <HAL_GPIO_Init+0x1f8>
 8007fd2:	2304      	movs	r3, #4
 8007fd4:	e006      	b.n	8007fe4 <HAL_GPIO_Init+0x1f8>
 8007fd6:	2303      	movs	r3, #3
 8007fd8:	e004      	b.n	8007fe4 <HAL_GPIO_Init+0x1f8>
 8007fda:	2302      	movs	r3, #2
 8007fdc:	e002      	b.n	8007fe4 <HAL_GPIO_Init+0x1f8>
 8007fde:	2301      	movs	r3, #1
 8007fe0:	e000      	b.n	8007fe4 <HAL_GPIO_Init+0x1f8>
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	697a      	ldr	r2, [r7, #20]
 8007fe6:	2103      	movs	r1, #3
 8007fe8:	400a      	ands	r2, r1
 8007fea:	0092      	lsls	r2, r2, #2
 8007fec:	4093      	lsls	r3, r2
 8007fee:	693a      	ldr	r2, [r7, #16]
 8007ff0:	4313      	orrs	r3, r2
 8007ff2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007ff4:	4935      	ldr	r1, [pc, #212]	; (80080cc <HAL_GPIO_Init+0x2e0>)
 8007ff6:	697b      	ldr	r3, [r7, #20]
 8007ff8:	089b      	lsrs	r3, r3, #2
 8007ffa:	3302      	adds	r3, #2
 8007ffc:	009b      	lsls	r3, r3, #2
 8007ffe:	693a      	ldr	r2, [r7, #16]
 8008000:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008002:	4b38      	ldr	r3, [pc, #224]	; (80080e4 <HAL_GPIO_Init+0x2f8>)
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	43da      	mvns	r2, r3
 800800c:	693b      	ldr	r3, [r7, #16]
 800800e:	4013      	ands	r3, r2
 8008010:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	685a      	ldr	r2, [r3, #4]
 8008016:	2380      	movs	r3, #128	; 0x80
 8008018:	025b      	lsls	r3, r3, #9
 800801a:	4013      	ands	r3, r2
 800801c:	d003      	beq.n	8008026 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 800801e:	693a      	ldr	r2, [r7, #16]
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	4313      	orrs	r3, r2
 8008024:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8008026:	4b2f      	ldr	r3, [pc, #188]	; (80080e4 <HAL_GPIO_Init+0x2f8>)
 8008028:	693a      	ldr	r2, [r7, #16]
 800802a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800802c:	4b2d      	ldr	r3, [pc, #180]	; (80080e4 <HAL_GPIO_Init+0x2f8>)
 800802e:	685b      	ldr	r3, [r3, #4]
 8008030:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	43da      	mvns	r2, r3
 8008036:	693b      	ldr	r3, [r7, #16]
 8008038:	4013      	ands	r3, r2
 800803a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	685a      	ldr	r2, [r3, #4]
 8008040:	2380      	movs	r3, #128	; 0x80
 8008042:	029b      	lsls	r3, r3, #10
 8008044:	4013      	ands	r3, r2
 8008046:	d003      	beq.n	8008050 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8008048:	693a      	ldr	r2, [r7, #16]
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	4313      	orrs	r3, r2
 800804e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8008050:	4b24      	ldr	r3, [pc, #144]	; (80080e4 <HAL_GPIO_Init+0x2f8>)
 8008052:	693a      	ldr	r2, [r7, #16]
 8008054:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008056:	4b23      	ldr	r3, [pc, #140]	; (80080e4 <HAL_GPIO_Init+0x2f8>)
 8008058:	689b      	ldr	r3, [r3, #8]
 800805a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	43da      	mvns	r2, r3
 8008060:	693b      	ldr	r3, [r7, #16]
 8008062:	4013      	ands	r3, r2
 8008064:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008066:	683b      	ldr	r3, [r7, #0]
 8008068:	685a      	ldr	r2, [r3, #4]
 800806a:	2380      	movs	r3, #128	; 0x80
 800806c:	035b      	lsls	r3, r3, #13
 800806e:	4013      	ands	r3, r2
 8008070:	d003      	beq.n	800807a <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8008072:	693a      	ldr	r2, [r7, #16]
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	4313      	orrs	r3, r2
 8008078:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800807a:	4b1a      	ldr	r3, [pc, #104]	; (80080e4 <HAL_GPIO_Init+0x2f8>)
 800807c:	693a      	ldr	r2, [r7, #16]
 800807e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8008080:	4b18      	ldr	r3, [pc, #96]	; (80080e4 <HAL_GPIO_Init+0x2f8>)
 8008082:	68db      	ldr	r3, [r3, #12]
 8008084:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	43da      	mvns	r2, r3
 800808a:	693b      	ldr	r3, [r7, #16]
 800808c:	4013      	ands	r3, r2
 800808e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	685a      	ldr	r2, [r3, #4]
 8008094:	2380      	movs	r3, #128	; 0x80
 8008096:	039b      	lsls	r3, r3, #14
 8008098:	4013      	ands	r3, r2
 800809a:	d003      	beq.n	80080a4 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 800809c:	693a      	ldr	r2, [r7, #16]
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	4313      	orrs	r3, r2
 80080a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80080a4:	4b0f      	ldr	r3, [pc, #60]	; (80080e4 <HAL_GPIO_Init+0x2f8>)
 80080a6:	693a      	ldr	r2, [r7, #16]
 80080a8:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 80080aa:	697b      	ldr	r3, [r7, #20]
 80080ac:	3301      	adds	r3, #1
 80080ae:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	681a      	ldr	r2, [r3, #0]
 80080b4:	697b      	ldr	r3, [r7, #20]
 80080b6:	40da      	lsrs	r2, r3
 80080b8:	1e13      	subs	r3, r2, #0
 80080ba:	d000      	beq.n	80080be <HAL_GPIO_Init+0x2d2>
 80080bc:	e6a2      	b.n	8007e04 <HAL_GPIO_Init+0x18>
  }
}
 80080be:	46c0      	nop			; (mov r8, r8)
 80080c0:	46bd      	mov	sp, r7
 80080c2:	b006      	add	sp, #24
 80080c4:	bd80      	pop	{r7, pc}
 80080c6:	46c0      	nop			; (mov r8, r8)
 80080c8:	40021000 	.word	0x40021000
 80080cc:	40010000 	.word	0x40010000
 80080d0:	50000400 	.word	0x50000400
 80080d4:	50000800 	.word	0x50000800
 80080d8:	50000c00 	.word	0x50000c00
 80080dc:	50001000 	.word	0x50001000
 80080e0:	50001c00 	.word	0x50001c00
 80080e4:	40010400 	.word	0x40010400

080080e8 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b082      	sub	sp, #8
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
 80080f0:	0008      	movs	r0, r1
 80080f2:	0011      	movs	r1, r2
 80080f4:	1cbb      	adds	r3, r7, #2
 80080f6:	1c02      	adds	r2, r0, #0
 80080f8:	801a      	strh	r2, [r3, #0]
 80080fa:	1c7b      	adds	r3, r7, #1
 80080fc:	1c0a      	adds	r2, r1, #0
 80080fe:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008100:	1c7b      	adds	r3, r7, #1
 8008102:	781b      	ldrb	r3, [r3, #0]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d004      	beq.n	8008112 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008108:	1cbb      	adds	r3, r7, #2
 800810a:	881a      	ldrh	r2, [r3, #0]
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8008110:	e003      	b.n	800811a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8008112:	1cbb      	adds	r3, r7, #2
 8008114:	881a      	ldrh	r2, [r3, #0]
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	629a      	str	r2, [r3, #40]	; 0x28
}
 800811a:	46c0      	nop			; (mov r8, r8)
 800811c:	46bd      	mov	sp, r7
 800811e:	b002      	add	sp, #8
 8008120:	bd80      	pop	{r7, pc}

08008122 <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008122:	b580      	push	{r7, lr}
 8008124:	b084      	sub	sp, #16
 8008126:	af00      	add	r7, sp, #0
 8008128:	6078      	str	r0, [r7, #4]
 800812a:	000a      	movs	r2, r1
 800812c:	1cbb      	adds	r3, r7, #2
 800812e:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	695b      	ldr	r3, [r3, #20]
 8008134:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008136:	1cbb      	adds	r3, r7, #2
 8008138:	881b      	ldrh	r3, [r3, #0]
 800813a:	68fa      	ldr	r2, [r7, #12]
 800813c:	4013      	ands	r3, r2
 800813e:	041a      	lsls	r2, r3, #16
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	43db      	mvns	r3, r3
 8008144:	1cb9      	adds	r1, r7, #2
 8008146:	8809      	ldrh	r1, [r1, #0]
 8008148:	400b      	ands	r3, r1
 800814a:	431a      	orrs	r2, r3
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	619a      	str	r2, [r3, #24]
}
 8008150:	46c0      	nop			; (mov r8, r8)
 8008152:	46bd      	mov	sp, r7
 8008154:	b004      	add	sp, #16
 8008156:	bd80      	pop	{r7, pc}

08008158 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b082      	sub	sp, #8
 800815c:	af00      	add	r7, sp, #0
 800815e:	0002      	movs	r2, r0
 8008160:	1dbb      	adds	r3, r7, #6
 8008162:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8008164:	4b09      	ldr	r3, [pc, #36]	; (800818c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8008166:	695b      	ldr	r3, [r3, #20]
 8008168:	1dba      	adds	r2, r7, #6
 800816a:	8812      	ldrh	r2, [r2, #0]
 800816c:	4013      	ands	r3, r2
 800816e:	d008      	beq.n	8008182 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008170:	4b06      	ldr	r3, [pc, #24]	; (800818c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8008172:	1dba      	adds	r2, r7, #6
 8008174:	8812      	ldrh	r2, [r2, #0]
 8008176:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008178:	1dbb      	adds	r3, r7, #6
 800817a:	881b      	ldrh	r3, [r3, #0]
 800817c:	0018      	movs	r0, r3
 800817e:	f7fc ff45 	bl	800500c <HAL_GPIO_EXTI_Callback>
  }
}
 8008182:	46c0      	nop			; (mov r8, r8)
 8008184:	46bd      	mov	sp, r7
 8008186:	b002      	add	sp, #8
 8008188:	bd80      	pop	{r7, pc}
 800818a:	46c0      	nop			; (mov r8, r8)
 800818c:	40010400 	.word	0x40010400

08008190 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8008190:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008192:	b08b      	sub	sp, #44	; 0x2c
 8008194:	af06      	add	r7, sp, #24
 8008196:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d101      	bne.n	80081a2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800819e:	2301      	movs	r3, #1
 80081a0:	e100      	b.n	80083a4 <HAL_PCD_Init+0x214>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	4a81      	ldr	r2, [pc, #516]	; (80083ac <HAL_PCD_Init+0x21c>)
 80081a6:	5c9b      	ldrb	r3, [r3, r2]
 80081a8:	b2db      	uxtb	r3, r3
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d108      	bne.n	80081c0 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80081ae:	687a      	ldr	r2, [r7, #4]
 80081b0:	23aa      	movs	r3, #170	; 0xaa
 80081b2:	009b      	lsls	r3, r3, #2
 80081b4:	2100      	movs	r1, #0
 80081b6:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	0018      	movs	r0, r3
 80081bc:	f7fc fb5a 	bl	8004874 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	4a7a      	ldr	r2, [pc, #488]	; (80083ac <HAL_PCD_Init+0x21c>)
 80081c4:	2103      	movs	r1, #3
 80081c6:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	0018      	movs	r0, r3
 80081ce:	f003 fb53 	bl	800b878 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80081d2:	230f      	movs	r3, #15
 80081d4:	18fb      	adds	r3, r7, r3
 80081d6:	2200      	movs	r2, #0
 80081d8:	701a      	strb	r2, [r3, #0]
 80081da:	e058      	b.n	800828e <HAL_PCD_Init+0xfe>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80081dc:	200f      	movs	r0, #15
 80081de:	183b      	adds	r3, r7, r0
 80081e0:	781b      	ldrb	r3, [r3, #0]
 80081e2:	6879      	ldr	r1, [r7, #4]
 80081e4:	1c5a      	adds	r2, r3, #1
 80081e6:	0013      	movs	r3, r2
 80081e8:	009b      	lsls	r3, r3, #2
 80081ea:	189b      	adds	r3, r3, r2
 80081ec:	00db      	lsls	r3, r3, #3
 80081ee:	18cb      	adds	r3, r1, r3
 80081f0:	3301      	adds	r3, #1
 80081f2:	2201      	movs	r2, #1
 80081f4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80081f6:	183b      	adds	r3, r7, r0
 80081f8:	781b      	ldrb	r3, [r3, #0]
 80081fa:	6879      	ldr	r1, [r7, #4]
 80081fc:	1c5a      	adds	r2, r3, #1
 80081fe:	0013      	movs	r3, r2
 8008200:	009b      	lsls	r3, r3, #2
 8008202:	189b      	adds	r3, r3, r2
 8008204:	00db      	lsls	r3, r3, #3
 8008206:	183a      	adds	r2, r7, r0
 8008208:	7812      	ldrb	r2, [r2, #0]
 800820a:	545a      	strb	r2, [r3, r1]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800820c:	183b      	adds	r3, r7, r0
 800820e:	781a      	ldrb	r2, [r3, #0]
 8008210:	0004      	movs	r4, r0
 8008212:	183b      	adds	r3, r7, r0
 8008214:	781b      	ldrb	r3, [r3, #0]
 8008216:	b298      	uxth	r0, r3
 8008218:	6879      	ldr	r1, [r7, #4]
 800821a:	0013      	movs	r3, r2
 800821c:	009b      	lsls	r3, r3, #2
 800821e:	189b      	adds	r3, r3, r2
 8008220:	00db      	lsls	r3, r3, #3
 8008222:	18cb      	adds	r3, r1, r3
 8008224:	3336      	adds	r3, #54	; 0x36
 8008226:	1c02      	adds	r2, r0, #0
 8008228:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800822a:	193b      	adds	r3, r7, r4
 800822c:	781b      	ldrb	r3, [r3, #0]
 800822e:	6879      	ldr	r1, [r7, #4]
 8008230:	1c5a      	adds	r2, r3, #1
 8008232:	0013      	movs	r3, r2
 8008234:	009b      	lsls	r3, r3, #2
 8008236:	189b      	adds	r3, r3, r2
 8008238:	00db      	lsls	r3, r3, #3
 800823a:	18cb      	adds	r3, r1, r3
 800823c:	3303      	adds	r3, #3
 800823e:	2200      	movs	r2, #0
 8008240:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8008242:	193b      	adds	r3, r7, r4
 8008244:	781a      	ldrb	r2, [r3, #0]
 8008246:	6879      	ldr	r1, [r7, #4]
 8008248:	0013      	movs	r3, r2
 800824a:	009b      	lsls	r3, r3, #2
 800824c:	189b      	adds	r3, r3, r2
 800824e:	00db      	lsls	r3, r3, #3
 8008250:	18cb      	adds	r3, r1, r3
 8008252:	3338      	adds	r3, #56	; 0x38
 8008254:	2200      	movs	r2, #0
 8008256:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8008258:	193b      	adds	r3, r7, r4
 800825a:	781a      	ldrb	r2, [r3, #0]
 800825c:	6879      	ldr	r1, [r7, #4]
 800825e:	0013      	movs	r3, r2
 8008260:	009b      	lsls	r3, r3, #2
 8008262:	189b      	adds	r3, r3, r2
 8008264:	00db      	lsls	r3, r3, #3
 8008266:	18cb      	adds	r3, r1, r3
 8008268:	333c      	adds	r3, #60	; 0x3c
 800826a:	2200      	movs	r2, #0
 800826c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800826e:	193b      	adds	r3, r7, r4
 8008270:	781a      	ldrb	r2, [r3, #0]
 8008272:	6879      	ldr	r1, [r7, #4]
 8008274:	0013      	movs	r3, r2
 8008276:	009b      	lsls	r3, r3, #2
 8008278:	189b      	adds	r3, r3, r2
 800827a:	00db      	lsls	r3, r3, #3
 800827c:	18cb      	adds	r3, r1, r3
 800827e:	3340      	adds	r3, #64	; 0x40
 8008280:	2200      	movs	r2, #0
 8008282:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008284:	193b      	adds	r3, r7, r4
 8008286:	781a      	ldrb	r2, [r3, #0]
 8008288:	193b      	adds	r3, r7, r4
 800828a:	3201      	adds	r2, #1
 800828c:	701a      	strb	r2, [r3, #0]
 800828e:	230f      	movs	r3, #15
 8008290:	18fb      	adds	r3, r7, r3
 8008292:	781a      	ldrb	r2, [r3, #0]
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	685b      	ldr	r3, [r3, #4]
 8008298:	429a      	cmp	r2, r3
 800829a:	d39f      	bcc.n	80081dc <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800829c:	230f      	movs	r3, #15
 800829e:	18fb      	adds	r3, r7, r3
 80082a0:	2200      	movs	r2, #0
 80082a2:	701a      	strb	r2, [r3, #0]
 80082a4:	e056      	b.n	8008354 <HAL_PCD_Init+0x1c4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80082a6:	240f      	movs	r4, #15
 80082a8:	193b      	adds	r3, r7, r4
 80082aa:	781a      	ldrb	r2, [r3, #0]
 80082ac:	6878      	ldr	r0, [r7, #4]
 80082ae:	236a      	movs	r3, #106	; 0x6a
 80082b0:	33ff      	adds	r3, #255	; 0xff
 80082b2:	0019      	movs	r1, r3
 80082b4:	0013      	movs	r3, r2
 80082b6:	009b      	lsls	r3, r3, #2
 80082b8:	189b      	adds	r3, r3, r2
 80082ba:	00db      	lsls	r3, r3, #3
 80082bc:	18c3      	adds	r3, r0, r3
 80082be:	185b      	adds	r3, r3, r1
 80082c0:	2200      	movs	r2, #0
 80082c2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80082c4:	193b      	adds	r3, r7, r4
 80082c6:	781a      	ldrb	r2, [r3, #0]
 80082c8:	6878      	ldr	r0, [r7, #4]
 80082ca:	23b4      	movs	r3, #180	; 0xb4
 80082cc:	0059      	lsls	r1, r3, #1
 80082ce:	0013      	movs	r3, r2
 80082d0:	009b      	lsls	r3, r3, #2
 80082d2:	189b      	adds	r3, r3, r2
 80082d4:	00db      	lsls	r3, r3, #3
 80082d6:	18c3      	adds	r3, r0, r3
 80082d8:	185b      	adds	r3, r3, r1
 80082da:	193a      	adds	r2, r7, r4
 80082dc:	7812      	ldrb	r2, [r2, #0]
 80082de:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80082e0:	193b      	adds	r3, r7, r4
 80082e2:	781a      	ldrb	r2, [r3, #0]
 80082e4:	6878      	ldr	r0, [r7, #4]
 80082e6:	236c      	movs	r3, #108	; 0x6c
 80082e8:	33ff      	adds	r3, #255	; 0xff
 80082ea:	0019      	movs	r1, r3
 80082ec:	0013      	movs	r3, r2
 80082ee:	009b      	lsls	r3, r3, #2
 80082f0:	189b      	adds	r3, r3, r2
 80082f2:	00db      	lsls	r3, r3, #3
 80082f4:	18c3      	adds	r3, r0, r3
 80082f6:	185b      	adds	r3, r3, r1
 80082f8:	2200      	movs	r2, #0
 80082fa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80082fc:	193b      	adds	r3, r7, r4
 80082fe:	781a      	ldrb	r2, [r3, #0]
 8008300:	6878      	ldr	r0, [r7, #4]
 8008302:	23bc      	movs	r3, #188	; 0xbc
 8008304:	0059      	lsls	r1, r3, #1
 8008306:	0013      	movs	r3, r2
 8008308:	009b      	lsls	r3, r3, #2
 800830a:	189b      	adds	r3, r3, r2
 800830c:	00db      	lsls	r3, r3, #3
 800830e:	18c3      	adds	r3, r0, r3
 8008310:	185b      	adds	r3, r3, r1
 8008312:	2200      	movs	r2, #0
 8008314:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8008316:	193b      	adds	r3, r7, r4
 8008318:	781a      	ldrb	r2, [r3, #0]
 800831a:	6878      	ldr	r0, [r7, #4]
 800831c:	23be      	movs	r3, #190	; 0xbe
 800831e:	0059      	lsls	r1, r3, #1
 8008320:	0013      	movs	r3, r2
 8008322:	009b      	lsls	r3, r3, #2
 8008324:	189b      	adds	r3, r3, r2
 8008326:	00db      	lsls	r3, r3, #3
 8008328:	18c3      	adds	r3, r0, r3
 800832a:	185b      	adds	r3, r3, r1
 800832c:	2200      	movs	r2, #0
 800832e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8008330:	193b      	adds	r3, r7, r4
 8008332:	781a      	ldrb	r2, [r3, #0]
 8008334:	6878      	ldr	r0, [r7, #4]
 8008336:	23c0      	movs	r3, #192	; 0xc0
 8008338:	0059      	lsls	r1, r3, #1
 800833a:	0013      	movs	r3, r2
 800833c:	009b      	lsls	r3, r3, #2
 800833e:	189b      	adds	r3, r3, r2
 8008340:	00db      	lsls	r3, r3, #3
 8008342:	18c3      	adds	r3, r0, r3
 8008344:	185b      	adds	r3, r3, r1
 8008346:	2200      	movs	r2, #0
 8008348:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800834a:	193b      	adds	r3, r7, r4
 800834c:	781a      	ldrb	r2, [r3, #0]
 800834e:	193b      	adds	r3, r7, r4
 8008350:	3201      	adds	r2, #1
 8008352:	701a      	strb	r2, [r3, #0]
 8008354:	230f      	movs	r3, #15
 8008356:	18fb      	adds	r3, r7, r3
 8008358:	781a      	ldrb	r2, [r3, #0]
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	685b      	ldr	r3, [r3, #4]
 800835e:	429a      	cmp	r2, r3
 8008360:	d3a1      	bcc.n	80082a6 <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6818      	ldr	r0, [r3, #0]
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	466a      	mov	r2, sp
 800836a:	0011      	movs	r1, r2
 800836c:	001a      	movs	r2, r3
 800836e:	3210      	adds	r2, #16
 8008370:	ca70      	ldmia	r2!, {r4, r5, r6}
 8008372:	c170      	stmia	r1!, {r4, r5, r6}
 8008374:	ca30      	ldmia	r2!, {r4, r5}
 8008376:	c130      	stmia	r1!, {r4, r5}
 8008378:	6859      	ldr	r1, [r3, #4]
 800837a:	689a      	ldr	r2, [r3, #8]
 800837c:	68db      	ldr	r3, [r3, #12]
 800837e:	f003 fa95 	bl	800b8ac <USB_DevInit>

  hpcd->USB_Address = 0U;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	2224      	movs	r2, #36	; 0x24
 8008386:	2100      	movs	r1, #0
 8008388:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	4a07      	ldr	r2, [pc, #28]	; (80083ac <HAL_PCD_Init+0x21c>)
 800838e:	2101      	movs	r1, #1
 8008390:	5499      	strb	r1, [r3, r2]
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	69db      	ldr	r3, [r3, #28]
 8008396:	2b01      	cmp	r3, #1
 8008398:	d103      	bne.n	80083a2 <HAL_PCD_Init+0x212>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	0018      	movs	r0, r3
 800839e:	f000 f807 	bl	80083b0 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80083a2:	2300      	movs	r3, #0
}
 80083a4:	0018      	movs	r0, r3
 80083a6:	46bd      	mov	sp, r7
 80083a8:	b005      	add	sp, #20
 80083aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80083ac:	000002a9 	.word	0x000002a9

080083b0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b084      	sub	sp, #16
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80083be:	687a      	ldr	r2, [r7, #4]
 80083c0:	23ba      	movs	r3, #186	; 0xba
 80083c2:	009b      	lsls	r3, r3, #2
 80083c4:	2101      	movs	r1, #1
 80083c6:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 80083c8:	687a      	ldr	r2, [r7, #4]
 80083ca:	23b8      	movs	r3, #184	; 0xb8
 80083cc:	009b      	lsls	r3, r3, #2
 80083ce:	2100      	movs	r1, #0
 80083d0:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	2254      	movs	r2, #84	; 0x54
 80083d6:	5a9b      	ldrh	r3, [r3, r2]
 80083d8:	b29b      	uxth	r3, r3
 80083da:	2201      	movs	r2, #1
 80083dc:	4313      	orrs	r3, r2
 80083de:	b299      	uxth	r1, r3
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	2254      	movs	r2, #84	; 0x54
 80083e4:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	2254      	movs	r2, #84	; 0x54
 80083ea:	5a9b      	ldrh	r3, [r3, r2]
 80083ec:	b29b      	uxth	r3, r3
 80083ee:	2202      	movs	r2, #2
 80083f0:	4313      	orrs	r3, r2
 80083f2:	b299      	uxth	r1, r3
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	2254      	movs	r2, #84	; 0x54
 80083f8:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80083fa:	2300      	movs	r3, #0
}
 80083fc:	0018      	movs	r0, r3
 80083fe:	46bd      	mov	sp, r7
 8008400:	b004      	add	sp, #16
 8008402:	bd80      	pop	{r7, pc}

08008404 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8008404:	b580      	push	{r7, lr}
 8008406:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 8008408:	4b04      	ldr	r3, [pc, #16]	; (800841c <HAL_PWR_EnableBkUpAccess+0x18>)
 800840a:	681a      	ldr	r2, [r3, #0]
 800840c:	4b03      	ldr	r3, [pc, #12]	; (800841c <HAL_PWR_EnableBkUpAccess+0x18>)
 800840e:	2180      	movs	r1, #128	; 0x80
 8008410:	0049      	lsls	r1, r1, #1
 8008412:	430a      	orrs	r2, r1
 8008414:	601a      	str	r2, [r3, #0]
}
 8008416:	46c0      	nop			; (mov r8, r8)
 8008418:	46bd      	mov	sp, r7
 800841a:	bd80      	pop	{r7, pc}
 800841c:	40007000 	.word	0x40007000

08008420 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8008420:	b580      	push	{r7, lr}
 8008422:	b084      	sub	sp, #16
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
 8008428:	000a      	movs	r2, r1
 800842a:	1cfb      	adds	r3, r7, #3
 800842c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 800842e:	2300      	movs	r3, #0
 8008430:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
 8008432:	4b13      	ldr	r3, [pc, #76]	; (8008480 <HAL_PWR_EnterSTOPMode+0x60>)
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	60fb      	str	r3, [r7, #12]
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	2203      	movs	r2, #3
 800843c:	4393      	bics	r3, r2
 800843e:	60fb      	str	r3, [r7, #12]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 8008440:	68fa      	ldr	r2, [r7, #12]
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	4313      	orrs	r3, r2
 8008446:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  PWR->CR = tmpreg;
 8008448:	4b0d      	ldr	r3, [pc, #52]	; (8008480 <HAL_PWR_EnterSTOPMode+0x60>)
 800844a:	68fa      	ldr	r2, [r7, #12]
 800844c:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 800844e:	4b0d      	ldr	r3, [pc, #52]	; (8008484 <HAL_PWR_EnterSTOPMode+0x64>)
 8008450:	691a      	ldr	r2, [r3, #16]
 8008452:	4b0c      	ldr	r3, [pc, #48]	; (8008484 <HAL_PWR_EnterSTOPMode+0x64>)
 8008454:	2104      	movs	r1, #4
 8008456:	430a      	orrs	r2, r1
 8008458:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 800845a:	1cfb      	adds	r3, r7, #3
 800845c:	781b      	ldrb	r3, [r3, #0]
 800845e:	2b01      	cmp	r3, #1
 8008460:	d101      	bne.n	8008466 <HAL_PWR_EnterSTOPMode+0x46>
  \brief   Wait For Interrupt
  \details Wait For Interrupt is a hint instruction that suspends execution until one of a number of events occurs.
 */
__attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
 8008462:	bf30      	wfi
 8008464:	e002      	b.n	800846c <HAL_PWR_EnterSTOPMode+0x4c>
  \brief   Send Event
  \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 */
__attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
{
  __ASM volatile ("sev");
 8008466:	bf40      	sev
  __ASM volatile ("wfe");
 8008468:	bf20      	wfe
 800846a:	bf20      	wfe
    __WFE();
    __WFE();
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 800846c:	4b05      	ldr	r3, [pc, #20]	; (8008484 <HAL_PWR_EnterSTOPMode+0x64>)
 800846e:	691a      	ldr	r2, [r3, #16]
 8008470:	4b04      	ldr	r3, [pc, #16]	; (8008484 <HAL_PWR_EnterSTOPMode+0x64>)
 8008472:	2104      	movs	r1, #4
 8008474:	438a      	bics	r2, r1
 8008476:	611a      	str	r2, [r3, #16]

}
 8008478:	46c0      	nop			; (mov r8, r8)
 800847a:	46bd      	mov	sp, r7
 800847c:	b004      	add	sp, #16
 800847e:	bd80      	pop	{r7, pc}
 8008480:	40007000 	.word	0x40007000
 8008484:	e000ed00 	.word	0xe000ed00

08008488 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008488:	b5b0      	push	{r4, r5, r7, lr}
 800848a:	b08a      	sub	sp, #40	; 0x28
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d102      	bne.n	800849c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8008496:	2301      	movs	r3, #1
 8008498:	f000 fbbc 	bl	8008c14 <HAL_RCC_OscConfig+0x78c>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800849c:	4bc8      	ldr	r3, [pc, #800]	; (80087c0 <HAL_RCC_OscConfig+0x338>)
 800849e:	68db      	ldr	r3, [r3, #12]
 80084a0:	220c      	movs	r2, #12
 80084a2:	4013      	ands	r3, r2
 80084a4:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80084a6:	4bc6      	ldr	r3, [pc, #792]	; (80087c0 <HAL_RCC_OscConfig+0x338>)
 80084a8:	68da      	ldr	r2, [r3, #12]
 80084aa:	2380      	movs	r3, #128	; 0x80
 80084ac:	025b      	lsls	r3, r3, #9
 80084ae:	4013      	ands	r3, r2
 80084b0:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	2201      	movs	r2, #1
 80084b8:	4013      	ands	r3, r2
 80084ba:	d100      	bne.n	80084be <HAL_RCC_OscConfig+0x36>
 80084bc:	e07e      	b.n	80085bc <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80084be:	69fb      	ldr	r3, [r7, #28]
 80084c0:	2b08      	cmp	r3, #8
 80084c2:	d007      	beq.n	80084d4 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80084c4:	69fb      	ldr	r3, [r7, #28]
 80084c6:	2b0c      	cmp	r3, #12
 80084c8:	d112      	bne.n	80084f0 <HAL_RCC_OscConfig+0x68>
 80084ca:	69ba      	ldr	r2, [r7, #24]
 80084cc:	2380      	movs	r3, #128	; 0x80
 80084ce:	025b      	lsls	r3, r3, #9
 80084d0:	429a      	cmp	r2, r3
 80084d2:	d10d      	bne.n	80084f0 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80084d4:	4bba      	ldr	r3, [pc, #744]	; (80087c0 <HAL_RCC_OscConfig+0x338>)
 80084d6:	681a      	ldr	r2, [r3, #0]
 80084d8:	2380      	movs	r3, #128	; 0x80
 80084da:	029b      	lsls	r3, r3, #10
 80084dc:	4013      	ands	r3, r2
 80084de:	d100      	bne.n	80084e2 <HAL_RCC_OscConfig+0x5a>
 80084e0:	e06b      	b.n	80085ba <HAL_RCC_OscConfig+0x132>
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	685b      	ldr	r3, [r3, #4]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d167      	bne.n	80085ba <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80084ea:	2301      	movs	r3, #1
 80084ec:	f000 fb92 	bl	8008c14 <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	685a      	ldr	r2, [r3, #4]
 80084f4:	2380      	movs	r3, #128	; 0x80
 80084f6:	025b      	lsls	r3, r3, #9
 80084f8:	429a      	cmp	r2, r3
 80084fa:	d107      	bne.n	800850c <HAL_RCC_OscConfig+0x84>
 80084fc:	4bb0      	ldr	r3, [pc, #704]	; (80087c0 <HAL_RCC_OscConfig+0x338>)
 80084fe:	681a      	ldr	r2, [r3, #0]
 8008500:	4baf      	ldr	r3, [pc, #700]	; (80087c0 <HAL_RCC_OscConfig+0x338>)
 8008502:	2180      	movs	r1, #128	; 0x80
 8008504:	0249      	lsls	r1, r1, #9
 8008506:	430a      	orrs	r2, r1
 8008508:	601a      	str	r2, [r3, #0]
 800850a:	e027      	b.n	800855c <HAL_RCC_OscConfig+0xd4>
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	685a      	ldr	r2, [r3, #4]
 8008510:	23a0      	movs	r3, #160	; 0xa0
 8008512:	02db      	lsls	r3, r3, #11
 8008514:	429a      	cmp	r2, r3
 8008516:	d10e      	bne.n	8008536 <HAL_RCC_OscConfig+0xae>
 8008518:	4ba9      	ldr	r3, [pc, #676]	; (80087c0 <HAL_RCC_OscConfig+0x338>)
 800851a:	681a      	ldr	r2, [r3, #0]
 800851c:	4ba8      	ldr	r3, [pc, #672]	; (80087c0 <HAL_RCC_OscConfig+0x338>)
 800851e:	2180      	movs	r1, #128	; 0x80
 8008520:	02c9      	lsls	r1, r1, #11
 8008522:	430a      	orrs	r2, r1
 8008524:	601a      	str	r2, [r3, #0]
 8008526:	4ba6      	ldr	r3, [pc, #664]	; (80087c0 <HAL_RCC_OscConfig+0x338>)
 8008528:	681a      	ldr	r2, [r3, #0]
 800852a:	4ba5      	ldr	r3, [pc, #660]	; (80087c0 <HAL_RCC_OscConfig+0x338>)
 800852c:	2180      	movs	r1, #128	; 0x80
 800852e:	0249      	lsls	r1, r1, #9
 8008530:	430a      	orrs	r2, r1
 8008532:	601a      	str	r2, [r3, #0]
 8008534:	e012      	b.n	800855c <HAL_RCC_OscConfig+0xd4>
 8008536:	4ba2      	ldr	r3, [pc, #648]	; (80087c0 <HAL_RCC_OscConfig+0x338>)
 8008538:	681a      	ldr	r2, [r3, #0]
 800853a:	4ba1      	ldr	r3, [pc, #644]	; (80087c0 <HAL_RCC_OscConfig+0x338>)
 800853c:	49a1      	ldr	r1, [pc, #644]	; (80087c4 <HAL_RCC_OscConfig+0x33c>)
 800853e:	400a      	ands	r2, r1
 8008540:	601a      	str	r2, [r3, #0]
 8008542:	4b9f      	ldr	r3, [pc, #636]	; (80087c0 <HAL_RCC_OscConfig+0x338>)
 8008544:	681a      	ldr	r2, [r3, #0]
 8008546:	2380      	movs	r3, #128	; 0x80
 8008548:	025b      	lsls	r3, r3, #9
 800854a:	4013      	ands	r3, r2
 800854c:	60fb      	str	r3, [r7, #12]
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	4b9b      	ldr	r3, [pc, #620]	; (80087c0 <HAL_RCC_OscConfig+0x338>)
 8008552:	681a      	ldr	r2, [r3, #0]
 8008554:	4b9a      	ldr	r3, [pc, #616]	; (80087c0 <HAL_RCC_OscConfig+0x338>)
 8008556:	499c      	ldr	r1, [pc, #624]	; (80087c8 <HAL_RCC_OscConfig+0x340>)
 8008558:	400a      	ands	r2, r1
 800855a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	685b      	ldr	r3, [r3, #4]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d015      	beq.n	8008590 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008564:	f7fe fbc2 	bl	8006cec <HAL_GetTick>
 8008568:	0003      	movs	r3, r0
 800856a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800856c:	e009      	b.n	8008582 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800856e:	f7fe fbbd 	bl	8006cec <HAL_GetTick>
 8008572:	0002      	movs	r2, r0
 8008574:	697b      	ldr	r3, [r7, #20]
 8008576:	1ad3      	subs	r3, r2, r3
 8008578:	2b64      	cmp	r3, #100	; 0x64
 800857a:	d902      	bls.n	8008582 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800857c:	2303      	movs	r3, #3
 800857e:	f000 fb49 	bl	8008c14 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008582:	4b8f      	ldr	r3, [pc, #572]	; (80087c0 <HAL_RCC_OscConfig+0x338>)
 8008584:	681a      	ldr	r2, [r3, #0]
 8008586:	2380      	movs	r3, #128	; 0x80
 8008588:	029b      	lsls	r3, r3, #10
 800858a:	4013      	ands	r3, r2
 800858c:	d0ef      	beq.n	800856e <HAL_RCC_OscConfig+0xe6>
 800858e:	e015      	b.n	80085bc <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008590:	f7fe fbac 	bl	8006cec <HAL_GetTick>
 8008594:	0003      	movs	r3, r0
 8008596:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008598:	e008      	b.n	80085ac <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800859a:	f7fe fba7 	bl	8006cec <HAL_GetTick>
 800859e:	0002      	movs	r2, r0
 80085a0:	697b      	ldr	r3, [r7, #20]
 80085a2:	1ad3      	subs	r3, r2, r3
 80085a4:	2b64      	cmp	r3, #100	; 0x64
 80085a6:	d901      	bls.n	80085ac <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80085a8:	2303      	movs	r3, #3
 80085aa:	e333      	b.n	8008c14 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80085ac:	4b84      	ldr	r3, [pc, #528]	; (80087c0 <HAL_RCC_OscConfig+0x338>)
 80085ae:	681a      	ldr	r2, [r3, #0]
 80085b0:	2380      	movs	r3, #128	; 0x80
 80085b2:	029b      	lsls	r3, r3, #10
 80085b4:	4013      	ands	r3, r2
 80085b6:	d1f0      	bne.n	800859a <HAL_RCC_OscConfig+0x112>
 80085b8:	e000      	b.n	80085bc <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80085ba:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	2202      	movs	r2, #2
 80085c2:	4013      	ands	r3, r2
 80085c4:	d100      	bne.n	80085c8 <HAL_RCC_OscConfig+0x140>
 80085c6:	e098      	b.n	80086fa <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	68db      	ldr	r3, [r3, #12]
 80085cc:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80085ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085d0:	2220      	movs	r2, #32
 80085d2:	4013      	ands	r3, r2
 80085d4:	d009      	beq.n	80085ea <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80085d6:	4b7a      	ldr	r3, [pc, #488]	; (80087c0 <HAL_RCC_OscConfig+0x338>)
 80085d8:	681a      	ldr	r2, [r3, #0]
 80085da:	4b79      	ldr	r3, [pc, #484]	; (80087c0 <HAL_RCC_OscConfig+0x338>)
 80085dc:	2120      	movs	r1, #32
 80085de:	430a      	orrs	r2, r1
 80085e0:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 80085e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085e4:	2220      	movs	r2, #32
 80085e6:	4393      	bics	r3, r2
 80085e8:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80085ea:	69fb      	ldr	r3, [r7, #28]
 80085ec:	2b04      	cmp	r3, #4
 80085ee:	d005      	beq.n	80085fc <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80085f0:	69fb      	ldr	r3, [r7, #28]
 80085f2:	2b0c      	cmp	r3, #12
 80085f4:	d13d      	bne.n	8008672 <HAL_RCC_OscConfig+0x1ea>
 80085f6:	69bb      	ldr	r3, [r7, #24]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d13a      	bne.n	8008672 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80085fc:	4b70      	ldr	r3, [pc, #448]	; (80087c0 <HAL_RCC_OscConfig+0x338>)
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	2204      	movs	r2, #4
 8008602:	4013      	ands	r3, r2
 8008604:	d004      	beq.n	8008610 <HAL_RCC_OscConfig+0x188>
 8008606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008608:	2b00      	cmp	r3, #0
 800860a:	d101      	bne.n	8008610 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 800860c:	2301      	movs	r3, #1
 800860e:	e301      	b.n	8008c14 <HAL_RCC_OscConfig+0x78c>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008610:	4b6b      	ldr	r3, [pc, #428]	; (80087c0 <HAL_RCC_OscConfig+0x338>)
 8008612:	685b      	ldr	r3, [r3, #4]
 8008614:	4a6d      	ldr	r2, [pc, #436]	; (80087cc <HAL_RCC_OscConfig+0x344>)
 8008616:	4013      	ands	r3, r2
 8008618:	0019      	movs	r1, r3
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	691b      	ldr	r3, [r3, #16]
 800861e:	021a      	lsls	r2, r3, #8
 8008620:	4b67      	ldr	r3, [pc, #412]	; (80087c0 <HAL_RCC_OscConfig+0x338>)
 8008622:	430a      	orrs	r2, r1
 8008624:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8008626:	4b66      	ldr	r3, [pc, #408]	; (80087c0 <HAL_RCC_OscConfig+0x338>)
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	2209      	movs	r2, #9
 800862c:	4393      	bics	r3, r2
 800862e:	0019      	movs	r1, r3
 8008630:	4b63      	ldr	r3, [pc, #396]	; (80087c0 <HAL_RCC_OscConfig+0x338>)
 8008632:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008634:	430a      	orrs	r2, r1
 8008636:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008638:	f000 fc20 	bl	8008e7c <HAL_RCC_GetSysClockFreq>
 800863c:	0001      	movs	r1, r0
 800863e:	4b60      	ldr	r3, [pc, #384]	; (80087c0 <HAL_RCC_OscConfig+0x338>)
 8008640:	68db      	ldr	r3, [r3, #12]
 8008642:	091b      	lsrs	r3, r3, #4
 8008644:	220f      	movs	r2, #15
 8008646:	4013      	ands	r3, r2
 8008648:	4a61      	ldr	r2, [pc, #388]	; (80087d0 <HAL_RCC_OscConfig+0x348>)
 800864a:	5cd3      	ldrb	r3, [r2, r3]
 800864c:	000a      	movs	r2, r1
 800864e:	40da      	lsrs	r2, r3
 8008650:	4b60      	ldr	r3, [pc, #384]	; (80087d4 <HAL_RCC_OscConfig+0x34c>)
 8008652:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (TICK_INT_PRIORITY);
 8008654:	2513      	movs	r5, #19
 8008656:	197c      	adds	r4, r7, r5
 8008658:	2000      	movs	r0, #0
 800865a:	f7fe fb01 	bl	8006c60 <HAL_InitTick>
 800865e:	0003      	movs	r3, r0
 8008660:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8008662:	197b      	adds	r3, r7, r5
 8008664:	781b      	ldrb	r3, [r3, #0]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d047      	beq.n	80086fa <HAL_RCC_OscConfig+0x272>
      {
        return status;
 800866a:	2313      	movs	r3, #19
 800866c:	18fb      	adds	r3, r7, r3
 800866e:	781b      	ldrb	r3, [r3, #0]
 8008670:	e2d0      	b.n	8008c14 <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8008672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008674:	2b00      	cmp	r3, #0
 8008676:	d027      	beq.n	80086c8 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8008678:	4b51      	ldr	r3, [pc, #324]	; (80087c0 <HAL_RCC_OscConfig+0x338>)
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	2209      	movs	r2, #9
 800867e:	4393      	bics	r3, r2
 8008680:	0019      	movs	r1, r3
 8008682:	4b4f      	ldr	r3, [pc, #316]	; (80087c0 <HAL_RCC_OscConfig+0x338>)
 8008684:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008686:	430a      	orrs	r2, r1
 8008688:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800868a:	f7fe fb2f 	bl	8006cec <HAL_GetTick>
 800868e:	0003      	movs	r3, r0
 8008690:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008692:	e008      	b.n	80086a6 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008694:	f7fe fb2a 	bl	8006cec <HAL_GetTick>
 8008698:	0002      	movs	r2, r0
 800869a:	697b      	ldr	r3, [r7, #20]
 800869c:	1ad3      	subs	r3, r2, r3
 800869e:	2b02      	cmp	r3, #2
 80086a0:	d901      	bls.n	80086a6 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 80086a2:	2303      	movs	r3, #3
 80086a4:	e2b6      	b.n	8008c14 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80086a6:	4b46      	ldr	r3, [pc, #280]	; (80087c0 <HAL_RCC_OscConfig+0x338>)
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	2204      	movs	r2, #4
 80086ac:	4013      	ands	r3, r2
 80086ae:	d0f1      	beq.n	8008694 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80086b0:	4b43      	ldr	r3, [pc, #268]	; (80087c0 <HAL_RCC_OscConfig+0x338>)
 80086b2:	685b      	ldr	r3, [r3, #4]
 80086b4:	4a45      	ldr	r2, [pc, #276]	; (80087cc <HAL_RCC_OscConfig+0x344>)
 80086b6:	4013      	ands	r3, r2
 80086b8:	0019      	movs	r1, r3
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	691b      	ldr	r3, [r3, #16]
 80086be:	021a      	lsls	r2, r3, #8
 80086c0:	4b3f      	ldr	r3, [pc, #252]	; (80087c0 <HAL_RCC_OscConfig+0x338>)
 80086c2:	430a      	orrs	r2, r1
 80086c4:	605a      	str	r2, [r3, #4]
 80086c6:	e018      	b.n	80086fa <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80086c8:	4b3d      	ldr	r3, [pc, #244]	; (80087c0 <HAL_RCC_OscConfig+0x338>)
 80086ca:	681a      	ldr	r2, [r3, #0]
 80086cc:	4b3c      	ldr	r3, [pc, #240]	; (80087c0 <HAL_RCC_OscConfig+0x338>)
 80086ce:	2101      	movs	r1, #1
 80086d0:	438a      	bics	r2, r1
 80086d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80086d4:	f7fe fb0a 	bl	8006cec <HAL_GetTick>
 80086d8:	0003      	movs	r3, r0
 80086da:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80086dc:	e008      	b.n	80086f0 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80086de:	f7fe fb05 	bl	8006cec <HAL_GetTick>
 80086e2:	0002      	movs	r2, r0
 80086e4:	697b      	ldr	r3, [r7, #20]
 80086e6:	1ad3      	subs	r3, r2, r3
 80086e8:	2b02      	cmp	r3, #2
 80086ea:	d901      	bls.n	80086f0 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 80086ec:	2303      	movs	r3, #3
 80086ee:	e291      	b.n	8008c14 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80086f0:	4b33      	ldr	r3, [pc, #204]	; (80087c0 <HAL_RCC_OscConfig+0x338>)
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	2204      	movs	r2, #4
 80086f6:	4013      	ands	r3, r2
 80086f8:	d1f1      	bne.n	80086de <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	2210      	movs	r2, #16
 8008700:	4013      	ands	r3, r2
 8008702:	d100      	bne.n	8008706 <HAL_RCC_OscConfig+0x27e>
 8008704:	e09f      	b.n	8008846 <HAL_RCC_OscConfig+0x3be>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8008706:	69fb      	ldr	r3, [r7, #28]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d13f      	bne.n	800878c <HAL_RCC_OscConfig+0x304>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800870c:	4b2c      	ldr	r3, [pc, #176]	; (80087c0 <HAL_RCC_OscConfig+0x338>)
 800870e:	681a      	ldr	r2, [r3, #0]
 8008710:	2380      	movs	r3, #128	; 0x80
 8008712:	009b      	lsls	r3, r3, #2
 8008714:	4013      	ands	r3, r2
 8008716:	d005      	beq.n	8008724 <HAL_RCC_OscConfig+0x29c>
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	69db      	ldr	r3, [r3, #28]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d101      	bne.n	8008724 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8008720:	2301      	movs	r3, #1
 8008722:	e277      	b.n	8008c14 <HAL_RCC_OscConfig+0x78c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008724:	4b26      	ldr	r3, [pc, #152]	; (80087c0 <HAL_RCC_OscConfig+0x338>)
 8008726:	685b      	ldr	r3, [r3, #4]
 8008728:	4a2b      	ldr	r2, [pc, #172]	; (80087d8 <HAL_RCC_OscConfig+0x350>)
 800872a:	4013      	ands	r3, r2
 800872c:	0019      	movs	r1, r3
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008732:	4b23      	ldr	r3, [pc, #140]	; (80087c0 <HAL_RCC_OscConfig+0x338>)
 8008734:	430a      	orrs	r2, r1
 8008736:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008738:	4b21      	ldr	r3, [pc, #132]	; (80087c0 <HAL_RCC_OscConfig+0x338>)
 800873a:	685b      	ldr	r3, [r3, #4]
 800873c:	021b      	lsls	r3, r3, #8
 800873e:	0a19      	lsrs	r1, r3, #8
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	6a1b      	ldr	r3, [r3, #32]
 8008744:	061a      	lsls	r2, r3, #24
 8008746:	4b1e      	ldr	r3, [pc, #120]	; (80087c0 <HAL_RCC_OscConfig+0x338>)
 8008748:	430a      	orrs	r2, r1
 800874a:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008750:	0b5b      	lsrs	r3, r3, #13
 8008752:	3301      	adds	r3, #1
 8008754:	2280      	movs	r2, #128	; 0x80
 8008756:	0212      	lsls	r2, r2, #8
 8008758:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800875a:	4b19      	ldr	r3, [pc, #100]	; (80087c0 <HAL_RCC_OscConfig+0x338>)
 800875c:	68db      	ldr	r3, [r3, #12]
 800875e:	091b      	lsrs	r3, r3, #4
 8008760:	210f      	movs	r1, #15
 8008762:	400b      	ands	r3, r1
 8008764:	491a      	ldr	r1, [pc, #104]	; (80087d0 <HAL_RCC_OscConfig+0x348>)
 8008766:	5ccb      	ldrb	r3, [r1, r3]
 8008768:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800876a:	4b1a      	ldr	r3, [pc, #104]	; (80087d4 <HAL_RCC_OscConfig+0x34c>)
 800876c:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 800876e:	2513      	movs	r5, #19
 8008770:	197c      	adds	r4, r7, r5
 8008772:	2000      	movs	r0, #0
 8008774:	f7fe fa74 	bl	8006c60 <HAL_InitTick>
 8008778:	0003      	movs	r3, r0
 800877a:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800877c:	197b      	adds	r3, r7, r5
 800877e:	781b      	ldrb	r3, [r3, #0]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d060      	beq.n	8008846 <HAL_RCC_OscConfig+0x3be>
        {
          return status;
 8008784:	2313      	movs	r3, #19
 8008786:	18fb      	adds	r3, r7, r3
 8008788:	781b      	ldrb	r3, [r3, #0]
 800878a:	e243      	b.n	8008c14 <HAL_RCC_OscConfig+0x78c>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	69db      	ldr	r3, [r3, #28]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d03e      	beq.n	8008812 <HAL_RCC_OscConfig+0x38a>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8008794:	4b0a      	ldr	r3, [pc, #40]	; (80087c0 <HAL_RCC_OscConfig+0x338>)
 8008796:	681a      	ldr	r2, [r3, #0]
 8008798:	4b09      	ldr	r3, [pc, #36]	; (80087c0 <HAL_RCC_OscConfig+0x338>)
 800879a:	2180      	movs	r1, #128	; 0x80
 800879c:	0049      	lsls	r1, r1, #1
 800879e:	430a      	orrs	r2, r1
 80087a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80087a2:	f7fe faa3 	bl	8006cec <HAL_GetTick>
 80087a6:	0003      	movs	r3, r0
 80087a8:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80087aa:	e017      	b.n	80087dc <HAL_RCC_OscConfig+0x354>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80087ac:	f7fe fa9e 	bl	8006cec <HAL_GetTick>
 80087b0:	0002      	movs	r2, r0
 80087b2:	697b      	ldr	r3, [r7, #20]
 80087b4:	1ad3      	subs	r3, r2, r3
 80087b6:	2b02      	cmp	r3, #2
 80087b8:	d910      	bls.n	80087dc <HAL_RCC_OscConfig+0x354>
          {
            return HAL_TIMEOUT;
 80087ba:	2303      	movs	r3, #3
 80087bc:	e22a      	b.n	8008c14 <HAL_RCC_OscConfig+0x78c>
 80087be:	46c0      	nop			; (mov r8, r8)
 80087c0:	40021000 	.word	0x40021000
 80087c4:	fffeffff 	.word	0xfffeffff
 80087c8:	fffbffff 	.word	0xfffbffff
 80087cc:	ffffe0ff 	.word	0xffffe0ff
 80087d0:	0800cd4c 	.word	0x0800cd4c
 80087d4:	20000010 	.word	0x20000010
 80087d8:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80087dc:	4bc6      	ldr	r3, [pc, #792]	; (8008af8 <HAL_RCC_OscConfig+0x670>)
 80087de:	681a      	ldr	r2, [r3, #0]
 80087e0:	2380      	movs	r3, #128	; 0x80
 80087e2:	009b      	lsls	r3, r3, #2
 80087e4:	4013      	ands	r3, r2
 80087e6:	d0e1      	beq.n	80087ac <HAL_RCC_OscConfig+0x324>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80087e8:	4bc3      	ldr	r3, [pc, #780]	; (8008af8 <HAL_RCC_OscConfig+0x670>)
 80087ea:	685b      	ldr	r3, [r3, #4]
 80087ec:	4ac3      	ldr	r2, [pc, #780]	; (8008afc <HAL_RCC_OscConfig+0x674>)
 80087ee:	4013      	ands	r3, r2
 80087f0:	0019      	movs	r1, r3
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80087f6:	4bc0      	ldr	r3, [pc, #768]	; (8008af8 <HAL_RCC_OscConfig+0x670>)
 80087f8:	430a      	orrs	r2, r1
 80087fa:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80087fc:	4bbe      	ldr	r3, [pc, #760]	; (8008af8 <HAL_RCC_OscConfig+0x670>)
 80087fe:	685b      	ldr	r3, [r3, #4]
 8008800:	021b      	lsls	r3, r3, #8
 8008802:	0a19      	lsrs	r1, r3, #8
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	6a1b      	ldr	r3, [r3, #32]
 8008808:	061a      	lsls	r2, r3, #24
 800880a:	4bbb      	ldr	r3, [pc, #748]	; (8008af8 <HAL_RCC_OscConfig+0x670>)
 800880c:	430a      	orrs	r2, r1
 800880e:	605a      	str	r2, [r3, #4]
 8008810:	e019      	b.n	8008846 <HAL_RCC_OscConfig+0x3be>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8008812:	4bb9      	ldr	r3, [pc, #740]	; (8008af8 <HAL_RCC_OscConfig+0x670>)
 8008814:	681a      	ldr	r2, [r3, #0]
 8008816:	4bb8      	ldr	r3, [pc, #736]	; (8008af8 <HAL_RCC_OscConfig+0x670>)
 8008818:	49b9      	ldr	r1, [pc, #740]	; (8008b00 <HAL_RCC_OscConfig+0x678>)
 800881a:	400a      	ands	r2, r1
 800881c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800881e:	f7fe fa65 	bl	8006cec <HAL_GetTick>
 8008822:	0003      	movs	r3, r0
 8008824:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8008826:	e008      	b.n	800883a <HAL_RCC_OscConfig+0x3b2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008828:	f7fe fa60 	bl	8006cec <HAL_GetTick>
 800882c:	0002      	movs	r2, r0
 800882e:	697b      	ldr	r3, [r7, #20]
 8008830:	1ad3      	subs	r3, r2, r3
 8008832:	2b02      	cmp	r3, #2
 8008834:	d901      	bls.n	800883a <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 8008836:	2303      	movs	r3, #3
 8008838:	e1ec      	b.n	8008c14 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800883a:	4baf      	ldr	r3, [pc, #700]	; (8008af8 <HAL_RCC_OscConfig+0x670>)
 800883c:	681a      	ldr	r2, [r3, #0]
 800883e:	2380      	movs	r3, #128	; 0x80
 8008840:	009b      	lsls	r3, r3, #2
 8008842:	4013      	ands	r3, r2
 8008844:	d1f0      	bne.n	8008828 <HAL_RCC_OscConfig+0x3a0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	2208      	movs	r2, #8
 800884c:	4013      	ands	r3, r2
 800884e:	d036      	beq.n	80088be <HAL_RCC_OscConfig+0x436>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	695b      	ldr	r3, [r3, #20]
 8008854:	2b00      	cmp	r3, #0
 8008856:	d019      	beq.n	800888c <HAL_RCC_OscConfig+0x404>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008858:	4ba7      	ldr	r3, [pc, #668]	; (8008af8 <HAL_RCC_OscConfig+0x670>)
 800885a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800885c:	4ba6      	ldr	r3, [pc, #664]	; (8008af8 <HAL_RCC_OscConfig+0x670>)
 800885e:	2101      	movs	r1, #1
 8008860:	430a      	orrs	r2, r1
 8008862:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008864:	f7fe fa42 	bl	8006cec <HAL_GetTick>
 8008868:	0003      	movs	r3, r0
 800886a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800886c:	e008      	b.n	8008880 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800886e:	f7fe fa3d 	bl	8006cec <HAL_GetTick>
 8008872:	0002      	movs	r2, r0
 8008874:	697b      	ldr	r3, [r7, #20]
 8008876:	1ad3      	subs	r3, r2, r3
 8008878:	2b02      	cmp	r3, #2
 800887a:	d901      	bls.n	8008880 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 800887c:	2303      	movs	r3, #3
 800887e:	e1c9      	b.n	8008c14 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008880:	4b9d      	ldr	r3, [pc, #628]	; (8008af8 <HAL_RCC_OscConfig+0x670>)
 8008882:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008884:	2202      	movs	r2, #2
 8008886:	4013      	ands	r3, r2
 8008888:	d0f1      	beq.n	800886e <HAL_RCC_OscConfig+0x3e6>
 800888a:	e018      	b.n	80088be <HAL_RCC_OscConfig+0x436>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800888c:	4b9a      	ldr	r3, [pc, #616]	; (8008af8 <HAL_RCC_OscConfig+0x670>)
 800888e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008890:	4b99      	ldr	r3, [pc, #612]	; (8008af8 <HAL_RCC_OscConfig+0x670>)
 8008892:	2101      	movs	r1, #1
 8008894:	438a      	bics	r2, r1
 8008896:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008898:	f7fe fa28 	bl	8006cec <HAL_GetTick>
 800889c:	0003      	movs	r3, r0
 800889e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80088a0:	e008      	b.n	80088b4 <HAL_RCC_OscConfig+0x42c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80088a2:	f7fe fa23 	bl	8006cec <HAL_GetTick>
 80088a6:	0002      	movs	r2, r0
 80088a8:	697b      	ldr	r3, [r7, #20]
 80088aa:	1ad3      	subs	r3, r2, r3
 80088ac:	2b02      	cmp	r3, #2
 80088ae:	d901      	bls.n	80088b4 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 80088b0:	2303      	movs	r3, #3
 80088b2:	e1af      	b.n	8008c14 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80088b4:	4b90      	ldr	r3, [pc, #576]	; (8008af8 <HAL_RCC_OscConfig+0x670>)
 80088b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088b8:	2202      	movs	r2, #2
 80088ba:	4013      	ands	r3, r2
 80088bc:	d1f1      	bne.n	80088a2 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	2204      	movs	r2, #4
 80088c4:	4013      	ands	r3, r2
 80088c6:	d100      	bne.n	80088ca <HAL_RCC_OscConfig+0x442>
 80088c8:	e0af      	b.n	8008a2a <HAL_RCC_OscConfig+0x5a2>
  {
    FlagStatus       pwrclkchanged = RESET;
 80088ca:	2323      	movs	r3, #35	; 0x23
 80088cc:	18fb      	adds	r3, r7, r3
 80088ce:	2200      	movs	r2, #0
 80088d0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80088d2:	4b89      	ldr	r3, [pc, #548]	; (8008af8 <HAL_RCC_OscConfig+0x670>)
 80088d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80088d6:	2380      	movs	r3, #128	; 0x80
 80088d8:	055b      	lsls	r3, r3, #21
 80088da:	4013      	ands	r3, r2
 80088dc:	d10a      	bne.n	80088f4 <HAL_RCC_OscConfig+0x46c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80088de:	4b86      	ldr	r3, [pc, #536]	; (8008af8 <HAL_RCC_OscConfig+0x670>)
 80088e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80088e2:	4b85      	ldr	r3, [pc, #532]	; (8008af8 <HAL_RCC_OscConfig+0x670>)
 80088e4:	2180      	movs	r1, #128	; 0x80
 80088e6:	0549      	lsls	r1, r1, #21
 80088e8:	430a      	orrs	r2, r1
 80088ea:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80088ec:	2323      	movs	r3, #35	; 0x23
 80088ee:	18fb      	adds	r3, r7, r3
 80088f0:	2201      	movs	r2, #1
 80088f2:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80088f4:	4b83      	ldr	r3, [pc, #524]	; (8008b04 <HAL_RCC_OscConfig+0x67c>)
 80088f6:	681a      	ldr	r2, [r3, #0]
 80088f8:	2380      	movs	r3, #128	; 0x80
 80088fa:	005b      	lsls	r3, r3, #1
 80088fc:	4013      	ands	r3, r2
 80088fe:	d11a      	bne.n	8008936 <HAL_RCC_OscConfig+0x4ae>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008900:	4b80      	ldr	r3, [pc, #512]	; (8008b04 <HAL_RCC_OscConfig+0x67c>)
 8008902:	681a      	ldr	r2, [r3, #0]
 8008904:	4b7f      	ldr	r3, [pc, #508]	; (8008b04 <HAL_RCC_OscConfig+0x67c>)
 8008906:	2180      	movs	r1, #128	; 0x80
 8008908:	0049      	lsls	r1, r1, #1
 800890a:	430a      	orrs	r2, r1
 800890c:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800890e:	f7fe f9ed 	bl	8006cec <HAL_GetTick>
 8008912:	0003      	movs	r3, r0
 8008914:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008916:	e008      	b.n	800892a <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008918:	f7fe f9e8 	bl	8006cec <HAL_GetTick>
 800891c:	0002      	movs	r2, r0
 800891e:	697b      	ldr	r3, [r7, #20]
 8008920:	1ad3      	subs	r3, r2, r3
 8008922:	2b64      	cmp	r3, #100	; 0x64
 8008924:	d901      	bls.n	800892a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8008926:	2303      	movs	r3, #3
 8008928:	e174      	b.n	8008c14 <HAL_RCC_OscConfig+0x78c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800892a:	4b76      	ldr	r3, [pc, #472]	; (8008b04 <HAL_RCC_OscConfig+0x67c>)
 800892c:	681a      	ldr	r2, [r3, #0]
 800892e:	2380      	movs	r3, #128	; 0x80
 8008930:	005b      	lsls	r3, r3, #1
 8008932:	4013      	ands	r3, r2
 8008934:	d0f0      	beq.n	8008918 <HAL_RCC_OscConfig+0x490>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	689a      	ldr	r2, [r3, #8]
 800893a:	2380      	movs	r3, #128	; 0x80
 800893c:	005b      	lsls	r3, r3, #1
 800893e:	429a      	cmp	r2, r3
 8008940:	d107      	bne.n	8008952 <HAL_RCC_OscConfig+0x4ca>
 8008942:	4b6d      	ldr	r3, [pc, #436]	; (8008af8 <HAL_RCC_OscConfig+0x670>)
 8008944:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008946:	4b6c      	ldr	r3, [pc, #432]	; (8008af8 <HAL_RCC_OscConfig+0x670>)
 8008948:	2180      	movs	r1, #128	; 0x80
 800894a:	0049      	lsls	r1, r1, #1
 800894c:	430a      	orrs	r2, r1
 800894e:	651a      	str	r2, [r3, #80]	; 0x50
 8008950:	e031      	b.n	80089b6 <HAL_RCC_OscConfig+0x52e>
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	689b      	ldr	r3, [r3, #8]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d10c      	bne.n	8008974 <HAL_RCC_OscConfig+0x4ec>
 800895a:	4b67      	ldr	r3, [pc, #412]	; (8008af8 <HAL_RCC_OscConfig+0x670>)
 800895c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800895e:	4b66      	ldr	r3, [pc, #408]	; (8008af8 <HAL_RCC_OscConfig+0x670>)
 8008960:	4967      	ldr	r1, [pc, #412]	; (8008b00 <HAL_RCC_OscConfig+0x678>)
 8008962:	400a      	ands	r2, r1
 8008964:	651a      	str	r2, [r3, #80]	; 0x50
 8008966:	4b64      	ldr	r3, [pc, #400]	; (8008af8 <HAL_RCC_OscConfig+0x670>)
 8008968:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800896a:	4b63      	ldr	r3, [pc, #396]	; (8008af8 <HAL_RCC_OscConfig+0x670>)
 800896c:	4966      	ldr	r1, [pc, #408]	; (8008b08 <HAL_RCC_OscConfig+0x680>)
 800896e:	400a      	ands	r2, r1
 8008970:	651a      	str	r2, [r3, #80]	; 0x50
 8008972:	e020      	b.n	80089b6 <HAL_RCC_OscConfig+0x52e>
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	689a      	ldr	r2, [r3, #8]
 8008978:	23a0      	movs	r3, #160	; 0xa0
 800897a:	00db      	lsls	r3, r3, #3
 800897c:	429a      	cmp	r2, r3
 800897e:	d10e      	bne.n	800899e <HAL_RCC_OscConfig+0x516>
 8008980:	4b5d      	ldr	r3, [pc, #372]	; (8008af8 <HAL_RCC_OscConfig+0x670>)
 8008982:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008984:	4b5c      	ldr	r3, [pc, #368]	; (8008af8 <HAL_RCC_OscConfig+0x670>)
 8008986:	2180      	movs	r1, #128	; 0x80
 8008988:	00c9      	lsls	r1, r1, #3
 800898a:	430a      	orrs	r2, r1
 800898c:	651a      	str	r2, [r3, #80]	; 0x50
 800898e:	4b5a      	ldr	r3, [pc, #360]	; (8008af8 <HAL_RCC_OscConfig+0x670>)
 8008990:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008992:	4b59      	ldr	r3, [pc, #356]	; (8008af8 <HAL_RCC_OscConfig+0x670>)
 8008994:	2180      	movs	r1, #128	; 0x80
 8008996:	0049      	lsls	r1, r1, #1
 8008998:	430a      	orrs	r2, r1
 800899a:	651a      	str	r2, [r3, #80]	; 0x50
 800899c:	e00b      	b.n	80089b6 <HAL_RCC_OscConfig+0x52e>
 800899e:	4b56      	ldr	r3, [pc, #344]	; (8008af8 <HAL_RCC_OscConfig+0x670>)
 80089a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80089a2:	4b55      	ldr	r3, [pc, #340]	; (8008af8 <HAL_RCC_OscConfig+0x670>)
 80089a4:	4956      	ldr	r1, [pc, #344]	; (8008b00 <HAL_RCC_OscConfig+0x678>)
 80089a6:	400a      	ands	r2, r1
 80089a8:	651a      	str	r2, [r3, #80]	; 0x50
 80089aa:	4b53      	ldr	r3, [pc, #332]	; (8008af8 <HAL_RCC_OscConfig+0x670>)
 80089ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80089ae:	4b52      	ldr	r3, [pc, #328]	; (8008af8 <HAL_RCC_OscConfig+0x670>)
 80089b0:	4955      	ldr	r1, [pc, #340]	; (8008b08 <HAL_RCC_OscConfig+0x680>)
 80089b2:	400a      	ands	r2, r1
 80089b4:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	689b      	ldr	r3, [r3, #8]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d015      	beq.n	80089ea <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80089be:	f7fe f995 	bl	8006cec <HAL_GetTick>
 80089c2:	0003      	movs	r3, r0
 80089c4:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80089c6:	e009      	b.n	80089dc <HAL_RCC_OscConfig+0x554>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80089c8:	f7fe f990 	bl	8006cec <HAL_GetTick>
 80089cc:	0002      	movs	r2, r0
 80089ce:	697b      	ldr	r3, [r7, #20]
 80089d0:	1ad3      	subs	r3, r2, r3
 80089d2:	4a4e      	ldr	r2, [pc, #312]	; (8008b0c <HAL_RCC_OscConfig+0x684>)
 80089d4:	4293      	cmp	r3, r2
 80089d6:	d901      	bls.n	80089dc <HAL_RCC_OscConfig+0x554>
        {
          return HAL_TIMEOUT;
 80089d8:	2303      	movs	r3, #3
 80089da:	e11b      	b.n	8008c14 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80089dc:	4b46      	ldr	r3, [pc, #280]	; (8008af8 <HAL_RCC_OscConfig+0x670>)
 80089de:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80089e0:	2380      	movs	r3, #128	; 0x80
 80089e2:	009b      	lsls	r3, r3, #2
 80089e4:	4013      	ands	r3, r2
 80089e6:	d0ef      	beq.n	80089c8 <HAL_RCC_OscConfig+0x540>
 80089e8:	e014      	b.n	8008a14 <HAL_RCC_OscConfig+0x58c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80089ea:	f7fe f97f 	bl	8006cec <HAL_GetTick>
 80089ee:	0003      	movs	r3, r0
 80089f0:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80089f2:	e009      	b.n	8008a08 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80089f4:	f7fe f97a 	bl	8006cec <HAL_GetTick>
 80089f8:	0002      	movs	r2, r0
 80089fa:	697b      	ldr	r3, [r7, #20]
 80089fc:	1ad3      	subs	r3, r2, r3
 80089fe:	4a43      	ldr	r2, [pc, #268]	; (8008b0c <HAL_RCC_OscConfig+0x684>)
 8008a00:	4293      	cmp	r3, r2
 8008a02:	d901      	bls.n	8008a08 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8008a04:	2303      	movs	r3, #3
 8008a06:	e105      	b.n	8008c14 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008a08:	4b3b      	ldr	r3, [pc, #236]	; (8008af8 <HAL_RCC_OscConfig+0x670>)
 8008a0a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008a0c:	2380      	movs	r3, #128	; 0x80
 8008a0e:	009b      	lsls	r3, r3, #2
 8008a10:	4013      	ands	r3, r2
 8008a12:	d1ef      	bne.n	80089f4 <HAL_RCC_OscConfig+0x56c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8008a14:	2323      	movs	r3, #35	; 0x23
 8008a16:	18fb      	adds	r3, r7, r3
 8008a18:	781b      	ldrb	r3, [r3, #0]
 8008a1a:	2b01      	cmp	r3, #1
 8008a1c:	d105      	bne.n	8008a2a <HAL_RCC_OscConfig+0x5a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008a1e:	4b36      	ldr	r3, [pc, #216]	; (8008af8 <HAL_RCC_OscConfig+0x670>)
 8008a20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008a22:	4b35      	ldr	r3, [pc, #212]	; (8008af8 <HAL_RCC_OscConfig+0x670>)
 8008a24:	493a      	ldr	r1, [pc, #232]	; (8008b10 <HAL_RCC_OscConfig+0x688>)
 8008a26:	400a      	ands	r2, r1
 8008a28:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	2220      	movs	r2, #32
 8008a30:	4013      	ands	r3, r2
 8008a32:	d049      	beq.n	8008ac8 <HAL_RCC_OscConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	699b      	ldr	r3, [r3, #24]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d026      	beq.n	8008a8a <HAL_RCC_OscConfig+0x602>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8008a3c:	4b2e      	ldr	r3, [pc, #184]	; (8008af8 <HAL_RCC_OscConfig+0x670>)
 8008a3e:	689a      	ldr	r2, [r3, #8]
 8008a40:	4b2d      	ldr	r3, [pc, #180]	; (8008af8 <HAL_RCC_OscConfig+0x670>)
 8008a42:	2101      	movs	r1, #1
 8008a44:	430a      	orrs	r2, r1
 8008a46:	609a      	str	r2, [r3, #8]
 8008a48:	4b2b      	ldr	r3, [pc, #172]	; (8008af8 <HAL_RCC_OscConfig+0x670>)
 8008a4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008a4c:	4b2a      	ldr	r3, [pc, #168]	; (8008af8 <HAL_RCC_OscConfig+0x670>)
 8008a4e:	2101      	movs	r1, #1
 8008a50:	430a      	orrs	r2, r1
 8008a52:	635a      	str	r2, [r3, #52]	; 0x34
 8008a54:	4b2f      	ldr	r3, [pc, #188]	; (8008b14 <HAL_RCC_OscConfig+0x68c>)
 8008a56:	6a1a      	ldr	r2, [r3, #32]
 8008a58:	4b2e      	ldr	r3, [pc, #184]	; (8008b14 <HAL_RCC_OscConfig+0x68c>)
 8008a5a:	2180      	movs	r1, #128	; 0x80
 8008a5c:	0189      	lsls	r1, r1, #6
 8008a5e:	430a      	orrs	r2, r1
 8008a60:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008a62:	f7fe f943 	bl	8006cec <HAL_GetTick>
 8008a66:	0003      	movs	r3, r0
 8008a68:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008a6a:	e008      	b.n	8008a7e <HAL_RCC_OscConfig+0x5f6>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008a6c:	f7fe f93e 	bl	8006cec <HAL_GetTick>
 8008a70:	0002      	movs	r2, r0
 8008a72:	697b      	ldr	r3, [r7, #20]
 8008a74:	1ad3      	subs	r3, r2, r3
 8008a76:	2b02      	cmp	r3, #2
 8008a78:	d901      	bls.n	8008a7e <HAL_RCC_OscConfig+0x5f6>
          {
            return HAL_TIMEOUT;
 8008a7a:	2303      	movs	r3, #3
 8008a7c:	e0ca      	b.n	8008c14 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008a7e:	4b1e      	ldr	r3, [pc, #120]	; (8008af8 <HAL_RCC_OscConfig+0x670>)
 8008a80:	689b      	ldr	r3, [r3, #8]
 8008a82:	2202      	movs	r2, #2
 8008a84:	4013      	ands	r3, r2
 8008a86:	d0f1      	beq.n	8008a6c <HAL_RCC_OscConfig+0x5e4>
 8008a88:	e01e      	b.n	8008ac8 <HAL_RCC_OscConfig+0x640>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8008a8a:	4b1b      	ldr	r3, [pc, #108]	; (8008af8 <HAL_RCC_OscConfig+0x670>)
 8008a8c:	689a      	ldr	r2, [r3, #8]
 8008a8e:	4b1a      	ldr	r3, [pc, #104]	; (8008af8 <HAL_RCC_OscConfig+0x670>)
 8008a90:	2101      	movs	r1, #1
 8008a92:	438a      	bics	r2, r1
 8008a94:	609a      	str	r2, [r3, #8]
 8008a96:	4b1f      	ldr	r3, [pc, #124]	; (8008b14 <HAL_RCC_OscConfig+0x68c>)
 8008a98:	6a1a      	ldr	r2, [r3, #32]
 8008a9a:	4b1e      	ldr	r3, [pc, #120]	; (8008b14 <HAL_RCC_OscConfig+0x68c>)
 8008a9c:	491e      	ldr	r1, [pc, #120]	; (8008b18 <HAL_RCC_OscConfig+0x690>)
 8008a9e:	400a      	ands	r2, r1
 8008aa0:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008aa2:	f7fe f923 	bl	8006cec <HAL_GetTick>
 8008aa6:	0003      	movs	r3, r0
 8008aa8:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008aaa:	e008      	b.n	8008abe <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008aac:	f7fe f91e 	bl	8006cec <HAL_GetTick>
 8008ab0:	0002      	movs	r2, r0
 8008ab2:	697b      	ldr	r3, [r7, #20]
 8008ab4:	1ad3      	subs	r3, r2, r3
 8008ab6:	2b02      	cmp	r3, #2
 8008ab8:	d901      	bls.n	8008abe <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 8008aba:	2303      	movs	r3, #3
 8008abc:	e0aa      	b.n	8008c14 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008abe:	4b0e      	ldr	r3, [pc, #56]	; (8008af8 <HAL_RCC_OscConfig+0x670>)
 8008ac0:	689b      	ldr	r3, [r3, #8]
 8008ac2:	2202      	movs	r2, #2
 8008ac4:	4013      	ands	r3, r2
 8008ac6:	d1f1      	bne.n	8008aac <HAL_RCC_OscConfig+0x624>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d100      	bne.n	8008ad2 <HAL_RCC_OscConfig+0x64a>
 8008ad0:	e09f      	b.n	8008c12 <HAL_RCC_OscConfig+0x78a>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008ad2:	69fb      	ldr	r3, [r7, #28]
 8008ad4:	2b0c      	cmp	r3, #12
 8008ad6:	d100      	bne.n	8008ada <HAL_RCC_OscConfig+0x652>
 8008ad8:	e078      	b.n	8008bcc <HAL_RCC_OscConfig+0x744>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ade:	2b02      	cmp	r3, #2
 8008ae0:	d159      	bne.n	8008b96 <HAL_RCC_OscConfig+0x70e>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008ae2:	4b05      	ldr	r3, [pc, #20]	; (8008af8 <HAL_RCC_OscConfig+0x670>)
 8008ae4:	681a      	ldr	r2, [r3, #0]
 8008ae6:	4b04      	ldr	r3, [pc, #16]	; (8008af8 <HAL_RCC_OscConfig+0x670>)
 8008ae8:	490c      	ldr	r1, [pc, #48]	; (8008b1c <HAL_RCC_OscConfig+0x694>)
 8008aea:	400a      	ands	r2, r1
 8008aec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008aee:	f7fe f8fd 	bl	8006cec <HAL_GetTick>
 8008af2:	0003      	movs	r3, r0
 8008af4:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8008af6:	e01c      	b.n	8008b32 <HAL_RCC_OscConfig+0x6aa>
 8008af8:	40021000 	.word	0x40021000
 8008afc:	ffff1fff 	.word	0xffff1fff
 8008b00:	fffffeff 	.word	0xfffffeff
 8008b04:	40007000 	.word	0x40007000
 8008b08:	fffffbff 	.word	0xfffffbff
 8008b0c:	00001388 	.word	0x00001388
 8008b10:	efffffff 	.word	0xefffffff
 8008b14:	40010000 	.word	0x40010000
 8008b18:	ffffdfff 	.word	0xffffdfff
 8008b1c:	feffffff 	.word	0xfeffffff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008b20:	f7fe f8e4 	bl	8006cec <HAL_GetTick>
 8008b24:	0002      	movs	r2, r0
 8008b26:	697b      	ldr	r3, [r7, #20]
 8008b28:	1ad3      	subs	r3, r2, r3
 8008b2a:	2b02      	cmp	r3, #2
 8008b2c:	d901      	bls.n	8008b32 <HAL_RCC_OscConfig+0x6aa>
          {
            return HAL_TIMEOUT;
 8008b2e:	2303      	movs	r3, #3
 8008b30:	e070      	b.n	8008c14 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8008b32:	4b3a      	ldr	r3, [pc, #232]	; (8008c1c <HAL_RCC_OscConfig+0x794>)
 8008b34:	681a      	ldr	r2, [r3, #0]
 8008b36:	2380      	movs	r3, #128	; 0x80
 8008b38:	049b      	lsls	r3, r3, #18
 8008b3a:	4013      	ands	r3, r2
 8008b3c:	d1f0      	bne.n	8008b20 <HAL_RCC_OscConfig+0x698>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008b3e:	4b37      	ldr	r3, [pc, #220]	; (8008c1c <HAL_RCC_OscConfig+0x794>)
 8008b40:	68db      	ldr	r3, [r3, #12]
 8008b42:	4a37      	ldr	r2, [pc, #220]	; (8008c20 <HAL_RCC_OscConfig+0x798>)
 8008b44:	4013      	ands	r3, r2
 8008b46:	0019      	movs	r1, r3
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b50:	431a      	orrs	r2, r3
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b56:	431a      	orrs	r2, r3
 8008b58:	4b30      	ldr	r3, [pc, #192]	; (8008c1c <HAL_RCC_OscConfig+0x794>)
 8008b5a:	430a      	orrs	r2, r1
 8008b5c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008b5e:	4b2f      	ldr	r3, [pc, #188]	; (8008c1c <HAL_RCC_OscConfig+0x794>)
 8008b60:	681a      	ldr	r2, [r3, #0]
 8008b62:	4b2e      	ldr	r3, [pc, #184]	; (8008c1c <HAL_RCC_OscConfig+0x794>)
 8008b64:	2180      	movs	r1, #128	; 0x80
 8008b66:	0449      	lsls	r1, r1, #17
 8008b68:	430a      	orrs	r2, r1
 8008b6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008b6c:	f7fe f8be 	bl	8006cec <HAL_GetTick>
 8008b70:	0003      	movs	r3, r0
 8008b72:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8008b74:	e008      	b.n	8008b88 <HAL_RCC_OscConfig+0x700>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008b76:	f7fe f8b9 	bl	8006cec <HAL_GetTick>
 8008b7a:	0002      	movs	r2, r0
 8008b7c:	697b      	ldr	r3, [r7, #20]
 8008b7e:	1ad3      	subs	r3, r2, r3
 8008b80:	2b02      	cmp	r3, #2
 8008b82:	d901      	bls.n	8008b88 <HAL_RCC_OscConfig+0x700>
          {
            return HAL_TIMEOUT;
 8008b84:	2303      	movs	r3, #3
 8008b86:	e045      	b.n	8008c14 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8008b88:	4b24      	ldr	r3, [pc, #144]	; (8008c1c <HAL_RCC_OscConfig+0x794>)
 8008b8a:	681a      	ldr	r2, [r3, #0]
 8008b8c:	2380      	movs	r3, #128	; 0x80
 8008b8e:	049b      	lsls	r3, r3, #18
 8008b90:	4013      	ands	r3, r2
 8008b92:	d0f0      	beq.n	8008b76 <HAL_RCC_OscConfig+0x6ee>
 8008b94:	e03d      	b.n	8008c12 <HAL_RCC_OscConfig+0x78a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008b96:	4b21      	ldr	r3, [pc, #132]	; (8008c1c <HAL_RCC_OscConfig+0x794>)
 8008b98:	681a      	ldr	r2, [r3, #0]
 8008b9a:	4b20      	ldr	r3, [pc, #128]	; (8008c1c <HAL_RCC_OscConfig+0x794>)
 8008b9c:	4921      	ldr	r1, [pc, #132]	; (8008c24 <HAL_RCC_OscConfig+0x79c>)
 8008b9e:	400a      	ands	r2, r1
 8008ba0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008ba2:	f7fe f8a3 	bl	8006cec <HAL_GetTick>
 8008ba6:	0003      	movs	r3, r0
 8008ba8:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8008baa:	e008      	b.n	8008bbe <HAL_RCC_OscConfig+0x736>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008bac:	f7fe f89e 	bl	8006cec <HAL_GetTick>
 8008bb0:	0002      	movs	r2, r0
 8008bb2:	697b      	ldr	r3, [r7, #20]
 8008bb4:	1ad3      	subs	r3, r2, r3
 8008bb6:	2b02      	cmp	r3, #2
 8008bb8:	d901      	bls.n	8008bbe <HAL_RCC_OscConfig+0x736>
          {
            return HAL_TIMEOUT;
 8008bba:	2303      	movs	r3, #3
 8008bbc:	e02a      	b.n	8008c14 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8008bbe:	4b17      	ldr	r3, [pc, #92]	; (8008c1c <HAL_RCC_OscConfig+0x794>)
 8008bc0:	681a      	ldr	r2, [r3, #0]
 8008bc2:	2380      	movs	r3, #128	; 0x80
 8008bc4:	049b      	lsls	r3, r3, #18
 8008bc6:	4013      	ands	r3, r2
 8008bc8:	d1f0      	bne.n	8008bac <HAL_RCC_OscConfig+0x724>
 8008bca:	e022      	b.n	8008c12 <HAL_RCC_OscConfig+0x78a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bd0:	2b01      	cmp	r3, #1
 8008bd2:	d101      	bne.n	8008bd8 <HAL_RCC_OscConfig+0x750>
      {
        return HAL_ERROR;
 8008bd4:	2301      	movs	r3, #1
 8008bd6:	e01d      	b.n	8008c14 <HAL_RCC_OscConfig+0x78c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8008bd8:	4b10      	ldr	r3, [pc, #64]	; (8008c1c <HAL_RCC_OscConfig+0x794>)
 8008bda:	68db      	ldr	r3, [r3, #12]
 8008bdc:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008bde:	69ba      	ldr	r2, [r7, #24]
 8008be0:	2380      	movs	r3, #128	; 0x80
 8008be2:	025b      	lsls	r3, r3, #9
 8008be4:	401a      	ands	r2, r3
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bea:	429a      	cmp	r2, r3
 8008bec:	d10f      	bne.n	8008c0e <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8008bee:	69ba      	ldr	r2, [r7, #24]
 8008bf0:	23f0      	movs	r3, #240	; 0xf0
 8008bf2:	039b      	lsls	r3, r3, #14
 8008bf4:	401a      	ands	r2, r3
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008bfa:	429a      	cmp	r2, r3
 8008bfc:	d107      	bne.n	8008c0e <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8008bfe:	69ba      	ldr	r2, [r7, #24]
 8008c00:	23c0      	movs	r3, #192	; 0xc0
 8008c02:	041b      	lsls	r3, r3, #16
 8008c04:	401a      	ands	r2, r3
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8008c0a:	429a      	cmp	r2, r3
 8008c0c:	d001      	beq.n	8008c12 <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_ERROR;
 8008c0e:	2301      	movs	r3, #1
 8008c10:	e000      	b.n	8008c14 <HAL_RCC_OscConfig+0x78c>
        }
      }
    }
  }

  return HAL_OK;
 8008c12:	2300      	movs	r3, #0
}
 8008c14:	0018      	movs	r0, r3
 8008c16:	46bd      	mov	sp, r7
 8008c18:	b00a      	add	sp, #40	; 0x28
 8008c1a:	bdb0      	pop	{r4, r5, r7, pc}
 8008c1c:	40021000 	.word	0x40021000
 8008c20:	ff02ffff 	.word	0xff02ffff
 8008c24:	feffffff 	.word	0xfeffffff

08008c28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008c28:	b5b0      	push	{r4, r5, r7, lr}
 8008c2a:	b084      	sub	sp, #16
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
 8008c30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d101      	bne.n	8008c3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008c38:	2301      	movs	r3, #1
 8008c3a:	e10d      	b.n	8008e58 <HAL_RCC_ClockConfig+0x230>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008c3c:	4b88      	ldr	r3, [pc, #544]	; (8008e60 <HAL_RCC_ClockConfig+0x238>)
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	2201      	movs	r2, #1
 8008c42:	4013      	ands	r3, r2
 8008c44:	683a      	ldr	r2, [r7, #0]
 8008c46:	429a      	cmp	r2, r3
 8008c48:	d911      	bls.n	8008c6e <HAL_RCC_ClockConfig+0x46>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008c4a:	4b85      	ldr	r3, [pc, #532]	; (8008e60 <HAL_RCC_ClockConfig+0x238>)
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	2201      	movs	r2, #1
 8008c50:	4393      	bics	r3, r2
 8008c52:	0019      	movs	r1, r3
 8008c54:	4b82      	ldr	r3, [pc, #520]	; (8008e60 <HAL_RCC_ClockConfig+0x238>)
 8008c56:	683a      	ldr	r2, [r7, #0]
 8008c58:	430a      	orrs	r2, r1
 8008c5a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008c5c:	4b80      	ldr	r3, [pc, #512]	; (8008e60 <HAL_RCC_ClockConfig+0x238>)
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	2201      	movs	r2, #1
 8008c62:	4013      	ands	r3, r2
 8008c64:	683a      	ldr	r2, [r7, #0]
 8008c66:	429a      	cmp	r2, r3
 8008c68:	d001      	beq.n	8008c6e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8008c6a:	2301      	movs	r3, #1
 8008c6c:	e0f4      	b.n	8008e58 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	2202      	movs	r2, #2
 8008c74:	4013      	ands	r3, r2
 8008c76:	d009      	beq.n	8008c8c <HAL_RCC_ClockConfig+0x64>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008c78:	4b7a      	ldr	r3, [pc, #488]	; (8008e64 <HAL_RCC_ClockConfig+0x23c>)
 8008c7a:	68db      	ldr	r3, [r3, #12]
 8008c7c:	22f0      	movs	r2, #240	; 0xf0
 8008c7e:	4393      	bics	r3, r2
 8008c80:	0019      	movs	r1, r3
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	689a      	ldr	r2, [r3, #8]
 8008c86:	4b77      	ldr	r3, [pc, #476]	; (8008e64 <HAL_RCC_ClockConfig+0x23c>)
 8008c88:	430a      	orrs	r2, r1
 8008c8a:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	2201      	movs	r2, #1
 8008c92:	4013      	ands	r3, r2
 8008c94:	d100      	bne.n	8008c98 <HAL_RCC_ClockConfig+0x70>
 8008c96:	e089      	b.n	8008dac <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	685b      	ldr	r3, [r3, #4]
 8008c9c:	2b02      	cmp	r3, #2
 8008c9e:	d107      	bne.n	8008cb0 <HAL_RCC_ClockConfig+0x88>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008ca0:	4b70      	ldr	r3, [pc, #448]	; (8008e64 <HAL_RCC_ClockConfig+0x23c>)
 8008ca2:	681a      	ldr	r2, [r3, #0]
 8008ca4:	2380      	movs	r3, #128	; 0x80
 8008ca6:	029b      	lsls	r3, r3, #10
 8008ca8:	4013      	ands	r3, r2
 8008caa:	d120      	bne.n	8008cee <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8008cac:	2301      	movs	r3, #1
 8008cae:	e0d3      	b.n	8008e58 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	685b      	ldr	r3, [r3, #4]
 8008cb4:	2b03      	cmp	r3, #3
 8008cb6:	d107      	bne.n	8008cc8 <HAL_RCC_ClockConfig+0xa0>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008cb8:	4b6a      	ldr	r3, [pc, #424]	; (8008e64 <HAL_RCC_ClockConfig+0x23c>)
 8008cba:	681a      	ldr	r2, [r3, #0]
 8008cbc:	2380      	movs	r3, #128	; 0x80
 8008cbe:	049b      	lsls	r3, r3, #18
 8008cc0:	4013      	ands	r3, r2
 8008cc2:	d114      	bne.n	8008cee <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8008cc4:	2301      	movs	r3, #1
 8008cc6:	e0c7      	b.n	8008e58 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	685b      	ldr	r3, [r3, #4]
 8008ccc:	2b01      	cmp	r3, #1
 8008cce:	d106      	bne.n	8008cde <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008cd0:	4b64      	ldr	r3, [pc, #400]	; (8008e64 <HAL_RCC_ClockConfig+0x23c>)
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	2204      	movs	r2, #4
 8008cd6:	4013      	ands	r3, r2
 8008cd8:	d109      	bne.n	8008cee <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8008cda:	2301      	movs	r3, #1
 8008cdc:	e0bc      	b.n	8008e58 <HAL_RCC_ClockConfig+0x230>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8008cde:	4b61      	ldr	r3, [pc, #388]	; (8008e64 <HAL_RCC_ClockConfig+0x23c>)
 8008ce0:	681a      	ldr	r2, [r3, #0]
 8008ce2:	2380      	movs	r3, #128	; 0x80
 8008ce4:	009b      	lsls	r3, r3, #2
 8008ce6:	4013      	ands	r3, r2
 8008ce8:	d101      	bne.n	8008cee <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8008cea:	2301      	movs	r3, #1
 8008cec:	e0b4      	b.n	8008e58 <HAL_RCC_ClockConfig+0x230>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008cee:	4b5d      	ldr	r3, [pc, #372]	; (8008e64 <HAL_RCC_ClockConfig+0x23c>)
 8008cf0:	68db      	ldr	r3, [r3, #12]
 8008cf2:	2203      	movs	r2, #3
 8008cf4:	4393      	bics	r3, r2
 8008cf6:	0019      	movs	r1, r3
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	685a      	ldr	r2, [r3, #4]
 8008cfc:	4b59      	ldr	r3, [pc, #356]	; (8008e64 <HAL_RCC_ClockConfig+0x23c>)
 8008cfe:	430a      	orrs	r2, r1
 8008d00:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008d02:	f7fd fff3 	bl	8006cec <HAL_GetTick>
 8008d06:	0003      	movs	r3, r0
 8008d08:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	685b      	ldr	r3, [r3, #4]
 8008d0e:	2b02      	cmp	r3, #2
 8008d10:	d111      	bne.n	8008d36 <HAL_RCC_ClockConfig+0x10e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8008d12:	e009      	b.n	8008d28 <HAL_RCC_ClockConfig+0x100>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008d14:	f7fd ffea 	bl	8006cec <HAL_GetTick>
 8008d18:	0002      	movs	r2, r0
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	1ad3      	subs	r3, r2, r3
 8008d1e:	4a52      	ldr	r2, [pc, #328]	; (8008e68 <HAL_RCC_ClockConfig+0x240>)
 8008d20:	4293      	cmp	r3, r2
 8008d22:	d901      	bls.n	8008d28 <HAL_RCC_ClockConfig+0x100>
        {
          return HAL_TIMEOUT;
 8008d24:	2303      	movs	r3, #3
 8008d26:	e097      	b.n	8008e58 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8008d28:	4b4e      	ldr	r3, [pc, #312]	; (8008e64 <HAL_RCC_ClockConfig+0x23c>)
 8008d2a:	68db      	ldr	r3, [r3, #12]
 8008d2c:	220c      	movs	r2, #12
 8008d2e:	4013      	ands	r3, r2
 8008d30:	2b08      	cmp	r3, #8
 8008d32:	d1ef      	bne.n	8008d14 <HAL_RCC_ClockConfig+0xec>
 8008d34:	e03a      	b.n	8008dac <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	685b      	ldr	r3, [r3, #4]
 8008d3a:	2b03      	cmp	r3, #3
 8008d3c:	d111      	bne.n	8008d62 <HAL_RCC_ClockConfig+0x13a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008d3e:	e009      	b.n	8008d54 <HAL_RCC_ClockConfig+0x12c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008d40:	f7fd ffd4 	bl	8006cec <HAL_GetTick>
 8008d44:	0002      	movs	r2, r0
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	1ad3      	subs	r3, r2, r3
 8008d4a:	4a47      	ldr	r2, [pc, #284]	; (8008e68 <HAL_RCC_ClockConfig+0x240>)
 8008d4c:	4293      	cmp	r3, r2
 8008d4e:	d901      	bls.n	8008d54 <HAL_RCC_ClockConfig+0x12c>
        {
          return HAL_TIMEOUT;
 8008d50:	2303      	movs	r3, #3
 8008d52:	e081      	b.n	8008e58 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008d54:	4b43      	ldr	r3, [pc, #268]	; (8008e64 <HAL_RCC_ClockConfig+0x23c>)
 8008d56:	68db      	ldr	r3, [r3, #12]
 8008d58:	220c      	movs	r2, #12
 8008d5a:	4013      	ands	r3, r2
 8008d5c:	2b0c      	cmp	r3, #12
 8008d5e:	d1ef      	bne.n	8008d40 <HAL_RCC_ClockConfig+0x118>
 8008d60:	e024      	b.n	8008dac <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	685b      	ldr	r3, [r3, #4]
 8008d66:	2b01      	cmp	r3, #1
 8008d68:	d11b      	bne.n	8008da2 <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8008d6a:	e009      	b.n	8008d80 <HAL_RCC_ClockConfig+0x158>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008d6c:	f7fd ffbe 	bl	8006cec <HAL_GetTick>
 8008d70:	0002      	movs	r2, r0
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	1ad3      	subs	r3, r2, r3
 8008d76:	4a3c      	ldr	r2, [pc, #240]	; (8008e68 <HAL_RCC_ClockConfig+0x240>)
 8008d78:	4293      	cmp	r3, r2
 8008d7a:	d901      	bls.n	8008d80 <HAL_RCC_ClockConfig+0x158>
        {
          return HAL_TIMEOUT;
 8008d7c:	2303      	movs	r3, #3
 8008d7e:	e06b      	b.n	8008e58 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8008d80:	4b38      	ldr	r3, [pc, #224]	; (8008e64 <HAL_RCC_ClockConfig+0x23c>)
 8008d82:	68db      	ldr	r3, [r3, #12]
 8008d84:	220c      	movs	r2, #12
 8008d86:	4013      	ands	r3, r2
 8008d88:	2b04      	cmp	r3, #4
 8008d8a:	d1ef      	bne.n	8008d6c <HAL_RCC_ClockConfig+0x144>
 8008d8c:	e00e      	b.n	8008dac <HAL_RCC_ClockConfig+0x184>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008d8e:	f7fd ffad 	bl	8006cec <HAL_GetTick>
 8008d92:	0002      	movs	r2, r0
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	1ad3      	subs	r3, r2, r3
 8008d98:	4a33      	ldr	r2, [pc, #204]	; (8008e68 <HAL_RCC_ClockConfig+0x240>)
 8008d9a:	4293      	cmp	r3, r2
 8008d9c:	d901      	bls.n	8008da2 <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 8008d9e:	2303      	movs	r3, #3
 8008da0:	e05a      	b.n	8008e58 <HAL_RCC_ClockConfig+0x230>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8008da2:	4b30      	ldr	r3, [pc, #192]	; (8008e64 <HAL_RCC_ClockConfig+0x23c>)
 8008da4:	68db      	ldr	r3, [r3, #12]
 8008da6:	220c      	movs	r2, #12
 8008da8:	4013      	ands	r3, r2
 8008daa:	d1f0      	bne.n	8008d8e <HAL_RCC_ClockConfig+0x166>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008dac:	4b2c      	ldr	r3, [pc, #176]	; (8008e60 <HAL_RCC_ClockConfig+0x238>)
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	2201      	movs	r2, #1
 8008db2:	4013      	ands	r3, r2
 8008db4:	683a      	ldr	r2, [r7, #0]
 8008db6:	429a      	cmp	r2, r3
 8008db8:	d211      	bcs.n	8008dde <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008dba:	4b29      	ldr	r3, [pc, #164]	; (8008e60 <HAL_RCC_ClockConfig+0x238>)
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	2201      	movs	r2, #1
 8008dc0:	4393      	bics	r3, r2
 8008dc2:	0019      	movs	r1, r3
 8008dc4:	4b26      	ldr	r3, [pc, #152]	; (8008e60 <HAL_RCC_ClockConfig+0x238>)
 8008dc6:	683a      	ldr	r2, [r7, #0]
 8008dc8:	430a      	orrs	r2, r1
 8008dca:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008dcc:	4b24      	ldr	r3, [pc, #144]	; (8008e60 <HAL_RCC_ClockConfig+0x238>)
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	2201      	movs	r2, #1
 8008dd2:	4013      	ands	r3, r2
 8008dd4:	683a      	ldr	r2, [r7, #0]
 8008dd6:	429a      	cmp	r2, r3
 8008dd8:	d001      	beq.n	8008dde <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 8008dda:	2301      	movs	r3, #1
 8008ddc:	e03c      	b.n	8008e58 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	2204      	movs	r2, #4
 8008de4:	4013      	ands	r3, r2
 8008de6:	d009      	beq.n	8008dfc <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008de8:	4b1e      	ldr	r3, [pc, #120]	; (8008e64 <HAL_RCC_ClockConfig+0x23c>)
 8008dea:	68db      	ldr	r3, [r3, #12]
 8008dec:	4a1f      	ldr	r2, [pc, #124]	; (8008e6c <HAL_RCC_ClockConfig+0x244>)
 8008dee:	4013      	ands	r3, r2
 8008df0:	0019      	movs	r1, r3
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	68da      	ldr	r2, [r3, #12]
 8008df6:	4b1b      	ldr	r3, [pc, #108]	; (8008e64 <HAL_RCC_ClockConfig+0x23c>)
 8008df8:	430a      	orrs	r2, r1
 8008dfa:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	2208      	movs	r2, #8
 8008e02:	4013      	ands	r3, r2
 8008e04:	d00a      	beq.n	8008e1c <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8008e06:	4b17      	ldr	r3, [pc, #92]	; (8008e64 <HAL_RCC_ClockConfig+0x23c>)
 8008e08:	68db      	ldr	r3, [r3, #12]
 8008e0a:	4a19      	ldr	r2, [pc, #100]	; (8008e70 <HAL_RCC_ClockConfig+0x248>)
 8008e0c:	4013      	ands	r3, r2
 8008e0e:	0019      	movs	r1, r3
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	691b      	ldr	r3, [r3, #16]
 8008e14:	00da      	lsls	r2, r3, #3
 8008e16:	4b13      	ldr	r3, [pc, #76]	; (8008e64 <HAL_RCC_ClockConfig+0x23c>)
 8008e18:	430a      	orrs	r2, r1
 8008e1a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008e1c:	f000 f82e 	bl	8008e7c <HAL_RCC_GetSysClockFreq>
 8008e20:	0001      	movs	r1, r0
 8008e22:	4b10      	ldr	r3, [pc, #64]	; (8008e64 <HAL_RCC_ClockConfig+0x23c>)
 8008e24:	68db      	ldr	r3, [r3, #12]
 8008e26:	091b      	lsrs	r3, r3, #4
 8008e28:	220f      	movs	r2, #15
 8008e2a:	4013      	ands	r3, r2
 8008e2c:	4a11      	ldr	r2, [pc, #68]	; (8008e74 <HAL_RCC_ClockConfig+0x24c>)
 8008e2e:	5cd3      	ldrb	r3, [r2, r3]
 8008e30:	000a      	movs	r2, r1
 8008e32:	40da      	lsrs	r2, r3
 8008e34:	4b10      	ldr	r3, [pc, #64]	; (8008e78 <HAL_RCC_ClockConfig+0x250>)
 8008e36:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 8008e38:	250b      	movs	r5, #11
 8008e3a:	197c      	adds	r4, r7, r5
 8008e3c:	2000      	movs	r0, #0
 8008e3e:	f7fd ff0f 	bl	8006c60 <HAL_InitTick>
 8008e42:	0003      	movs	r3, r0
 8008e44:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8008e46:	197b      	adds	r3, r7, r5
 8008e48:	781b      	ldrb	r3, [r3, #0]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d003      	beq.n	8008e56 <HAL_RCC_ClockConfig+0x22e>
  {
    return status;
 8008e4e:	230b      	movs	r3, #11
 8008e50:	18fb      	adds	r3, r7, r3
 8008e52:	781b      	ldrb	r3, [r3, #0]
 8008e54:	e000      	b.n	8008e58 <HAL_RCC_ClockConfig+0x230>
  }

  return HAL_OK;
 8008e56:	2300      	movs	r3, #0
}
 8008e58:	0018      	movs	r0, r3
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	b004      	add	sp, #16
 8008e5e:	bdb0      	pop	{r4, r5, r7, pc}
 8008e60:	40022000 	.word	0x40022000
 8008e64:	40021000 	.word	0x40021000
 8008e68:	00001388 	.word	0x00001388
 8008e6c:	fffff8ff 	.word	0xfffff8ff
 8008e70:	ffffc7ff 	.word	0xffffc7ff
 8008e74:	0800cd4c 	.word	0x0800cd4c
 8008e78:	20000010 	.word	0x20000010

08008e7c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b086      	sub	sp, #24
 8008e80:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8008e82:	4b3b      	ldr	r3, [pc, #236]	; (8008f70 <HAL_RCC_GetSysClockFreq+0xf4>)
 8008e84:	68db      	ldr	r3, [r3, #12]
 8008e86:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	220c      	movs	r2, #12
 8008e8c:	4013      	ands	r3, r2
 8008e8e:	2b08      	cmp	r3, #8
 8008e90:	d00e      	beq.n	8008eb0 <HAL_RCC_GetSysClockFreq+0x34>
 8008e92:	2b0c      	cmp	r3, #12
 8008e94:	d00f      	beq.n	8008eb6 <HAL_RCC_GetSysClockFreq+0x3a>
 8008e96:	2b04      	cmp	r3, #4
 8008e98:	d157      	bne.n	8008f4a <HAL_RCC_GetSysClockFreq+0xce>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8008e9a:	4b35      	ldr	r3, [pc, #212]	; (8008f70 <HAL_RCC_GetSysClockFreq+0xf4>)
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	2210      	movs	r2, #16
 8008ea0:	4013      	ands	r3, r2
 8008ea2:	d002      	beq.n	8008eaa <HAL_RCC_GetSysClockFreq+0x2e>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8008ea4:	4b33      	ldr	r3, [pc, #204]	; (8008f74 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008ea6:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8008ea8:	e05d      	b.n	8008f66 <HAL_RCC_GetSysClockFreq+0xea>
        sysclockfreq =  HSI_VALUE;
 8008eaa:	4b33      	ldr	r3, [pc, #204]	; (8008f78 <HAL_RCC_GetSysClockFreq+0xfc>)
 8008eac:	613b      	str	r3, [r7, #16]
      break;
 8008eae:	e05a      	b.n	8008f66 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8008eb0:	4b32      	ldr	r3, [pc, #200]	; (8008f7c <HAL_RCC_GetSysClockFreq+0x100>)
 8008eb2:	613b      	str	r3, [r7, #16]
      break;
 8008eb4:	e057      	b.n	8008f66 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	0c9b      	lsrs	r3, r3, #18
 8008eba:	220f      	movs	r2, #15
 8008ebc:	4013      	ands	r3, r2
 8008ebe:	4a30      	ldr	r2, [pc, #192]	; (8008f80 <HAL_RCC_GetSysClockFreq+0x104>)
 8008ec0:	5cd3      	ldrb	r3, [r2, r3]
 8008ec2:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	0d9b      	lsrs	r3, r3, #22
 8008ec8:	2203      	movs	r2, #3
 8008eca:	4013      	ands	r3, r2
 8008ecc:	3301      	adds	r3, #1
 8008ece:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008ed0:	4b27      	ldr	r3, [pc, #156]	; (8008f70 <HAL_RCC_GetSysClockFreq+0xf4>)
 8008ed2:	68da      	ldr	r2, [r3, #12]
 8008ed4:	2380      	movs	r3, #128	; 0x80
 8008ed6:	025b      	lsls	r3, r3, #9
 8008ed8:	4013      	ands	r3, r2
 8008eda:	d00f      	beq.n	8008efc <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 8008edc:	68b9      	ldr	r1, [r7, #8]
 8008ede:	000a      	movs	r2, r1
 8008ee0:	0152      	lsls	r2, r2, #5
 8008ee2:	1a52      	subs	r2, r2, r1
 8008ee4:	0193      	lsls	r3, r2, #6
 8008ee6:	1a9b      	subs	r3, r3, r2
 8008ee8:	00db      	lsls	r3, r3, #3
 8008eea:	185b      	adds	r3, r3, r1
 8008eec:	025b      	lsls	r3, r3, #9
 8008eee:	6879      	ldr	r1, [r7, #4]
 8008ef0:	0018      	movs	r0, r3
 8008ef2:	f7f7 f911 	bl	8000118 <__udivsi3>
 8008ef6:	0003      	movs	r3, r0
 8008ef8:	617b      	str	r3, [r7, #20]
 8008efa:	e023      	b.n	8008f44 <HAL_RCC_GetSysClockFreq+0xc8>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8008efc:	4b1c      	ldr	r3, [pc, #112]	; (8008f70 <HAL_RCC_GetSysClockFreq+0xf4>)
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	2210      	movs	r2, #16
 8008f02:	4013      	ands	r3, r2
 8008f04:	d00f      	beq.n	8008f26 <HAL_RCC_GetSysClockFreq+0xaa>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8008f06:	68b9      	ldr	r1, [r7, #8]
 8008f08:	000a      	movs	r2, r1
 8008f0a:	0152      	lsls	r2, r2, #5
 8008f0c:	1a52      	subs	r2, r2, r1
 8008f0e:	0193      	lsls	r3, r2, #6
 8008f10:	1a9b      	subs	r3, r3, r2
 8008f12:	00db      	lsls	r3, r3, #3
 8008f14:	185b      	adds	r3, r3, r1
 8008f16:	021b      	lsls	r3, r3, #8
 8008f18:	6879      	ldr	r1, [r7, #4]
 8008f1a:	0018      	movs	r0, r3
 8008f1c:	f7f7 f8fc 	bl	8000118 <__udivsi3>
 8008f20:	0003      	movs	r3, r0
 8008f22:	617b      	str	r3, [r7, #20]
 8008f24:	e00e      	b.n	8008f44 <HAL_RCC_GetSysClockFreq+0xc8>
        }
        else
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 8008f26:	68b9      	ldr	r1, [r7, #8]
 8008f28:	000a      	movs	r2, r1
 8008f2a:	0152      	lsls	r2, r2, #5
 8008f2c:	1a52      	subs	r2, r2, r1
 8008f2e:	0193      	lsls	r3, r2, #6
 8008f30:	1a9b      	subs	r3, r3, r2
 8008f32:	00db      	lsls	r3, r3, #3
 8008f34:	185b      	adds	r3, r3, r1
 8008f36:	029b      	lsls	r3, r3, #10
 8008f38:	6879      	ldr	r1, [r7, #4]
 8008f3a:	0018      	movs	r0, r3
 8008f3c:	f7f7 f8ec 	bl	8000118 <__udivsi3>
 8008f40:	0003      	movs	r3, r0
 8008f42:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8008f44:	697b      	ldr	r3, [r7, #20]
 8008f46:	613b      	str	r3, [r7, #16]
      break;
 8008f48:	e00d      	b.n	8008f66 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8008f4a:	4b09      	ldr	r3, [pc, #36]	; (8008f70 <HAL_RCC_GetSysClockFreq+0xf4>)
 8008f4c:	685b      	ldr	r3, [r3, #4]
 8008f4e:	0b5b      	lsrs	r3, r3, #13
 8008f50:	2207      	movs	r2, #7
 8008f52:	4013      	ands	r3, r2
 8008f54:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8008f56:	683b      	ldr	r3, [r7, #0]
 8008f58:	3301      	adds	r3, #1
 8008f5a:	2280      	movs	r2, #128	; 0x80
 8008f5c:	0212      	lsls	r2, r2, #8
 8008f5e:	409a      	lsls	r2, r3
 8008f60:	0013      	movs	r3, r2
 8008f62:	613b      	str	r3, [r7, #16]
      break;
 8008f64:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8008f66:	693b      	ldr	r3, [r7, #16]
}
 8008f68:	0018      	movs	r0, r3
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	b006      	add	sp, #24
 8008f6e:	bd80      	pop	{r7, pc}
 8008f70:	40021000 	.word	0x40021000
 8008f74:	003d0900 	.word	0x003d0900
 8008f78:	00f42400 	.word	0x00f42400
 8008f7c:	007a1200 	.word	0x007a1200
 8008f80:	0800cd5c 	.word	0x0800cd5c

08008f84 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008f84:	b580      	push	{r7, lr}
 8008f86:	b086      	sub	sp, #24
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	2220      	movs	r2, #32
 8008f92:	4013      	ands	r3, r2
 8008f94:	d106      	bne.n	8008fa4 <HAL_RCCEx_PeriphCLKConfig+0x20>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681a      	ldr	r2, [r3, #0]
 8008f9a:	2380      	movs	r3, #128	; 0x80
 8008f9c:	011b      	lsls	r3, r3, #4
 8008f9e:	4013      	ands	r3, r2
 8008fa0:	d100      	bne.n	8008fa4 <HAL_RCCEx_PeriphCLKConfig+0x20>
 8008fa2:	e0dd      	b.n	8009160 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 8008fa4:	2317      	movs	r3, #23
 8008fa6:	18fb      	adds	r3, r7, r3
 8008fa8:	2200      	movs	r2, #0
 8008faa:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008fac:	4ba4      	ldr	r3, [pc, #656]	; (8009240 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8008fae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008fb0:	2380      	movs	r3, #128	; 0x80
 8008fb2:	055b      	lsls	r3, r3, #21
 8008fb4:	4013      	ands	r3, r2
 8008fb6:	d10a      	bne.n	8008fce <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008fb8:	4ba1      	ldr	r3, [pc, #644]	; (8009240 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8008fba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008fbc:	4ba0      	ldr	r3, [pc, #640]	; (8009240 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8008fbe:	2180      	movs	r1, #128	; 0x80
 8008fc0:	0549      	lsls	r1, r1, #21
 8008fc2:	430a      	orrs	r2, r1
 8008fc4:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8008fc6:	2317      	movs	r3, #23
 8008fc8:	18fb      	adds	r3, r7, r3
 8008fca:	2201      	movs	r2, #1
 8008fcc:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008fce:	4b9d      	ldr	r3, [pc, #628]	; (8009244 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8008fd0:	681a      	ldr	r2, [r3, #0]
 8008fd2:	2380      	movs	r3, #128	; 0x80
 8008fd4:	005b      	lsls	r3, r3, #1
 8008fd6:	4013      	ands	r3, r2
 8008fd8:	d11a      	bne.n	8009010 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008fda:	4b9a      	ldr	r3, [pc, #616]	; (8009244 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8008fdc:	681a      	ldr	r2, [r3, #0]
 8008fde:	4b99      	ldr	r3, [pc, #612]	; (8009244 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8008fe0:	2180      	movs	r1, #128	; 0x80
 8008fe2:	0049      	lsls	r1, r1, #1
 8008fe4:	430a      	orrs	r2, r1
 8008fe6:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008fe8:	f7fd fe80 	bl	8006cec <HAL_GetTick>
 8008fec:	0003      	movs	r3, r0
 8008fee:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008ff0:	e008      	b.n	8009004 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008ff2:	f7fd fe7b 	bl	8006cec <HAL_GetTick>
 8008ff6:	0002      	movs	r2, r0
 8008ff8:	693b      	ldr	r3, [r7, #16]
 8008ffa:	1ad3      	subs	r3, r2, r3
 8008ffc:	2b64      	cmp	r3, #100	; 0x64
 8008ffe:	d901      	bls.n	8009004 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8009000:	2303      	movs	r3, #3
 8009002:	e118      	b.n	8009236 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009004:	4b8f      	ldr	r3, [pc, #572]	; (8009244 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8009006:	681a      	ldr	r2, [r3, #0]
 8009008:	2380      	movs	r3, #128	; 0x80
 800900a:	005b      	lsls	r3, r3, #1
 800900c:	4013      	ands	r3, r2
 800900e:	d0f0      	beq.n	8008ff2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8009010:	4b8b      	ldr	r3, [pc, #556]	; (8009240 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8009012:	681a      	ldr	r2, [r3, #0]
 8009014:	23c0      	movs	r3, #192	; 0xc0
 8009016:	039b      	lsls	r3, r3, #14
 8009018:	4013      	ands	r3, r2
 800901a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	685a      	ldr	r2, [r3, #4]
 8009020:	23c0      	movs	r3, #192	; 0xc0
 8009022:	039b      	lsls	r3, r3, #14
 8009024:	4013      	ands	r3, r2
 8009026:	68fa      	ldr	r2, [r7, #12]
 8009028:	429a      	cmp	r2, r3
 800902a:	d107      	bne.n	800903c <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	689a      	ldr	r2, [r3, #8]
 8009030:	23c0      	movs	r3, #192	; 0xc0
 8009032:	039b      	lsls	r3, r3, #14
 8009034:	4013      	ands	r3, r2
 8009036:	68fa      	ldr	r2, [r7, #12]
 8009038:	429a      	cmp	r2, r3
 800903a:	d013      	beq.n	8009064 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	685a      	ldr	r2, [r3, #4]
 8009040:	23c0      	movs	r3, #192	; 0xc0
 8009042:	029b      	lsls	r3, r3, #10
 8009044:	401a      	ands	r2, r3
 8009046:	23c0      	movs	r3, #192	; 0xc0
 8009048:	029b      	lsls	r3, r3, #10
 800904a:	429a      	cmp	r2, r3
 800904c:	d10a      	bne.n	8009064 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800904e:	4b7c      	ldr	r3, [pc, #496]	; (8009240 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8009050:	681a      	ldr	r2, [r3, #0]
 8009052:	2380      	movs	r3, #128	; 0x80
 8009054:	029b      	lsls	r3, r3, #10
 8009056:	401a      	ands	r2, r3
 8009058:	2380      	movs	r3, #128	; 0x80
 800905a:	029b      	lsls	r3, r3, #10
 800905c:	429a      	cmp	r2, r3
 800905e:	d101      	bne.n	8009064 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8009060:	2301      	movs	r3, #1
 8009062:	e0e8      	b.n	8009236 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8009064:	4b76      	ldr	r3, [pc, #472]	; (8009240 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8009066:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009068:	23c0      	movs	r3, #192	; 0xc0
 800906a:	029b      	lsls	r3, r3, #10
 800906c:	4013      	ands	r3, r2
 800906e:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	2b00      	cmp	r3, #0
 8009074:	d049      	beq.n	800910a <HAL_RCCEx_PeriphCLKConfig+0x186>
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	685a      	ldr	r2, [r3, #4]
 800907a:	23c0      	movs	r3, #192	; 0xc0
 800907c:	029b      	lsls	r3, r3, #10
 800907e:	4013      	ands	r3, r2
 8009080:	68fa      	ldr	r2, [r7, #12]
 8009082:	429a      	cmp	r2, r3
 8009084:	d004      	beq.n	8009090 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	2220      	movs	r2, #32
 800908c:	4013      	ands	r3, r2
 800908e:	d10d      	bne.n	80090ac <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	689a      	ldr	r2, [r3, #8]
 8009094:	23c0      	movs	r3, #192	; 0xc0
 8009096:	029b      	lsls	r3, r3, #10
 8009098:	4013      	ands	r3, r2
 800909a:	68fa      	ldr	r2, [r7, #12]
 800909c:	429a      	cmp	r2, r3
 800909e:	d034      	beq.n	800910a <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681a      	ldr	r2, [r3, #0]
 80090a4:	2380      	movs	r3, #128	; 0x80
 80090a6:	011b      	lsls	r3, r3, #4
 80090a8:	4013      	ands	r3, r2
 80090aa:	d02e      	beq.n	800910a <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80090ac:	4b64      	ldr	r3, [pc, #400]	; (8009240 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80090ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090b0:	4a65      	ldr	r2, [pc, #404]	; (8009248 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80090b2:	4013      	ands	r3, r2
 80090b4:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80090b6:	4b62      	ldr	r3, [pc, #392]	; (8009240 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80090b8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80090ba:	4b61      	ldr	r3, [pc, #388]	; (8009240 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80090bc:	2180      	movs	r1, #128	; 0x80
 80090be:	0309      	lsls	r1, r1, #12
 80090c0:	430a      	orrs	r2, r1
 80090c2:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80090c4:	4b5e      	ldr	r3, [pc, #376]	; (8009240 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80090c6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80090c8:	4b5d      	ldr	r3, [pc, #372]	; (8009240 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80090ca:	4960      	ldr	r1, [pc, #384]	; (800924c <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80090cc:	400a      	ands	r2, r1
 80090ce:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80090d0:	4b5b      	ldr	r3, [pc, #364]	; (8009240 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80090d2:	68fa      	ldr	r2, [r7, #12]
 80090d4:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80090d6:	68fa      	ldr	r2, [r7, #12]
 80090d8:	2380      	movs	r3, #128	; 0x80
 80090da:	005b      	lsls	r3, r3, #1
 80090dc:	4013      	ands	r3, r2
 80090de:	d014      	beq.n	800910a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80090e0:	f7fd fe04 	bl	8006cec <HAL_GetTick>
 80090e4:	0003      	movs	r3, r0
 80090e6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80090e8:	e009      	b.n	80090fe <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80090ea:	f7fd fdff 	bl	8006cec <HAL_GetTick>
 80090ee:	0002      	movs	r2, r0
 80090f0:	693b      	ldr	r3, [r7, #16]
 80090f2:	1ad3      	subs	r3, r2, r3
 80090f4:	4a56      	ldr	r2, [pc, #344]	; (8009250 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80090f6:	4293      	cmp	r3, r2
 80090f8:	d901      	bls.n	80090fe <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 80090fa:	2303      	movs	r3, #3
 80090fc:	e09b      	b.n	8009236 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80090fe:	4b50      	ldr	r3, [pc, #320]	; (8009240 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8009100:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009102:	2380      	movs	r3, #128	; 0x80
 8009104:	009b      	lsls	r3, r3, #2
 8009106:	4013      	ands	r3, r2
 8009108:	d0ef      	beq.n	80090ea <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	685a      	ldr	r2, [r3, #4]
 800910e:	23c0      	movs	r3, #192	; 0xc0
 8009110:	029b      	lsls	r3, r3, #10
 8009112:	401a      	ands	r2, r3
 8009114:	23c0      	movs	r3, #192	; 0xc0
 8009116:	029b      	lsls	r3, r3, #10
 8009118:	429a      	cmp	r2, r3
 800911a:	d10c      	bne.n	8009136 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 800911c:	4b48      	ldr	r3, [pc, #288]	; (8009240 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	4a4c      	ldr	r2, [pc, #304]	; (8009254 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8009122:	4013      	ands	r3, r2
 8009124:	0019      	movs	r1, r3
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	685a      	ldr	r2, [r3, #4]
 800912a:	23c0      	movs	r3, #192	; 0xc0
 800912c:	039b      	lsls	r3, r3, #14
 800912e:	401a      	ands	r2, r3
 8009130:	4b43      	ldr	r3, [pc, #268]	; (8009240 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8009132:	430a      	orrs	r2, r1
 8009134:	601a      	str	r2, [r3, #0]
 8009136:	4b42      	ldr	r3, [pc, #264]	; (8009240 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8009138:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	685a      	ldr	r2, [r3, #4]
 800913e:	23c0      	movs	r3, #192	; 0xc0
 8009140:	029b      	lsls	r3, r3, #10
 8009142:	401a      	ands	r2, r3
 8009144:	4b3e      	ldr	r3, [pc, #248]	; (8009240 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8009146:	430a      	orrs	r2, r1
 8009148:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800914a:	2317      	movs	r3, #23
 800914c:	18fb      	adds	r3, r7, r3
 800914e:	781b      	ldrb	r3, [r3, #0]
 8009150:	2b01      	cmp	r3, #1
 8009152:	d105      	bne.n	8009160 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009154:	4b3a      	ldr	r3, [pc, #232]	; (8009240 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8009156:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009158:	4b39      	ldr	r3, [pc, #228]	; (8009240 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800915a:	493f      	ldr	r1, [pc, #252]	; (8009258 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800915c:	400a      	ands	r2, r1
 800915e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	2201      	movs	r2, #1
 8009166:	4013      	ands	r3, r2
 8009168:	d009      	beq.n	800917e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800916a:	4b35      	ldr	r3, [pc, #212]	; (8009240 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800916c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800916e:	2203      	movs	r2, #3
 8009170:	4393      	bics	r3, r2
 8009172:	0019      	movs	r1, r3
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	68da      	ldr	r2, [r3, #12]
 8009178:	4b31      	ldr	r3, [pc, #196]	; (8009240 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800917a:	430a      	orrs	r2, r1
 800917c:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	2202      	movs	r2, #2
 8009184:	4013      	ands	r3, r2
 8009186:	d009      	beq.n	800919c <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009188:	4b2d      	ldr	r3, [pc, #180]	; (8009240 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800918a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800918c:	220c      	movs	r2, #12
 800918e:	4393      	bics	r3, r2
 8009190:	0019      	movs	r1, r3
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	691a      	ldr	r2, [r3, #16]
 8009196:	4b2a      	ldr	r3, [pc, #168]	; (8009240 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8009198:	430a      	orrs	r2, r1
 800919a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	2204      	movs	r2, #4
 80091a2:	4013      	ands	r3, r2
 80091a4:	d009      	beq.n	80091ba <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80091a6:	4b26      	ldr	r3, [pc, #152]	; (8009240 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80091a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80091aa:	4a2c      	ldr	r2, [pc, #176]	; (800925c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80091ac:	4013      	ands	r3, r2
 80091ae:	0019      	movs	r1, r3
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	695a      	ldr	r2, [r3, #20]
 80091b4:	4b22      	ldr	r3, [pc, #136]	; (8009240 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80091b6:	430a      	orrs	r2, r1
 80091b8:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	2208      	movs	r2, #8
 80091c0:	4013      	ands	r3, r2
 80091c2:	d009      	beq.n	80091d8 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80091c4:	4b1e      	ldr	r3, [pc, #120]	; (8009240 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80091c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80091c8:	4a25      	ldr	r2, [pc, #148]	; (8009260 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80091ca:	4013      	ands	r3, r2
 80091cc:	0019      	movs	r1, r3
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	699a      	ldr	r2, [r3, #24]
 80091d2:	4b1b      	ldr	r3, [pc, #108]	; (8009240 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80091d4:	430a      	orrs	r2, r1
 80091d6:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681a      	ldr	r2, [r3, #0]
 80091dc:	2380      	movs	r3, #128	; 0x80
 80091de:	005b      	lsls	r3, r3, #1
 80091e0:	4013      	ands	r3, r2
 80091e2:	d009      	beq.n	80091f8 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80091e4:	4b16      	ldr	r3, [pc, #88]	; (8009240 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80091e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80091e8:	4a17      	ldr	r2, [pc, #92]	; (8009248 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80091ea:	4013      	ands	r3, r2
 80091ec:	0019      	movs	r1, r3
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	69da      	ldr	r2, [r3, #28]
 80091f2:	4b13      	ldr	r3, [pc, #76]	; (8009240 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80091f4:	430a      	orrs	r2, r1
 80091f6:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	2240      	movs	r2, #64	; 0x40
 80091fe:	4013      	ands	r3, r2
 8009200:	d009      	beq.n	8009216 <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009202:	4b0f      	ldr	r3, [pc, #60]	; (8009240 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8009204:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009206:	4a17      	ldr	r2, [pc, #92]	; (8009264 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8009208:	4013      	ands	r3, r2
 800920a:	0019      	movs	r1, r3
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009210:	4b0b      	ldr	r3, [pc, #44]	; (8009240 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8009212:	430a      	orrs	r2, r1
 8009214:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	2280      	movs	r2, #128	; 0x80
 800921c:	4013      	ands	r3, r2
 800921e:	d009      	beq.n	8009234 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8009220:	4b07      	ldr	r3, [pc, #28]	; (8009240 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8009222:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009224:	4a10      	ldr	r2, [pc, #64]	; (8009268 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8009226:	4013      	ands	r3, r2
 8009228:	0019      	movs	r1, r3
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	6a1a      	ldr	r2, [r3, #32]
 800922e:	4b04      	ldr	r3, [pc, #16]	; (8009240 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8009230:	430a      	orrs	r2, r1
 8009232:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8009234:	2300      	movs	r3, #0
}
 8009236:	0018      	movs	r0, r3
 8009238:	46bd      	mov	sp, r7
 800923a:	b006      	add	sp, #24
 800923c:	bd80      	pop	{r7, pc}
 800923e:	46c0      	nop			; (mov r8, r8)
 8009240:	40021000 	.word	0x40021000
 8009244:	40007000 	.word	0x40007000
 8009248:	fffcffff 	.word	0xfffcffff
 800924c:	fff7ffff 	.word	0xfff7ffff
 8009250:	00001388 	.word	0x00001388
 8009254:	ffcfffff 	.word	0xffcfffff
 8009258:	efffffff 	.word	0xefffffff
 800925c:	fffff3ff 	.word	0xfffff3ff
 8009260:	ffffcfff 	.word	0xffffcfff
 8009264:	fbffffff 	.word	0xfbffffff
 8009268:	fff3ffff 	.word	0xfff3ffff

0800926c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800926c:	b580      	push	{r7, lr}
 800926e:	b082      	sub	sp, #8
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d101      	bne.n	800927e <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800927a:	2301      	movs	r3, #1
 800927c:	e08e      	b.n	800939c <HAL_RTC_Init+0x130>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	2221      	movs	r2, #33	; 0x21
 8009282:	5c9b      	ldrb	r3, [r3, r2]
 8009284:	b2db      	uxtb	r3, r3
 8009286:	2b00      	cmp	r3, #0
 8009288:	d107      	bne.n	800929a <HAL_RTC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	2220      	movs	r2, #32
 800928e:	2100      	movs	r1, #0
 8009290:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	0018      	movs	r0, r3
 8009296:	f7fb f9ad 	bl	80045f4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	2221      	movs	r2, #33	; 0x21
 800929e:	2102      	movs	r1, #2
 80092a0:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	22ca      	movs	r2, #202	; 0xca
 80092a8:	625a      	str	r2, [r3, #36]	; 0x24
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	2253      	movs	r2, #83	; 0x53
 80092b0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	0018      	movs	r0, r3
 80092b6:	f000 fcf4 	bl	8009ca2 <RTC_EnterInitMode>
 80092ba:	1e03      	subs	r3, r0, #0
 80092bc:	d009      	beq.n	80092d2 <HAL_RTC_Init+0x66>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	22ff      	movs	r2, #255	; 0xff
 80092c4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	2221      	movs	r2, #33	; 0x21
 80092ca:	2104      	movs	r1, #4
 80092cc:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80092ce:	2301      	movs	r3, #1
 80092d0:	e064      	b.n	800939c <HAL_RTC_Init+0x130>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	689a      	ldr	r2, [r3, #8]
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	4931      	ldr	r1, [pc, #196]	; (80093a4 <HAL_RTC_Init+0x138>)
 80092de:	400a      	ands	r2, r1
 80092e0:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	6899      	ldr	r1, [r3, #8]
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	685a      	ldr	r2, [r3, #4]
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	691b      	ldr	r3, [r3, #16]
 80092f0:	431a      	orrs	r2, r3
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	699b      	ldr	r3, [r3, #24]
 80092f6:	431a      	orrs	r2, r3
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	430a      	orrs	r2, r1
 80092fe:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	687a      	ldr	r2, [r7, #4]
 8009306:	68d2      	ldr	r2, [r2, #12]
 8009308:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	6919      	ldr	r1, [r3, #16]
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	689b      	ldr	r3, [r3, #8]
 8009314:	041a      	lsls	r2, r3, #16
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	430a      	orrs	r2, r1
 800931c:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	68da      	ldr	r2, [r3, #12]
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	2180      	movs	r1, #128	; 0x80
 800932a:	438a      	bics	r2, r1
 800932c:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	2103      	movs	r1, #3
 800933a:	438a      	bics	r2, r1
 800933c:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	69da      	ldr	r2, [r3, #28]
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	695b      	ldr	r3, [r3, #20]
 800934c:	431a      	orrs	r2, r3
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	430a      	orrs	r2, r1
 8009354:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	689b      	ldr	r3, [r3, #8]
 800935c:	2220      	movs	r2, #32
 800935e:	4013      	ands	r3, r2
 8009360:	d113      	bne.n	800938a <HAL_RTC_Init+0x11e>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	0018      	movs	r0, r3
 8009366:	f000 fc75 	bl	8009c54 <HAL_RTC_WaitForSynchro>
 800936a:	1e03      	subs	r3, r0, #0
 800936c:	d00d      	beq.n	800938a <HAL_RTC_Init+0x11e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	22ff      	movs	r2, #255	; 0xff
 8009374:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	2221      	movs	r2, #33	; 0x21
 800937a:	2104      	movs	r1, #4
 800937c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	2220      	movs	r2, #32
 8009382:	2100      	movs	r1, #0
 8009384:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8009386:	2301      	movs	r3, #1
 8009388:	e008      	b.n	800939c <HAL_RTC_Init+0x130>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	22ff      	movs	r2, #255	; 0xff
 8009390:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	2221      	movs	r2, #33	; 0x21
 8009396:	2101      	movs	r1, #1
 8009398:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800939a:	2300      	movs	r3, #0
  }
}
 800939c:	0018      	movs	r0, r3
 800939e:	46bd      	mov	sp, r7
 80093a0:	b002      	add	sp, #8
 80093a2:	bd80      	pop	{r7, pc}
 80093a4:	ff8fffbf 	.word	0xff8fffbf

080093a8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80093a8:	b590      	push	{r4, r7, lr}
 80093aa:	b087      	sub	sp, #28
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	60f8      	str	r0, [r7, #12]
 80093b0:	60b9      	str	r1, [r7, #8]
 80093b2:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	2220      	movs	r2, #32
 80093b8:	5c9b      	ldrb	r3, [r3, r2]
 80093ba:	2b01      	cmp	r3, #1
 80093bc:	d101      	bne.n	80093c2 <HAL_RTC_SetTime+0x1a>
 80093be:	2302      	movs	r3, #2
 80093c0:	e0ad      	b.n	800951e <HAL_RTC_SetTime+0x176>
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	2220      	movs	r2, #32
 80093c6:	2101      	movs	r1, #1
 80093c8:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	2221      	movs	r2, #33	; 0x21
 80093ce:	2102      	movs	r1, #2
 80093d0:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d125      	bne.n	8009424 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	689b      	ldr	r3, [r3, #8]
 80093de:	2240      	movs	r2, #64	; 0x40
 80093e0:	4013      	ands	r3, r2
 80093e2:	d102      	bne.n	80093ea <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80093e4:	68bb      	ldr	r3, [r7, #8]
 80093e6:	2200      	movs	r2, #0
 80093e8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80093ea:	68bb      	ldr	r3, [r7, #8]
 80093ec:	781b      	ldrb	r3, [r3, #0]
 80093ee:	0018      	movs	r0, r3
 80093f0:	f000 fc81 	bl	8009cf6 <RTC_ByteToBcd2>
 80093f4:	0003      	movs	r3, r0
 80093f6:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80093f8:	68bb      	ldr	r3, [r7, #8]
 80093fa:	785b      	ldrb	r3, [r3, #1]
 80093fc:	0018      	movs	r0, r3
 80093fe:	f000 fc7a 	bl	8009cf6 <RTC_ByteToBcd2>
 8009402:	0003      	movs	r3, r0
 8009404:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8009406:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8009408:	68bb      	ldr	r3, [r7, #8]
 800940a:	789b      	ldrb	r3, [r3, #2]
 800940c:	0018      	movs	r0, r3
 800940e:	f000 fc72 	bl	8009cf6 <RTC_ByteToBcd2>
 8009412:	0003      	movs	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8009414:	0022      	movs	r2, r4
 8009416:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8009418:	68bb      	ldr	r3, [r7, #8]
 800941a:	78db      	ldrb	r3, [r3, #3]
 800941c:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800941e:	4313      	orrs	r3, r2
 8009420:	617b      	str	r3, [r7, #20]
 8009422:	e017      	b.n	8009454 <HAL_RTC_SetTime+0xac>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	689b      	ldr	r3, [r3, #8]
 800942a:	2240      	movs	r2, #64	; 0x40
 800942c:	4013      	ands	r3, r2
 800942e:	d102      	bne.n	8009436 <HAL_RTC_SetTime+0x8e>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8009430:	68bb      	ldr	r3, [r7, #8]
 8009432:	2200      	movs	r2, #0
 8009434:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8009436:	68bb      	ldr	r3, [r7, #8]
 8009438:	781b      	ldrb	r3, [r3, #0]
 800943a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800943c:	68bb      	ldr	r3, [r7, #8]
 800943e:	785b      	ldrb	r3, [r3, #1]
 8009440:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8009442:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8009444:	68ba      	ldr	r2, [r7, #8]
 8009446:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8009448:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800944a:	68bb      	ldr	r3, [r7, #8]
 800944c:	78db      	ldrb	r3, [r3, #3]
 800944e:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8009450:	4313      	orrs	r3, r2
 8009452:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	22ca      	movs	r2, #202	; 0xca
 800945a:	625a      	str	r2, [r3, #36]	; 0x24
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	2253      	movs	r2, #83	; 0x53
 8009462:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	0018      	movs	r0, r3
 8009468:	f000 fc1b 	bl	8009ca2 <RTC_EnterInitMode>
 800946c:	1e03      	subs	r3, r0, #0
 800946e:	d00d      	beq.n	800948c <HAL_RTC_SetTime+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	22ff      	movs	r2, #255	; 0xff
 8009476:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	2221      	movs	r2, #33	; 0x21
 800947c:	2104      	movs	r1, #4
 800947e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	2220      	movs	r2, #32
 8009484:	2100      	movs	r1, #0
 8009486:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8009488:	2301      	movs	r3, #1
 800948a:	e048      	b.n	800951e <HAL_RTC_SetTime+0x176>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	697a      	ldr	r2, [r7, #20]
 8009492:	4925      	ldr	r1, [pc, #148]	; (8009528 <HAL_RTC_SetTime+0x180>)
 8009494:	400a      	ands	r2, r1
 8009496:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	689a      	ldr	r2, [r3, #8]
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	4922      	ldr	r1, [pc, #136]	; (800952c <HAL_RTC_SetTime+0x184>)
 80094a4:	400a      	ands	r2, r1
 80094a6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	6899      	ldr	r1, [r3, #8]
 80094ae:	68bb      	ldr	r3, [r7, #8]
 80094b0:	68da      	ldr	r2, [r3, #12]
 80094b2:	68bb      	ldr	r3, [r7, #8]
 80094b4:	691b      	ldr	r3, [r3, #16]
 80094b6:	431a      	orrs	r2, r3
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	430a      	orrs	r2, r1
 80094be:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	68da      	ldr	r2, [r3, #12]
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	2180      	movs	r1, #128	; 0x80
 80094cc:	438a      	bics	r2, r1
 80094ce:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	689b      	ldr	r3, [r3, #8]
 80094d6:	2220      	movs	r2, #32
 80094d8:	4013      	ands	r3, r2
 80094da:	d113      	bne.n	8009504 <HAL_RTC_SetTime+0x15c>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	0018      	movs	r0, r3
 80094e0:	f000 fbb8 	bl	8009c54 <HAL_RTC_WaitForSynchro>
 80094e4:	1e03      	subs	r3, r0, #0
 80094e6:	d00d      	beq.n	8009504 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	22ff      	movs	r2, #255	; 0xff
 80094ee:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	2221      	movs	r2, #33	; 0x21
 80094f4:	2104      	movs	r1, #4
 80094f6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	2220      	movs	r2, #32
 80094fc:	2100      	movs	r1, #0
 80094fe:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8009500:	2301      	movs	r3, #1
 8009502:	e00c      	b.n	800951e <HAL_RTC_SetTime+0x176>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	22ff      	movs	r2, #255	; 0xff
 800950a:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	2221      	movs	r2, #33	; 0x21
 8009510:	2101      	movs	r1, #1
 8009512:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hrtc);
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	2220      	movs	r2, #32
 8009518:	2100      	movs	r1, #0
 800951a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800951c:	2300      	movs	r3, #0
  }
}
 800951e:	0018      	movs	r0, r3
 8009520:	46bd      	mov	sp, r7
 8009522:	b007      	add	sp, #28
 8009524:	bd90      	pop	{r4, r7, pc}
 8009526:	46c0      	nop			; (mov r8, r8)
 8009528:	007f7f7f 	.word	0x007f7f7f
 800952c:	fffbffff 	.word	0xfffbffff

08009530 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009530:	b580      	push	{r7, lr}
 8009532:	b086      	sub	sp, #24
 8009534:	af00      	add	r7, sp, #0
 8009536:	60f8      	str	r0, [r7, #12]
 8009538:	60b9      	str	r1, [r7, #8]
 800953a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009542:	68bb      	ldr	r3, [r7, #8]
 8009544:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	691b      	ldr	r3, [r3, #16]
 800954c:	045b      	lsls	r3, r3, #17
 800954e:	0c5a      	lsrs	r2, r3, #17
 8009550:	68bb      	ldr	r3, [r7, #8]
 8009552:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	4a22      	ldr	r2, [pc, #136]	; (80095e4 <HAL_RTC_GetTime+0xb4>)
 800955c:	4013      	ands	r3, r2
 800955e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8009560:	697b      	ldr	r3, [r7, #20]
 8009562:	0c1b      	lsrs	r3, r3, #16
 8009564:	b2db      	uxtb	r3, r3
 8009566:	223f      	movs	r2, #63	; 0x3f
 8009568:	4013      	ands	r3, r2
 800956a:	b2da      	uxtb	r2, r3
 800956c:	68bb      	ldr	r3, [r7, #8]
 800956e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8009570:	697b      	ldr	r3, [r7, #20]
 8009572:	0a1b      	lsrs	r3, r3, #8
 8009574:	b2db      	uxtb	r3, r3
 8009576:	227f      	movs	r2, #127	; 0x7f
 8009578:	4013      	ands	r3, r2
 800957a:	b2da      	uxtb	r2, r3
 800957c:	68bb      	ldr	r3, [r7, #8]
 800957e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8009580:	697b      	ldr	r3, [r7, #20]
 8009582:	b2db      	uxtb	r3, r3
 8009584:	227f      	movs	r2, #127	; 0x7f
 8009586:	4013      	ands	r3, r2
 8009588:	b2da      	uxtb	r2, r3
 800958a:	68bb      	ldr	r3, [r7, #8]
 800958c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800958e:	697b      	ldr	r3, [r7, #20]
 8009590:	0c1b      	lsrs	r3, r3, #16
 8009592:	b2db      	uxtb	r3, r3
 8009594:	2240      	movs	r2, #64	; 0x40
 8009596:	4013      	ands	r3, r2
 8009598:	b2da      	uxtb	r2, r3
 800959a:	68bb      	ldr	r3, [r7, #8]
 800959c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d11a      	bne.n	80095da <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80095a4:	68bb      	ldr	r3, [r7, #8]
 80095a6:	781b      	ldrb	r3, [r3, #0]
 80095a8:	0018      	movs	r0, r3
 80095aa:	f000 fbcd 	bl	8009d48 <RTC_Bcd2ToByte>
 80095ae:	0003      	movs	r3, r0
 80095b0:	001a      	movs	r2, r3
 80095b2:	68bb      	ldr	r3, [r7, #8]
 80095b4:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80095b6:	68bb      	ldr	r3, [r7, #8]
 80095b8:	785b      	ldrb	r3, [r3, #1]
 80095ba:	0018      	movs	r0, r3
 80095bc:	f000 fbc4 	bl	8009d48 <RTC_Bcd2ToByte>
 80095c0:	0003      	movs	r3, r0
 80095c2:	001a      	movs	r2, r3
 80095c4:	68bb      	ldr	r3, [r7, #8]
 80095c6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80095c8:	68bb      	ldr	r3, [r7, #8]
 80095ca:	789b      	ldrb	r3, [r3, #2]
 80095cc:	0018      	movs	r0, r3
 80095ce:	f000 fbbb 	bl	8009d48 <RTC_Bcd2ToByte>
 80095d2:	0003      	movs	r3, r0
 80095d4:	001a      	movs	r2, r3
 80095d6:	68bb      	ldr	r3, [r7, #8]
 80095d8:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80095da:	2300      	movs	r3, #0
}
 80095dc:	0018      	movs	r0, r3
 80095de:	46bd      	mov	sp, r7
 80095e0:	b006      	add	sp, #24
 80095e2:	bd80      	pop	{r7, pc}
 80095e4:	007f7f7f 	.word	0x007f7f7f

080095e8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80095e8:	b590      	push	{r4, r7, lr}
 80095ea:	b087      	sub	sp, #28
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	60f8      	str	r0, [r7, #12]
 80095f0:	60b9      	str	r1, [r7, #8]
 80095f2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	2220      	movs	r2, #32
 80095f8:	5c9b      	ldrb	r3, [r3, r2]
 80095fa:	2b01      	cmp	r3, #1
 80095fc:	d101      	bne.n	8009602 <HAL_RTC_SetDate+0x1a>
 80095fe:	2302      	movs	r3, #2
 8009600:	e099      	b.n	8009736 <HAL_RTC_SetDate+0x14e>
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	2220      	movs	r2, #32
 8009606:	2101      	movs	r1, #1
 8009608:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	2221      	movs	r2, #33	; 0x21
 800960e:	2102      	movs	r1, #2
 8009610:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d10e      	bne.n	8009636 <HAL_RTC_SetDate+0x4e>
 8009618:	68bb      	ldr	r3, [r7, #8]
 800961a:	785b      	ldrb	r3, [r3, #1]
 800961c:	001a      	movs	r2, r3
 800961e:	2310      	movs	r3, #16
 8009620:	4013      	ands	r3, r2
 8009622:	d008      	beq.n	8009636 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8009624:	68bb      	ldr	r3, [r7, #8]
 8009626:	785b      	ldrb	r3, [r3, #1]
 8009628:	2210      	movs	r2, #16
 800962a:	4393      	bics	r3, r2
 800962c:	b2db      	uxtb	r3, r3
 800962e:	330a      	adds	r3, #10
 8009630:	b2da      	uxtb	r2, r3
 8009632:	68bb      	ldr	r3, [r7, #8]
 8009634:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d11c      	bne.n	8009676 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800963c:	68bb      	ldr	r3, [r7, #8]
 800963e:	78db      	ldrb	r3, [r3, #3]
 8009640:	0018      	movs	r0, r3
 8009642:	f000 fb58 	bl	8009cf6 <RTC_ByteToBcd2>
 8009646:	0003      	movs	r3, r0
 8009648:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800964a:	68bb      	ldr	r3, [r7, #8]
 800964c:	785b      	ldrb	r3, [r3, #1]
 800964e:	0018      	movs	r0, r3
 8009650:	f000 fb51 	bl	8009cf6 <RTC_ByteToBcd2>
 8009654:	0003      	movs	r3, r0
 8009656:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8009658:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800965a:	68bb      	ldr	r3, [r7, #8]
 800965c:	789b      	ldrb	r3, [r3, #2]
 800965e:	0018      	movs	r0, r3
 8009660:	f000 fb49 	bl	8009cf6 <RTC_ByteToBcd2>
 8009664:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8009666:	0022      	movs	r2, r4
 8009668:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 800966a:	68bb      	ldr	r3, [r7, #8]
 800966c:	781b      	ldrb	r3, [r3, #0]
 800966e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8009670:	4313      	orrs	r3, r2
 8009672:	617b      	str	r3, [r7, #20]
 8009674:	e00e      	b.n	8009694 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8009676:	68bb      	ldr	r3, [r7, #8]
 8009678:	78db      	ldrb	r3, [r3, #3]
 800967a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800967c:	68bb      	ldr	r3, [r7, #8]
 800967e:	785b      	ldrb	r3, [r3, #1]
 8009680:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8009682:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8009684:	68ba      	ldr	r2, [r7, #8]
 8009686:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8009688:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800968a:	68bb      	ldr	r3, [r7, #8]
 800968c:	781b      	ldrb	r3, [r3, #0]
 800968e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8009690:	4313      	orrs	r3, r2
 8009692:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	22ca      	movs	r2, #202	; 0xca
 800969a:	625a      	str	r2, [r3, #36]	; 0x24
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	2253      	movs	r2, #83	; 0x53
 80096a2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	0018      	movs	r0, r3
 80096a8:	f000 fafb 	bl	8009ca2 <RTC_EnterInitMode>
 80096ac:	1e03      	subs	r3, r0, #0
 80096ae:	d00d      	beq.n	80096cc <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	22ff      	movs	r2, #255	; 0xff
 80096b6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	2221      	movs	r2, #33	; 0x21
 80096bc:	2104      	movs	r1, #4
 80096be:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	2220      	movs	r2, #32
 80096c4:	2100      	movs	r1, #0
 80096c6:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80096c8:	2301      	movs	r3, #1
 80096ca:	e034      	b.n	8009736 <HAL_RTC_SetDate+0x14e>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	697a      	ldr	r2, [r7, #20]
 80096d2:	491b      	ldr	r1, [pc, #108]	; (8009740 <HAL_RTC_SetDate+0x158>)
 80096d4:	400a      	ands	r2, r1
 80096d6:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	68da      	ldr	r2, [r3, #12]
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	2180      	movs	r1, #128	; 0x80
 80096e4:	438a      	bics	r2, r1
 80096e6:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	689b      	ldr	r3, [r3, #8]
 80096ee:	2220      	movs	r2, #32
 80096f0:	4013      	ands	r3, r2
 80096f2:	d113      	bne.n	800971c <HAL_RTC_SetDate+0x134>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	0018      	movs	r0, r3
 80096f8:	f000 faac 	bl	8009c54 <HAL_RTC_WaitForSynchro>
 80096fc:	1e03      	subs	r3, r0, #0
 80096fe:	d00d      	beq.n	800971c <HAL_RTC_SetDate+0x134>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	22ff      	movs	r2, #255	; 0xff
 8009706:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	2221      	movs	r2, #33	; 0x21
 800970c:	2104      	movs	r1, #4
 800970e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	2220      	movs	r2, #32
 8009714:	2100      	movs	r1, #0
 8009716:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8009718:	2301      	movs	r3, #1
 800971a:	e00c      	b.n	8009736 <HAL_RTC_SetDate+0x14e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	22ff      	movs	r2, #255	; 0xff
 8009722:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	2221      	movs	r2, #33	; 0x21
 8009728:	2101      	movs	r1, #1
 800972a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	2220      	movs	r2, #32
 8009730:	2100      	movs	r1, #0
 8009732:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8009734:	2300      	movs	r3, #0
  }
}
 8009736:	0018      	movs	r0, r3
 8009738:	46bd      	mov	sp, r7
 800973a:	b007      	add	sp, #28
 800973c:	bd90      	pop	{r4, r7, pc}
 800973e:	46c0      	nop			; (mov r8, r8)
 8009740:	00ffff3f 	.word	0x00ffff3f

08009744 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009744:	b580      	push	{r7, lr}
 8009746:	b086      	sub	sp, #24
 8009748:	af00      	add	r7, sp, #0
 800974a:	60f8      	str	r0, [r7, #12]
 800974c:	60b9      	str	r1, [r7, #8]
 800974e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	685b      	ldr	r3, [r3, #4]
 8009756:	4a21      	ldr	r2, [pc, #132]	; (80097dc <HAL_RTC_GetDate+0x98>)
 8009758:	4013      	ands	r3, r2
 800975a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800975c:	697b      	ldr	r3, [r7, #20]
 800975e:	0c1b      	lsrs	r3, r3, #16
 8009760:	b2da      	uxtb	r2, r3
 8009762:	68bb      	ldr	r3, [r7, #8]
 8009764:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8009766:	697b      	ldr	r3, [r7, #20]
 8009768:	0a1b      	lsrs	r3, r3, #8
 800976a:	b2db      	uxtb	r3, r3
 800976c:	221f      	movs	r2, #31
 800976e:	4013      	ands	r3, r2
 8009770:	b2da      	uxtb	r2, r3
 8009772:	68bb      	ldr	r3, [r7, #8]
 8009774:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8009776:	697b      	ldr	r3, [r7, #20]
 8009778:	b2db      	uxtb	r3, r3
 800977a:	223f      	movs	r2, #63	; 0x3f
 800977c:	4013      	ands	r3, r2
 800977e:	b2da      	uxtb	r2, r3
 8009780:	68bb      	ldr	r3, [r7, #8]
 8009782:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8009784:	697b      	ldr	r3, [r7, #20]
 8009786:	0b5b      	lsrs	r3, r3, #13
 8009788:	b2db      	uxtb	r3, r3
 800978a:	2207      	movs	r2, #7
 800978c:	4013      	ands	r3, r2
 800978e:	b2da      	uxtb	r2, r3
 8009790:	68bb      	ldr	r3, [r7, #8]
 8009792:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d11a      	bne.n	80097d0 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800979a:	68bb      	ldr	r3, [r7, #8]
 800979c:	78db      	ldrb	r3, [r3, #3]
 800979e:	0018      	movs	r0, r3
 80097a0:	f000 fad2 	bl	8009d48 <RTC_Bcd2ToByte>
 80097a4:	0003      	movs	r3, r0
 80097a6:	001a      	movs	r2, r3
 80097a8:	68bb      	ldr	r3, [r7, #8]
 80097aa:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80097ac:	68bb      	ldr	r3, [r7, #8]
 80097ae:	785b      	ldrb	r3, [r3, #1]
 80097b0:	0018      	movs	r0, r3
 80097b2:	f000 fac9 	bl	8009d48 <RTC_Bcd2ToByte>
 80097b6:	0003      	movs	r3, r0
 80097b8:	001a      	movs	r2, r3
 80097ba:	68bb      	ldr	r3, [r7, #8]
 80097bc:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80097be:	68bb      	ldr	r3, [r7, #8]
 80097c0:	789b      	ldrb	r3, [r3, #2]
 80097c2:	0018      	movs	r0, r3
 80097c4:	f000 fac0 	bl	8009d48 <RTC_Bcd2ToByte>
 80097c8:	0003      	movs	r3, r0
 80097ca:	001a      	movs	r2, r3
 80097cc:	68bb      	ldr	r3, [r7, #8]
 80097ce:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80097d0:	2300      	movs	r3, #0
}
 80097d2:	0018      	movs	r0, r3
 80097d4:	46bd      	mov	sp, r7
 80097d6:	b006      	add	sp, #24
 80097d8:	bd80      	pop	{r7, pc}
 80097da:	46c0      	nop			; (mov r8, r8)
 80097dc:	00ffff3f 	.word	0x00ffff3f

080097e0 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80097e0:	b590      	push	{r4, r7, lr}
 80097e2:	b089      	sub	sp, #36	; 0x24
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	60f8      	str	r0, [r7, #12]
 80097e8:	60b9      	str	r1, [r7, #8]
 80097ea:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	2220      	movs	r2, #32
 80097f0:	5c9b      	ldrb	r3, [r3, r2]
 80097f2:	2b01      	cmp	r3, #1
 80097f4:	d101      	bne.n	80097fa <HAL_RTC_SetAlarm_IT+0x1a>
 80097f6:	2302      	movs	r3, #2
 80097f8:	e130      	b.n	8009a5c <HAL_RTC_SetAlarm_IT+0x27c>
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	2220      	movs	r2, #32
 80097fe:	2101      	movs	r1, #1
 8009800:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	2221      	movs	r2, #33	; 0x21
 8009806:	2102      	movs	r1, #2
 8009808:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d136      	bne.n	800987e <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	689b      	ldr	r3, [r3, #8]
 8009816:	2240      	movs	r2, #64	; 0x40
 8009818:	4013      	ands	r3, r2
 800981a:	d102      	bne.n	8009822 <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800981c:	68bb      	ldr	r3, [r7, #8]
 800981e:	2200      	movs	r2, #0
 8009820:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8009822:	68bb      	ldr	r3, [r7, #8]
 8009824:	781b      	ldrb	r3, [r3, #0]
 8009826:	0018      	movs	r0, r3
 8009828:	f000 fa65 	bl	8009cf6 <RTC_ByteToBcd2>
 800982c:	0003      	movs	r3, r0
 800982e:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8009830:	68bb      	ldr	r3, [r7, #8]
 8009832:	785b      	ldrb	r3, [r3, #1]
 8009834:	0018      	movs	r0, r3
 8009836:	f000 fa5e 	bl	8009cf6 <RTC_ByteToBcd2>
 800983a:	0003      	movs	r3, r0
 800983c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800983e:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8009840:	68bb      	ldr	r3, [r7, #8]
 8009842:	789b      	ldrb	r3, [r3, #2]
 8009844:	0018      	movs	r0, r3
 8009846:	f000 fa56 	bl	8009cf6 <RTC_ByteToBcd2>
 800984a:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800984c:	0022      	movs	r2, r4
 800984e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8009850:	68bb      	ldr	r3, [r7, #8]
 8009852:	78db      	ldrb	r3, [r3, #3]
 8009854:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8009856:	431a      	orrs	r2, r3
 8009858:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800985a:	68bb      	ldr	r3, [r7, #8]
 800985c:	2220      	movs	r2, #32
 800985e:	5c9b      	ldrb	r3, [r3, r2]
 8009860:	0018      	movs	r0, r3
 8009862:	f000 fa48 	bl	8009cf6 <RTC_ByteToBcd2>
 8009866:	0003      	movs	r3, r0
 8009868:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800986a:	0022      	movs	r2, r4
 800986c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800986e:	68bb      	ldr	r3, [r7, #8]
 8009870:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8009872:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8009874:	68bb      	ldr	r3, [r7, #8]
 8009876:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8009878:	4313      	orrs	r3, r2
 800987a:	61fb      	str	r3, [r7, #28]
 800987c:	e022      	b.n	80098c4 <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	689b      	ldr	r3, [r3, #8]
 8009884:	2240      	movs	r2, #64	; 0x40
 8009886:	4013      	ands	r3, r2
 8009888:	d102      	bne.n	8009890 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800988a:	68bb      	ldr	r3, [r7, #8]
 800988c:	2200      	movs	r2, #0
 800988e:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8009890:	68bb      	ldr	r3, [r7, #8]
 8009892:	781b      	ldrb	r3, [r3, #0]
 8009894:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8009896:	68bb      	ldr	r3, [r7, #8]
 8009898:	785b      	ldrb	r3, [r3, #1]
 800989a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800989c:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800989e:	68ba      	ldr	r2, [r7, #8]
 80098a0:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 80098a2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80098a4:	68bb      	ldr	r3, [r7, #8]
 80098a6:	78db      	ldrb	r3, [r3, #3]
 80098a8:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80098aa:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 80098ac:	68bb      	ldr	r3, [r7, #8]
 80098ae:	2120      	movs	r1, #32
 80098b0:	5c5b      	ldrb	r3, [r3, r1]
 80098b2:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80098b4:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80098b6:	68bb      	ldr	r3, [r7, #8]
 80098b8:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 80098ba:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80098bc:	68bb      	ldr	r3, [r7, #8]
 80098be:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80098c0:	4313      	orrs	r3, r2
 80098c2:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80098c4:	68bb      	ldr	r3, [r7, #8]
 80098c6:	685a      	ldr	r2, [r3, #4]
 80098c8:	68bb      	ldr	r3, [r7, #8]
 80098ca:	699b      	ldr	r3, [r3, #24]
 80098cc:	4313      	orrs	r3, r2
 80098ce:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	22ca      	movs	r2, #202	; 0xca
 80098d6:	625a      	str	r2, [r3, #36]	; 0x24
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	2253      	movs	r2, #83	; 0x53
 80098de:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 80098e0:	68bb      	ldr	r3, [r7, #8]
 80098e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80098e4:	2380      	movs	r3, #128	; 0x80
 80098e6:	005b      	lsls	r3, r3, #1
 80098e8:	429a      	cmp	r2, r3
 80098ea:	d14e      	bne.n	800998a <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	689a      	ldr	r2, [r3, #8]
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	495b      	ldr	r1, [pc, #364]	; (8009a64 <HAL_RTC_SetAlarm_IT+0x284>)
 80098f8:	400a      	ands	r2, r1
 80098fa:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	68db      	ldr	r3, [r3, #12]
 8009902:	22ff      	movs	r2, #255	; 0xff
 8009904:	401a      	ands	r2, r3
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	4957      	ldr	r1, [pc, #348]	; (8009a68 <HAL_RTC_SetAlarm_IT+0x288>)
 800990c:	430a      	orrs	r2, r1
 800990e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8009910:	f7fd f9ec 	bl	8006cec <HAL_GetTick>
 8009914:	0003      	movs	r3, r0
 8009916:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8009918:	e016      	b.n	8009948 <HAL_RTC_SetAlarm_IT+0x168>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800991a:	f7fd f9e7 	bl	8006cec <HAL_GetTick>
 800991e:	0002      	movs	r2, r0
 8009920:	697b      	ldr	r3, [r7, #20]
 8009922:	1ad2      	subs	r2, r2, r3
 8009924:	23fa      	movs	r3, #250	; 0xfa
 8009926:	009b      	lsls	r3, r3, #2
 8009928:	429a      	cmp	r2, r3
 800992a:	d90d      	bls.n	8009948 <HAL_RTC_SetAlarm_IT+0x168>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	22ff      	movs	r2, #255	; 0xff
 8009932:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	2221      	movs	r2, #33	; 0x21
 8009938:	2103      	movs	r1, #3
 800993a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	2220      	movs	r2, #32
 8009940:	2100      	movs	r1, #0
 8009942:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8009944:	2303      	movs	r3, #3
 8009946:	e089      	b.n	8009a5c <HAL_RTC_SetAlarm_IT+0x27c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	68db      	ldr	r3, [r3, #12]
 800994e:	2201      	movs	r2, #1
 8009950:	4013      	ands	r3, r2
 8009952:	d0e2      	beq.n	800991a <HAL_RTC_SetAlarm_IT+0x13a>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	69fa      	ldr	r2, [r7, #28]
 800995a:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	69ba      	ldr	r2, [r7, #24]
 8009962:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	689a      	ldr	r2, [r3, #8]
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	2180      	movs	r1, #128	; 0x80
 8009970:	0049      	lsls	r1, r1, #1
 8009972:	430a      	orrs	r2, r1
 8009974:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	689a      	ldr	r2, [r3, #8]
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	2180      	movs	r1, #128	; 0x80
 8009982:	0149      	lsls	r1, r1, #5
 8009984:	430a      	orrs	r2, r1
 8009986:	609a      	str	r2, [r3, #8]
 8009988:	e04d      	b.n	8009a26 <HAL_RTC_SetAlarm_IT+0x246>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	689a      	ldr	r2, [r3, #8]
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	4935      	ldr	r1, [pc, #212]	; (8009a6c <HAL_RTC_SetAlarm_IT+0x28c>)
 8009996:	400a      	ands	r2, r1
 8009998:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	68db      	ldr	r3, [r3, #12]
 80099a0:	22ff      	movs	r2, #255	; 0xff
 80099a2:	401a      	ands	r2, r3
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	4931      	ldr	r1, [pc, #196]	; (8009a70 <HAL_RTC_SetAlarm_IT+0x290>)
 80099aa:	430a      	orrs	r2, r1
 80099ac:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80099ae:	f7fd f99d 	bl	8006cec <HAL_GetTick>
 80099b2:	0003      	movs	r3, r0
 80099b4:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80099b6:	e016      	b.n	80099e6 <HAL_RTC_SetAlarm_IT+0x206>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80099b8:	f7fd f998 	bl	8006cec <HAL_GetTick>
 80099bc:	0002      	movs	r2, r0
 80099be:	697b      	ldr	r3, [r7, #20]
 80099c0:	1ad2      	subs	r2, r2, r3
 80099c2:	23fa      	movs	r3, #250	; 0xfa
 80099c4:	009b      	lsls	r3, r3, #2
 80099c6:	429a      	cmp	r2, r3
 80099c8:	d90d      	bls.n	80099e6 <HAL_RTC_SetAlarm_IT+0x206>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	22ff      	movs	r2, #255	; 0xff
 80099d0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	2221      	movs	r2, #33	; 0x21
 80099d6:	2103      	movs	r1, #3
 80099d8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	2220      	movs	r2, #32
 80099de:	2100      	movs	r1, #0
 80099e0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80099e2:	2303      	movs	r3, #3
 80099e4:	e03a      	b.n	8009a5c <HAL_RTC_SetAlarm_IT+0x27c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	68db      	ldr	r3, [r3, #12]
 80099ec:	2202      	movs	r2, #2
 80099ee:	4013      	ands	r3, r2
 80099f0:	d0e2      	beq.n	80099b8 <HAL_RTC_SetAlarm_IT+0x1d8>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	69fa      	ldr	r2, [r7, #28]
 80099f8:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	69ba      	ldr	r2, [r7, #24]
 8009a00:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	689a      	ldr	r2, [r3, #8]
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	2180      	movs	r1, #128	; 0x80
 8009a0e:	0089      	lsls	r1, r1, #2
 8009a10:	430a      	orrs	r2, r1
 8009a12:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	689a      	ldr	r2, [r3, #8]
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	2180      	movs	r1, #128	; 0x80
 8009a20:	0189      	lsls	r1, r1, #6
 8009a22:	430a      	orrs	r2, r1
 8009a24:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8009a26:	4b13      	ldr	r3, [pc, #76]	; (8009a74 <HAL_RTC_SetAlarm_IT+0x294>)
 8009a28:	681a      	ldr	r2, [r3, #0]
 8009a2a:	4b12      	ldr	r3, [pc, #72]	; (8009a74 <HAL_RTC_SetAlarm_IT+0x294>)
 8009a2c:	2180      	movs	r1, #128	; 0x80
 8009a2e:	0289      	lsls	r1, r1, #10
 8009a30:	430a      	orrs	r2, r1
 8009a32:	601a      	str	r2, [r3, #0]

  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8009a34:	4b0f      	ldr	r3, [pc, #60]	; (8009a74 <HAL_RTC_SetAlarm_IT+0x294>)
 8009a36:	689a      	ldr	r2, [r3, #8]
 8009a38:	4b0e      	ldr	r3, [pc, #56]	; (8009a74 <HAL_RTC_SetAlarm_IT+0x294>)
 8009a3a:	2180      	movs	r1, #128	; 0x80
 8009a3c:	0289      	lsls	r1, r1, #10
 8009a3e:	430a      	orrs	r2, r1
 8009a40:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	22ff      	movs	r2, #255	; 0xff
 8009a48:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	2221      	movs	r2, #33	; 0x21
 8009a4e:	2101      	movs	r1, #1
 8009a50:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	2220      	movs	r2, #32
 8009a56:	2100      	movs	r1, #0
 8009a58:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009a5a:	2300      	movs	r3, #0
}
 8009a5c:	0018      	movs	r0, r3
 8009a5e:	46bd      	mov	sp, r7
 8009a60:	b009      	add	sp, #36	; 0x24
 8009a62:	bd90      	pop	{r4, r7, pc}
 8009a64:	fffffeff 	.word	0xfffffeff
 8009a68:	fffffe7f 	.word	0xfffffe7f
 8009a6c:	fffffdff 	.word	0xfffffdff
 8009a70:	fffffd7f 	.word	0xfffffd7f
 8009a74:	40010400 	.word	0x40010400

08009a78 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8009a78:	b580      	push	{r7, lr}
 8009a7a:	b084      	sub	sp, #16
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	6078      	str	r0, [r7, #4]
 8009a80:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	2220      	movs	r2, #32
 8009a86:	5c9b      	ldrb	r3, [r3, r2]
 8009a88:	2b01      	cmp	r3, #1
 8009a8a:	d101      	bne.n	8009a90 <HAL_RTC_DeactivateAlarm+0x18>
 8009a8c:	2302      	movs	r3, #2
 8009a8e:	e086      	b.n	8009b9e <HAL_RTC_DeactivateAlarm+0x126>
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	2220      	movs	r2, #32
 8009a94:	2101      	movs	r1, #1
 8009a96:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	2221      	movs	r2, #33	; 0x21
 8009a9c:	2102      	movs	r1, #2
 8009a9e:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	22ca      	movs	r2, #202	; 0xca
 8009aa6:	625a      	str	r2, [r3, #36]	; 0x24
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	2253      	movs	r2, #83	; 0x53
 8009aae:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 8009ab0:	683a      	ldr	r2, [r7, #0]
 8009ab2:	2380      	movs	r3, #128	; 0x80
 8009ab4:	005b      	lsls	r3, r3, #1
 8009ab6:	429a      	cmp	r2, r3
 8009ab8:	d132      	bne.n	8009b20 <HAL_RTC_DeactivateAlarm+0xa8>
  {
    /* AlarmA */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	689a      	ldr	r2, [r3, #8]
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	4938      	ldr	r1, [pc, #224]	; (8009ba8 <HAL_RTC_DeactivateAlarm+0x130>)
 8009ac6:	400a      	ands	r2, r1
 8009ac8:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	689a      	ldr	r2, [r3, #8]
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	4935      	ldr	r1, [pc, #212]	; (8009bac <HAL_RTC_DeactivateAlarm+0x134>)
 8009ad6:	400a      	ands	r2, r1
 8009ad8:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 8009ada:	f7fd f907 	bl	8006cec <HAL_GetTick>
 8009ade:	0003      	movs	r3, r0
 8009ae0:	60fb      	str	r3, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8009ae2:	e016      	b.n	8009b12 <HAL_RTC_DeactivateAlarm+0x9a>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8009ae4:	f7fd f902 	bl	8006cec <HAL_GetTick>
 8009ae8:	0002      	movs	r2, r0
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	1ad2      	subs	r2, r2, r3
 8009aee:	23fa      	movs	r3, #250	; 0xfa
 8009af0:	009b      	lsls	r3, r3, #2
 8009af2:	429a      	cmp	r2, r3
 8009af4:	d90d      	bls.n	8009b12 <HAL_RTC_DeactivateAlarm+0x9a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	22ff      	movs	r2, #255	; 0xff
 8009afc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	2221      	movs	r2, #33	; 0x21
 8009b02:	2103      	movs	r1, #3
 8009b04:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	2220      	movs	r2, #32
 8009b0a:	2100      	movs	r1, #0
 8009b0c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8009b0e:	2303      	movs	r3, #3
 8009b10:	e045      	b.n	8009b9e <HAL_RTC_DeactivateAlarm+0x126>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	68db      	ldr	r3, [r3, #12]
 8009b18:	2201      	movs	r2, #1
 8009b1a:	4013      	ands	r3, r2
 8009b1c:	d0e2      	beq.n	8009ae4 <HAL_RTC_DeactivateAlarm+0x6c>
 8009b1e:	e031      	b.n	8009b84 <HAL_RTC_DeactivateAlarm+0x10c>
    }
  }
  else
  {
    /* AlarmB */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	689a      	ldr	r2, [r3, #8]
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	4921      	ldr	r1, [pc, #132]	; (8009bb0 <HAL_RTC_DeactivateAlarm+0x138>)
 8009b2c:	400a      	ands	r2, r1
 8009b2e:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	689a      	ldr	r2, [r3, #8]
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	491e      	ldr	r1, [pc, #120]	; (8009bb4 <HAL_RTC_DeactivateAlarm+0x13c>)
 8009b3c:	400a      	ands	r2, r1
 8009b3e:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 8009b40:	f7fd f8d4 	bl	8006cec <HAL_GetTick>
 8009b44:	0003      	movs	r3, r0
 8009b46:	60fb      	str	r3, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8009b48:	e016      	b.n	8009b78 <HAL_RTC_DeactivateAlarm+0x100>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009b4a:	f7fd f8cf 	bl	8006cec <HAL_GetTick>
 8009b4e:	0002      	movs	r2, r0
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	1ad2      	subs	r2, r2, r3
 8009b54:	23fa      	movs	r3, #250	; 0xfa
 8009b56:	009b      	lsls	r3, r3, #2
 8009b58:	429a      	cmp	r2, r3
 8009b5a:	d90d      	bls.n	8009b78 <HAL_RTC_DeactivateAlarm+0x100>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	22ff      	movs	r2, #255	; 0xff
 8009b62:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	2221      	movs	r2, #33	; 0x21
 8009b68:	2103      	movs	r1, #3
 8009b6a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	2220      	movs	r2, #32
 8009b70:	2100      	movs	r1, #0
 8009b72:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8009b74:	2303      	movs	r3, #3
 8009b76:	e012      	b.n	8009b9e <HAL_RTC_DeactivateAlarm+0x126>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	68db      	ldr	r3, [r3, #12]
 8009b7e:	2202      	movs	r2, #2
 8009b80:	4013      	ands	r3, r2
 8009b82:	d0e2      	beq.n	8009b4a <HAL_RTC_DeactivateAlarm+0xd2>
      }
    }
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	22ff      	movs	r2, #255	; 0xff
 8009b8a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	2221      	movs	r2, #33	; 0x21
 8009b90:	2101      	movs	r1, #1
 8009b92:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	2220      	movs	r2, #32
 8009b98:	2100      	movs	r1, #0
 8009b9a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009b9c:	2300      	movs	r3, #0
}
 8009b9e:	0018      	movs	r0, r3
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	b004      	add	sp, #16
 8009ba4:	bd80      	pop	{r7, pc}
 8009ba6:	46c0      	nop			; (mov r8, r8)
 8009ba8:	fffffeff 	.word	0xfffffeff
 8009bac:	ffffefff 	.word	0xffffefff
 8009bb0:	fffffdff 	.word	0xfffffdff
 8009bb4:	ffffdfff 	.word	0xffffdfff

08009bb8 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8009bb8:	b580      	push	{r7, lr}
 8009bba:	b082      	sub	sp, #8
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	689a      	ldr	r2, [r3, #8]
 8009bc6:	2380      	movs	r3, #128	; 0x80
 8009bc8:	015b      	lsls	r3, r3, #5
 8009bca:	4013      	ands	r3, r2
 8009bcc:	d014      	beq.n	8009bf8 <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	68da      	ldr	r2, [r3, #12]
 8009bd4:	2380      	movs	r3, #128	; 0x80
 8009bd6:	005b      	lsls	r3, r3, #1
 8009bd8:	4013      	ands	r3, r2
 8009bda:	d00d      	beq.n	8009bf8 <HAL_RTC_AlarmIRQHandler+0x40>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	0018      	movs	r0, r3
 8009be0:	f7f9 fc96 	bl	8003510 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	68db      	ldr	r3, [r3, #12]
 8009bea:	22ff      	movs	r2, #255	; 0xff
 8009bec:	401a      	ands	r2, r3
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	4915      	ldr	r1, [pc, #84]	; (8009c48 <HAL_RTC_AlarmIRQHandler+0x90>)
 8009bf4:	430a      	orrs	r2, r1
 8009bf6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	689a      	ldr	r2, [r3, #8]
 8009bfe:	2380      	movs	r3, #128	; 0x80
 8009c00:	019b      	lsls	r3, r3, #6
 8009c02:	4013      	ands	r3, r2
 8009c04:	d014      	beq.n	8009c30 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	68da      	ldr	r2, [r3, #12]
 8009c0c:	2380      	movs	r3, #128	; 0x80
 8009c0e:	009b      	lsls	r3, r3, #2
 8009c10:	4013      	ands	r3, r2
 8009c12:	d00d      	beq.n	8009c30 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* AlarmB callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	0018      	movs	r0, r3
 8009c18:	f7f9 fc92 	bl	8003540 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	68db      	ldr	r3, [r3, #12]
 8009c22:	22ff      	movs	r2, #255	; 0xff
 8009c24:	401a      	ands	r2, r3
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	4908      	ldr	r1, [pc, #32]	; (8009c4c <HAL_RTC_AlarmIRQHandler+0x94>)
 8009c2c:	430a      	orrs	r2, r1
 8009c2e:	60da      	str	r2, [r3, #12]
    }
  }
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8009c30:	4b07      	ldr	r3, [pc, #28]	; (8009c50 <HAL_RTC_AlarmIRQHandler+0x98>)
 8009c32:	2280      	movs	r2, #128	; 0x80
 8009c34:	0292      	lsls	r2, r2, #10
 8009c36:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	2221      	movs	r2, #33	; 0x21
 8009c3c:	2101      	movs	r1, #1
 8009c3e:	5499      	strb	r1, [r3, r2]
}
 8009c40:	46c0      	nop			; (mov r8, r8)
 8009c42:	46bd      	mov	sp, r7
 8009c44:	b002      	add	sp, #8
 8009c46:	bd80      	pop	{r7, pc}
 8009c48:	fffffe7f 	.word	0xfffffe7f
 8009c4c:	fffffd7f 	.word	0xfffffd7f
 8009c50:	40010400 	.word	0x40010400

08009c54 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8009c54:	b580      	push	{r7, lr}
 8009c56:	b084      	sub	sp, #16
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	68da      	ldr	r2, [r3, #12]
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	21a0      	movs	r1, #160	; 0xa0
 8009c68:	438a      	bics	r2, r1
 8009c6a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8009c6c:	f7fd f83e 	bl	8006cec <HAL_GetTick>
 8009c70:	0003      	movs	r3, r0
 8009c72:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009c74:	e00a      	b.n	8009c8c <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009c76:	f7fd f839 	bl	8006cec <HAL_GetTick>
 8009c7a:	0002      	movs	r2, r0
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	1ad2      	subs	r2, r2, r3
 8009c80:	23fa      	movs	r3, #250	; 0xfa
 8009c82:	009b      	lsls	r3, r3, #2
 8009c84:	429a      	cmp	r2, r3
 8009c86:	d901      	bls.n	8009c8c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8009c88:	2303      	movs	r3, #3
 8009c8a:	e006      	b.n	8009c9a <HAL_RTC_WaitForSynchro+0x46>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	68db      	ldr	r3, [r3, #12]
 8009c92:	2220      	movs	r2, #32
 8009c94:	4013      	ands	r3, r2
 8009c96:	d0ee      	beq.n	8009c76 <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 8009c98:	2300      	movs	r3, #0
}
 8009c9a:	0018      	movs	r0, r3
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	b004      	add	sp, #16
 8009ca0:	bd80      	pop	{r7, pc}

08009ca2 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8009ca2:	b580      	push	{r7, lr}
 8009ca4:	b084      	sub	sp, #16
 8009ca6:	af00      	add	r7, sp, #0
 8009ca8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	68db      	ldr	r3, [r3, #12]
 8009cb0:	2240      	movs	r2, #64	; 0x40
 8009cb2:	4013      	ands	r3, r2
 8009cb4:	d11a      	bne.n	8009cec <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	2201      	movs	r2, #1
 8009cbc:	4252      	negs	r2, r2
 8009cbe:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8009cc0:	f7fd f814 	bl	8006cec <HAL_GetTick>
 8009cc4:	0003      	movs	r3, r0
 8009cc6:	60fb      	str	r3, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8009cc8:	e00a      	b.n	8009ce0 <RTC_EnterInitMode+0x3e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8009cca:	f7fd f80f 	bl	8006cec <HAL_GetTick>
 8009cce:	0002      	movs	r2, r0
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	1ad2      	subs	r2, r2, r3
 8009cd4:	23fa      	movs	r3, #250	; 0xfa
 8009cd6:	009b      	lsls	r3, r3, #2
 8009cd8:	429a      	cmp	r2, r3
 8009cda:	d901      	bls.n	8009ce0 <RTC_EnterInitMode+0x3e>
      {
        return HAL_TIMEOUT;
 8009cdc:	2303      	movs	r3, #3
 8009cde:	e006      	b.n	8009cee <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	68db      	ldr	r3, [r3, #12]
 8009ce6:	2240      	movs	r2, #64	; 0x40
 8009ce8:	4013      	ands	r3, r2
 8009cea:	d0ee      	beq.n	8009cca <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8009cec:	2300      	movs	r3, #0
}
 8009cee:	0018      	movs	r0, r3
 8009cf0:	46bd      	mov	sp, r7
 8009cf2:	b004      	add	sp, #16
 8009cf4:	bd80      	pop	{r7, pc}

08009cf6 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8009cf6:	b580      	push	{r7, lr}
 8009cf8:	b084      	sub	sp, #16
 8009cfa:	af00      	add	r7, sp, #0
 8009cfc:	0002      	movs	r2, r0
 8009cfe:	1dfb      	adds	r3, r7, #7
 8009d00:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8009d02:	2300      	movs	r3, #0
 8009d04:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8009d06:	230b      	movs	r3, #11
 8009d08:	18fb      	adds	r3, r7, r3
 8009d0a:	1dfa      	adds	r2, r7, #7
 8009d0c:	7812      	ldrb	r2, [r2, #0]
 8009d0e:	701a      	strb	r2, [r3, #0]

  while (Param >= 10U)
 8009d10:	e008      	b.n	8009d24 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	3301      	adds	r3, #1
 8009d16:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8009d18:	220b      	movs	r2, #11
 8009d1a:	18bb      	adds	r3, r7, r2
 8009d1c:	18ba      	adds	r2, r7, r2
 8009d1e:	7812      	ldrb	r2, [r2, #0]
 8009d20:	3a0a      	subs	r2, #10
 8009d22:	701a      	strb	r2, [r3, #0]
  while (Param >= 10U)
 8009d24:	230b      	movs	r3, #11
 8009d26:	18fb      	adds	r3, r7, r3
 8009d28:	781b      	ldrb	r3, [r3, #0]
 8009d2a:	2b09      	cmp	r3, #9
 8009d2c:	d8f1      	bhi.n	8009d12 <RTC_ByteToBcd2+0x1c>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	b2db      	uxtb	r3, r3
 8009d32:	011b      	lsls	r3, r3, #4
 8009d34:	b2da      	uxtb	r2, r3
 8009d36:	230b      	movs	r3, #11
 8009d38:	18fb      	adds	r3, r7, r3
 8009d3a:	781b      	ldrb	r3, [r3, #0]
 8009d3c:	4313      	orrs	r3, r2
 8009d3e:	b2db      	uxtb	r3, r3
}
 8009d40:	0018      	movs	r0, r3
 8009d42:	46bd      	mov	sp, r7
 8009d44:	b004      	add	sp, #16
 8009d46:	bd80      	pop	{r7, pc}

08009d48 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8009d48:	b580      	push	{r7, lr}
 8009d4a:	b084      	sub	sp, #16
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	0002      	movs	r2, r0
 8009d50:	1dfb      	adds	r3, r7, #7
 8009d52:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8009d54:	1dfb      	adds	r3, r7, #7
 8009d56:	781b      	ldrb	r3, [r3, #0]
 8009d58:	091b      	lsrs	r3, r3, #4
 8009d5a:	b2db      	uxtb	r3, r3
 8009d5c:	001a      	movs	r2, r3
 8009d5e:	0013      	movs	r3, r2
 8009d60:	009b      	lsls	r3, r3, #2
 8009d62:	189b      	adds	r3, r3, r2
 8009d64:	005b      	lsls	r3, r3, #1
 8009d66:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	b2da      	uxtb	r2, r3
 8009d6c:	1dfb      	adds	r3, r7, #7
 8009d6e:	781b      	ldrb	r3, [r3, #0]
 8009d70:	210f      	movs	r1, #15
 8009d72:	400b      	ands	r3, r1
 8009d74:	b2db      	uxtb	r3, r3
 8009d76:	18d3      	adds	r3, r2, r3
 8009d78:	b2db      	uxtb	r3, r3
}
 8009d7a:	0018      	movs	r0, r3
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	b004      	add	sp, #16
 8009d80:	bd80      	pop	{r7, pc}

08009d82 <HAL_RTCEx_SetSmoothCalib>:
  *         must be equal to SMOOTHCALIB_PLUSPULSES_RESET and the field
  *         SmoothCalibMinusPulsesValue mut be equal to 0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSmoothCalib(RTC_HandleTypeDef *hrtc, uint32_t SmoothCalibPeriod, uint32_t SmoothCalibPlusPulses, uint32_t SmoothCalibMinusPulsesValue)
{
 8009d82:	b580      	push	{r7, lr}
 8009d84:	b086      	sub	sp, #24
 8009d86:	af00      	add	r7, sp, #0
 8009d88:	60f8      	str	r0, [r7, #12]
 8009d8a:	60b9      	str	r1, [r7, #8]
 8009d8c:	607a      	str	r2, [r7, #4]
 8009d8e:	603b      	str	r3, [r7, #0]
  assert_param(IS_RTC_SMOOTH_CALIB_PERIOD(SmoothCalibPeriod));
  assert_param(IS_RTC_SMOOTH_CALIB_PLUS(SmoothCalibPlusPulses));
  assert_param(IS_RTC_SMOOTH_CALIB_MINUS(SmoothCalibMinusPulsesValue));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	2220      	movs	r2, #32
 8009d94:	5c9b      	ldrb	r3, [r3, r2]
 8009d96:	2b01      	cmp	r3, #1
 8009d98:	d101      	bne.n	8009d9e <HAL_RTCEx_SetSmoothCalib+0x1c>
 8009d9a:	2302      	movs	r3, #2
 8009d9c:	e04f      	b.n	8009e3e <HAL_RTCEx_SetSmoothCalib+0xbc>
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	2220      	movs	r2, #32
 8009da2:	2101      	movs	r1, #1
 8009da4:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	2221      	movs	r2, #33	; 0x21
 8009daa:	2102      	movs	r1, #2
 8009dac:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	22ca      	movs	r2, #202	; 0xca
 8009db4:	625a      	str	r2, [r3, #36]	; 0x24
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	2253      	movs	r2, #83	; 0x53
 8009dbc:	625a      	str	r2, [r3, #36]	; 0x24

  /* check if a calibration is pending*/
  if ((hrtc->Instance->ISR & RTC_ISR_RECALPF) != 0U)
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	68da      	ldr	r2, [r3, #12]
 8009dc4:	2380      	movs	r3, #128	; 0x80
 8009dc6:	025b      	lsls	r3, r3, #9
 8009dc8:	4013      	ands	r3, r2
 8009dca:	d022      	beq.n	8009e12 <HAL_RTCEx_SetSmoothCalib+0x90>
  {
    tickstart = HAL_GetTick();
 8009dcc:	f7fc ff8e 	bl	8006cec <HAL_GetTick>
 8009dd0:	0003      	movs	r3, r0
 8009dd2:	617b      	str	r3, [r7, #20]

    /* check if a calibration is pending*/
    while ((hrtc->Instance->ISR & RTC_ISR_RECALPF) != 0U)
 8009dd4:	e016      	b.n	8009e04 <HAL_RTCEx_SetSmoothCalib+0x82>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009dd6:	f7fc ff89 	bl	8006cec <HAL_GetTick>
 8009dda:	0002      	movs	r2, r0
 8009ddc:	697b      	ldr	r3, [r7, #20]
 8009dde:	1ad2      	subs	r2, r2, r3
 8009de0:	23fa      	movs	r3, #250	; 0xfa
 8009de2:	009b      	lsls	r3, r3, #2
 8009de4:	429a      	cmp	r2, r3
 8009de6:	d90d      	bls.n	8009e04 <HAL_RTCEx_SetSmoothCalib+0x82>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	22ff      	movs	r2, #255	; 0xff
 8009dee:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	2221      	movs	r2, #33	; 0x21
 8009df4:	2103      	movs	r1, #3
 8009df6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	2220      	movs	r2, #32
 8009dfc:	2100      	movs	r1, #0
 8009dfe:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8009e00:	2303      	movs	r3, #3
 8009e02:	e01c      	b.n	8009e3e <HAL_RTCEx_SetSmoothCalib+0xbc>
    while ((hrtc->Instance->ISR & RTC_ISR_RECALPF) != 0U)
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	68da      	ldr	r2, [r3, #12]
 8009e0a:	2380      	movs	r3, #128	; 0x80
 8009e0c:	025b      	lsls	r3, r3, #9
 8009e0e:	4013      	ands	r3, r2
 8009e10:	d1e1      	bne.n	8009dd6 <HAL_RTCEx_SetSmoothCalib+0x54>
      }
    }
  }

  /* Configure the Smooth calibration settings */
  hrtc->Instance->CALR = (uint32_t)((uint32_t)SmoothCalibPeriod | (uint32_t)SmoothCalibPlusPulses | (uint32_t)SmoothCalibMinusPulsesValue);
 8009e12:	68ba      	ldr	r2, [r7, #8]
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	431a      	orrs	r2, r3
 8009e18:	0011      	movs	r1, r2
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	683a      	ldr	r2, [r7, #0]
 8009e20:	430a      	orrs	r2, r1
 8009e22:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	22ff      	movs	r2, #255	; 0xff
 8009e2a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	2221      	movs	r2, #33	; 0x21
 8009e30:	2101      	movs	r1, #1
 8009e32:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	2220      	movs	r2, #32
 8009e38:	2100      	movs	r1, #0
 8009e3a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009e3c:	2300      	movs	r3, #0
}
 8009e3e:	0018      	movs	r0, r3
 8009e40:	46bd      	mov	sp, r7
 8009e42:	b006      	add	sp, #24
 8009e44:	bd80      	pop	{r7, pc}
	...

08009e48 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009e48:	b580      	push	{r7, lr}
 8009e4a:	b082      	sub	sp, #8
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d101      	bne.n	8009e5a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009e56:	2301      	movs	r3, #1
 8009e58:	e059      	b.n	8009f0e <HAL_SPI_Init+0xc6>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	2200      	movs	r2, #0
 8009e5e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	2251      	movs	r2, #81	; 0x51
 8009e64:	5c9b      	ldrb	r3, [r3, r2]
 8009e66:	b2db      	uxtb	r3, r3
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d107      	bne.n	8009e7c <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	2250      	movs	r2, #80	; 0x50
 8009e70:	2100      	movs	r1, #0
 8009e72:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	0018      	movs	r0, r3
 8009e78:	f7fa fbdc 	bl	8004634 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	2251      	movs	r2, #81	; 0x51
 8009e80:	2102      	movs	r1, #2
 8009e82:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	681a      	ldr	r2, [r3, #0]
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	2140      	movs	r1, #64	; 0x40
 8009e90:	438a      	bics	r2, r1
 8009e92:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	685a      	ldr	r2, [r3, #4]
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	689b      	ldr	r3, [r3, #8]
 8009e9c:	431a      	orrs	r2, r3
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	68db      	ldr	r3, [r3, #12]
 8009ea2:	431a      	orrs	r2, r3
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	691b      	ldr	r3, [r3, #16]
 8009ea8:	431a      	orrs	r2, r3
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	695b      	ldr	r3, [r3, #20]
 8009eae:	431a      	orrs	r2, r3
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	6999      	ldr	r1, [r3, #24]
 8009eb4:	2380      	movs	r3, #128	; 0x80
 8009eb6:	009b      	lsls	r3, r3, #2
 8009eb8:	400b      	ands	r3, r1
 8009eba:	431a      	orrs	r2, r3
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	69db      	ldr	r3, [r3, #28]
 8009ec0:	431a      	orrs	r2, r3
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	6a1b      	ldr	r3, [r3, #32]
 8009ec6:	431a      	orrs	r2, r3
 8009ec8:	0011      	movs	r1, r2
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	430a      	orrs	r2, r1
 8009ed4:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	699b      	ldr	r3, [r3, #24]
 8009eda:	0c1b      	lsrs	r3, r3, #16
 8009edc:	2204      	movs	r2, #4
 8009ede:	4013      	ands	r3, r2
 8009ee0:	0019      	movs	r1, r3
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	430a      	orrs	r2, r1
 8009eec:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	69da      	ldr	r2, [r3, #28]
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	4907      	ldr	r1, [pc, #28]	; (8009f18 <HAL_SPI_Init+0xd0>)
 8009efa:	400a      	ands	r2, r1
 8009efc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	2200      	movs	r2, #0
 8009f02:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	2251      	movs	r2, #81	; 0x51
 8009f08:	2101      	movs	r1, #1
 8009f0a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009f0c:	2300      	movs	r3, #0
}
 8009f0e:	0018      	movs	r0, r3
 8009f10:	46bd      	mov	sp, r7
 8009f12:	b002      	add	sp, #8
 8009f14:	bd80      	pop	{r7, pc}
 8009f16:	46c0      	nop			; (mov r8, r8)
 8009f18:	fffff7ff 	.word	0xfffff7ff

08009f1c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009f1c:	b580      	push	{r7, lr}
 8009f1e:	b088      	sub	sp, #32
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	60f8      	str	r0, [r7, #12]
 8009f24:	60b9      	str	r1, [r7, #8]
 8009f26:	603b      	str	r3, [r7, #0]
 8009f28:	1dbb      	adds	r3, r7, #6
 8009f2a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009f2c:	231f      	movs	r3, #31
 8009f2e:	18fb      	adds	r3, r7, r3
 8009f30:	2200      	movs	r2, #0
 8009f32:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	2250      	movs	r2, #80	; 0x50
 8009f38:	5c9b      	ldrb	r3, [r3, r2]
 8009f3a:	2b01      	cmp	r3, #1
 8009f3c:	d101      	bne.n	8009f42 <HAL_SPI_Transmit+0x26>
 8009f3e:	2302      	movs	r3, #2
 8009f40:	e136      	b.n	800a1b0 <HAL_SPI_Transmit+0x294>
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	2250      	movs	r2, #80	; 0x50
 8009f46:	2101      	movs	r1, #1
 8009f48:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009f4a:	f7fc fecf 	bl	8006cec <HAL_GetTick>
 8009f4e:	0003      	movs	r3, r0
 8009f50:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8009f52:	2316      	movs	r3, #22
 8009f54:	18fb      	adds	r3, r7, r3
 8009f56:	1dba      	adds	r2, r7, #6
 8009f58:	8812      	ldrh	r2, [r2, #0]
 8009f5a:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	2251      	movs	r2, #81	; 0x51
 8009f60:	5c9b      	ldrb	r3, [r3, r2]
 8009f62:	b2db      	uxtb	r3, r3
 8009f64:	2b01      	cmp	r3, #1
 8009f66:	d004      	beq.n	8009f72 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8009f68:	231f      	movs	r3, #31
 8009f6a:	18fb      	adds	r3, r7, r3
 8009f6c:	2202      	movs	r2, #2
 8009f6e:	701a      	strb	r2, [r3, #0]
    goto error;
 8009f70:	e113      	b.n	800a19a <HAL_SPI_Transmit+0x27e>
  }

  if ((pData == NULL) || (Size == 0U))
 8009f72:	68bb      	ldr	r3, [r7, #8]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d003      	beq.n	8009f80 <HAL_SPI_Transmit+0x64>
 8009f78:	1dbb      	adds	r3, r7, #6
 8009f7a:	881b      	ldrh	r3, [r3, #0]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d104      	bne.n	8009f8a <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8009f80:	231f      	movs	r3, #31
 8009f82:	18fb      	adds	r3, r7, r3
 8009f84:	2201      	movs	r2, #1
 8009f86:	701a      	strb	r2, [r3, #0]
    goto error;
 8009f88:	e107      	b.n	800a19a <HAL_SPI_Transmit+0x27e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	2251      	movs	r2, #81	; 0x51
 8009f8e:	2103      	movs	r1, #3
 8009f90:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	2200      	movs	r2, #0
 8009f96:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	68ba      	ldr	r2, [r7, #8]
 8009f9c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	1dba      	adds	r2, r7, #6
 8009fa2:	8812      	ldrh	r2, [r2, #0]
 8009fa4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	1dba      	adds	r2, r7, #6
 8009faa:	8812      	ldrh	r2, [r2, #0]
 8009fac:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	2200      	movs	r2, #0
 8009fb2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	2200      	movs	r2, #0
 8009fb8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	2200      	movs	r2, #0
 8009fc4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	2200      	movs	r2, #0
 8009fca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	689a      	ldr	r2, [r3, #8]
 8009fd0:	2380      	movs	r3, #128	; 0x80
 8009fd2:	021b      	lsls	r3, r3, #8
 8009fd4:	429a      	cmp	r2, r3
 8009fd6:	d108      	bne.n	8009fea <HAL_SPI_Transmit+0xce>
  {
    SPI_1LINE_TX(hspi);
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	681a      	ldr	r2, [r3, #0]
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	2180      	movs	r1, #128	; 0x80
 8009fe4:	01c9      	lsls	r1, r1, #7
 8009fe6:	430a      	orrs	r2, r1
 8009fe8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	2240      	movs	r2, #64	; 0x40
 8009ff2:	4013      	ands	r3, r2
 8009ff4:	2b40      	cmp	r3, #64	; 0x40
 8009ff6:	d007      	beq.n	800a008 <HAL_SPI_Transmit+0xec>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	681a      	ldr	r2, [r3, #0]
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	2140      	movs	r1, #64	; 0x40
 800a004:	430a      	orrs	r2, r1
 800a006:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	68da      	ldr	r2, [r3, #12]
 800a00c:	2380      	movs	r3, #128	; 0x80
 800a00e:	011b      	lsls	r3, r3, #4
 800a010:	429a      	cmp	r2, r3
 800a012:	d14e      	bne.n	800a0b2 <HAL_SPI_Transmit+0x196>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	685b      	ldr	r3, [r3, #4]
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d004      	beq.n	800a026 <HAL_SPI_Transmit+0x10a>
 800a01c:	2316      	movs	r3, #22
 800a01e:	18fb      	adds	r3, r7, r3
 800a020:	881b      	ldrh	r3, [r3, #0]
 800a022:	2b01      	cmp	r3, #1
 800a024:	d13f      	bne.n	800a0a6 <HAL_SPI_Transmit+0x18a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a02a:	881a      	ldrh	r2, [r3, #0]
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a036:	1c9a      	adds	r2, r3, #2
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a040:	b29b      	uxth	r3, r3
 800a042:	3b01      	subs	r3, #1
 800a044:	b29a      	uxth	r2, r3
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800a04a:	e02c      	b.n	800a0a6 <HAL_SPI_Transmit+0x18a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	689b      	ldr	r3, [r3, #8]
 800a052:	2202      	movs	r2, #2
 800a054:	4013      	ands	r3, r2
 800a056:	2b02      	cmp	r3, #2
 800a058:	d112      	bne.n	800a080 <HAL_SPI_Transmit+0x164>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a05e:	881a      	ldrh	r2, [r3, #0]
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a06a:	1c9a      	adds	r2, r3, #2
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a074:	b29b      	uxth	r3, r3
 800a076:	3b01      	subs	r3, #1
 800a078:	b29a      	uxth	r2, r3
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	86da      	strh	r2, [r3, #54]	; 0x36
 800a07e:	e012      	b.n	800a0a6 <HAL_SPI_Transmit+0x18a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a080:	f7fc fe34 	bl	8006cec <HAL_GetTick>
 800a084:	0002      	movs	r2, r0
 800a086:	69bb      	ldr	r3, [r7, #24]
 800a088:	1ad3      	subs	r3, r2, r3
 800a08a:	683a      	ldr	r2, [r7, #0]
 800a08c:	429a      	cmp	r2, r3
 800a08e:	d802      	bhi.n	800a096 <HAL_SPI_Transmit+0x17a>
 800a090:	683b      	ldr	r3, [r7, #0]
 800a092:	3301      	adds	r3, #1
 800a094:	d102      	bne.n	800a09c <HAL_SPI_Transmit+0x180>
 800a096:	683b      	ldr	r3, [r7, #0]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d104      	bne.n	800a0a6 <HAL_SPI_Transmit+0x18a>
        {
          errorcode = HAL_TIMEOUT;
 800a09c:	231f      	movs	r3, #31
 800a09e:	18fb      	adds	r3, r7, r3
 800a0a0:	2203      	movs	r2, #3
 800a0a2:	701a      	strb	r2, [r3, #0]
          goto error;
 800a0a4:	e079      	b.n	800a19a <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a0aa:	b29b      	uxth	r3, r3
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d1cd      	bne.n	800a04c <HAL_SPI_Transmit+0x130>
 800a0b0:	e04f      	b.n	800a152 <HAL_SPI_Transmit+0x236>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	685b      	ldr	r3, [r3, #4]
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d004      	beq.n	800a0c4 <HAL_SPI_Transmit+0x1a8>
 800a0ba:	2316      	movs	r3, #22
 800a0bc:	18fb      	adds	r3, r7, r3
 800a0be:	881b      	ldrh	r3, [r3, #0]
 800a0c0:	2b01      	cmp	r3, #1
 800a0c2:	d141      	bne.n	800a148 <HAL_SPI_Transmit+0x22c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	330c      	adds	r3, #12
 800a0ce:	7812      	ldrb	r2, [r2, #0]
 800a0d0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0d6:	1c5a      	adds	r2, r3, #1
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a0e0:	b29b      	uxth	r3, r3
 800a0e2:	3b01      	subs	r3, #1
 800a0e4:	b29a      	uxth	r2, r3
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800a0ea:	e02d      	b.n	800a148 <HAL_SPI_Transmit+0x22c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	689b      	ldr	r3, [r3, #8]
 800a0f2:	2202      	movs	r2, #2
 800a0f4:	4013      	ands	r3, r2
 800a0f6:	2b02      	cmp	r3, #2
 800a0f8:	d113      	bne.n	800a122 <HAL_SPI_Transmit+0x206>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	330c      	adds	r3, #12
 800a104:	7812      	ldrb	r2, [r2, #0]
 800a106:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a10c:	1c5a      	adds	r2, r3, #1
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a116:	b29b      	uxth	r3, r3
 800a118:	3b01      	subs	r3, #1
 800a11a:	b29a      	uxth	r2, r3
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	86da      	strh	r2, [r3, #54]	; 0x36
 800a120:	e012      	b.n	800a148 <HAL_SPI_Transmit+0x22c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a122:	f7fc fde3 	bl	8006cec <HAL_GetTick>
 800a126:	0002      	movs	r2, r0
 800a128:	69bb      	ldr	r3, [r7, #24]
 800a12a:	1ad3      	subs	r3, r2, r3
 800a12c:	683a      	ldr	r2, [r7, #0]
 800a12e:	429a      	cmp	r2, r3
 800a130:	d802      	bhi.n	800a138 <HAL_SPI_Transmit+0x21c>
 800a132:	683b      	ldr	r3, [r7, #0]
 800a134:	3301      	adds	r3, #1
 800a136:	d102      	bne.n	800a13e <HAL_SPI_Transmit+0x222>
 800a138:	683b      	ldr	r3, [r7, #0]
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d104      	bne.n	800a148 <HAL_SPI_Transmit+0x22c>
        {
          errorcode = HAL_TIMEOUT;
 800a13e:	231f      	movs	r3, #31
 800a140:	18fb      	adds	r3, r7, r3
 800a142:	2203      	movs	r2, #3
 800a144:	701a      	strb	r2, [r3, #0]
          goto error;
 800a146:	e028      	b.n	800a19a <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a14c:	b29b      	uxth	r3, r3
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d1cc      	bne.n	800a0ec <HAL_SPI_Transmit+0x1d0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a152:	69ba      	ldr	r2, [r7, #24]
 800a154:	6839      	ldr	r1, [r7, #0]
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	0018      	movs	r0, r3
 800a15a:	f000 fbe3 	bl	800a924 <SPI_EndRxTxTransaction>
 800a15e:	1e03      	subs	r3, r0, #0
 800a160:	d002      	beq.n	800a168 <HAL_SPI_Transmit+0x24c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	2220      	movs	r2, #32
 800a166:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	689b      	ldr	r3, [r3, #8]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d10a      	bne.n	800a186 <HAL_SPI_Transmit+0x26a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a170:	2300      	movs	r3, #0
 800a172:	613b      	str	r3, [r7, #16]
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	68db      	ldr	r3, [r3, #12]
 800a17a:	613b      	str	r3, [r7, #16]
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	689b      	ldr	r3, [r3, #8]
 800a182:	613b      	str	r3, [r7, #16]
 800a184:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d004      	beq.n	800a198 <HAL_SPI_Transmit+0x27c>
  {
    errorcode = HAL_ERROR;
 800a18e:	231f      	movs	r3, #31
 800a190:	18fb      	adds	r3, r7, r3
 800a192:	2201      	movs	r2, #1
 800a194:	701a      	strb	r2, [r3, #0]
 800a196:	e000      	b.n	800a19a <HAL_SPI_Transmit+0x27e>
  }

error:
 800a198:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	2251      	movs	r2, #81	; 0x51
 800a19e:	2101      	movs	r1, #1
 800a1a0:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	2250      	movs	r2, #80	; 0x50
 800a1a6:	2100      	movs	r1, #0
 800a1a8:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800a1aa:	231f      	movs	r3, #31
 800a1ac:	18fb      	adds	r3, r7, r3
 800a1ae:	781b      	ldrb	r3, [r3, #0]
}
 800a1b0:	0018      	movs	r0, r3
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	b008      	add	sp, #32
 800a1b6:	bd80      	pop	{r7, pc}

0800a1b8 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800a1b8:	b580      	push	{r7, lr}
 800a1ba:	b086      	sub	sp, #24
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	60f8      	str	r0, [r7, #12]
 800a1c0:	60b9      	str	r1, [r7, #8]
 800a1c2:	1dbb      	adds	r3, r7, #6
 800a1c4:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a1c6:	2317      	movs	r3, #23
 800a1c8:	18fb      	adds	r3, r7, r3
 800a1ca:	2200      	movs	r2, #0
 800a1cc:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	2250      	movs	r2, #80	; 0x50
 800a1d2:	5c9b      	ldrb	r3, [r3, r2]
 800a1d4:	2b01      	cmp	r3, #1
 800a1d6:	d101      	bne.n	800a1dc <HAL_SPI_Transmit_IT+0x24>
 800a1d8:	2302      	movs	r3, #2
 800a1da:	e072      	b.n	800a2c2 <HAL_SPI_Transmit_IT+0x10a>
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	2250      	movs	r2, #80	; 0x50
 800a1e0:	2101      	movs	r1, #1
 800a1e2:	5499      	strb	r1, [r3, r2]

  if ((pData == NULL) || (Size == 0U))
 800a1e4:	68bb      	ldr	r3, [r7, #8]
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d003      	beq.n	800a1f2 <HAL_SPI_Transmit_IT+0x3a>
 800a1ea:	1dbb      	adds	r3, r7, #6
 800a1ec:	881b      	ldrh	r3, [r3, #0]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d104      	bne.n	800a1fc <HAL_SPI_Transmit_IT+0x44>
  {
    errorcode = HAL_ERROR;
 800a1f2:	2317      	movs	r3, #23
 800a1f4:	18fb      	adds	r3, r7, r3
 800a1f6:	2201      	movs	r2, #1
 800a1f8:	701a      	strb	r2, [r3, #0]
    goto error;
 800a1fa:	e05b      	b.n	800a2b4 <HAL_SPI_Transmit_IT+0xfc>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	2251      	movs	r2, #81	; 0x51
 800a200:	5c9b      	ldrb	r3, [r3, r2]
 800a202:	b2db      	uxtb	r3, r3
 800a204:	2b01      	cmp	r3, #1
 800a206:	d004      	beq.n	800a212 <HAL_SPI_Transmit_IT+0x5a>
  {
    errorcode = HAL_BUSY;
 800a208:	2317      	movs	r3, #23
 800a20a:	18fb      	adds	r3, r7, r3
 800a20c:	2202      	movs	r2, #2
 800a20e:	701a      	strb	r2, [r3, #0]
    goto error;
 800a210:	e050      	b.n	800a2b4 <HAL_SPI_Transmit_IT+0xfc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	2251      	movs	r2, #81	; 0x51
 800a216:	2103      	movs	r1, #3
 800a218:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	2200      	movs	r2, #0
 800a21e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	68ba      	ldr	r2, [r7, #8]
 800a224:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	1dba      	adds	r2, r7, #6
 800a22a:	8812      	ldrh	r2, [r2, #0]
 800a22c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	1dba      	adds	r2, r7, #6
 800a232:	8812      	ldrh	r2, [r2, #0]
 800a234:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	2200      	movs	r2, #0
 800a23a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	2200      	movs	r2, #0
 800a240:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	2200      	movs	r2, #0
 800a246:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	2200      	movs	r2, #0
 800a24c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	68db      	ldr	r3, [r3, #12]
 800a252:	2b00      	cmp	r3, #0
 800a254:	d003      	beq.n	800a25e <HAL_SPI_Transmit_IT+0xa6>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	4a1c      	ldr	r2, [pc, #112]	; (800a2cc <HAL_SPI_Transmit_IT+0x114>)
 800a25a:	645a      	str	r2, [r3, #68]	; 0x44
 800a25c:	e002      	b.n	800a264 <HAL_SPI_Transmit_IT+0xac>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	4a1b      	ldr	r2, [pc, #108]	; (800a2d0 <HAL_SPI_Transmit_IT+0x118>)
 800a262:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	689a      	ldr	r2, [r3, #8]
 800a268:	2380      	movs	r3, #128	; 0x80
 800a26a:	021b      	lsls	r3, r3, #8
 800a26c:	429a      	cmp	r2, r3
 800a26e:	d108      	bne.n	800a282 <HAL_SPI_Transmit_IT+0xca>
  {
    SPI_1LINE_TX(hspi);
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	681a      	ldr	r2, [r3, #0]
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	2180      	movs	r1, #128	; 0x80
 800a27c:	01c9      	lsls	r1, r1, #7
 800a27e:	430a      	orrs	r2, r1
 800a280:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	685a      	ldr	r2, [r3, #4]
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	21a0      	movs	r1, #160	; 0xa0
 800a28e:	430a      	orrs	r2, r1
 800a290:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	2240      	movs	r2, #64	; 0x40
 800a29a:	4013      	ands	r3, r2
 800a29c:	2b40      	cmp	r3, #64	; 0x40
 800a29e:	d008      	beq.n	800a2b2 <HAL_SPI_Transmit_IT+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	681a      	ldr	r2, [r3, #0]
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	2140      	movs	r1, #64	; 0x40
 800a2ac:	430a      	orrs	r2, r1
 800a2ae:	601a      	str	r2, [r3, #0]
 800a2b0:	e000      	b.n	800a2b4 <HAL_SPI_Transmit_IT+0xfc>
  }

error :
 800a2b2:	46c0      	nop			; (mov r8, r8)
  __HAL_UNLOCK(hspi);
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	2250      	movs	r2, #80	; 0x50
 800a2b8:	2100      	movs	r1, #0
 800a2ba:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800a2bc:	2317      	movs	r3, #23
 800a2be:	18fb      	adds	r3, r7, r3
 800a2c0:	781b      	ldrb	r3, [r3, #0]
}
 800a2c2:	0018      	movs	r0, r3
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	b006      	add	sp, #24
 800a2c8:	bd80      	pop	{r7, pc}
 800a2ca:	46c0      	nop			; (mov r8, r8)
 800a2cc:	0800a7ff 	.word	0x0800a7ff
 800a2d0:	0800a7b7 	.word	0x0800a7b7

0800a2d4 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800a2d4:	b580      	push	{r7, lr}
 800a2d6:	b086      	sub	sp, #24
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	60f8      	str	r0, [r7, #12]
 800a2dc:	60b9      	str	r1, [r7, #8]
 800a2de:	1dbb      	adds	r3, r7, #6
 800a2e0:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a2e2:	2317      	movs	r3, #23
 800a2e4:	18fb      	adds	r3, r7, r3
 800a2e6:	2200      	movs	r2, #0
 800a2e8:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	2250      	movs	r2, #80	; 0x50
 800a2ee:	5c9b      	ldrb	r3, [r3, r2]
 800a2f0:	2b01      	cmp	r3, #1
 800a2f2:	d101      	bne.n	800a2f8 <HAL_SPI_Transmit_DMA+0x24>
 800a2f4:	2302      	movs	r3, #2
 800a2f6:	e09f      	b.n	800a438 <HAL_SPI_Transmit_DMA+0x164>
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	2250      	movs	r2, #80	; 0x50
 800a2fc:	2101      	movs	r1, #1
 800a2fe:	5499      	strb	r1, [r3, r2]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	2251      	movs	r2, #81	; 0x51
 800a304:	5c9b      	ldrb	r3, [r3, r2]
 800a306:	b2db      	uxtb	r3, r3
 800a308:	2b01      	cmp	r3, #1
 800a30a:	d004      	beq.n	800a316 <HAL_SPI_Transmit_DMA+0x42>
  {
    errorcode = HAL_BUSY;
 800a30c:	2317      	movs	r3, #23
 800a30e:	18fb      	adds	r3, r7, r3
 800a310:	2202      	movs	r2, #2
 800a312:	701a      	strb	r2, [r3, #0]
    goto error;
 800a314:	e089      	b.n	800a42a <HAL_SPI_Transmit_DMA+0x156>
  }

  if ((pData == NULL) || (Size == 0U))
 800a316:	68bb      	ldr	r3, [r7, #8]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d003      	beq.n	800a324 <HAL_SPI_Transmit_DMA+0x50>
 800a31c:	1dbb      	adds	r3, r7, #6
 800a31e:	881b      	ldrh	r3, [r3, #0]
 800a320:	2b00      	cmp	r3, #0
 800a322:	d104      	bne.n	800a32e <HAL_SPI_Transmit_DMA+0x5a>
  {
    errorcode = HAL_ERROR;
 800a324:	2317      	movs	r3, #23
 800a326:	18fb      	adds	r3, r7, r3
 800a328:	2201      	movs	r2, #1
 800a32a:	701a      	strb	r2, [r3, #0]
    goto error;
 800a32c:	e07d      	b.n	800a42a <HAL_SPI_Transmit_DMA+0x156>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	2251      	movs	r2, #81	; 0x51
 800a332:	2103      	movs	r1, #3
 800a334:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	2200      	movs	r2, #0
 800a33a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	68ba      	ldr	r2, [r7, #8]
 800a340:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	1dba      	adds	r2, r7, #6
 800a346:	8812      	ldrh	r2, [r2, #0]
 800a348:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	1dba      	adds	r2, r7, #6
 800a34e:	8812      	ldrh	r2, [r2, #0]
 800a350:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	2200      	movs	r2, #0
 800a356:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	2200      	movs	r2, #0
 800a35c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	2200      	movs	r2, #0
 800a362:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	2200      	movs	r2, #0
 800a368:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	2200      	movs	r2, #0
 800a36e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	689a      	ldr	r2, [r3, #8]
 800a374:	2380      	movs	r3, #128	; 0x80
 800a376:	021b      	lsls	r3, r3, #8
 800a378:	429a      	cmp	r2, r3
 800a37a:	d108      	bne.n	800a38e <HAL_SPI_Transmit_DMA+0xba>
  {
    SPI_1LINE_TX(hspi);
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	681a      	ldr	r2, [r3, #0]
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	2180      	movs	r1, #128	; 0x80
 800a388:	01c9      	lsls	r1, r1, #7
 800a38a:	430a      	orrs	r2, r1
 800a38c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a392:	4a2b      	ldr	r2, [pc, #172]	; (800a440 <HAL_SPI_Transmit_DMA+0x16c>)
 800a394:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a39a:	4a2a      	ldr	r2, [pc, #168]	; (800a444 <HAL_SPI_Transmit_DMA+0x170>)
 800a39c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a3a2:	4a29      	ldr	r2, [pc, #164]	; (800a448 <HAL_SPI_Transmit_DMA+0x174>)
 800a3a4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a3aa:	2200      	movs	r2, #0
 800a3ac:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount))
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3b6:	0019      	movs	r1, r3
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	330c      	adds	r3, #12
 800a3be:	001a      	movs	r2, r3
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a3c4:	b29b      	uxth	r3, r3
 800a3c6:	f7fd fb87 	bl	8007ad8 <HAL_DMA_Start_IT>
 800a3ca:	1e03      	subs	r3, r0, #0
 800a3cc:	d00e      	beq.n	800a3ec <HAL_SPI_Transmit_DMA+0x118>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3d2:	2210      	movs	r2, #16
 800a3d4:	431a      	orrs	r2, r3
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800a3da:	2317      	movs	r3, #23
 800a3dc:	18fb      	adds	r3, r7, r3
 800a3de:	2201      	movs	r2, #1
 800a3e0:	701a      	strb	r2, [r3, #0]

    hspi->State = HAL_SPI_STATE_READY;
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	2251      	movs	r2, #81	; 0x51
 800a3e6:	2101      	movs	r1, #1
 800a3e8:	5499      	strb	r1, [r3, r2]
    goto error;
 800a3ea:	e01e      	b.n	800a42a <HAL_SPI_Transmit_DMA+0x156>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	2240      	movs	r2, #64	; 0x40
 800a3f4:	4013      	ands	r3, r2
 800a3f6:	2b40      	cmp	r3, #64	; 0x40
 800a3f8:	d007      	beq.n	800a40a <HAL_SPI_Transmit_DMA+0x136>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	681a      	ldr	r2, [r3, #0]
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	2140      	movs	r1, #64	; 0x40
 800a406:	430a      	orrs	r2, r1
 800a408:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	685a      	ldr	r2, [r3, #4]
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	2120      	movs	r1, #32
 800a416:	430a      	orrs	r2, r1
 800a418:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	685a      	ldr	r2, [r3, #4]
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	2102      	movs	r1, #2
 800a426:	430a      	orrs	r2, r1
 800a428:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	2250      	movs	r2, #80	; 0x50
 800a42e:	2100      	movs	r1, #0
 800a430:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800a432:	2317      	movs	r3, #23
 800a434:	18fb      	adds	r3, r7, r3
 800a436:	781b      	ldrb	r3, [r3, #0]
}
 800a438:	0018      	movs	r0, r3
 800a43a:	46bd      	mov	sp, r7
 800a43c:	b006      	add	sp, #24
 800a43e:	bd80      	pop	{r7, pc}
 800a440:	0800a72d 	.word	0x0800a72d
 800a444:	0800a681 	.word	0x0800a681
 800a448:	0800a74b 	.word	0x0800a74b

0800a44c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800a44c:	b580      	push	{r7, lr}
 800a44e:	b088      	sub	sp, #32
 800a450:	af00      	add	r7, sp, #0
 800a452:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	685b      	ldr	r3, [r3, #4]
 800a45a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	689b      	ldr	r3, [r3, #8]
 800a462:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800a464:	69bb      	ldr	r3, [r7, #24]
 800a466:	099b      	lsrs	r3, r3, #6
 800a468:	001a      	movs	r2, r3
 800a46a:	2301      	movs	r3, #1
 800a46c:	4013      	ands	r3, r2
 800a46e:	d10f      	bne.n	800a490 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800a470:	69bb      	ldr	r3, [r7, #24]
 800a472:	2201      	movs	r2, #1
 800a474:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800a476:	d00b      	beq.n	800a490 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800a478:	69fb      	ldr	r3, [r7, #28]
 800a47a:	099b      	lsrs	r3, r3, #6
 800a47c:	001a      	movs	r2, r3
 800a47e:	2301      	movs	r3, #1
 800a480:	4013      	ands	r3, r2
 800a482:	d005      	beq.n	800a490 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a488:	687a      	ldr	r2, [r7, #4]
 800a48a:	0010      	movs	r0, r2
 800a48c:	4798      	blx	r3
    return;
 800a48e:	e0d6      	b.n	800a63e <HAL_SPI_IRQHandler+0x1f2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800a490:	69bb      	ldr	r3, [r7, #24]
 800a492:	085b      	lsrs	r3, r3, #1
 800a494:	001a      	movs	r2, r3
 800a496:	2301      	movs	r3, #1
 800a498:	4013      	ands	r3, r2
 800a49a:	d00b      	beq.n	800a4b4 <HAL_SPI_IRQHandler+0x68>
 800a49c:	69fb      	ldr	r3, [r7, #28]
 800a49e:	09db      	lsrs	r3, r3, #7
 800a4a0:	001a      	movs	r2, r3
 800a4a2:	2301      	movs	r3, #1
 800a4a4:	4013      	ands	r3, r2
 800a4a6:	d005      	beq.n	800a4b4 <HAL_SPI_IRQHandler+0x68>
  {
    hspi->TxISR(hspi);
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4ac:	687a      	ldr	r2, [r7, #4]
 800a4ae:	0010      	movs	r0, r2
 800a4b0:	4798      	blx	r3
    return;
 800a4b2:	e0c4      	b.n	800a63e <HAL_SPI_IRQHandler+0x1f2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800a4b4:	69bb      	ldr	r3, [r7, #24]
 800a4b6:	095b      	lsrs	r3, r3, #5
 800a4b8:	001a      	movs	r2, r3
 800a4ba:	2301      	movs	r3, #1
 800a4bc:	4013      	ands	r3, r2
 800a4be:	d10c      	bne.n	800a4da <HAL_SPI_IRQHandler+0x8e>
 800a4c0:	69bb      	ldr	r3, [r7, #24]
 800a4c2:	099b      	lsrs	r3, r3, #6
 800a4c4:	001a      	movs	r2, r3
 800a4c6:	2301      	movs	r3, #1
 800a4c8:	4013      	ands	r3, r2
 800a4ca:	d106      	bne.n	800a4da <HAL_SPI_IRQHandler+0x8e>
 800a4cc:	69bb      	ldr	r3, [r7, #24]
 800a4ce:	0a1b      	lsrs	r3, r3, #8
 800a4d0:	001a      	movs	r2, r3
 800a4d2:	2301      	movs	r3, #1
 800a4d4:	4013      	ands	r3, r2
 800a4d6:	d100      	bne.n	800a4da <HAL_SPI_IRQHandler+0x8e>
 800a4d8:	e0b1      	b.n	800a63e <HAL_SPI_IRQHandler+0x1f2>
 800a4da:	69fb      	ldr	r3, [r7, #28]
 800a4dc:	095b      	lsrs	r3, r3, #5
 800a4de:	001a      	movs	r2, r3
 800a4e0:	2301      	movs	r3, #1
 800a4e2:	4013      	ands	r3, r2
 800a4e4:	d100      	bne.n	800a4e8 <HAL_SPI_IRQHandler+0x9c>
 800a4e6:	e0aa      	b.n	800a63e <HAL_SPI_IRQHandler+0x1f2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800a4e8:	69bb      	ldr	r3, [r7, #24]
 800a4ea:	099b      	lsrs	r3, r3, #6
 800a4ec:	001a      	movs	r2, r3
 800a4ee:	2301      	movs	r3, #1
 800a4f0:	4013      	ands	r3, r2
 800a4f2:	d023      	beq.n	800a53c <HAL_SPI_IRQHandler+0xf0>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	2251      	movs	r2, #81	; 0x51
 800a4f8:	5c9b      	ldrb	r3, [r3, r2]
 800a4fa:	b2db      	uxtb	r3, r3
 800a4fc:	2b03      	cmp	r3, #3
 800a4fe:	d011      	beq.n	800a524 <HAL_SPI_IRQHandler+0xd8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a504:	2204      	movs	r2, #4
 800a506:	431a      	orrs	r2, r3
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a50c:	2300      	movs	r3, #0
 800a50e:	617b      	str	r3, [r7, #20]
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	68db      	ldr	r3, [r3, #12]
 800a516:	617b      	str	r3, [r7, #20]
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	689b      	ldr	r3, [r3, #8]
 800a51e:	617b      	str	r3, [r7, #20]
 800a520:	697b      	ldr	r3, [r7, #20]
 800a522:	e00b      	b.n	800a53c <HAL_SPI_IRQHandler+0xf0>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a524:	2300      	movs	r3, #0
 800a526:	613b      	str	r3, [r7, #16]
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	68db      	ldr	r3, [r3, #12]
 800a52e:	613b      	str	r3, [r7, #16]
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	689b      	ldr	r3, [r3, #8]
 800a536:	613b      	str	r3, [r7, #16]
 800a538:	693b      	ldr	r3, [r7, #16]
        return;
 800a53a:	e080      	b.n	800a63e <HAL_SPI_IRQHandler+0x1f2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800a53c:	69bb      	ldr	r3, [r7, #24]
 800a53e:	095b      	lsrs	r3, r3, #5
 800a540:	001a      	movs	r2, r3
 800a542:	2301      	movs	r3, #1
 800a544:	4013      	ands	r3, r2
 800a546:	d014      	beq.n	800a572 <HAL_SPI_IRQHandler+0x126>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a54c:	2201      	movs	r2, #1
 800a54e:	431a      	orrs	r2, r3
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a554:	2300      	movs	r3, #0
 800a556:	60fb      	str	r3, [r7, #12]
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	689b      	ldr	r3, [r3, #8]
 800a55e:	60fb      	str	r3, [r7, #12]
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	681a      	ldr	r2, [r3, #0]
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	2140      	movs	r1, #64	; 0x40
 800a56c:	438a      	bics	r2, r1
 800a56e:	601a      	str	r2, [r3, #0]
 800a570:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800a572:	69bb      	ldr	r3, [r7, #24]
 800a574:	0a1b      	lsrs	r3, r3, #8
 800a576:	001a      	movs	r2, r3
 800a578:	2301      	movs	r3, #1
 800a57a:	4013      	ands	r3, r2
 800a57c:	d00c      	beq.n	800a598 <HAL_SPI_IRQHandler+0x14c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a582:	2208      	movs	r2, #8
 800a584:	431a      	orrs	r2, r3
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a58a:	2300      	movs	r3, #0
 800a58c:	60bb      	str	r3, [r7, #8]
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	689b      	ldr	r3, [r3, #8]
 800a594:	60bb      	str	r3, [r7, #8]
 800a596:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d04d      	beq.n	800a63c <HAL_SPI_IRQHandler+0x1f0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	685a      	ldr	r2, [r3, #4]
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	21e0      	movs	r1, #224	; 0xe0
 800a5ac:	438a      	bics	r2, r1
 800a5ae:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	2251      	movs	r2, #81	; 0x51
 800a5b4:	2101      	movs	r1, #1
 800a5b6:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800a5b8:	69fb      	ldr	r3, [r7, #28]
 800a5ba:	2202      	movs	r2, #2
 800a5bc:	4013      	ands	r3, r2
 800a5be:	d103      	bne.n	800a5c8 <HAL_SPI_IRQHandler+0x17c>
 800a5c0:	69fb      	ldr	r3, [r7, #28]
 800a5c2:	2201      	movs	r2, #1
 800a5c4:	4013      	ands	r3, r2
 800a5c6:	d032      	beq.n	800a62e <HAL_SPI_IRQHandler+0x1e2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	685a      	ldr	r2, [r3, #4]
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	2103      	movs	r1, #3
 800a5d4:	438a      	bics	r2, r1
 800a5d6:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d010      	beq.n	800a602 <HAL_SPI_IRQHandler+0x1b6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a5e4:	4a17      	ldr	r2, [pc, #92]	; (800a644 <HAL_SPI_IRQHandler+0x1f8>)
 800a5e6:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a5ec:	0018      	movs	r0, r3
 800a5ee:	f7fd fad9 	bl	8007ba4 <HAL_DMA_Abort_IT>
 800a5f2:	1e03      	subs	r3, r0, #0
 800a5f4:	d005      	beq.n	800a602 <HAL_SPI_IRQHandler+0x1b6>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a5fa:	2240      	movs	r2, #64	; 0x40
 800a5fc:	431a      	orrs	r2, r3
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a606:	2b00      	cmp	r3, #0
 800a608:	d016      	beq.n	800a638 <HAL_SPI_IRQHandler+0x1ec>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a60e:	4a0d      	ldr	r2, [pc, #52]	; (800a644 <HAL_SPI_IRQHandler+0x1f8>)
 800a610:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a616:	0018      	movs	r0, r3
 800a618:	f7fd fac4 	bl	8007ba4 <HAL_DMA_Abort_IT>
 800a61c:	1e03      	subs	r3, r0, #0
 800a61e:	d00b      	beq.n	800a638 <HAL_SPI_IRQHandler+0x1ec>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a624:	2240      	movs	r2, #64	; 0x40
 800a626:	431a      	orrs	r2, r3
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800a62c:	e004      	b.n	800a638 <HAL_SPI_IRQHandler+0x1ec>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	0018      	movs	r0, r3
 800a632:	f000 f811 	bl	800a658 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800a636:	e000      	b.n	800a63a <HAL_SPI_IRQHandler+0x1ee>
        if (hspi->hdmatx != NULL)
 800a638:	46c0      	nop			; (mov r8, r8)
    return;
 800a63a:	46c0      	nop			; (mov r8, r8)
 800a63c:	46c0      	nop			; (mov r8, r8)
  }
}
 800a63e:	46bd      	mov	sp, r7
 800a640:	b008      	add	sp, #32
 800a642:	bd80      	pop	{r7, pc}
 800a644:	0800a78d 	.word	0x0800a78d

0800a648 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a648:	b580      	push	{r7, lr}
 800a64a:	b082      	sub	sp, #8
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800a650:	46c0      	nop			; (mov r8, r8)
 800a652:	46bd      	mov	sp, r7
 800a654:	b002      	add	sp, #8
 800a656:	bd80      	pop	{r7, pc}

0800a658 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800a658:	b580      	push	{r7, lr}
 800a65a:	b082      	sub	sp, #8
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800a660:	46c0      	nop			; (mov r8, r8)
 800a662:	46bd      	mov	sp, r7
 800a664:	b002      	add	sp, #8
 800a666:	bd80      	pop	{r7, pc}

0800a668 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800a668:	b580      	push	{r7, lr}
 800a66a:	b082      	sub	sp, #8
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	2251      	movs	r2, #81	; 0x51
 800a674:	5c9b      	ldrb	r3, [r3, r2]
 800a676:	b2db      	uxtb	r3, r3
}
 800a678:	0018      	movs	r0, r3
 800a67a:	46bd      	mov	sp, r7
 800a67c:	b002      	add	sp, #8
 800a67e:	bd80      	pop	{r7, pc}

0800a680 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a680:	b580      	push	{r7, lr}
 800a682:	b086      	sub	sp, #24
 800a684:	af00      	add	r7, sp, #0
 800a686:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a68c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a68e:	f7fc fb2d 	bl	8006cec <HAL_GetTick>
 800a692:	0003      	movs	r3, r0
 800a694:	613b      	str	r3, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	2220      	movs	r2, #32
 800a69e:	4013      	ands	r3, r2
 800a6a0:	2b20      	cmp	r3, #32
 800a6a2:	d03c      	beq.n	800a71e <SPI_DMATransmitCplt+0x9e>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800a6a4:	697b      	ldr	r3, [r7, #20]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	685a      	ldr	r2, [r3, #4]
 800a6aa:	697b      	ldr	r3, [r7, #20]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	2120      	movs	r1, #32
 800a6b0:	438a      	bics	r2, r1
 800a6b2:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800a6b4:	697b      	ldr	r3, [r7, #20]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	685a      	ldr	r2, [r3, #4]
 800a6ba:	697b      	ldr	r3, [r7, #20]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	2102      	movs	r1, #2
 800a6c0:	438a      	bics	r2, r1
 800a6c2:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800a6c4:	693a      	ldr	r2, [r7, #16]
 800a6c6:	697b      	ldr	r3, [r7, #20]
 800a6c8:	2164      	movs	r1, #100	; 0x64
 800a6ca:	0018      	movs	r0, r3
 800a6cc:	f000 f92a 	bl	800a924 <SPI_EndRxTxTransaction>
 800a6d0:	1e03      	subs	r3, r0, #0
 800a6d2:	d005      	beq.n	800a6e0 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a6d4:	697b      	ldr	r3, [r7, #20]
 800a6d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6d8:	2220      	movs	r2, #32
 800a6da:	431a      	orrs	r2, r3
 800a6dc:	697b      	ldr	r3, [r7, #20]
 800a6de:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a6e0:	697b      	ldr	r3, [r7, #20]
 800a6e2:	689b      	ldr	r3, [r3, #8]
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d10a      	bne.n	800a6fe <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a6e8:	2300      	movs	r3, #0
 800a6ea:	60fb      	str	r3, [r7, #12]
 800a6ec:	697b      	ldr	r3, [r7, #20]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	68db      	ldr	r3, [r3, #12]
 800a6f2:	60fb      	str	r3, [r7, #12]
 800a6f4:	697b      	ldr	r3, [r7, #20]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	689b      	ldr	r3, [r3, #8]
 800a6fa:	60fb      	str	r3, [r7, #12]
 800a6fc:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800a6fe:	697b      	ldr	r3, [r7, #20]
 800a700:	2200      	movs	r2, #0
 800a702:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 800a704:	697b      	ldr	r3, [r7, #20]
 800a706:	2251      	movs	r2, #81	; 0x51
 800a708:	2101      	movs	r1, #1
 800a70a:	5499      	strb	r1, [r3, r2]

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a70c:	697b      	ldr	r3, [r7, #20]
 800a70e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a710:	2b00      	cmp	r3, #0
 800a712:	d004      	beq.n	800a71e <SPI_DMATransmitCplt+0x9e>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800a714:	697b      	ldr	r3, [r7, #20]
 800a716:	0018      	movs	r0, r3
 800a718:	f7ff ff9e 	bl	800a658 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800a71c:	e003      	b.n	800a726 <SPI_DMATransmitCplt+0xa6>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800a71e:	697b      	ldr	r3, [r7, #20]
 800a720:	0018      	movs	r0, r3
 800a722:	f7f7 fb03 	bl	8001d2c <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a726:	46bd      	mov	sp, r7
 800a728:	b006      	add	sp, #24
 800a72a:	bd80      	pop	{r7, pc}

0800a72c <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a72c:	b580      	push	{r7, lr}
 800a72e:	b084      	sub	sp, #16
 800a730:	af00      	add	r7, sp, #0
 800a732:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a738:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	0018      	movs	r0, r3
 800a73e:	f7ff ff83 	bl	800a648 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a742:	46c0      	nop			; (mov r8, r8)
 800a744:	46bd      	mov	sp, r7
 800a746:	b004      	add	sp, #16
 800a748:	bd80      	pop	{r7, pc}

0800a74a <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800a74a:	b580      	push	{r7, lr}
 800a74c:	b084      	sub	sp, #16
 800a74e:	af00      	add	r7, sp, #0
 800a750:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a756:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	685a      	ldr	r2, [r3, #4]
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	2103      	movs	r1, #3
 800a764:	438a      	bics	r2, r1
 800a766:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a76c:	2210      	movs	r2, #16
 800a76e:	431a      	orrs	r2, r3
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	2251      	movs	r2, #81	; 0x51
 800a778:	2101      	movs	r1, #1
 800a77a:	5499      	strb	r1, [r3, r2]
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	0018      	movs	r0, r3
 800a780:	f7ff ff6a 	bl	800a658 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a784:	46c0      	nop			; (mov r8, r8)
 800a786:	46bd      	mov	sp, r7
 800a788:	b004      	add	sp, #16
 800a78a:	bd80      	pop	{r7, pc}

0800a78c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a78c:	b580      	push	{r7, lr}
 800a78e:	b084      	sub	sp, #16
 800a790:	af00      	add	r7, sp, #0
 800a792:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a798:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	2200      	movs	r2, #0
 800a79e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	2200      	movs	r2, #0
 800a7a4:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	0018      	movs	r0, r3
 800a7aa:	f7ff ff55 	bl	800a658 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a7ae:	46c0      	nop			; (mov r8, r8)
 800a7b0:	46bd      	mov	sp, r7
 800a7b2:	b004      	add	sp, #16
 800a7b4:	bd80      	pop	{r7, pc}

0800a7b6 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800a7b6:	b580      	push	{r7, lr}
 800a7b8:	b082      	sub	sp, #8
 800a7ba:	af00      	add	r7, sp, #0
 800a7bc:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	330c      	adds	r3, #12
 800a7c8:	7812      	ldrb	r2, [r2, #0]
 800a7ca:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7d0:	1c5a      	adds	r2, r3, #1
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a7da:	b29b      	uxth	r3, r3
 800a7dc:	3b01      	subs	r3, #1
 800a7de:	b29a      	uxth	r2, r3
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a7e8:	b29b      	uxth	r3, r3
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d103      	bne.n	800a7f6 <SPI_TxISR_8BIT+0x40>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	0018      	movs	r0, r3
 800a7f2:	f000 f8d5 	bl	800a9a0 <SPI_CloseTx_ISR>
  }
}
 800a7f6:	46c0      	nop			; (mov r8, r8)
 800a7f8:	46bd      	mov	sp, r7
 800a7fa:	b002      	add	sp, #8
 800a7fc:	bd80      	pop	{r7, pc}

0800a7fe <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800a7fe:	b580      	push	{r7, lr}
 800a800:	b082      	sub	sp, #8
 800a802:	af00      	add	r7, sp, #0
 800a804:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a80a:	881a      	ldrh	r2, [r3, #0]
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a816:	1c9a      	adds	r2, r3, #2
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a820:	b29b      	uxth	r3, r3
 800a822:	3b01      	subs	r3, #1
 800a824:	b29a      	uxth	r2, r3
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a82e:	b29b      	uxth	r3, r3
 800a830:	2b00      	cmp	r3, #0
 800a832:	d103      	bne.n	800a83c <SPI_TxISR_16BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	0018      	movs	r0, r3
 800a838:	f000 f8b2 	bl	800a9a0 <SPI_CloseTx_ISR>
  }
}
 800a83c:	46c0      	nop			; (mov r8, r8)
 800a83e:	46bd      	mov	sp, r7
 800a840:	b002      	add	sp, #8
 800a842:	bd80      	pop	{r7, pc}

0800a844 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a844:	b580      	push	{r7, lr}
 800a846:	b084      	sub	sp, #16
 800a848:	af00      	add	r7, sp, #0
 800a84a:	60f8      	str	r0, [r7, #12]
 800a84c:	60b9      	str	r1, [r7, #8]
 800a84e:	603b      	str	r3, [r7, #0]
 800a850:	1dfb      	adds	r3, r7, #7
 800a852:	701a      	strb	r2, [r3, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a854:	e050      	b.n	800a8f8 <SPI_WaitFlagStateUntilTimeout+0xb4>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a856:	683b      	ldr	r3, [r7, #0]
 800a858:	3301      	adds	r3, #1
 800a85a:	d04d      	beq.n	800a8f8 <SPI_WaitFlagStateUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800a85c:	f7fc fa46 	bl	8006cec <HAL_GetTick>
 800a860:	0002      	movs	r2, r0
 800a862:	69bb      	ldr	r3, [r7, #24]
 800a864:	1ad3      	subs	r3, r2, r3
 800a866:	683a      	ldr	r2, [r7, #0]
 800a868:	429a      	cmp	r2, r3
 800a86a:	d902      	bls.n	800a872 <SPI_WaitFlagStateUntilTimeout+0x2e>
 800a86c:	683b      	ldr	r3, [r7, #0]
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d142      	bne.n	800a8f8 <SPI_WaitFlagStateUntilTimeout+0xb4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	685a      	ldr	r2, [r3, #4]
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	21e0      	movs	r1, #224	; 0xe0
 800a87e:	438a      	bics	r2, r1
 800a880:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	685a      	ldr	r2, [r3, #4]
 800a886:	2382      	movs	r3, #130	; 0x82
 800a888:	005b      	lsls	r3, r3, #1
 800a88a:	429a      	cmp	r2, r3
 800a88c:	d113      	bne.n	800a8b6 <SPI_WaitFlagStateUntilTimeout+0x72>
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	689a      	ldr	r2, [r3, #8]
 800a892:	2380      	movs	r3, #128	; 0x80
 800a894:	021b      	lsls	r3, r3, #8
 800a896:	429a      	cmp	r2, r3
 800a898:	d005      	beq.n	800a8a6 <SPI_WaitFlagStateUntilTimeout+0x62>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	689a      	ldr	r2, [r3, #8]
 800a89e:	2380      	movs	r3, #128	; 0x80
 800a8a0:	00db      	lsls	r3, r3, #3
 800a8a2:	429a      	cmp	r2, r3
 800a8a4:	d107      	bne.n	800a8b6 <SPI_WaitFlagStateUntilTimeout+0x72>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	681a      	ldr	r2, [r3, #0]
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	2140      	movs	r1, #64	; 0x40
 800a8b2:	438a      	bics	r2, r1
 800a8b4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a8ba:	2380      	movs	r3, #128	; 0x80
 800a8bc:	019b      	lsls	r3, r3, #6
 800a8be:	429a      	cmp	r2, r3
 800a8c0:	d110      	bne.n	800a8e4 <SPI_WaitFlagStateUntilTimeout+0xa0>
        {
          SPI_RESET_CRC(hspi);
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	681a      	ldr	r2, [r3, #0]
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	4914      	ldr	r1, [pc, #80]	; (800a920 <SPI_WaitFlagStateUntilTimeout+0xdc>)
 800a8ce:	400a      	ands	r2, r1
 800a8d0:	601a      	str	r2, [r3, #0]
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	681a      	ldr	r2, [r3, #0]
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	2180      	movs	r1, #128	; 0x80
 800a8de:	0189      	lsls	r1, r1, #6
 800a8e0:	430a      	orrs	r2, r1
 800a8e2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	2251      	movs	r2, #81	; 0x51
 800a8e8:	2101      	movs	r1, #1
 800a8ea:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	2250      	movs	r2, #80	; 0x50
 800a8f0:	2100      	movs	r1, #0
 800a8f2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800a8f4:	2303      	movs	r3, #3
 800a8f6:	e00f      	b.n	800a918 <SPI_WaitFlagStateUntilTimeout+0xd4>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	689b      	ldr	r3, [r3, #8]
 800a8fe:	68ba      	ldr	r2, [r7, #8]
 800a900:	4013      	ands	r3, r2
 800a902:	68ba      	ldr	r2, [r7, #8]
 800a904:	1ad3      	subs	r3, r2, r3
 800a906:	425a      	negs	r2, r3
 800a908:	4153      	adcs	r3, r2
 800a90a:	b2db      	uxtb	r3, r3
 800a90c:	001a      	movs	r2, r3
 800a90e:	1dfb      	adds	r3, r7, #7
 800a910:	781b      	ldrb	r3, [r3, #0]
 800a912:	429a      	cmp	r2, r3
 800a914:	d19f      	bne.n	800a856 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800a916:	2300      	movs	r3, #0
}
 800a918:	0018      	movs	r0, r3
 800a91a:	46bd      	mov	sp, r7
 800a91c:	b004      	add	sp, #16
 800a91e:	bd80      	pop	{r7, pc}
 800a920:	ffffdfff 	.word	0xffffdfff

0800a924 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a924:	b580      	push	{r7, lr}
 800a926:	b086      	sub	sp, #24
 800a928:	af02      	add	r7, sp, #8
 800a92a:	60f8      	str	r0, [r7, #12]
 800a92c:	60b9      	str	r1, [r7, #8]
 800a92e:	607a      	str	r2, [r7, #4]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	685a      	ldr	r2, [r3, #4]
 800a934:	2382      	movs	r3, #130	; 0x82
 800a936:	005b      	lsls	r3, r3, #1
 800a938:	429a      	cmp	r2, r3
 800a93a:	d112      	bne.n	800a962 <SPI_EndRxTxTransaction+0x3e>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a93c:	68ba      	ldr	r2, [r7, #8]
 800a93e:	68f8      	ldr	r0, [r7, #12]
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	9300      	str	r3, [sp, #0]
 800a944:	0013      	movs	r3, r2
 800a946:	2200      	movs	r2, #0
 800a948:	2180      	movs	r1, #128	; 0x80
 800a94a:	f7ff ff7b 	bl	800a844 <SPI_WaitFlagStateUntilTimeout>
 800a94e:	1e03      	subs	r3, r0, #0
 800a950:	d020      	beq.n	800a994 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a956:	2220      	movs	r2, #32
 800a958:	431a      	orrs	r2, r3
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800a95e:	2303      	movs	r3, #3
 800a960:	e019      	b.n	800a996 <SPI_EndRxTxTransaction+0x72>
    }
  }
  else
  {
    /* Control RXNE flag in case of Full-Duplex transfer */
    if (hspi->State == HAL_SPI_STATE_BUSY_TX_RX)
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	2251      	movs	r2, #81	; 0x51
 800a966:	5c9b      	ldrb	r3, [r3, r2]
 800a968:	b2db      	uxtb	r3, r3
 800a96a:	2b05      	cmp	r3, #5
 800a96c:	d112      	bne.n	800a994 <SPI_EndRxTxTransaction+0x70>
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800a96e:	68ba      	ldr	r2, [r7, #8]
 800a970:	68f8      	ldr	r0, [r7, #12]
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	9300      	str	r3, [sp, #0]
 800a976:	0013      	movs	r3, r2
 800a978:	2200      	movs	r2, #0
 800a97a:	2101      	movs	r1, #1
 800a97c:	f7ff ff62 	bl	800a844 <SPI_WaitFlagStateUntilTimeout>
 800a980:	1e03      	subs	r3, r0, #0
 800a982:	d007      	beq.n	800a994 <SPI_EndRxTxTransaction+0x70>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a988:	2220      	movs	r2, #32
 800a98a:	431a      	orrs	r2, r3
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800a990:	2303      	movs	r3, #3
 800a992:	e000      	b.n	800a996 <SPI_EndRxTxTransaction+0x72>
      }
    }
  }
  return HAL_OK;
 800a994:	2300      	movs	r3, #0
}
 800a996:	0018      	movs	r0, r3
 800a998:	46bd      	mov	sp, r7
 800a99a:	b004      	add	sp, #16
 800a99c:	bd80      	pop	{r7, pc}
	...

0800a9a0 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 800a9a0:	b580      	push	{r7, lr}
 800a9a2:	b086      	sub	sp, #24
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 800a9a8:	4b2d      	ldr	r3, [pc, #180]	; (800aa60 <SPI_CloseTx_ISR+0xc0>)
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	492d      	ldr	r1, [pc, #180]	; (800aa64 <SPI_CloseTx_ISR+0xc4>)
 800a9ae:	0018      	movs	r0, r3
 800a9b0:	f7f5 fbb2 	bl	8000118 <__udivsi3>
 800a9b4:	0003      	movs	r3, r0
 800a9b6:	001a      	movs	r2, r3
 800a9b8:	2364      	movs	r3, #100	; 0x64
 800a9ba:	4353      	muls	r3, r2
 800a9bc:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a9be:	f7fc f995 	bl	8006cec <HAL_GetTick>
 800a9c2:	0003      	movs	r3, r0
 800a9c4:	617b      	str	r3, [r7, #20]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800a9c6:	693b      	ldr	r3, [r7, #16]
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d106      	bne.n	800a9da <SPI_CloseTx_ISR+0x3a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a9d0:	2220      	movs	r2, #32
 800a9d2:	431a      	orrs	r2, r3
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a9d8:	e008      	b.n	800a9ec <SPI_CloseTx_ISR+0x4c>
    }
    count--;
 800a9da:	693b      	ldr	r3, [r7, #16]
 800a9dc:	3b01      	subs	r3, #1
 800a9de:	613b      	str	r3, [r7, #16]
  }
  while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	689b      	ldr	r3, [r3, #8]
 800a9e6:	2202      	movs	r2, #2
 800a9e8:	4013      	ands	r3, r2
 800a9ea:	d0ec      	beq.n	800a9c6 <SPI_CloseTx_ISR+0x26>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	685a      	ldr	r2, [r3, #4]
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	21a0      	movs	r1, #160	; 0xa0
 800a9f8:	438a      	bics	r2, r1
 800a9fa:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800a9fc:	697a      	ldr	r2, [r7, #20]
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	2164      	movs	r1, #100	; 0x64
 800aa02:	0018      	movs	r0, r3
 800aa04:	f7ff ff8e 	bl	800a924 <SPI_EndRxTxTransaction>
 800aa08:	1e03      	subs	r3, r0, #0
 800aa0a:	d005      	beq.n	800aa18 <SPI_CloseTx_ISR+0x78>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa10:	2220      	movs	r2, #32
 800aa12:	431a      	orrs	r2, r3
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	689b      	ldr	r3, [r3, #8]
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d10a      	bne.n	800aa36 <SPI_CloseTx_ISR+0x96>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800aa20:	2300      	movs	r3, #0
 800aa22:	60fb      	str	r3, [r7, #12]
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	68db      	ldr	r3, [r3, #12]
 800aa2a:	60fb      	str	r3, [r7, #12]
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	689b      	ldr	r3, [r3, #8]
 800aa32:	60fb      	str	r3, [r7, #12]
 800aa34:	68fb      	ldr	r3, [r7, #12]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	2251      	movs	r2, #81	; 0x51
 800aa3a:	2101      	movs	r1, #1
 800aa3c:	5499      	strb	r1, [r3, r2]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d004      	beq.n	800aa50 <SPI_CloseTx_ISR+0xb0>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	0018      	movs	r0, r3
 800aa4a:	f7ff fe05 	bl	800a658 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 800aa4e:	e003      	b.n	800aa58 <SPI_CloseTx_ISR+0xb8>
    HAL_SPI_TxCpltCallback(hspi);
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	0018      	movs	r0, r3
 800aa54:	f7f7 f96a 	bl	8001d2c <HAL_SPI_TxCpltCallback>
}
 800aa58:	46c0      	nop			; (mov r8, r8)
 800aa5a:	46bd      	mov	sp, r7
 800aa5c:	b006      	add	sp, #24
 800aa5e:	bd80      	pop	{r7, pc}
 800aa60:	20000010 	.word	0x20000010
 800aa64:	00005dc0 	.word	0x00005dc0

0800aa68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800aa68:	b580      	push	{r7, lr}
 800aa6a:	b082      	sub	sp, #8
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d101      	bne.n	800aa7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800aa76:	2301      	movs	r3, #1
 800aa78:	e01e      	b.n	800aab8 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	2239      	movs	r2, #57	; 0x39
 800aa7e:	5c9b      	ldrb	r3, [r3, r2]
 800aa80:	b2db      	uxtb	r3, r3
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d107      	bne.n	800aa96 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	2238      	movs	r2, #56	; 0x38
 800aa8a:	2100      	movs	r1, #0
 800aa8c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	0018      	movs	r0, r3
 800aa92:	f7f9 fe4b 	bl	800472c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	2239      	movs	r2, #57	; 0x39
 800aa9a:	2102      	movs	r1, #2
 800aa9c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	681a      	ldr	r2, [r3, #0]
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	3304      	adds	r3, #4
 800aaa6:	0019      	movs	r1, r3
 800aaa8:	0010      	movs	r0, r2
 800aaaa:	f000 fc65 	bl	800b378 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	2239      	movs	r2, #57	; 0x39
 800aab2:	2101      	movs	r1, #1
 800aab4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800aab6:	2300      	movs	r3, #0
}
 800aab8:	0018      	movs	r0, r3
 800aaba:	46bd      	mov	sp, r7
 800aabc:	b002      	add	sp, #8
 800aabe:	bd80      	pop	{r7, pc}

0800aac0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800aac0:	b580      	push	{r7, lr}
 800aac2:	b084      	sub	sp, #16
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	68da      	ldr	r2, [r3, #12]
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	2101      	movs	r1, #1
 800aad4:	430a      	orrs	r2, r1
 800aad6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	689b      	ldr	r3, [r3, #8]
 800aade:	2207      	movs	r2, #7
 800aae0:	4013      	ands	r3, r2
 800aae2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	2b06      	cmp	r3, #6
 800aae8:	d007      	beq.n	800aafa <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	681a      	ldr	r2, [r3, #0]
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	2101      	movs	r1, #1
 800aaf6:	430a      	orrs	r2, r1
 800aaf8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800aafa:	2300      	movs	r3, #0
}
 800aafc:	0018      	movs	r0, r3
 800aafe:	46bd      	mov	sp, r7
 800ab00:	b004      	add	sp, #16
 800ab02:	bd80      	pop	{r7, pc}

0800ab04 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800ab04:	b580      	push	{r7, lr}
 800ab06:	b082      	sub	sp, #8
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	68da      	ldr	r2, [r3, #12]
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	2101      	movs	r1, #1
 800ab18:	438a      	bics	r2, r1
 800ab1a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	6a1b      	ldr	r3, [r3, #32]
 800ab22:	4a08      	ldr	r2, [pc, #32]	; (800ab44 <HAL_TIM_Base_Stop_IT+0x40>)
 800ab24:	4013      	ands	r3, r2
 800ab26:	d107      	bne.n	800ab38 <HAL_TIM_Base_Stop_IT+0x34>
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	681a      	ldr	r2, [r3, #0]
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	2101      	movs	r1, #1
 800ab34:	438a      	bics	r2, r1
 800ab36:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800ab38:	2300      	movs	r3, #0
}
 800ab3a:	0018      	movs	r0, r3
 800ab3c:	46bd      	mov	sp, r7
 800ab3e:	b002      	add	sp, #8
 800ab40:	bd80      	pop	{r7, pc}
 800ab42:	46c0      	nop			; (mov r8, r8)
 800ab44:	00001111 	.word	0x00001111

0800ab48 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800ab48:	b580      	push	{r7, lr}
 800ab4a:	b082      	sub	sp, #8
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d101      	bne.n	800ab5a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800ab56:	2301      	movs	r3, #1
 800ab58:	e01e      	b.n	800ab98 <HAL_TIM_OC_Init+0x50>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	2239      	movs	r2, #57	; 0x39
 800ab5e:	5c9b      	ldrb	r3, [r3, r2]
 800ab60:	b2db      	uxtb	r3, r3
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d107      	bne.n	800ab76 <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	2238      	movs	r2, #56	; 0x38
 800ab6a:	2100      	movs	r1, #0
 800ab6c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	0018      	movs	r0, r3
 800ab72:	f000 f815 	bl	800aba0 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	2239      	movs	r2, #57	; 0x39
 800ab7a:	2102      	movs	r1, #2
 800ab7c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	681a      	ldr	r2, [r3, #0]
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	3304      	adds	r3, #4
 800ab86:	0019      	movs	r1, r3
 800ab88:	0010      	movs	r0, r2
 800ab8a:	f000 fbf5 	bl	800b378 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	2239      	movs	r2, #57	; 0x39
 800ab92:	2101      	movs	r1, #1
 800ab94:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800ab96:	2300      	movs	r3, #0
}
 800ab98:	0018      	movs	r0, r3
 800ab9a:	46bd      	mov	sp, r7
 800ab9c:	b002      	add	sp, #8
 800ab9e:	bd80      	pop	{r7, pc}

0800aba0 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800aba0:	b580      	push	{r7, lr}
 800aba2:	b082      	sub	sp, #8
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800aba8:	46c0      	nop			; (mov r8, r8)
 800abaa:	46bd      	mov	sp, r7
 800abac:	b002      	add	sp, #8
 800abae:	bd80      	pop	{r7, pc}

0800abb0 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800abb0:	b580      	push	{r7, lr}
 800abb2:	b084      	sub	sp, #16
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	6078      	str	r0, [r7, #4]
 800abb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800abba:	683b      	ldr	r3, [r7, #0]
 800abbc:	2b04      	cmp	r3, #4
 800abbe:	d011      	beq.n	800abe4 <HAL_TIM_OC_Start_IT+0x34>
 800abc0:	d802      	bhi.n	800abc8 <HAL_TIM_OC_Start_IT+0x18>
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d005      	beq.n	800abd2 <HAL_TIM_OC_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
      break;
    }

    default:
      break;
 800abc6:	e028      	b.n	800ac1a <HAL_TIM_OC_Start_IT+0x6a>
  switch (Channel)
 800abc8:	2b08      	cmp	r3, #8
 800abca:	d014      	beq.n	800abf6 <HAL_TIM_OC_Start_IT+0x46>
 800abcc:	2b0c      	cmp	r3, #12
 800abce:	d01b      	beq.n	800ac08 <HAL_TIM_OC_Start_IT+0x58>
      break;
 800abd0:	e023      	b.n	800ac1a <HAL_TIM_OC_Start_IT+0x6a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	68da      	ldr	r2, [r3, #12]
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	2102      	movs	r1, #2
 800abde:	430a      	orrs	r2, r1
 800abe0:	60da      	str	r2, [r3, #12]
      break;
 800abe2:	e01a      	b.n	800ac1a <HAL_TIM_OC_Start_IT+0x6a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	68da      	ldr	r2, [r3, #12]
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	2104      	movs	r1, #4
 800abf0:	430a      	orrs	r2, r1
 800abf2:	60da      	str	r2, [r3, #12]
      break;
 800abf4:	e011      	b.n	800ac1a <HAL_TIM_OC_Start_IT+0x6a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	68da      	ldr	r2, [r3, #12]
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	2108      	movs	r1, #8
 800ac02:	430a      	orrs	r2, r1
 800ac04:	60da      	str	r2, [r3, #12]
      break;
 800ac06:	e008      	b.n	800ac1a <HAL_TIM_OC_Start_IT+0x6a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	68da      	ldr	r2, [r3, #12]
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	2110      	movs	r1, #16
 800ac14:	430a      	orrs	r2, r1
 800ac16:	60da      	str	r2, [r3, #12]
      break;
 800ac18:	46c0      	nop			; (mov r8, r8)
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	6839      	ldr	r1, [r7, #0]
 800ac20:	2201      	movs	r2, #1
 800ac22:	0018      	movs	r0, r3
 800ac24:	f000 fda4 	bl	800b770 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	689b      	ldr	r3, [r3, #8]
 800ac2e:	2207      	movs	r2, #7
 800ac30:	4013      	ands	r3, r2
 800ac32:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	2b06      	cmp	r3, #6
 800ac38:	d007      	beq.n	800ac4a <HAL_TIM_OC_Start_IT+0x9a>
  {
    __HAL_TIM_ENABLE(htim);
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	681a      	ldr	r2, [r3, #0]
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	2101      	movs	r1, #1
 800ac46:	430a      	orrs	r2, r1
 800ac48:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ac4a:	2300      	movs	r3, #0
}
 800ac4c:	0018      	movs	r0, r3
 800ac4e:	46bd      	mov	sp, r7
 800ac50:	b004      	add	sp, #16
 800ac52:	bd80      	pop	{r7, pc}

0800ac54 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ac54:	b580      	push	{r7, lr}
 800ac56:	b082      	sub	sp, #8
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	6078      	str	r0, [r7, #4]
 800ac5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800ac5e:	683b      	ldr	r3, [r7, #0]
 800ac60:	2b04      	cmp	r3, #4
 800ac62:	d011      	beq.n	800ac88 <HAL_TIM_OC_Stop_IT+0x34>
 800ac64:	d802      	bhi.n	800ac6c <HAL_TIM_OC_Stop_IT+0x18>
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d005      	beq.n	800ac76 <HAL_TIM_OC_Stop_IT+0x22>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
      break;
    }

    default:
      break;
 800ac6a:	e028      	b.n	800acbe <HAL_TIM_OC_Stop_IT+0x6a>
  switch (Channel)
 800ac6c:	2b08      	cmp	r3, #8
 800ac6e:	d014      	beq.n	800ac9a <HAL_TIM_OC_Stop_IT+0x46>
 800ac70:	2b0c      	cmp	r3, #12
 800ac72:	d01b      	beq.n	800acac <HAL_TIM_OC_Stop_IT+0x58>
      break;
 800ac74:	e023      	b.n	800acbe <HAL_TIM_OC_Stop_IT+0x6a>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	68da      	ldr	r2, [r3, #12]
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	2102      	movs	r1, #2
 800ac82:	438a      	bics	r2, r1
 800ac84:	60da      	str	r2, [r3, #12]
      break;
 800ac86:	e01a      	b.n	800acbe <HAL_TIM_OC_Stop_IT+0x6a>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	68da      	ldr	r2, [r3, #12]
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	2104      	movs	r1, #4
 800ac94:	438a      	bics	r2, r1
 800ac96:	60da      	str	r2, [r3, #12]
      break;
 800ac98:	e011      	b.n	800acbe <HAL_TIM_OC_Stop_IT+0x6a>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	68da      	ldr	r2, [r3, #12]
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	2108      	movs	r1, #8
 800aca6:	438a      	bics	r2, r1
 800aca8:	60da      	str	r2, [r3, #12]
      break;
 800acaa:	e008      	b.n	800acbe <HAL_TIM_OC_Stop_IT+0x6a>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	68da      	ldr	r2, [r3, #12]
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	2110      	movs	r1, #16
 800acb8:	438a      	bics	r2, r1
 800acba:	60da      	str	r2, [r3, #12]
      break;
 800acbc:	46c0      	nop			; (mov r8, r8)
  }

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	6839      	ldr	r1, [r7, #0]
 800acc4:	2200      	movs	r2, #0
 800acc6:	0018      	movs	r0, r3
 800acc8:	f000 fd52 	bl	800b770 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	6a1b      	ldr	r3, [r3, #32]
 800acd2:	4a08      	ldr	r2, [pc, #32]	; (800acf4 <HAL_TIM_OC_Stop_IT+0xa0>)
 800acd4:	4013      	ands	r3, r2
 800acd6:	d107      	bne.n	800ace8 <HAL_TIM_OC_Stop_IT+0x94>
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	681a      	ldr	r2, [r3, #0]
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	2101      	movs	r1, #1
 800ace4:	438a      	bics	r2, r1
 800ace6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800ace8:	2300      	movs	r3, #0
}
 800acea:	0018      	movs	r0, r3
 800acec:	46bd      	mov	sp, r7
 800acee:	b002      	add	sp, #8
 800acf0:	bd80      	pop	{r7, pc}
 800acf2:	46c0      	nop			; (mov r8, r8)
 800acf4:	00001111 	.word	0x00001111

0800acf8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800acf8:	b580      	push	{r7, lr}
 800acfa:	b082      	sub	sp, #8
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d101      	bne.n	800ad0a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ad06:	2301      	movs	r3, #1
 800ad08:	e01e      	b.n	800ad48 <HAL_TIM_PWM_Init+0x50>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	2239      	movs	r2, #57	; 0x39
 800ad0e:	5c9b      	ldrb	r3, [r3, r2]
 800ad10:	b2db      	uxtb	r3, r3
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d107      	bne.n	800ad26 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	2238      	movs	r2, #56	; 0x38
 800ad1a:	2100      	movs	r1, #0
 800ad1c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	0018      	movs	r0, r3
 800ad22:	f000 f815 	bl	800ad50 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	2239      	movs	r2, #57	; 0x39
 800ad2a:	2102      	movs	r1, #2
 800ad2c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	681a      	ldr	r2, [r3, #0]
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	3304      	adds	r3, #4
 800ad36:	0019      	movs	r1, r3
 800ad38:	0010      	movs	r0, r2
 800ad3a:	f000 fb1d 	bl	800b378 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	2239      	movs	r2, #57	; 0x39
 800ad42:	2101      	movs	r1, #1
 800ad44:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800ad46:	2300      	movs	r3, #0
}
 800ad48:	0018      	movs	r0, r3
 800ad4a:	46bd      	mov	sp, r7
 800ad4c:	b002      	add	sp, #8
 800ad4e:	bd80      	pop	{r7, pc}

0800ad50 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800ad50:	b580      	push	{r7, lr}
 800ad52:	b082      	sub	sp, #8
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800ad58:	46c0      	nop			; (mov r8, r8)
 800ad5a:	46bd      	mov	sp, r7
 800ad5c:	b002      	add	sp, #8
 800ad5e:	bd80      	pop	{r7, pc}

0800ad60 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ad60:	b580      	push	{r7, lr}
 800ad62:	b084      	sub	sp, #16
 800ad64:	af00      	add	r7, sp, #0
 800ad66:	6078      	str	r0, [r7, #4]
 800ad68:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	6839      	ldr	r1, [r7, #0]
 800ad70:	2201      	movs	r2, #1
 800ad72:	0018      	movs	r0, r3
 800ad74:	f000 fcfc 	bl	800b770 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	689b      	ldr	r3, [r3, #8]
 800ad7e:	2207      	movs	r2, #7
 800ad80:	4013      	ands	r3, r2
 800ad82:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	2b06      	cmp	r3, #6
 800ad88:	d007      	beq.n	800ad9a <HAL_TIM_PWM_Start+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	681a      	ldr	r2, [r3, #0]
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	2101      	movs	r1, #1
 800ad96:	430a      	orrs	r2, r1
 800ad98:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ad9a:	2300      	movs	r3, #0
}
 800ad9c:	0018      	movs	r0, r3
 800ad9e:	46bd      	mov	sp, r7
 800ada0:	b004      	add	sp, #16
 800ada2:	bd80      	pop	{r7, pc}

0800ada4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ada4:	b580      	push	{r7, lr}
 800ada6:	b082      	sub	sp, #8
 800ada8:	af00      	add	r7, sp, #0
 800adaa:	6078      	str	r0, [r7, #4]
 800adac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	6839      	ldr	r1, [r7, #0]
 800adb4:	2200      	movs	r2, #0
 800adb6:	0018      	movs	r0, r3
 800adb8:	f000 fcda 	bl	800b770 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	6a1b      	ldr	r3, [r3, #32]
 800adc2:	4a0a      	ldr	r2, [pc, #40]	; (800adec <HAL_TIM_PWM_Stop+0x48>)
 800adc4:	4013      	ands	r3, r2
 800adc6:	d107      	bne.n	800add8 <HAL_TIM_PWM_Stop+0x34>
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	681a      	ldr	r2, [r3, #0]
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	2101      	movs	r1, #1
 800add4:	438a      	bics	r2, r1
 800add6:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	2239      	movs	r2, #57	; 0x39
 800addc:	2101      	movs	r1, #1
 800adde:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800ade0:	2300      	movs	r3, #0
}
 800ade2:	0018      	movs	r0, r3
 800ade4:	46bd      	mov	sp, r7
 800ade6:	b002      	add	sp, #8
 800ade8:	bd80      	pop	{r7, pc}
 800adea:	46c0      	nop			; (mov r8, r8)
 800adec:	00001111 	.word	0x00001111

0800adf0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800adf0:	b580      	push	{r7, lr}
 800adf2:	b082      	sub	sp, #8
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	691b      	ldr	r3, [r3, #16]
 800adfe:	2202      	movs	r2, #2
 800ae00:	4013      	ands	r3, r2
 800ae02:	2b02      	cmp	r3, #2
 800ae04:	d124      	bne.n	800ae50 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	68db      	ldr	r3, [r3, #12]
 800ae0c:	2202      	movs	r2, #2
 800ae0e:	4013      	ands	r3, r2
 800ae10:	2b02      	cmp	r3, #2
 800ae12:	d11d      	bne.n	800ae50 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	2203      	movs	r2, #3
 800ae1a:	4252      	negs	r2, r2
 800ae1c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	2201      	movs	r2, #1
 800ae22:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	699b      	ldr	r3, [r3, #24]
 800ae2a:	2203      	movs	r2, #3
 800ae2c:	4013      	ands	r3, r2
 800ae2e:	d004      	beq.n	800ae3a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	0018      	movs	r0, r3
 800ae34:	f000 fa88 	bl	800b348 <HAL_TIM_IC_CaptureCallback>
 800ae38:	e007      	b.n	800ae4a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	0018      	movs	r0, r3
 800ae3e:	f7f9 fe65 	bl	8004b0c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	0018      	movs	r0, r3
 800ae46:	f000 fa87 	bl	800b358 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	2200      	movs	r2, #0
 800ae4e:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	691b      	ldr	r3, [r3, #16]
 800ae56:	2204      	movs	r2, #4
 800ae58:	4013      	ands	r3, r2
 800ae5a:	2b04      	cmp	r3, #4
 800ae5c:	d125      	bne.n	800aeaa <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	68db      	ldr	r3, [r3, #12]
 800ae64:	2204      	movs	r2, #4
 800ae66:	4013      	ands	r3, r2
 800ae68:	2b04      	cmp	r3, #4
 800ae6a:	d11e      	bne.n	800aeaa <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	2205      	movs	r2, #5
 800ae72:	4252      	negs	r2, r2
 800ae74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	2202      	movs	r2, #2
 800ae7a:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	699a      	ldr	r2, [r3, #24]
 800ae82:	23c0      	movs	r3, #192	; 0xc0
 800ae84:	009b      	lsls	r3, r3, #2
 800ae86:	4013      	ands	r3, r2
 800ae88:	d004      	beq.n	800ae94 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	0018      	movs	r0, r3
 800ae8e:	f000 fa5b 	bl	800b348 <HAL_TIM_IC_CaptureCallback>
 800ae92:	e007      	b.n	800aea4 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	0018      	movs	r0, r3
 800ae98:	f7f9 fe38 	bl	8004b0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	0018      	movs	r0, r3
 800aea0:	f000 fa5a 	bl	800b358 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	2200      	movs	r2, #0
 800aea8:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	691b      	ldr	r3, [r3, #16]
 800aeb0:	2208      	movs	r2, #8
 800aeb2:	4013      	ands	r3, r2
 800aeb4:	2b08      	cmp	r3, #8
 800aeb6:	d124      	bne.n	800af02 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	68db      	ldr	r3, [r3, #12]
 800aebe:	2208      	movs	r2, #8
 800aec0:	4013      	ands	r3, r2
 800aec2:	2b08      	cmp	r3, #8
 800aec4:	d11d      	bne.n	800af02 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	2209      	movs	r2, #9
 800aecc:	4252      	negs	r2, r2
 800aece:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	2204      	movs	r2, #4
 800aed4:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	69db      	ldr	r3, [r3, #28]
 800aedc:	2203      	movs	r2, #3
 800aede:	4013      	ands	r3, r2
 800aee0:	d004      	beq.n	800aeec <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	0018      	movs	r0, r3
 800aee6:	f000 fa2f 	bl	800b348 <HAL_TIM_IC_CaptureCallback>
 800aeea:	e007      	b.n	800aefc <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	0018      	movs	r0, r3
 800aef0:	f7f9 fe0c 	bl	8004b0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	0018      	movs	r0, r3
 800aef8:	f000 fa2e 	bl	800b358 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	2200      	movs	r2, #0
 800af00:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	691b      	ldr	r3, [r3, #16]
 800af08:	2210      	movs	r2, #16
 800af0a:	4013      	ands	r3, r2
 800af0c:	2b10      	cmp	r3, #16
 800af0e:	d125      	bne.n	800af5c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	68db      	ldr	r3, [r3, #12]
 800af16:	2210      	movs	r2, #16
 800af18:	4013      	ands	r3, r2
 800af1a:	2b10      	cmp	r3, #16
 800af1c:	d11e      	bne.n	800af5c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	2211      	movs	r2, #17
 800af24:	4252      	negs	r2, r2
 800af26:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	2208      	movs	r2, #8
 800af2c:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	69da      	ldr	r2, [r3, #28]
 800af34:	23c0      	movs	r3, #192	; 0xc0
 800af36:	009b      	lsls	r3, r3, #2
 800af38:	4013      	ands	r3, r2
 800af3a:	d004      	beq.n	800af46 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	0018      	movs	r0, r3
 800af40:	f000 fa02 	bl	800b348 <HAL_TIM_IC_CaptureCallback>
 800af44:	e007      	b.n	800af56 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	0018      	movs	r0, r3
 800af4a:	f7f9 fddf 	bl	8004b0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	0018      	movs	r0, r3
 800af52:	f000 fa01 	bl	800b358 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	2200      	movs	r2, #0
 800af5a:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	691b      	ldr	r3, [r3, #16]
 800af62:	2201      	movs	r2, #1
 800af64:	4013      	ands	r3, r2
 800af66:	2b01      	cmp	r3, #1
 800af68:	d10f      	bne.n	800af8a <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	68db      	ldr	r3, [r3, #12]
 800af70:	2201      	movs	r2, #1
 800af72:	4013      	ands	r3, r2
 800af74:	2b01      	cmp	r3, #1
 800af76:	d108      	bne.n	800af8a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	2202      	movs	r2, #2
 800af7e:	4252      	negs	r2, r2
 800af80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	0018      	movs	r0, r3
 800af86:	f7f9 fd85 	bl	8004a94 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	691b      	ldr	r3, [r3, #16]
 800af90:	2240      	movs	r2, #64	; 0x40
 800af92:	4013      	ands	r3, r2
 800af94:	2b40      	cmp	r3, #64	; 0x40
 800af96:	d10f      	bne.n	800afb8 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	68db      	ldr	r3, [r3, #12]
 800af9e:	2240      	movs	r2, #64	; 0x40
 800afa0:	4013      	ands	r3, r2
 800afa2:	2b40      	cmp	r3, #64	; 0x40
 800afa4:	d108      	bne.n	800afb8 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	2241      	movs	r2, #65	; 0x41
 800afac:	4252      	negs	r2, r2
 800afae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	0018      	movs	r0, r3
 800afb4:	f000 f9d8 	bl	800b368 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800afb8:	46c0      	nop			; (mov r8, r8)
 800afba:	46bd      	mov	sp, r7
 800afbc:	b002      	add	sp, #8
 800afbe:	bd80      	pop	{r7, pc}

0800afc0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800afc0:	b580      	push	{r7, lr}
 800afc2:	b084      	sub	sp, #16
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	60f8      	str	r0, [r7, #12]
 800afc8:	60b9      	str	r1, [r7, #8]
 800afca:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	2238      	movs	r2, #56	; 0x38
 800afd0:	5c9b      	ldrb	r3, [r3, r2]
 800afd2:	2b01      	cmp	r3, #1
 800afd4:	d101      	bne.n	800afda <HAL_TIM_OC_ConfigChannel+0x1a>
 800afd6:	2302      	movs	r3, #2
 800afd8:	e03c      	b.n	800b054 <HAL_TIM_OC_ConfigChannel+0x94>
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	2238      	movs	r2, #56	; 0x38
 800afde:	2101      	movs	r1, #1
 800afe0:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	2239      	movs	r2, #57	; 0x39
 800afe6:	2102      	movs	r1, #2
 800afe8:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	2b04      	cmp	r3, #4
 800afee:	d010      	beq.n	800b012 <HAL_TIM_OC_ConfigChannel+0x52>
 800aff0:	d802      	bhi.n	800aff8 <HAL_TIM_OC_ConfigChannel+0x38>
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d005      	beq.n	800b002 <HAL_TIM_OC_ConfigChannel+0x42>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
      break;
    }

    default:
      break;
 800aff6:	e024      	b.n	800b042 <HAL_TIM_OC_ConfigChannel+0x82>
  switch (Channel)
 800aff8:	2b08      	cmp	r3, #8
 800affa:	d012      	beq.n	800b022 <HAL_TIM_OC_ConfigChannel+0x62>
 800affc:	2b0c      	cmp	r3, #12
 800affe:	d018      	beq.n	800b032 <HAL_TIM_OC_ConfigChannel+0x72>
      break;
 800b000:	e01f      	b.n	800b042 <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	68ba      	ldr	r2, [r7, #8]
 800b008:	0011      	movs	r1, r2
 800b00a:	0018      	movs	r0, r3
 800b00c:	f000 fa12 	bl	800b434 <TIM_OC1_SetConfig>
      break;
 800b010:	e017      	b.n	800b042 <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	68ba      	ldr	r2, [r7, #8]
 800b018:	0011      	movs	r1, r2
 800b01a:	0018      	movs	r0, r3
 800b01c:	f000 fa46 	bl	800b4ac <TIM_OC2_SetConfig>
      break;
 800b020:	e00f      	b.n	800b042 <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	68ba      	ldr	r2, [r7, #8]
 800b028:	0011      	movs	r1, r2
 800b02a:	0018      	movs	r0, r3
 800b02c:	f000 fa80 	bl	800b530 <TIM_OC3_SetConfig>
      break;
 800b030:	e007      	b.n	800b042 <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	68ba      	ldr	r2, [r7, #8]
 800b038:	0011      	movs	r1, r2
 800b03a:	0018      	movs	r0, r3
 800b03c:	f000 fab8 	bl	800b5b0 <TIM_OC4_SetConfig>
      break;
 800b040:	46c0      	nop			; (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	2239      	movs	r2, #57	; 0x39
 800b046:	2101      	movs	r1, #1
 800b048:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	2238      	movs	r2, #56	; 0x38
 800b04e:	2100      	movs	r1, #0
 800b050:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b052:	2300      	movs	r3, #0
}
 800b054:	0018      	movs	r0, r3
 800b056:	46bd      	mov	sp, r7
 800b058:	b004      	add	sp, #16
 800b05a:	bd80      	pop	{r7, pc}

0800b05c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b05c:	b580      	push	{r7, lr}
 800b05e:	b084      	sub	sp, #16
 800b060:	af00      	add	r7, sp, #0
 800b062:	60f8      	str	r0, [r7, #12]
 800b064:	60b9      	str	r1, [r7, #8]
 800b066:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	2238      	movs	r2, #56	; 0x38
 800b06c:	5c9b      	ldrb	r3, [r3, r2]
 800b06e:	2b01      	cmp	r3, #1
 800b070:	d101      	bne.n	800b076 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800b072:	2302      	movs	r3, #2
 800b074:	e0a4      	b.n	800b1c0 <HAL_TIM_PWM_ConfigChannel+0x164>
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	2238      	movs	r2, #56	; 0x38
 800b07a:	2101      	movs	r1, #1
 800b07c:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	2239      	movs	r2, #57	; 0x39
 800b082:	2102      	movs	r1, #2
 800b084:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	2b04      	cmp	r3, #4
 800b08a:	d029      	beq.n	800b0e0 <HAL_TIM_PWM_ConfigChannel+0x84>
 800b08c:	d802      	bhi.n	800b094 <HAL_TIM_PWM_ConfigChannel+0x38>
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d005      	beq.n	800b09e <HAL_TIM_PWM_ConfigChannel+0x42>
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
      break;
    }

    default:
      break;
 800b092:	e08c      	b.n	800b1ae <HAL_TIM_PWM_ConfigChannel+0x152>
  switch (Channel)
 800b094:	2b08      	cmp	r3, #8
 800b096:	d046      	beq.n	800b126 <HAL_TIM_PWM_ConfigChannel+0xca>
 800b098:	2b0c      	cmp	r3, #12
 800b09a:	d065      	beq.n	800b168 <HAL_TIM_PWM_ConfigChannel+0x10c>
      break;
 800b09c:	e087      	b.n	800b1ae <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	68ba      	ldr	r2, [r7, #8]
 800b0a4:	0011      	movs	r1, r2
 800b0a6:	0018      	movs	r0, r3
 800b0a8:	f000 f9c4 	bl	800b434 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	699a      	ldr	r2, [r3, #24]
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	2108      	movs	r1, #8
 800b0b8:	430a      	orrs	r2, r1
 800b0ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	699a      	ldr	r2, [r3, #24]
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	2104      	movs	r1, #4
 800b0c8:	438a      	bics	r2, r1
 800b0ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	6999      	ldr	r1, [r3, #24]
 800b0d2:	68bb      	ldr	r3, [r7, #8]
 800b0d4:	68da      	ldr	r2, [r3, #12]
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	430a      	orrs	r2, r1
 800b0dc:	619a      	str	r2, [r3, #24]
      break;
 800b0de:	e066      	b.n	800b1ae <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	68ba      	ldr	r2, [r7, #8]
 800b0e6:	0011      	movs	r1, r2
 800b0e8:	0018      	movs	r0, r3
 800b0ea:	f000 f9df 	bl	800b4ac <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	699a      	ldr	r2, [r3, #24]
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	2180      	movs	r1, #128	; 0x80
 800b0fa:	0109      	lsls	r1, r1, #4
 800b0fc:	430a      	orrs	r2, r1
 800b0fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	699a      	ldr	r2, [r3, #24]
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	492f      	ldr	r1, [pc, #188]	; (800b1c8 <HAL_TIM_PWM_ConfigChannel+0x16c>)
 800b10c:	400a      	ands	r2, r1
 800b10e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	6999      	ldr	r1, [r3, #24]
 800b116:	68bb      	ldr	r3, [r7, #8]
 800b118:	68db      	ldr	r3, [r3, #12]
 800b11a:	021a      	lsls	r2, r3, #8
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	430a      	orrs	r2, r1
 800b122:	619a      	str	r2, [r3, #24]
      break;
 800b124:	e043      	b.n	800b1ae <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	68ba      	ldr	r2, [r7, #8]
 800b12c:	0011      	movs	r1, r2
 800b12e:	0018      	movs	r0, r3
 800b130:	f000 f9fe 	bl	800b530 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	69da      	ldr	r2, [r3, #28]
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	2108      	movs	r1, #8
 800b140:	430a      	orrs	r2, r1
 800b142:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	69da      	ldr	r2, [r3, #28]
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	2104      	movs	r1, #4
 800b150:	438a      	bics	r2, r1
 800b152:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	69d9      	ldr	r1, [r3, #28]
 800b15a:	68bb      	ldr	r3, [r7, #8]
 800b15c:	68da      	ldr	r2, [r3, #12]
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	430a      	orrs	r2, r1
 800b164:	61da      	str	r2, [r3, #28]
      break;
 800b166:	e022      	b.n	800b1ae <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	68ba      	ldr	r2, [r7, #8]
 800b16e:	0011      	movs	r1, r2
 800b170:	0018      	movs	r0, r3
 800b172:	f000 fa1d 	bl	800b5b0 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	69da      	ldr	r2, [r3, #28]
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	2180      	movs	r1, #128	; 0x80
 800b182:	0109      	lsls	r1, r1, #4
 800b184:	430a      	orrs	r2, r1
 800b186:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	69da      	ldr	r2, [r3, #28]
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	490d      	ldr	r1, [pc, #52]	; (800b1c8 <HAL_TIM_PWM_ConfigChannel+0x16c>)
 800b194:	400a      	ands	r2, r1
 800b196:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	69d9      	ldr	r1, [r3, #28]
 800b19e:	68bb      	ldr	r3, [r7, #8]
 800b1a0:	68db      	ldr	r3, [r3, #12]
 800b1a2:	021a      	lsls	r2, r3, #8
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	430a      	orrs	r2, r1
 800b1aa:	61da      	str	r2, [r3, #28]
      break;
 800b1ac:	46c0      	nop			; (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	2239      	movs	r2, #57	; 0x39
 800b1b2:	2101      	movs	r1, #1
 800b1b4:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	2238      	movs	r2, #56	; 0x38
 800b1ba:	2100      	movs	r1, #0
 800b1bc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b1be:	2300      	movs	r3, #0
}
 800b1c0:	0018      	movs	r0, r3
 800b1c2:	46bd      	mov	sp, r7
 800b1c4:	b004      	add	sp, #16
 800b1c6:	bd80      	pop	{r7, pc}
 800b1c8:	fffffbff 	.word	0xfffffbff

0800b1cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b1cc:	b580      	push	{r7, lr}
 800b1ce:	b084      	sub	sp, #16
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	6078      	str	r0, [r7, #4]
 800b1d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	2238      	movs	r2, #56	; 0x38
 800b1da:	5c9b      	ldrb	r3, [r3, r2]
 800b1dc:	2b01      	cmp	r3, #1
 800b1de:	d101      	bne.n	800b1e4 <HAL_TIM_ConfigClockSource+0x18>
 800b1e0:	2302      	movs	r3, #2
 800b1e2:	e0ab      	b.n	800b33c <HAL_TIM_ConfigClockSource+0x170>
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	2238      	movs	r2, #56	; 0x38
 800b1e8:	2101      	movs	r1, #1
 800b1ea:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	2239      	movs	r2, #57	; 0x39
 800b1f0:	2102      	movs	r1, #2
 800b1f2:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	689b      	ldr	r3, [r3, #8]
 800b1fa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	2277      	movs	r2, #119	; 0x77
 800b200:	4393      	bics	r3, r2
 800b202:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	4a4f      	ldr	r2, [pc, #316]	; (800b344 <HAL_TIM_ConfigClockSource+0x178>)
 800b208:	4013      	ands	r3, r2
 800b20a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	68fa      	ldr	r2, [r7, #12]
 800b212:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b214:	683b      	ldr	r3, [r7, #0]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	2b40      	cmp	r3, #64	; 0x40
 800b21a:	d100      	bne.n	800b21e <HAL_TIM_ConfigClockSource+0x52>
 800b21c:	e06b      	b.n	800b2f6 <HAL_TIM_ConfigClockSource+0x12a>
 800b21e:	d80e      	bhi.n	800b23e <HAL_TIM_ConfigClockSource+0x72>
 800b220:	2b10      	cmp	r3, #16
 800b222:	d100      	bne.n	800b226 <HAL_TIM_ConfigClockSource+0x5a>
 800b224:	e077      	b.n	800b316 <HAL_TIM_ConfigClockSource+0x14a>
 800b226:	d803      	bhi.n	800b230 <HAL_TIM_ConfigClockSource+0x64>
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d100      	bne.n	800b22e <HAL_TIM_ConfigClockSource+0x62>
 800b22c:	e073      	b.n	800b316 <HAL_TIM_ConfigClockSource+0x14a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800b22e:	e07c      	b.n	800b32a <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 800b230:	2b20      	cmp	r3, #32
 800b232:	d100      	bne.n	800b236 <HAL_TIM_ConfigClockSource+0x6a>
 800b234:	e06f      	b.n	800b316 <HAL_TIM_ConfigClockSource+0x14a>
 800b236:	2b30      	cmp	r3, #48	; 0x30
 800b238:	d100      	bne.n	800b23c <HAL_TIM_ConfigClockSource+0x70>
 800b23a:	e06c      	b.n	800b316 <HAL_TIM_ConfigClockSource+0x14a>
      break;
 800b23c:	e075      	b.n	800b32a <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 800b23e:	2b70      	cmp	r3, #112	; 0x70
 800b240:	d00e      	beq.n	800b260 <HAL_TIM_ConfigClockSource+0x94>
 800b242:	d804      	bhi.n	800b24e <HAL_TIM_ConfigClockSource+0x82>
 800b244:	2b50      	cmp	r3, #80	; 0x50
 800b246:	d036      	beq.n	800b2b6 <HAL_TIM_ConfigClockSource+0xea>
 800b248:	2b60      	cmp	r3, #96	; 0x60
 800b24a:	d044      	beq.n	800b2d6 <HAL_TIM_ConfigClockSource+0x10a>
      break;
 800b24c:	e06d      	b.n	800b32a <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 800b24e:	2280      	movs	r2, #128	; 0x80
 800b250:	0152      	lsls	r2, r2, #5
 800b252:	4293      	cmp	r3, r2
 800b254:	d068      	beq.n	800b328 <HAL_TIM_ConfigClockSource+0x15c>
 800b256:	2280      	movs	r2, #128	; 0x80
 800b258:	0192      	lsls	r2, r2, #6
 800b25a:	4293      	cmp	r3, r2
 800b25c:	d017      	beq.n	800b28e <HAL_TIM_ConfigClockSource+0xc2>
      break;
 800b25e:	e064      	b.n	800b32a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	6818      	ldr	r0, [r3, #0]
 800b264:	683b      	ldr	r3, [r7, #0]
 800b266:	6899      	ldr	r1, [r3, #8]
 800b268:	683b      	ldr	r3, [r7, #0]
 800b26a:	685a      	ldr	r2, [r3, #4]
 800b26c:	683b      	ldr	r3, [r7, #0]
 800b26e:	68db      	ldr	r3, [r3, #12]
 800b270:	f000 fa5e 	bl	800b730 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	689b      	ldr	r3, [r3, #8]
 800b27a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	2277      	movs	r2, #119	; 0x77
 800b280:	4313      	orrs	r3, r2
 800b282:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	68fa      	ldr	r2, [r7, #12]
 800b28a:	609a      	str	r2, [r3, #8]
      break;
 800b28c:	e04d      	b.n	800b32a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	6818      	ldr	r0, [r3, #0]
 800b292:	683b      	ldr	r3, [r7, #0]
 800b294:	6899      	ldr	r1, [r3, #8]
 800b296:	683b      	ldr	r3, [r7, #0]
 800b298:	685a      	ldr	r2, [r3, #4]
 800b29a:	683b      	ldr	r3, [r7, #0]
 800b29c:	68db      	ldr	r3, [r3, #12]
 800b29e:	f000 fa47 	bl	800b730 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	689a      	ldr	r2, [r3, #8]
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	2180      	movs	r1, #128	; 0x80
 800b2ae:	01c9      	lsls	r1, r1, #7
 800b2b0:	430a      	orrs	r2, r1
 800b2b2:	609a      	str	r2, [r3, #8]
      break;
 800b2b4:	e039      	b.n	800b32a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	6818      	ldr	r0, [r3, #0]
 800b2ba:	683b      	ldr	r3, [r7, #0]
 800b2bc:	6859      	ldr	r1, [r3, #4]
 800b2be:	683b      	ldr	r3, [r7, #0]
 800b2c0:	68db      	ldr	r3, [r3, #12]
 800b2c2:	001a      	movs	r2, r3
 800b2c4:	f000 f9ba 	bl	800b63c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	2150      	movs	r1, #80	; 0x50
 800b2ce:	0018      	movs	r0, r3
 800b2d0:	f000 fa14 	bl	800b6fc <TIM_ITRx_SetConfig>
      break;
 800b2d4:	e029      	b.n	800b32a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	6818      	ldr	r0, [r3, #0]
 800b2da:	683b      	ldr	r3, [r7, #0]
 800b2dc:	6859      	ldr	r1, [r3, #4]
 800b2de:	683b      	ldr	r3, [r7, #0]
 800b2e0:	68db      	ldr	r3, [r3, #12]
 800b2e2:	001a      	movs	r2, r3
 800b2e4:	f000 f9d8 	bl	800b698 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	2160      	movs	r1, #96	; 0x60
 800b2ee:	0018      	movs	r0, r3
 800b2f0:	f000 fa04 	bl	800b6fc <TIM_ITRx_SetConfig>
      break;
 800b2f4:	e019      	b.n	800b32a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	6818      	ldr	r0, [r3, #0]
 800b2fa:	683b      	ldr	r3, [r7, #0]
 800b2fc:	6859      	ldr	r1, [r3, #4]
 800b2fe:	683b      	ldr	r3, [r7, #0]
 800b300:	68db      	ldr	r3, [r3, #12]
 800b302:	001a      	movs	r2, r3
 800b304:	f000 f99a 	bl	800b63c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	2140      	movs	r1, #64	; 0x40
 800b30e:	0018      	movs	r0, r3
 800b310:	f000 f9f4 	bl	800b6fc <TIM_ITRx_SetConfig>
      break;
 800b314:	e009      	b.n	800b32a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	681a      	ldr	r2, [r3, #0]
 800b31a:	683b      	ldr	r3, [r7, #0]
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	0019      	movs	r1, r3
 800b320:	0010      	movs	r0, r2
 800b322:	f000 f9eb 	bl	800b6fc <TIM_ITRx_SetConfig>
      break;
 800b326:	e000      	b.n	800b32a <HAL_TIM_ConfigClockSource+0x15e>
      break;
 800b328:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	2239      	movs	r2, #57	; 0x39
 800b32e:	2101      	movs	r1, #1
 800b330:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	2238      	movs	r2, #56	; 0x38
 800b336:	2100      	movs	r1, #0
 800b338:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b33a:	2300      	movs	r3, #0
}
 800b33c:	0018      	movs	r0, r3
 800b33e:	46bd      	mov	sp, r7
 800b340:	b004      	add	sp, #16
 800b342:	bd80      	pop	{r7, pc}
 800b344:	ffff00ff 	.word	0xffff00ff

0800b348 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b348:	b580      	push	{r7, lr}
 800b34a:	b082      	sub	sp, #8
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b350:	46c0      	nop			; (mov r8, r8)
 800b352:	46bd      	mov	sp, r7
 800b354:	b002      	add	sp, #8
 800b356:	bd80      	pop	{r7, pc}

0800b358 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b358:	b580      	push	{r7, lr}
 800b35a:	b082      	sub	sp, #8
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b360:	46c0      	nop			; (mov r8, r8)
 800b362:	46bd      	mov	sp, r7
 800b364:	b002      	add	sp, #8
 800b366:	bd80      	pop	{r7, pc}

0800b368 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b368:	b580      	push	{r7, lr}
 800b36a:	b082      	sub	sp, #8
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b370:	46c0      	nop			; (mov r8, r8)
 800b372:	46bd      	mov	sp, r7
 800b374:	b002      	add	sp, #8
 800b376:	bd80      	pop	{r7, pc}

0800b378 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b378:	b580      	push	{r7, lr}
 800b37a:	b084      	sub	sp, #16
 800b37c:	af00      	add	r7, sp, #0
 800b37e:	6078      	str	r0, [r7, #4]
 800b380:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b388:	687a      	ldr	r2, [r7, #4]
 800b38a:	2380      	movs	r3, #128	; 0x80
 800b38c:	05db      	lsls	r3, r3, #23
 800b38e:	429a      	cmp	r2, r3
 800b390:	d00b      	beq.n	800b3aa <TIM_Base_SetConfig+0x32>
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	4a23      	ldr	r2, [pc, #140]	; (800b424 <TIM_Base_SetConfig+0xac>)
 800b396:	4293      	cmp	r3, r2
 800b398:	d007      	beq.n	800b3aa <TIM_Base_SetConfig+0x32>
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	4a22      	ldr	r2, [pc, #136]	; (800b428 <TIM_Base_SetConfig+0xb0>)
 800b39e:	4293      	cmp	r3, r2
 800b3a0:	d003      	beq.n	800b3aa <TIM_Base_SetConfig+0x32>
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	4a21      	ldr	r2, [pc, #132]	; (800b42c <TIM_Base_SetConfig+0xb4>)
 800b3a6:	4293      	cmp	r3, r2
 800b3a8:	d108      	bne.n	800b3bc <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	2270      	movs	r2, #112	; 0x70
 800b3ae:	4393      	bics	r3, r2
 800b3b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b3b2:	683b      	ldr	r3, [r7, #0]
 800b3b4:	685b      	ldr	r3, [r3, #4]
 800b3b6:	68fa      	ldr	r2, [r7, #12]
 800b3b8:	4313      	orrs	r3, r2
 800b3ba:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b3bc:	687a      	ldr	r2, [r7, #4]
 800b3be:	2380      	movs	r3, #128	; 0x80
 800b3c0:	05db      	lsls	r3, r3, #23
 800b3c2:	429a      	cmp	r2, r3
 800b3c4:	d00b      	beq.n	800b3de <TIM_Base_SetConfig+0x66>
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	4a16      	ldr	r2, [pc, #88]	; (800b424 <TIM_Base_SetConfig+0xac>)
 800b3ca:	4293      	cmp	r3, r2
 800b3cc:	d007      	beq.n	800b3de <TIM_Base_SetConfig+0x66>
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	4a15      	ldr	r2, [pc, #84]	; (800b428 <TIM_Base_SetConfig+0xb0>)
 800b3d2:	4293      	cmp	r3, r2
 800b3d4:	d003      	beq.n	800b3de <TIM_Base_SetConfig+0x66>
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	4a14      	ldr	r2, [pc, #80]	; (800b42c <TIM_Base_SetConfig+0xb4>)
 800b3da:	4293      	cmp	r3, r2
 800b3dc:	d108      	bne.n	800b3f0 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	4a13      	ldr	r2, [pc, #76]	; (800b430 <TIM_Base_SetConfig+0xb8>)
 800b3e2:	4013      	ands	r3, r2
 800b3e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b3e6:	683b      	ldr	r3, [r7, #0]
 800b3e8:	68db      	ldr	r3, [r3, #12]
 800b3ea:	68fa      	ldr	r2, [r7, #12]
 800b3ec:	4313      	orrs	r3, r2
 800b3ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	2280      	movs	r2, #128	; 0x80
 800b3f4:	4393      	bics	r3, r2
 800b3f6:	001a      	movs	r2, r3
 800b3f8:	683b      	ldr	r3, [r7, #0]
 800b3fa:	691b      	ldr	r3, [r3, #16]
 800b3fc:	4313      	orrs	r3, r2
 800b3fe:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	68fa      	ldr	r2, [r7, #12]
 800b404:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b406:	683b      	ldr	r3, [r7, #0]
 800b408:	689a      	ldr	r2, [r3, #8]
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b40e:	683b      	ldr	r3, [r7, #0]
 800b410:	681a      	ldr	r2, [r3, #0]
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	2201      	movs	r2, #1
 800b41a:	615a      	str	r2, [r3, #20]
}
 800b41c:	46c0      	nop			; (mov r8, r8)
 800b41e:	46bd      	mov	sp, r7
 800b420:	b004      	add	sp, #16
 800b422:	bd80      	pop	{r7, pc}
 800b424:	40000400 	.word	0x40000400
 800b428:	40010800 	.word	0x40010800
 800b42c:	40011400 	.word	0x40011400
 800b430:	fffffcff 	.word	0xfffffcff

0800b434 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b434:	b580      	push	{r7, lr}
 800b436:	b086      	sub	sp, #24
 800b438:	af00      	add	r7, sp, #0
 800b43a:	6078      	str	r0, [r7, #4]
 800b43c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	6a1b      	ldr	r3, [r3, #32]
 800b442:	2201      	movs	r2, #1
 800b444:	4393      	bics	r3, r2
 800b446:	001a      	movs	r2, r3
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	6a1b      	ldr	r3, [r3, #32]
 800b450:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	685b      	ldr	r3, [r3, #4]
 800b456:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	699b      	ldr	r3, [r3, #24]
 800b45c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	2270      	movs	r2, #112	; 0x70
 800b462:	4393      	bics	r3, r2
 800b464:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	2203      	movs	r2, #3
 800b46a:	4393      	bics	r3, r2
 800b46c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b46e:	683b      	ldr	r3, [r7, #0]
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	68fa      	ldr	r2, [r7, #12]
 800b474:	4313      	orrs	r3, r2
 800b476:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b478:	697b      	ldr	r3, [r7, #20]
 800b47a:	2202      	movs	r2, #2
 800b47c:	4393      	bics	r3, r2
 800b47e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b480:	683b      	ldr	r3, [r7, #0]
 800b482:	689b      	ldr	r3, [r3, #8]
 800b484:	697a      	ldr	r2, [r7, #20]
 800b486:	4313      	orrs	r3, r2
 800b488:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	693a      	ldr	r2, [r7, #16]
 800b48e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	68fa      	ldr	r2, [r7, #12]
 800b494:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b496:	683b      	ldr	r3, [r7, #0]
 800b498:	685a      	ldr	r2, [r3, #4]
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	697a      	ldr	r2, [r7, #20]
 800b4a2:	621a      	str	r2, [r3, #32]
}
 800b4a4:	46c0      	nop			; (mov r8, r8)
 800b4a6:	46bd      	mov	sp, r7
 800b4a8:	b006      	add	sp, #24
 800b4aa:	bd80      	pop	{r7, pc}

0800b4ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b4ac:	b580      	push	{r7, lr}
 800b4ae:	b086      	sub	sp, #24
 800b4b0:	af00      	add	r7, sp, #0
 800b4b2:	6078      	str	r0, [r7, #4]
 800b4b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	6a1b      	ldr	r3, [r3, #32]
 800b4ba:	2210      	movs	r2, #16
 800b4bc:	4393      	bics	r3, r2
 800b4be:	001a      	movs	r2, r3
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	6a1b      	ldr	r3, [r3, #32]
 800b4c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	685b      	ldr	r3, [r3, #4]
 800b4ce:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	699b      	ldr	r3, [r3, #24]
 800b4d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	4a13      	ldr	r2, [pc, #76]	; (800b528 <TIM_OC2_SetConfig+0x7c>)
 800b4da:	4013      	ands	r3, r2
 800b4dc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	4a12      	ldr	r2, [pc, #72]	; (800b52c <TIM_OC2_SetConfig+0x80>)
 800b4e2:	4013      	ands	r3, r2
 800b4e4:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b4e6:	683b      	ldr	r3, [r7, #0]
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	021b      	lsls	r3, r3, #8
 800b4ec:	68fa      	ldr	r2, [r7, #12]
 800b4ee:	4313      	orrs	r3, r2
 800b4f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b4f2:	697b      	ldr	r3, [r7, #20]
 800b4f4:	2220      	movs	r2, #32
 800b4f6:	4393      	bics	r3, r2
 800b4f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b4fa:	683b      	ldr	r3, [r7, #0]
 800b4fc:	689b      	ldr	r3, [r3, #8]
 800b4fe:	011b      	lsls	r3, r3, #4
 800b500:	697a      	ldr	r2, [r7, #20]
 800b502:	4313      	orrs	r3, r2
 800b504:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	693a      	ldr	r2, [r7, #16]
 800b50a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	68fa      	ldr	r2, [r7, #12]
 800b510:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b512:	683b      	ldr	r3, [r7, #0]
 800b514:	685a      	ldr	r2, [r3, #4]
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	697a      	ldr	r2, [r7, #20]
 800b51e:	621a      	str	r2, [r3, #32]
}
 800b520:	46c0      	nop			; (mov r8, r8)
 800b522:	46bd      	mov	sp, r7
 800b524:	b006      	add	sp, #24
 800b526:	bd80      	pop	{r7, pc}
 800b528:	ffff8fff 	.word	0xffff8fff
 800b52c:	fffffcff 	.word	0xfffffcff

0800b530 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b530:	b580      	push	{r7, lr}
 800b532:	b086      	sub	sp, #24
 800b534:	af00      	add	r7, sp, #0
 800b536:	6078      	str	r0, [r7, #4]
 800b538:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	6a1b      	ldr	r3, [r3, #32]
 800b53e:	4a1a      	ldr	r2, [pc, #104]	; (800b5a8 <TIM_OC3_SetConfig+0x78>)
 800b540:	401a      	ands	r2, r3
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	6a1b      	ldr	r3, [r3, #32]
 800b54a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	685b      	ldr	r3, [r3, #4]
 800b550:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	69db      	ldr	r3, [r3, #28]
 800b556:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	2270      	movs	r2, #112	; 0x70
 800b55c:	4393      	bics	r3, r2
 800b55e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	2203      	movs	r2, #3
 800b564:	4393      	bics	r3, r2
 800b566:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b568:	683b      	ldr	r3, [r7, #0]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	68fa      	ldr	r2, [r7, #12]
 800b56e:	4313      	orrs	r3, r2
 800b570:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b572:	697b      	ldr	r3, [r7, #20]
 800b574:	4a0d      	ldr	r2, [pc, #52]	; (800b5ac <TIM_OC3_SetConfig+0x7c>)
 800b576:	4013      	ands	r3, r2
 800b578:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b57a:	683b      	ldr	r3, [r7, #0]
 800b57c:	689b      	ldr	r3, [r3, #8]
 800b57e:	021b      	lsls	r3, r3, #8
 800b580:	697a      	ldr	r2, [r7, #20]
 800b582:	4313      	orrs	r3, r2
 800b584:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	693a      	ldr	r2, [r7, #16]
 800b58a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	68fa      	ldr	r2, [r7, #12]
 800b590:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b592:	683b      	ldr	r3, [r7, #0]
 800b594:	685a      	ldr	r2, [r3, #4]
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	697a      	ldr	r2, [r7, #20]
 800b59e:	621a      	str	r2, [r3, #32]
}
 800b5a0:	46c0      	nop			; (mov r8, r8)
 800b5a2:	46bd      	mov	sp, r7
 800b5a4:	b006      	add	sp, #24
 800b5a6:	bd80      	pop	{r7, pc}
 800b5a8:	fffffeff 	.word	0xfffffeff
 800b5ac:	fffffdff 	.word	0xfffffdff

0800b5b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b5b0:	b580      	push	{r7, lr}
 800b5b2:	b086      	sub	sp, #24
 800b5b4:	af00      	add	r7, sp, #0
 800b5b6:	6078      	str	r0, [r7, #4]
 800b5b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	6a1b      	ldr	r3, [r3, #32]
 800b5be:	4a1b      	ldr	r2, [pc, #108]	; (800b62c <TIM_OC4_SetConfig+0x7c>)
 800b5c0:	401a      	ands	r2, r3
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	6a1b      	ldr	r3, [r3, #32]
 800b5ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	685b      	ldr	r3, [r3, #4]
 800b5d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	69db      	ldr	r3, [r3, #28]
 800b5d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	4a15      	ldr	r2, [pc, #84]	; (800b630 <TIM_OC4_SetConfig+0x80>)
 800b5dc:	4013      	ands	r3, r2
 800b5de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	4a14      	ldr	r2, [pc, #80]	; (800b634 <TIM_OC4_SetConfig+0x84>)
 800b5e4:	4013      	ands	r3, r2
 800b5e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b5e8:	683b      	ldr	r3, [r7, #0]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	021b      	lsls	r3, r3, #8
 800b5ee:	68fa      	ldr	r2, [r7, #12]
 800b5f0:	4313      	orrs	r3, r2
 800b5f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b5f4:	697b      	ldr	r3, [r7, #20]
 800b5f6:	4a10      	ldr	r2, [pc, #64]	; (800b638 <TIM_OC4_SetConfig+0x88>)
 800b5f8:	4013      	ands	r3, r2
 800b5fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b5fc:	683b      	ldr	r3, [r7, #0]
 800b5fe:	689b      	ldr	r3, [r3, #8]
 800b600:	031b      	lsls	r3, r3, #12
 800b602:	697a      	ldr	r2, [r7, #20]
 800b604:	4313      	orrs	r3, r2
 800b606:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	693a      	ldr	r2, [r7, #16]
 800b60c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	68fa      	ldr	r2, [r7, #12]
 800b612:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b614:	683b      	ldr	r3, [r7, #0]
 800b616:	685a      	ldr	r2, [r3, #4]
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	697a      	ldr	r2, [r7, #20]
 800b620:	621a      	str	r2, [r3, #32]
}
 800b622:	46c0      	nop			; (mov r8, r8)
 800b624:	46bd      	mov	sp, r7
 800b626:	b006      	add	sp, #24
 800b628:	bd80      	pop	{r7, pc}
 800b62a:	46c0      	nop			; (mov r8, r8)
 800b62c:	ffffefff 	.word	0xffffefff
 800b630:	ffff8fff 	.word	0xffff8fff
 800b634:	fffffcff 	.word	0xfffffcff
 800b638:	ffffdfff 	.word	0xffffdfff

0800b63c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b63c:	b580      	push	{r7, lr}
 800b63e:	b086      	sub	sp, #24
 800b640:	af00      	add	r7, sp, #0
 800b642:	60f8      	str	r0, [r7, #12]
 800b644:	60b9      	str	r1, [r7, #8]
 800b646:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	6a1b      	ldr	r3, [r3, #32]
 800b64c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	6a1b      	ldr	r3, [r3, #32]
 800b652:	2201      	movs	r2, #1
 800b654:	4393      	bics	r3, r2
 800b656:	001a      	movs	r2, r3
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	699b      	ldr	r3, [r3, #24]
 800b660:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b662:	693b      	ldr	r3, [r7, #16]
 800b664:	22f0      	movs	r2, #240	; 0xf0
 800b666:	4393      	bics	r3, r2
 800b668:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	011b      	lsls	r3, r3, #4
 800b66e:	693a      	ldr	r2, [r7, #16]
 800b670:	4313      	orrs	r3, r2
 800b672:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b674:	697b      	ldr	r3, [r7, #20]
 800b676:	220a      	movs	r2, #10
 800b678:	4393      	bics	r3, r2
 800b67a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b67c:	697a      	ldr	r2, [r7, #20]
 800b67e:	68bb      	ldr	r3, [r7, #8]
 800b680:	4313      	orrs	r3, r2
 800b682:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	693a      	ldr	r2, [r7, #16]
 800b688:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	697a      	ldr	r2, [r7, #20]
 800b68e:	621a      	str	r2, [r3, #32]
}
 800b690:	46c0      	nop			; (mov r8, r8)
 800b692:	46bd      	mov	sp, r7
 800b694:	b006      	add	sp, #24
 800b696:	bd80      	pop	{r7, pc}

0800b698 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b698:	b580      	push	{r7, lr}
 800b69a:	b086      	sub	sp, #24
 800b69c:	af00      	add	r7, sp, #0
 800b69e:	60f8      	str	r0, [r7, #12]
 800b6a0:	60b9      	str	r1, [r7, #8]
 800b6a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	6a1b      	ldr	r3, [r3, #32]
 800b6a8:	2210      	movs	r2, #16
 800b6aa:	4393      	bics	r3, r2
 800b6ac:	001a      	movs	r2, r3
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	699b      	ldr	r3, [r3, #24]
 800b6b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	6a1b      	ldr	r3, [r3, #32]
 800b6bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b6be:	697b      	ldr	r3, [r7, #20]
 800b6c0:	4a0d      	ldr	r2, [pc, #52]	; (800b6f8 <TIM_TI2_ConfigInputStage+0x60>)
 800b6c2:	4013      	ands	r3, r2
 800b6c4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	031b      	lsls	r3, r3, #12
 800b6ca:	697a      	ldr	r2, [r7, #20]
 800b6cc:	4313      	orrs	r3, r2
 800b6ce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b6d0:	693b      	ldr	r3, [r7, #16]
 800b6d2:	22a0      	movs	r2, #160	; 0xa0
 800b6d4:	4393      	bics	r3, r2
 800b6d6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b6d8:	68bb      	ldr	r3, [r7, #8]
 800b6da:	011b      	lsls	r3, r3, #4
 800b6dc:	693a      	ldr	r2, [r7, #16]
 800b6de:	4313      	orrs	r3, r2
 800b6e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	697a      	ldr	r2, [r7, #20]
 800b6e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	693a      	ldr	r2, [r7, #16]
 800b6ec:	621a      	str	r2, [r3, #32]
}
 800b6ee:	46c0      	nop			; (mov r8, r8)
 800b6f0:	46bd      	mov	sp, r7
 800b6f2:	b006      	add	sp, #24
 800b6f4:	bd80      	pop	{r7, pc}
 800b6f6:	46c0      	nop			; (mov r8, r8)
 800b6f8:	ffff0fff 	.word	0xffff0fff

0800b6fc <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b6fc:	b580      	push	{r7, lr}
 800b6fe:	b084      	sub	sp, #16
 800b700:	af00      	add	r7, sp, #0
 800b702:	6078      	str	r0, [r7, #4]
 800b704:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	689b      	ldr	r3, [r3, #8]
 800b70a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	2270      	movs	r2, #112	; 0x70
 800b710:	4393      	bics	r3, r2
 800b712:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b714:	683a      	ldr	r2, [r7, #0]
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	4313      	orrs	r3, r2
 800b71a:	2207      	movs	r2, #7
 800b71c:	4313      	orrs	r3, r2
 800b71e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	68fa      	ldr	r2, [r7, #12]
 800b724:	609a      	str	r2, [r3, #8]
}
 800b726:	46c0      	nop			; (mov r8, r8)
 800b728:	46bd      	mov	sp, r7
 800b72a:	b004      	add	sp, #16
 800b72c:	bd80      	pop	{r7, pc}
	...

0800b730 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b730:	b580      	push	{r7, lr}
 800b732:	b086      	sub	sp, #24
 800b734:	af00      	add	r7, sp, #0
 800b736:	60f8      	str	r0, [r7, #12]
 800b738:	60b9      	str	r1, [r7, #8]
 800b73a:	607a      	str	r2, [r7, #4]
 800b73c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	689b      	ldr	r3, [r3, #8]
 800b742:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b744:	697b      	ldr	r3, [r7, #20]
 800b746:	4a09      	ldr	r2, [pc, #36]	; (800b76c <TIM_ETR_SetConfig+0x3c>)
 800b748:	4013      	ands	r3, r2
 800b74a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b74c:	683b      	ldr	r3, [r7, #0]
 800b74e:	021a      	lsls	r2, r3, #8
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	431a      	orrs	r2, r3
 800b754:	68bb      	ldr	r3, [r7, #8]
 800b756:	4313      	orrs	r3, r2
 800b758:	697a      	ldr	r2, [r7, #20]
 800b75a:	4313      	orrs	r3, r2
 800b75c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	697a      	ldr	r2, [r7, #20]
 800b762:	609a      	str	r2, [r3, #8]
}
 800b764:	46c0      	nop			; (mov r8, r8)
 800b766:	46bd      	mov	sp, r7
 800b768:	b006      	add	sp, #24
 800b76a:	bd80      	pop	{r7, pc}
 800b76c:	ffff00ff 	.word	0xffff00ff

0800b770 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b770:	b580      	push	{r7, lr}
 800b772:	b086      	sub	sp, #24
 800b774:	af00      	add	r7, sp, #0
 800b776:	60f8      	str	r0, [r7, #12]
 800b778:	60b9      	str	r1, [r7, #8]
 800b77a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b77c:	68bb      	ldr	r3, [r7, #8]
 800b77e:	221f      	movs	r2, #31
 800b780:	4013      	ands	r3, r2
 800b782:	2201      	movs	r2, #1
 800b784:	409a      	lsls	r2, r3
 800b786:	0013      	movs	r3, r2
 800b788:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	6a1b      	ldr	r3, [r3, #32]
 800b78e:	697a      	ldr	r2, [r7, #20]
 800b790:	43d2      	mvns	r2, r2
 800b792:	401a      	ands	r2, r3
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	6a1a      	ldr	r2, [r3, #32]
 800b79c:	68bb      	ldr	r3, [r7, #8]
 800b79e:	211f      	movs	r1, #31
 800b7a0:	400b      	ands	r3, r1
 800b7a2:	6879      	ldr	r1, [r7, #4]
 800b7a4:	4099      	lsls	r1, r3
 800b7a6:	000b      	movs	r3, r1
 800b7a8:	431a      	orrs	r2, r3
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	621a      	str	r2, [r3, #32]
}
 800b7ae:	46c0      	nop			; (mov r8, r8)
 800b7b0:	46bd      	mov	sp, r7
 800b7b2:	b006      	add	sp, #24
 800b7b4:	bd80      	pop	{r7, pc}

0800b7b6 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b7b6:	b580      	push	{r7, lr}
 800b7b8:	b084      	sub	sp, #16
 800b7ba:	af00      	add	r7, sp, #0
 800b7bc:	6078      	str	r0, [r7, #4]
 800b7be:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	2238      	movs	r2, #56	; 0x38
 800b7c4:	5c9b      	ldrb	r3, [r3, r2]
 800b7c6:	2b01      	cmp	r3, #1
 800b7c8:	d101      	bne.n	800b7ce <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b7ca:	2302      	movs	r3, #2
 800b7cc:	e032      	b.n	800b834 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	2238      	movs	r2, #56	; 0x38
 800b7d2:	2101      	movs	r1, #1
 800b7d4:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	2239      	movs	r2, #57	; 0x39
 800b7da:	2102      	movs	r1, #2
 800b7dc:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	685b      	ldr	r3, [r3, #4]
 800b7e4:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	689b      	ldr	r3, [r3, #8]
 800b7ec:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	2270      	movs	r2, #112	; 0x70
 800b7f2:	4393      	bics	r3, r2
 800b7f4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b7f6:	683b      	ldr	r3, [r7, #0]
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	68fa      	ldr	r2, [r7, #12]
 800b7fc:	4313      	orrs	r3, r2
 800b7fe:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800b800:	68bb      	ldr	r3, [r7, #8]
 800b802:	2280      	movs	r2, #128	; 0x80
 800b804:	4393      	bics	r3, r2
 800b806:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b808:	683b      	ldr	r3, [r7, #0]
 800b80a:	685b      	ldr	r3, [r3, #4]
 800b80c:	68ba      	ldr	r2, [r7, #8]
 800b80e:	4313      	orrs	r3, r2
 800b810:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	68fa      	ldr	r2, [r7, #12]
 800b818:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	68ba      	ldr	r2, [r7, #8]
 800b820:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	2239      	movs	r2, #57	; 0x39
 800b826:	2101      	movs	r1, #1
 800b828:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	2238      	movs	r2, #56	; 0x38
 800b82e:	2100      	movs	r1, #0
 800b830:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b832:	2300      	movs	r3, #0
}
 800b834:	0018      	movs	r0, r3
 800b836:	46bd      	mov	sp, r7
 800b838:	b004      	add	sp, #16
 800b83a:	bd80      	pop	{r7, pc}

0800b83c <HAL_TIMEx_RemapConfig>:
  @endif
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 800b83c:	b580      	push	{r7, lr}
 800b83e:	b082      	sub	sp, #8
 800b840:	af00      	add	r7, sp, #0
 800b842:	6078      	str	r0, [r7, #4]
 800b844:	6039      	str	r1, [r7, #0]
  __HAL_LOCK(htim);
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	2238      	movs	r2, #56	; 0x38
 800b84a:	5c9b      	ldrb	r3, [r3, r2]
 800b84c:	2b01      	cmp	r3, #1
 800b84e:	d101      	bne.n	800b854 <HAL_TIMEx_RemapConfig+0x18>
 800b850:	2302      	movs	r3, #2
 800b852:	e00c      	b.n	800b86e <HAL_TIMEx_RemapConfig+0x32>
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	2238      	movs	r2, #56	; 0x38
 800b858:	2101      	movs	r1, #1
 800b85a:	5499      	strb	r1, [r3, r2]

  /* Check parameters */
  assert_param(IS_TIM_REMAP(htim->Instance, Remap));

  /* Set the Timer remapping configuration */
  WRITE_REG(htim->Instance->OR, Remap);
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	683a      	ldr	r2, [r7, #0]
 800b862:	651a      	str	r2, [r3, #80]	; 0x50

  __HAL_UNLOCK(htim);
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	2238      	movs	r2, #56	; 0x38
 800b868:	2100      	movs	r1, #0
 800b86a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b86c:	2300      	movs	r3, #0
}
 800b86e:	0018      	movs	r0, r3
 800b870:	46bd      	mov	sp, r7
 800b872:	b002      	add	sp, #8
 800b874:	bd80      	pop	{r7, pc}
	...

0800b878 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800b878:	b580      	push	{r7, lr}
 800b87a:	b084      	sub	sp, #16
 800b87c:	af00      	add	r7, sp, #0
 800b87e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800b880:	4b09      	ldr	r3, [pc, #36]	; (800b8a8 <USB_DisableGlobalInt+0x30>)
 800b882:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	2240      	movs	r2, #64	; 0x40
 800b888:	5a9b      	ldrh	r3, [r3, r2]
 800b88a:	b29b      	uxth	r3, r3
 800b88c:	68fa      	ldr	r2, [r7, #12]
 800b88e:	b292      	uxth	r2, r2
 800b890:	43d2      	mvns	r2, r2
 800b892:	b292      	uxth	r2, r2
 800b894:	4013      	ands	r3, r2
 800b896:	b299      	uxth	r1, r3
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	2240      	movs	r2, #64	; 0x40
 800b89c:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800b89e:	2300      	movs	r3, #0
}
 800b8a0:	0018      	movs	r0, r3
 800b8a2:	46bd      	mov	sp, r7
 800b8a4:	b004      	add	sp, #16
 800b8a6:	bd80      	pop	{r7, pc}
 800b8a8:	0000bf80 	.word	0x0000bf80

0800b8ac <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800b8ac:	b084      	sub	sp, #16
 800b8ae:	b590      	push	{r4, r7, lr}
 800b8b0:	46c6      	mov	lr, r8
 800b8b2:	b500      	push	{lr}
 800b8b4:	b082      	sub	sp, #8
 800b8b6:	af00      	add	r7, sp, #0
 800b8b8:	6078      	str	r0, [r7, #4]
 800b8ba:	2004      	movs	r0, #4
 800b8bc:	2410      	movs	r4, #16
 800b8be:	46a4      	mov	ip, r4
 800b8c0:	2408      	movs	r4, #8
 800b8c2:	46a0      	mov	r8, r4
 800b8c4:	44b8      	add	r8, r7
 800b8c6:	44c4      	add	ip, r8
 800b8c8:	4460      	add	r0, ip
 800b8ca:	6001      	str	r1, [r0, #0]
 800b8cc:	6042      	str	r2, [r0, #4]
 800b8ce:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	2240      	movs	r2, #64	; 0x40
 800b8d4:	2101      	movs	r1, #1
 800b8d6:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	2240      	movs	r2, #64	; 0x40
 800b8dc:	2100      	movs	r1, #0
 800b8de:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	2244      	movs	r2, #68	; 0x44
 800b8e4:	2100      	movs	r1, #0
 800b8e6:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	2250      	movs	r2, #80	; 0x50
 800b8ec:	2100      	movs	r1, #0
 800b8ee:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800b8f0:	2300      	movs	r3, #0
}
 800b8f2:	0018      	movs	r0, r3
 800b8f4:	46bd      	mov	sp, r7
 800b8f6:	b002      	add	sp, #8
 800b8f8:	bc04      	pop	{r2}
 800b8fa:	4690      	mov	r8, r2
 800b8fc:	bc90      	pop	{r4, r7}
 800b8fe:	bc08      	pop	{r3}
 800b900:	b004      	add	sp, #16
 800b902:	4718      	bx	r3

0800b904 <calloc>:
 800b904:	b510      	push	{r4, lr}
 800b906:	4b03      	ldr	r3, [pc, #12]	; (800b914 <calloc+0x10>)
 800b908:	000a      	movs	r2, r1
 800b90a:	0001      	movs	r1, r0
 800b90c:	6818      	ldr	r0, [r3, #0]
 800b90e:	f000 f83e 	bl	800b98e <_calloc_r>
 800b912:	bd10      	pop	{r4, pc}
 800b914:	20000074 	.word	0x20000074

0800b918 <__errno>:
 800b918:	4b01      	ldr	r3, [pc, #4]	; (800b920 <__errno+0x8>)
 800b91a:	6818      	ldr	r0, [r3, #0]
 800b91c:	4770      	bx	lr
 800b91e:	46c0      	nop			; (mov r8, r8)
 800b920:	20000074 	.word	0x20000074

0800b924 <__libc_init_array>:
 800b924:	b570      	push	{r4, r5, r6, lr}
 800b926:	2600      	movs	r6, #0
 800b928:	4d0c      	ldr	r5, [pc, #48]	; (800b95c <__libc_init_array+0x38>)
 800b92a:	4c0d      	ldr	r4, [pc, #52]	; (800b960 <__libc_init_array+0x3c>)
 800b92c:	1b64      	subs	r4, r4, r5
 800b92e:	10a4      	asrs	r4, r4, #2
 800b930:	42a6      	cmp	r6, r4
 800b932:	d109      	bne.n	800b948 <__libc_init_array+0x24>
 800b934:	2600      	movs	r6, #0
 800b936:	f000 fc37 	bl	800c1a8 <_init>
 800b93a:	4d0a      	ldr	r5, [pc, #40]	; (800b964 <__libc_init_array+0x40>)
 800b93c:	4c0a      	ldr	r4, [pc, #40]	; (800b968 <__libc_init_array+0x44>)
 800b93e:	1b64      	subs	r4, r4, r5
 800b940:	10a4      	asrs	r4, r4, #2
 800b942:	42a6      	cmp	r6, r4
 800b944:	d105      	bne.n	800b952 <__libc_init_array+0x2e>
 800b946:	bd70      	pop	{r4, r5, r6, pc}
 800b948:	00b3      	lsls	r3, r6, #2
 800b94a:	58eb      	ldr	r3, [r5, r3]
 800b94c:	4798      	blx	r3
 800b94e:	3601      	adds	r6, #1
 800b950:	e7ee      	b.n	800b930 <__libc_init_array+0xc>
 800b952:	00b3      	lsls	r3, r6, #2
 800b954:	58eb      	ldr	r3, [r5, r3]
 800b956:	4798      	blx	r3
 800b958:	3601      	adds	r6, #1
 800b95a:	e7f2      	b.n	800b942 <__libc_init_array+0x1e>
 800b95c:	0800ce28 	.word	0x0800ce28
 800b960:	0800ce28 	.word	0x0800ce28
 800b964:	0800ce28 	.word	0x0800ce28
 800b968:	0800ce2c 	.word	0x0800ce2c

0800b96c <memcpy>:
 800b96c:	2300      	movs	r3, #0
 800b96e:	b510      	push	{r4, lr}
 800b970:	429a      	cmp	r2, r3
 800b972:	d100      	bne.n	800b976 <memcpy+0xa>
 800b974:	bd10      	pop	{r4, pc}
 800b976:	5ccc      	ldrb	r4, [r1, r3]
 800b978:	54c4      	strb	r4, [r0, r3]
 800b97a:	3301      	adds	r3, #1
 800b97c:	e7f8      	b.n	800b970 <memcpy+0x4>

0800b97e <memset>:
 800b97e:	0003      	movs	r3, r0
 800b980:	1812      	adds	r2, r2, r0
 800b982:	4293      	cmp	r3, r2
 800b984:	d100      	bne.n	800b988 <memset+0xa>
 800b986:	4770      	bx	lr
 800b988:	7019      	strb	r1, [r3, #0]
 800b98a:	3301      	adds	r3, #1
 800b98c:	e7f9      	b.n	800b982 <memset+0x4>

0800b98e <_calloc_r>:
 800b98e:	434a      	muls	r2, r1
 800b990:	b570      	push	{r4, r5, r6, lr}
 800b992:	0011      	movs	r1, r2
 800b994:	0014      	movs	r4, r2
 800b996:	f000 f809 	bl	800b9ac <_malloc_r>
 800b99a:	1e05      	subs	r5, r0, #0
 800b99c:	d003      	beq.n	800b9a6 <_calloc_r+0x18>
 800b99e:	0022      	movs	r2, r4
 800b9a0:	2100      	movs	r1, #0
 800b9a2:	f7ff ffec 	bl	800b97e <memset>
 800b9a6:	0028      	movs	r0, r5
 800b9a8:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b9ac <_malloc_r>:
 800b9ac:	2303      	movs	r3, #3
 800b9ae:	b570      	push	{r4, r5, r6, lr}
 800b9b0:	1ccd      	adds	r5, r1, #3
 800b9b2:	439d      	bics	r5, r3
 800b9b4:	3508      	adds	r5, #8
 800b9b6:	0006      	movs	r6, r0
 800b9b8:	2d0c      	cmp	r5, #12
 800b9ba:	d21e      	bcs.n	800b9fa <_malloc_r+0x4e>
 800b9bc:	250c      	movs	r5, #12
 800b9be:	42a9      	cmp	r1, r5
 800b9c0:	d81d      	bhi.n	800b9fe <_malloc_r+0x52>
 800b9c2:	0030      	movs	r0, r6
 800b9c4:	f000 f882 	bl	800bacc <__malloc_lock>
 800b9c8:	4a25      	ldr	r2, [pc, #148]	; (800ba60 <_malloc_r+0xb4>)
 800b9ca:	6814      	ldr	r4, [r2, #0]
 800b9cc:	0021      	movs	r1, r4
 800b9ce:	2900      	cmp	r1, #0
 800b9d0:	d119      	bne.n	800ba06 <_malloc_r+0x5a>
 800b9d2:	4c24      	ldr	r4, [pc, #144]	; (800ba64 <_malloc_r+0xb8>)
 800b9d4:	6823      	ldr	r3, [r4, #0]
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d103      	bne.n	800b9e2 <_malloc_r+0x36>
 800b9da:	0030      	movs	r0, r6
 800b9dc:	f000 f844 	bl	800ba68 <_sbrk_r>
 800b9e0:	6020      	str	r0, [r4, #0]
 800b9e2:	0029      	movs	r1, r5
 800b9e4:	0030      	movs	r0, r6
 800b9e6:	f000 f83f 	bl	800ba68 <_sbrk_r>
 800b9ea:	1c43      	adds	r3, r0, #1
 800b9ec:	d12b      	bne.n	800ba46 <_malloc_r+0x9a>
 800b9ee:	230c      	movs	r3, #12
 800b9f0:	0030      	movs	r0, r6
 800b9f2:	6033      	str	r3, [r6, #0]
 800b9f4:	f000 f86b 	bl	800bace <__malloc_unlock>
 800b9f8:	e003      	b.n	800ba02 <_malloc_r+0x56>
 800b9fa:	2d00      	cmp	r5, #0
 800b9fc:	dadf      	bge.n	800b9be <_malloc_r+0x12>
 800b9fe:	230c      	movs	r3, #12
 800ba00:	6033      	str	r3, [r6, #0]
 800ba02:	2000      	movs	r0, #0
 800ba04:	bd70      	pop	{r4, r5, r6, pc}
 800ba06:	680b      	ldr	r3, [r1, #0]
 800ba08:	1b5b      	subs	r3, r3, r5
 800ba0a:	d419      	bmi.n	800ba40 <_malloc_r+0x94>
 800ba0c:	2b0b      	cmp	r3, #11
 800ba0e:	d903      	bls.n	800ba18 <_malloc_r+0x6c>
 800ba10:	600b      	str	r3, [r1, #0]
 800ba12:	18cc      	adds	r4, r1, r3
 800ba14:	6025      	str	r5, [r4, #0]
 800ba16:	e003      	b.n	800ba20 <_malloc_r+0x74>
 800ba18:	684b      	ldr	r3, [r1, #4]
 800ba1a:	428c      	cmp	r4, r1
 800ba1c:	d10d      	bne.n	800ba3a <_malloc_r+0x8e>
 800ba1e:	6013      	str	r3, [r2, #0]
 800ba20:	0030      	movs	r0, r6
 800ba22:	f000 f854 	bl	800bace <__malloc_unlock>
 800ba26:	0020      	movs	r0, r4
 800ba28:	2207      	movs	r2, #7
 800ba2a:	300b      	adds	r0, #11
 800ba2c:	1d23      	adds	r3, r4, #4
 800ba2e:	4390      	bics	r0, r2
 800ba30:	1ac3      	subs	r3, r0, r3
 800ba32:	d0e7      	beq.n	800ba04 <_malloc_r+0x58>
 800ba34:	425a      	negs	r2, r3
 800ba36:	50e2      	str	r2, [r4, r3]
 800ba38:	e7e4      	b.n	800ba04 <_malloc_r+0x58>
 800ba3a:	6063      	str	r3, [r4, #4]
 800ba3c:	000c      	movs	r4, r1
 800ba3e:	e7ef      	b.n	800ba20 <_malloc_r+0x74>
 800ba40:	000c      	movs	r4, r1
 800ba42:	6849      	ldr	r1, [r1, #4]
 800ba44:	e7c3      	b.n	800b9ce <_malloc_r+0x22>
 800ba46:	2303      	movs	r3, #3
 800ba48:	1cc4      	adds	r4, r0, #3
 800ba4a:	439c      	bics	r4, r3
 800ba4c:	42a0      	cmp	r0, r4
 800ba4e:	d0e1      	beq.n	800ba14 <_malloc_r+0x68>
 800ba50:	1a21      	subs	r1, r4, r0
 800ba52:	0030      	movs	r0, r6
 800ba54:	f000 f808 	bl	800ba68 <_sbrk_r>
 800ba58:	1c43      	adds	r3, r0, #1
 800ba5a:	d1db      	bne.n	800ba14 <_malloc_r+0x68>
 800ba5c:	e7c7      	b.n	800b9ee <_malloc_r+0x42>
 800ba5e:	46c0      	nop			; (mov r8, r8)
 800ba60:	20000144 	.word	0x20000144
 800ba64:	20000148 	.word	0x20000148

0800ba68 <_sbrk_r>:
 800ba68:	2300      	movs	r3, #0
 800ba6a:	b570      	push	{r4, r5, r6, lr}
 800ba6c:	4c06      	ldr	r4, [pc, #24]	; (800ba88 <_sbrk_r+0x20>)
 800ba6e:	0005      	movs	r5, r0
 800ba70:	0008      	movs	r0, r1
 800ba72:	6023      	str	r3, [r4, #0]
 800ba74:	f7f8 ffa4 	bl	80049c0 <_sbrk>
 800ba78:	1c43      	adds	r3, r0, #1
 800ba7a:	d103      	bne.n	800ba84 <_sbrk_r+0x1c>
 800ba7c:	6823      	ldr	r3, [r4, #0]
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d000      	beq.n	800ba84 <_sbrk_r+0x1c>
 800ba82:	602b      	str	r3, [r5, #0]
 800ba84:	bd70      	pop	{r4, r5, r6, pc}
 800ba86:	46c0      	nop			; (mov r8, r8)
 800ba88:	200006b0 	.word	0x200006b0

0800ba8c <siprintf>:
 800ba8c:	b40e      	push	{r1, r2, r3}
 800ba8e:	b500      	push	{lr}
 800ba90:	490b      	ldr	r1, [pc, #44]	; (800bac0 <siprintf+0x34>)
 800ba92:	b09c      	sub	sp, #112	; 0x70
 800ba94:	ab1d      	add	r3, sp, #116	; 0x74
 800ba96:	9002      	str	r0, [sp, #8]
 800ba98:	9006      	str	r0, [sp, #24]
 800ba9a:	9107      	str	r1, [sp, #28]
 800ba9c:	9104      	str	r1, [sp, #16]
 800ba9e:	4809      	ldr	r0, [pc, #36]	; (800bac4 <siprintf+0x38>)
 800baa0:	4909      	ldr	r1, [pc, #36]	; (800bac8 <siprintf+0x3c>)
 800baa2:	cb04      	ldmia	r3!, {r2}
 800baa4:	9105      	str	r1, [sp, #20]
 800baa6:	6800      	ldr	r0, [r0, #0]
 800baa8:	a902      	add	r1, sp, #8
 800baaa:	9301      	str	r3, [sp, #4]
 800baac:	f000 f872 	bl	800bb94 <_svfiprintf_r>
 800bab0:	2300      	movs	r3, #0
 800bab2:	9a02      	ldr	r2, [sp, #8]
 800bab4:	7013      	strb	r3, [r2, #0]
 800bab6:	b01c      	add	sp, #112	; 0x70
 800bab8:	bc08      	pop	{r3}
 800baba:	b003      	add	sp, #12
 800babc:	4718      	bx	r3
 800babe:	46c0      	nop			; (mov r8, r8)
 800bac0:	7fffffff 	.word	0x7fffffff
 800bac4:	20000074 	.word	0x20000074
 800bac8:	ffff0208 	.word	0xffff0208

0800bacc <__malloc_lock>:
 800bacc:	4770      	bx	lr

0800bace <__malloc_unlock>:
 800bace:	4770      	bx	lr

0800bad0 <__ssputs_r>:
 800bad0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bad2:	688e      	ldr	r6, [r1, #8]
 800bad4:	b085      	sub	sp, #20
 800bad6:	0007      	movs	r7, r0
 800bad8:	000c      	movs	r4, r1
 800bada:	9203      	str	r2, [sp, #12]
 800badc:	9301      	str	r3, [sp, #4]
 800bade:	429e      	cmp	r6, r3
 800bae0:	d83c      	bhi.n	800bb5c <__ssputs_r+0x8c>
 800bae2:	2390      	movs	r3, #144	; 0x90
 800bae4:	898a      	ldrh	r2, [r1, #12]
 800bae6:	00db      	lsls	r3, r3, #3
 800bae8:	421a      	tst	r2, r3
 800baea:	d034      	beq.n	800bb56 <__ssputs_r+0x86>
 800baec:	2503      	movs	r5, #3
 800baee:	6909      	ldr	r1, [r1, #16]
 800baf0:	6823      	ldr	r3, [r4, #0]
 800baf2:	1a5b      	subs	r3, r3, r1
 800baf4:	9302      	str	r3, [sp, #8]
 800baf6:	6963      	ldr	r3, [r4, #20]
 800baf8:	9802      	ldr	r0, [sp, #8]
 800bafa:	435d      	muls	r5, r3
 800bafc:	0feb      	lsrs	r3, r5, #31
 800bafe:	195d      	adds	r5, r3, r5
 800bb00:	9b01      	ldr	r3, [sp, #4]
 800bb02:	106d      	asrs	r5, r5, #1
 800bb04:	3301      	adds	r3, #1
 800bb06:	181b      	adds	r3, r3, r0
 800bb08:	42ab      	cmp	r3, r5
 800bb0a:	d900      	bls.n	800bb0e <__ssputs_r+0x3e>
 800bb0c:	001d      	movs	r5, r3
 800bb0e:	0553      	lsls	r3, r2, #21
 800bb10:	d532      	bpl.n	800bb78 <__ssputs_r+0xa8>
 800bb12:	0029      	movs	r1, r5
 800bb14:	0038      	movs	r0, r7
 800bb16:	f7ff ff49 	bl	800b9ac <_malloc_r>
 800bb1a:	1e06      	subs	r6, r0, #0
 800bb1c:	d109      	bne.n	800bb32 <__ssputs_r+0x62>
 800bb1e:	230c      	movs	r3, #12
 800bb20:	603b      	str	r3, [r7, #0]
 800bb22:	2340      	movs	r3, #64	; 0x40
 800bb24:	2001      	movs	r0, #1
 800bb26:	89a2      	ldrh	r2, [r4, #12]
 800bb28:	4240      	negs	r0, r0
 800bb2a:	4313      	orrs	r3, r2
 800bb2c:	81a3      	strh	r3, [r4, #12]
 800bb2e:	b005      	add	sp, #20
 800bb30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bb32:	9a02      	ldr	r2, [sp, #8]
 800bb34:	6921      	ldr	r1, [r4, #16]
 800bb36:	f7ff ff19 	bl	800b96c <memcpy>
 800bb3a:	89a3      	ldrh	r3, [r4, #12]
 800bb3c:	4a14      	ldr	r2, [pc, #80]	; (800bb90 <__ssputs_r+0xc0>)
 800bb3e:	401a      	ands	r2, r3
 800bb40:	2380      	movs	r3, #128	; 0x80
 800bb42:	4313      	orrs	r3, r2
 800bb44:	81a3      	strh	r3, [r4, #12]
 800bb46:	9b02      	ldr	r3, [sp, #8]
 800bb48:	6126      	str	r6, [r4, #16]
 800bb4a:	18f6      	adds	r6, r6, r3
 800bb4c:	6026      	str	r6, [r4, #0]
 800bb4e:	6165      	str	r5, [r4, #20]
 800bb50:	9e01      	ldr	r6, [sp, #4]
 800bb52:	1aed      	subs	r5, r5, r3
 800bb54:	60a5      	str	r5, [r4, #8]
 800bb56:	9b01      	ldr	r3, [sp, #4]
 800bb58:	429e      	cmp	r6, r3
 800bb5a:	d900      	bls.n	800bb5e <__ssputs_r+0x8e>
 800bb5c:	9e01      	ldr	r6, [sp, #4]
 800bb5e:	0032      	movs	r2, r6
 800bb60:	9903      	ldr	r1, [sp, #12]
 800bb62:	6820      	ldr	r0, [r4, #0]
 800bb64:	f000 fa95 	bl	800c092 <memmove>
 800bb68:	68a3      	ldr	r3, [r4, #8]
 800bb6a:	2000      	movs	r0, #0
 800bb6c:	1b9b      	subs	r3, r3, r6
 800bb6e:	60a3      	str	r3, [r4, #8]
 800bb70:	6823      	ldr	r3, [r4, #0]
 800bb72:	199e      	adds	r6, r3, r6
 800bb74:	6026      	str	r6, [r4, #0]
 800bb76:	e7da      	b.n	800bb2e <__ssputs_r+0x5e>
 800bb78:	002a      	movs	r2, r5
 800bb7a:	0038      	movs	r0, r7
 800bb7c:	f000 fae6 	bl	800c14c <_realloc_r>
 800bb80:	1e06      	subs	r6, r0, #0
 800bb82:	d1e0      	bne.n	800bb46 <__ssputs_r+0x76>
 800bb84:	6921      	ldr	r1, [r4, #16]
 800bb86:	0038      	movs	r0, r7
 800bb88:	f000 fa96 	bl	800c0b8 <_free_r>
 800bb8c:	e7c7      	b.n	800bb1e <__ssputs_r+0x4e>
 800bb8e:	46c0      	nop			; (mov r8, r8)
 800bb90:	fffffb7f 	.word	0xfffffb7f

0800bb94 <_svfiprintf_r>:
 800bb94:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bb96:	b0a1      	sub	sp, #132	; 0x84
 800bb98:	9003      	str	r0, [sp, #12]
 800bb9a:	001d      	movs	r5, r3
 800bb9c:	898b      	ldrh	r3, [r1, #12]
 800bb9e:	000f      	movs	r7, r1
 800bba0:	0016      	movs	r6, r2
 800bba2:	061b      	lsls	r3, r3, #24
 800bba4:	d511      	bpl.n	800bbca <_svfiprintf_r+0x36>
 800bba6:	690b      	ldr	r3, [r1, #16]
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d10e      	bne.n	800bbca <_svfiprintf_r+0x36>
 800bbac:	2140      	movs	r1, #64	; 0x40
 800bbae:	f7ff fefd 	bl	800b9ac <_malloc_r>
 800bbb2:	6038      	str	r0, [r7, #0]
 800bbb4:	6138      	str	r0, [r7, #16]
 800bbb6:	2800      	cmp	r0, #0
 800bbb8:	d105      	bne.n	800bbc6 <_svfiprintf_r+0x32>
 800bbba:	230c      	movs	r3, #12
 800bbbc:	9a03      	ldr	r2, [sp, #12]
 800bbbe:	3801      	subs	r0, #1
 800bbc0:	6013      	str	r3, [r2, #0]
 800bbc2:	b021      	add	sp, #132	; 0x84
 800bbc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bbc6:	2340      	movs	r3, #64	; 0x40
 800bbc8:	617b      	str	r3, [r7, #20]
 800bbca:	2300      	movs	r3, #0
 800bbcc:	ac08      	add	r4, sp, #32
 800bbce:	6163      	str	r3, [r4, #20]
 800bbd0:	3320      	adds	r3, #32
 800bbd2:	7663      	strb	r3, [r4, #25]
 800bbd4:	3310      	adds	r3, #16
 800bbd6:	76a3      	strb	r3, [r4, #26]
 800bbd8:	9507      	str	r5, [sp, #28]
 800bbda:	0035      	movs	r5, r6
 800bbdc:	782b      	ldrb	r3, [r5, #0]
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d001      	beq.n	800bbe6 <_svfiprintf_r+0x52>
 800bbe2:	2b25      	cmp	r3, #37	; 0x25
 800bbe4:	d146      	bne.n	800bc74 <_svfiprintf_r+0xe0>
 800bbe6:	1bab      	subs	r3, r5, r6
 800bbe8:	9305      	str	r3, [sp, #20]
 800bbea:	d00c      	beq.n	800bc06 <_svfiprintf_r+0x72>
 800bbec:	0032      	movs	r2, r6
 800bbee:	0039      	movs	r1, r7
 800bbf0:	9803      	ldr	r0, [sp, #12]
 800bbf2:	f7ff ff6d 	bl	800bad0 <__ssputs_r>
 800bbf6:	1c43      	adds	r3, r0, #1
 800bbf8:	d100      	bne.n	800bbfc <_svfiprintf_r+0x68>
 800bbfa:	e0ae      	b.n	800bd5a <_svfiprintf_r+0x1c6>
 800bbfc:	6962      	ldr	r2, [r4, #20]
 800bbfe:	9b05      	ldr	r3, [sp, #20]
 800bc00:	4694      	mov	ip, r2
 800bc02:	4463      	add	r3, ip
 800bc04:	6163      	str	r3, [r4, #20]
 800bc06:	782b      	ldrb	r3, [r5, #0]
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d100      	bne.n	800bc0e <_svfiprintf_r+0x7a>
 800bc0c:	e0a5      	b.n	800bd5a <_svfiprintf_r+0x1c6>
 800bc0e:	2201      	movs	r2, #1
 800bc10:	2300      	movs	r3, #0
 800bc12:	4252      	negs	r2, r2
 800bc14:	6062      	str	r2, [r4, #4]
 800bc16:	a904      	add	r1, sp, #16
 800bc18:	3254      	adds	r2, #84	; 0x54
 800bc1a:	1852      	adds	r2, r2, r1
 800bc1c:	1c6e      	adds	r6, r5, #1
 800bc1e:	6023      	str	r3, [r4, #0]
 800bc20:	60e3      	str	r3, [r4, #12]
 800bc22:	60a3      	str	r3, [r4, #8]
 800bc24:	7013      	strb	r3, [r2, #0]
 800bc26:	65a3      	str	r3, [r4, #88]	; 0x58
 800bc28:	7831      	ldrb	r1, [r6, #0]
 800bc2a:	2205      	movs	r2, #5
 800bc2c:	4853      	ldr	r0, [pc, #332]	; (800bd7c <_svfiprintf_r+0x1e8>)
 800bc2e:	f000 fa25 	bl	800c07c <memchr>
 800bc32:	1c75      	adds	r5, r6, #1
 800bc34:	2800      	cmp	r0, #0
 800bc36:	d11f      	bne.n	800bc78 <_svfiprintf_r+0xe4>
 800bc38:	6822      	ldr	r2, [r4, #0]
 800bc3a:	06d3      	lsls	r3, r2, #27
 800bc3c:	d504      	bpl.n	800bc48 <_svfiprintf_r+0xb4>
 800bc3e:	2353      	movs	r3, #83	; 0x53
 800bc40:	a904      	add	r1, sp, #16
 800bc42:	185b      	adds	r3, r3, r1
 800bc44:	2120      	movs	r1, #32
 800bc46:	7019      	strb	r1, [r3, #0]
 800bc48:	0713      	lsls	r3, r2, #28
 800bc4a:	d504      	bpl.n	800bc56 <_svfiprintf_r+0xc2>
 800bc4c:	2353      	movs	r3, #83	; 0x53
 800bc4e:	a904      	add	r1, sp, #16
 800bc50:	185b      	adds	r3, r3, r1
 800bc52:	212b      	movs	r1, #43	; 0x2b
 800bc54:	7019      	strb	r1, [r3, #0]
 800bc56:	7833      	ldrb	r3, [r6, #0]
 800bc58:	2b2a      	cmp	r3, #42	; 0x2a
 800bc5a:	d016      	beq.n	800bc8a <_svfiprintf_r+0xf6>
 800bc5c:	0035      	movs	r5, r6
 800bc5e:	2100      	movs	r1, #0
 800bc60:	200a      	movs	r0, #10
 800bc62:	68e3      	ldr	r3, [r4, #12]
 800bc64:	782a      	ldrb	r2, [r5, #0]
 800bc66:	1c6e      	adds	r6, r5, #1
 800bc68:	3a30      	subs	r2, #48	; 0x30
 800bc6a:	2a09      	cmp	r2, #9
 800bc6c:	d94e      	bls.n	800bd0c <_svfiprintf_r+0x178>
 800bc6e:	2900      	cmp	r1, #0
 800bc70:	d018      	beq.n	800bca4 <_svfiprintf_r+0x110>
 800bc72:	e010      	b.n	800bc96 <_svfiprintf_r+0x102>
 800bc74:	3501      	adds	r5, #1
 800bc76:	e7b1      	b.n	800bbdc <_svfiprintf_r+0x48>
 800bc78:	4b40      	ldr	r3, [pc, #256]	; (800bd7c <_svfiprintf_r+0x1e8>)
 800bc7a:	6822      	ldr	r2, [r4, #0]
 800bc7c:	1ac0      	subs	r0, r0, r3
 800bc7e:	2301      	movs	r3, #1
 800bc80:	4083      	lsls	r3, r0
 800bc82:	4313      	orrs	r3, r2
 800bc84:	6023      	str	r3, [r4, #0]
 800bc86:	002e      	movs	r6, r5
 800bc88:	e7ce      	b.n	800bc28 <_svfiprintf_r+0x94>
 800bc8a:	9b07      	ldr	r3, [sp, #28]
 800bc8c:	1d19      	adds	r1, r3, #4
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	9107      	str	r1, [sp, #28]
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	db01      	blt.n	800bc9a <_svfiprintf_r+0x106>
 800bc96:	930b      	str	r3, [sp, #44]	; 0x2c
 800bc98:	e004      	b.n	800bca4 <_svfiprintf_r+0x110>
 800bc9a:	425b      	negs	r3, r3
 800bc9c:	60e3      	str	r3, [r4, #12]
 800bc9e:	2302      	movs	r3, #2
 800bca0:	4313      	orrs	r3, r2
 800bca2:	6023      	str	r3, [r4, #0]
 800bca4:	782b      	ldrb	r3, [r5, #0]
 800bca6:	2b2e      	cmp	r3, #46	; 0x2e
 800bca8:	d10a      	bne.n	800bcc0 <_svfiprintf_r+0x12c>
 800bcaa:	786b      	ldrb	r3, [r5, #1]
 800bcac:	2b2a      	cmp	r3, #42	; 0x2a
 800bcae:	d135      	bne.n	800bd1c <_svfiprintf_r+0x188>
 800bcb0:	9b07      	ldr	r3, [sp, #28]
 800bcb2:	3502      	adds	r5, #2
 800bcb4:	1d1a      	adds	r2, r3, #4
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	9207      	str	r2, [sp, #28]
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	db2b      	blt.n	800bd16 <_svfiprintf_r+0x182>
 800bcbe:	9309      	str	r3, [sp, #36]	; 0x24
 800bcc0:	4e2f      	ldr	r6, [pc, #188]	; (800bd80 <_svfiprintf_r+0x1ec>)
 800bcc2:	7829      	ldrb	r1, [r5, #0]
 800bcc4:	2203      	movs	r2, #3
 800bcc6:	0030      	movs	r0, r6
 800bcc8:	f000 f9d8 	bl	800c07c <memchr>
 800bccc:	2800      	cmp	r0, #0
 800bcce:	d006      	beq.n	800bcde <_svfiprintf_r+0x14a>
 800bcd0:	2340      	movs	r3, #64	; 0x40
 800bcd2:	1b80      	subs	r0, r0, r6
 800bcd4:	4083      	lsls	r3, r0
 800bcd6:	6822      	ldr	r2, [r4, #0]
 800bcd8:	3501      	adds	r5, #1
 800bcda:	4313      	orrs	r3, r2
 800bcdc:	6023      	str	r3, [r4, #0]
 800bcde:	7829      	ldrb	r1, [r5, #0]
 800bce0:	2206      	movs	r2, #6
 800bce2:	4828      	ldr	r0, [pc, #160]	; (800bd84 <_svfiprintf_r+0x1f0>)
 800bce4:	1c6e      	adds	r6, r5, #1
 800bce6:	7621      	strb	r1, [r4, #24]
 800bce8:	f000 f9c8 	bl	800c07c <memchr>
 800bcec:	2800      	cmp	r0, #0
 800bcee:	d03c      	beq.n	800bd6a <_svfiprintf_r+0x1d6>
 800bcf0:	4b25      	ldr	r3, [pc, #148]	; (800bd88 <_svfiprintf_r+0x1f4>)
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d125      	bne.n	800bd42 <_svfiprintf_r+0x1ae>
 800bcf6:	2207      	movs	r2, #7
 800bcf8:	9b07      	ldr	r3, [sp, #28]
 800bcfa:	3307      	adds	r3, #7
 800bcfc:	4393      	bics	r3, r2
 800bcfe:	3308      	adds	r3, #8
 800bd00:	9307      	str	r3, [sp, #28]
 800bd02:	6963      	ldr	r3, [r4, #20]
 800bd04:	9a04      	ldr	r2, [sp, #16]
 800bd06:	189b      	adds	r3, r3, r2
 800bd08:	6163      	str	r3, [r4, #20]
 800bd0a:	e766      	b.n	800bbda <_svfiprintf_r+0x46>
 800bd0c:	4343      	muls	r3, r0
 800bd0e:	2101      	movs	r1, #1
 800bd10:	189b      	adds	r3, r3, r2
 800bd12:	0035      	movs	r5, r6
 800bd14:	e7a6      	b.n	800bc64 <_svfiprintf_r+0xd0>
 800bd16:	2301      	movs	r3, #1
 800bd18:	425b      	negs	r3, r3
 800bd1a:	e7d0      	b.n	800bcbe <_svfiprintf_r+0x12a>
 800bd1c:	2300      	movs	r3, #0
 800bd1e:	200a      	movs	r0, #10
 800bd20:	001a      	movs	r2, r3
 800bd22:	3501      	adds	r5, #1
 800bd24:	6063      	str	r3, [r4, #4]
 800bd26:	7829      	ldrb	r1, [r5, #0]
 800bd28:	1c6e      	adds	r6, r5, #1
 800bd2a:	3930      	subs	r1, #48	; 0x30
 800bd2c:	2909      	cmp	r1, #9
 800bd2e:	d903      	bls.n	800bd38 <_svfiprintf_r+0x1a4>
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d0c5      	beq.n	800bcc0 <_svfiprintf_r+0x12c>
 800bd34:	9209      	str	r2, [sp, #36]	; 0x24
 800bd36:	e7c3      	b.n	800bcc0 <_svfiprintf_r+0x12c>
 800bd38:	4342      	muls	r2, r0
 800bd3a:	2301      	movs	r3, #1
 800bd3c:	1852      	adds	r2, r2, r1
 800bd3e:	0035      	movs	r5, r6
 800bd40:	e7f1      	b.n	800bd26 <_svfiprintf_r+0x192>
 800bd42:	ab07      	add	r3, sp, #28
 800bd44:	9300      	str	r3, [sp, #0]
 800bd46:	003a      	movs	r2, r7
 800bd48:	4b10      	ldr	r3, [pc, #64]	; (800bd8c <_svfiprintf_r+0x1f8>)
 800bd4a:	0021      	movs	r1, r4
 800bd4c:	9803      	ldr	r0, [sp, #12]
 800bd4e:	e000      	b.n	800bd52 <_svfiprintf_r+0x1be>
 800bd50:	bf00      	nop
 800bd52:	9004      	str	r0, [sp, #16]
 800bd54:	9b04      	ldr	r3, [sp, #16]
 800bd56:	3301      	adds	r3, #1
 800bd58:	d1d3      	bne.n	800bd02 <_svfiprintf_r+0x16e>
 800bd5a:	89bb      	ldrh	r3, [r7, #12]
 800bd5c:	980d      	ldr	r0, [sp, #52]	; 0x34
 800bd5e:	065b      	lsls	r3, r3, #25
 800bd60:	d400      	bmi.n	800bd64 <_svfiprintf_r+0x1d0>
 800bd62:	e72e      	b.n	800bbc2 <_svfiprintf_r+0x2e>
 800bd64:	2001      	movs	r0, #1
 800bd66:	4240      	negs	r0, r0
 800bd68:	e72b      	b.n	800bbc2 <_svfiprintf_r+0x2e>
 800bd6a:	ab07      	add	r3, sp, #28
 800bd6c:	9300      	str	r3, [sp, #0]
 800bd6e:	003a      	movs	r2, r7
 800bd70:	4b06      	ldr	r3, [pc, #24]	; (800bd8c <_svfiprintf_r+0x1f8>)
 800bd72:	0021      	movs	r1, r4
 800bd74:	9803      	ldr	r0, [sp, #12]
 800bd76:	f000 f879 	bl	800be6c <_printf_i>
 800bd7a:	e7ea      	b.n	800bd52 <_svfiprintf_r+0x1be>
 800bd7c:	0800cdf4 	.word	0x0800cdf4
 800bd80:	0800cdfa 	.word	0x0800cdfa
 800bd84:	0800cdfe 	.word	0x0800cdfe
 800bd88:	00000000 	.word	0x00000000
 800bd8c:	0800bad1 	.word	0x0800bad1

0800bd90 <_printf_common>:
 800bd90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bd92:	0015      	movs	r5, r2
 800bd94:	9301      	str	r3, [sp, #4]
 800bd96:	688a      	ldr	r2, [r1, #8]
 800bd98:	690b      	ldr	r3, [r1, #16]
 800bd9a:	9000      	str	r0, [sp, #0]
 800bd9c:	000c      	movs	r4, r1
 800bd9e:	4293      	cmp	r3, r2
 800bda0:	da00      	bge.n	800bda4 <_printf_common+0x14>
 800bda2:	0013      	movs	r3, r2
 800bda4:	0022      	movs	r2, r4
 800bda6:	602b      	str	r3, [r5, #0]
 800bda8:	3243      	adds	r2, #67	; 0x43
 800bdaa:	7812      	ldrb	r2, [r2, #0]
 800bdac:	2a00      	cmp	r2, #0
 800bdae:	d001      	beq.n	800bdb4 <_printf_common+0x24>
 800bdb0:	3301      	adds	r3, #1
 800bdb2:	602b      	str	r3, [r5, #0]
 800bdb4:	6823      	ldr	r3, [r4, #0]
 800bdb6:	069b      	lsls	r3, r3, #26
 800bdb8:	d502      	bpl.n	800bdc0 <_printf_common+0x30>
 800bdba:	682b      	ldr	r3, [r5, #0]
 800bdbc:	3302      	adds	r3, #2
 800bdbe:	602b      	str	r3, [r5, #0]
 800bdc0:	2706      	movs	r7, #6
 800bdc2:	6823      	ldr	r3, [r4, #0]
 800bdc4:	401f      	ands	r7, r3
 800bdc6:	d027      	beq.n	800be18 <_printf_common+0x88>
 800bdc8:	0023      	movs	r3, r4
 800bdca:	3343      	adds	r3, #67	; 0x43
 800bdcc:	781b      	ldrb	r3, [r3, #0]
 800bdce:	1e5a      	subs	r2, r3, #1
 800bdd0:	4193      	sbcs	r3, r2
 800bdd2:	6822      	ldr	r2, [r4, #0]
 800bdd4:	0692      	lsls	r2, r2, #26
 800bdd6:	d430      	bmi.n	800be3a <_printf_common+0xaa>
 800bdd8:	0022      	movs	r2, r4
 800bdda:	9901      	ldr	r1, [sp, #4]
 800bddc:	3243      	adds	r2, #67	; 0x43
 800bdde:	9800      	ldr	r0, [sp, #0]
 800bde0:	9e08      	ldr	r6, [sp, #32]
 800bde2:	47b0      	blx	r6
 800bde4:	1c43      	adds	r3, r0, #1
 800bde6:	d025      	beq.n	800be34 <_printf_common+0xa4>
 800bde8:	2306      	movs	r3, #6
 800bdea:	6820      	ldr	r0, [r4, #0]
 800bdec:	682a      	ldr	r2, [r5, #0]
 800bdee:	68e1      	ldr	r1, [r4, #12]
 800bdf0:	4003      	ands	r3, r0
 800bdf2:	2500      	movs	r5, #0
 800bdf4:	2b04      	cmp	r3, #4
 800bdf6:	d103      	bne.n	800be00 <_printf_common+0x70>
 800bdf8:	1a8d      	subs	r5, r1, r2
 800bdfa:	43eb      	mvns	r3, r5
 800bdfc:	17db      	asrs	r3, r3, #31
 800bdfe:	401d      	ands	r5, r3
 800be00:	68a3      	ldr	r3, [r4, #8]
 800be02:	6922      	ldr	r2, [r4, #16]
 800be04:	4293      	cmp	r3, r2
 800be06:	dd01      	ble.n	800be0c <_printf_common+0x7c>
 800be08:	1a9b      	subs	r3, r3, r2
 800be0a:	18ed      	adds	r5, r5, r3
 800be0c:	2700      	movs	r7, #0
 800be0e:	42bd      	cmp	r5, r7
 800be10:	d120      	bne.n	800be54 <_printf_common+0xc4>
 800be12:	2000      	movs	r0, #0
 800be14:	e010      	b.n	800be38 <_printf_common+0xa8>
 800be16:	3701      	adds	r7, #1
 800be18:	68e3      	ldr	r3, [r4, #12]
 800be1a:	682a      	ldr	r2, [r5, #0]
 800be1c:	1a9b      	subs	r3, r3, r2
 800be1e:	42bb      	cmp	r3, r7
 800be20:	ddd2      	ble.n	800bdc8 <_printf_common+0x38>
 800be22:	0022      	movs	r2, r4
 800be24:	2301      	movs	r3, #1
 800be26:	3219      	adds	r2, #25
 800be28:	9901      	ldr	r1, [sp, #4]
 800be2a:	9800      	ldr	r0, [sp, #0]
 800be2c:	9e08      	ldr	r6, [sp, #32]
 800be2e:	47b0      	blx	r6
 800be30:	1c43      	adds	r3, r0, #1
 800be32:	d1f0      	bne.n	800be16 <_printf_common+0x86>
 800be34:	2001      	movs	r0, #1
 800be36:	4240      	negs	r0, r0
 800be38:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800be3a:	2030      	movs	r0, #48	; 0x30
 800be3c:	18e1      	adds	r1, r4, r3
 800be3e:	3143      	adds	r1, #67	; 0x43
 800be40:	7008      	strb	r0, [r1, #0]
 800be42:	0021      	movs	r1, r4
 800be44:	1c5a      	adds	r2, r3, #1
 800be46:	3145      	adds	r1, #69	; 0x45
 800be48:	7809      	ldrb	r1, [r1, #0]
 800be4a:	18a2      	adds	r2, r4, r2
 800be4c:	3243      	adds	r2, #67	; 0x43
 800be4e:	3302      	adds	r3, #2
 800be50:	7011      	strb	r1, [r2, #0]
 800be52:	e7c1      	b.n	800bdd8 <_printf_common+0x48>
 800be54:	0022      	movs	r2, r4
 800be56:	2301      	movs	r3, #1
 800be58:	321a      	adds	r2, #26
 800be5a:	9901      	ldr	r1, [sp, #4]
 800be5c:	9800      	ldr	r0, [sp, #0]
 800be5e:	9e08      	ldr	r6, [sp, #32]
 800be60:	47b0      	blx	r6
 800be62:	1c43      	adds	r3, r0, #1
 800be64:	d0e6      	beq.n	800be34 <_printf_common+0xa4>
 800be66:	3701      	adds	r7, #1
 800be68:	e7d1      	b.n	800be0e <_printf_common+0x7e>
	...

0800be6c <_printf_i>:
 800be6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800be6e:	b089      	sub	sp, #36	; 0x24
 800be70:	9204      	str	r2, [sp, #16]
 800be72:	000a      	movs	r2, r1
 800be74:	3243      	adds	r2, #67	; 0x43
 800be76:	9305      	str	r3, [sp, #20]
 800be78:	9003      	str	r0, [sp, #12]
 800be7a:	9202      	str	r2, [sp, #8]
 800be7c:	7e0a      	ldrb	r2, [r1, #24]
 800be7e:	000c      	movs	r4, r1
 800be80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800be82:	2a6e      	cmp	r2, #110	; 0x6e
 800be84:	d100      	bne.n	800be88 <_printf_i+0x1c>
 800be86:	e086      	b.n	800bf96 <_printf_i+0x12a>
 800be88:	d81f      	bhi.n	800beca <_printf_i+0x5e>
 800be8a:	2a63      	cmp	r2, #99	; 0x63
 800be8c:	d033      	beq.n	800bef6 <_printf_i+0x8a>
 800be8e:	d808      	bhi.n	800bea2 <_printf_i+0x36>
 800be90:	2a00      	cmp	r2, #0
 800be92:	d100      	bne.n	800be96 <_printf_i+0x2a>
 800be94:	e08c      	b.n	800bfb0 <_printf_i+0x144>
 800be96:	2a58      	cmp	r2, #88	; 0x58
 800be98:	d04d      	beq.n	800bf36 <_printf_i+0xca>
 800be9a:	0025      	movs	r5, r4
 800be9c:	3542      	adds	r5, #66	; 0x42
 800be9e:	702a      	strb	r2, [r5, #0]
 800bea0:	e030      	b.n	800bf04 <_printf_i+0x98>
 800bea2:	2a64      	cmp	r2, #100	; 0x64
 800bea4:	d001      	beq.n	800beaa <_printf_i+0x3e>
 800bea6:	2a69      	cmp	r2, #105	; 0x69
 800bea8:	d1f7      	bne.n	800be9a <_printf_i+0x2e>
 800beaa:	6819      	ldr	r1, [r3, #0]
 800beac:	6825      	ldr	r5, [r4, #0]
 800beae:	1d0a      	adds	r2, r1, #4
 800beb0:	0628      	lsls	r0, r5, #24
 800beb2:	d529      	bpl.n	800bf08 <_printf_i+0x9c>
 800beb4:	6808      	ldr	r0, [r1, #0]
 800beb6:	601a      	str	r2, [r3, #0]
 800beb8:	2800      	cmp	r0, #0
 800beba:	da03      	bge.n	800bec4 <_printf_i+0x58>
 800bebc:	232d      	movs	r3, #45	; 0x2d
 800bebe:	9a02      	ldr	r2, [sp, #8]
 800bec0:	4240      	negs	r0, r0
 800bec2:	7013      	strb	r3, [r2, #0]
 800bec4:	4e6b      	ldr	r6, [pc, #428]	; (800c074 <_printf_i+0x208>)
 800bec6:	270a      	movs	r7, #10
 800bec8:	e04f      	b.n	800bf6a <_printf_i+0xfe>
 800beca:	2a73      	cmp	r2, #115	; 0x73
 800becc:	d074      	beq.n	800bfb8 <_printf_i+0x14c>
 800bece:	d808      	bhi.n	800bee2 <_printf_i+0x76>
 800bed0:	2a6f      	cmp	r2, #111	; 0x6f
 800bed2:	d01f      	beq.n	800bf14 <_printf_i+0xa8>
 800bed4:	2a70      	cmp	r2, #112	; 0x70
 800bed6:	d1e0      	bne.n	800be9a <_printf_i+0x2e>
 800bed8:	2220      	movs	r2, #32
 800beda:	6809      	ldr	r1, [r1, #0]
 800bedc:	430a      	orrs	r2, r1
 800bede:	6022      	str	r2, [r4, #0]
 800bee0:	e003      	b.n	800beea <_printf_i+0x7e>
 800bee2:	2a75      	cmp	r2, #117	; 0x75
 800bee4:	d016      	beq.n	800bf14 <_printf_i+0xa8>
 800bee6:	2a78      	cmp	r2, #120	; 0x78
 800bee8:	d1d7      	bne.n	800be9a <_printf_i+0x2e>
 800beea:	0022      	movs	r2, r4
 800beec:	2178      	movs	r1, #120	; 0x78
 800beee:	3245      	adds	r2, #69	; 0x45
 800bef0:	7011      	strb	r1, [r2, #0]
 800bef2:	4e61      	ldr	r6, [pc, #388]	; (800c078 <_printf_i+0x20c>)
 800bef4:	e022      	b.n	800bf3c <_printf_i+0xd0>
 800bef6:	0025      	movs	r5, r4
 800bef8:	681a      	ldr	r2, [r3, #0]
 800befa:	3542      	adds	r5, #66	; 0x42
 800befc:	1d11      	adds	r1, r2, #4
 800befe:	6019      	str	r1, [r3, #0]
 800bf00:	6813      	ldr	r3, [r2, #0]
 800bf02:	702b      	strb	r3, [r5, #0]
 800bf04:	2301      	movs	r3, #1
 800bf06:	e065      	b.n	800bfd4 <_printf_i+0x168>
 800bf08:	6808      	ldr	r0, [r1, #0]
 800bf0a:	601a      	str	r2, [r3, #0]
 800bf0c:	0669      	lsls	r1, r5, #25
 800bf0e:	d5d3      	bpl.n	800beb8 <_printf_i+0x4c>
 800bf10:	b200      	sxth	r0, r0
 800bf12:	e7d1      	b.n	800beb8 <_printf_i+0x4c>
 800bf14:	6819      	ldr	r1, [r3, #0]
 800bf16:	6825      	ldr	r5, [r4, #0]
 800bf18:	1d08      	adds	r0, r1, #4
 800bf1a:	6018      	str	r0, [r3, #0]
 800bf1c:	6808      	ldr	r0, [r1, #0]
 800bf1e:	062e      	lsls	r6, r5, #24
 800bf20:	d505      	bpl.n	800bf2e <_printf_i+0xc2>
 800bf22:	4e54      	ldr	r6, [pc, #336]	; (800c074 <_printf_i+0x208>)
 800bf24:	2708      	movs	r7, #8
 800bf26:	2a6f      	cmp	r2, #111	; 0x6f
 800bf28:	d01b      	beq.n	800bf62 <_printf_i+0xf6>
 800bf2a:	270a      	movs	r7, #10
 800bf2c:	e019      	b.n	800bf62 <_printf_i+0xf6>
 800bf2e:	066d      	lsls	r5, r5, #25
 800bf30:	d5f7      	bpl.n	800bf22 <_printf_i+0xb6>
 800bf32:	b280      	uxth	r0, r0
 800bf34:	e7f5      	b.n	800bf22 <_printf_i+0xb6>
 800bf36:	3145      	adds	r1, #69	; 0x45
 800bf38:	4e4e      	ldr	r6, [pc, #312]	; (800c074 <_printf_i+0x208>)
 800bf3a:	700a      	strb	r2, [r1, #0]
 800bf3c:	6818      	ldr	r0, [r3, #0]
 800bf3e:	6822      	ldr	r2, [r4, #0]
 800bf40:	1d01      	adds	r1, r0, #4
 800bf42:	6800      	ldr	r0, [r0, #0]
 800bf44:	6019      	str	r1, [r3, #0]
 800bf46:	0615      	lsls	r5, r2, #24
 800bf48:	d521      	bpl.n	800bf8e <_printf_i+0x122>
 800bf4a:	07d3      	lsls	r3, r2, #31
 800bf4c:	d502      	bpl.n	800bf54 <_printf_i+0xe8>
 800bf4e:	2320      	movs	r3, #32
 800bf50:	431a      	orrs	r2, r3
 800bf52:	6022      	str	r2, [r4, #0]
 800bf54:	2710      	movs	r7, #16
 800bf56:	2800      	cmp	r0, #0
 800bf58:	d103      	bne.n	800bf62 <_printf_i+0xf6>
 800bf5a:	2320      	movs	r3, #32
 800bf5c:	6822      	ldr	r2, [r4, #0]
 800bf5e:	439a      	bics	r2, r3
 800bf60:	6022      	str	r2, [r4, #0]
 800bf62:	0023      	movs	r3, r4
 800bf64:	2200      	movs	r2, #0
 800bf66:	3343      	adds	r3, #67	; 0x43
 800bf68:	701a      	strb	r2, [r3, #0]
 800bf6a:	6863      	ldr	r3, [r4, #4]
 800bf6c:	60a3      	str	r3, [r4, #8]
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	db58      	blt.n	800c024 <_printf_i+0x1b8>
 800bf72:	2204      	movs	r2, #4
 800bf74:	6821      	ldr	r1, [r4, #0]
 800bf76:	4391      	bics	r1, r2
 800bf78:	6021      	str	r1, [r4, #0]
 800bf7a:	2800      	cmp	r0, #0
 800bf7c:	d154      	bne.n	800c028 <_printf_i+0x1bc>
 800bf7e:	9d02      	ldr	r5, [sp, #8]
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d05a      	beq.n	800c03a <_printf_i+0x1ce>
 800bf84:	0025      	movs	r5, r4
 800bf86:	7833      	ldrb	r3, [r6, #0]
 800bf88:	3542      	adds	r5, #66	; 0x42
 800bf8a:	702b      	strb	r3, [r5, #0]
 800bf8c:	e055      	b.n	800c03a <_printf_i+0x1ce>
 800bf8e:	0655      	lsls	r5, r2, #25
 800bf90:	d5db      	bpl.n	800bf4a <_printf_i+0xde>
 800bf92:	b280      	uxth	r0, r0
 800bf94:	e7d9      	b.n	800bf4a <_printf_i+0xde>
 800bf96:	681a      	ldr	r2, [r3, #0]
 800bf98:	680d      	ldr	r5, [r1, #0]
 800bf9a:	1d10      	adds	r0, r2, #4
 800bf9c:	6949      	ldr	r1, [r1, #20]
 800bf9e:	6018      	str	r0, [r3, #0]
 800bfa0:	6813      	ldr	r3, [r2, #0]
 800bfa2:	062e      	lsls	r6, r5, #24
 800bfa4:	d501      	bpl.n	800bfaa <_printf_i+0x13e>
 800bfa6:	6019      	str	r1, [r3, #0]
 800bfa8:	e002      	b.n	800bfb0 <_printf_i+0x144>
 800bfaa:	066d      	lsls	r5, r5, #25
 800bfac:	d5fb      	bpl.n	800bfa6 <_printf_i+0x13a>
 800bfae:	8019      	strh	r1, [r3, #0]
 800bfb0:	2300      	movs	r3, #0
 800bfb2:	9d02      	ldr	r5, [sp, #8]
 800bfb4:	6123      	str	r3, [r4, #16]
 800bfb6:	e04f      	b.n	800c058 <_printf_i+0x1ec>
 800bfb8:	681a      	ldr	r2, [r3, #0]
 800bfba:	1d11      	adds	r1, r2, #4
 800bfbc:	6019      	str	r1, [r3, #0]
 800bfbe:	6815      	ldr	r5, [r2, #0]
 800bfc0:	2100      	movs	r1, #0
 800bfc2:	6862      	ldr	r2, [r4, #4]
 800bfc4:	0028      	movs	r0, r5
 800bfc6:	f000 f859 	bl	800c07c <memchr>
 800bfca:	2800      	cmp	r0, #0
 800bfcc:	d001      	beq.n	800bfd2 <_printf_i+0x166>
 800bfce:	1b40      	subs	r0, r0, r5
 800bfd0:	6060      	str	r0, [r4, #4]
 800bfd2:	6863      	ldr	r3, [r4, #4]
 800bfd4:	6123      	str	r3, [r4, #16]
 800bfd6:	2300      	movs	r3, #0
 800bfd8:	9a02      	ldr	r2, [sp, #8]
 800bfda:	7013      	strb	r3, [r2, #0]
 800bfdc:	e03c      	b.n	800c058 <_printf_i+0x1ec>
 800bfde:	6923      	ldr	r3, [r4, #16]
 800bfe0:	002a      	movs	r2, r5
 800bfe2:	9904      	ldr	r1, [sp, #16]
 800bfe4:	9803      	ldr	r0, [sp, #12]
 800bfe6:	9d05      	ldr	r5, [sp, #20]
 800bfe8:	47a8      	blx	r5
 800bfea:	1c43      	adds	r3, r0, #1
 800bfec:	d03e      	beq.n	800c06c <_printf_i+0x200>
 800bfee:	6823      	ldr	r3, [r4, #0]
 800bff0:	079b      	lsls	r3, r3, #30
 800bff2:	d415      	bmi.n	800c020 <_printf_i+0x1b4>
 800bff4:	9b07      	ldr	r3, [sp, #28]
 800bff6:	68e0      	ldr	r0, [r4, #12]
 800bff8:	4298      	cmp	r0, r3
 800bffa:	da39      	bge.n	800c070 <_printf_i+0x204>
 800bffc:	0018      	movs	r0, r3
 800bffe:	e037      	b.n	800c070 <_printf_i+0x204>
 800c000:	0022      	movs	r2, r4
 800c002:	2301      	movs	r3, #1
 800c004:	3219      	adds	r2, #25
 800c006:	9904      	ldr	r1, [sp, #16]
 800c008:	9803      	ldr	r0, [sp, #12]
 800c00a:	9e05      	ldr	r6, [sp, #20]
 800c00c:	47b0      	blx	r6
 800c00e:	1c43      	adds	r3, r0, #1
 800c010:	d02c      	beq.n	800c06c <_printf_i+0x200>
 800c012:	3501      	adds	r5, #1
 800c014:	68e3      	ldr	r3, [r4, #12]
 800c016:	9a07      	ldr	r2, [sp, #28]
 800c018:	1a9b      	subs	r3, r3, r2
 800c01a:	42ab      	cmp	r3, r5
 800c01c:	dcf0      	bgt.n	800c000 <_printf_i+0x194>
 800c01e:	e7e9      	b.n	800bff4 <_printf_i+0x188>
 800c020:	2500      	movs	r5, #0
 800c022:	e7f7      	b.n	800c014 <_printf_i+0x1a8>
 800c024:	2800      	cmp	r0, #0
 800c026:	d0ad      	beq.n	800bf84 <_printf_i+0x118>
 800c028:	9d02      	ldr	r5, [sp, #8]
 800c02a:	0039      	movs	r1, r7
 800c02c:	f7f4 f8fa 	bl	8000224 <__aeabi_uidivmod>
 800c030:	5c73      	ldrb	r3, [r6, r1]
 800c032:	3d01      	subs	r5, #1
 800c034:	702b      	strb	r3, [r5, #0]
 800c036:	2800      	cmp	r0, #0
 800c038:	d1f7      	bne.n	800c02a <_printf_i+0x1be>
 800c03a:	2f08      	cmp	r7, #8
 800c03c:	d109      	bne.n	800c052 <_printf_i+0x1e6>
 800c03e:	6823      	ldr	r3, [r4, #0]
 800c040:	07db      	lsls	r3, r3, #31
 800c042:	d506      	bpl.n	800c052 <_printf_i+0x1e6>
 800c044:	6863      	ldr	r3, [r4, #4]
 800c046:	6922      	ldr	r2, [r4, #16]
 800c048:	4293      	cmp	r3, r2
 800c04a:	dc02      	bgt.n	800c052 <_printf_i+0x1e6>
 800c04c:	2330      	movs	r3, #48	; 0x30
 800c04e:	3d01      	subs	r5, #1
 800c050:	702b      	strb	r3, [r5, #0]
 800c052:	9b02      	ldr	r3, [sp, #8]
 800c054:	1b5b      	subs	r3, r3, r5
 800c056:	6123      	str	r3, [r4, #16]
 800c058:	9b05      	ldr	r3, [sp, #20]
 800c05a:	aa07      	add	r2, sp, #28
 800c05c:	9300      	str	r3, [sp, #0]
 800c05e:	0021      	movs	r1, r4
 800c060:	9b04      	ldr	r3, [sp, #16]
 800c062:	9803      	ldr	r0, [sp, #12]
 800c064:	f7ff fe94 	bl	800bd90 <_printf_common>
 800c068:	1c43      	adds	r3, r0, #1
 800c06a:	d1b8      	bne.n	800bfde <_printf_i+0x172>
 800c06c:	2001      	movs	r0, #1
 800c06e:	4240      	negs	r0, r0
 800c070:	b009      	add	sp, #36	; 0x24
 800c072:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c074:	0800ce05 	.word	0x0800ce05
 800c078:	0800ce16 	.word	0x0800ce16

0800c07c <memchr>:
 800c07c:	b2c9      	uxtb	r1, r1
 800c07e:	1882      	adds	r2, r0, r2
 800c080:	4290      	cmp	r0, r2
 800c082:	d101      	bne.n	800c088 <memchr+0xc>
 800c084:	2000      	movs	r0, #0
 800c086:	4770      	bx	lr
 800c088:	7803      	ldrb	r3, [r0, #0]
 800c08a:	428b      	cmp	r3, r1
 800c08c:	d0fb      	beq.n	800c086 <memchr+0xa>
 800c08e:	3001      	adds	r0, #1
 800c090:	e7f6      	b.n	800c080 <memchr+0x4>

0800c092 <memmove>:
 800c092:	b510      	push	{r4, lr}
 800c094:	4288      	cmp	r0, r1
 800c096:	d902      	bls.n	800c09e <memmove+0xc>
 800c098:	188b      	adds	r3, r1, r2
 800c09a:	4298      	cmp	r0, r3
 800c09c:	d303      	bcc.n	800c0a6 <memmove+0x14>
 800c09e:	2300      	movs	r3, #0
 800c0a0:	e007      	b.n	800c0b2 <memmove+0x20>
 800c0a2:	5c8b      	ldrb	r3, [r1, r2]
 800c0a4:	5483      	strb	r3, [r0, r2]
 800c0a6:	3a01      	subs	r2, #1
 800c0a8:	d2fb      	bcs.n	800c0a2 <memmove+0x10>
 800c0aa:	bd10      	pop	{r4, pc}
 800c0ac:	5ccc      	ldrb	r4, [r1, r3]
 800c0ae:	54c4      	strb	r4, [r0, r3]
 800c0b0:	3301      	adds	r3, #1
 800c0b2:	429a      	cmp	r2, r3
 800c0b4:	d1fa      	bne.n	800c0ac <memmove+0x1a>
 800c0b6:	e7f8      	b.n	800c0aa <memmove+0x18>

0800c0b8 <_free_r>:
 800c0b8:	b570      	push	{r4, r5, r6, lr}
 800c0ba:	0005      	movs	r5, r0
 800c0bc:	2900      	cmp	r1, #0
 800c0be:	d010      	beq.n	800c0e2 <_free_r+0x2a>
 800c0c0:	1f0c      	subs	r4, r1, #4
 800c0c2:	6823      	ldr	r3, [r4, #0]
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	da00      	bge.n	800c0ca <_free_r+0x12>
 800c0c8:	18e4      	adds	r4, r4, r3
 800c0ca:	0028      	movs	r0, r5
 800c0cc:	f7ff fcfe 	bl	800bacc <__malloc_lock>
 800c0d0:	4a1d      	ldr	r2, [pc, #116]	; (800c148 <_free_r+0x90>)
 800c0d2:	6813      	ldr	r3, [r2, #0]
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d105      	bne.n	800c0e4 <_free_r+0x2c>
 800c0d8:	6063      	str	r3, [r4, #4]
 800c0da:	6014      	str	r4, [r2, #0]
 800c0dc:	0028      	movs	r0, r5
 800c0de:	f7ff fcf6 	bl	800bace <__malloc_unlock>
 800c0e2:	bd70      	pop	{r4, r5, r6, pc}
 800c0e4:	42a3      	cmp	r3, r4
 800c0e6:	d909      	bls.n	800c0fc <_free_r+0x44>
 800c0e8:	6821      	ldr	r1, [r4, #0]
 800c0ea:	1860      	adds	r0, r4, r1
 800c0ec:	4283      	cmp	r3, r0
 800c0ee:	d1f3      	bne.n	800c0d8 <_free_r+0x20>
 800c0f0:	6818      	ldr	r0, [r3, #0]
 800c0f2:	685b      	ldr	r3, [r3, #4]
 800c0f4:	1841      	adds	r1, r0, r1
 800c0f6:	6021      	str	r1, [r4, #0]
 800c0f8:	e7ee      	b.n	800c0d8 <_free_r+0x20>
 800c0fa:	0013      	movs	r3, r2
 800c0fc:	685a      	ldr	r2, [r3, #4]
 800c0fe:	2a00      	cmp	r2, #0
 800c100:	d001      	beq.n	800c106 <_free_r+0x4e>
 800c102:	42a2      	cmp	r2, r4
 800c104:	d9f9      	bls.n	800c0fa <_free_r+0x42>
 800c106:	6819      	ldr	r1, [r3, #0]
 800c108:	1858      	adds	r0, r3, r1
 800c10a:	42a0      	cmp	r0, r4
 800c10c:	d10b      	bne.n	800c126 <_free_r+0x6e>
 800c10e:	6820      	ldr	r0, [r4, #0]
 800c110:	1809      	adds	r1, r1, r0
 800c112:	1858      	adds	r0, r3, r1
 800c114:	6019      	str	r1, [r3, #0]
 800c116:	4282      	cmp	r2, r0
 800c118:	d1e0      	bne.n	800c0dc <_free_r+0x24>
 800c11a:	6810      	ldr	r0, [r2, #0]
 800c11c:	6852      	ldr	r2, [r2, #4]
 800c11e:	1841      	adds	r1, r0, r1
 800c120:	6019      	str	r1, [r3, #0]
 800c122:	605a      	str	r2, [r3, #4]
 800c124:	e7da      	b.n	800c0dc <_free_r+0x24>
 800c126:	42a0      	cmp	r0, r4
 800c128:	d902      	bls.n	800c130 <_free_r+0x78>
 800c12a:	230c      	movs	r3, #12
 800c12c:	602b      	str	r3, [r5, #0]
 800c12e:	e7d5      	b.n	800c0dc <_free_r+0x24>
 800c130:	6821      	ldr	r1, [r4, #0]
 800c132:	1860      	adds	r0, r4, r1
 800c134:	4282      	cmp	r2, r0
 800c136:	d103      	bne.n	800c140 <_free_r+0x88>
 800c138:	6810      	ldr	r0, [r2, #0]
 800c13a:	6852      	ldr	r2, [r2, #4]
 800c13c:	1841      	adds	r1, r0, r1
 800c13e:	6021      	str	r1, [r4, #0]
 800c140:	6062      	str	r2, [r4, #4]
 800c142:	605c      	str	r4, [r3, #4]
 800c144:	e7ca      	b.n	800c0dc <_free_r+0x24>
 800c146:	46c0      	nop			; (mov r8, r8)
 800c148:	20000144 	.word	0x20000144

0800c14c <_realloc_r>:
 800c14c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c14e:	0007      	movs	r7, r0
 800c150:	000d      	movs	r5, r1
 800c152:	0016      	movs	r6, r2
 800c154:	2900      	cmp	r1, #0
 800c156:	d105      	bne.n	800c164 <_realloc_r+0x18>
 800c158:	0011      	movs	r1, r2
 800c15a:	f7ff fc27 	bl	800b9ac <_malloc_r>
 800c15e:	0004      	movs	r4, r0
 800c160:	0020      	movs	r0, r4
 800c162:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c164:	2a00      	cmp	r2, #0
 800c166:	d103      	bne.n	800c170 <_realloc_r+0x24>
 800c168:	f7ff ffa6 	bl	800c0b8 <_free_r>
 800c16c:	0034      	movs	r4, r6
 800c16e:	e7f7      	b.n	800c160 <_realloc_r+0x14>
 800c170:	f000 f812 	bl	800c198 <_malloc_usable_size_r>
 800c174:	002c      	movs	r4, r5
 800c176:	42b0      	cmp	r0, r6
 800c178:	d2f2      	bcs.n	800c160 <_realloc_r+0x14>
 800c17a:	0031      	movs	r1, r6
 800c17c:	0038      	movs	r0, r7
 800c17e:	f7ff fc15 	bl	800b9ac <_malloc_r>
 800c182:	1e04      	subs	r4, r0, #0
 800c184:	d0ec      	beq.n	800c160 <_realloc_r+0x14>
 800c186:	0029      	movs	r1, r5
 800c188:	0032      	movs	r2, r6
 800c18a:	f7ff fbef 	bl	800b96c <memcpy>
 800c18e:	0029      	movs	r1, r5
 800c190:	0038      	movs	r0, r7
 800c192:	f7ff ff91 	bl	800c0b8 <_free_r>
 800c196:	e7e3      	b.n	800c160 <_realloc_r+0x14>

0800c198 <_malloc_usable_size_r>:
 800c198:	1f0b      	subs	r3, r1, #4
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	1f18      	subs	r0, r3, #4
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	da01      	bge.n	800c1a6 <_malloc_usable_size_r+0xe>
 800c1a2:	580b      	ldr	r3, [r1, r0]
 800c1a4:	18c0      	adds	r0, r0, r3
 800c1a6:	4770      	bx	lr

0800c1a8 <_init>:
 800c1a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1aa:	46c0      	nop			; (mov r8, r8)
 800c1ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c1ae:	bc08      	pop	{r3}
 800c1b0:	469e      	mov	lr, r3
 800c1b2:	4770      	bx	lr

0800c1b4 <_fini>:
 800c1b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1b6:	46c0      	nop			; (mov r8, r8)
 800c1b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c1ba:	bc08      	pop	{r3}
 800c1bc:	469e      	mov	lr, r3
 800c1be:	4770      	bx	lr
